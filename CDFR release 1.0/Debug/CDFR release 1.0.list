
CDFR release 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002944  08018ebc  08018ebc  00028ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b800  0801b800  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b800  0801b800  0002b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b808  0801b808  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b808  0801b808  0002b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b80c  0801b80c  0002b80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801b810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f78  200001f4  0801ba04  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000916c  0801ba04  0003916c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000630d6  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009e18  00000000  00000000  000932fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002600  00000000  00000000  0009d118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002310  00000000  00000000  0009f718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038932  00000000  00000000  000a1a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000372d6  00000000  00000000  000da35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f83b4  00000000  00000000  00111630  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002099e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a574  00000000  00000000  00209a60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018ea4 	.word	0x08018ea4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08018ea4 	.word	0x08018ea4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(VL53L1_Dev_t dev, uint8_t new_address)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
	VL53L1X_ERROR status = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f99c 	bl	8001164 <VL53L1_WrByte>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_Dev_t dev)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp=0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	737b      	strb	r3, [r7, #13]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000e50:	232d      	movs	r3, #45	; 0x2d
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e00e      	b.n	8000e74 <VL53L1X_SensorInit+0x38>
		status = VL53L1_WrByte(&dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	3b2d      	subs	r3, #45	; 0x2d
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <VL53L1X_SensorInit+0xa4>)
 8000e60:	5cd2      	ldrb	r2, [r2, r3]
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f97d 	bl	8001164 <VL53L1_WrByte>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b87      	cmp	r3, #135	; 0x87
 8000e78:	d9ed      	bls.n	8000e56 <VL53L1X_SensorInit+0x1a>
	}
	status = VL53L1X_StartRanging(dev);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f86c 	bl	8000f58 <VL53L1X_StartRanging>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8000e84:	e007      	b.n	8000e96 <VL53L1X_SensorInit+0x5a>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8000e86:	f107 030d 	add.w	r3, r7, #13
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f88b 	bl	8000fa8 <VL53L1X_CheckForDataReady>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f4      	beq.n	8000e86 <VL53L1X_SensorInit+0x4a>
	}
	tmp  = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	737b      	strb	r3, [r7, #13]
	status = VL53L1X_ClearInterrupt(dev);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f81f 	bl	8000ee4 <VL53L1X_ClearInterrupt>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f868 	bl	8000f80 <VL53L1X_StopRanging>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2209      	movs	r2, #9
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f952 	bl	8001164 <VL53L1_WrByte>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210b      	movs	r1, #11
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f94a 	bl	8001164 <VL53L1_WrByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73bb      	strb	r3, [r7, #14]
	return status;
 8000ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	0801b204 	.word	0x0801b204

08000ee4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_Dev_t dev)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2186      	movs	r1, #134	; 0x86
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f934 	bl	8001164 <VL53L1_WrByte>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(&dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_Dev_t dev, uint8_t *pInterruptPolarity)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(&dev, GPIO_HV_MUX__CTRL, &Temp);
 8000f1a:	f107 020e 	add.w	r2, r7, #14
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2130      	movs	r1, #48	; 0x30
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f938 	bl	8001198 <VL53L1_RdByte>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	701a      	strb	r2, [r3, #0]
	return status;
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_Dev_t dev)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	2187      	movs	r1, #135	; 0x87
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f8fa 	bl	8001164 <VL53L1_WrByte>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_Dev_t dev)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2187      	movs	r1, #135	; 0x87
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f8e6 	bl	8001164 <VL53L1_WrByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_Dev_t dev, uint8_t *isDataReady)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000fb6:	f107 030d 	add.w	r3, r7, #13
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffa5 	bl	8000f0c <VL53L1X_GetInterruptPolarity>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(&dev, GPIO__TIO_HV_STATUS, &Temp);
 8000fc6:	f107 020e 	add.w	r2, r7, #14
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2131      	movs	r1, #49	; 0x31
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8e2 	bl	8001198 <VL53L1_RdByte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <VL53L1X_CheckForDataReady+0x52>
		if ((Temp & 1) == IntPol)
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	7b7a      	ldrb	r2, [r7, #13]
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d103      	bne.n	8000ff4 <VL53L1X_CheckForDataReady+0x4c>
			*isDataReady = 1;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e002      	b.n	8000ffa <VL53L1X_CheckForDataReady+0x52>
		else
			*isDataReady = 0;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_Dev_t dev, uint8_t *state)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(&dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001018:	f107 020e 	add.w	r2, r7, #14
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	21e5      	movs	r1, #229	; 0xe5
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f8b9 	bl	8001198 <VL53L1_RdByte>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 800102a:	7bba      	ldrb	r2, [r7, #14]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	701a      	strb	r2, [r3, #0]
	return status;
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_Dev_t dev, uint16_t *distance)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(&dev,
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2196      	movs	r1, #150	; 0x96
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f8b9 	bl	80011ca <VL53L1_RdWord>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800105c:	89ba      	ldrh	r2, [r7, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	801a      	strh	r2, [r3, #0]
	return status;
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(VL53L1_Dev_t dev, uint8_t *rangeStatus)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	status = VL53L1_RdByte(&dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 800107e:	f107 020e 	add.w	r2, r7, #14
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2189      	movs	r1, #137	; 0x89
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f886 	bl	8001198 <VL53L1_RdByte>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt&0x1F;
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73bb      	strb	r3, [r7, #14]
	switch (RgSt) {
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	3b03      	subs	r3, #3
 800109e:	2b14      	cmp	r3, #20
 80010a0:	d853      	bhi.n	800114a <VL53L1X_GetRangeStatus+0xda>
 80010a2:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <VL53L1X_GetRangeStatus+0x38>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	0800111b 	.word	0x0800111b
 80010ac:	08001109 	.word	0x08001109
 80010b0:	08001115 	.word	0x08001115
 80010b4:	08001103 	.word	0x08001103
 80010b8:	08001127 	.word	0x08001127
 80010bc:	0800110f 	.word	0x0800110f
 80010c0:	080010fd 	.word	0x080010fd
 80010c4:	0800114b 	.word	0x0800114b
 80010c8:	0800114b 	.word	0x0800114b
 80010cc:	0800112d 	.word	0x0800112d
 80010d0:	08001145 	.word	0x08001145
 80010d4:	0800114b 	.word	0x0800114b
 80010d8:	0800114b 	.word	0x0800114b
 80010dc:	0800114b 	.word	0x0800114b
 80010e0:	0800114b 	.word	0x0800114b
 80010e4:	08001133 	.word	0x08001133
 80010e8:	08001121 	.word	0x08001121
 80010ec:	0800114b 	.word	0x0800114b
 80010f0:	0800114b 	.word	0x0800114b
 80010f4:	08001139 	.word	0x08001139
 80010f8:	0800113f 	.word	0x0800113f
	case 9:
		RgSt = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73bb      	strb	r3, [r7, #14]
		break;
 8001100:	e026      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 6:
		RgSt = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	73bb      	strb	r3, [r7, #14]
		break;
 8001106:	e023      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 4:
		RgSt = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	73bb      	strb	r3, [r7, #14]
		break;
 800110c:	e020      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 8:
		RgSt = 3;
 800110e:	2303      	movs	r3, #3
 8001110:	73bb      	strb	r3, [r7, #14]
		break;
 8001112:	e01d      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 5:
		RgSt = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	73bb      	strb	r3, [r7, #14]
		break;
 8001118:	e01a      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 3:
		RgSt = 5;
 800111a:	2305      	movs	r3, #5
 800111c:	73bb      	strb	r3, [r7, #14]
		break;
 800111e:	e017      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 19:
		RgSt = 6;
 8001120:	2306      	movs	r3, #6
 8001122:	73bb      	strb	r3, [r7, #14]
		break;
 8001124:	e014      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 7:
		RgSt = 7;
 8001126:	2307      	movs	r3, #7
 8001128:	73bb      	strb	r3, [r7, #14]
		break;
 800112a:	e011      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 12:
		RgSt = 9;
 800112c:	2309      	movs	r3, #9
 800112e:	73bb      	strb	r3, [r7, #14]
		break;
 8001130:	e00e      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 18:
		RgSt = 10;
 8001132:	230a      	movs	r3, #10
 8001134:	73bb      	strb	r3, [r7, #14]
		break;
 8001136:	e00b      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 22:
		RgSt = 11;
 8001138:	230b      	movs	r3, #11
 800113a:	73bb      	strb	r3, [r7, #14]
		break;
 800113c:	e008      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 23:
		RgSt = 12;
 800113e:	230c      	movs	r3, #12
 8001140:	73bb      	strb	r3, [r7, #14]
		break;
 8001142:	e005      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 13:
		RgSt = 13;
 8001144:	230d      	movs	r3, #13
 8001146:	73bb      	strb	r3, [r7, #14]
		break;
 8001148:	e002      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	default:
		RgSt = 255;
 800114a:	23ff      	movs	r3, #255	; 0xff
 800114c:	73bb      	strb	r3, [r7, #14]
		break;
 800114e:	bf00      	nop
	}
	*rangeStatus = RgSt;
 8001150:	7bba      	ldrb	r2, [r7, #14]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	701a      	strb	r2, [r3, #0]
	return status;
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop

08001164 <VL53L1_WrByte>:
#include <math.h>


#include "i2c.h"

int8_t VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]

	uint8_t status = I2C_STATUS_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
	status = F_I2C2_WriteRegister(Dev->addr, index, &data, 1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b2d8      	uxtb	r0, r3
 800117e:	1c7a      	adds	r2, r7, #1
 8001180:	8879      	ldrh	r1, [r7, #2]
 8001182:	2301      	movs	r3, #1
 8001184:	f013 fec0 	bl	8014f08 <F_I2C2_WriteRegister>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]

	return status; // to be implemented
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <VL53L1_RdByte>:
	status = F_I2C2_WriteRegister(Dev->addr, index, &to_send[3], 1);

	return status; // to be implemented
}

int8_t VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	460b      	mov	r3, r1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	817b      	strh	r3, [r7, #10]

	uint8_t status = I2C_STATUS_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 1, data);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	8979      	ldrh	r1, [r7, #10]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f013 ff2b 	bl	8015010 <F_I2C2_ReadRegisterVL53L1X>
 80011ba:	4603      	mov	r3, r0
 80011bc:	75fb      	strb	r3, [r7, #23]

	return status; // to be implemented
 80011be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <VL53L1_RdWord>:

int8_t VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	460b      	mov	r3, r1
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	817b      	strh	r3, [r7, #10]

	uint8_t read_values[2] = {0,0};
 80011d8:	2300      	movs	r3, #0
 80011da:	753b      	strb	r3, [r7, #20]
 80011dc:	2300      	movs	r3, #0
 80011de:	757b      	strb	r3, [r7, #21]
	uint8_t status = I2C_STATUS_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	75fb      	strb	r3, [r7, #23]

	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 2, read_values);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	8979      	ldrh	r1, [r7, #10]
 80011f0:	2202      	movs	r2, #2
 80011f2:	f013 ff0d 	bl	8015010 <F_I2C2_ReadRegisterVL53L1X>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]

	*data = (read_values[0] << 8) + read_values[1];
 80011fa:	7d3b      	ldrb	r3, [r7, #20]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b29a      	uxth	r2, r3
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29a      	uxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	801a      	strh	r2, [r3, #0]

	return status; // to be implemented
 800120e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94d 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f014 f9fc 	bl	801564c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f965 	bl	800154e <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 f92d 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000128 	.word	0x20000128
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20000000 	.word	0x20000000

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000004 	.word	0x20000004
 80012e4:	200003f8 	.word	0x200003f8

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200003f8 	.word	0x200003f8

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_Delay+0x40>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000004 	.word	0x20000004

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001578:	4baa      	ldr	r3, [pc, #680]	; (8001824 <HAL_ETH_Init+0x2bc>)
 800157a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e185      	b.n	800189a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f012 fe68 	bl	8014278 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	4b9e      	ldr	r3, [pc, #632]	; (8001828 <HAL_ETH_Init+0x2c0>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	4a9d      	ldr	r2, [pc, #628]	; (8001828 <HAL_ETH_Init+0x2c0>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6453      	str	r3, [r2, #68]	; 0x44
 80015b8:	4b9b      	ldr	r3, [pc, #620]	; (8001828 <HAL_ETH_Init+0x2c0>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015c4:	4b99      	ldr	r3, [pc, #612]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a98      	ldr	r2, [pc, #608]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015ce:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015d0:	4b96      	ldr	r3, [pc, #600]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4994      	ldr	r1, [pc, #592]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015f6:	f7ff fe77 	bl	80012e8 <HAL_GetTick>
 80015fa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015fc:	e011      	b.n	8001622 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015fe:	f7ff fe73 	bl	80012e8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800160c:	d909      	bls.n	8001622 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e13b      	b.n	800189a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e4      	bne.n	80015fe <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f023 031c 	bic.w	r3, r3, #28
 8001642:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001644:	f003 f812 	bl	800466c <HAL_RCC_GetHCLKFreq>
 8001648:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4a78      	ldr	r2, [pc, #480]	; (8001830 <HAL_ETH_Init+0x2c8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d908      	bls.n	8001664 <HAL_ETH_Init+0xfc>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4a77      	ldr	r2, [pc, #476]	; (8001834 <HAL_ETH_Init+0x2cc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d804      	bhi.n	8001664 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e027      	b.n	80016b4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	4a73      	ldr	r2, [pc, #460]	; (8001834 <HAL_ETH_Init+0x2cc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d908      	bls.n	800167e <HAL_ETH_Init+0x116>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4a72      	ldr	r2, [pc, #456]	; (8001838 <HAL_ETH_Init+0x2d0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d804      	bhi.n	800167e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f043 030c 	orr.w	r3, r3, #12
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e01a      	b.n	80016b4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4a6d      	ldr	r2, [pc, #436]	; (8001838 <HAL_ETH_Init+0x2d0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d903      	bls.n	800168e <HAL_ETH_Init+0x126>
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4a6c      	ldr	r2, [pc, #432]	; (800183c <HAL_ETH_Init+0x2d4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d911      	bls.n	80016b2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4a6a      	ldr	r2, [pc, #424]	; (800183c <HAL_ETH_Init+0x2d4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d908      	bls.n	80016a8 <HAL_ETH_Init+0x140>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4a69      	ldr	r2, [pc, #420]	; (8001840 <HAL_ETH_Init+0x2d8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d804      	bhi.n	80016a8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e005      	b.n	80016b4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	e000      	b.n	80016b4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80016b2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80016bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fb9a 	bl	8001dfc <HAL_ETH_WritePHYRegister>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80016d2:	6939      	ldr	r1, [r7, #16]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fc27 	bl	8001f28 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0d9      	b.n	800189a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80016e6:	20ff      	movs	r0, #255	; 0xff
 80016e8:	f7ff fe0a 	bl	8001300 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a7 	beq.w	8001844 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016f6:	f7ff fdf7 	bl	80012e8 <HAL_GetTick>
 80016fa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fb11 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800170a:	f7ff fded 	bl	80012e8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d90f      	bls.n	800173c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001720:	6939      	ldr	r1, [r7, #16]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fc00 	bl	8001f28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0ae      	b.n	800189a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0da      	beq.n	80016fc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800174a:	2100      	movs	r1, #0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fb55 	bl	8001dfc <HAL_ETH_WritePHYRegister>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fbe2 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800176c:	2301      	movs	r3, #1
 800176e:	e094      	b.n	800189a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fdba 	bl	80012e8 <HAL_GetTick>
 8001774:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	461a      	mov	r2, r3
 800177c:	2101      	movs	r1, #1
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fad4 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001784:	f7ff fdb0 	bl	80012e8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d90f      	bls.n	80017b6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800179a:	6939      	ldr	r1, [r7, #16]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fbc3 	bl	8001f28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e071      	b.n	800189a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0da      	beq.n	8001776 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	461a      	mov	r2, r3
 80017c6:	211f      	movs	r1, #31
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 faaf 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017d8:	6939      	ldr	r1, [r7, #16]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fba4 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017e8:	2301      	movs	r3, #1
 80017ea:	e056      	b.n	800189a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	e002      	b.n	8001806 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	e037      	b.n	8001888 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	e032      	b.n	8001888 <HAL_ETH_Init+0x320>
 8001822:	bf00      	nop
 8001824:	03938700 	.word	0x03938700
 8001828:	40023800 	.word	0x40023800
 800182c:	40013800 	.word	0x40013800
 8001830:	01312cff 	.word	0x01312cff
 8001834:	02160ebf 	.word	0x02160ebf
 8001838:	039386ff 	.word	0x039386ff
 800183c:	05f5e0ff 	.word	0x05f5e0ff
 8001840:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001854:	4313      	orrs	r3, r2
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 facd 	bl	8001dfc <HAL_ETH_WritePHYRegister>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fb5a 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00c      	b.n	800189a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001880:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001884:	f7ff fd3c 	bl	8001300 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001888:	6939      	ldr	r1, [r7, #16]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fb4c 	bl	8001f28 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop

080018a4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_ETH_DMATxDescListInit+0x20>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e052      	b.n	800196a <HAL_ETH_DMATxDescListInit+0xc6>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e030      	b.n	8001942 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	015b      	lsls	r3, r3, #5
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018f0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3b01      	subs	r3, #1
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d208      	bcs.n	8001936 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	015b      	lsls	r3, r3, #5
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	4413      	add	r3, r2
 800192e:	461a      	mov	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	e002      	b.n	800193c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3ca      	bcc.n	80018e0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	3310      	adds	r3, #16
 8001956:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001976:	b480      	push	{r7}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_ETH_DMARxDescListInit+0x20>
 8001992:	2302      	movs	r3, #2
 8001994:	e056      	b.n	8001a44 <HAL_ETH_DMARxDescListInit+0xce>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2202      	movs	r2, #2
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e034      	b.n	8001a1c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	4413      	add	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019c2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019ca:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	461a      	mov	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d208      	bcs.n	8001a10 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	015b      	lsls	r3, r3, #5
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	4413      	add	r3, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	e002      	b.n	8001a16 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3c6      	bcc.n	80019b2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	330c      	adds	r3, #12
 8001a30:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ETH_TransmitFrame+0x24>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0cd      	b.n	8001c10 <HAL_ETH_TransmitFrame+0x1c0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0b8      	b.n	8001c10 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da09      	bge.n	8001abc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2212      	movs	r2, #18
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0a9      	b.n	8001c10 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d915      	bls.n	8001af2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	4a54      	ldr	r2, [pc, #336]	; (8001c1c <HAL_ETH_TransmitFrame+0x1cc>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <HAL_ETH_TransmitFrame+0x1cc>)
 8001ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e001      	b.n	8001af6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001af2:	2301      	movs	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d11c      	bne.n	8001b36 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001b0a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b16:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b26:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b34:	e04b      	b.n	8001bce <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e044      	b.n	8001bc6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b4a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b60:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b6a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d116      	bne.n	8001ba4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b84:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_ETH_TransmitFrame+0x1d0>)
 8001b8a:	fb02 f203 	mul.w	r2, r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b96:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ba2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bb2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3b6      	bcc.n	8001b3c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	3314      	adds	r3, #20
 8001bec:	2204      	movs	r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	ac02b00b 	.word	0xac02b00b
 8001c20:	fffffa0c 	.word	0xfffffa0c

08001c24 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ETH_GetReceivedFrame+0x1a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e070      	b.n	8001d20 <HAL_ETH_GetReceivedFrame+0xfc>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db5a      	blt.n	8001d0e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d030      	beq.n	8001cc8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d103      	bne.n	8001c80 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c94:	3b04      	subs	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e02b      	b.n	8001d20 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cf6:	e00a      	b.n	8001d0e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	460b      	mov	r3, r1
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b82      	cmp	r3, #130	; 0x82
 8001d4c:	d101      	bne.n	8001d52 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e050      	b.n	8001df4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2282      	movs	r2, #130	; 0x82
 8001d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 031c 	and.w	r3, r3, #28
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8a1b      	ldrh	r3, [r3, #16]
 8001d6e:	02db      	lsls	r3, r3, #11
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d78:	897b      	ldrh	r3, [r7, #10]
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f023 0302 	bic.w	r3, r3, #2
 8001d8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9e:	f7ff faa3 	bl	80012e8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001da4:	e015      	b.n	8001dd2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001da6:	f7ff fa9f 	bl	80012e8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d309      	bcc.n	8001dca <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e014      	b.n	8001df4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e4      	bne.n	8001da6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	460b      	mov	r3, r1
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b42      	cmp	r3, #66	; 0x42
 8001e1c:	d101      	bne.n	8001e22 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e04e      	b.n	8001ec0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2242      	movs	r2, #66	; 0x42
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 031c 	and.w	r3, r3, #28
 8001e38:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8a1b      	ldrh	r3, [r3, #16]
 8001e3e:	02db      	lsls	r3, r3, #11
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e48:	897b      	ldrh	r3, [r7, #10]
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff fa36 	bl	80012e8 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e7e:	e015      	b.n	8001eac <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e80:	f7ff fa32 	bl	80012e8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d309      	bcc.n	8001ea4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e00d      	b.n	8001ec0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1e4      	bne.n	8001e80 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ETH_Start+0x16>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e01f      	b.n	8001f1e <HAL_ETH_Start+0x56>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa1c 	bl	800232c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fa36 	bl	8002366 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fa80 	bl	8002400 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fa4d 	bl	80023a0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fa62 	bl	80023d0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b0      	sub	sp, #192	; 0xc0
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f44:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f56:	2300      	movs	r3, #0
 8001f58:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f72:	663b      	str	r3, [r7, #96]	; 0x60
 8001f74:	e001      	b.n	8001f7a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f84:	2300      	movs	r3, #0
 8001f86:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ffc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002000:	4bac      	ldr	r3, [pc, #688]	; (80022b4 <ETH_MACDMAConfig+0x38c>)
 8002002:	4013      	ands	r3, r2
 8002004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002008:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800200c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002010:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002014:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800201a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800201c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800201e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002022:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002028:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800202a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800202c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800202e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002030:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002034:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002038:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800203a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800203c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800203e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002050:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff f94f 	bl	8001300 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800206c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800206e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002070:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002074:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800207a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800207c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002080:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002086:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800208c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002090:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002098:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800209a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff f92a 	bl	8001300 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020dc:	4013      	ands	r3, r2
 80020de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002104:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002106:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002118:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff f8eb 	bl	8001300 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002132:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002134:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002138:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff f8d6 	bl	8001300 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002166:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002182:	2304      	movs	r3, #4
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b2:	3318      	adds	r3, #24
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <ETH_MACDMAConfig+0x390>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80021d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80021d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021e6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fa:	3318      	adds	r3, #24
 80021fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002200:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	3318      	adds	r3, #24
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002212:	2001      	movs	r0, #1
 8002214:	f7ff f874 	bl	8001300 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	3318      	adds	r3, #24
 8002222:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002226:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800222c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002230:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002234:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002238:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800223e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002242:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff f84d 	bl	8001300 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002272:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10f      	bne.n	800229c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	331c      	adds	r3, #28
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002298:	331c      	adds	r3, #28
 800229a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	461a      	mov	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f809 	bl	80022bc <ETH_MACAddressConfig>
}
 80022aa:	bf00      	nop
 80022ac:	37c0      	adds	r7, #192	; 0xc0
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	ff20810f 	.word	0xff20810f
 80022b8:	f8de3f23 	.word	0xf8de3f23

080022bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3305      	adds	r3, #5
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	3204      	adds	r2, #4
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <ETH_MACAddressConfig+0x68>)
 80022de:	4413      	add	r3, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3303      	adds	r3, #3
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	061a      	lsls	r2, r3, #24
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3302      	adds	r3, #2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3301      	adds	r3, #1
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4313      	orrs	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <ETH_MACAddressConfig+0x6c>)
 800230e:	4413      	add	r3, r2
 8002310:	461a      	mov	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40028040 	.word	0x40028040
 8002328:	40028044 	.word	0x40028044

0800232c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0208 	orr.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002350:	2001      	movs	r0, #1
 8002352:	f000 f87f 	bl	8002454 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	601a      	str	r2, [r3, #0]
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0204 	orr.w	r2, r2, #4
 8002380:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 f862 	bl	8002454 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b0:	3318      	adds	r3, #24
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	3318      	adds	r3, #24
 80023c2:	601a      	str	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	3318      	adds	r3, #24
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0202 	orr.w	r2, r2, #2
 80023ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f0:	3318      	adds	r3, #24
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	3318      	adds	r3, #24
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	3318      	adds	r3, #24
 8002426:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002430:	3318      	adds	r3, #24
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002436:	2001      	movs	r0, #1
 8002438:	f000 f80c 	bl	8002454 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	3318      	adds	r3, #24
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <ETH_Delay+0x34>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <ETH_Delay+0x38>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0a5b      	lsrs	r3, r3, #9
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002470:	bf00      	nop
  } 
  while (Delay --);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	60fa      	str	r2, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f9      	bne.n	8002470 <ETH_Delay+0x1c>
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000128 	.word	0x20000128
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e177      	b.n	800279c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8166 	bne.w	8002796 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x4a>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d00b      	beq.n	8002576 <HAL_GPIO_Init+0xe6>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256a:	2b11      	cmp	r3, #17
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b12      	cmp	r3, #18
 8002574:	d130      	bne.n	80025d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 0201 	and.w	r2, r3, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80c0 	beq.w	8002796 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_GPIO_Init+0x320>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a64      	ldr	r2, [pc, #400]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002632:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_GPIO_Init+0x324>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_GPIO_Init+0x328>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d037      	beq.n	80026ce <HAL_GPIO_Init+0x23e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_GPIO_Init+0x32c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d031      	beq.n	80026ca <HAL_GPIO_Init+0x23a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <HAL_GPIO_Init+0x330>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02b      	beq.n	80026c6 <HAL_GPIO_Init+0x236>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a54      	ldr	r2, [pc, #336]	; (80027c4 <HAL_GPIO_Init+0x334>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d025      	beq.n	80026c2 <HAL_GPIO_Init+0x232>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a53      	ldr	r2, [pc, #332]	; (80027c8 <HAL_GPIO_Init+0x338>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <HAL_GPIO_Init+0x22e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_GPIO_Init+0x33c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_Init+0x22a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <HAL_GPIO_Init+0x340>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x226>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_GPIO_Init+0x344>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x222>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x348>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x21e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_GPIO_Init+0x34c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x21a>
 80026a6:	2309      	movs	r3, #9
 80026a8:	e012      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026aa:	230a      	movs	r3, #10
 80026ac:	e010      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ae:	2308      	movs	r3, #8
 80026b0:	e00e      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e00c      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026b6:	2306      	movs	r3, #6
 80026b8:	e00a      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026be:	2304      	movs	r3, #4
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e0:	4934      	ldr	r1, [pc, #208]	; (80027b4 <HAL_GPIO_Init+0x324>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ee:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <HAL_GPIO_Init+0x350>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002712:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f ae84 	bls.w	80024ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	3724      	adds	r7, #36	; 0x24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022400 	.word	0x40022400
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e10f      	b.n	8002a4a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f012 fae4 	bl	8014e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800285c:	f001 ff12 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8002860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a7b      	ldr	r2, [pc, #492]	; (8002a54 <HAL_I2C_Init+0x23c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d807      	bhi.n	800287c <HAL_I2C_Init+0x64>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a7a      	ldr	r2, [pc, #488]	; (8002a58 <HAL_I2C_Init+0x240>)
 8002870:	4293      	cmp	r3, r2
 8002872:	bf94      	ite	ls
 8002874:	2301      	movls	r3, #1
 8002876:	2300      	movhi	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e006      	b.n	800288a <HAL_I2C_Init+0x72>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a77      	ldr	r2, [pc, #476]	; (8002a5c <HAL_I2C_Init+0x244>)
 8002880:	4293      	cmp	r3, r2
 8002882:	bf94      	ite	ls
 8002884:	2301      	movls	r3, #1
 8002886:	2300      	movhi	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0db      	b.n	8002a4a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a72      	ldr	r2, [pc, #456]	; (8002a60 <HAL_I2C_Init+0x248>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a64      	ldr	r2, [pc, #400]	; (8002a54 <HAL_I2C_Init+0x23c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d802      	bhi.n	80028cc <HAL_I2C_Init+0xb4>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3301      	adds	r3, #1
 80028ca:	e009      	b.n	80028e0 <HAL_I2C_Init+0xc8>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_I2C_Init+0x24c>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	3301      	adds	r3, #1
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4956      	ldr	r1, [pc, #344]	; (8002a54 <HAL_I2C_Init+0x23c>)
 80028fc:	428b      	cmp	r3, r1
 80028fe:	d80d      	bhi.n	800291c <HAL_I2C_Init+0x104>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e59      	subs	r1, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fbb1 f3f3 	udiv	r3, r1, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b04      	cmp	r3, #4
 8002916:	bf38      	it	cc
 8002918:	2304      	movcc	r3, #4
 800291a:	e04f      	b.n	80029bc <HAL_I2C_Init+0x1a4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_I2C_Init+0x130>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e012      	b.n	800296e <HAL_I2C_Init+0x156>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	0099      	lsls	r1, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Init+0x15e>
 8002972:	2301      	movs	r3, #1
 8002974:	e022      	b.n	80029bc <HAL_I2C_Init+0x1a4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <HAL_I2C_Init+0x184>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e58      	subs	r0, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	440b      	add	r3, r1
 800298c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299a:	e00f      	b.n	80029bc <HAL_I2C_Init+0x1a4>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6809      	ldr	r1, [r1, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6911      	ldr	r1, [r2, #16]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	000186a0 	.word	0x000186a0
 8002a58:	001e847f 	.word	0x001e847f
 8002a5c:	003d08ff 	.word	0x003d08ff
 8002a60:	431bde83 	.word	0x431bde83
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d129      	bne.n	8002ad2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2224      	movs	r2, #36	; 0x24
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0210 	bic.w	r2, r2, #16
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d12a      	bne.n	8002b50 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2224      	movs	r2, #36	; 0x24
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	f023 030f 	bic.w	r3, r3, #15
 8002b20:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	89fb      	ldrh	r3, [r7, #14]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	89fa      	ldrh	r2, [r7, #14]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e000      	b.n	8002b52 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b60:	b08f      	sub	sp, #60	; 0x3c
 8002b62:	af0a      	add	r7, sp, #40	; 0x28
 8002b64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e10f      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f013 fcfa 	bl	8016584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2203      	movs	r2, #3
 8002b94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fd4b 	bl	800564a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	687e      	ldr	r6, [r7, #4]
 8002bbc:	466d      	mov	r5, sp
 8002bbe:	f106 0410 	add.w	r4, r6, #16
 8002bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd2:	1d33      	adds	r3, r6, #4
 8002bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	f002 fc22 	bl	8005420 <USB_CoreInit>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0d0      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 fd39 	bl	800566c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e04a      	b.n	8002c96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333d      	adds	r3, #61	; 0x3d
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	333c      	adds	r3, #60	; 0x3c
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	b298      	uxth	r0, r3
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3342      	adds	r3, #66	; 0x42
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	333f      	adds	r3, #63	; 0x3f
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3344      	adds	r3, #68	; 0x44
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3348      	adds	r3, #72	; 0x48
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3350      	adds	r3, #80	; 0x50
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3af      	bcc.n	8002c00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e044      	b.n	8002d30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3b5      	bcc.n	8002ca6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	687e      	ldr	r6, [r7, #4]
 8002d42:	466d      	mov	r5, sp
 8002d44:	f106 0410 	add.w	r4, r6, #16
 8002d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d58:	1d33      	adds	r3, r6, #4
 8002d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5c:	6838      	ldr	r0, [r7, #0]
 8002d5e:	f002 fcaf 	bl	80056c0 <USB_DevInit>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e00d      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fca4 	bl	80066d6 <USB_DevDisconnect>

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_PCD_Start+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e020      	b.n	8002df6 <HAL_PCD_Start+0x5e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d109      	bne.n	8002dd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d005      	beq.n	8002dd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fc62 	bl	80066a6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fc1e 	bl	8005628 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b08d      	sub	sp, #52	; 0x34
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fd09 	bl	800682c <USB_GetMode>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 838e 	bne.w	800353e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fc6d 	bl	8006706 <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8384 	beq.w	800353c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fc64 	bl	8006706 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d107      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f002 0202 	and.w	r2, r2, #2
 8002e56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fc52 	bl	8006706 <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e6c:	d17b      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fc58 	bl	800672c <USB_ReadDevAllOutEpInterrupt>
 8002e7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e7e:	e06f      	b.n	8002f60 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d064      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fc7d 	bl	8006794 <USB_ReadDevOutEPInterrupt>
 8002e9a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fe0e 	bl	8003adc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 ff0d 	bl	8003cec <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2310      	movs	r3, #16
 8002efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d015      	beq.n	8002f36 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2101      	movs	r1, #1
 8002f20:	f003 fcc8 	bl	80068b4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	2320      	movs	r3, #32
 8002f34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	3301      	adds	r3, #1
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d18c      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fbcb 	bl	8006706 <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f7a:	f040 80c4 	bne.w	8003106 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fbec 	bl	8006760 <USB_ReadDevAllInEpInterrupt>
 8002f88:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f8e:	e0b6      	b.n	80030fe <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80ab 	beq.w	80030f2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fc12 	bl	80067d0 <USB_ReadDevInEPInterrupt>
 8002fac:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05b      	beq.n	8003070 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69f9      	ldr	r1, [r7, #28]
 8002fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fd8:	4013      	ands	r3, r2
 8002fda:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2301      	movs	r3, #1
 8002fec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d11b      	bne.n	800302e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3348      	adds	r3, #72	; 0x48
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4403      	add	r3, r0
 8003016:	3344      	adds	r3, #68	; 0x44
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4419      	add	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	3348      	adds	r3, #72	; 0x48
 800302c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	b2db      	uxtb	r3, r3
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f013 fb34 	bl	80166a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d116      	bne.n	8003070 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <HAL_PCD_IRQHandler+0x272>
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3350      	adds	r3, #80	; 0x50
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003068:	461a      	mov	r2, r3
 800306a:	2101      	movs	r1, #1
 800306c:	f003 fc22 	bl	80068b4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003086:	461a      	mov	r2, r3
 8003088:	2308      	movs	r3, #8
 800308a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a2:	461a      	mov	r2, r3
 80030a4:	2310      	movs	r3, #16
 80030a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030be:	461a      	mov	r2, r3
 80030c0:	2340      	movs	r3, #64	; 0x40
 80030c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030da:	461a      	mov	r2, r3
 80030dc:	2302      	movs	r3, #2
 80030de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fc67 	bl	80039c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	f47f af45 	bne.w	8002f90 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fafb 	bl	8006706 <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800311a:	d122      	bne.n	8003162 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003136:	2b01      	cmp	r3, #1
 8003138:	d108      	bne.n	800314c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003142:	2100      	movs	r1, #0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fe89 	bl	8003e5c <HAL_PCDEx_LPM_Callback>
 800314a:	e002      	b.n	8003152 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f013 fb1f 	bl	8016790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 facd 	bl	8006706 <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d112      	bne.n	800319e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d102      	bne.n	800318e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f013 fadb 	bl	8016744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800319c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 faaf 	bl	8006706 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	f040 80a7 	bne.w	8003304 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2110      	movs	r1, #16
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 fbe7 	bl	80059a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	e036      	b.n	800324a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	461a      	mov	r2, r3
 80031ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003200:	0151      	lsls	r1, r2, #5
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	440a      	add	r2, r1
 8003206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800320a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800320e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003222:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003234:	0151      	lsls	r1, r2, #5
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	440a      	add	r2, r1
 800323a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800323e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003242:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	3301      	adds	r3, #1
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003250:	429a      	cmp	r2, r3
 8003252:	d3c3      	bcc.n	80031dc <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003262:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003266:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003280:	f043 030b 	orr.w	r3, r3, #11
 8003284:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f043 030b 	orr.w	r3, r3, #11
 800329a:	6453      	str	r3, [r2, #68]	; 0x44
 800329c:	e015      	b.n	80032ca <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c4:	f043 030b 	orr.w	r3, r3, #11
 80032c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ee:	461a      	mov	r2, r3
 80032f0:	f003 fae0 	bl	80068b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 f9fc 	bl	8006706 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003318:	d124      	bne.n	8003364 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fa92 	bl	8006848 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fb9c 	bl	8005a66 <USB_GetDevSpeed>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681c      	ldr	r4, [r3, #0]
 800333a:	f001 f997 	bl	800466c <HAL_RCC_GetHCLKFreq>
 800333e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	4620      	mov	r0, r4
 800334a:	f002 f8cb 	bl	80054e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f013 f9cf 	bl	80166f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 f9cc 	bl	8006706 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d161      	bne.n	800343c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0210 	bic.w	r2, r2, #16
 8003386:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	0c5b      	lsrs	r3, r3, #17
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d124      	bne.n	80033fe <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d035      	beq.n	800342c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	6a38      	ldr	r0, [r7, #32]
 80033d4:	f003 f844 	bl	8006460 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	619a      	str	r2, [r3, #24]
 80033fc:	e016      	b.n	800342c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	0c5b      	lsrs	r3, r3, #17
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	2b06      	cmp	r3, #6
 8003408:	d110      	bne.n	800342c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003410:	2208      	movs	r2, #8
 8003412:	4619      	mov	r1, r3
 8003414:	6a38      	ldr	r0, [r7, #32]
 8003416:	f003 f823 	bl	8006460 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003426:	441a      	add	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0210 	orr.w	r2, r2, #16
 800343a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 f960 	bl	8006706 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d10a      	bne.n	8003466 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f013 f940 	bl	80166d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 0208 	and.w	r2, r2, #8
 8003464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 f94b 	bl	8006706 <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347a:	d10f      	bne.n	800349c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f013 f9a2 	bl	80167d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800349a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 f930 	bl	8006706 <USB_ReadInterrupts>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b0:	d10f      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f013 f975 	bl	80167ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80034d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 f915 	bl	8006706 <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d10a      	bne.n	80034fe <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f013 f983 	bl	80167f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f003 f8ff 	bl	8006706 <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d115      	bne.n	800353e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f013 f973 	bl	8016810 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e000      	b.n	800353e <HAL_PCD_IRQHandler+0x740>
      return;
 800353c:	bf00      	nop
    }
  }
}
 800353e:	3734      	adds	r7, #52	; 0x34
 8003540:	46bd      	mov	sp, r7
 8003542:	bd90      	pop	{r4, r7, pc}

08003544 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_PCD_SetAddress+0x1a>
 800355a:	2302      	movs	r3, #2
 800355c:	e013      	b.n	8003586 <HAL_PCD_SetAddress+0x42>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f003 f86f 	bl	800665a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	461a      	mov	r2, r3
 800359c:	4603      	mov	r3, r0
 800359e:	70fb      	strb	r3, [r7, #3]
 80035a0:	460b      	mov	r3, r1
 80035a2:	803b      	strh	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da0f      	bge.n	80035d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	f003 020f 	and.w	r2, r3, #15
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	3338      	adds	r3, #56	; 0x38
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	3304      	adds	r3, #4
 80035ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	705a      	strb	r2, [r3, #1]
 80035d2:	e00f      	b.n	80035f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	3304      	adds	r3, #4
 80035ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003600:	883a      	ldrh	r2, [r7, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	78ba      	ldrb	r2, [r7, #2]
 800360a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800361e:	78bb      	ldrb	r3, [r7, #2]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d102      	bne.n	800362a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_PCD_EP_Open+0xaa>
 8003634:	2302      	movs	r3, #2
 8003636:	e00e      	b.n	8003656 <HAL_PCD_EP_Open+0xc8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f002 fa32 	bl	8005ab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003654:	7afb      	ldrb	r3, [r7, #11]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800366a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da0f      	bge.n	8003692 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3338      	adds	r3, #56	; 0x38
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	705a      	strb	r2, [r3, #1]
 8003690:	e00f      	b.n	80036b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	3304      	adds	r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_PCD_EP_Close+0x6e>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e00e      	b.n	80036ea <HAL_PCD_EP_Close+0x8c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 fa70 	bl	8005bc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	460b      	mov	r3, r1
 8003700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2200      	movs	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	b2da      	uxtb	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	f002 fcf3 	bl	8006150 <USB_EP0StartXfer>
 800376a:	e008      	b.n	800377e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	6979      	ldr	r1, [r7, #20]
 800377a:	f002 faa5 	bl	8005cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	460b      	mov	r3, r1
 80037c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c8:	7afb      	ldrb	r3, [r7, #11]
 80037ca:	f003 020f 	and.w	r2, r3, #15
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	3338      	adds	r3, #56	; 0x38
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	3304      	adds	r3, #4
 80037de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2201      	movs	r2, #1
 80037f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003812:	7afb      	ldrb	r3, [r7, #11]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	6979      	ldr	r1, [r7, #20]
 800382a:	f002 fc91 	bl	8006150 <USB_EP0StartXfer>
 800382e:	e008      	b.n	8003842 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	6979      	ldr	r1, [r7, #20]
 800383e:	f002 fa43 	bl	8005cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d901      	bls.n	800386a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e050      	b.n	800390c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800386a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386e:	2b00      	cmp	r3, #0
 8003870:	da0f      	bge.n	8003892 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	f003 020f 	and.w	r2, r3, #15
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3338      	adds	r3, #56	; 0x38
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	705a      	strb	r2, [r3, #1]
 8003890:	e00d      	b.n	80038ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_PCD_EP_SetStall+0x82>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e01e      	b.n	800390c <HAL_PCD_EP_SetStall+0xc0>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fde8 	bl	80064b2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	b2d9      	uxtb	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038fc:	461a      	mov	r2, r3
 80038fe:	f002 ffd9 	bl	80068b4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d901      	bls.n	8003932 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e042      	b.n	80039b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	da0f      	bge.n	800395a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	3338      	adds	r3, #56	; 0x38
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	705a      	strb	r2, [r3, #1]
 8003958:	e00f      	b.n	800397a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_PCD_EP_ClrStall+0x86>
 8003996:	2302      	movs	r3, #2
 8003998:	e00e      	b.n	80039b8 <HAL_PCD_EP_ClrStall+0xa4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 fdf0 	bl	800658e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3338      	adds	r3, #56	; 0x38
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d901      	bls.n	80039f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e06c      	b.n	8003ad2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d902      	bls.n	8003a14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3303      	adds	r3, #3
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a1c:	e02b      	b.n	8003a76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d902      	bls.n	8003a3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3303      	adds	r3, #3
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68d9      	ldr	r1, [r3, #12]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	4603      	mov	r3, r0
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f002 fccc 	bl	80063f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	441a      	add	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	441a      	add	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d809      	bhi.n	8003aa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d203      	bcs.n	8003aa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1be      	bne.n	8003a1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d811      	bhi.n	8003ad0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	6939      	ldr	r1, [r7, #16]
 8003ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003acc:	4013      	ands	r3, r2
 8003ace:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	333c      	adds	r3, #60	; 0x3c
 8003af4:	3304      	adds	r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	f040 80b3 	bne.w	8003c7a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a70      	ldr	r2, [pc, #448]	; (8003ce4 <PCD_EP_OutXfrComplete_int+0x208>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d90e      	bls.n	8003b44 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b42:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f012 fd7f 	bl	8016648 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b54:	461a      	mov	r2, r3
 8003b56:	2101      	movs	r1, #1
 8003b58:	f002 feac 	bl	80068b4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	6093      	str	r3, [r2, #8]
 8003b6e:	e0b3      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b86:	461a      	mov	r2, r3
 8003b88:	2320      	movs	r3, #32
 8003b8a:	6093      	str	r3, [r2, #8]
 8003b8c:	e0a4      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 809f 	bne.w	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a51      	ldr	r2, [pc, #324]	; (8003ce4 <PCD_EP_OutXfrComplete_int+0x208>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d90f      	bls.n	8003bc2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbe:	6093      	str	r3, [r2, #8]
 8003bc0:	e08a      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bd4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	0159      	lsls	r1, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	440b      	add	r3, r1
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003be8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4403      	add	r3, r0
 8003bf8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bfc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4403      	add	r3, r0
 8003c20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4419      	add	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4403      	add	r3, r0
 8003c36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c3a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f012 fd12 	bl	801666c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d144      	bne.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d138      	bne.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c70:	461a      	mov	r2, r3
 8003c72:	2101      	movs	r1, #1
 8003c74:	f002 fe1e 	bl	80068b4 <USB_EP0_OutStart>
 8003c78:	e02e      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d124      	bne.n	8003ccc <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	6093      	str	r3, [r2, #8]
 8003ca0:	e01a      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2320      	movs	r3, #32
 8003cbc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f012 fcd1 	bl	801666c <HAL_PCD_DataOutStageCallback>
 8003cca:	e005      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f012 fcca 	bl	801666c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	4f54300a 	.word	0x4f54300a
 8003ce8:	4f54310a 	.word	0x4f54310a

08003cec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	333c      	adds	r3, #60	; 0x3c
 8003d04:	3304      	adds	r3, #4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d113      	bne.n	8003d4a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d922      	bls.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01d      	beq.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	e012      	b.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10e      	bne.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f012 fc69 	bl	8016648 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d90c      	bls.n	8003d98 <PCD_EP_OutSetupPacket_int+0xac>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d90:	461a      	mov	r2, r3
 8003d92:	2101      	movs	r1, #1
 8003d94:	f002 fd8e 	bl	80068b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	4f54300a 	.word	0x4f54300a
 8003da8:	4f54310a 	.word	0x4f54310a

08003dac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
 8003db8:	4613      	mov	r3, r2
 8003dba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dca:	883b      	ldrh	r3, [r7, #0]
 8003dcc:	0419      	lsls	r1, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003dd8:	e028      	b.n	8003e2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	4413      	add	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e00d      	b.n	8003e0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	3340      	adds	r3, #64	; 0x40
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	3301      	adds	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d3ec      	bcc.n	8003dee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e14:	883b      	ldrh	r3, [r7, #0]
 8003e16:	0418      	lsls	r0, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	4302      	orrs	r2, r0
 8003e24:	3340      	adds	r3, #64	; 0x40
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e22d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d075      	beq.n	8003f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e92:	4ba3      	ldr	r3, [pc, #652]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9e:	4ba0      	ldr	r3, [pc, #640]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d112      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eaa:	4b9d      	ldr	r3, [pc, #628]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	4b99      	ldr	r3, [pc, #612]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05b      	beq.n	8003f7c <HAL_RCC_OscConfig+0x108>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d157      	bne.n	8003f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e208      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d106      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x74>
 8003eda:	4b91      	ldr	r3, [pc, #580]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a90      	ldr	r2, [pc, #576]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e01d      	b.n	8003f24 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x98>
 8003ef2:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a8a      	ldr	r2, [pc, #552]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b88      	ldr	r3, [pc, #544]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a87      	ldr	r2, [pc, #540]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCC_OscConfig+0xb0>
 8003f0c:	4b84      	ldr	r3, [pc, #528]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a83      	ldr	r2, [pc, #524]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a80      	ldr	r2, [pc, #512]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd f9dc 	bl	80012e8 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd f9d8 	bl	80012e8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	; 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1cd      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0xc0>
 8003f52:	e014      	b.n	8003f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fd f9c8 	bl	80012e8 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd f9c4 	bl	80012e8 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e1b9      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0xe8>
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d063      	beq.n	8004052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f96:	4b62      	ldr	r3, [pc, #392]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d11c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b5f      	ldr	r3, [pc, #380]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d116      	bne.n	8003fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fae:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x152>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e18d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4952      	ldr	r1, [pc, #328]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	e03a      	b.n	8004052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b4f      	ldr	r3, [pc, #316]	; (8004124 <HAL_RCC_OscConfig+0x2b0>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fd f97d 	bl	80012e8 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fd f979 	bl	80012e8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e16e      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	4b46      	ldr	r3, [pc, #280]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4940      	ldr	r1, [pc, #256]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_OscConfig+0x2b0>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd f95c 	bl	80012e8 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004034:	f7fd f958 	bl	80012e8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e14d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	4b36      	ldr	r3, [pc, #216]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d030      	beq.n	80040c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004066:	4b30      	ldr	r3, [pc, #192]	; (8004128 <HAL_RCC_OscConfig+0x2b4>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd f93c 	bl	80012e8 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd f938 	bl	80012e8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e12d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x200>
 8004092:	e015      	b.n	80040c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_OscConfig+0x2b4>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409a:	f7fd f925 	bl	80012e8 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fd f921 	bl	80012e8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e116      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a0 	beq.w	800420e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10f      	bne.n	80040fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_OscConfig+0x2b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d121      	bne.n	800414e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCC_OscConfig+0x2b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a07      	ldr	r2, [pc, #28]	; (800412c <HAL_RCC_OscConfig+0x2b8>)
 8004110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004116:	f7fd f8e7 	bl	80012e8 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	e011      	b.n	8004142 <HAL_RCC_OscConfig+0x2ce>
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	42470000 	.word	0x42470000
 8004128:	42470e80 	.word	0x42470e80
 800412c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fd f8da 	bl	80012e8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0cf      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <HAL_RCC_OscConfig+0x478>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x2f0>
 8004156:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a65      	ldr	r2, [pc, #404]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	e01c      	b.n	800419e <HAL_RCC_OscConfig+0x32a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d10c      	bne.n	8004186 <HAL_RCC_OscConfig+0x312>
 800416c:	4b60      	ldr	r3, [pc, #384]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a5f      	ldr	r2, [pc, #380]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	4a5c      	ldr	r2, [pc, #368]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6713      	str	r3, [r2, #112]	; 0x70
 8004184:	e00b      	b.n	800419e <HAL_RCC_OscConfig+0x32a>
 8004186:	4b5a      	ldr	r3, [pc, #360]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a59      	ldr	r2, [pc, #356]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	4b57      	ldr	r3, [pc, #348]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a56      	ldr	r2, [pc, #344]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d015      	beq.n	80041d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd f89f 	bl	80012e8 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fd f89b 	bl	80012e8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e08e      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c4:	4b4a      	ldr	r3, [pc, #296]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0ee      	beq.n	80041ae <HAL_RCC_OscConfig+0x33a>
 80041d0:	e014      	b.n	80041fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d2:	f7fd f889 	bl	80012e8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fd f885 	bl	80012e8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e078      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f0:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a3a      	ldr	r2, [pc, #232]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d064      	beq.n	80042e0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004216:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b08      	cmp	r3, #8
 8004220:	d05c      	beq.n	80042dc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d141      	bne.n	80042ae <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCC_OscConfig+0x480>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fd f85a 	bl	80012e8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd f856 	bl	80012e8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e04b      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	3b01      	subs	r3, #1
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	491d      	ldr	r1, [pc, #116]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <HAL_RCC_OscConfig+0x480>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fd f82f 	bl	80012e8 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428e:	f7fd f82b 	bl	80012e8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e020      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x41a>
 80042ac:	e018      	b.n	80042e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_RCC_OscConfig+0x480>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fd f818 	bl	80012e8 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd f814 	bl	80012e8 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x448>
 80042da:	e001      	b.n	80042e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40007000 	.word	0x40007000
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470060 	.word	0x42470060

080042f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0ca      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d90c      	bls.n	8004334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b64      	ldr	r3, [pc, #400]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b62      	ldr	r3, [pc, #392]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b6      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434c:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a57      	ldr	r2, [pc, #348]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004364:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a51      	ldr	r2, [pc, #324]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800436a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	494c      	ldr	r1, [pc, #304]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d044      	beq.n	8004418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d119      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07d      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06d      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e065      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4933      	ldr	r1, [pc, #204]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e8:	f7fc ff7e 	bl	80012e8 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fc ff7a 	bl	80012e8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e04d      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20c      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e030      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4915      	ldr	r1, [pc, #84]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490d      	ldr	r1, [pc, #52]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447e:	f000 f81d 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 8004482:	4601      	mov	r1, r0
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	5cd3      	ldrb	r3, [r2, r3]
 8004492:	fa21 f303 	lsr.w	r3, r1, r3
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800449a:	2000      	movs	r0, #0
 800449c:	f7fc fee0 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	0801b358 	.word	0x0801b358
 80044b8:	20000128 	.word	0x20000128

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	2300      	movs	r3, #0
 80044cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d2:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d007      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x32>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d008      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x38>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 80b4 	bne.w	8004650 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b5e      	ldr	r3, [pc, #376]	; (8004664 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044ea:	60bb      	str	r3, [r7, #8]
       break;
 80044ec:	e0b3      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ee:	4b5e      	ldr	r3, [pc, #376]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80044f0:	60bb      	str	r3, [r7, #8]
      break;
 80044f2:	e0b0      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f4:	4b5a      	ldr	r3, [pc, #360]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04a      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450a:	4b55      	ldr	r3, [pc, #340]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	ea03 0501 	and.w	r5, r3, r1
 8004520:	ea04 0602 	and.w	r6, r4, r2
 8004524:	4629      	mov	r1, r5
 8004526:	4632      	mov	r2, r6
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	f04f 0400 	mov.w	r4, #0
 8004530:	0154      	lsls	r4, r2, #5
 8004532:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004536:	014b      	lsls	r3, r1, #5
 8004538:	4619      	mov	r1, r3
 800453a:	4622      	mov	r2, r4
 800453c:	1b49      	subs	r1, r1, r5
 800453e:	eb62 0206 	sbc.w	r2, r2, r6
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	f04f 0400 	mov.w	r4, #0
 800454a:	0194      	lsls	r4, r2, #6
 800454c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004550:	018b      	lsls	r3, r1, #6
 8004552:	1a5b      	subs	r3, r3, r1
 8004554:	eb64 0402 	sbc.w	r4, r4, r2
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	00e2      	lsls	r2, r4, #3
 8004562:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004566:	00d9      	lsls	r1, r3, #3
 8004568:	460b      	mov	r3, r1
 800456a:	4614      	mov	r4, r2
 800456c:	195b      	adds	r3, r3, r5
 800456e:	eb44 0406 	adc.w	r4, r4, r6
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	0262      	lsls	r2, r4, #9
 800457c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004580:	0259      	lsls	r1, r3, #9
 8004582:	460b      	mov	r3, r1
 8004584:	4614      	mov	r4, r2
 8004586:	4618      	mov	r0, r3
 8004588:	4621      	mov	r1, r4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f04f 0400 	mov.w	r4, #0
 8004590:	461a      	mov	r2, r3
 8004592:	4623      	mov	r3, r4
 8004594:	f7fc faba 	bl	8000b0c <__aeabi_uldivmod>
 8004598:	4603      	mov	r3, r0
 800459a:	460c      	mov	r4, r1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e049      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a0:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	099b      	lsrs	r3, r3, #6
 80045a6:	f04f 0400 	mov.w	r4, #0
 80045aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	ea03 0501 	and.w	r5, r3, r1
 80045b6:	ea04 0602 	and.w	r6, r4, r2
 80045ba:	4629      	mov	r1, r5
 80045bc:	4632      	mov	r2, r6
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	0154      	lsls	r4, r2, #5
 80045c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045cc:	014b      	lsls	r3, r1, #5
 80045ce:	4619      	mov	r1, r3
 80045d0:	4622      	mov	r2, r4
 80045d2:	1b49      	subs	r1, r1, r5
 80045d4:	eb62 0206 	sbc.w	r2, r2, r6
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	0194      	lsls	r4, r2, #6
 80045e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045e6:	018b      	lsls	r3, r1, #6
 80045e8:	1a5b      	subs	r3, r3, r1
 80045ea:	eb64 0402 	sbc.w	r4, r4, r2
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	00e2      	lsls	r2, r4, #3
 80045f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045fc:	00d9      	lsls	r1, r3, #3
 80045fe:	460b      	mov	r3, r1
 8004600:	4614      	mov	r4, r2
 8004602:	195b      	adds	r3, r3, r5
 8004604:	eb44 0406 	adc.w	r4, r4, r6
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	02a2      	lsls	r2, r4, #10
 8004612:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004616:	0299      	lsls	r1, r3, #10
 8004618:	460b      	mov	r3, r1
 800461a:	4614      	mov	r4, r2
 800461c:	4618      	mov	r0, r3
 800461e:	4621      	mov	r1, r4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f04f 0400 	mov.w	r4, #0
 8004626:	461a      	mov	r2, r3
 8004628:	4623      	mov	r3, r4
 800462a:	f7fc fa6f 	bl	8000b0c <__aeabi_uldivmod>
 800462e:	4603      	mov	r3, r0
 8004630:	460c      	mov	r4, r1
 8004632:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	3301      	adds	r3, #1
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	60bb      	str	r3, [r7, #8]
      break;
 800464e:	e002      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004652:	60bb      	str	r3, [r7, #8]
      break;
 8004654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004656:	68bb      	ldr	r3, [r7, #8]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	00f42400 	.word	0x00f42400
 8004668:	007a1200 	.word	0x007a1200

0800466c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCC_GetHCLKFreq+0x14>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000128 	.word	0x20000128

08004684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004688:	f7ff fff0 	bl	800466c <HAL_RCC_GetHCLKFreq>
 800468c:	4601      	mov	r1, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	0a9b      	lsrs	r3, r3, #10
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800469a:	5cd3      	ldrb	r3, [r2, r3]
 800469c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0801b368 	.word	0x0801b368

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046b0:	f7ff ffdc 	bl	800466c <HAL_RCC_GetHCLKFreq>
 80046b4:	4601      	mov	r1, r0
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0b5b      	lsrs	r3, r3, #13
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4a03      	ldr	r2, [pc, #12]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40023800 	.word	0x40023800
 80046d0:	0801b368 	.word	0x0801b368

080046d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e01d      	b.n	8004722 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f011 fd72 	bl	80161e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 fa0a 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e01d      	b.n	8004778 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f011 fcad 	bl	80160b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f000 f9df 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d122      	bne.n	80047dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d11b      	bne.n	80047dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0202 	mvn.w	r2, #2
 80047ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f994 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f986 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f997 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d122      	bne.n	8004830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d11b      	bne.n	8004830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0204 	mvn.w	r2, #4
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f96a 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f95c 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f96d 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b08      	cmp	r3, #8
 800483c:	d122      	bne.n	8004884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d11b      	bne.n	8004884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0208 	mvn.w	r2, #8
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2204      	movs	r2, #4
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f940 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f932 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f943 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b10      	cmp	r3, #16
 8004890:	d122      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d11b      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0210 	mvn.w	r2, #16
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2208      	movs	r2, #8
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f916 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f908 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f919 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0201 	mvn.w	r2, #1
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8e2 	bl	8004ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fb17 	bl	8004f5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d10e      	bne.n	800495c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d107      	bne.n	800495c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8de 	bl	8004b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b20      	cmp	r3, #32
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0220 	mvn.w	r2, #32
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fae1 	bl	8004f4a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_IC_ConfigChannel+0x1a>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e08a      	b.n	8004ac0 <HAL_TIM_IC_ConfigChannel+0x130>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6819      	ldr	r1, [r3, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f000 f94c 	bl	8004c6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020c 	bic.w	r2, r2, #12
 80049e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6999      	ldr	r1, [r3, #24]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	619a      	str	r2, [r3, #24]
 80049f6:	e05a      	b.n	8004aae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d11c      	bne.n	8004a38 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6819      	ldr	r1, [r3, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f000 f9a1 	bl	8004d54 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6999      	ldr	r1, [r3, #24]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	021a      	lsls	r2, r3, #8
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	619a      	str	r2, [r3, #24]
 8004a36:	e03a      	b.n	8004aae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d11b      	bne.n	8004a76 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f000 f9be 	bl	8004dce <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 020c 	bic.w	r2, r2, #12
 8004a60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69d9      	ldr	r1, [r3, #28]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	61da      	str	r2, [r3, #28]
 8004a74:	e01b      	b.n	8004aae <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f000 f9de 	bl	8004e46 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69d9      	ldr	r1, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a40      	ldr	r2, [pc, #256]	; (8004c40 <TIM_Base_SetConfig+0x114>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d013      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4a:	d00f      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a3d      	ldr	r2, [pc, #244]	; (8004c44 <TIM_Base_SetConfig+0x118>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a3c      	ldr	r2, [pc, #240]	; (8004c48 <TIM_Base_SetConfig+0x11c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a3b      	ldr	r2, [pc, #236]	; (8004c4c <TIM_Base_SetConfig+0x120>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <TIM_Base_SetConfig+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2f      	ldr	r2, [pc, #188]	; (8004c40 <TIM_Base_SetConfig+0x114>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d02b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d027      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <TIM_Base_SetConfig+0x118>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d023      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	; (8004c48 <TIM_Base_SetConfig+0x11c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01f      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <TIM_Base_SetConfig+0x120>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <TIM_Base_SetConfig+0x124>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d017      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <TIM_Base_SetConfig+0x128>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a27      	ldr	r2, [pc, #156]	; (8004c58 <TIM_Base_SetConfig+0x12c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00f      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a26      	ldr	r2, [pc, #152]	; (8004c5c <TIM_Base_SetConfig+0x130>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <TIM_Base_SetConfig+0x134>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <TIM_Base_SetConfig+0x138>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	; (8004c68 <TIM_Base_SetConfig+0x13c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <TIM_Base_SetConfig+0x114>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_Base_SetConfig+0xf8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <TIM_Base_SetConfig+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d103      	bne.n	8004c2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	615a      	str	r2, [r3, #20]
}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800
 8004c60:	40001800 	.word	0x40001800
 8004c64:	40001c00 	.word	0x40001c00
 8004c68:	40002000 	.word	0x40002000

08004c6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a28      	ldr	r2, [pc, #160]	; (8004d38 <TIM_TI1_SetConfig+0xcc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01b      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x66>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d017      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x66>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <TIM_TI1_SetConfig+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x66>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <TIM_TI1_SetConfig+0xd4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x66>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <TIM_TI1_SetConfig+0xd8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x66>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <TIM_TI1_SetConfig+0xdc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x66>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <TIM_TI1_SetConfig+0xe0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x66>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <TIM_TI1_SetConfig+0xe4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <TIM_TI1_SetConfig+0x6a>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <TIM_TI1_SetConfig+0x6c>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	e003      	b.n	8004cf6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 030a 	and.w	r3, r3, #10
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40010400 	.word	0x40010400
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	40001800 	.word	0x40001800

08004d54 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0210 	bic.w	r2, r3, #16
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	031b      	lsls	r3, r3, #12
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b087      	sub	sp, #28
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	031b      	lsls	r3, r3, #12
 8004e9e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e032      	b.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f10:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e03f      	b.n	8005004 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f011 f9b5 	bl	8016308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f828 	bl	800500c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800504c:	f023 030c 	bic.w	r3, r3, #12
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	f040 80e4 	bne.w	8005244 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4aab      	ldr	r2, [pc, #684]	; (8005330 <UART_SetConfig+0x324>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <UART_SetConfig+0x84>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4aaa      	ldr	r2, [pc, #680]	; (8005334 <UART_SetConfig+0x328>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d16c      	bne.n	800516a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005090:	f7ff fb0c 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8005094:	4602      	mov	r2, r0
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009a      	lsls	r2, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	4aa3      	ldr	r2, [pc, #652]	; (8005338 <UART_SetConfig+0x32c>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	011c      	lsls	r4, r3, #4
 80050b4:	f7ff fafa 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009a      	lsls	r2, r3, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80050ce:	f7ff faed 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 80050d2:	4602      	mov	r2, r0
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	4a93      	ldr	r2, [pc, #588]	; (8005338 <UART_SetConfig+0x32c>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2264      	movs	r2, #100	; 0x64
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	1aeb      	subs	r3, r5, r3
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	3332      	adds	r3, #50	; 0x32
 80050fc:	4a8e      	ldr	r2, [pc, #568]	; (8005338 <UART_SetConfig+0x32c>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800510a:	441c      	add	r4, r3
 800510c:	f7ff face 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8005110:	4602      	mov	r2, r0
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009a      	lsls	r2, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fbb2 f5f3 	udiv	r5, r2, r3
 8005126:	f7ff fac1 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 800512a:	4602      	mov	r2, r0
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009a      	lsls	r2, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	4a7d      	ldr	r2, [pc, #500]	; (8005338 <UART_SetConfig+0x32c>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	2264      	movs	r2, #100	; 0x64
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	1aeb      	subs	r3, r5, r3
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	3332      	adds	r3, #50	; 0x32
 8005154:	4a78      	ldr	r2, [pc, #480]	; (8005338 <UART_SetConfig+0x32c>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	f003 0207 	and.w	r2, r3, #7
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4422      	add	r2, r4
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	e154      	b.n	8005414 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800516a:	f7ff fa8b 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 800516e:	4602      	mov	r2, r0
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009a      	lsls	r2, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	4a6c      	ldr	r2, [pc, #432]	; (8005338 <UART_SetConfig+0x32c>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	011c      	lsls	r4, r3, #4
 800518e:	f7ff fa79 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8005192:	4602      	mov	r2, r0
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009a      	lsls	r2, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80051a8:	f7ff fa6c 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009a      	lsls	r2, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	4a5d      	ldr	r2, [pc, #372]	; (8005338 <UART_SetConfig+0x32c>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2264      	movs	r2, #100	; 0x64
 80051cc:	fb02 f303 	mul.w	r3, r2, r3
 80051d0:	1aeb      	subs	r3, r5, r3
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a58      	ldr	r2, [pc, #352]	; (8005338 <UART_SetConfig+0x32c>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e4:	441c      	add	r4, r3
 80051e6:	f7ff fa4d 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009a      	lsls	r2, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8005200:	f7ff fa40 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8005204:	4602      	mov	r2, r0
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	009a      	lsls	r2, r3, #2
 800520e:	441a      	add	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	4a47      	ldr	r2, [pc, #284]	; (8005338 <UART_SetConfig+0x32c>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	2264      	movs	r2, #100	; 0x64
 8005224:	fb02 f303 	mul.w	r3, r2, r3
 8005228:	1aeb      	subs	r3, r5, r3
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	3332      	adds	r3, #50	; 0x32
 800522e:	4a42      	ldr	r2, [pc, #264]	; (8005338 <UART_SetConfig+0x32c>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f003 0207 	and.w	r2, r3, #7
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4422      	add	r2, r4
 8005240:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005242:	e0e7      	b.n	8005414 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a39      	ldr	r2, [pc, #228]	; (8005330 <UART_SetConfig+0x324>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <UART_SetConfig+0x24c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a38      	ldr	r2, [pc, #224]	; (8005334 <UART_SetConfig+0x328>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d171      	bne.n	800533c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005258:	f7ff fa28 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 800525c:	4602      	mov	r2, r0
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009a      	lsls	r2, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	4a31      	ldr	r2, [pc, #196]	; (8005338 <UART_SetConfig+0x32c>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	011c      	lsls	r4, r3, #4
 800527c:	f7ff fa16 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8005280:	4602      	mov	r2, r0
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009a      	lsls	r2, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	fbb2 f5f3 	udiv	r5, r2, r3
 8005296:	f7ff fa09 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 800529a:	4602      	mov	r2, r0
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009a      	lsls	r2, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	4a21      	ldr	r2, [pc, #132]	; (8005338 <UART_SetConfig+0x32c>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2264      	movs	r2, #100	; 0x64
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	1aeb      	subs	r3, r5, r3
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	3332      	adds	r3, #50	; 0x32
 80052c4:	4a1c      	ldr	r2, [pc, #112]	; (8005338 <UART_SetConfig+0x32c>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052d0:	441c      	add	r4, r3
 80052d2:	f7ff f9eb 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009a      	lsls	r2, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80052ec:	f7ff f9de 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009a      	lsls	r2, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	4a0c      	ldr	r2, [pc, #48]	; (8005338 <UART_SetConfig+0x32c>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2264      	movs	r2, #100	; 0x64
 8005310:	fb02 f303 	mul.w	r3, r2, r3
 8005314:	1aeb      	subs	r3, r5, r3
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a07      	ldr	r2, [pc, #28]	; (8005338 <UART_SetConfig+0x32c>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 020f 	and.w	r2, r3, #15
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4422      	add	r2, r4
 800532c:	609a      	str	r2, [r3, #8]
 800532e:	e071      	b.n	8005414 <UART_SetConfig+0x408>
 8005330:	40011000 	.word	0x40011000
 8005334:	40011400 	.word	0x40011400
 8005338:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800533c:	f7ff f9a2 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8005340:	4602      	mov	r2, r0
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009a      	lsls	r2, r3, #2
 800534a:	441a      	add	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	4a31      	ldr	r2, [pc, #196]	; (800541c <UART_SetConfig+0x410>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	011c      	lsls	r4, r3, #4
 8005360:	f7ff f990 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8005364:	4602      	mov	r2, r0
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009a      	lsls	r2, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	fbb2 f5f3 	udiv	r5, r2, r3
 800537a:	f7ff f983 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 800537e:	4602      	mov	r2, r0
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009a      	lsls	r2, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	4a21      	ldr	r2, [pc, #132]	; (800541c <UART_SetConfig+0x410>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2264      	movs	r2, #100	; 0x64
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	1aeb      	subs	r3, r5, r3
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	3332      	adds	r3, #50	; 0x32
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <UART_SetConfig+0x410>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053b4:	441c      	add	r4, r3
 80053b6:	f7ff f965 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009a      	lsls	r2, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80053d0:	f7ff f958 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009a      	lsls	r2, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ea:	4a0c      	ldr	r2, [pc, #48]	; (800541c <UART_SetConfig+0x410>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2264      	movs	r2, #100	; 0x64
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	1aeb      	subs	r3, r5, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a07      	ldr	r2, [pc, #28]	; (800541c <UART_SetConfig+0x410>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4422      	add	r2, r4
 8005410:	609a      	str	r2, [r3, #8]
}
 8005412:	e7ff      	b.n	8005414 <UART_SetConfig+0x408>
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bdb0      	pop	{r4, r5, r7, pc}
 800541c:	51eb851f 	.word	0x51eb851f

08005420 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005420:	b084      	sub	sp, #16
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	f107 001c 	add.w	r0, r7, #28
 800542e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	2b01      	cmp	r3, #1
 8005436:	d122      	bne.n	800547e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d105      	bne.n	8005472 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 fa7c 	bl	8006970 <USB_CoreReset>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e01a      	b.n	80054b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 fa70 	bl	8006970 <USB_CoreReset>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
 80054a6:	e005      	b.n	80054b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10b      	bne.n	80054d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f043 0206 	orr.w	r2, r3, #6
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054de:	b004      	add	sp, #16
 80054e0:	4770      	bx	lr
	...

080054e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d165      	bne.n	80055c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a41      	ldr	r2, [pc, #260]	; (8005600 <USB_SetTurnaroundTime+0x11c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d906      	bls.n	800550e <USB_SetTurnaroundTime+0x2a>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a40      	ldr	r2, [pc, #256]	; (8005604 <USB_SetTurnaroundTime+0x120>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d802      	bhi.n	800550e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005508:	230f      	movs	r3, #15
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e062      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a3c      	ldr	r2, [pc, #240]	; (8005604 <USB_SetTurnaroundTime+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d906      	bls.n	8005524 <USB_SetTurnaroundTime+0x40>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <USB_SetTurnaroundTime+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d802      	bhi.n	8005524 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800551e:	230e      	movs	r3, #14
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e057      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a38      	ldr	r2, [pc, #224]	; (8005608 <USB_SetTurnaroundTime+0x124>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d906      	bls.n	800553a <USB_SetTurnaroundTime+0x56>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a37      	ldr	r2, [pc, #220]	; (800560c <USB_SetTurnaroundTime+0x128>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d802      	bhi.n	800553a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005534:	230d      	movs	r3, #13
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e04c      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a33      	ldr	r2, [pc, #204]	; (800560c <USB_SetTurnaroundTime+0x128>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d906      	bls.n	8005550 <USB_SetTurnaroundTime+0x6c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4a32      	ldr	r2, [pc, #200]	; (8005610 <USB_SetTurnaroundTime+0x12c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d802      	bhi.n	8005550 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800554a:	230c      	movs	r3, #12
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e041      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <USB_SetTurnaroundTime+0x12c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d906      	bls.n	8005566 <USB_SetTurnaroundTime+0x82>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4a2e      	ldr	r2, [pc, #184]	; (8005614 <USB_SetTurnaroundTime+0x130>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d802      	bhi.n	8005566 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005560:	230b      	movs	r3, #11
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e036      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <USB_SetTurnaroundTime+0x130>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d906      	bls.n	800557c <USB_SetTurnaroundTime+0x98>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <USB_SetTurnaroundTime+0x134>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d802      	bhi.n	800557c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005576:	230a      	movs	r3, #10
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	e02b      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a26      	ldr	r2, [pc, #152]	; (8005618 <USB_SetTurnaroundTime+0x134>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d906      	bls.n	8005592 <USB_SetTurnaroundTime+0xae>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <USB_SetTurnaroundTime+0x138>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d802      	bhi.n	8005592 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800558c:	2309      	movs	r3, #9
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e020      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a21      	ldr	r2, [pc, #132]	; (800561c <USB_SetTurnaroundTime+0x138>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d906      	bls.n	80055a8 <USB_SetTurnaroundTime+0xc4>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4a20      	ldr	r2, [pc, #128]	; (8005620 <USB_SetTurnaroundTime+0x13c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d802      	bhi.n	80055a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055a2:	2308      	movs	r3, #8
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e015      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <USB_SetTurnaroundTime+0x13c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d906      	bls.n	80055be <USB_SetTurnaroundTime+0xda>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <USB_SetTurnaroundTime+0x140>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d802      	bhi.n	80055be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055b8:	2307      	movs	r3, #7
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e00a      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055be:	2306      	movs	r3, #6
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e007      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055ca:	2309      	movs	r3, #9
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e001      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055d0:	2309      	movs	r3, #9
 80055d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	029b      	lsls	r3, r3, #10
 80055e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055ec:	431a      	orrs	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	00d8acbf 	.word	0x00d8acbf
 8005604:	00e4e1bf 	.word	0x00e4e1bf
 8005608:	00f423ff 	.word	0x00f423ff
 800560c:	0106737f 	.word	0x0106737f
 8005610:	011a499f 	.word	0x011a499f
 8005614:	01312cff 	.word	0x01312cff
 8005618:	014ca43f 	.word	0x014ca43f
 800561c:	016e35ff 	.word	0x016e35ff
 8005620:	01a6ab1f 	.word	0x01a6ab1f
 8005624:	01e847ff 	.word	0x01e847ff

08005628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d106      	bne.n	8005698 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	e00b      	b.n	80056b0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	e001      	b.n	80056b0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e003      	b.n	80056b8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056b0:	2032      	movs	r0, #50	; 0x32
 80056b2:	f7fb fe25 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c0:	b084      	sub	sp, #16
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	e009      	b.n	80056f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3340      	adds	r3, #64	; 0x40
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3301      	adds	r3, #1
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b0e      	cmp	r3, #14
 80056f8:	d9f2      	bls.n	80056e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d112      	bne.n	8005726 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
 8005724:	e00b      	b.n	800573e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	4619      	mov	r1, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	461a      	mov	r2, r3
 800575a:	680b      	ldr	r3, [r1, #0]
 800575c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10c      	bne.n	800577e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800576a:	2100      	movs	r1, #0
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f961 	bl	8005a34 <USB_SetDevSpeed>
 8005772:	e008      	b.n	8005786 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f95c 	bl	8005a34 <USB_SetDevSpeed>
 800577c:	e003      	b.n	8005786 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800577e:	2103      	movs	r1, #3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f957 	bl	8005a34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005786:	2110      	movs	r1, #16
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f90b 	bl	80059a4 <USB_FlushTxFifo>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f929 	bl	80059f0 <USB_FlushRxFifo>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	e043      	b.n	800585a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e8:	d118      	bne.n	800581c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	461a      	mov	r2, r3
 80057fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e013      	b.n	800582e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	461a      	mov	r2, r3
 8005814:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e008      	b.n	800582e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	461a      	mov	r2, r3
 800584e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005852:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3301      	adds	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3b7      	bcc.n	80057d2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e043      	b.n	80058f0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800587e:	d118      	bne.n	80058b2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	461a      	mov	r2, r3
 8005894:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e013      	b.n	80058c4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e008      	b.n	80058c4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	461a      	mov	r2, r3
 80058e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3301      	adds	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3b7      	bcc.n	8005868 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	2b01      	cmp	r3, #1
 8005910:	d111      	bne.n	8005936 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	461a      	mov	r2, r3
 800591a:	4b20      	ldr	r3, [pc, #128]	; (800599c <USB_DevInit+0x2dc>)
 800591c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	f043 0303 	orr.w	r3, r3, #3
 8005934:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005942:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f043 0210 	orr.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <USB_DevInit+0x2e0>)
 800595c:	4313      	orrs	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f043 0208 	orr.w	r2, r3, #8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	2b01      	cmp	r3, #1
 8005978:	d107      	bne.n	800598a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005982:	f043 0304 	orr.w	r3, r3, #4
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005996:	b004      	add	sp, #16
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	00800100 	.word	0x00800100
 80059a0:	803c3800 	.word	0x803c3800

080059a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	f043 0220 	orr.w	r2, r3, #32
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <USB_FlushTxFifo+0x48>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d0f0      	beq.n	80059be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	00030d40 	.word	0x00030d40

080059f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2210      	movs	r2, #16
 8005a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <USB_FlushRxFifo+0x40>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e006      	b.n	8005a22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d0f0      	beq.n	8005a02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	00030d40 	.word	0x00030d40

08005a34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0306 	and.w	r3, r3, #6
 8005a7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a86:	2300      	movs	r3, #0
 8005a88:	75fb      	strb	r3, [r7, #23]
 8005a8a:	e00a      	b.n	8005aa2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d002      	beq.n	8005a98 <USB_GetDevSpeed+0x32>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b06      	cmp	r3, #6
 8005a96:	d102      	bne.n	8005a9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	75fb      	strb	r3, [r7, #23]
 8005a9c:	e001      	b.n	8005aa2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a9e:	230f      	movs	r3, #15
 8005aa0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d13a      	bne.n	8005b42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	2101      	movs	r1, #1
 8005ade:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	68f9      	ldr	r1, [r7, #12]
 8005ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d155      	bne.n	8005bb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	78db      	ldrb	r3, [r3, #3]
 8005b1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	059b      	lsls	r3, r3, #22
 8005b26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	e036      	b.n	8005bb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	69da      	ldr	r2, [r3, #28]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	2101      	movs	r1, #1
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11a      	bne.n	8005bb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	78db      	ldrb	r3, [r3, #3]
 8005b94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b96:	430b      	orrs	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d135      	bne.n	8005c48 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	2101      	movs	r1, #1
 8005c12:	fa01 f303 	lsl.w	r3, r1, r3
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c20:	4013      	ands	r3, r2
 8005c22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	0159      	lsls	r1, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	440b      	add	r3, r1
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <USB_DeactivateEndpoint+0x100>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]
 8005c46:	e034      	b.n	8005cb2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	43db      	mvns	r3, r3
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c68:	4013      	ands	r3, r2
 8005c6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	43db      	mvns	r3, r3
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	0159      	lsls	r1, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	4619      	mov	r1, r3
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <USB_DeactivateEndpoint+0x104>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	ec337800 	.word	0xec337800
 8005cc4:	eff37800 	.word	0xeff37800

08005cc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 815c 	bne.w	8005fa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d132      	bne.n	8005d58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d50:	0cdb      	lsrs	r3, r3, #19
 8005d52:	04db      	lsls	r3, r3, #19
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	e074      	b.n	8005e42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d72:	0cdb      	lsrs	r3, r3, #19
 8005d74:	04db      	lsls	r3, r3, #19
 8005d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6959      	ldr	r1, [r3, #20]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	440b      	add	r3, r1
 8005db4:	1e59      	subs	r1, r3, #1
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dbe:	04d9      	lsls	r1, r3, #19
 8005dc0:	4b9d      	ldr	r3, [pc, #628]	; (8006038 <USB_EPStartXfer+0x370>)
 8005dc2:	400b      	ands	r3, r1
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	0148      	lsls	r0, r1, #5
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	4401      	add	r1, r0
 8005dcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	0148      	lsls	r0, r1, #5
 8005dee:	69f9      	ldr	r1, [r7, #28]
 8005df0:	4401      	add	r1, r0
 8005df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005df6:	4313      	orrs	r3, r2
 8005df8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	78db      	ldrb	r3, [r3, #3]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d11f      	bne.n	8005e42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d14b      	bne.n	8005ee0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	78db      	ldrb	r3, [r3, #3]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d128      	bne.n	8005ebe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d110      	bne.n	8005e9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e00f      	b.n	8005ebe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e12f      	b.n	8006140 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005efe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	78db      	ldrb	r3, [r3, #3]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d015      	beq.n	8005f34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8117 	beq.w	8006140 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	2101      	movs	r1, #1
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	69f9      	ldr	r1, [r7, #28]
 8005f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	634b      	str	r3, [r1, #52]	; 0x34
 8005f32:	e105      	b.n	8006140 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d110      	bne.n	8005f66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e00f      	b.n	8005f86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	68d9      	ldr	r1, [r3, #12]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	b298      	uxth	r0, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	4603      	mov	r3, r0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fa2b 	bl	80063f6 <USB_WritePacket>
 8005fa0:	e0ce      	b.n	8006140 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	0cdb      	lsrs	r3, r3, #19
 8005fbe:	04db      	lsls	r3, r3, #19
 8005fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fe4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d126      	bne.n	800603c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006004:	69b9      	ldr	r1, [r7, #24]
 8006006:	0148      	lsls	r0, r1, #5
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	4401      	add	r1, r0
 800600c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006010:	4313      	orrs	r3, r2
 8006012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006032:	6113      	str	r3, [r2, #16]
 8006034:	e036      	b.n	80060a4 <USB_EPStartXfer+0x3dc>
 8006036:	bf00      	nop
 8006038:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4413      	add	r3, r2
 8006046:	1e5a      	subs	r2, r3, #1
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	8afb      	ldrh	r3, [r7, #22]
 8006062:	04d9      	lsls	r1, r3, #19
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <USB_EPStartXfer+0x484>)
 8006066:	400b      	ands	r3, r1
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	0148      	lsls	r0, r1, #5
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	4401      	add	r1, r0
 8006070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	8af9      	ldrh	r1, [r7, #22]
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	0148      	lsls	r0, r1, #5
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	4401      	add	r1, r0
 800609c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a0:	4313      	orrs	r3, r2
 80060a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10d      	bne.n	80060c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	68d9      	ldr	r1, [r3, #12]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	460a      	mov	r2, r1
 80060c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	78db      	ldrb	r3, [r3, #3]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d128      	bne.n	8006120 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d110      	bne.n	8006100 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e00f      	b.n	8006120 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800613e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	1ff80000 	.word	0x1ff80000

08006150 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b01      	cmp	r3, #1
 800616e:	f040 80cd 	bne.w	800630c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d132      	bne.n	80061e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800619c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d8:	0cdb      	lsrs	r3, r3, #19
 80061da:	04db      	lsls	r3, r3, #19
 80061dc:	6113      	str	r3, [r2, #16]
 80061de:	e04e      	b.n	800627e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fa:	0cdb      	lsrs	r3, r3, #19
 80061fc:	04db      	lsls	r3, r3, #19
 80061fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800621e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006222:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	d903      	bls.n	8006238 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	0148      	lsls	r0, r1, #5
 8006272:	6979      	ldr	r1, [r7, #20]
 8006274:	4401      	add	r1, r0
 8006276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800627a:	4313      	orrs	r3, r2
 800627c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d11e      	bne.n	80062c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d009      	beq.n	80062a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	461a      	mov	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	e092      	b.n	80063e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d07e      	beq.n	80063e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006306:	4313      	orrs	r3, r2
 8006308:	634b      	str	r3, [r1, #52]	; 0x34
 800630a:	e06d      	b.n	80063e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	440a      	add	r2, r1
 8006322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006326:	0cdb      	lsrs	r3, r3, #19
 8006328:	04db      	lsls	r3, r3, #19
 800632a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006346:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800634a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800634e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800637e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006396:	6939      	ldr	r1, [r7, #16]
 8006398:	0148      	lsls	r0, r1, #5
 800639a:	6979      	ldr	r1, [r7, #20]
 800639c:	4401      	add	r1, r0
 800639e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063a2:	4313      	orrs	r3, r2
 80063a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10d      	bne.n	80063c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68d9      	ldr	r1, [r3, #12]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	460a      	mov	r2, r1
 80063c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b089      	sub	sp, #36	; 0x24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	4611      	mov	r1, r2
 8006402:	461a      	mov	r2, r3
 8006404:	460b      	mov	r3, r1
 8006406:	71fb      	strb	r3, [r7, #7]
 8006408:	4613      	mov	r3, r2
 800640a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d11a      	bne.n	8006452 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800641c:	88bb      	ldrh	r3, [r7, #4]
 800641e:	3303      	adds	r3, #3
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e00f      	b.n	800644a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	031a      	lsls	r2, r3, #12
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006436:	461a      	mov	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3304      	adds	r3, #4
 8006442:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	3301      	adds	r3, #1
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d3eb      	bcc.n	800642a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3724      	adds	r7, #36	; 0x24
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	3303      	adds	r3, #3
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e00b      	b.n	800649c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3304      	adds	r3, #4
 8006494:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	3301      	adds	r3, #1
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3ef      	bcc.n	8006484 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064a4:	69fb      	ldr	r3, [r7, #28]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	; 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d12c      	bne.n	8006528 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	db12      	blt.n	8006506 <USB_EPSetStall+0x54>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00f      	beq.n	8006506 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006500:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006504:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	440a      	add	r2, r1
 800651c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	e02b      	b.n	8006580 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	db12      	blt.n	8006560 <USB_EPSetStall+0xae>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00f      	beq.n	8006560 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800655e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800657e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d128      	bne.n	80065fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d003      	beq.n	80065da <USB_EPClearStall+0x4c>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	78db      	ldrb	r3, [r3, #3]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d138      	bne.n	800664c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e027      	b.n	800664c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800661a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d003      	beq.n	800662c <USB_EPClearStall+0x9e>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	78db      	ldrb	r3, [r3, #3]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d10f      	bne.n	800664c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800664a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006678:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800667c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006694:	4313      	orrs	r3, r2
 8006696:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c0:	f023 0302 	bic.w	r3, r3, #2
 80066c4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80066c6:	2003      	movs	r0, #3
 80066c8:	f7fa fe1a 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f0:	f043 0302 	orr.w	r3, r3, #2
 80066f4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80066f6:	2003      	movs	r0, #3
 80066f8:	f7fa fe02 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4013      	ands	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800671e:	68fb      	ldr	r3, [r7, #12]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	4013      	ands	r3, r2
 800674e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	0c1b      	lsrs	r3, r3, #16
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	b29b      	uxth	r3, r3
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	4013      	ands	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067c2:	68bb      	ldr	r3, [r7, #8]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006800:	01db      	lsls	r3, r3, #7
 8006802:	b2db      	uxtb	r3, r3
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4013      	ands	r3, r2
 800681c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800681e:	68bb      	ldr	r3, [r7, #8]
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	f003 0301 	and.w	r3, r3, #1
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006862:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006866:	f023 0307 	bic.w	r3, r3, #7
 800686a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0306 	and.w	r3, r3, #6
 8006878:	2b04      	cmp	r3, #4
 800687a:	d109      	bne.n	8006890 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f043 0303 	orr.w	r3, r3, #3
 800688e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800689e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	460b      	mov	r3, r1
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	333c      	adds	r3, #60	; 0x3c
 80068ca:	3304      	adds	r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <USB_EP0_OutStart+0xb8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d90a      	bls.n	80068ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e8:	d101      	bne.n	80068ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e037      	b.n	800695e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	461a      	mov	r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800690c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691c:	f043 0318 	orr.w	r3, r3, #24
 8006920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006930:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006934:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d10f      	bne.n	800695c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006956:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800695a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	4f54300a 	.word	0x4f54300a

08006970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <USB_CoreReset+0x64>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e01b      	b.n	80069c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	daf2      	bge.n	800697c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f043 0201 	orr.w	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <USB_CoreReset+0x64>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d901      	bls.n	80069b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e006      	b.n	80069c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d0f0      	beq.n	80069a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	00030d40 	.word	0x00030d40

080069d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7c1b      	ldrb	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d115      	bne.n	8006a1c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f4:	2202      	movs	r2, #2
 80069f6:	2181      	movs	r1, #129	; 0x81
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f00f ff7e 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a08:	2202      	movs	r2, #2
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f00f ff74 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006a1a:	e012      	b.n	8006a42 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	2202      	movs	r2, #2
 8006a20:	2181      	movs	r1, #129	; 0x81
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f00f ff69 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	2202      	movs	r2, #2
 8006a32:	2101      	movs	r1, #1
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f00f ff60 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a42:	2308      	movs	r3, #8
 8006a44:	2203      	movs	r2, #3
 8006a46:	2182      	movs	r1, #130	; 0x82
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f00f ff56 	bl	80168fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006a54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a58:	f010 f9fe 	bl	8016e58 <malloc>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
 8006a74:	e026      	b.n	8006ac4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a7c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	7c1b      	ldrb	r3, [r3, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aaa:	2101      	movs	r1, #1
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f010 f815 	bl	8016adc <USBD_LL_PrepareReceive>
 8006ab2:	e007      	b.n	8006ac4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	2101      	movs	r1, #1
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f010 f80c 	bl	8016adc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ade:	2181      	movs	r1, #129	; 0x81
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f00f ff30 	bl	8016946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006aec:	2101      	movs	r1, #1
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f00f ff29 	bl	8016946 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006afc:	2182      	movs	r1, #130	; 0x82
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f00f ff21 	bl	8016946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00e      	beq.n	8006b32 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b24:	4618      	mov	r0, r3
 8006b26:	f010 f99f 	bl	8016e68 <free>
    pdev->pClassData = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b4c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d039      	beq.n	8006bda <USBD_CDC_Setup+0x9e>
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	d17c      	bne.n	8006c64 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d029      	beq.n	8006bc6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	b25b      	sxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	da11      	bge.n	8006ba0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006b88:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	88d2      	ldrh	r2, [r2, #6]
 8006b8e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b90:	6939      	ldr	r1, [r7, #16]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	88db      	ldrh	r3, [r3, #6]
 8006b96:	461a      	mov	r2, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 f9c9 	bl	8007f30 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006b9e:	e068      	b.n	8006c72 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	785a      	ldrb	r2, [r3, #1]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	88db      	ldrh	r3, [r3, #6]
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bb6:	6939      	ldr	r1, [r7, #16]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	88db      	ldrh	r3, [r3, #6]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 f9e4 	bl	8007f8c <USBD_CtlPrepareRx>
    break;
 8006bc4:	e055      	b.n	8006c72 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	7850      	ldrb	r0, [r2, #1]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	4798      	blx	r3
    break;
 8006bd8:	e04b      	b.n	8006c72 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b0a      	cmp	r3, #10
 8006be0:	d017      	beq.n	8006c12 <USBD_CDC_Setup+0xd6>
 8006be2:	2b0b      	cmp	r3, #11
 8006be4:	d029      	beq.n	8006c3a <USBD_CDC_Setup+0xfe>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d133      	bne.n	8006c52 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d107      	bne.n	8006c04 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f997 	bl	8007f30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c02:	e02e      	b.n	8006c62 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f927 	bl	8007e5a <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c10:	e027      	b.n	8006c62 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d107      	bne.n	8006c2c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006c1c:	f107 030f 	add.w	r3, r7, #15
 8006c20:	2201      	movs	r2, #1
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f983 	bl	8007f30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c2a:	e01a      	b.n	8006c62 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 f913 	bl	8007e5a <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e013      	b.n	8006c62 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d00d      	beq.n	8006c60 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 f907 	bl	8007e5a <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c50:	e006      	b.n	8006c60 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 f900 	bl	8007e5a <USBD_CtlError>
      ret = USBD_FAIL;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5e:	e000      	b.n	8006c62 <USBD_CDC_Setup+0x126>
      break;
 8006c60:	bf00      	nop
    }
    break;
 8006c62:	e006      	b.n	8006c72 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 f8f7 	bl	8007e5a <USBD_CtlError>
    ret = USBD_FAIL;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	75fb      	strb	r3, [r7, #23]
    break;
 8006c70:	bf00      	nop
  }

  return ret;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c8e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006c96:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d03a      	beq.n	8006d18 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	331c      	adds	r3, #28
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d029      	beq.n	8006d0c <USBD_CDC_DataIn+0x90>
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	331c      	adds	r3, #28
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	78f9      	ldrb	r1, [r7, #3]
 8006ccc:	68b8      	ldr	r0, [r7, #8]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	1a5b      	subs	r3, r3, r1
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4403      	add	r3, r0
 8006cd8:	3344      	adds	r3, #68	; 0x44
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ce0:	fb03 f301 	mul.w	r3, r3, r1
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d110      	bne.n	8006d0c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	331c      	adds	r3, #28
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006cfe:	78f9      	ldrb	r1, [r7, #3]
 8006d00:	2300      	movs	r3, #0
 8006d02:	2200      	movs	r2, #0
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f00f fec6 	bl	8016a96 <USBD_LL_Transmit>
 8006d0a:	e003      	b.n	8006d14 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e000      	b.n	8006d1a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d18:	2302      	movs	r3, #2
  }
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f00f fef1 	bl	8016b22 <USBD_LL_GetRxDataSize>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00d      	beq.n	8006d6e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d66:	4611      	mov	r1, r2
 8006d68:	4798      	blx	r3

    return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e000      	b.n	8006d70 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d6e:	2302      	movs	r3, #2
  }
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d86:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d015      	beq.n	8006dbe <USBD_CDC_EP0_RxReady+0x46>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d98:	2bff      	cmp	r3, #255	; 0xff
 8006d9a:	d010      	beq.n	8006dbe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006daa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006db2:	b292      	uxth	r2, r2
 8006db4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	22ff      	movs	r2, #255	; 0xff
 8006dba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2243      	movs	r2, #67	; 0x43
 8006dd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dd6:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20000090 	.word	0x20000090

08006de8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2243      	movs	r2, #67	; 0x43
 8006df4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006df6:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	2000004c 	.word	0x2000004c

08006e08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2243      	movs	r2, #67	; 0x43
 8006e14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e16:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	200000d4 	.word	0x200000d4

08006e28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	220a      	movs	r2, #10
 8006e34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e36:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20000008 	.word	0x20000008

08006e48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	4613      	mov	r3, r2
 8006e82:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e8a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e94:	88fa      	ldrh	r2, [r7, #6]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ee0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01c      	beq.n	8006f26 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d115      	bne.n	8006f22 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2181      	movs	r1, #129	; 0x81
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f00f fdbc 	bl	8016a96 <USBD_LL_Transmit>

      return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e002      	b.n	8006f28 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f26:	2302      	movs	r3, #2
  }
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d017      	beq.n	8006f7a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7c1b      	ldrb	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f00f fdbc 	bl	8016adc <USBD_LL_PrepareReceive>
 8006f64:	e007      	b.n	8006f76 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f6c:	2340      	movs	r3, #64	; 0x40
 8006f6e:	2101      	movs	r1, #1
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f00f fdb3 	bl	8016adc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f7a:	2302      	movs	r3, #2
  }
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e01a      	b.n	8006fd2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	79fa      	ldrb	r2, [r7, #7]
 8006fc8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f00f fc2e 	bl	801682c <USBD_LL_Init>

  return USBD_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d006      	beq.n	8006ffc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
 8006ffa:	e001      	b.n	8007000 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f00f fc54 	bl	80168c4 <USBD_LL_Start>

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007048:	2302      	movs	r3, #2
 800704a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	4611      	mov	r1, r2
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	4611      	mov	r1, r2
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fe94 	bl	8007de0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d00c      	beq.n	80070f6 <USBD_LL_SetupStage+0x56>
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d302      	bcc.n	80070e6 <USBD_LL_SetupStage+0x46>
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d010      	beq.n	8007106 <USBD_LL_SetupStage+0x66>
 80070e4:	e017      	b.n	8007116 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa04 	bl	80074fc <USBD_StdDevReq>
    break;
 80070f4:	e01a      	b.n	800712c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa66 	bl	80075d0 <USBD_StdItfReq>
    break;
 8007104:	e012      	b.n	800712c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 faa4 	bl	800765c <USBD_StdEPReq>
    break;
 8007114:	e00a      	b.n	800712c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800711c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007120:	b2db      	uxtb	r3, r3
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f00f fc2d 	bl	8016984 <USBD_LL_StallEP>
    break;
 800712a:	bf00      	nop
  }

  return USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	460b      	mov	r3, r1
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d14b      	bne.n	80071e2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007150:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007158:	2b03      	cmp	r3, #3
 800715a:	d134      	bne.n	80071c6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	429a      	cmp	r2, r3
 8007166:	d919      	bls.n	800719c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	1ad2      	subs	r2, r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800717e:	429a      	cmp	r2, r3
 8007180:	d203      	bcs.n	800718a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007186:	b29b      	uxth	r3, r3
 8007188:	e002      	b.n	8007190 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 ff17 	bl	8007fc8 <USBD_CtlContinueRx>
 800719a:	e038      	b.n	800720e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d105      	bne.n	80071be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 ff14 	bl	8007fec <USBD_CtlSendStatus>
 80071c4:	e023      	b.n	800720e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80071cc:	2b05      	cmp	r3, #5
 80071ce:	d11e      	bne.n	800720e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80071d8:	2100      	movs	r1, #0
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f00f fbd2 	bl	8016984 <USBD_LL_StallEP>
 80071e0:	e015      	b.n	800720e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d108      	bne.n	800720a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	7afa      	ldrb	r2, [r7, #11]
 8007202:	4611      	mov	r1, r2
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	4798      	blx	r3
 8007208:	e001      	b.n	800720e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800720a:	2302      	movs	r3, #2
 800720c:	e000      	b.n	8007210 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	460b      	mov	r3, r1
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d17f      	bne.n	800732c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3314      	adds	r3, #20
 8007230:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007238:	2b02      	cmp	r3, #2
 800723a:	d15c      	bne.n	80072f6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	429a      	cmp	r2, r3
 8007246:	d915      	bls.n	8007274 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	1ad2      	subs	r2, r2, r3
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	b29b      	uxth	r3, r3
 800725c:	461a      	mov	r2, r3
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fe81 	bl	8007f68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007266:	2300      	movs	r3, #0
 8007268:	2200      	movs	r2, #0
 800726a:	2100      	movs	r1, #0
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f00f fc35 	bl	8016adc <USBD_LL_PrepareReceive>
 8007272:	e04e      	b.n	8007312 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	6912      	ldr	r2, [r2, #16]
 800727c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007280:	fb02 f201 	mul.w	r2, r2, r1
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d11c      	bne.n	80072c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007292:	429a      	cmp	r2, r3
 8007294:	d316      	bcc.n	80072c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d20f      	bcs.n	80072c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fe5d 	bl	8007f68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80072b6:	2300      	movs	r3, #0
 80072b8:	2200      	movs	r2, #0
 80072ba:	2100      	movs	r1, #0
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f00f fc0d 	bl	8016adc <USBD_LL_PrepareReceive>
 80072c2:	e026      	b.n	8007312 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d105      	bne.n	80072e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072e6:	2180      	movs	r1, #128	; 0x80
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f00f fb4b 	bl	8016984 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fe8f 	bl	8008012 <USBD_CtlReceiveStatus>
 80072f4:	e00d      	b.n	8007312 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d004      	beq.n	800730a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800730a:	2180      	movs	r1, #128	; 0x80
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f00f fb39 	bl	8016984 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007318:	2b01      	cmp	r3, #1
 800731a:	d11d      	bne.n	8007358 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fe82 	bl	8007026 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800732a:	e015      	b.n	8007358 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00d      	beq.n	8007354 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800733e:	2b03      	cmp	r3, #3
 8007340:	d108      	bne.n	8007354 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	7afa      	ldrb	r2, [r7, #11]
 800734c:	4611      	mov	r1, r2
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	4798      	blx	r3
 8007352:	e001      	b.n	8007358 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007354:	2302      	movs	r3, #2
 8007356:	e000      	b.n	800735a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2200      	movs	r2, #0
 800736e:	2100      	movs	r1, #0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f00f fac2 	bl	80168fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2240      	movs	r2, #64	; 0x40
 8007382:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007386:	2340      	movs	r3, #64	; 0x40
 8007388:	2200      	movs	r2, #0
 800738a:	2180      	movs	r1, #128	; 0x80
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f00f fab4 	bl	80168fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2240      	movs	r2, #64	; 0x40
 800739c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6852      	ldr	r2, [r2, #4]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	4611      	mov	r1, r2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
  }

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2204      	movs	r2, #4
 800741c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800745e:	2b03      	cmp	r3, #3
 8007460:	d10b      	bne.n	800747a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6852      	ldr	r2, [r2, #4]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	4611      	mov	r1, r2
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007512:	2b20      	cmp	r3, #32
 8007514:	d004      	beq.n	8007520 <USBD_StdDevReq+0x24>
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d002      	beq.n	8007520 <USBD_StdDevReq+0x24>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <USBD_StdDevReq+0x34>
 800751e:	e04c      	b.n	80075ba <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
    break;
 800752e:	e049      	b.n	80075c4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b09      	cmp	r3, #9
 8007536:	d83a      	bhi.n	80075ae <USBD_StdDevReq+0xb2>
 8007538:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <USBD_StdDevReq+0x44>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007591 	.word	0x08007591
 8007544:	080075a5 	.word	0x080075a5
 8007548:	080075af 	.word	0x080075af
 800754c:	0800759b 	.word	0x0800759b
 8007550:	080075af 	.word	0x080075af
 8007554:	08007573 	.word	0x08007573
 8007558:	08007569 	.word	0x08007569
 800755c:	080075af 	.word	0x080075af
 8007560:	08007587 	.word	0x08007587
 8007564:	0800757d 	.word	0x0800757d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f9d2 	bl	8007914 <USBD_GetDescriptor>
      break;
 8007570:	e022      	b.n	80075b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fac7 	bl	8007b08 <USBD_SetAddress>
      break;
 800757a:	e01d      	b.n	80075b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fb04 	bl	8007b8c <USBD_SetConfig>
      break;
 8007584:	e018      	b.n	80075b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fb8d 	bl	8007ca8 <USBD_GetConfig>
      break;
 800758e:	e013      	b.n	80075b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fbbc 	bl	8007d10 <USBD_GetStatus>
      break;
 8007598:	e00e      	b.n	80075b8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fbea 	bl	8007d76 <USBD_SetFeature>
      break;
 80075a2:	e009      	b.n	80075b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fbf9 	bl	8007d9e <USBD_ClrFeature>
      break;
 80075ac:	e004      	b.n	80075b8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fc52 	bl	8007e5a <USBD_CtlError>
      break;
 80075b6:	bf00      	nop
    }
    break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fc4c 	bl	8007e5a <USBD_CtlError>
    break;
 80075c2:	bf00      	nop
  }

  return ret;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop

080075d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d003      	beq.n	80075f2 <USBD_StdItfReq+0x22>
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d001      	beq.n	80075f2 <USBD_StdItfReq+0x22>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d12a      	bne.n	8007648 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075f8:	3b01      	subs	r3, #1
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d81d      	bhi.n	800763a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	889b      	ldrh	r3, [r3, #4]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d813      	bhi.n	8007630 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
 8007616:	4603      	mov	r3, r0
 8007618:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	88db      	ldrh	r3, [r3, #6]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d110      	bne.n	8007644 <USBD_StdItfReq+0x74>
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10d      	bne.n	8007644 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fcdf 	bl	8007fec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800762e:	e009      	b.n	8007644 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fc11 	bl	8007e5a <USBD_CtlError>
      break;
 8007638:	e004      	b.n	8007644 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fc0c 	bl	8007e5a <USBD_CtlError>
      break;
 8007642:	e000      	b.n	8007646 <USBD_StdItfReq+0x76>
      break;
 8007644:	bf00      	nop
    }
    break;
 8007646:	e004      	b.n	8007652 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fc05 	bl	8007e5a <USBD_CtlError>
    break;
 8007650:	bf00      	nop
  }

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	889b      	ldrh	r3, [r3, #4]
 800766e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007678:	2b20      	cmp	r3, #32
 800767a:	d004      	beq.n	8007686 <USBD_StdEPReq+0x2a>
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d002      	beq.n	8007686 <USBD_StdEPReq+0x2a>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <USBD_StdEPReq+0x3a>
 8007684:	e13b      	b.n	80078fe <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
    break;
 8007694:	e138      	b.n	8007908 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d10a      	bne.n	80076b8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	e128      	b.n	800790a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d03e      	beq.n	800773e <USBD_StdEPReq+0xe2>
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d002      	beq.n	80076ca <USBD_StdEPReq+0x6e>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d070      	beq.n	80077aa <USBD_StdEPReq+0x14e>
 80076c8:	e113      	b.n	80078f2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d002      	beq.n	80076da <USBD_StdEPReq+0x7e>
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d015      	beq.n	8007704 <USBD_StdEPReq+0xa8>
 80076d8:	e02b      	b.n	8007732 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <USBD_StdEPReq+0x9e>
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b80      	cmp	r3, #128	; 0x80
 80076e4:	d009      	beq.n	80076fa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f00f f94a 	bl	8016984 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80076f0:	2180      	movs	r1, #128	; 0x80
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f00f f946 	bl	8016984 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80076f8:	e020      	b.n	800773c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbac 	bl	8007e5a <USBD_CtlError>
        break;
 8007702:	e01b      	b.n	800773c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	885b      	ldrh	r3, [r3, #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10e      	bne.n	800772a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <USBD_StdEPReq+0xce>
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b80      	cmp	r3, #128	; 0x80
 8007716:	d008      	beq.n	800772a <USBD_StdEPReq+0xce>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	88db      	ldrh	r3, [r3, #6]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f00f f92d 	bl	8016984 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fc5e 	bl	8007fec <USBD_CtlSendStatus>

        break;
 8007730:	e004      	b.n	800773c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb90 	bl	8007e5a <USBD_CtlError>
        break;
 800773a:	bf00      	nop
      }
      break;
 800773c:	e0de      	b.n	80078fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007744:	2b02      	cmp	r3, #2
 8007746:	d002      	beq.n	800774e <USBD_StdEPReq+0xf2>
 8007748:	2b03      	cmp	r3, #3
 800774a:	d015      	beq.n	8007778 <USBD_StdEPReq+0x11c>
 800774c:	e026      	b.n	800779c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00c      	beq.n	800776e <USBD_StdEPReq+0x112>
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b80      	cmp	r3, #128	; 0x80
 8007758:	d009      	beq.n	800776e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f00f f910 	bl	8016984 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007764:	2180      	movs	r1, #128	; 0x80
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f00f f90c 	bl	8016984 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800776c:	e01c      	b.n	80077a8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb72 	bl	8007e5a <USBD_CtlError>
        break;
 8007776:	e017      	b.n	80077a8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d112      	bne.n	80077a6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f00f f917 	bl	80169c2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fc29 	bl	8007fec <USBD_CtlSendStatus>
        }
        break;
 800779a:	e004      	b.n	80077a6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fb5b 	bl	8007e5a <USBD_CtlError>
        break;
 80077a4:	e000      	b.n	80077a8 <USBD_StdEPReq+0x14c>
        break;
 80077a6:	bf00      	nop
      }
      break;
 80077a8:	e0a8      	b.n	80078fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d002      	beq.n	80077ba <USBD_StdEPReq+0x15e>
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d031      	beq.n	800781c <USBD_StdEPReq+0x1c0>
 80077b8:	e095      	b.n	80078e6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d007      	beq.n	80077d0 <USBD_StdEPReq+0x174>
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d004      	beq.n	80077d0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fb46 	bl	8007e5a <USBD_CtlError>
          break;
 80077ce:	e08f      	b.n	80078f0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da0b      	bge.n	80077f0 <USBD_StdEPReq+0x194>
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	3310      	adds	r3, #16
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	3304      	adds	r3, #4
 80077ee:	e00a      	b.n	8007806 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4413      	add	r3, r2
 8007806:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2202      	movs	r2, #2
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fb8b 	bl	8007f30 <USBD_CtlSendData>
          break;
 800781a:	e069      	b.n	80078f0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800781c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	da11      	bge.n	8007848 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	3318      	adds	r3, #24
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d117      	bne.n	800786e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fb0a 	bl	8007e5a <USBD_CtlError>
            break;
 8007846:	e053      	b.n	80078f0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 faf7 	bl	8007e5a <USBD_CtlError>
            break;
 800786c:	e040      	b.n	80078f0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800786e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	da0b      	bge.n	800788e <USBD_StdEPReq+0x232>
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	3310      	adds	r3, #16
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	3304      	adds	r3, #4
 800788c:	e00a      	b.n	80078a4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <USBD_StdEPReq+0x256>
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b80      	cmp	r3, #128	; 0x80
 80078b0:	d103      	bne.n	80078ba <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	e00e      	b.n	80078d8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f00f f89e 	bl	8016a00 <USBD_LL_IsStallEP>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2201      	movs	r2, #1
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	e002      	b.n	80078d8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2202      	movs	r2, #2
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fb26 	bl	8007f30 <USBD_CtlSendData>
          break;
 80078e4:	e004      	b.n	80078f0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fab6 	bl	8007e5a <USBD_CtlError>
        break;
 80078ee:	bf00      	nop
      }
      break;
 80078f0:	e004      	b.n	80078fc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fab0 	bl	8007e5a <USBD_CtlError>
      break;
 80078fa:	bf00      	nop
    }
    break;
 80078fc:	e004      	b.n	8007908 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 faaa 	bl	8007e5a <USBD_CtlError>
    break;
 8007906:	bf00      	nop
  }

  return ret;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	885b      	ldrh	r3, [r3, #2]
 8007922:	0a1b      	lsrs	r3, r3, #8
 8007924:	b29b      	uxth	r3, r3
 8007926:	3b01      	subs	r3, #1
 8007928:	2b06      	cmp	r3, #6
 800792a:	f200 80c9 	bhi.w	8007ac0 <USBD_GetDescriptor+0x1ac>
 800792e:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <USBD_GetDescriptor+0x20>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007951 	.word	0x08007951
 8007938:	08007969 	.word	0x08007969
 800793c:	080079a9 	.word	0x080079a9
 8007940:	08007ac1 	.word	0x08007ac1
 8007944:	08007ac1 	.word	0x08007ac1
 8007948:	08007a6d 	.word	0x08007a6d
 800794c:	08007a93 	.word	0x08007a93
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7c12      	ldrb	r2, [r2, #16]
 800795c:	f107 010a 	add.w	r1, r7, #10
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
    break;
 8007966:	e0b0      	b.n	8007aca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7c1b      	ldrb	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10d      	bne.n	800798c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	f107 020a 	add.w	r2, r7, #10
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
 8007980:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	2202      	movs	r2, #2
 8007988:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800798a:	e09e      	b.n	8007aca <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	f107 020a 	add.w	r2, r7, #10
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3301      	adds	r3, #1
 80079a2:	2202      	movs	r2, #2
 80079a4:	701a      	strb	r2, [r3, #0]
    break;
 80079a6:	e090      	b.n	8007aca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	885b      	ldrh	r3, [r3, #2]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d856      	bhi.n	8007a60 <USBD_GetDescriptor+0x14c>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <USBD_GetDescriptor+0xa4>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007a31 	.word	0x08007a31
 80079cc:	08007a49 	.word	0x08007a49
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	7c12      	ldrb	r2, [r2, #16]
 80079dc:	f107 010a 	add.w	r1, r7, #10
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
 80079e4:	60f8      	str	r0, [r7, #12]
      break;
 80079e6:	e040      	b.n	8007a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	7c12      	ldrb	r2, [r2, #16]
 80079f4:	f107 010a 	add.w	r1, r7, #10
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
      break;
 80079fe:	e034      	b.n	8007a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	7c12      	ldrb	r2, [r2, #16]
 8007a0c:	f107 010a 	add.w	r1, r7, #10
 8007a10:	4610      	mov	r0, r2
 8007a12:	4798      	blx	r3
 8007a14:	60f8      	str	r0, [r7, #12]
      break;
 8007a16:	e028      	b.n	8007a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 010a 	add.w	r1, r7, #10
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
      break;
 8007a2e:	e01c      	b.n	8007a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 010a 	add.w	r1, r7, #10
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
      break;
 8007a46:	e010      	b.n	8007a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 010a 	add.w	r1, r7, #10
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
      break;
 8007a5e:	e004      	b.n	8007a6a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f9f9 	bl	8007e5a <USBD_CtlError>
      return;
 8007a68:	e04b      	b.n	8007b02 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007a6a:	e02e      	b.n	8007aca <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7c1b      	ldrb	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d109      	bne.n	8007a88 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	f107 020a 	add.w	r2, r7, #10
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
      break;
 8007a86:	e020      	b.n	8007aca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9e5 	bl	8007e5a <USBD_CtlError>
      return;
 8007a90:	e037      	b.n	8007b02 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7c1b      	ldrb	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10d      	bne.n	8007ab6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	f107 020a 	add.w	r2, r7, #10
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4798      	blx	r3
 8007aaa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	701a      	strb	r2, [r3, #0]
      break;
 8007ab4:	e009      	b.n	8007aca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f9ce 	bl	8007e5a <USBD_CtlError>
      return;
 8007abe:	e020      	b.n	8007b02 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9c9 	bl	8007e5a <USBD_CtlError>
    return;
 8007ac8:	e01b      	b.n	8007b02 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007aca:	897b      	ldrh	r3, [r7, #10]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d011      	beq.n	8007af4 <USBD_GetDescriptor+0x1e0>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	88db      	ldrh	r3, [r3, #6]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00d      	beq.n	8007af4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	88da      	ldrh	r2, [r3, #6]
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	bf28      	it	cs
 8007ae2:	4613      	movcs	r3, r2
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007ae8:	897b      	ldrh	r3, [r7, #10]
 8007aea:	461a      	mov	r2, r3
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa1e 	bl	8007f30 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa75 	bl	8007fec <USBD_CtlSendStatus>
  }
}
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	889b      	ldrh	r3, [r3, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d130      	bne.n	8007b7c <USBD_SetAddress+0x74>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	88db      	ldrh	r3, [r3, #6]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d12c      	bne.n	8007b7c <USBD_SetAddress+0x74>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	2b7f      	cmp	r3, #127	; 0x7f
 8007b28:	d828      	bhi.n	8007b7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d104      	bne.n	8007b4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f989 	bl	8007e5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b48:	e01c      	b.n	8007b84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7bfa      	ldrb	r2, [r7, #15]
 8007b4e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f00e ff7e 	bl	8016a58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa45 	bl	8007fec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d004      	beq.n	8007b72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b70:	e008      	b.n	8007b84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7a:	e003      	b.n	8007b84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f96b 	bl	8007e5a <USBD_CtlError>
  }
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007b9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ba0:	4b40      	ldr	r3, [pc, #256]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d904      	bls.n	8007bb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f955 	bl	8007e5a <USBD_CtlError>
 8007bb0:	e075      	b.n	8007c9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d002      	beq.n	8007bc2 <USBD_SetConfig+0x36>
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d023      	beq.n	8007c08 <USBD_SetConfig+0x7c>
 8007bc0:	e062      	b.n	8007c88 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007bc2:	4b38      	ldr	r3, [pc, #224]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01a      	beq.n	8007c00 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007bca:	4b36      	ldr	r3, [pc, #216]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bdc:	4b31      	ldr	r3, [pc, #196]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff fa2a 	bl	800703c <USBD_SetClassConfig>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d104      	bne.n	8007bf8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f932 	bl	8007e5a <USBD_CtlError>
          return;
 8007bf6:	e052      	b.n	8007c9e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f9f7 	bl	8007fec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007bfe:	e04e      	b.n	8007c9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f9f3 	bl	8007fec <USBD_CtlSendStatus>
      break;
 8007c06:	e04a      	b.n	8007c9e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c08:	4b26      	ldr	r3, [pc, #152]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d112      	bne.n	8007c36 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007c18:	4b22      	ldr	r3, [pc, #136]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c22:	4b20      	ldr	r3, [pc, #128]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fa26 	bl	800707a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f9dc 	bl	8007fec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007c34:	e033      	b.n	8007c9e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007c36:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d01d      	beq.n	8007c80 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff fa14 	bl	800707a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c52:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c5c:	4b11      	ldr	r3, [pc, #68]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff f9ea 	bl	800703c <USBD_SetClassConfig>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d104      	bne.n	8007c78 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8f2 	bl	8007e5a <USBD_CtlError>
          return;
 8007c76:	e012      	b.n	8007c9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9b7 	bl	8007fec <USBD_CtlSendStatus>
      break;
 8007c7e:	e00e      	b.n	8007c9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f9b3 	bl	8007fec <USBD_CtlSendStatus>
      break;
 8007c86:	e00a      	b.n	8007c9e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f8e5 	bl	8007e5a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <USBD_SetConfig+0x118>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff f9ef 	bl	800707a <USBD_ClrClassConfig>
      break;
 8007c9c:	bf00      	nop
    }
  }
}
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000210 	.word	0x20000210

08007ca8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	88db      	ldrh	r3, [r3, #6]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d004      	beq.n	8007cc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f8cc 	bl	8007e5a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007cc2:	e021      	b.n	8007d08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	db17      	blt.n	8007cfe <USBD_GetConfig+0x56>
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	dd02      	ble.n	8007cd8 <USBD_GetConfig+0x30>
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d00b      	beq.n	8007cee <USBD_GetConfig+0x46>
 8007cd6:	e012      	b.n	8007cfe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f922 	bl	8007f30 <USBD_CtlSendData>
      break;
 8007cec:	e00c      	b.n	8007d08 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f91a 	bl	8007f30 <USBD_CtlSendData>
      break;
 8007cfc:	e004      	b.n	8007d08 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8aa 	bl	8007e5a <USBD_CtlError>
      break;
 8007d06:	bf00      	nop
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d20:	3b01      	subs	r3, #1
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d81e      	bhi.n	8007d64 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d004      	beq.n	8007d38 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f892 	bl	8007e5a <USBD_CtlError>
      break;
 8007d36:	e01a      	b.n	8007d6e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f043 0202 	orr.w	r2, r3, #2
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	330c      	adds	r3, #12
 8007d58:	2202      	movs	r2, #2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8e7 	bl	8007f30 <USBD_CtlSendData>
    break;
 8007d62:	e004      	b.n	8007d6e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f877 	bl	8007e5a <USBD_CtlError>
    break;
 8007d6c:	bf00      	nop
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	885b      	ldrh	r3, [r3, #2]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d106      	bne.n	8007d96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f92b 	bl	8007fec <USBD_CtlSendStatus>
  }

}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007dae:	3b01      	subs	r3, #1
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d80b      	bhi.n	8007dcc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d10c      	bne.n	8007dd6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f911 	bl	8007fec <USBD_CtlSendStatus>
    }
    break;
 8007dca:	e004      	b.n	8007dd6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f843 	bl	8007e5a <USBD_CtlError>
    break;
 8007dd4:	e000      	b.n	8007dd8 <USBD_ClrFeature+0x3a>
    break;
 8007dd6:	bf00      	nop
  }
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	785a      	ldrb	r2, [r3, #1]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	3303      	adds	r3, #3
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	4413      	add	r3, r2
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	3305      	adds	r3, #5
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	021b      	lsls	r3, r3, #8
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	3306      	adds	r3, #6
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	3307      	adds	r3, #7
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	80da      	strh	r2, [r3, #6]

}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007e64:	2180      	movs	r1, #128	; 0x80
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f00e fd8c 	bl	8016984 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f00e fd88 	bl	8016984 <USBD_LL_StallEP>
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d032      	beq.n	8007ef8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 f834 	bl	8007f00 <USBD_GetLen>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	75fa      	strb	r2, [r7, #23]
 8007eac:	461a      	mov	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	7812      	ldrb	r2, [r2, #0]
 8007eb6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	75fa      	strb	r2, [r7, #23]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ec8:	e012      	b.n	8007ef0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	60fa      	str	r2, [r7, #12]
 8007ed0:	7dfa      	ldrb	r2, [r7, #23]
 8007ed2:	1c51      	adds	r1, r2, #1
 8007ed4:	75f9      	strb	r1, [r7, #23]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	440a      	add	r2, r1
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	75fa      	strb	r2, [r7, #23]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4413      	add	r3, r2
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e8      	bne.n	8007eca <USBD_GetString+0x4e>
    }
  }
}
 8007ef8:	bf00      	nop
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007f0c:	e005      	b.n	8007f1a <USBD_GetLen+0x1a>
    {
        len++;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	3301      	adds	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3301      	adds	r3, #1
 8007f18:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f5      	bne.n	8007f0e <USBD_GetLen+0xe>
    }

    return len;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f4c:	88fa      	ldrh	r2, [r7, #6]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	2100      	movs	r1, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f00e fd9c 	bl	8016a96 <USBD_LL_Transmit>

  return USBD_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f00e fd8a 	bl	8016a96 <USBD_LL_Transmit>

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f00e fd8f 	bl	8016adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f00e fd7d 	bl	8016adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2200      	movs	r2, #0
 8008000:	2100      	movs	r1, #0
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f00e fd47 	bl	8016a96 <USBD_LL_Transmit>

  return USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2205      	movs	r2, #5
 800801e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f00e fd57 	bl	8016adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	ba5b      	rev16	r3, r3
 8008046:	b29b      	uxth	r3, r3
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	061a      	lsls	r2, r3, #24
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	0e1b      	lsrs	r3, r3, #24
 8008078:	4313      	orrs	r3, r2
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008090:	f000 f8a6 	bl	80081e0 <mem_init>
  memp_init();
 8008094:	f000 fb3a 	bl	800870c <memp_init>
  pbuf_init();
  netif_init();
 8008098:	f000 fbf2 	bl	8008880 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800809c:	f006 feac 	bl	800edf8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80080a0:	f001 fb70 	bl	8009784 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80080a4:	f006 fd8a 	bl	800ebbc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80080b8:	4b40      	ldr	r3, [pc, #256]	; (80081bc <plug_holes+0x10c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d206      	bcs.n	80080d0 <plug_holes+0x20>
 80080c2:	4b3f      	ldr	r3, [pc, #252]	; (80081c0 <plug_holes+0x110>)
 80080c4:	f240 125d 	movw	r2, #349	; 0x15d
 80080c8:	493e      	ldr	r1, [pc, #248]	; (80081c4 <plug_holes+0x114>)
 80080ca:	483f      	ldr	r0, [pc, #252]	; (80081c8 <plug_holes+0x118>)
 80080cc:	f00e ff9e 	bl	801700c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80080d0:	4b3e      	ldr	r3, [pc, #248]	; (80081cc <plug_holes+0x11c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d306      	bcc.n	80080e8 <plug_holes+0x38>
 80080da:	4b39      	ldr	r3, [pc, #228]	; (80081c0 <plug_holes+0x110>)
 80080dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80080e0:	493b      	ldr	r1, [pc, #236]	; (80081d0 <plug_holes+0x120>)
 80080e2:	4839      	ldr	r0, [pc, #228]	; (80081c8 <plug_holes+0x118>)
 80080e4:	f00e ff92 	bl	801700c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	791b      	ldrb	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <plug_holes+0x4e>
 80080f0:	4b33      	ldr	r3, [pc, #204]	; (80081c0 <plug_holes+0x110>)
 80080f2:	f240 125f 	movw	r2, #351	; 0x15f
 80080f6:	4937      	ldr	r1, [pc, #220]	; (80081d4 <plug_holes+0x124>)
 80080f8:	4833      	ldr	r0, [pc, #204]	; (80081c8 <plug_holes+0x118>)
 80080fa:	f00e ff87 	bl	801700c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008106:	d906      	bls.n	8008116 <plug_holes+0x66>
 8008108:	4b2d      	ldr	r3, [pc, #180]	; (80081c0 <plug_holes+0x110>)
 800810a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800810e:	4932      	ldr	r1, [pc, #200]	; (80081d8 <plug_holes+0x128>)
 8008110:	482d      	ldr	r0, [pc, #180]	; (80081c8 <plug_holes+0x118>)
 8008112:	f00e ff7b 	bl	801700c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8008116:	4b29      	ldr	r3, [pc, #164]	; (80081bc <plug_holes+0x10c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	8812      	ldrh	r2, [r2, #0]
 800811e:	4413      	add	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	429a      	cmp	r2, r3
 8008128:	d01f      	beq.n	800816a <plug_holes+0xba>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	791b      	ldrb	r3, [r3, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d11b      	bne.n	800816a <plug_holes+0xba>
 8008132:	4b26      	ldr	r3, [pc, #152]	; (80081cc <plug_holes+0x11c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	429a      	cmp	r2, r3
 800813a:	d016      	beq.n	800816a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800813c:	4b27      	ldr	r3, [pc, #156]	; (80081dc <plug_holes+0x12c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	429a      	cmp	r2, r3
 8008144:	d102      	bne.n	800814c <plug_holes+0x9c>
      lfree = mem;
 8008146:	4a25      	ldr	r2, [pc, #148]	; (80081dc <plug_holes+0x12c>)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	881a      	ldrh	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a19      	ldr	r2, [pc, #100]	; (80081bc <plug_holes+0x10c>)
 8008158:	6812      	ldr	r2, [r2, #0]
 800815a:	1a99      	subs	r1, r3, r2
 800815c:	4b17      	ldr	r3, [pc, #92]	; (80081bc <plug_holes+0x10c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	8812      	ldrh	r2, [r2, #0]
 8008164:	4413      	add	r3, r2
 8008166:	b28a      	uxth	r2, r1
 8008168:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <plug_holes+0x10c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	8852      	ldrh	r2, [r2, #2]
 8008172:	4413      	add	r3, r2
 8008174:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	429a      	cmp	r2, r3
 800817c:	d01a      	beq.n	80081b4 <plug_holes+0x104>
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	791b      	ldrb	r3, [r3, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d116      	bne.n	80081b4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008186:	4b15      	ldr	r3, [pc, #84]	; (80081dc <plug_holes+0x12c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	429a      	cmp	r2, r3
 800818e:	d102      	bne.n	8008196 <plug_holes+0xe6>
      lfree = pmem;
 8008190:	4a12      	ldr	r2, [pc, #72]	; (80081dc <plug_holes+0x12c>)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	881a      	ldrh	r2, [r3, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4a06      	ldr	r2, [pc, #24]	; (80081bc <plug_holes+0x10c>)
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	1a99      	subs	r1, r3, r2
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <plug_holes+0x10c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	8812      	ldrh	r2, [r2, #0]
 80081ae:	4413      	add	r3, r2
 80081b0:	b28a      	uxth	r2, r1
 80081b2:	805a      	strh	r2, [r3, #2]
  }
}
 80081b4:	bf00      	nop
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000214 	.word	0x20000214
 80081c0:	08018ebc 	.word	0x08018ebc
 80081c4:	08018eec 	.word	0x08018eec
 80081c8:	08018f04 	.word	0x08018f04
 80081cc:	20000218 	.word	0x20000218
 80081d0:	08018f2c 	.word	0x08018f2c
 80081d4:	08018f48 	.word	0x08018f48
 80081d8:	08018f64 	.word	0x08018f64
 80081dc:	2000021c 	.word	0x2000021c

080081e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80081e6:	4b19      	ldr	r3, [pc, #100]	; (800824c <mem_init+0x6c>)
 80081e8:	3303      	adds	r3, #3
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	461a      	mov	r2, r3
 80081f0:	4b17      	ldr	r3, [pc, #92]	; (8008250 <mem_init+0x70>)
 80081f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80081f4:	4b16      	ldr	r3, [pc, #88]	; (8008250 <mem_init+0x70>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008200:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <mem_init+0x70>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8008216:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <mem_init+0x74>)
 8008218:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800821a:	4b0e      	ldr	r3, [pc, #56]	; (8008254 <mem_init+0x74>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2201      	movs	r2, #1
 8008220:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <mem_init+0x74>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800822a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800822c:	4b09      	ldr	r3, [pc, #36]	; (8008254 <mem_init+0x74>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008234:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008236:	4b06      	ldr	r3, [pc, #24]	; (8008250 <mem_init+0x70>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a07      	ldr	r2, [pc, #28]	; (8008258 <mem_init+0x78>)
 800823c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000414 	.word	0x20000414
 8008250:	20000214 	.word	0x20000214
 8008254:	20000218 	.word	0x20000218
 8008258:	2000021c 	.word	0x2000021c

0800825c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d043      	beq.n	80082f2 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d006      	beq.n	8008282 <mem_free+0x26>
 8008274:	4b22      	ldr	r3, [pc, #136]	; (8008300 <mem_free+0xa4>)
 8008276:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800827a:	4922      	ldr	r1, [pc, #136]	; (8008304 <mem_free+0xa8>)
 800827c:	4822      	ldr	r0, [pc, #136]	; (8008308 <mem_free+0xac>)
 800827e:	f00e fec5 	bl	801700c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008282:	4b22      	ldr	r3, [pc, #136]	; (800830c <mem_free+0xb0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	d304      	bcc.n	8008296 <mem_free+0x3a>
 800828c:	4b20      	ldr	r3, [pc, #128]	; (8008310 <mem_free+0xb4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d306      	bcc.n	80082a4 <mem_free+0x48>
 8008296:	4b1a      	ldr	r3, [pc, #104]	; (8008300 <mem_free+0xa4>)
 8008298:	f240 12af 	movw	r2, #431	; 0x1af
 800829c:	491d      	ldr	r1, [pc, #116]	; (8008314 <mem_free+0xb8>)
 800829e:	481a      	ldr	r0, [pc, #104]	; (8008308 <mem_free+0xac>)
 80082a0:	f00e feb4 	bl	801700c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80082a4:	4b19      	ldr	r3, [pc, #100]	; (800830c <mem_free+0xb0>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d323      	bcc.n	80082f6 <mem_free+0x9a>
 80082ae:	4b18      	ldr	r3, [pc, #96]	; (8008310 <mem_free+0xb4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d21e      	bcs.n	80082f6 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3b08      	subs	r3, #8
 80082bc:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	791b      	ldrb	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <mem_free+0x78>
 80082c6:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <mem_free+0xa4>)
 80082c8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80082cc:	4912      	ldr	r1, [pc, #72]	; (8008318 <mem_free+0xbc>)
 80082ce:	480e      	ldr	r0, [pc, #56]	; (8008308 <mem_free+0xac>)
 80082d0:	f00e fe9c 	bl	801700c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80082da:	4b10      	ldr	r3, [pc, #64]	; (800831c <mem_free+0xc0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d202      	bcs.n	80082ea <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80082e4:	4a0d      	ldr	r2, [pc, #52]	; (800831c <mem_free+0xc0>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f7ff fee0 	bl	80080b0 <plug_holes>
 80082f0:	e002      	b.n	80082f8 <mem_free+0x9c>
    return;
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <mem_free+0x9c>
    return;
 80082f6:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	08018ebc 	.word	0x08018ebc
 8008304:	08018f90 	.word	0x08018f90
 8008308:	08018f04 	.word	0x08018f04
 800830c:	20000214 	.word	0x20000214
 8008310:	20000218 	.word	0x20000218
 8008314:	08018fb4 	.word	0x08018fb4
 8008318:	08018fcc 	.word	0x08018fcc
 800831c:	2000021c 	.word	0x2000021c

08008320 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800832c:	887b      	ldrh	r3, [r7, #2]
 800832e:	3303      	adds	r3, #3
 8008330:	b29b      	uxth	r3, r3
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8008338:	887b      	ldrh	r3, [r7, #2]
 800833a:	2b0b      	cmp	r3, #11
 800833c:	d801      	bhi.n	8008342 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800833e:	230c      	movs	r3, #12
 8008340:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8008342:	887b      	ldrh	r3, [r7, #2]
 8008344:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008348:	d901      	bls.n	800834e <mem_trim+0x2e>
    return NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	e0b1      	b.n	80084b2 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800834e:	4b5b      	ldr	r3, [pc, #364]	; (80084bc <mem_trim+0x19c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d304      	bcc.n	8008362 <mem_trim+0x42>
 8008358:	4b59      	ldr	r3, [pc, #356]	; (80084c0 <mem_trim+0x1a0>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	429a      	cmp	r2, r3
 8008360:	d306      	bcc.n	8008370 <mem_trim+0x50>
 8008362:	4b58      	ldr	r3, [pc, #352]	; (80084c4 <mem_trim+0x1a4>)
 8008364:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008368:	4957      	ldr	r1, [pc, #348]	; (80084c8 <mem_trim+0x1a8>)
 800836a:	4858      	ldr	r0, [pc, #352]	; (80084cc <mem_trim+0x1ac>)
 800836c:	f00e fe4e 	bl	801700c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008370:	4b52      	ldr	r3, [pc, #328]	; (80084bc <mem_trim+0x19c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	429a      	cmp	r2, r3
 8008378:	d304      	bcc.n	8008384 <mem_trim+0x64>
 800837a:	4b51      	ldr	r3, [pc, #324]	; (80084c0 <mem_trim+0x1a0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d301      	bcc.n	8008388 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	e094      	b.n	80084b2 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3b08      	subs	r3, #8
 800838c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4a4a      	ldr	r2, [pc, #296]	; (80084bc <mem_trim+0x19c>)
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	881a      	ldrh	r2, [r3, #0]
 800839c:	8a7b      	ldrh	r3, [r7, #18]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3b08      	subs	r3, #8
 80083a4:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80083a6:	887a      	ldrh	r2, [r7, #2]
 80083a8:	8a3b      	ldrh	r3, [r7, #16]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d906      	bls.n	80083bc <mem_trim+0x9c>
 80083ae:	4b45      	ldr	r3, [pc, #276]	; (80084c4 <mem_trim+0x1a4>)
 80083b0:	f240 2206 	movw	r2, #518	; 0x206
 80083b4:	4946      	ldr	r1, [pc, #280]	; (80084d0 <mem_trim+0x1b0>)
 80083b6:	4845      	ldr	r0, [pc, #276]	; (80084cc <mem_trim+0x1ac>)
 80083b8:	f00e fe28 	bl	801700c <iprintf>
  if (newsize > size) {
 80083bc:	887a      	ldrh	r2, [r7, #2]
 80083be:	8a3b      	ldrh	r3, [r7, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d901      	bls.n	80083c8 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	e074      	b.n	80084b2 <mem_trim+0x192>
  }
  if (newsize == size) {
 80083c8:	887a      	ldrh	r2, [r7, #2]
 80083ca:	8a3b      	ldrh	r3, [r7, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d101      	bne.n	80083d4 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	e06e      	b.n	80084b2 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80083d4:	4b39      	ldr	r3, [pc, #228]	; (80084bc <mem_trim+0x19c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	8812      	ldrh	r2, [r2, #0]
 80083dc:	4413      	add	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	791b      	ldrb	r3, [r3, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d131      	bne.n	800844c <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80083ee:	8a7a      	ldrh	r2, [r7, #18]
 80083f0:	887b      	ldrh	r3, [r7, #2]
 80083f2:	4413      	add	r3, r2
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3308      	adds	r3, #8
 80083f8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80083fa:	4b36      	ldr	r3, [pc, #216]	; (80084d4 <mem_trim+0x1b4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	429a      	cmp	r2, r3
 8008402:	d105      	bne.n	8008410 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8008404:	4b2d      	ldr	r3, [pc, #180]	; (80084bc <mem_trim+0x19c>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	897b      	ldrh	r3, [r7, #10]
 800840a:	4413      	add	r3, r2
 800840c:	4a31      	ldr	r2, [pc, #196]	; (80084d4 <mem_trim+0x1b4>)
 800840e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008410:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <mem_trim+0x19c>)
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	897b      	ldrh	r3, [r7, #10]
 8008416:	4413      	add	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	893a      	ldrh	r2, [r7, #8]
 8008424:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8a7a      	ldrh	r2, [r7, #18]
 800842a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	897a      	ldrh	r2, [r7, #10]
 8008430:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800843a:	d039      	beq.n	80084b0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800843c:	4b1f      	ldr	r3, [pc, #124]	; (80084bc <mem_trim+0x19c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	8812      	ldrh	r2, [r2, #0]
 8008444:	4413      	add	r3, r2
 8008446:	897a      	ldrh	r2, [r7, #10]
 8008448:	805a      	strh	r2, [r3, #2]
 800844a:	e031      	b.n	80084b0 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800844c:	887b      	ldrh	r3, [r7, #2]
 800844e:	f103 0214 	add.w	r2, r3, #20
 8008452:	8a3b      	ldrh	r3, [r7, #16]
 8008454:	429a      	cmp	r2, r3
 8008456:	d82b      	bhi.n	80084b0 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008458:	8a7a      	ldrh	r2, [r7, #18]
 800845a:	887b      	ldrh	r3, [r7, #2]
 800845c:	4413      	add	r3, r2
 800845e:	b29b      	uxth	r3, r3
 8008460:	3308      	adds	r3, #8
 8008462:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008464:	4b15      	ldr	r3, [pc, #84]	; (80084bc <mem_trim+0x19c>)
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	897b      	ldrh	r3, [r7, #10]
 800846a:	4413      	add	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800846e:	4b19      	ldr	r3, [pc, #100]	; (80084d4 <mem_trim+0x1b4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	429a      	cmp	r2, r3
 8008476:	d202      	bcs.n	800847e <mem_trim+0x15e>
      lfree = mem2;
 8008478:	4a16      	ldr	r2, [pc, #88]	; (80084d4 <mem_trim+0x1b4>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8a7a      	ldrh	r2, [r7, #18]
 8008490:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	897a      	ldrh	r2, [r7, #10]
 8008496:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084a0:	d006      	beq.n	80084b0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80084a2:	4b06      	ldr	r3, [pc, #24]	; (80084bc <mem_trim+0x19c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	8812      	ldrh	r2, [r2, #0]
 80084aa:	4413      	add	r3, r2
 80084ac:	897a      	ldrh	r2, [r7, #10]
 80084ae:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80084b0:	687b      	ldr	r3, [r7, #4]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000214 	.word	0x20000214
 80084c0:	20000218 	.word	0x20000218
 80084c4:	08018ebc 	.word	0x08018ebc
 80084c8:	08018fe0 	.word	0x08018fe0
 80084cc:	08018f04 	.word	0x08018f04
 80084d0:	08018ff8 	.word	0x08018ff8
 80084d4:	2000021c 	.word	0x2000021c

080084d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80084e2:	88fb      	ldrh	r3, [r7, #6]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <mem_malloc+0x14>
    return NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e0c8      	b.n	800867e <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	3303      	adds	r3, #3
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	2b0b      	cmp	r3, #11
 80084fc:	d801      	bhi.n	8008502 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80084fe:	230c      	movs	r3, #12
 8008500:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008508:	d901      	bls.n	800850e <mem_malloc+0x36>
    return NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	e0b7      	b.n	800867e <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800850e:	4b5e      	ldr	r3, [pc, #376]	; (8008688 <mem_malloc+0x1b0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	4b5d      	ldr	r3, [pc, #372]	; (800868c <mem_malloc+0x1b4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	83fb      	strh	r3, [r7, #30]
 800851c:	e0a7      	b.n	800866e <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800851e:	4b5b      	ldr	r3, [pc, #364]	; (800868c <mem_malloc+0x1b4>)
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	8bfb      	ldrh	r3, [r7, #30]
 8008524:	4413      	add	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	791b      	ldrb	r3, [r3, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f040 8098 	bne.w	8008662 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	8bfb      	ldrh	r3, [r7, #30]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	f1a3 0208 	sub.w	r2, r3, #8
 8008540:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8008542:	429a      	cmp	r2, r3
 8008544:	f0c0 808d 	bcc.w	8008662 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	8bfb      	ldrh	r3, [r7, #30]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	f1a3 0208 	sub.w	r2, r3, #8
 8008556:	88fb      	ldrh	r3, [r7, #6]
 8008558:	3314      	adds	r3, #20
 800855a:	429a      	cmp	r2, r3
 800855c:	d327      	bcc.n	80085ae <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800855e:	8bfa      	ldrh	r2, [r7, #30]
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	4413      	add	r3, r2
 8008564:	b29b      	uxth	r3, r3
 8008566:	3308      	adds	r3, #8
 8008568:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800856a:	4b48      	ldr	r3, [pc, #288]	; (800868c <mem_malloc+0x1b4>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	8a7b      	ldrh	r3, [r7, #18]
 8008570:	4413      	add	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	881a      	ldrh	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8bfa      	ldrh	r2, [r7, #30]
 8008586:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	8a7a      	ldrh	r2, [r7, #18]
 800858c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2201      	movs	r2, #1
 8008592:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800859c:	d00a      	beq.n	80085b4 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800859e:	4b3b      	ldr	r3, [pc, #236]	; (800868c <mem_malloc+0x1b4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	8812      	ldrh	r2, [r2, #0]
 80085a6:	4413      	add	r3, r2
 80085a8:	8a7a      	ldrh	r2, [r7, #18]
 80085aa:	805a      	strh	r2, [r3, #2]
 80085ac:	e002      	b.n	80085b4 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2201      	movs	r2, #1
 80085b2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80085b4:	4b34      	ldr	r3, [pc, #208]	; (8008688 <mem_malloc+0x1b0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d127      	bne.n	800860e <mem_malloc+0x136>
          struct mem *cur = lfree;
 80085be:	4b32      	ldr	r3, [pc, #200]	; (8008688 <mem_malloc+0x1b0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80085c4:	e005      	b.n	80085d2 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80085c6:	4b31      	ldr	r3, [pc, #196]	; (800868c <mem_malloc+0x1b4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	8812      	ldrh	r2, [r2, #0]
 80085ce:	4413      	add	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	791b      	ldrb	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <mem_malloc+0x10c>
 80085da:	4b2d      	ldr	r3, [pc, #180]	; (8008690 <mem_malloc+0x1b8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d1f0      	bne.n	80085c6 <mem_malloc+0xee>
          }
          lfree = cur;
 80085e4:	4a28      	ldr	r2, [pc, #160]	; (8008688 <mem_malloc+0x1b0>)
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80085ea:	4b27      	ldr	r3, [pc, #156]	; (8008688 <mem_malloc+0x1b0>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4b28      	ldr	r3, [pc, #160]	; (8008690 <mem_malloc+0x1b8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d00b      	beq.n	800860e <mem_malloc+0x136>
 80085f6:	4b24      	ldr	r3, [pc, #144]	; (8008688 <mem_malloc+0x1b0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	791b      	ldrb	r3, [r3, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <mem_malloc+0x136>
 8008600:	4b24      	ldr	r3, [pc, #144]	; (8008694 <mem_malloc+0x1bc>)
 8008602:	f240 22cf 	movw	r2, #719	; 0x2cf
 8008606:	4924      	ldr	r1, [pc, #144]	; (8008698 <mem_malloc+0x1c0>)
 8008608:	4824      	ldr	r0, [pc, #144]	; (800869c <mem_malloc+0x1c4>)
 800860a:	f00e fcff 	bl	801700c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800860e:	88fa      	ldrh	r2, [r7, #6]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	3308      	adds	r3, #8
 8008616:	4a1e      	ldr	r2, [pc, #120]	; (8008690 <mem_malloc+0x1b8>)
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	4293      	cmp	r3, r2
 800861c:	d906      	bls.n	800862c <mem_malloc+0x154>
 800861e:	4b1d      	ldr	r3, [pc, #116]	; (8008694 <mem_malloc+0x1bc>)
 8008620:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8008624:	491e      	ldr	r1, [pc, #120]	; (80086a0 <mem_malloc+0x1c8>)
 8008626:	481d      	ldr	r0, [pc, #116]	; (800869c <mem_malloc+0x1c4>)
 8008628:	f00e fcf0 	bl	801700c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d006      	beq.n	8008644 <mem_malloc+0x16c>
 8008636:	4b17      	ldr	r3, [pc, #92]	; (8008694 <mem_malloc+0x1bc>)
 8008638:	f240 22d6 	movw	r2, #726	; 0x2d6
 800863c:	4919      	ldr	r1, [pc, #100]	; (80086a4 <mem_malloc+0x1cc>)
 800863e:	4817      	ldr	r0, [pc, #92]	; (800869c <mem_malloc+0x1c4>)
 8008640:	f00e fce4 	bl	801700c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d006      	beq.n	800865c <mem_malloc+0x184>
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <mem_malloc+0x1bc>)
 8008650:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8008654:	4914      	ldr	r1, [pc, #80]	; (80086a8 <mem_malloc+0x1d0>)
 8008656:	4811      	ldr	r0, [pc, #68]	; (800869c <mem_malloc+0x1c4>)
 8008658:	f00e fcd8 	bl	801700c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	3308      	adds	r3, #8
 8008660:	e00d      	b.n	800867e <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <mem_malloc+0x1b4>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	8bfb      	ldrh	r3, [r7, #30]
 8008668:	4413      	add	r3, r2
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800866e:	8bfa      	ldrh	r2, [r7, #30]
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008676:	429a      	cmp	r2, r3
 8008678:	f4ff af51 	bcc.w	800851e <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3720      	adds	r7, #32
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	2000021c 	.word	0x2000021c
 800868c:	20000214 	.word	0x20000214
 8008690:	20000218 	.word	0x20000218
 8008694:	08018ebc 	.word	0x08018ebc
 8008698:	08019018 	.word	0x08019018
 800869c:	08018f04 	.word	0x08018f04
 80086a0:	08019034 	.word	0x08019034
 80086a4:	08019064 	.word	0x08019064
 80086a8:	08019094 	.word	0x08019094

080086ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	3303      	adds	r3, #3
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	e011      	b.n	80086f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	4413      	add	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3301      	adds	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	461a      	mov	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4293      	cmp	r3, r2
 80086fc:	dbe7      	blt.n	80086ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80086fe:	bf00      	nop
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008712:	2300      	movs	r3, #0
 8008714:	80fb      	strh	r3, [r7, #6]
 8008716:	e009      	b.n	800872c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	4a08      	ldr	r2, [pc, #32]	; (800873c <memp_init+0x30>)
 800871c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff ffc3 	bl	80086ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	3301      	adds	r3, #1
 800872a:	80fb      	strh	r3, [r7, #6]
 800872c:	88fb      	ldrh	r3, [r7, #6]
 800872e:	2b08      	cmp	r3, #8
 8008730:	d9f2      	bls.n	8008718 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	0801b2cc 	.word	0x0801b2cc

08008740 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d012      	beq.n	800877c <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d006      	beq.n	8008778 <do_memp_malloc_pool+0x38>
 800876a:	4b07      	ldr	r3, [pc, #28]	; (8008788 <do_memp_malloc_pool+0x48>)
 800876c:	f240 1249 	movw	r2, #329	; 0x149
 8008770:	4906      	ldr	r1, [pc, #24]	; (800878c <do_memp_malloc_pool+0x4c>)
 8008772:	4807      	ldr	r0, [pc, #28]	; (8008790 <do_memp_malloc_pool+0x50>)
 8008774:	f00e fc4a 	bl	801700c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	e000      	b.n	800877e <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	080190b8 	.word	0x080190b8
 800878c:	080190e8 	.word	0x080190e8
 8008790:	0801910c 	.word	0x0801910c

08008794 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d908      	bls.n	80087b6 <memp_malloc+0x22>
 80087a4:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <memp_malloc+0x3c>)
 80087a6:	f240 1287 	movw	r2, #391	; 0x187
 80087aa:	490a      	ldr	r1, [pc, #40]	; (80087d4 <memp_malloc+0x40>)
 80087ac:	480a      	ldr	r0, [pc, #40]	; (80087d8 <memp_malloc+0x44>)
 80087ae:	f00e fc2d 	bl	801700c <iprintf>
 80087b2:	2300      	movs	r3, #0
 80087b4:	e008      	b.n	80087c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	4a08      	ldr	r2, [pc, #32]	; (80087dc <memp_malloc+0x48>)
 80087ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff ffbe 	bl	8008740 <do_memp_malloc_pool>
 80087c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80087c6:	68fb      	ldr	r3, [r7, #12]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	080190b8 	.word	0x080190b8
 80087d4:	08019148 	.word	0x08019148
 80087d8:	0801910c 	.word	0x0801910c
 80087dc:	0801b2cc 	.word	0x0801b2cc

080087e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d006      	beq.n	8008802 <do_memp_free_pool+0x22>
 80087f4:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <do_memp_free_pool+0x40>)
 80087f6:	f240 129d 	movw	r2, #413	; 0x19d
 80087fa:	490a      	ldr	r1, [pc, #40]	; (8008824 <do_memp_free_pool+0x44>)
 80087fc:	480a      	ldr	r0, [pc, #40]	; (8008828 <do_memp_free_pool+0x48>)
 80087fe:	f00e fc05 	bl	801700c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	080190b8 	.word	0x080190b8
 8008824:	08019168 	.word	0x08019168
 8008828:	0801910c 	.word	0x0801910c

0800882c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	6039      	str	r1, [r7, #0]
 8008836:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	2b08      	cmp	r3, #8
 800883c:	d907      	bls.n	800884e <memp_free+0x22>
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <memp_free+0x44>)
 8008840:	f240 12db 	movw	r2, #475	; 0x1db
 8008844:	490b      	ldr	r1, [pc, #44]	; (8008874 <memp_free+0x48>)
 8008846:	480c      	ldr	r0, [pc, #48]	; (8008878 <memp_free+0x4c>)
 8008848:	f00e fbe0 	bl	801700c <iprintf>
 800884c:	e00c      	b.n	8008868 <memp_free+0x3c>

  if (mem == NULL) {
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	4a09      	ldr	r2, [pc, #36]	; (800887c <memp_free+0x50>)
 8008858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff ffbe 	bl	80087e0 <do_memp_free_pool>
 8008864:	e000      	b.n	8008868 <memp_free+0x3c>
    return;
 8008866:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	080190b8 	.word	0x080190b8
 8008874:	08019188 	.word	0x08019188
 8008878:	0801910c 	.word	0x0801910c
 800887c:	0801b2cc 	.word	0x0801b2cc

08008880 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <netif_add+0x20>
 80088a4:	4b23      	ldr	r3, [pc, #140]	; (8008934 <netif_add+0xa4>)
 80088a6:	22fb      	movs	r2, #251	; 0xfb
 80088a8:	4923      	ldr	r1, [pc, #140]	; (8008938 <netif_add+0xa8>)
 80088aa:	4824      	ldr	r0, [pc, #144]	; (800893c <netif_add+0xac>)
 80088ac:	f00e fbae 	bl	801700c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3320      	adds	r3, #32
 80088ce:	2204      	movs	r2, #4
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f00e faea 	bl	8016eac <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2203      	movs	r2, #3
 80088dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80088e6:	4b16      	ldr	r3, [pc, #88]	; (8008940 <netif_add+0xb0>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	b2d1      	uxtb	r1, r2
 80088ee:	4a14      	ldr	r2, [pc, #80]	; (8008940 <netif_add+0xb0>)
 80088f0:	7011      	strb	r1, [r2, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f81f 	bl	8008948 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	4798      	blx	r3
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <netif_add+0x8a>
    return NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	e007      	b.n	800892a <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800891a:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <netif_add+0xb4>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008922:	4a08      	ldr	r2, [pc, #32]	; (8008944 <netif_add+0xb4>)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8008928:	68fb      	ldr	r3, [r7, #12]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	080191a4 	.word	0x080191a4
 8008938:	080191d8 	.word	0x080191d8
 800893c:	080191f0 	.word	0x080191f0
 8008940:	20000244 	.word	0x20000244
 8008944:	2000393c 	.word	0x2000393c

08008948 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <netif_set_addr+0x1c>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10c      	bne.n	800897e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f81a 	bl	80089a0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f862 	bl	8008a38 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f84a 	bl	8008a10 <netif_set_gw>
 800897c:	e00b      	b.n	8008996 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f859 	bl	8008a38 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f841 	bl	8008a10 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f805 	bl	80089a0 <netif_set_ipaddr>
  }
}
 8008996:	bf00      	nop
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <netif_set_ipaddr+0x18>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e002      	b.n	80089be <netif_set_ipaddr+0x1e>
 80089b8:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <netif_set_ipaddr+0x6c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d01c      	beq.n	8008a04 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3304      	adds	r3, #4
 80089ce:	f107 020c 	add.w	r2, r7, #12
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f002 fabb 	bl	800af50 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3304      	adds	r3, #4
 80089de:	f107 020c 	add.w	r2, r7, #12
 80089e2:	4611      	mov	r1, r2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f006 fcb1 	bl	800f34c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <netif_set_ipaddr+0x56>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	e000      	b.n	80089f8 <netif_set_ipaddr+0x58>
 80089f6:	2300      	movs	r3, #0
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80089fc:	2101      	movs	r1, #1
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f861 	bl	8008ac6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	0801b340 	.word	0x0801b340

08008a10 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <netif_set_gw+0x16>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	e000      	b.n	8008a28 <netif_set_gw+0x18>
 8008a26:	2300      	movs	r3, #0
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <netif_set_netmask+0x16>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	e000      	b.n	8008a50 <netif_set_netmask+0x18>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008a68:	4a04      	ldr	r2, [pc, #16]	; (8008a7c <netif_set_default+0x1c>)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	20003940 	.word	0x20003940

08008a80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d113      	bne.n	8008abe <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008ab6:	2103      	movs	r1, #3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f804 	bl	8008ac6 <netif_issue_reports>
    }
  }
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d011      	beq.n	8008b00 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00c      	beq.n	8008b00 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f008 fcbc 	bl	8011478 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d012      	beq.n	8008b44 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b24:	f023 0301 	bic.w	r3, r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b36:	f003 0308 	and.w	r3, r3, #8
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f008 f85c 	bl	8010bfc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008b52:	4b0e      	ldr	r3, [pc, #56]	; (8008b8c <pbuf_free_ooseq+0x40>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b58:	4b0d      	ldr	r3, [pc, #52]	; (8008b90 <pbuf_free_ooseq+0x44>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	607b      	str	r3, [r7, #4]
 8008b5e:	e00f      	b.n	8008b80 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d008      	beq.n	8008b7a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fe62 	bl	800a836 <tcp_segs_free>
      pcb->ooseq = NULL;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8008b78:	e005      	b.n	8008b86 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	607b      	str	r3, [r7, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1ec      	bne.n	8008b60 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20003944 	.word	0x20003944
 8008b90:	2000394c 	.word	0x2000394c

08008b94 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008b98:	4b03      	ldr	r3, [pc, #12]	; (8008ba8 <pbuf_pool_is_empty+0x14>)
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008b9e:	bf00      	nop
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	20003944 	.word	0x20003944

08008bac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	71fb      	strb	r3, [r7, #7]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	80bb      	strh	r3, [r7, #4]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d81c      	bhi.n	8008bfe <pbuf_alloc+0x52>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <pbuf_alloc+0x20>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008be1 	.word	0x08008be1
 8008bd0:	08008be7 	.word	0x08008be7
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bf3 	.word	0x08008bf3
 8008bdc:	08008bf9 	.word	0x08008bf9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008be0:	2336      	movs	r3, #54	; 0x36
 8008be2:	82fb      	strh	r3, [r7, #22]
    break;
 8008be4:	e014      	b.n	8008c10 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008be6:	2322      	movs	r3, #34	; 0x22
 8008be8:	82fb      	strh	r3, [r7, #22]
    break;
 8008bea:	e011      	b.n	8008c10 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008bec:	230e      	movs	r3, #14
 8008bee:	82fb      	strh	r3, [r7, #22]
    break;
 8008bf0:	e00e      	b.n	8008c10 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	82fb      	strh	r3, [r7, #22]
    break;
 8008bf6:	e00b      	b.n	8008c10 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	82fb      	strh	r3, [r7, #22]
    break;
 8008bfc:	e008      	b.n	8008c10 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008bfe:	4ba5      	ldr	r3, [pc, #660]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008c00:	f44f 728b 	mov.w	r2, #278	; 0x116
 8008c04:	49a4      	ldr	r1, [pc, #656]	; (8008e98 <pbuf_alloc+0x2ec>)
 8008c06:	48a5      	ldr	r0, [pc, #660]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008c08:	f00e fa00 	bl	801700c <iprintf>
    return NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e15d      	b.n	8008ecc <pbuf_alloc+0x320>
  }

  switch (type) {
 8008c10:	79bb      	ldrb	r3, [r7, #6]
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	f200 8134 	bhi.w	8008e80 <pbuf_alloc+0x2d4>
 8008c18:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <pbuf_alloc+0x74>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008dc1 	.word	0x08008dc1
 8008c24:	08008e4d 	.word	0x08008e4d
 8008c28:	08008e4d 	.word	0x08008e4d
 8008c2c:	08008c31 	.word	0x08008c31
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008c30:	2008      	movs	r0, #8
 8008c32:	f7ff fdaf 	bl	8008794 <memp_malloc>
 8008c36:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d103      	bne.n	8008c46 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8008c3e:	f7ff ffa9 	bl	8008b94 <pbuf_pool_is_empty>
      return NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	e142      	b.n	8008ecc <pbuf_alloc+0x320>
    }
    p->type = type;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	79ba      	ldrb	r2, [r7, #6]
 8008c4a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8008c52:	8afb      	ldrh	r3, [r7, #22]
 8008c54:	3310      	adds	r3, #16
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	3303      	adds	r3, #3
 8008c5c:	f023 0303 	bic.w	r3, r3, #3
 8008c60:	461a      	mov	r2, r3
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <pbuf_alloc+0xd4>
 8008c72:	4b88      	ldr	r3, [pc, #544]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008c74:	f240 1229 	movw	r2, #297	; 0x129
 8008c78:	4989      	ldr	r1, [pc, #548]	; (8008ea0 <pbuf_alloc+0x2f4>)
 8008c7a:	4888      	ldr	r0, [pc, #544]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008c7c:	f00e f9c6 	bl	801700c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	88ba      	ldrh	r2, [r7, #4]
 8008c84:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8008c86:	8afb      	ldrh	r3, [r7, #22]
 8008c88:	3303      	adds	r3, #3
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8008c92:	88bb      	ldrh	r3, [r7, #4]
 8008c94:	4293      	cmp	r3, r2
 8008c96:	bf28      	it	cs
 8008c98:	4613      	movcs	r3, r2
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	8952      	ldrh	r2, [r2, #10]
 8008ca8:	441a      	add	r2, r3
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d906      	bls.n	8008cc2 <pbuf_alloc+0x116>
 8008cb4:	4b77      	ldr	r3, [pc, #476]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008cb6:	f44f 7298 	mov.w	r2, #304	; 0x130
 8008cba:	497a      	ldr	r1, [pc, #488]	; (8008ea4 <pbuf_alloc+0x2f8>)
 8008cbc:	4877      	ldr	r0, [pc, #476]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008cbe:	f00e f9a5 	bl	801700c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008cc2:	8afb      	ldrh	r3, [r7, #22]
 8008cc4:	3303      	adds	r3, #3
 8008cc6:	f023 0303 	bic.w	r3, r3, #3
 8008cca:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008cce:	d106      	bne.n	8008cde <pbuf_alloc+0x132>
 8008cd0:	4b70      	ldr	r3, [pc, #448]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008cd2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8008cd6:	4974      	ldr	r1, [pc, #464]	; (8008ea8 <pbuf_alloc+0x2fc>)
 8008cd8:	4870      	ldr	r0, [pc, #448]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008cda:	f00e f997 	bl	801700c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8008ce8:	88bb      	ldrh	r3, [r7, #4]
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	8952      	ldrh	r2, [r2, #10]
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8008cf2:	e061      	b.n	8008db8 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008cf4:	2008      	movs	r0, #8
 8008cf6:	f7ff fd4d 	bl	8008794 <memp_malloc>
 8008cfa:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8008d02:	f7ff ff47 	bl	8008b94 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8008d06:	69f8      	ldr	r0, [r7, #28]
 8008d08:	f000 fac2 	bl	8009290 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e0dd      	b.n	8008ecc <pbuf_alloc+0x320>
      }
      q->type = type;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	79ba      	ldrb	r2, [r7, #6]
 8008d14:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	dd06      	ble.n	8008d40 <pbuf_alloc+0x194>
 8008d32:	4b58      	ldr	r3, [pc, #352]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008d34:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008d38:	495c      	ldr	r1, [pc, #368]	; (8008eac <pbuf_alloc+0x300>)
 8008d3a:	4858      	ldr	r0, [pc, #352]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008d3c:	f00e f966 	bl	801700c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008d50:	bf28      	it	cs
 8008d52:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f103 0210 	add.w	r2, r3, #16
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d006      	beq.n	8008d80 <pbuf_alloc+0x1d4>
 8008d72:	4b48      	ldr	r3, [pc, #288]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008d74:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8008d78:	494d      	ldr	r1, [pc, #308]	; (8008eb0 <pbuf_alloc+0x304>)
 8008d7a:	4848      	ldr	r0, [pc, #288]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008d7c:	f00e f946 	bl	801700c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	8952      	ldrh	r2, [r2, #10]
 8008d88:	441a      	add	r2, r3
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d906      	bls.n	8008da2 <pbuf_alloc+0x1f6>
 8008d94:	4b3f      	ldr	r3, [pc, #252]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008d96:	f240 1255 	movw	r2, #341	; 0x155
 8008d9a:	4942      	ldr	r1, [pc, #264]	; (8008ea4 <pbuf_alloc+0x2f8>)
 8008d9c:	483f      	ldr	r0, [pc, #252]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008d9e:	f00e f935 	bl	801700c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	895b      	ldrh	r3, [r3, #10]
 8008dac:	461a      	mov	r2, r3
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dc9a      	bgt.n	8008cf4 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008dbe:	e07e      	b.n	8008ebe <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8008dc0:	8afb      	ldrh	r3, [r7, #22]
 8008dc2:	3313      	adds	r3, #19
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f023 0303 	bic.w	r3, r3, #3
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	88bb      	ldrh	r3, [r7, #4]
 8008dce:	3303      	adds	r3, #3
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f023 0303 	bic.w	r3, r3, #3
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4413      	add	r3, r2
 8008dda:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8008ddc:	897a      	ldrh	r2, [r7, #10]
 8008dde:	88bb      	ldrh	r3, [r7, #4]
 8008de0:	3303      	adds	r3, #3
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d201      	bcs.n	8008dee <pbuf_alloc+0x242>
        return NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e06e      	b.n	8008ecc <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008dee:	897b      	ldrh	r3, [r7, #10]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fb71 	bl	80084d8 <mem_malloc>
 8008df6:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <pbuf_alloc+0x256>
      return NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e064      	b.n	8008ecc <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008e02:	8afb      	ldrh	r3, [r7, #22]
 8008e04:	3310      	adds	r3, #16
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	3303      	adds	r3, #3
 8008e0c:	f023 0303 	bic.w	r3, r3, #3
 8008e10:	461a      	mov	r2, r3
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	88ba      	ldrh	r2, [r7, #4]
 8008e1a:	811a      	strh	r2, [r3, #8]
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	891a      	ldrh	r2, [r3, #8]
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	79ba      	ldrb	r2, [r7, #6]
 8008e2e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f003 0303 	and.w	r3, r3, #3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d03f      	beq.n	8008ebc <pbuf_alloc+0x310>
 8008e3c:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008e3e:	f240 1277 	movw	r2, #375	; 0x177
 8008e42:	491c      	ldr	r1, [pc, #112]	; (8008eb4 <pbuf_alloc+0x308>)
 8008e44:	4815      	ldr	r0, [pc, #84]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008e46:	f00e f8e1 	bl	801700c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8008e4a:	e037      	b.n	8008ebc <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008e4c:	2007      	movs	r0, #7
 8008e4e:	f7ff fca1 	bl	8008794 <memp_malloc>
 8008e52:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e036      	b.n	8008ecc <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	2200      	movs	r2, #0
 8008e62:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	88ba      	ldrh	r2, [r7, #4]
 8008e68:	811a      	strh	r2, [r3, #8]
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	891a      	ldrh	r2, [r3, #8]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	79ba      	ldrb	r2, [r7, #6]
 8008e7c:	731a      	strb	r2, [r3, #12]
    break;
 8008e7e:	e01e      	b.n	8008ebe <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008e80:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <pbuf_alloc+0x2e8>)
 8008e82:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008e86:	490c      	ldr	r1, [pc, #48]	; (8008eb8 <pbuf_alloc+0x30c>)
 8008e88:	4804      	ldr	r0, [pc, #16]	; (8008e9c <pbuf_alloc+0x2f0>)
 8008e8a:	f00e f8bf 	bl	801700c <iprintf>
    return NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e01c      	b.n	8008ecc <pbuf_alloc+0x320>
 8008e92:	bf00      	nop
 8008e94:	08019218 	.word	0x08019218
 8008e98:	08019248 	.word	0x08019248
 8008e9c:	08019264 	.word	0x08019264
 8008ea0:	0801928c 	.word	0x0801928c
 8008ea4:	080192bc 	.word	0x080192bc
 8008ea8:	080192f0 	.word	0x080192f0
 8008eac:	08019324 	.word	0x08019324
 8008eb0:	08019338 	.word	0x08019338
 8008eb4:	08019368 	.word	0x08019368
 8008eb8:	08019394 	.word	0x08019394
    break;
 8008ebc:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008eca:	69fb      	ldr	r3, [r7, #28]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	4603      	mov	r3, r0
 8008ede:	71fb      	strb	r3, [r7, #7]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	80bb      	strh	r3, [r7, #4]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d81b      	bhi.n	8008f26 <pbuf_alloced_custom+0x52>
 8008eee:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <pbuf_alloced_custom+0x20>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f09 	.word	0x08008f09
 8008ef8:	08008f0f 	.word	0x08008f0f
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08008f1b 	.word	0x08008f1b
 8008f04:	08008f21 	.word	0x08008f21
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008f08:	2336      	movs	r3, #54	; 0x36
 8008f0a:	81fb      	strh	r3, [r7, #14]
    break;
 8008f0c:	e014      	b.n	8008f38 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008f0e:	2322      	movs	r3, #34	; 0x22
 8008f10:	81fb      	strh	r3, [r7, #14]
    break;
 8008f12:	e011      	b.n	8008f38 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008f14:	230e      	movs	r3, #14
 8008f16:	81fb      	strh	r3, [r7, #14]
    break;
 8008f18:	e00e      	b.n	8008f38 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	81fb      	strh	r3, [r7, #14]
    break;
 8008f1e:	e00b      	b.n	8008f38 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	81fb      	strh	r3, [r7, #14]
    break;
 8008f24:	e008      	b.n	8008f38 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8008f26:	4b1d      	ldr	r3, [pc, #116]	; (8008f9c <pbuf_alloced_custom+0xc8>)
 8008f28:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008f2c:	491c      	ldr	r1, [pc, #112]	; (8008fa0 <pbuf_alloced_custom+0xcc>)
 8008f2e:	481d      	ldr	r0, [pc, #116]	; (8008fa4 <pbuf_alloced_custom+0xd0>)
 8008f30:	f00e f86c 	bl	801700c <iprintf>
    return NULL;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e02d      	b.n	8008f94 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008f38:	89fb      	ldrh	r3, [r7, #14]
 8008f3a:	3303      	adds	r3, #3
 8008f3c:	f023 0203 	bic.w	r2, r3, #3
 8008f40:	88bb      	ldrh	r3, [r7, #4]
 8008f42:	441a      	add	r2, r3
 8008f44:	8bbb      	ldrh	r3, [r7, #28]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d901      	bls.n	8008f4e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e022      	b.n	8008f94 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008f5a:	89fb      	ldrh	r3, [r7, #14]
 8008f5c:	3303      	adds	r3, #3
 8008f5e:	f023 0303 	bic.w	r3, r3, #3
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	441a      	add	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	605a      	str	r2, [r3, #4]
 8008f6a:	e002      	b.n	8008f72 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2202      	movs	r2, #2
 8008f76:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	88ba      	ldrh	r2, [r7, #4]
 8008f7c:	811a      	strh	r2, [r3, #8]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	891a      	ldrh	r2, [r3, #8]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	79ba      	ldrb	r2, [r7, #6]
 8008f8a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8008f92:	683b      	ldr	r3, [r7, #0]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	08019218 	.word	0x08019218
 8008fa0:	080193b0 	.word	0x080193b0
 8008fa4:	08019264 	.word	0x08019264

08008fa8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <pbuf_realloc+0x20>
 8008fba:	4b4b      	ldr	r3, [pc, #300]	; (80090e8 <pbuf_realloc+0x140>)
 8008fbc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008fc0:	494a      	ldr	r1, [pc, #296]	; (80090ec <pbuf_realloc+0x144>)
 8008fc2:	484b      	ldr	r0, [pc, #300]	; (80090f0 <pbuf_realloc+0x148>)
 8008fc4:	f00e f822 	bl	801700c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7b1b      	ldrb	r3, [r3, #12]
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d012      	beq.n	8008ff6 <pbuf_realloc+0x4e>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7b1b      	ldrb	r3, [r3, #12]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d00e      	beq.n	8008ff6 <pbuf_realloc+0x4e>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7b1b      	ldrb	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <pbuf_realloc+0x4e>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7b1b      	ldrb	r3, [r3, #12]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d006      	beq.n	8008ff6 <pbuf_realloc+0x4e>
 8008fe8:	4b3f      	ldr	r3, [pc, #252]	; (80090e8 <pbuf_realloc+0x140>)
 8008fea:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008fee:	4941      	ldr	r1, [pc, #260]	; (80090f4 <pbuf_realloc+0x14c>)
 8008ff0:	483f      	ldr	r0, [pc, #252]	; (80090f0 <pbuf_realloc+0x148>)
 8008ff2:	f00e f80b 	bl	801700c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	891b      	ldrh	r3, [r3, #8]
 8008ffa:	887a      	ldrh	r2, [r7, #2]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d26f      	bcs.n	80090e0 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8009000:	887b      	ldrh	r3, [r7, #2]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	8912      	ldrh	r2, [r2, #8]
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800900a:	887b      	ldrh	r3, [r7, #2]
 800900c:	827b      	strh	r3, [r7, #18]
  q = p;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009012:	e025      	b.n	8009060 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	895b      	ldrh	r3, [r3, #10]
 8009018:	8a7a      	ldrh	r2, [r7, #18]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009024:	4293      	cmp	r3, r2
 8009026:	dd06      	ble.n	8009036 <pbuf_realloc+0x8e>
 8009028:	4b2f      	ldr	r3, [pc, #188]	; (80090e8 <pbuf_realloc+0x140>)
 800902a:	f240 220b 	movw	r2, #523	; 0x20b
 800902e:	4932      	ldr	r1, [pc, #200]	; (80090f8 <pbuf_realloc+0x150>)
 8009030:	482f      	ldr	r0, [pc, #188]	; (80090f0 <pbuf_realloc+0x148>)
 8009032:	f00d ffeb 	bl	801700c <iprintf>
    q->tot_len += (u16_t)grow;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	891a      	ldrh	r2, [r3, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	b29b      	uxth	r3, r3
 800903e:	4413      	add	r3, r2
 8009040:	b29a      	uxth	r2, r3
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <pbuf_realloc+0xb8>
 8009052:	4b25      	ldr	r3, [pc, #148]	; (80090e8 <pbuf_realloc+0x140>)
 8009054:	f240 220f 	movw	r2, #527	; 0x20f
 8009058:	4928      	ldr	r1, [pc, #160]	; (80090fc <pbuf_realloc+0x154>)
 800905a:	4825      	ldr	r0, [pc, #148]	; (80090f0 <pbuf_realloc+0x148>)
 800905c:	f00d ffd6 	bl	801700c <iprintf>
  while (rem_len > q->len) {
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	895b      	ldrh	r3, [r3, #10]
 8009064:	8a7a      	ldrh	r2, [r7, #18]
 8009066:	429a      	cmp	r2, r3
 8009068:	d8d4      	bhi.n	8009014 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	7b1b      	ldrb	r3, [r3, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d122      	bne.n	80090b8 <pbuf_realloc+0x110>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	895b      	ldrh	r3, [r3, #10]
 8009076:	8a7a      	ldrh	r2, [r7, #18]
 8009078:	429a      	cmp	r2, r3
 800907a:	d01d      	beq.n	80090b8 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	7b5b      	ldrb	r3, [r3, #13]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d117      	bne.n	80090b8 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	461a      	mov	r2, r3
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	b29a      	uxth	r2, r3
 8009094:	8a7b      	ldrh	r3, [r7, #18]
 8009096:	4413      	add	r3, r2
 8009098:	b29b      	uxth	r3, r3
 800909a:	4619      	mov	r1, r3
 800909c:	6978      	ldr	r0, [r7, #20]
 800909e:	f7ff f93f 	bl	8008320 <mem_trim>
 80090a2:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <pbuf_realloc+0x110>
 80090aa:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <pbuf_realloc+0x140>)
 80090ac:	f240 221d 	movw	r2, #541	; 0x21d
 80090b0:	4913      	ldr	r1, [pc, #76]	; (8009100 <pbuf_realloc+0x158>)
 80090b2:	480f      	ldr	r0, [pc, #60]	; (80090f0 <pbuf_realloc+0x148>)
 80090b4:	f00d ffaa 	bl	801700c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	8a7a      	ldrh	r2, [r7, #18]
 80090bc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	895a      	ldrh	r2, [r3, #10]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f8dc 	bl	8009290 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	e000      	b.n	80090e2 <pbuf_realloc+0x13a>
    return;
 80090e0:	bf00      	nop

}
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	08019218 	.word	0x08019218
 80090ec:	080193d4 	.word	0x080193d4
 80090f0:	08019264 	.word	0x08019264
 80090f4:	080193ec 	.word	0x080193ec
 80090f8:	08019408 	.word	0x08019408
 80090fc:	0801941c 	.word	0x0801941c
 8009100:	08019434 	.word	0x08019434

08009104 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	807b      	strh	r3, [r7, #2]
 8009110:	4613      	mov	r3, r2
 8009112:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <pbuf_header_impl+0x24>
 800911a:	4b46      	ldr	r3, [pc, #280]	; (8009234 <pbuf_header_impl+0x130>)
 800911c:	f240 223f 	movw	r2, #575	; 0x23f
 8009120:	4945      	ldr	r1, [pc, #276]	; (8009238 <pbuf_header_impl+0x134>)
 8009122:	4846      	ldr	r0, [pc, #280]	; (800923c <pbuf_header_impl+0x138>)
 8009124:	f00d ff72 	bl	801700c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009128:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <pbuf_header_impl+0x32>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <pbuf_header_impl+0x36>
    return 0;
 8009136:	2300      	movs	r3, #0
 8009138:	e078      	b.n	800922c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800913a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800913e:	2b00      	cmp	r3, #0
 8009140:	da10      	bge.n	8009164 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8009142:	887b      	ldrh	r3, [r7, #2]
 8009144:	425b      	negs	r3, r3
 8009146:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	895b      	ldrh	r3, [r3, #10]
 800914c:	89fa      	ldrh	r2, [r7, #14]
 800914e:	429a      	cmp	r2, r3
 8009150:	d90a      	bls.n	8009168 <pbuf_header_impl+0x64>
 8009152:	4b38      	ldr	r3, [pc, #224]	; (8009234 <pbuf_header_impl+0x130>)
 8009154:	f240 2247 	movw	r2, #583	; 0x247
 8009158:	4939      	ldr	r1, [pc, #228]	; (8009240 <pbuf_header_impl+0x13c>)
 800915a:	4838      	ldr	r0, [pc, #224]	; (800923c <pbuf_header_impl+0x138>)
 800915c:	f00d ff56 	bl	801700c <iprintf>
 8009160:	2301      	movs	r3, #1
 8009162:	e063      	b.n	800922c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8009164:	887b      	ldrh	r3, [r7, #2]
 8009166:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7b1b      	ldrb	r3, [r3, #12]
 800916c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8009174:	89bb      	ldrh	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <pbuf_header_impl+0x7c>
 800917a:	89bb      	ldrh	r3, [r7, #12]
 800917c:	2b03      	cmp	r3, #3
 800917e:	d112      	bne.n	80091a6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009188:	425b      	negs	r3, r3
 800918a:	441a      	add	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3310      	adds	r3, #16
 8009198:	429a      	cmp	r2, r3
 800919a:	d238      	bcs.n	800920e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e042      	b.n	800922c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80091a6:	89bb      	ldrh	r3, [r7, #12]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d002      	beq.n	80091b2 <pbuf_header_impl+0xae>
 80091ac:	89bb      	ldrh	r3, [r7, #12]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d124      	bne.n	80091fc <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80091b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da0d      	bge.n	80091d6 <pbuf_header_impl+0xd2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	895b      	ldrh	r3, [r3, #10]
 80091be:	89fa      	ldrh	r2, [r7, #14]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d808      	bhi.n	80091d6 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091cc:	425b      	negs	r3, r3
 80091ce:	441a      	add	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	605a      	str	r2, [r3, #4]
 80091d4:	e011      	b.n	80091fa <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80091d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	dd0b      	ble.n	80091f6 <pbuf_header_impl+0xf2>
 80091de:	787b      	ldrb	r3, [r7, #1]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d008      	beq.n	80091f6 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091ec:	425b      	negs	r3, r3
 80091ee:	441a      	add	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	605a      	str	r2, [r3, #4]
 80091f4:	e001      	b.n	80091fa <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e018      	b.n	800922c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80091fa:	e008      	b.n	800920e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80091fc:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <pbuf_header_impl+0x130>)
 80091fe:	f240 2277 	movw	r2, #631	; 0x277
 8009202:	4910      	ldr	r1, [pc, #64]	; (8009244 <pbuf_header_impl+0x140>)
 8009204:	480d      	ldr	r0, [pc, #52]	; (800923c <pbuf_header_impl+0x138>)
 8009206:	f00d ff01 	bl	801700c <iprintf>
    return 1;
 800920a:	2301      	movs	r3, #1
 800920c:	e00e      	b.n	800922c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	895a      	ldrh	r2, [r3, #10]
 8009212:	887b      	ldrh	r3, [r7, #2]
 8009214:	4413      	add	r3, r2
 8009216:	b29a      	uxth	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	891a      	ldrh	r2, [r3, #8]
 8009220:	887b      	ldrh	r3, [r7, #2]
 8009222:	4413      	add	r3, r2
 8009224:	b29a      	uxth	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	08019218 	.word	0x08019218
 8009238:	08019450 	.word	0x08019450
 800923c:	08019264 	.word	0x08019264
 8009240:	0801945c 	.word	0x0801945c
 8009244:	0801947c 	.word	0x0801947c

08009248 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8009254:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009258:	2200      	movs	r2, #0
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff ff51 	bl	8009104 <pbuf_header_impl>
 8009262:	4603      	mov	r3, r0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8009278:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800927c:	2201      	movs	r2, #1
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ff3f 	bl	8009104 <pbuf_header_impl>
 8009286:	4603      	mov	r3, r0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10b      	bne.n	80092b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <pbuf_free+0x22>
 80092a4:	4b3e      	ldr	r3, [pc, #248]	; (80093a0 <pbuf_free+0x110>)
 80092a6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80092aa:	493e      	ldr	r1, [pc, #248]	; (80093a4 <pbuf_free+0x114>)
 80092ac:	483e      	ldr	r0, [pc, #248]	; (80093a8 <pbuf_free+0x118>)
 80092ae:	f00d fead 	bl	801700c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e070      	b.n	8009398 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	7b1b      	ldrb	r3, [r3, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <pbuf_free+0x54>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	7b1b      	ldrb	r3, [r3, #12]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d00e      	beq.n	80092e4 <pbuf_free+0x54>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	7b1b      	ldrb	r3, [r3, #12]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d00a      	beq.n	80092e4 <pbuf_free+0x54>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7b1b      	ldrb	r3, [r3, #12]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d006      	beq.n	80092e4 <pbuf_free+0x54>
 80092d6:	4b32      	ldr	r3, [pc, #200]	; (80093a0 <pbuf_free+0x110>)
 80092d8:	f240 22de 	movw	r2, #734	; 0x2de
 80092dc:	4933      	ldr	r1, [pc, #204]	; (80093ac <pbuf_free+0x11c>)
 80092de:	4832      	ldr	r0, [pc, #200]	; (80093a8 <pbuf_free+0x118>)
 80092e0:	f00d fe94 	bl	801700c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80092e8:	e052      	b.n	8009390 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	89db      	ldrh	r3, [r3, #14]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <pbuf_free+0x70>
 80092f2:	4b2b      	ldr	r3, [pc, #172]	; (80093a0 <pbuf_free+0x110>)
 80092f4:	f240 22eb 	movw	r2, #747	; 0x2eb
 80092f8:	492d      	ldr	r1, [pc, #180]	; (80093b0 <pbuf_free+0x120>)
 80092fa:	482b      	ldr	r0, [pc, #172]	; (80093a8 <pbuf_free+0x118>)
 80092fc:	f00d fe86 	bl	801700c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	89db      	ldrh	r3, [r3, #14]
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	81da      	strh	r2, [r3, #14]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	89db      	ldrh	r3, [r3, #14]
 8009310:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009312:	8abb      	ldrh	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d139      	bne.n	800938c <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	7b1b      	ldrb	r3, [r3, #12]
 8009322:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7b5b      	ldrb	r3, [r3, #13]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d011      	beq.n	8009354 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d106      	bne.n	800934a <pbuf_free+0xba>
 800933c:	4b18      	ldr	r3, [pc, #96]	; (80093a0 <pbuf_free+0x110>)
 800933e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009342:	491c      	ldr	r1, [pc, #112]	; (80093b4 <pbuf_free+0x124>)
 8009344:	4818      	ldr	r0, [pc, #96]	; (80093a8 <pbuf_free+0x118>)
 8009346:	f00d fe61 	bl	801700c <iprintf>
        pc->custom_free_function(p);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
 8009352:	e015      	b.n	8009380 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8009354:	89fb      	ldrh	r3, [r7, #14]
 8009356:	2b03      	cmp	r3, #3
 8009358:	d104      	bne.n	8009364 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	2008      	movs	r0, #8
 800935e:	f7ff fa65 	bl	800882c <memp_free>
 8009362:	e00d      	b.n	8009380 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8009364:	89fb      	ldrh	r3, [r7, #14]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d002      	beq.n	8009370 <pbuf_free+0xe0>
 800936a:	89fb      	ldrh	r3, [r7, #14]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d104      	bne.n	800937a <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8009370:	6879      	ldr	r1, [r7, #4]
 8009372:	2007      	movs	r0, #7
 8009374:	f7ff fa5a 	bl	800882c <memp_free>
 8009378:	e002      	b.n	8009380 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7fe ff6e 	bl	800825c <mem_free>
        }
      }
      count++;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	3301      	adds	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	607b      	str	r3, [r7, #4]
 800938a:	e001      	b.n	8009390 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800938c:	2300      	movs	r3, #0
 800938e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1a9      	bne.n	80092ea <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	08019218 	.word	0x08019218
 80093a4:	08019450 	.word	0x08019450
 80093a8:	08019264 	.word	0x08019264
 80093ac:	0801948c 	.word	0x0801948c
 80093b0:	080194a4 	.word	0x080194a4
 80093b4:	080194bc 	.word	0x080194bc

080093b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80093c4:	e005      	b.n	80093d2 <pbuf_clen+0x1a>
    ++len;
 80093c6:	89fb      	ldrh	r3, [r7, #14]
 80093c8:	3301      	adds	r3, #1
 80093ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1f6      	bne.n	80093c6 <pbuf_clen+0xe>
  }
  return len;
 80093d8:	89fb      	ldrh	r3, [r7, #14]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
	...

080093e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d010      	beq.n	8009418 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	89db      	ldrh	r3, [r3, #14]
 80093fa:	3301      	adds	r3, #1
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	89db      	ldrh	r3, [r3, #14]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <pbuf_ref+0x30>
 800940a:	4b05      	ldr	r3, [pc, #20]	; (8009420 <pbuf_ref+0x38>)
 800940c:	f240 3239 	movw	r2, #825	; 0x339
 8009410:	4904      	ldr	r1, [pc, #16]	; (8009424 <pbuf_ref+0x3c>)
 8009412:	4805      	ldr	r0, [pc, #20]	; (8009428 <pbuf_ref+0x40>)
 8009414:	f00d fdfa 	bl	801700c <iprintf>
  }
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	08019218 	.word	0x08019218
 8009424:	080194e0 	.word	0x080194e0
 8009428:	08019264 	.word	0x08019264

0800942c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <pbuf_cat+0x16>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d107      	bne.n	8009452 <pbuf_cat+0x26>
 8009442:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <pbuf_cat+0x98>)
 8009444:	f240 324d 	movw	r2, #845	; 0x34d
 8009448:	491f      	ldr	r1, [pc, #124]	; (80094c8 <pbuf_cat+0x9c>)
 800944a:	4820      	ldr	r0, [pc, #128]	; (80094cc <pbuf_cat+0xa0>)
 800944c:	f00d fdde 	bl	801700c <iprintf>
 8009450:	e034      	b.n	80094bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e00a      	b.n	800946e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	891a      	ldrh	r2, [r3, #8]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	891b      	ldrh	r3, [r3, #8]
 8009460:	4413      	add	r3, r2
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1f0      	bne.n	8009458 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	891a      	ldrh	r2, [r3, #8]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	429a      	cmp	r2, r3
 8009480:	d006      	beq.n	8009490 <pbuf_cat+0x64>
 8009482:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <pbuf_cat+0x98>)
 8009484:	f240 3255 	movw	r2, #853	; 0x355
 8009488:	4911      	ldr	r1, [pc, #68]	; (80094d0 <pbuf_cat+0xa4>)
 800948a:	4810      	ldr	r0, [pc, #64]	; (80094cc <pbuf_cat+0xa0>)
 800948c:	f00d fdbe 	bl	801700c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <pbuf_cat+0x7a>
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <pbuf_cat+0x98>)
 800949a:	f240 3256 	movw	r2, #854	; 0x356
 800949e:	490d      	ldr	r1, [pc, #52]	; (80094d4 <pbuf_cat+0xa8>)
 80094a0:	480a      	ldr	r0, [pc, #40]	; (80094cc <pbuf_cat+0xa0>)
 80094a2:	f00d fdb3 	bl	801700c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	891a      	ldrh	r2, [r3, #8]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	891b      	ldrh	r3, [r3, #8]
 80094ae:	4413      	add	r3, r2
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	08019218 	.word	0x08019218
 80094c8:	080194f4 	.word	0x080194f4
 80094cc:	08019264 	.word	0x08019264
 80094d0:	0801952c 	.word	0x0801952c
 80094d4:	0801955c 	.word	0x0801955c

080094d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ffa1 	bl	800942c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80094ea:	6838      	ldr	r0, [r7, #0]
 80094ec:	f7ff ff7c 	bl	80093e8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8009502:	2300      	movs	r3, #0
 8009504:	81fb      	strh	r3, [r7, #14]
 8009506:	2300      	movs	r3, #0
 8009508:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <pbuf_copy+0x2a>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d005      	beq.n	8009522 <pbuf_copy+0x2a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	891a      	ldrh	r2, [r3, #8]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	891b      	ldrh	r3, [r3, #8]
 800951e:	429a      	cmp	r2, r3
 8009520:	d209      	bcs.n	8009536 <pbuf_copy+0x3e>
 8009522:	4b54      	ldr	r3, [pc, #336]	; (8009674 <pbuf_copy+0x17c>)
 8009524:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009528:	4953      	ldr	r1, [pc, #332]	; (8009678 <pbuf_copy+0x180>)
 800952a:	4854      	ldr	r0, [pc, #336]	; (800967c <pbuf_copy+0x184>)
 800952c:	f00d fd6e 	bl	801700c <iprintf>
 8009530:	f06f 030f 	mvn.w	r3, #15
 8009534:	e099      	b.n	800966a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	895b      	ldrh	r3, [r3, #10]
 800953a:	461a      	mov	r2, r3
 800953c:	89fb      	ldrh	r3, [r7, #14]
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	895b      	ldrh	r3, [r3, #10]
 8009544:	4619      	mov	r1, r3
 8009546:	89bb      	ldrh	r3, [r7, #12]
 8009548:	1acb      	subs	r3, r1, r3
 800954a:	429a      	cmp	r2, r3
 800954c:	db05      	blt.n	800955a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	895a      	ldrh	r2, [r3, #10]
 8009552:	89bb      	ldrh	r3, [r7, #12]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	817b      	strh	r3, [r7, #10]
 8009558:	e004      	b.n	8009564 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	895a      	ldrh	r2, [r3, #10]
 800955e:	89fb      	ldrh	r3, [r7, #14]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	89fb      	ldrh	r3, [r7, #14]
 800956a:	18d0      	adds	r0, r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	89bb      	ldrh	r3, [r7, #12]
 8009572:	4413      	add	r3, r2
 8009574:	897a      	ldrh	r2, [r7, #10]
 8009576:	4619      	mov	r1, r3
 8009578:	f00d fc8d 	bl	8016e96 <memcpy>
    offset_to += len;
 800957c:	89fa      	ldrh	r2, [r7, #14]
 800957e:	897b      	ldrh	r3, [r7, #10]
 8009580:	4413      	add	r3, r2
 8009582:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8009584:	89ba      	ldrh	r2, [r7, #12]
 8009586:	897b      	ldrh	r3, [r7, #10]
 8009588:	4413      	add	r3, r2
 800958a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	895b      	ldrh	r3, [r3, #10]
 8009590:	89fa      	ldrh	r2, [r7, #14]
 8009592:	429a      	cmp	r2, r3
 8009594:	d906      	bls.n	80095a4 <pbuf_copy+0xac>
 8009596:	4b37      	ldr	r3, [pc, #220]	; (8009674 <pbuf_copy+0x17c>)
 8009598:	f240 32cd 	movw	r2, #973	; 0x3cd
 800959c:	4938      	ldr	r1, [pc, #224]	; (8009680 <pbuf_copy+0x188>)
 800959e:	4837      	ldr	r0, [pc, #220]	; (800967c <pbuf_copy+0x184>)
 80095a0:	f00d fd34 	bl	801700c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	895b      	ldrh	r3, [r3, #10]
 80095a8:	89ba      	ldrh	r2, [r7, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d906      	bls.n	80095bc <pbuf_copy+0xc4>
 80095ae:	4b31      	ldr	r3, [pc, #196]	; (8009674 <pbuf_copy+0x17c>)
 80095b0:	f240 32ce 	movw	r2, #974	; 0x3ce
 80095b4:	4933      	ldr	r1, [pc, #204]	; (8009684 <pbuf_copy+0x18c>)
 80095b6:	4831      	ldr	r0, [pc, #196]	; (800967c <pbuf_copy+0x184>)
 80095b8:	f00d fd28 	bl	801700c <iprintf>
    if (offset_from >= p_from->len) {
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	895b      	ldrh	r3, [r3, #10]
 80095c0:	89ba      	ldrh	r2, [r7, #12]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d304      	bcc.n	80095d0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	895b      	ldrh	r3, [r3, #10]
 80095d4:	89fa      	ldrh	r2, [r7, #14]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d114      	bne.n	8009604 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10c      	bne.n	8009604 <pbuf_copy+0x10c>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d009      	beq.n	8009604 <pbuf_copy+0x10c>
 80095f0:	4b20      	ldr	r3, [pc, #128]	; (8009674 <pbuf_copy+0x17c>)
 80095f2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80095f6:	4924      	ldr	r1, [pc, #144]	; (8009688 <pbuf_copy+0x190>)
 80095f8:	4820      	ldr	r0, [pc, #128]	; (800967c <pbuf_copy+0x184>)
 80095fa:	f00d fd07 	bl	801700c <iprintf>
 80095fe:	f06f 030f 	mvn.w	r3, #15
 8009602:	e032      	b.n	800966a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d013      	beq.n	8009632 <pbuf_copy+0x13a>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	895a      	ldrh	r2, [r3, #10]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	891b      	ldrh	r3, [r3, #8]
 8009612:	429a      	cmp	r2, r3
 8009614:	d10d      	bne.n	8009632 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d009      	beq.n	8009632 <pbuf_copy+0x13a>
 800961e:	4b15      	ldr	r3, [pc, #84]	; (8009674 <pbuf_copy+0x17c>)
 8009620:	f240 32de 	movw	r2, #990	; 0x3de
 8009624:	4919      	ldr	r1, [pc, #100]	; (800968c <pbuf_copy+0x194>)
 8009626:	4815      	ldr	r0, [pc, #84]	; (800967c <pbuf_copy+0x184>)
 8009628:	f00d fcf0 	bl	801700c <iprintf>
 800962c:	f06f 0305 	mvn.w	r3, #5
 8009630:	e01b      	b.n	800966a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d013      	beq.n	8009660 <pbuf_copy+0x168>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	895a      	ldrh	r2, [r3, #10]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	891b      	ldrh	r3, [r3, #8]
 8009640:	429a      	cmp	r2, r3
 8009642:	d10d      	bne.n	8009660 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d009      	beq.n	8009660 <pbuf_copy+0x168>
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <pbuf_copy+0x17c>)
 800964e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8009652:	490e      	ldr	r1, [pc, #56]	; (800968c <pbuf_copy+0x194>)
 8009654:	4809      	ldr	r0, [pc, #36]	; (800967c <pbuf_copy+0x184>)
 8009656:	f00d fcd9 	bl	801700c <iprintf>
 800965a:	f06f 0305 	mvn.w	r3, #5
 800965e:	e004      	b.n	800966a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f47f af67 	bne.w	8009536 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	08019218 	.word	0x08019218
 8009678:	080195a8 	.word	0x080195a8
 800967c:	08019264 	.word	0x08019264
 8009680:	080195d8 	.word	0x080195d8
 8009684:	080195f0 	.word	0x080195f0
 8009688:	0801960c 	.word	0x0801960c
 800968c:	0801961c 	.word	0x0801961c

08009690 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4611      	mov	r1, r2
 800969c:	461a      	mov	r2, r3
 800969e:	460b      	mov	r3, r1
 80096a0:	80fb      	strh	r3, [r7, #6]
 80096a2:	4613      	mov	r3, r2
 80096a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d108      	bne.n	80096c2 <pbuf_copy_partial+0x32>
 80096b0:	4b30      	ldr	r3, [pc, #192]	; (8009774 <pbuf_copy_partial+0xe4>)
 80096b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80096b6:	4930      	ldr	r1, [pc, #192]	; (8009778 <pbuf_copy_partial+0xe8>)
 80096b8:	4830      	ldr	r0, [pc, #192]	; (800977c <pbuf_copy_partial+0xec>)
 80096ba:	f00d fca7 	bl	801700c <iprintf>
 80096be:	2300      	movs	r3, #0
 80096c0:	e054      	b.n	800976c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d108      	bne.n	80096da <pbuf_copy_partial+0x4a>
 80096c8:	4b2a      	ldr	r3, [pc, #168]	; (8009774 <pbuf_copy_partial+0xe4>)
 80096ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80096ce:	492c      	ldr	r1, [pc, #176]	; (8009780 <pbuf_copy_partial+0xf0>)
 80096d0:	482a      	ldr	r0, [pc, #168]	; (800977c <pbuf_copy_partial+0xec>)
 80096d2:	f00d fc9b 	bl	801700c <iprintf>
 80096d6:	2300      	movs	r3, #0
 80096d8:	e048      	b.n	800976c <pbuf_copy_partial+0xdc>

  left = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <pbuf_copy_partial+0x5a>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <pbuf_copy_partial+0x5e>
    return 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	e03e      	b.n	800976c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	61fb      	str	r3, [r7, #28]
 80096f2:	e034      	b.n	800975e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80096f4:	88bb      	ldrh	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <pbuf_copy_partial+0x80>
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	895b      	ldrh	r3, [r3, #10]
 80096fe:	88ba      	ldrh	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d305      	bcc.n	8009710 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	895b      	ldrh	r3, [r3, #10]
 8009708:	88ba      	ldrh	r2, [r7, #4]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	80bb      	strh	r3, [r7, #4]
 800970e:	e023      	b.n	8009758 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	895a      	ldrh	r2, [r3, #10]
 8009714:	88bb      	ldrh	r3, [r7, #4]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800971a:	8b3a      	ldrh	r2, [r7, #24]
 800971c:	88fb      	ldrh	r3, [r7, #6]
 800971e:	429a      	cmp	r2, r3
 8009720:	d901      	bls.n	8009726 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8009722:	88fb      	ldrh	r3, [r7, #6]
 8009724:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8009726:	8b7b      	ldrh	r3, [r7, #26]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	18d0      	adds	r0, r2, r3
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	88bb      	ldrh	r3, [r7, #4]
 8009732:	4413      	add	r3, r2
 8009734:	8b3a      	ldrh	r2, [r7, #24]
 8009736:	4619      	mov	r1, r3
 8009738:	f00d fbad 	bl	8016e96 <memcpy>
      copied_total += buf_copy_len;
 800973c:	8afa      	ldrh	r2, [r7, #22]
 800973e:	8b3b      	ldrh	r3, [r7, #24]
 8009740:	4413      	add	r3, r2
 8009742:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8009744:	8b7a      	ldrh	r2, [r7, #26]
 8009746:	8b3b      	ldrh	r3, [r7, #24]
 8009748:	4413      	add	r3, r2
 800974a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	8b3b      	ldrh	r3, [r7, #24]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	88fb      	ldrh	r3, [r7, #6]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <pbuf_copy_partial+0xda>
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1c4      	bne.n	80096f4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800976a:	8afb      	ldrh	r3, [r7, #22]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3720      	adds	r7, #32
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	08019218 	.word	0x08019218
 8009778:	08019648 	.word	0x08019648
 800977c:	08019264 	.word	0x08019264
 8009780:	08019668 	.word	0x08019668

08009784 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009784:	b480      	push	{r7}
 8009786:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009788:	bf00      	nop
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
	...

08009794 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009798:	f000 ff80 	bl	800a69c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800979c:	4b07      	ldr	r3, [pc, #28]	; (80097bc <tcp_tmr+0x28>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <tcp_tmr+0x28>)
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	4b04      	ldr	r3, [pc, #16]	; (80097bc <tcp_tmr+0x28>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80097b4:	f000 fcb2 	bl	800a11c <tcp_slowtmr>
  }
}
 80097b8:	bf00      	nop
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20000245 	.word	0x20000245

080097c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]
 80097ce:	e00a      	b.n	80097e6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d102      	bne.n	80097e0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f1      	bne.n	80097d0 <tcp_remove_listener+0x10>
      }
   }
}
 80097ec:	bf00      	nop
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d105      	bne.n	8009812 <tcp_listen_closed+0x1a>
 8009806:	4b13      	ldr	r3, [pc, #76]	; (8009854 <tcp_listen_closed+0x5c>)
 8009808:	22c0      	movs	r2, #192	; 0xc0
 800980a:	4913      	ldr	r1, [pc, #76]	; (8009858 <tcp_listen_closed+0x60>)
 800980c:	4813      	ldr	r0, [pc, #76]	; (800985c <tcp_listen_closed+0x64>)
 800980e:	f00d fbfd 	bl	801700c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	7d1b      	ldrb	r3, [r3, #20]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d005      	beq.n	8009826 <tcp_listen_closed+0x2e>
 800981a:	4b0e      	ldr	r3, [pc, #56]	; (8009854 <tcp_listen_closed+0x5c>)
 800981c:	22c1      	movs	r2, #193	; 0xc1
 800981e:	4910      	ldr	r1, [pc, #64]	; (8009860 <tcp_listen_closed+0x68>)
 8009820:	480e      	ldr	r0, [pc, #56]	; (800985c <tcp_listen_closed+0x64>)
 8009822:	f00d fbf3 	bl	801700c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009826:	2301      	movs	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	e00b      	b.n	8009844 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800982c:	4a0d      	ldr	r2, [pc, #52]	; (8009864 <tcp_listen_closed+0x6c>)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff ffc1 	bl	80097c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b03      	cmp	r3, #3
 8009848:	d9f0      	bls.n	800982c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	0801979c 	.word	0x0801979c
 8009858:	080197cc 	.word	0x080197cc
 800985c:	080197d8 	.word	0x080197d8
 8009860:	08019800 	.word	0x08019800
 8009864:	0801b308 	.word	0x0801b308

08009868 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009868:	b5b0      	push	{r4, r5, r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d075      	beq.n	8009966 <tcp_close_shutdown+0xfe>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7d1b      	ldrb	r3, [r3, #20]
 800987e:	2b04      	cmp	r3, #4
 8009880:	d003      	beq.n	800988a <tcp_close_shutdown+0x22>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7d1b      	ldrb	r3, [r3, #20]
 8009886:	2b07      	cmp	r3, #7
 8009888:	d16d      	bne.n	8009966 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <tcp_close_shutdown+0x34>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009896:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800989a:	d064      	beq.n	8009966 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	7e9b      	ldrb	r3, [r3, #26]
 80098a0:	f003 0310 	and.w	r3, r3, #16
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <tcp_close_shutdown+0x4e>
 80098a8:	4b59      	ldr	r3, [pc, #356]	; (8009a10 <tcp_close_shutdown+0x1a8>)
 80098aa:	f240 120f 	movw	r2, #271	; 0x10f
 80098ae:	4959      	ldr	r1, [pc, #356]	; (8009a14 <tcp_close_shutdown+0x1ac>)
 80098b0:	4859      	ldr	r0, [pc, #356]	; (8009a18 <tcp_close_shutdown+0x1b0>)
 80098b2:	f00d fbab 	bl	801700c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098be:	687c      	ldr	r4, [r7, #4]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	1d1d      	adds	r5, r3, #4
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	8adb      	ldrh	r3, [r3, #22]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	8b12      	ldrh	r2, [r2, #24]
 80098cc:	9201      	str	r2, [sp, #4]
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462b      	mov	r3, r5
 80098d2:	4622      	mov	r2, r4
 80098d4:	f004 feec 	bl	800e6b0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 fa1d 	bl	800ad18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80098de:	4b4f      	ldr	r3, [pc, #316]	; (8009a1c <tcp_close_shutdown+0x1b4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d105      	bne.n	80098f4 <tcp_close_shutdown+0x8c>
 80098e8:	4b4c      	ldr	r3, [pc, #304]	; (8009a1c <tcp_close_shutdown+0x1b4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	4a4b      	ldr	r2, [pc, #300]	; (8009a1c <tcp_close_shutdown+0x1b4>)
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	e013      	b.n	800991c <tcp_close_shutdown+0xb4>
 80098f4:	4b49      	ldr	r3, [pc, #292]	; (8009a1c <tcp_close_shutdown+0x1b4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e00c      	b.n	8009916 <tcp_close_shutdown+0xae>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	429a      	cmp	r2, r3
 8009904:	d104      	bne.n	8009910 <tcp_close_shutdown+0xa8>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	60da      	str	r2, [r3, #12]
 800990e:	e005      	b.n	800991c <tcp_close_shutdown+0xb4>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1ef      	bne.n	80098fc <tcp_close_shutdown+0x94>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	60da      	str	r2, [r3, #12]
 8009922:	4b3f      	ldr	r3, [pc, #252]	; (8009a20 <tcp_close_shutdown+0x1b8>)
 8009924:	2201      	movs	r2, #1
 8009926:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	7d1b      	ldrb	r3, [r3, #20]
 800992c:	2b04      	cmp	r3, #4
 800992e:	d10c      	bne.n	800994a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	220a      	movs	r2, #10
 8009934:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009936:	4b3b      	ldr	r3, [pc, #236]	; (8009a24 <tcp_close_shutdown+0x1bc>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60da      	str	r2, [r3, #12]
 800993e:	4a39      	ldr	r2, [pc, #228]	; (8009a24 <tcp_close_shutdown+0x1bc>)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	f005 f904 	bl	800eb50 <tcp_timer_needed>
 8009948:	e00b      	b.n	8009962 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800994a:	4b37      	ldr	r3, [pc, #220]	; (8009a28 <tcp_close_shutdown+0x1c0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d102      	bne.n	800995a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8009954:	f003 fd44 	bl	800d3e0 <tcp_trigger_input_pcb_close>
 8009958:	e003      	b.n	8009962 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	2001      	movs	r0, #1
 800995e:	f7fe ff65 	bl	800882c <memp_free>
        }
      }
      return ERR_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	e050      	b.n	8009a08 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7d1b      	ldrb	r3, [r3, #20]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d02e      	beq.n	80099cc <tcp_close_shutdown+0x164>
 800996e:	2b02      	cmp	r3, #2
 8009970:	d038      	beq.n	80099e4 <tcp_close_shutdown+0x17c>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d142      	bne.n	80099fc <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	8adb      	ldrh	r3, [r3, #22]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d021      	beq.n	80099c2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800997e:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <tcp_close_shutdown+0x1c4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	429a      	cmp	r2, r3
 8009986:	d105      	bne.n	8009994 <tcp_close_shutdown+0x12c>
 8009988:	4b28      	ldr	r3, [pc, #160]	; (8009a2c <tcp_close_shutdown+0x1c4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	4a27      	ldr	r2, [pc, #156]	; (8009a2c <tcp_close_shutdown+0x1c4>)
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	e013      	b.n	80099bc <tcp_close_shutdown+0x154>
 8009994:	4b25      	ldr	r3, [pc, #148]	; (8009a2c <tcp_close_shutdown+0x1c4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	60bb      	str	r3, [r7, #8]
 800999a:	e00c      	b.n	80099b6 <tcp_close_shutdown+0x14e>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d104      	bne.n	80099b0 <tcp_close_shutdown+0x148>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68da      	ldr	r2, [r3, #12]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	60da      	str	r2, [r3, #12]
 80099ae:	e005      	b.n	80099bc <tcp_close_shutdown+0x154>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	60bb      	str	r3, [r7, #8]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1ef      	bne.n	800999c <tcp_close_shutdown+0x134>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	2001      	movs	r0, #1
 80099c6:	f7fe ff31 	bl	800882c <memp_free>
    break;
 80099ca:	e01c      	b.n	8009a06 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff ff13 	bl	80097f8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4816      	ldr	r0, [pc, #88]	; (8009a30 <tcp_close_shutdown+0x1c8>)
 80099d6:	f001 f9e1 	bl	800ad9c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	2002      	movs	r0, #2
 80099de:	f7fe ff25 	bl	800882c <memp_free>
    break;
 80099e2:	e010      	b.n	8009a06 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80099e4:	6879      	ldr	r1, [r7, #4]
 80099e6:	480d      	ldr	r0, [pc, #52]	; (8009a1c <tcp_close_shutdown+0x1b4>)
 80099e8:	f001 f9d8 	bl	800ad9c <tcp_pcb_remove>
 80099ec:	4b0c      	ldr	r3, [pc, #48]	; (8009a20 <tcp_close_shutdown+0x1b8>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	2001      	movs	r0, #1
 80099f6:	f7fe ff19 	bl	800882c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80099fa:	e004      	b.n	8009a06 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f819 	bl	8009a34 <tcp_close_shutdown_fin>
 8009a02:	4603      	mov	r3, r0
 8009a04:	e000      	b.n	8009a08 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8009a10:	0801979c 	.word	0x0801979c
 8009a14:	08019818 	.word	0x08019818
 8009a18:	080197d8 	.word	0x080197d8
 8009a1c:	2000394c 	.word	0x2000394c
 8009a20:	20003948 	.word	0x20003948
 8009a24:	2000395c 	.word	0x2000395c
 8009a28:	20003960 	.word	0x20003960
 8009a2c:	20003958 	.word	0x20003958
 8009a30:	20003954 	.word	0x20003954

08009a34 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d106      	bne.n	8009a50 <tcp_close_shutdown_fin+0x1c>
 8009a42:	4b2c      	ldr	r3, [pc, #176]	; (8009af4 <tcp_close_shutdown_fin+0xc0>)
 8009a44:	f240 124d 	movw	r2, #333	; 0x14d
 8009a48:	492b      	ldr	r1, [pc, #172]	; (8009af8 <tcp_close_shutdown_fin+0xc4>)
 8009a4a:	482c      	ldr	r0, [pc, #176]	; (8009afc <tcp_close_shutdown_fin+0xc8>)
 8009a4c:	f00d fade 	bl	801700c <iprintf>

  switch (pcb->state) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	7d1b      	ldrb	r3, [r3, #20]
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d010      	beq.n	8009a7a <tcp_close_shutdown_fin+0x46>
 8009a58:	2b07      	cmp	r3, #7
 8009a5a:	d01b      	beq.n	8009a94 <tcp_close_shutdown_fin+0x60>
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d126      	bne.n	8009aae <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f003 fd49 	bl	800d4f8 <tcp_send_fin>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d11f      	bne.n	8009ab2 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2205      	movs	r2, #5
 8009a76:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009a78:	e01b      	b.n	8009ab2 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f003 fd3c 	bl	800d4f8 <tcp_send_fin>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d114      	bne.n	8009ab6 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2205      	movs	r2, #5
 8009a90:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009a92:	e010      	b.n	8009ab6 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f003 fd2f 	bl	800d4f8 <tcp_send_fin>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2209      	movs	r2, #9
 8009aaa:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009aac:	e005      	b.n	8009aba <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e01c      	b.n	8009aec <tcp_close_shutdown_fin+0xb8>
    break;
 8009ab2:	bf00      	nop
 8009ab4:	e002      	b.n	8009abc <tcp_close_shutdown_fin+0x88>
    break;
 8009ab6:	bf00      	nop
 8009ab8:	e000      	b.n	8009abc <tcp_close_shutdown_fin+0x88>
    break;
 8009aba:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f004 fb69 	bl	800e19c <tcp_output>
 8009aca:	e00d      	b.n	8009ae8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ad4:	d108      	bne.n	8009ae8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7e9b      	ldrb	r3, [r3, #26]
 8009ada:	f043 0308 	orr.w	r3, r3, #8
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e001      	b.n	8009aec <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	0801979c 	.word	0x0801979c
 8009af8:	080197cc 	.word	0x080197cc
 8009afc:	080197d8 	.word	0x080197d8

08009b00 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	7d1b      	ldrb	r3, [r3, #20]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d006      	beq.n	8009b1e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7e9b      	ldrb	r3, [r3, #26]
 8009b14:	f043 0310 	orr.w	r3, r3, #16
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009b1e:	2101      	movs	r1, #1
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff fea1 	bl	8009868 <tcp_close_shutdown>
 8009b26:	4603      	mov	r3, r0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08c      	sub	sp, #48	; 0x30
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	7d1b      	ldrb	r3, [r3, #20]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d106      	bne.n	8009b50 <tcp_abandon+0x20>
 8009b42:	4b4d      	ldr	r3, [pc, #308]	; (8009c78 <tcp_abandon+0x148>)
 8009b44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009b48:	494c      	ldr	r1, [pc, #304]	; (8009c7c <tcp_abandon+0x14c>)
 8009b4a:	484d      	ldr	r0, [pc, #308]	; (8009c80 <tcp_abandon+0x150>)
 8009b4c:	f00d fa5e 	bl	801700c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	7d1b      	ldrb	r3, [r3, #20]
 8009b54:	2b0a      	cmp	r3, #10
 8009b56:	d108      	bne.n	8009b6a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	484a      	ldr	r0, [pc, #296]	; (8009c84 <tcp_abandon+0x154>)
 8009b5c:	f001 f91e 	bl	800ad9c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	2001      	movs	r0, #1
 8009b64:	f7fe fe62 	bl	800882c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8009b68:	e081      	b.n	8009c6e <tcp_abandon+0x13e>
    int send_rst = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b76:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b84:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	7d1b      	ldrb	r3, [r3, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d126      	bne.n	8009be2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	8adb      	ldrh	r3, [r3, #22]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d02e      	beq.n	8009bfa <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b9c:	4b3a      	ldr	r3, [pc, #232]	; (8009c88 <tcp_abandon+0x158>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d105      	bne.n	8009bb2 <tcp_abandon+0x82>
 8009ba6:	4b38      	ldr	r3, [pc, #224]	; (8009c88 <tcp_abandon+0x158>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	4a36      	ldr	r2, [pc, #216]	; (8009c88 <tcp_abandon+0x158>)
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	e013      	b.n	8009bda <tcp_abandon+0xaa>
 8009bb2:	4b35      	ldr	r3, [pc, #212]	; (8009c88 <tcp_abandon+0x158>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	e00c      	b.n	8009bd4 <tcp_abandon+0xa4>
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d104      	bne.n	8009bce <tcp_abandon+0x9e>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	60da      	str	r2, [r3, #12]
 8009bcc:	e005      	b.n	8009bda <tcp_abandon+0xaa>
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1ef      	bne.n	8009bba <tcp_abandon+0x8a>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	60da      	str	r2, [r3, #12]
 8009be0:	e00b      	b.n	8009bfa <tcp_abandon+0xca>
      send_rst = reset;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	8adb      	ldrh	r3, [r3, #22]
 8009bea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	4827      	ldr	r0, [pc, #156]	; (8009c8c <tcp_abandon+0x15c>)
 8009bf0:	f001 f8d4 	bl	800ad9c <tcp_pcb_remove>
 8009bf4:	4b26      	ldr	r3, [pc, #152]	; (8009c90 <tcp_abandon+0x160>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d004      	beq.n	8009c0c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fe15 	bl	800a836 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 fe0c 	bl	800a836 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fe03 	bl	800a836 <tcp_segs_free>
    if (send_rst) {
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00c      	beq.n	8009c50 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	1d19      	adds	r1, r3, #4
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	8b1b      	ldrh	r3, [r3, #24]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	460b      	mov	r3, r1
 8009c48:	6979      	ldr	r1, [r7, #20]
 8009c4a:	69b8      	ldr	r0, [r7, #24]
 8009c4c:	f004 fd30 	bl	800e6b0 <tcp_rst>
    last_state = pcb->state;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7d1b      	ldrb	r3, [r3, #20]
 8009c54:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f7fe fde7 	bl	800882c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <tcp_abandon+0x13e>
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f06f 010c 	mvn.w	r1, #12
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	4798      	blx	r3
}
 8009c6e:	bf00      	nop
 8009c70:	3728      	adds	r7, #40	; 0x28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	0801979c 	.word	0x0801979c
 8009c7c:	08019834 	.word	0x08019834
 8009c80:	080197d8 	.word	0x080197d8
 8009c84:	2000395c 	.word	0x2000395c
 8009c88:	20003958 	.word	0x20003958
 8009c8c:	2000394c 	.word	0x2000394c
 8009c90:	20003948 	.word	0x20003948

08009c94 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff ff46 	bl	8009b30 <tcp_abandon>
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009cba:	2304      	movs	r3, #4
 8009cbc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009cc4:	4b3c      	ldr	r3, [pc, #240]	; (8009db8 <tcp_bind+0x10c>)
 8009cc6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <tcp_bind+0x28>
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d102      	bne.n	8009cda <tcp_bind+0x2e>
    return ERR_VAL;
 8009cd4:	f06f 0305 	mvn.w	r3, #5
 8009cd8:	e06a      	b.n	8009db0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	7d1b      	ldrb	r3, [r3, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d009      	beq.n	8009cf6 <tcp_bind+0x4a>
 8009ce2:	4b36      	ldr	r3, [pc, #216]	; (8009dbc <tcp_bind+0x110>)
 8009ce4:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009ce8:	4935      	ldr	r1, [pc, #212]	; (8009dc0 <tcp_bind+0x114>)
 8009cea:	4836      	ldr	r0, [pc, #216]	; (8009dc4 <tcp_bind+0x118>)
 8009cec:	f00d f98e 	bl	801700c <iprintf>
 8009cf0:	f06f 0305 	mvn.w	r3, #5
 8009cf4:	e05c      	b.n	8009db0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d109      	bne.n	8009d10 <tcp_bind+0x64>
    port = tcp_new_port();
 8009cfc:	f000 f9ca 	bl	800a094 <tcp_new_port>
 8009d00:	4603      	mov	r3, r0
 8009d02:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009d04:	88fb      	ldrh	r3, [r7, #6]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d135      	bne.n	8009d76 <tcp_bind+0xca>
      return ERR_BUF;
 8009d0a:	f06f 0301 	mvn.w	r3, #1
 8009d0e:	e04f      	b.n	8009db0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009d10:	2300      	movs	r3, #0
 8009d12:	61fb      	str	r3, [r7, #28]
 8009d14:	e02b      	b.n	8009d6e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009d16:	4a2c      	ldr	r2, [pc, #176]	; (8009dc8 <tcp_bind+0x11c>)
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	61bb      	str	r3, [r7, #24]
 8009d22:	e01e      	b.n	8009d62 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	8adb      	ldrh	r3, [r3, #22]
 8009d28:	88fa      	ldrh	r2, [r7, #6]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d116      	bne.n	8009d5c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009d2e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d010      	beq.n	8009d56 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00c      	beq.n	8009d56 <tcp_bind+0xaa>
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d009      	beq.n	8009d56 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d005      	beq.n	8009d56 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d102      	bne.n	8009d5c <tcp_bind+0xb0>
              return ERR_USE;
 8009d56:	f06f 0307 	mvn.w	r3, #7
 8009d5a:	e029      	b.n	8009db0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1dd      	bne.n	8009d24 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	61fb      	str	r3, [r7, #28]
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	dbcf      	blt.n	8009d16 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00c      	beq.n	8009d96 <tcp_bind+0xea>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d008      	beq.n	8009d96 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <tcp_bind+0xe4>
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	e000      	b.n	8009d92 <tcp_bind+0xe6>
 8009d90:	2300      	movs	r3, #0
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	88fa      	ldrh	r2, [r7, #6]
 8009d9a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <tcp_bind+0x120>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	60da      	str	r2, [r3, #12]
 8009da4:	4a09      	ldr	r2, [pc, #36]	; (8009dcc <tcp_bind+0x120>)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	f004 fed1 	bl	800eb50 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	0801b340 	.word	0x0801b340
 8009dbc:	0801979c 	.word	0x0801979c
 8009dc0:	08019868 	.word	0x08019868
 8009dc4:	080197d8 	.word	0x080197d8
 8009dc8:	0801b308 	.word	0x0801b308
 8009dcc:	20003958 	.word	0x20003958

08009dd0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8009dde:	68b8      	ldr	r0, [r7, #8]
 8009de0:	f7ff ff58 	bl	8009c94 <tcp_abort>

  return ERR_ABRT;
 8009de4:	f06f 030c 	mvn.w	r3, #12
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f806 	bl	8009e14 <tcp_listen_with_backlog_and_err>
 8009e08:	4603      	mov	r3, r0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	7d1b      	ldrb	r3, [r3, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d009      	beq.n	8009e42 <tcp_listen_with_backlog_and_err+0x2e>
 8009e2e:	4b3f      	ldr	r3, [pc, #252]	; (8009f2c <tcp_listen_with_backlog_and_err+0x118>)
 8009e30:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8009e34:	493e      	ldr	r1, [pc, #248]	; (8009f30 <tcp_listen_with_backlog_and_err+0x11c>)
 8009e36:	483f      	ldr	r0, [pc, #252]	; (8009f34 <tcp_listen_with_backlog_and_err+0x120>)
 8009e38:	f00d f8e8 	bl	801700c <iprintf>
 8009e3c:	23f1      	movs	r3, #241	; 0xf1
 8009e3e:	76fb      	strb	r3, [r7, #27]
 8009e40:	e069      	b.n	8009f16 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	7d1b      	ldrb	r3, [r3, #20]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d104      	bne.n	8009e54 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009e4e:	23f7      	movs	r3, #247	; 0xf7
 8009e50:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009e52:	e060      	b.n	8009f16 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009e54:	2002      	movs	r0, #2
 8009e56:	f7fe fc9d 	bl	8008794 <memp_malloc>
 8009e5a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8009e62:	23ff      	movs	r3, #255	; 0xff
 8009e64:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009e66:	e056      	b.n	8009f16 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8ada      	ldrh	r2, [r3, #22]
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	7d5a      	ldrb	r2, [r3, #21]
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7a1a      	ldrb	r2, [r3, #8]
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	7a9a      	ldrb	r2, [r3, #10]
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	7a5a      	ldrb	r2, [r3, #9]
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	8adb      	ldrh	r3, [r3, #22]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d021      	beq.n	8009ef2 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009eae:	4b22      	ldr	r3, [pc, #136]	; (8009f38 <tcp_listen_with_backlog_and_err+0x124>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d105      	bne.n	8009ec4 <tcp_listen_with_backlog_and_err+0xb0>
 8009eb8:	4b1f      	ldr	r3, [pc, #124]	; (8009f38 <tcp_listen_with_backlog_and_err+0x124>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	4a1e      	ldr	r2, [pc, #120]	; (8009f38 <tcp_listen_with_backlog_and_err+0x124>)
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	e013      	b.n	8009eec <tcp_listen_with_backlog_and_err+0xd8>
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <tcp_listen_with_backlog_and_err+0x124>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	617b      	str	r3, [r7, #20]
 8009eca:	e00c      	b.n	8009ee6 <tcp_listen_with_backlog_and_err+0xd2>
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d104      	bne.n	8009ee0 <tcp_listen_with_backlog_and_err+0xcc>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	e005      	b.n	8009eec <tcp_listen_with_backlog_and_err+0xd8>
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1ef      	bne.n	8009ecc <tcp_listen_with_backlog_and_err+0xb8>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	f7fe fc99 	bl	800882c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4a0f      	ldr	r2, [pc, #60]	; (8009f3c <tcp_listen_with_backlog_and_err+0x128>)
 8009efe:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <tcp_listen_with_backlog_and_err+0x12c>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	60da      	str	r2, [r3, #12]
 8009f08:	4a0d      	ldr	r2, [pc, #52]	; (8009f40 <tcp_listen_with_backlog_and_err+0x12c>)
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	f004 fe1f 	bl	800eb50 <tcp_timer_needed>
  res = ERR_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7efa      	ldrb	r2, [r7, #27]
 8009f20:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009f22:	69fb      	ldr	r3, [r7, #28]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3720      	adds	r7, #32
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	0801979c 	.word	0x0801979c
 8009f30:	08019890 	.word	0x08019890
 8009f34:	080197d8 	.word	0x080197d8
 8009f38:	20003958 	.word	0x20003958
 8009f3c:	08009dd1 	.word	0x08009dd1
 8009f40:	20003954 	.word	0x20003954

08009f44 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009f54:	4413      	add	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009f60:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009f64:	bf28      	it	cs
 8009f66:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009f6a:	b292      	uxth	r2, r2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	db08      	blt.n	8009f88 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	e020      	b.n	8009fca <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dd03      	ble.n	8009f9e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f9c:	e014      	b.n	8009fc8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fb0:	d306      	bcc.n	8009fc0 <tcp_update_rcv_ann_wnd+0x7c>
 8009fb2:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <tcp_update_rcv_ann_wnd+0x90>)
 8009fb4:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009fb8:	4907      	ldr	r1, [pc, #28]	; (8009fd8 <tcp_update_rcv_ann_wnd+0x94>)
 8009fba:	4808      	ldr	r0, [pc, #32]	; (8009fdc <tcp_update_rcv_ann_wnd+0x98>)
 8009fbc:	f00d f826 	bl	801700c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009fc8:	2300      	movs	r3, #0
  }
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	0801979c 	.word	0x0801979c
 8009fd8:	080198b4 	.word	0x080198b4
 8009fdc:	080197d8 	.word	0x080197d8

08009fe0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	7d1b      	ldrb	r3, [r3, #20]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d106      	bne.n	800a002 <tcp_recved+0x22>
 8009ff4:	4b23      	ldr	r3, [pc, #140]	; (800a084 <tcp_recved+0xa4>)
 8009ff6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009ffa:	4923      	ldr	r1, [pc, #140]	; (800a088 <tcp_recved+0xa8>)
 8009ffc:	4823      	ldr	r0, [pc, #140]	; (800a08c <tcp_recved+0xac>)
 8009ffe:	f00d f805 	bl	801700c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a006:	887b      	ldrh	r3, [r7, #2]
 800a008:	4413      	add	r3, r2
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a014:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a018:	d904      	bls.n	800a024 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a020:	851a      	strh	r2, [r3, #40]	; 0x28
 800a022:	e017      	b.n	800a054 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d113      	bne.n	800a054 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	7d1b      	ldrb	r3, [r3, #20]
 800a030:	2b07      	cmp	r3, #7
 800a032:	d003      	beq.n	800a03c <tcp_recved+0x5c>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7d1b      	ldrb	r3, [r3, #20]
 800a038:	2b09      	cmp	r3, #9
 800a03a:	d104      	bne.n	800a046 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a042:	851a      	strh	r2, [r3, #40]	; 0x28
 800a044:	e006      	b.n	800a054 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800a046:	4b0f      	ldr	r3, [pc, #60]	; (800a084 <tcp_recved+0xa4>)
 800a048:	f240 322d 	movw	r2, #813	; 0x32d
 800a04c:	4910      	ldr	r1, [pc, #64]	; (800a090 <tcp_recved+0xb0>)
 800a04e:	480f      	ldr	r0, [pc, #60]	; (800a08c <tcp_recved+0xac>)
 800a050:	f00c ffdc 	bl	801700c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff ff75 	bl	8009f44 <tcp_update_rcv_ann_wnd>
 800a05a:	4603      	mov	r3, r0
 800a05c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a064:	db09      	blt.n	800a07a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7e9b      	ldrb	r3, [r3, #26]
 800a06a:	f043 0302 	orr.w	r3, r3, #2
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f004 f891 	bl	800e19c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a07a:	bf00      	nop
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	0801979c 	.word	0x0801979c
 800a088:	080198d0 	.word	0x080198d0
 800a08c:	080197d8 	.word	0x080197d8
 800a090:	080198f8 	.word	0x080198f8

0800a094 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800a09e:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <tcp_new_port+0x80>)
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	b291      	uxth	r1, r2
 800a0a6:	4a1b      	ldr	r2, [pc, #108]	; (800a114 <tcp_new_port+0x80>)
 800a0a8:	8011      	strh	r1, [r2, #0]
 800a0aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d103      	bne.n	800a0ba <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a0b2:	4b18      	ldr	r3, [pc, #96]	; (800a114 <tcp_new_port+0x80>)
 800a0b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a0b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	71fb      	strb	r3, [r7, #7]
 800a0be:	e01e      	b.n	800a0fe <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	4a15      	ldr	r2, [pc, #84]	; (800a118 <tcp_new_port+0x84>)
 800a0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	e011      	b.n	800a0f2 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	8ada      	ldrh	r2, [r3, #22]
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <tcp_new_port+0x80>)
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d108      	bne.n	800a0ec <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a0da:	88bb      	ldrh	r3, [r7, #4]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	80bb      	strh	r3, [r7, #4]
 800a0e0:	88bb      	ldrh	r3, [r7, #4]
 800a0e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e6:	d3da      	bcc.n	800a09e <tcp_new_port+0xa>
          return 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e00d      	b.n	800a108 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	603b      	str	r3, [r7, #0]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1ea      	bne.n	800a0ce <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	71fb      	strb	r3, [r7, #7]
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d9dd      	bls.n	800a0c0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a104:	4b03      	ldr	r3, [pc, #12]	; (800a114 <tcp_new_port+0x80>)
 800a106:	881b      	ldrh	r3, [r3, #0]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	20000118 	.word	0x20000118
 800a118:	0801b308 	.word	0x0801b308

0800a11c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a11c:	b5b0      	push	{r4, r5, r7, lr}
 800a11e:	b08c      	sub	sp, #48	; 0x30
 800a120:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800a126:	4b97      	ldr	r3, [pc, #604]	; (800a384 <tcp_slowtmr+0x268>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3301      	adds	r3, #1
 800a12c:	4a95      	ldr	r2, [pc, #596]	; (800a384 <tcp_slowtmr+0x268>)
 800a12e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a130:	4b95      	ldr	r3, [pc, #596]	; (800a388 <tcp_slowtmr+0x26c>)
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	b2da      	uxtb	r2, r3
 800a138:	4b93      	ldr	r3, [pc, #588]	; (800a388 <tcp_slowtmr+0x26c>)
 800a13a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800a140:	4b92      	ldr	r3, [pc, #584]	; (800a38c <tcp_slowtmr+0x270>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a146:	e227      	b.n	800a598 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	7d1b      	ldrb	r3, [r3, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d106      	bne.n	800a15e <tcp_slowtmr+0x42>
 800a150:	4b8f      	ldr	r3, [pc, #572]	; (800a390 <tcp_slowtmr+0x274>)
 800a152:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800a156:	498f      	ldr	r1, [pc, #572]	; (800a394 <tcp_slowtmr+0x278>)
 800a158:	488f      	ldr	r0, [pc, #572]	; (800a398 <tcp_slowtmr+0x27c>)
 800a15a:	f00c ff57 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	7d1b      	ldrb	r3, [r3, #20]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d106      	bne.n	800a174 <tcp_slowtmr+0x58>
 800a166:	4b8a      	ldr	r3, [pc, #552]	; (800a390 <tcp_slowtmr+0x274>)
 800a168:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a16c:	498b      	ldr	r1, [pc, #556]	; (800a39c <tcp_slowtmr+0x280>)
 800a16e:	488a      	ldr	r0, [pc, #552]	; (800a398 <tcp_slowtmr+0x27c>)
 800a170:	f00c ff4c 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	7d1b      	ldrb	r3, [r3, #20]
 800a178:	2b0a      	cmp	r3, #10
 800a17a:	d106      	bne.n	800a18a <tcp_slowtmr+0x6e>
 800a17c:	4b84      	ldr	r3, [pc, #528]	; (800a390 <tcp_slowtmr+0x274>)
 800a17e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800a182:	4987      	ldr	r1, [pc, #540]	; (800a3a0 <tcp_slowtmr+0x284>)
 800a184:	4884      	ldr	r0, [pc, #528]	; (800a398 <tcp_slowtmr+0x27c>)
 800a186:	f00c ff41 	bl	801700c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	7f5a      	ldrb	r2, [r3, #29]
 800a18e:	4b7e      	ldr	r3, [pc, #504]	; (800a388 <tcp_slowtmr+0x26c>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d103      	bne.n	800a19e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800a19c:	e1fc      	b.n	800a598 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a19e:	4b7a      	ldr	r3, [pc, #488]	; (800a388 <tcp_slowtmr+0x26c>)
 800a1a0:	781a      	ldrb	r2, [r3, #0]
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	7d1b      	ldrb	r3, [r3, #20]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d108      	bne.n	800a1c8 <tcp_slowtmr+0xac>
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1bc:	2b05      	cmp	r3, #5
 800a1be:	d903      	bls.n	800a1c8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800a1c0:	7ffb      	ldrb	r3, [r7, #31]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	77fb      	strb	r3, [r7, #31]
 800a1c6:	e0a2      	b.n	800a30e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1ce:	2b0b      	cmp	r3, #11
 800a1d0:	d903      	bls.n	800a1da <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a1d2:	7ffb      	ldrb	r3, [r7, #31]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	77fb      	strb	r3, [r7, #31]
 800a1d8:	e099      	b.n	800a30e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d032      	beq.n	800a24a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	4a6d      	ldr	r2, [pc, #436]	; (800a3a4 <tcp_slowtmr+0x288>)
 800a1ee:	5cd3      	ldrb	r3, [r2, r3]
 800a1f0:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a1f8:	7cfa      	ldrb	r2, [r7, #19]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d907      	bls.n	800a20e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a204:	3301      	adds	r3, #1
 800a206:	b2da      	uxtb	r2, r3
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a214:	7cfa      	ldrb	r2, [r7, #19]
 800a216:	429a      	cmp	r2, r3
 800a218:	d879      	bhi.n	800a30e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800a21a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a21c:	f004 fbd8 	bl	800e9d0 <tcp_zero_window_probe>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d173      	bne.n	800a30e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a234:	2b06      	cmp	r3, #6
 800a236:	d86a      	bhi.n	800a30e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a23e:	3301      	adds	r3, #1
 800a240:	b2da      	uxtb	r2, r3
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a248:	e061      	b.n	800a30e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a250:	2b00      	cmp	r3, #0
 800a252:	db08      	blt.n	800a266 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	3301      	adds	r3, #1
 800a25e:	b29b      	uxth	r3, r3
 800a260:	b21a      	sxth	r2, r3
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d04f      	beq.n	800a30e <tcp_slowtmr+0x1f2>
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a27a:	429a      	cmp	r2, r3
 800a27c:	db47      	blt.n	800a30e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	7d1b      	ldrb	r3, [r3, #20]
 800a282:	2b02      	cmp	r3, #2
 800a284:	d018      	beq.n	800a2b8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a28c:	2b0c      	cmp	r3, #12
 800a28e:	bf28      	it	cs
 800a290:	230c      	movcs	r3, #12
 800a292:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a29a:	10db      	asrs	r3, r3, #3
 800a29c:	b21b      	sxth	r3, r3
 800a29e:	461a      	mov	r2, r3
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2a6:	4413      	add	r3, r2
 800a2a8:	7dfa      	ldrb	r2, [r7, #23]
 800a2aa:	493f      	ldr	r1, [pc, #252]	; (800a3a8 <tcp_slowtmr+0x28c>)
 800a2ac:	5c8a      	ldrb	r2, [r1, r2]
 800a2ae:	4093      	lsls	r3, r2
 800a2b0:	b21a      	sxth	r2, r3
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	bf28      	it	cs
 800a2ce:	4613      	movcs	r3, r2
 800a2d0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800a2d2:	8abb      	ldrh	r3, [r7, #20]
 800a2d4:	085b      	lsrs	r3, r3, #1
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d206      	bcs.n	800a2fe <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800a308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a30a:	f004 fa47 	bl	800e79c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	7d1b      	ldrb	r3, [r3, #20]
 800a312:	2b06      	cmp	r3, #6
 800a314:	d10f      	bne.n	800a336 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	7e9b      	ldrb	r3, [r3, #26]
 800a31a:	f003 0310 	and.w	r3, r3, #16
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a322:	4b18      	ldr	r3, [pc, #96]	; (800a384 <tcp_slowtmr+0x268>)
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b28      	cmp	r3, #40	; 0x28
 800a32e:	d902      	bls.n	800a336 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a330:	7ffb      	ldrb	r3, [r7, #31]
 800a332:	3301      	adds	r3, #1
 800a334:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	7a1b      	ldrb	r3, [r3, #8]
 800a33a:	f003 0308 	and.w	r3, r3, #8
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d05d      	beq.n	800a3fe <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a346:	2b04      	cmp	r3, #4
 800a348:	d003      	beq.n	800a352 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800a34e:	2b07      	cmp	r3, #7
 800a350:	d155      	bne.n	800a3fe <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a352:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <tcp_slowtmr+0x268>)
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a362:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a366:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a36a:	4910      	ldr	r1, [pc, #64]	; (800a3ac <tcp_slowtmr+0x290>)
 800a36c:	fba1 1303 	umull	r1, r3, r1, r3
 800a370:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a372:	429a      	cmp	r2, r3
 800a374:	d91c      	bls.n	800a3b0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a376:	7ffb      	ldrb	r3, [r7, #31]
 800a378:	3301      	adds	r3, #1
 800a37a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800a37c:	7fbb      	ldrb	r3, [r7, #30]
 800a37e:	3301      	adds	r3, #1
 800a380:	77bb      	strb	r3, [r7, #30]
 800a382:	e03c      	b.n	800a3fe <tcp_slowtmr+0x2e2>
 800a384:	20003950 	.word	0x20003950
 800a388:	20000246 	.word	0x20000246
 800a38c:	2000394c 	.word	0x2000394c
 800a390:	0801979c 	.word	0x0801979c
 800a394:	0801994c 	.word	0x0801994c
 800a398:	080197d8 	.word	0x080197d8
 800a39c:	08019978 	.word	0x08019978
 800a3a0:	080199a4 	.word	0x080199a4
 800a3a4:	0801b300 	.word	0x0801b300
 800a3a8:	0801b2f0 	.word	0x0801b2f0
 800a3ac:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3b0:	4b97      	ldr	r3, [pc, #604]	; (800a610 <tcp_slowtmr+0x4f4>)
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	4b92      	ldr	r3, [pc, #584]	; (800a614 <tcp_slowtmr+0x4f8>)
 800a3ca:	fb03 f300 	mul.w	r3, r3, r0
 800a3ce:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800a3d0:	4991      	ldr	r1, [pc, #580]	; (800a618 <tcp_slowtmr+0x4fc>)
 800a3d2:	fba1 1303 	umull	r1, r3, r1, r3
 800a3d6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d910      	bls.n	800a3fe <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800a3dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3de:	f004 faba 	bl	800e956 <tcp_keepalive>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800a3e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d107      	bne.n	800a3fe <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a402:	2b00      	cmp	r3, #0
 800a404:	d016      	beq.n	800a434 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800a406:	4b82      	ldr	r3, [pc, #520]	; (800a610 <tcp_slowtmr+0x4f4>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	1ad2      	subs	r2, r2, r3
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a416:	4619      	mov	r1, r3
 800a418:	460b      	mov	r3, r1
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	440b      	add	r3, r1
 800a41e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a420:	429a      	cmp	r2, r3
 800a422:	d307      	bcc.n	800a434 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 fa04 	bl	800a836 <tcp_segs_free>
      pcb->ooseq = NULL;
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	2200      	movs	r2, #0
 800a432:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	7d1b      	ldrb	r3, [r3, #20]
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d109      	bne.n	800a450 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a43c:	4b74      	ldr	r3, [pc, #464]	; (800a610 <tcp_slowtmr+0x4f4>)
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	2b28      	cmp	r3, #40	; 0x28
 800a448:	d902      	bls.n	800a450 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a44a:	7ffb      	ldrb	r3, [r7, #31]
 800a44c:	3301      	adds	r3, #1
 800a44e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	7d1b      	ldrb	r3, [r3, #20]
 800a454:	2b09      	cmp	r3, #9
 800a456:	d109      	bne.n	800a46c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a458:	4b6d      	ldr	r3, [pc, #436]	; (800a610 <tcp_slowtmr+0x4f4>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2bf0      	cmp	r3, #240	; 0xf0
 800a464:	d902      	bls.n	800a46c <tcp_slowtmr+0x350>
        ++pcb_remove;
 800a466:	7ffb      	ldrb	r3, [r7, #31]
 800a468:	3301      	adds	r3, #1
 800a46a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a46c:	7ffb      	ldrb	r3, [r7, #31]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d05d      	beq.n	800a52e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a478:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a47a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a47c:	f000 fc4c 	bl	800ad18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d010      	beq.n	800a4a8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a486:	4b65      	ldr	r3, [pc, #404]	; (800a61c <tcp_slowtmr+0x500>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d106      	bne.n	800a49e <tcp_slowtmr+0x382>
 800a490:	4b63      	ldr	r3, [pc, #396]	; (800a620 <tcp_slowtmr+0x504>)
 800a492:	f240 4289 	movw	r2, #1161	; 0x489
 800a496:	4963      	ldr	r1, [pc, #396]	; (800a624 <tcp_slowtmr+0x508>)
 800a498:	4863      	ldr	r0, [pc, #396]	; (800a628 <tcp_slowtmr+0x50c>)
 800a49a:	f00c fdb7 	bl	801700c <iprintf>
        prev->next = pcb->next;
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	68da      	ldr	r2, [r3, #12]
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	60da      	str	r2, [r3, #12]
 800a4a6:	e00f      	b.n	800a4c8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a4a8:	4b5c      	ldr	r3, [pc, #368]	; (800a61c <tcp_slowtmr+0x500>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d006      	beq.n	800a4c0 <tcp_slowtmr+0x3a4>
 800a4b2:	4b5b      	ldr	r3, [pc, #364]	; (800a620 <tcp_slowtmr+0x504>)
 800a4b4:	f240 428d 	movw	r2, #1165	; 0x48d
 800a4b8:	495c      	ldr	r1, [pc, #368]	; (800a62c <tcp_slowtmr+0x510>)
 800a4ba:	485b      	ldr	r0, [pc, #364]	; (800a628 <tcp_slowtmr+0x50c>)
 800a4bc:	f00c fda6 	bl	801700c <iprintf>
        tcp_active_pcbs = pcb->next;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	4a55      	ldr	r2, [pc, #340]	; (800a61c <tcp_slowtmr+0x500>)
 800a4c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a4c8:	7fbb      	ldrb	r3, [r7, #30]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d010      	beq.n	800a4f0 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a4d6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	1d1d      	adds	r5, r3, #4
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	8adb      	ldrh	r3, [r3, #22]
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	8b12      	ldrh	r2, [r2, #24]
 800a4e4:	9201      	str	r2, [sp, #4]
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	f004 f8e0 	bl	800e6b0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	7d1b      	ldrb	r3, [r3, #20]
 800a4fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	2001      	movs	r0, #1
 800a50a:	f7fe f98f 	bl	800882c <memp_free>

      tcp_active_pcbs_changed = 0;
 800a50e:	4b48      	ldr	r3, [pc, #288]	; (800a630 <tcp_slowtmr+0x514>)
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d004      	beq.n	800a524 <tcp_slowtmr+0x408>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f06f 010c 	mvn.w	r1, #12
 800a520:	68b8      	ldr	r0, [r7, #8]
 800a522:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a524:	4b42      	ldr	r3, [pc, #264]	; (800a630 <tcp_slowtmr+0x514>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d035      	beq.n	800a598 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800a52c:	e606      	b.n	800a13c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	7edb      	ldrb	r3, [r3, #27]
 800a53c:	3301      	adds	r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	7eda      	ldrb	r2, [r3, #27]
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	7f1b      	ldrb	r3, [r3, #28]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d323      	bcc.n	800a598 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	2200      	movs	r2, #0
 800a554:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a556:	4b36      	ldr	r3, [pc, #216]	; (800a630 <tcp_slowtmr+0x514>)
 800a558:	2200      	movs	r2, #0
 800a55a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00a      	beq.n	800a57c <tcp_slowtmr+0x460>
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56c:	6a3a      	ldr	r2, [r7, #32]
 800a56e:	6912      	ldr	r2, [r2, #16]
 800a570:	6a39      	ldr	r1, [r7, #32]
 800a572:	4610      	mov	r0, r2
 800a574:	4798      	blx	r3
 800a576:	4603      	mov	r3, r0
 800a578:	777b      	strb	r3, [r7, #29]
 800a57a:	e001      	b.n	800a580 <tcp_slowtmr+0x464>
 800a57c:	2300      	movs	r3, #0
 800a57e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800a580:	4b2b      	ldr	r3, [pc, #172]	; (800a630 <tcp_slowtmr+0x514>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d000      	beq.n	800a58a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800a588:	e5d8      	b.n	800a13c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a58a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800a592:	6a38      	ldr	r0, [r7, #32]
 800a594:	f003 fe02 	bl	800e19c <tcp_output>
  while (pcb != NULL) {
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f47f add4 	bne.w	800a148 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800a5a4:	4b23      	ldr	r3, [pc, #140]	; (800a634 <tcp_slowtmr+0x518>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a5aa:	e068      	b.n	800a67e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	7d1b      	ldrb	r3, [r3, #20]
 800a5b0:	2b0a      	cmp	r3, #10
 800a5b2:	d006      	beq.n	800a5c2 <tcp_slowtmr+0x4a6>
 800a5b4:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <tcp_slowtmr+0x504>)
 800a5b6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a5ba:	491f      	ldr	r1, [pc, #124]	; (800a638 <tcp_slowtmr+0x51c>)
 800a5bc:	481a      	ldr	r0, [pc, #104]	; (800a628 <tcp_slowtmr+0x50c>)
 800a5be:	f00c fd25 	bl	801700c <iprintf>
    pcb_remove = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a5c6:	4b12      	ldr	r3, [pc, #72]	; (800a610 <tcp_slowtmr+0x4f4>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	2bf0      	cmp	r3, #240	; 0xf0
 800a5d2:	d902      	bls.n	800a5da <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800a5d4:	7ffb      	ldrb	r3, [r7, #31]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a5da:	7ffb      	ldrb	r3, [r7, #31]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d049      	beq.n	800a674 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a5e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5e2:	f000 fb99 	bl	800ad18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d029      	beq.n	800a640 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a5ec:	4b11      	ldr	r3, [pc, #68]	; (800a634 <tcp_slowtmr+0x518>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d106      	bne.n	800a604 <tcp_slowtmr+0x4e8>
 800a5f6:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <tcp_slowtmr+0x504>)
 800a5f8:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a5fc:	490f      	ldr	r1, [pc, #60]	; (800a63c <tcp_slowtmr+0x520>)
 800a5fe:	480a      	ldr	r0, [pc, #40]	; (800a628 <tcp_slowtmr+0x50c>)
 800a600:	f00c fd04 	bl	801700c <iprintf>
        prev->next = pcb->next;
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	60da      	str	r2, [r3, #12]
 800a60c:	e028      	b.n	800a660 <tcp_slowtmr+0x544>
 800a60e:	bf00      	nop
 800a610:	20003950 	.word	0x20003950
 800a614:	000124f8 	.word	0x000124f8
 800a618:	10624dd3 	.word	0x10624dd3
 800a61c:	2000394c 	.word	0x2000394c
 800a620:	0801979c 	.word	0x0801979c
 800a624:	080199d4 	.word	0x080199d4
 800a628:	080197d8 	.word	0x080197d8
 800a62c:	08019a00 	.word	0x08019a00
 800a630:	20003948 	.word	0x20003948
 800a634:	2000395c 	.word	0x2000395c
 800a638:	08019a2c 	.word	0x08019a2c
 800a63c:	08019a5c 	.word	0x08019a5c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a640:	4b12      	ldr	r3, [pc, #72]	; (800a68c <tcp_slowtmr+0x570>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a646:	429a      	cmp	r2, r3
 800a648:	d006      	beq.n	800a658 <tcp_slowtmr+0x53c>
 800a64a:	4b11      	ldr	r3, [pc, #68]	; (800a690 <tcp_slowtmr+0x574>)
 800a64c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800a650:	4910      	ldr	r1, [pc, #64]	; (800a694 <tcp_slowtmr+0x578>)
 800a652:	4811      	ldr	r0, [pc, #68]	; (800a698 <tcp_slowtmr+0x57c>)
 800a654:	f00c fcda 	bl	801700c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	4a0b      	ldr	r2, [pc, #44]	; (800a68c <tcp_slowtmr+0x570>)
 800a65e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a66a:	69b9      	ldr	r1, [r7, #24]
 800a66c:	2001      	movs	r0, #1
 800a66e:	f7fe f8dd 	bl	800882c <memp_free>
 800a672:	e004      	b.n	800a67e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d193      	bne.n	800a5ac <tcp_slowtmr+0x490>
    }
  }
}
 800a684:	bf00      	nop
 800a686:	3728      	adds	r7, #40	; 0x28
 800a688:	46bd      	mov	sp, r7
 800a68a:	bdb0      	pop	{r4, r5, r7, pc}
 800a68c:	2000395c 	.word	0x2000395c
 800a690:	0801979c 	.word	0x0801979c
 800a694:	08019a84 	.word	0x08019a84
 800a698:	080197d8 	.word	0x080197d8

0800a69c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a6a2:	4b2d      	ldr	r3, [pc, #180]	; (800a758 <tcp_fasttmr+0xbc>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	4b2b      	ldr	r3, [pc, #172]	; (800a758 <tcp_fasttmr+0xbc>)
 800a6ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a6ae:	4b2b      	ldr	r3, [pc, #172]	; (800a75c <tcp_fasttmr+0xc0>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a6b4:	e048      	b.n	800a748 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	7f5a      	ldrb	r2, [r3, #29]
 800a6ba:	4b27      	ldr	r3, [pc, #156]	; (800a758 <tcp_fasttmr+0xbc>)
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d03f      	beq.n	800a742 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a6c2:	4b25      	ldr	r3, [pc, #148]	; (800a758 <tcp_fasttmr+0xbc>)
 800a6c4:	781a      	ldrb	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	7e9b      	ldrb	r3, [r3, #26]
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d010      	beq.n	800a6f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7e9b      	ldrb	r3, [r3, #26]
 800a6da:	f043 0302 	orr.w	r3, r3, #2
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f003 fd59 	bl	800e19c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	7e9b      	ldrb	r3, [r3, #26]
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	7e9b      	ldrb	r3, [r3, #26]
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	2b00      	cmp	r3, #0
 800a702:	d009      	beq.n	800a718 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	7e9b      	ldrb	r3, [r3, #26]
 800a708:	f023 0308 	bic.w	r3, r3, #8
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7ff f98e 	bl	8009a34 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00a      	beq.n	800a73c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a726:	4b0e      	ldr	r3, [pc, #56]	; (800a760 <tcp_fasttmr+0xc4>)
 800a728:	2200      	movs	r2, #0
 800a72a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f819 	bl	800a764 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a732:	4b0b      	ldr	r3, [pc, #44]	; (800a760 <tcp_fasttmr+0xc4>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d000      	beq.n	800a73c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a73a:	e7b8      	b.n	800a6ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	607b      	str	r3, [r7, #4]
 800a740:	e002      	b.n	800a748 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1b3      	bne.n	800a6b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000246 	.word	0x20000246
 800a75c:	2000394c 	.word	0x2000394c
 800a760:	20003948 	.word	0x20003948

0800a764 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a764:	b590      	push	{r4, r7, lr}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a770:	7b5b      	ldrb	r3, [r3, #13]
 800a772:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a778:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <tcp_process_refused_data+0x3e>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6918      	ldr	r0, [r3, #16]
 800a794:	2300      	movs	r3, #0
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	47a0      	blx	r4
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]
 800a7a0:	e007      	b.n	800a7b2 <tcp_process_refused_data+0x4e>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f000 f89b 	bl	800a8e4 <tcp_recv_null>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d12a      	bne.n	800a810 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800a7ba:	7bbb      	ldrb	r3, [r7, #14]
 800a7bc:	f003 0320 	and.w	r3, r3, #32
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d033      	beq.n	800a82c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7cc:	d005      	beq.n	800a7da <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <tcp_process_refused_data+0x98>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6918      	ldr	r0, [r3, #16]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	47a0      	blx	r4
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]
 800a7fa:	e001      	b.n	800a800 <tcp_process_refused_data+0x9c>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a804:	f113 0f0d 	cmn.w	r3, #13
 800a808:	d110      	bne.n	800a82c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800a80a:	f06f 030c 	mvn.w	r3, #12
 800a80e:	e00e      	b.n	800a82e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800a810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a814:	f113 0f0d 	cmn.w	r3, #13
 800a818:	d102      	bne.n	800a820 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a81a:	f06f 030c 	mvn.w	r3, #12
 800a81e:	e006      	b.n	800a82e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800a826:	f06f 0304 	mvn.w	r3, #4
 800a82a:	e000      	b.n	800a82e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	bd90      	pop	{r4, r7, pc}

0800a836 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a83e:	e007      	b.n	800a850 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f809 	bl	800a85e <tcp_seg_free>
    seg = next;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f4      	bne.n	800a840 <tcp_segs_free+0xa>
  }
}
 800a856:	bf00      	nop
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00c      	beq.n	800a886 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe fd09 	bl	8009290 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	2003      	movs	r0, #3
 800a882:	f7fd ffd3 	bl	800882c <memp_free>
  }
}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	460b      	mov	r3, r1
 800a898:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	78fa      	ldrb	r2, [r7, #3]
 800a89e:	755a      	strb	r2, [r3, #21]
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a8b4:	2003      	movs	r0, #3
 800a8b6:	f7fd ff6d 	bl	8008794 <memp_malloc>
 800a8ba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <tcp_seg_copy+0x1a>
    return NULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e00a      	b.n	800a8dc <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a8c6:	2210      	movs	r2, #16
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f00c fae3 	bl	8016e96 <memcpy>
  pbuf_ref(cseg->p);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe fd87 	bl	80093e8 <pbuf_ref>
  return cseg;
 800a8da:	68fb      	ldr	r3, [r7, #12]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d009      	beq.n	800a90c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	891b      	ldrh	r3, [r3, #8]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	68b8      	ldr	r0, [r7, #8]
 800a900:	f7ff fb6e 	bl	8009fe0 <tcp_recved>
    pbuf_free(p);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fe fcc3 	bl	8009290 <pbuf_free>
 800a90a:	e008      	b.n	800a91e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800a90c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d104      	bne.n	800a91e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800a914:	68b8      	ldr	r0, [r7, #8]
 800a916:	f7ff f8f3 	bl	8009b00 <tcp_close>
 800a91a:	4603      	mov	r3, r0
 800a91c:	e000      	b.n	800a920 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	4603      	mov	r3, r0
 800a930:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a936:	2b00      	cmp	r3, #0
 800a938:	db01      	blt.n	800a93e <tcp_kill_prio+0x16>
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	e000      	b.n	800a940 <tcp_kill_prio+0x18>
 800a93e:	237f      	movs	r3, #127	; 0x7f
 800a940:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a94a:	4b16      	ldr	r3, [pc, #88]	; (800a9a4 <tcp_kill_prio+0x7c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	617b      	str	r3, [r7, #20]
 800a950:	e01a      	b.n	800a988 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	7d5b      	ldrb	r3, [r3, #21]
 800a956:	7afa      	ldrb	r2, [r7, #11]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d312      	bcc.n	800a982 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a95c:	4b12      	ldr	r3, [pc, #72]	; (800a9a8 <tcp_kill_prio+0x80>)
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d80a      	bhi.n	800a982 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800a96c:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <tcp_kill_prio+0x80>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	7d5b      	ldrb	r3, [r3, #21]
 800a980:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	617b      	str	r3, [r7, #20]
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1e1      	bne.n	800a952 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a994:	6938      	ldr	r0, [r7, #16]
 800a996:	f7ff f97d 	bl	8009c94 <tcp_abort>
  }
}
 800a99a:	bf00      	nop
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	2000394c 	.word	0x2000394c
 800a9a8:	20003950 	.word	0x20003950

0800a9ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	2b08      	cmp	r3, #8
 800a9ba:	d009      	beq.n	800a9d0 <tcp_kill_state+0x24>
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	d006      	beq.n	800a9d0 <tcp_kill_state+0x24>
 800a9c2:	4b1a      	ldr	r3, [pc, #104]	; (800aa2c <tcp_kill_state+0x80>)
 800a9c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a9c8:	4919      	ldr	r1, [pc, #100]	; (800aa30 <tcp_kill_state+0x84>)
 800a9ca:	481a      	ldr	r0, [pc, #104]	; (800aa34 <tcp_kill_state+0x88>)
 800a9cc:	f00c fb1e 	bl	801700c <iprintf>

  inactivity = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9d8:	4b17      	ldr	r3, [pc, #92]	; (800aa38 <tcp_kill_state+0x8c>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	617b      	str	r3, [r7, #20]
 800a9de:	e017      	b.n	800aa10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	7d1b      	ldrb	r3, [r3, #20]
 800a9e4:	79fa      	ldrb	r2, [r7, #7]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d10f      	bne.n	800aa0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a9ea:	4b14      	ldr	r3, [pc, #80]	; (800aa3c <tcp_kill_state+0x90>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d807      	bhi.n	800aa0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a9fa:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <tcp_kill_state+0x90>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	617b      	str	r3, [r7, #20]
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e4      	bne.n	800a9e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	6938      	ldr	r0, [r7, #16]
 800aa20:	f7ff f886 	bl	8009b30 <tcp_abandon>
  }
}
 800aa24:	bf00      	nop
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	0801979c 	.word	0x0801979c
 800aa30:	08019aac 	.word	0x08019aac
 800aa34:	080197d8 	.word	0x080197d8
 800aa38:	2000394c 	.word	0x2000394c
 800aa3c:	20003950 	.word	0x20003950

0800aa40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa4e:	4b12      	ldr	r3, [pc, #72]	; (800aa98 <tcp_kill_timewait+0x58>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e012      	b.n	800aa7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa56:	4b11      	ldr	r3, [pc, #68]	; (800aa9c <tcp_kill_timewait+0x5c>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d807      	bhi.n	800aa76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aa66:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <tcp_kill_timewait+0x5c>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e9      	bne.n	800aa56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aa88:	68b8      	ldr	r0, [r7, #8]
 800aa8a:	f7ff f903 	bl	8009c94 <tcp_abort>
  }
}
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	2000395c 	.word	0x2000395c
 800aa9c:	20003950 	.word	0x20003950

0800aaa0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aaaa:	2001      	movs	r0, #1
 800aaac:	f7fd fe72 	bl	8008794 <memp_malloc>
 800aab0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d124      	bne.n	800ab02 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800aab8:	f7ff ffc2 	bl	800aa40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aabc:	2001      	movs	r0, #1
 800aabe:	f7fd fe69 	bl	8008794 <memp_malloc>
 800aac2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d11b      	bne.n	800ab02 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800aaca:	2009      	movs	r0, #9
 800aacc:	f7ff ff6e 	bl	800a9ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aad0:	2001      	movs	r0, #1
 800aad2:	f7fd fe5f 	bl	8008794 <memp_malloc>
 800aad6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d111      	bne.n	800ab02 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800aade:	2008      	movs	r0, #8
 800aae0:	f7ff ff64 	bl	800a9ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aae4:	2001      	movs	r0, #1
 800aae6:	f7fd fe55 	bl	8008794 <memp_malloc>
 800aaea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d107      	bne.n	800ab02 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff ff17 	bl	800a928 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aafa:	2001      	movs	r0, #1
 800aafc:	f7fd fe4a 	bl	8008794 <memp_malloc>
 800ab00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d03f      	beq.n	800ab88 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ab08:	2298      	movs	r2, #152	; 0x98
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f00c f9cd 	bl	8016eac <memset>
    pcb->prio = prio;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	79fa      	ldrb	r2, [r7, #7]
 800ab16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ab1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ab28:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	22ff      	movs	r2, #255	; 0xff
 800ab36:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ab3e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2206      	movs	r2, #6
 800ab44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2206      	movs	r2, #6
 800ab4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab54:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ab5e:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <tcp_alloc+0xf4>)
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <tcp_alloc+0xf8>)
 800ab68:	781a      	ldrb	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ab74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <tcp_alloc+0xfc>)
 800ab7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4a07      	ldr	r2, [pc, #28]	; (800aba0 <tcp_alloc+0x100>)
 800ab84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ab88:	68fb      	ldr	r3, [r7, #12]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20003950 	.word	0x20003950
 800ab98:	20000246 	.word	0x20000246
 800ab9c:	0800a8e5 	.word	0x0800a8e5
 800aba0:	006ddd00 	.word	0x006ddd00

0800aba4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800aba8:	2040      	movs	r0, #64	; 0x40
 800abaa:	f7ff ff79 	bl	800aaa0 <tcp_alloc>
 800abae:	4603      	mov	r3, r0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	611a      	str	r2, [r3, #16]
  }
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00e      	beq.n	800ac06 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7d1b      	ldrb	r3, [r3, #20]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d106      	bne.n	800abfe <tcp_recv+0x26>
 800abf0:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <tcp_recv+0x38>)
 800abf2:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800abf6:	4907      	ldr	r1, [pc, #28]	; (800ac14 <tcp_recv+0x3c>)
 800abf8:	4807      	ldr	r0, [pc, #28]	; (800ac18 <tcp_recv+0x40>)
 800abfa:	f00c fa07 	bl	801700c <iprintf>
    pcb->recv = recv;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	0801979c 	.word	0x0801979c
 800ac14:	08019abc 	.word	0x08019abc
 800ac18:	080197d8 	.word	0x080197d8

0800ac1c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00d      	beq.n	800ac48 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7d1b      	ldrb	r3, [r3, #20]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d106      	bne.n	800ac42 <tcp_sent+0x26>
 800ac34:	4b06      	ldr	r3, [pc, #24]	; (800ac50 <tcp_sent+0x34>)
 800ac36:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800ac3a:	4906      	ldr	r1, [pc, #24]	; (800ac54 <tcp_sent+0x38>)
 800ac3c:	4806      	ldr	r0, [pc, #24]	; (800ac58 <tcp_sent+0x3c>)
 800ac3e:	f00c f9e5 	bl	801700c <iprintf>
    pcb->sent = sent;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800ac48:	bf00      	nop
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	0801979c 	.word	0x0801979c
 800ac54:	08019ae4 	.word	0x08019ae4
 800ac58:	080197d8 	.word	0x080197d8

0800ac5c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00e      	beq.n	800ac8a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7d1b      	ldrb	r3, [r3, #20]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d106      	bne.n	800ac82 <tcp_err+0x26>
 800ac74:	4b07      	ldr	r3, [pc, #28]	; (800ac94 <tcp_err+0x38>)
 800ac76:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800ac7a:	4907      	ldr	r1, [pc, #28]	; (800ac98 <tcp_err+0x3c>)
 800ac7c:	4807      	ldr	r0, [pc, #28]	; (800ac9c <tcp_err+0x40>)
 800ac7e:	f00c f9c5 	bl	801700c <iprintf>
    pcb->errf = err;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	0801979c 	.word	0x0801979c
 800ac98:	08019b0c 	.word	0x08019b0c
 800ac9c:	080197d8 	.word	0x080197d8

0800aca0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d008      	beq.n	800acc2 <tcp_accept+0x22>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	7d1b      	ldrb	r3, [r3, #20]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d104      	bne.n	800acc2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	619a      	str	r2, [r3, #24]
  }
}
 800acc2:	bf00      	nop
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
	...

0800acd0 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	7d1b      	ldrb	r3, [r3, #20]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d106      	bne.n	800acf4 <tcp_poll+0x24>
 800ace6:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <tcp_poll+0x3c>)
 800ace8:	f240 7203 	movw	r2, #1795	; 0x703
 800acec:	4908      	ldr	r1, [pc, #32]	; (800ad10 <tcp_poll+0x40>)
 800acee:	4809      	ldr	r0, [pc, #36]	; (800ad14 <tcp_poll+0x44>)
 800acf0:	f00c f98c 	bl	801700c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	79fa      	ldrb	r2, [r7, #7]
 800ad00:	771a      	strb	r2, [r3, #28]
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0801979c 	.word	0x0801979c
 800ad10:	08019b34 	.word	0x08019b34
 800ad14:	080197d8 	.word	0x080197d8

0800ad18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7d1b      	ldrb	r3, [r3, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d034      	beq.n	800ad92 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ad2c:	2b0a      	cmp	r3, #10
 800ad2e:	d030      	beq.n	800ad92 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d02c      	beq.n	800ad92 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d007      	beq.n	800ad50 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fe faa3 	bl	8009290 <pbuf_free>
      pcb->refused_data = NULL;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff fd6e 	bl	800a836 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad66:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7ff fd62 	bl	800a836 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7ff fd5d 	bl	800a836 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	669a      	str	r2, [r3, #104]	; 0x68
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800ad92:	bf00      	nop
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d105      	bne.n	800adbc <tcp_pcb_remove+0x20>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68da      	ldr	r2, [r3, #12]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	e013      	b.n	800ade4 <tcp_pcb_remove+0x48>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	e00c      	b.n	800adde <tcp_pcb_remove+0x42>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d104      	bne.n	800add8 <tcp_pcb_remove+0x3c>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	60da      	str	r2, [r3, #12]
 800add6:	e005      	b.n	800ade4 <tcp_pcb_remove+0x48>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1ef      	bne.n	800adc4 <tcp_pcb_remove+0x28>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2200      	movs	r2, #0
 800ade8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800adea:	6838      	ldr	r0, [r7, #0]
 800adec:	f7ff ff94 	bl	800ad18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	7d1b      	ldrb	r3, [r3, #20]
 800adf4:	2b0a      	cmp	r3, #10
 800adf6:	d013      	beq.n	800ae20 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d00f      	beq.n	800ae20 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	7e9b      	ldrb	r3, [r3, #26]
 800ae04:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d009      	beq.n	800ae20 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	7e9b      	ldrb	r3, [r3, #26]
 800ae10:	f043 0302 	orr.w	r3, r3, #2
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ae1a:	6838      	ldr	r0, [r7, #0]
 800ae1c:	f003 f9be 	bl	800e19c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	7d1b      	ldrb	r3, [r3, #20]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d020      	beq.n	800ae6a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d006      	beq.n	800ae3e <tcp_pcb_remove+0xa2>
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <tcp_pcb_remove+0xe4>)
 800ae32:	f240 7253 	movw	r2, #1875	; 0x753
 800ae36:	4913      	ldr	r1, [pc, #76]	; (800ae84 <tcp_pcb_remove+0xe8>)
 800ae38:	4813      	ldr	r0, [pc, #76]	; (800ae88 <tcp_pcb_remove+0xec>)
 800ae3a:	f00c f8e7 	bl	801700c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d006      	beq.n	800ae54 <tcp_pcb_remove+0xb8>
 800ae46:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <tcp_pcb_remove+0xe4>)
 800ae48:	f240 7254 	movw	r2, #1876	; 0x754
 800ae4c:	490f      	ldr	r1, [pc, #60]	; (800ae8c <tcp_pcb_remove+0xf0>)
 800ae4e:	480e      	ldr	r0, [pc, #56]	; (800ae88 <tcp_pcb_remove+0xec>)
 800ae50:	f00c f8dc 	bl	801700c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d006      	beq.n	800ae6a <tcp_pcb_remove+0xce>
 800ae5c:	4b08      	ldr	r3, [pc, #32]	; (800ae80 <tcp_pcb_remove+0xe4>)
 800ae5e:	f240 7256 	movw	r2, #1878	; 0x756
 800ae62:	490b      	ldr	r1, [pc, #44]	; (800ae90 <tcp_pcb_remove+0xf4>)
 800ae64:	4808      	ldr	r0, [pc, #32]	; (800ae88 <tcp_pcb_remove+0xec>)
 800ae66:	f00c f8d1 	bl	801700c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	0801979c 	.word	0x0801979c
 800ae84:	08019b54 	.word	0x08019b54
 800ae88:	080197d8 	.word	0x080197d8
 800ae8c:	08019b6c 	.word	0x08019b6c
 800ae90:	08019b88 	.word	0x08019b88

0800ae94 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ae9c:	4b07      	ldr	r3, [pc, #28]	; (800aebc <tcp_next_iss+0x28>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	4b07      	ldr	r3, [pc, #28]	; (800aec0 <tcp_next_iss+0x2c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4413      	add	r3, r2
 800aea6:	4a05      	ldr	r2, [pc, #20]	; (800aebc <tcp_next_iss+0x28>)
 800aea8:	6013      	str	r3, [r2, #0]
  return iss;
 800aeaa:	4b04      	ldr	r3, [pc, #16]	; (800aebc <tcp_next_iss+0x28>)
 800aeac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	2000011c 	.word	0x2000011c
 800aec0:	20003950 	.word	0x20003950

0800aec4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	6039      	str	r1, [r7, #0]
 800aece:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800aed0:	6838      	ldr	r0, [r7, #0]
 800aed2:	f006 fc71 	bl	80117b8 <ip4_route>
 800aed6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800aede:	88fb      	ldrh	r3, [r7, #6]
 800aee0:	e010      	b.n	800af04 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aee6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aee8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d008      	beq.n	800af02 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800aef0:	897b      	ldrh	r3, [r7, #10]
 800aef2:	3b28      	subs	r3, #40	; 0x28
 800aef4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800aef6:	893a      	ldrh	r2, [r7, #8]
 800aef8:	88fb      	ldrh	r3, [r7, #6]
 800aefa:	4293      	cmp	r3, r2
 800aefc:	bf28      	it	cs
 800aefe:	4613      	movcs	r3, r2
 800af00:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800af02:	88fb      	ldrh	r3, [r7, #6]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800af1a:	e011      	b.n	800af40 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	429a      	cmp	r2, r3
 800af26:	d108      	bne.n	800af3a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7fe feb0 	bl	8009c94 <tcp_abort>
      pcb = next;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	60fb      	str	r3, [r7, #12]
 800af38:	e002      	b.n	800af40 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1ea      	bne.n	800af1c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800af46:	bf00      	nop
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
	...

0800af50 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d02c      	beq.n	800afba <tcp_netif_ip_addr_changed+0x6a>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d028      	beq.n	800afba <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af68:	4b16      	ldr	r3, [pc, #88]	; (800afc4 <tcp_netif_ip_addr_changed+0x74>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff ffcc 	bl	800af0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800af74:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <tcp_netif_ip_addr_changed+0x78>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff ffc6 	bl	800af0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d019      	beq.n	800afba <tcp_netif_ip_addr_changed+0x6a>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d015      	beq.n	800afba <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <tcp_netif_ip_addr_changed+0x7c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	e00e      	b.n	800afb4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d103      	bne.n	800afb0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1ed      	bne.n	800af96 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	2000394c 	.word	0x2000394c
 800afc8:	20003958 	.word	0x20003958
 800afcc:	20003954 	.word	0x20003954

0800afd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800afd0:	b590      	push	{r4, r7, lr}
 800afd2:	b08b      	sub	sp, #44	; 0x2c
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	4a82      	ldr	r2, [pc, #520]	; (800b1e8 <tcp_input+0x218>)
 800afe0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	895b      	ldrh	r3, [r3, #10]
 800afe6:	2b13      	cmp	r3, #19
 800afe8:	f240 838a 	bls.w	800b700 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800afec:	4b7f      	ldr	r3, [pc, #508]	; (800b1ec <tcp_input+0x21c>)
 800afee:	695a      	ldr	r2, [r3, #20]
 800aff0:	4b7e      	ldr	r3, [pc, #504]	; (800b1ec <tcp_input+0x21c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f006 fe76 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	f040 8380 	bne.w	800b704 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b004:	4b79      	ldr	r3, [pc, #484]	; (800b1ec <tcp_input+0x21c>)
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b00c:	2be0      	cmp	r3, #224	; 0xe0
 800b00e:	f000 8379 	beq.w	800b704 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800b012:	4b75      	ldr	r3, [pc, #468]	; (800b1e8 <tcp_input+0x218>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	899b      	ldrh	r3, [r3, #12]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fd f80c 	bl	8008038 <lwip_htons>
 800b020:	4603      	mov	r3, r0
 800b022:	0b1b      	lsrs	r3, r3, #12
 800b024:	b29b      	uxth	r3, r3
 800b026:	b2db      	uxtb	r3, r3
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b02c:	7cbb      	ldrb	r3, [r7, #18]
 800b02e:	2b13      	cmp	r3, #19
 800b030:	f240 8368 	bls.w	800b704 <tcp_input+0x734>
 800b034:	7cbb      	ldrb	r3, [r7, #18]
 800b036:	b29a      	uxth	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	891b      	ldrh	r3, [r3, #8]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	f200 8361 	bhi.w	800b704 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b042:	7cbb      	ldrb	r3, [r7, #18]
 800b044:	b29b      	uxth	r3, r3
 800b046:	3b14      	subs	r3, #20
 800b048:	b29a      	uxth	r2, r3
 800b04a:	4b69      	ldr	r3, [pc, #420]	; (800b1f0 <tcp_input+0x220>)
 800b04c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b04e:	4b69      	ldr	r3, [pc, #420]	; (800b1f4 <tcp_input+0x224>)
 800b050:	2200      	movs	r2, #0
 800b052:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	895a      	ldrh	r2, [r3, #10]
 800b058:	7cbb      	ldrb	r3, [r7, #18]
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d30d      	bcc.n	800b07c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b060:	4b63      	ldr	r3, [pc, #396]	; (800b1f0 <tcp_input+0x220>)
 800b062:	881a      	ldrh	r2, [r3, #0]
 800b064:	4b64      	ldr	r3, [pc, #400]	; (800b1f8 <tcp_input+0x228>)
 800b066:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b068:	7cbb      	ldrb	r3, [r7, #18]
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	425b      	negs	r3, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	b21b      	sxth	r3, r3
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7fe f8e7 	bl	8009248 <pbuf_header>
 800b07a:	e055      	b.n	800b128 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d105      	bne.n	800b090 <tcp_input+0xc0>
 800b084:	4b5d      	ldr	r3, [pc, #372]	; (800b1fc <tcp_input+0x22c>)
 800b086:	22b2      	movs	r2, #178	; 0xb2
 800b088:	495d      	ldr	r1, [pc, #372]	; (800b200 <tcp_input+0x230>)
 800b08a:	485e      	ldr	r0, [pc, #376]	; (800b204 <tcp_input+0x234>)
 800b08c:	f00b ffbe 	bl	801700c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800b090:	f06f 0113 	mvn.w	r1, #19
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7fe f8d7 	bl	8009248 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	895a      	ldrh	r2, [r3, #10]
 800b09e:	4b56      	ldr	r3, [pc, #344]	; (800b1f8 <tcp_input+0x228>)
 800b0a0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b0a2:	4b53      	ldr	r3, [pc, #332]	; (800b1f0 <tcp_input+0x220>)
 800b0a4:	881a      	ldrh	r2, [r3, #0]
 800b0a6:	4b54      	ldr	r3, [pc, #336]	; (800b1f8 <tcp_input+0x228>)
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800b0ae:	4b52      	ldr	r3, [pc, #328]	; (800b1f8 <tcp_input+0x228>)
 800b0b0:	881b      	ldrh	r3, [r3, #0]
 800b0b2:	425b      	negs	r3, r3
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	b21b      	sxth	r3, r3
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7fe f8c4 	bl	8009248 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	895b      	ldrh	r3, [r3, #10]
 800b0c6:	8a3a      	ldrh	r2, [r7, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	f200 831d 	bhi.w	800b708 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	4a47      	ldr	r2, [pc, #284]	; (800b1f4 <tcp_input+0x224>)
 800b0d6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	8a3b      	ldrh	r3, [r7, #16]
 800b0de:	425b      	negs	r3, r3
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	b21b      	sxth	r3, r3
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	f7fe f8ae 	bl	8009248 <pbuf_header>
    p->tot_len -= opt2len;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	891a      	ldrh	r2, [r3, #8]
 800b0f0:	8a3b      	ldrh	r3, [r7, #16]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	895b      	ldrh	r3, [r3, #10]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <tcp_input+0x13e>
 800b102:	4b3e      	ldr	r3, [pc, #248]	; (800b1fc <tcp_input+0x22c>)
 800b104:	22cf      	movs	r2, #207	; 0xcf
 800b106:	4940      	ldr	r1, [pc, #256]	; (800b208 <tcp_input+0x238>)
 800b108:	483e      	ldr	r0, [pc, #248]	; (800b204 <tcp_input+0x234>)
 800b10a:	f00b ff7f 	bl	801700c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	891a      	ldrh	r2, [r3, #8]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	891b      	ldrh	r3, [r3, #8]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d005      	beq.n	800b128 <tcp_input+0x158>
 800b11c:	4b37      	ldr	r3, [pc, #220]	; (800b1fc <tcp_input+0x22c>)
 800b11e:	22d0      	movs	r2, #208	; 0xd0
 800b120:	493a      	ldr	r1, [pc, #232]	; (800b20c <tcp_input+0x23c>)
 800b122:	4838      	ldr	r0, [pc, #224]	; (800b204 <tcp_input+0x234>)
 800b124:	f00b ff72 	bl	801700c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b128:	4b2f      	ldr	r3, [pc, #188]	; (800b1e8 <tcp_input+0x218>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	b29a      	uxth	r2, r3
 800b130:	4b2d      	ldr	r3, [pc, #180]	; (800b1e8 <tcp_input+0x218>)
 800b132:	681c      	ldr	r4, [r3, #0]
 800b134:	4610      	mov	r0, r2
 800b136:	f7fc ff7f 	bl	8008038 <lwip_htons>
 800b13a:	4603      	mov	r3, r0
 800b13c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b13e:	4b2a      	ldr	r3, [pc, #168]	; (800b1e8 <tcp_input+0x218>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	885b      	ldrh	r3, [r3, #2]
 800b144:	b29a      	uxth	r2, r3
 800b146:	4b28      	ldr	r3, [pc, #160]	; (800b1e8 <tcp_input+0x218>)
 800b148:	681c      	ldr	r4, [r3, #0]
 800b14a:	4610      	mov	r0, r2
 800b14c:	f7fc ff74 	bl	8008038 <lwip_htons>
 800b150:	4603      	mov	r3, r0
 800b152:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b154:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <tcp_input+0x218>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	4b23      	ldr	r3, [pc, #140]	; (800b1e8 <tcp_input+0x218>)
 800b15c:	681c      	ldr	r4, [r3, #0]
 800b15e:	4610      	mov	r0, r2
 800b160:	f7fc ff78 	bl	8008054 <lwip_htonl>
 800b164:	4603      	mov	r3, r0
 800b166:	6063      	str	r3, [r4, #4]
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	4a29      	ldr	r2, [pc, #164]	; (800b210 <tcp_input+0x240>)
 800b16c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b16e:	4b1e      	ldr	r3, [pc, #120]	; (800b1e8 <tcp_input+0x218>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689a      	ldr	r2, [r3, #8]
 800b174:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <tcp_input+0x218>)
 800b176:	681c      	ldr	r4, [r3, #0]
 800b178:	4610      	mov	r0, r2
 800b17a:	f7fc ff6b 	bl	8008054 <lwip_htonl>
 800b17e:	4603      	mov	r3, r0
 800b180:	60a3      	str	r3, [r4, #8]
 800b182:	68a3      	ldr	r3, [r4, #8]
 800b184:	4a23      	ldr	r2, [pc, #140]	; (800b214 <tcp_input+0x244>)
 800b186:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b188:	4b17      	ldr	r3, [pc, #92]	; (800b1e8 <tcp_input+0x218>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	89db      	ldrh	r3, [r3, #14]
 800b18e:	b29a      	uxth	r2, r3
 800b190:	4b15      	ldr	r3, [pc, #84]	; (800b1e8 <tcp_input+0x218>)
 800b192:	681c      	ldr	r4, [r3, #0]
 800b194:	4610      	mov	r0, r2
 800b196:	f7fc ff4f 	bl	8008038 <lwip_htons>
 800b19a:	4603      	mov	r3, r0
 800b19c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b19e:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <tcp_input+0x218>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	899b      	ldrh	r3, [r3, #12]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fc ff46 	bl	8008038 <lwip_htons>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	4b18      	ldr	r3, [pc, #96]	; (800b218 <tcp_input+0x248>)
 800b1b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	891a      	ldrh	r2, [r3, #8]
 800b1be:	4b16      	ldr	r3, [pc, #88]	; (800b218 <tcp_input+0x248>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	f003 0303 	and.w	r3, r3, #3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	bf14      	ite	ne
 800b1ca:	2301      	movne	r3, #1
 800b1cc:	2300      	moveq	r3, #0
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4413      	add	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	4b11      	ldr	r3, [pc, #68]	; (800b21c <tcp_input+0x24c>)
 800b1d8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1de:	4b10      	ldr	r3, [pc, #64]	; (800b220 <tcp_input+0x250>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	61fb      	str	r3, [r7, #28]
 800b1e4:	e082      	b.n	800b2ec <tcp_input+0x31c>
 800b1e6:	bf00      	nop
 800b1e8:	20000258 	.word	0x20000258
 800b1ec:	200003fc 	.word	0x200003fc
 800b1f0:	2000025c 	.word	0x2000025c
 800b1f4:	20000260 	.word	0x20000260
 800b1f8:	2000025e 	.word	0x2000025e
 800b1fc:	08019ba0 	.word	0x08019ba0
 800b200:	08019bd4 	.word	0x08019bd4
 800b204:	08019be4 	.word	0x08019be4
 800b208:	08019c0c 	.word	0x08019c0c
 800b20c:	08019c18 	.word	0x08019c18
 800b210:	20000268 	.word	0x20000268
 800b214:	2000026c 	.word	0x2000026c
 800b218:	20000274 	.word	0x20000274
 800b21c:	20000272 	.word	0x20000272
 800b220:	2000394c 	.word	0x2000394c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	7d1b      	ldrb	r3, [r3, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d105      	bne.n	800b238 <tcp_input+0x268>
 800b22c:	4b8f      	ldr	r3, [pc, #572]	; (800b46c <tcp_input+0x49c>)
 800b22e:	22e2      	movs	r2, #226	; 0xe2
 800b230:	498f      	ldr	r1, [pc, #572]	; (800b470 <tcp_input+0x4a0>)
 800b232:	4890      	ldr	r0, [pc, #576]	; (800b474 <tcp_input+0x4a4>)
 800b234:	f00b feea 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	7d1b      	ldrb	r3, [r3, #20]
 800b23c:	2b0a      	cmp	r3, #10
 800b23e:	d105      	bne.n	800b24c <tcp_input+0x27c>
 800b240:	4b8a      	ldr	r3, [pc, #552]	; (800b46c <tcp_input+0x49c>)
 800b242:	22e3      	movs	r2, #227	; 0xe3
 800b244:	498c      	ldr	r1, [pc, #560]	; (800b478 <tcp_input+0x4a8>)
 800b246:	488b      	ldr	r0, [pc, #556]	; (800b474 <tcp_input+0x4a4>)
 800b248:	f00b fee0 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	7d1b      	ldrb	r3, [r3, #20]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d105      	bne.n	800b260 <tcp_input+0x290>
 800b254:	4b85      	ldr	r3, [pc, #532]	; (800b46c <tcp_input+0x49c>)
 800b256:	22e4      	movs	r2, #228	; 0xe4
 800b258:	4988      	ldr	r1, [pc, #544]	; (800b47c <tcp_input+0x4ac>)
 800b25a:	4886      	ldr	r0, [pc, #536]	; (800b474 <tcp_input+0x4a4>)
 800b25c:	f00b fed6 	bl	801700c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	8b1a      	ldrh	r2, [r3, #24]
 800b264:	4b86      	ldr	r3, [pc, #536]	; (800b480 <tcp_input+0x4b0>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d138      	bne.n	800b2e2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	8ada      	ldrh	r2, [r3, #22]
 800b274:	4b82      	ldr	r3, [pc, #520]	; (800b480 <tcp_input+0x4b0>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	885b      	ldrh	r3, [r3, #2]
 800b27a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d130      	bne.n	800b2e2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	4b7f      	ldr	r3, [pc, #508]	; (800b484 <tcp_input+0x4b4>)
 800b286:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b288:	429a      	cmp	r2, r3
 800b28a:	d12a      	bne.n	800b2e2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	4b7c      	ldr	r3, [pc, #496]	; (800b484 <tcp_input+0x4b4>)
 800b292:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b294:	429a      	cmp	r2, r3
 800b296:	d124      	bne.n	800b2e2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	69fa      	ldr	r2, [r7, #28]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d105      	bne.n	800b2ae <tcp_input+0x2de>
 800b2a2:	4b72      	ldr	r3, [pc, #456]	; (800b46c <tcp_input+0x49c>)
 800b2a4:	22ec      	movs	r2, #236	; 0xec
 800b2a6:	4978      	ldr	r1, [pc, #480]	; (800b488 <tcp_input+0x4b8>)
 800b2a8:	4872      	ldr	r0, [pc, #456]	; (800b474 <tcp_input+0x4a4>)
 800b2aa:	f00b feaf 	bl	801700c <iprintf>
      if (prev != NULL) {
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <tcp_input+0x2fa>
        prev->next = pcb->next;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	68da      	ldr	r2, [r3, #12]
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b2bc:	4b73      	ldr	r3, [pc, #460]	; (800b48c <tcp_input+0x4bc>)
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b2c4:	4a71      	ldr	r2, [pc, #452]	; (800b48c <tcp_input+0x4bc>)
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d10f      	bne.n	800b2f4 <tcp_input+0x324>
 800b2d4:	4b65      	ldr	r3, [pc, #404]	; (800b46c <tcp_input+0x49c>)
 800b2d6:	22f4      	movs	r2, #244	; 0xf4
 800b2d8:	496d      	ldr	r1, [pc, #436]	; (800b490 <tcp_input+0x4c0>)
 800b2da:	4866      	ldr	r0, [pc, #408]	; (800b474 <tcp_input+0x4a4>)
 800b2dc:	f00b fe96 	bl	801700c <iprintf>
      break;
 800b2e0:	e008      	b.n	800b2f4 <tcp_input+0x324>
    }
    prev = pcb;
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d198      	bne.n	800b224 <tcp_input+0x254>
 800b2f2:	e000      	b.n	800b2f6 <tcp_input+0x326>
      break;
 800b2f4:	bf00      	nop
  }

  if (pcb == NULL) {
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d173      	bne.n	800b3e4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2fc:	4b65      	ldr	r3, [pc, #404]	; (800b494 <tcp_input+0x4c4>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	e02f      	b.n	800b364 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	7d1b      	ldrb	r3, [r3, #20]
 800b308:	2b0a      	cmp	r3, #10
 800b30a:	d005      	beq.n	800b318 <tcp_input+0x348>
 800b30c:	4b57      	ldr	r3, [pc, #348]	; (800b46c <tcp_input+0x49c>)
 800b30e:	22fe      	movs	r2, #254	; 0xfe
 800b310:	4961      	ldr	r1, [pc, #388]	; (800b498 <tcp_input+0x4c8>)
 800b312:	4858      	ldr	r0, [pc, #352]	; (800b474 <tcp_input+0x4a4>)
 800b314:	f00b fe7a 	bl	801700c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	8b1a      	ldrh	r2, [r3, #24]
 800b31c:	4b58      	ldr	r3, [pc, #352]	; (800b480 <tcp_input+0x4b0>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	b29b      	uxth	r3, r3
 800b324:	429a      	cmp	r2, r3
 800b326:	d11a      	bne.n	800b35e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	8ada      	ldrh	r2, [r3, #22]
 800b32c:	4b54      	ldr	r3, [pc, #336]	; (800b480 <tcp_input+0x4b0>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	885b      	ldrh	r3, [r3, #2]
 800b332:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b334:	429a      	cmp	r2, r3
 800b336:	d112      	bne.n	800b35e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	4b51      	ldr	r3, [pc, #324]	; (800b484 <tcp_input+0x4b4>)
 800b33e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b340:	429a      	cmp	r2, r3
 800b342:	d10c      	bne.n	800b35e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	4b4e      	ldr	r3, [pc, #312]	; (800b484 <tcp_input+0x4b4>)
 800b34a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d106      	bne.n	800b35e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800b350:	69f8      	ldr	r0, [r7, #28]
 800b352:	f000 fb15 	bl	800b980 <tcp_timewait_input>
        pbuf_free(p);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7fd ff9a 	bl	8009290 <pbuf_free>
        return;
 800b35c:	e1da      	b.n	800b714 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	61fb      	str	r3, [r7, #28]
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1cc      	bne.n	800b304 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b36e:	4b4b      	ldr	r3, [pc, #300]	; (800b49c <tcp_input+0x4cc>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	617b      	str	r3, [r7, #20]
 800b374:	e019      	b.n	800b3aa <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	8ada      	ldrh	r2, [r3, #22]
 800b37a:	4b41      	ldr	r3, [pc, #260]	; (800b480 <tcp_input+0x4b0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	885b      	ldrh	r3, [r3, #2]
 800b380:	b29b      	uxth	r3, r3
 800b382:	429a      	cmp	r2, r3
 800b384:	d10c      	bne.n	800b3a0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	4b3e      	ldr	r3, [pc, #248]	; (800b484 <tcp_input+0x4b4>)
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d00f      	beq.n	800b3b2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00d      	beq.n	800b3b4 <tcp_input+0x3e4>
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d009      	beq.n	800b3b4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1e2      	bne.n	800b376 <tcp_input+0x3a6>
 800b3b0:	e000      	b.n	800b3b4 <tcp_input+0x3e4>
            break;
 800b3b2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d014      	beq.n	800b3e4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	68da      	ldr	r2, [r3, #12]
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b3c8:	4b34      	ldr	r3, [pc, #208]	; (800b49c <tcp_input+0x4cc>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b3d0:	4a32      	ldr	r2, [pc, #200]	; (800b49c <tcp_input+0x4cc>)
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800b3d6:	6978      	ldr	r0, [r7, #20]
 800b3d8:	f000 f9f0 	bl	800b7bc <tcp_listen_input>
      pbuf_free(p);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7fd ff57 	bl	8009290 <pbuf_free>
      return;
 800b3e2:	e197      	b.n	800b714 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 8164 	beq.w	800b6b4 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b3ec:	4b2c      	ldr	r3, [pc, #176]	; (800b4a0 <tcp_input+0x4d0>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	891a      	ldrh	r2, [r3, #8]
 800b3f6:	4b2a      	ldr	r3, [pc, #168]	; (800b4a0 <tcp_input+0x4d0>)
 800b3f8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b3fa:	4a29      	ldr	r2, [pc, #164]	; (800b4a0 <tcp_input+0x4d0>)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b400:	4b1f      	ldr	r3, [pc, #124]	; (800b480 <tcp_input+0x4b0>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a26      	ldr	r2, [pc, #152]	; (800b4a0 <tcp_input+0x4d0>)
 800b406:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b408:	4b26      	ldr	r3, [pc, #152]	; (800b4a4 <tcp_input+0x4d4>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b40e:	4b26      	ldr	r3, [pc, #152]	; (800b4a8 <tcp_input+0x4d8>)
 800b410:	2200      	movs	r2, #0
 800b412:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b414:	4b25      	ldr	r3, [pc, #148]	; (800b4ac <tcp_input+0x4dc>)
 800b416:	2200      	movs	r2, #0
 800b418:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b41a:	4b25      	ldr	r3, [pc, #148]	; (800b4b0 <tcp_input+0x4e0>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d006      	beq.n	800b434 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	7b5b      	ldrb	r3, [r3, #13]
 800b42a:	f043 0301 	orr.w	r3, r3, #1
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d03d      	beq.n	800b4b8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b43c:	69f8      	ldr	r0, [r7, #28]
 800b43e:	f7ff f991 	bl	800a764 <tcp_process_refused_data>
 800b442:	4603      	mov	r3, r0
 800b444:	f113 0f0d 	cmn.w	r3, #13
 800b448:	d007      	beq.n	800b45a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d032      	beq.n	800b4b8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b452:	4b18      	ldr	r3, [pc, #96]	; (800b4b4 <tcp_input+0x4e4>)
 800b454:	881b      	ldrh	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d02e      	beq.n	800b4b8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f040 8108 	bne.w	800b674 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b464:	69f8      	ldr	r0, [r7, #28]
 800b466:	f002 fe3d 	bl	800e0e4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b46a:	e103      	b.n	800b674 <tcp_input+0x6a4>
 800b46c:	08019ba0 	.word	0x08019ba0
 800b470:	08019c38 	.word	0x08019c38
 800b474:	08019be4 	.word	0x08019be4
 800b478:	08019c60 	.word	0x08019c60
 800b47c:	08019c8c 	.word	0x08019c8c
 800b480:	20000258 	.word	0x20000258
 800b484:	200003fc 	.word	0x200003fc
 800b488:	08019cb4 	.word	0x08019cb4
 800b48c:	2000394c 	.word	0x2000394c
 800b490:	08019ce0 	.word	0x08019ce0
 800b494:	2000395c 	.word	0x2000395c
 800b498:	08019d0c 	.word	0x08019d0c
 800b49c:	20003954 	.word	0x20003954
 800b4a0:	20000248 	.word	0x20000248
 800b4a4:	20000278 	.word	0x20000278
 800b4a8:	20000275 	.word	0x20000275
 800b4ac:	20000270 	.word	0x20000270
 800b4b0:	20000274 	.word	0x20000274
 800b4b4:	20000272 	.word	0x20000272
      }
    }
    tcp_input_pcb = pcb;
 800b4b8:	4a98      	ldr	r2, [pc, #608]	; (800b71c <tcp_input+0x74c>)
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b4be:	69f8      	ldr	r0, [r7, #28]
 800b4c0:	f000 fac6 	bl	800ba50 <tcp_process>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b4c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4cc:	f113 0f0d 	cmn.w	r3, #13
 800b4d0:	f000 80d2 	beq.w	800b678 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800b4d4:	4b92      	ldr	r3, [pc, #584]	; (800b720 <tcp_input+0x750>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d016      	beq.n	800b50e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d008      	beq.n	800b4fc <tcp_input+0x52c>
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4f0:	69fa      	ldr	r2, [r7, #28]
 800b4f2:	6912      	ldr	r2, [r2, #16]
 800b4f4:	f06f 010d 	mvn.w	r1, #13
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b4fc:	69f9      	ldr	r1, [r7, #28]
 800b4fe:	4889      	ldr	r0, [pc, #548]	; (800b724 <tcp_input+0x754>)
 800b500:	f7ff fc4c 	bl	800ad9c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800b504:	69f9      	ldr	r1, [r7, #28]
 800b506:	2001      	movs	r0, #1
 800b508:	f7fd f990 	bl	800882c <memp_free>
 800b50c:	e0bf      	b.n	800b68e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b512:	4b85      	ldr	r3, [pc, #532]	; (800b728 <tcp_input+0x758>)
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d01b      	beq.n	800b552 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b51a:	4b83      	ldr	r3, [pc, #524]	; (800b728 <tcp_input+0x758>)
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b524:	2b00      	cmp	r3, #0
 800b526:	d009      	beq.n	800b53c <tcp_input+0x56c>
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	6910      	ldr	r0, [r2, #16]
 800b530:	89fa      	ldrh	r2, [r7, #14]
 800b532:	69f9      	ldr	r1, [r7, #28]
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	74fb      	strb	r3, [r7, #19]
 800b53a:	e001      	b.n	800b540 <tcp_input+0x570>
 800b53c:	2300      	movs	r3, #0
 800b53e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b540:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b544:	f113 0f0d 	cmn.w	r3, #13
 800b548:	f000 8098 	beq.w	800b67c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b54c:	4b76      	ldr	r3, [pc, #472]	; (800b728 <tcp_input+0x758>)
 800b54e:	2200      	movs	r2, #0
 800b550:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b552:	69f8      	ldr	r0, [r7, #28]
 800b554:	f000 f900 	bl	800b758 <tcp_input_delayed_close>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 8090 	bne.w	800b680 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b560:	4b72      	ldr	r3, [pc, #456]	; (800b72c <tcp_input+0x75c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d041      	beq.n	800b5ec <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d006      	beq.n	800b57e <tcp_input+0x5ae>
 800b570:	4b6f      	ldr	r3, [pc, #444]	; (800b730 <tcp_input+0x760>)
 800b572:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b576:	496f      	ldr	r1, [pc, #444]	; (800b734 <tcp_input+0x764>)
 800b578:	486f      	ldr	r0, [pc, #444]	; (800b738 <tcp_input+0x768>)
 800b57a:	f00b fd47 	bl	801700c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	7e9b      	ldrb	r3, [r3, #26]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	2b00      	cmp	r3, #0
 800b588:	d008      	beq.n	800b59c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b58a:	4b68      	ldr	r3, [pc, #416]	; (800b72c <tcp_input+0x75c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fd fe7e 	bl	8009290 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b594:	69f8      	ldr	r0, [r7, #28]
 800b596:	f7fe fb7d 	bl	8009c94 <tcp_abort>
            goto aborted;
 800b59a:	e078      	b.n	800b68e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00c      	beq.n	800b5c0 <tcp_input+0x5f0>
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	6918      	ldr	r0, [r3, #16]
 800b5b0:	4b5e      	ldr	r3, [pc, #376]	; (800b72c <tcp_input+0x75c>)
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	69f9      	ldr	r1, [r7, #28]
 800b5b8:	47a0      	blx	r4
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	74fb      	strb	r3, [r7, #19]
 800b5be:	e008      	b.n	800b5d2 <tcp_input+0x602>
 800b5c0:	4b5a      	ldr	r3, [pc, #360]	; (800b72c <tcp_input+0x75c>)
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	69f9      	ldr	r1, [r7, #28]
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	f7ff f98b 	bl	800a8e4 <tcp_recv_null>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b5d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5d6:	f113 0f0d 	cmn.w	r3, #13
 800b5da:	d053      	beq.n	800b684 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b5dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d003      	beq.n	800b5ec <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b5e4:	4b51      	ldr	r3, [pc, #324]	; (800b72c <tcp_input+0x75c>)
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b5ec:	4b4c      	ldr	r3, [pc, #304]	; (800b720 <tcp_input+0x750>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	f003 0320 	and.w	r3, r3, #32
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d030      	beq.n	800b65a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d009      	beq.n	800b614 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b604:	7b5a      	ldrb	r2, [r3, #13]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60a:	f042 0220 	orr.w	r2, r2, #32
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	735a      	strb	r2, [r3, #13]
 800b612:	e022      	b.n	800b65a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b618:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b61c:	d005      	beq.n	800b62a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b622:	3301      	adds	r3, #1
 800b624:	b29a      	uxth	r2, r3
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00b      	beq.n	800b64c <tcp_input+0x67c>
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	6918      	ldr	r0, [r3, #16]
 800b63e:	2300      	movs	r3, #0
 800b640:	2200      	movs	r2, #0
 800b642:	69f9      	ldr	r1, [r7, #28]
 800b644:	47a0      	blx	r4
 800b646:	4603      	mov	r3, r0
 800b648:	74fb      	strb	r3, [r7, #19]
 800b64a:	e001      	b.n	800b650 <tcp_input+0x680>
 800b64c:	2300      	movs	r3, #0
 800b64e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b654:	f113 0f0d 	cmn.w	r3, #13
 800b658:	d016      	beq.n	800b688 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b65a:	4b30      	ldr	r3, [pc, #192]	; (800b71c <tcp_input+0x74c>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b660:	69f8      	ldr	r0, [r7, #28]
 800b662:	f000 f879 	bl	800b758 <tcp_input_delayed_close>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10f      	bne.n	800b68c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b66c:	69f8      	ldr	r0, [r7, #28]
 800b66e:	f002 fd95 	bl	800e19c <tcp_output>
 800b672:	e00c      	b.n	800b68e <tcp_input+0x6be>
        goto aborted;
 800b674:	bf00      	nop
 800b676:	e00a      	b.n	800b68e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b678:	bf00      	nop
 800b67a:	e008      	b.n	800b68e <tcp_input+0x6be>
              goto aborted;
 800b67c:	bf00      	nop
 800b67e:	e006      	b.n	800b68e <tcp_input+0x6be>
          goto aborted;
 800b680:	bf00      	nop
 800b682:	e004      	b.n	800b68e <tcp_input+0x6be>
            goto aborted;
 800b684:	bf00      	nop
 800b686:	e002      	b.n	800b68e <tcp_input+0x6be>
              goto aborted;
 800b688:	bf00      	nop
 800b68a:	e000      	b.n	800b68e <tcp_input+0x6be>
          goto aborted;
 800b68c:	bf00      	nop
    tcp_input_pcb = NULL;
 800b68e:	4b23      	ldr	r3, [pc, #140]	; (800b71c <tcp_input+0x74c>)
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b694:	4b25      	ldr	r3, [pc, #148]	; (800b72c <tcp_input+0x75c>)
 800b696:	2200      	movs	r2, #0
 800b698:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800b69a:	4b28      	ldr	r3, [pc, #160]	; (800b73c <tcp_input+0x76c>)
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d037      	beq.n	800b712 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800b6a2:	4b26      	ldr	r3, [pc, #152]	; (800b73c <tcp_input+0x76c>)
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fd fdf2 	bl	8009290 <pbuf_free>
      inseg.p = NULL;
 800b6ac:	4b23      	ldr	r3, [pc, #140]	; (800b73c <tcp_input+0x76c>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b6b2:	e02e      	b.n	800b712 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b6b4:	4b22      	ldr	r3, [pc, #136]	; (800b740 <tcp_input+0x770>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	899b      	ldrh	r3, [r3, #12]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fc fcbb 	bl	8008038 <lwip_htons>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d115      	bne.n	800b6f8 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6cc:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <tcp_input+0x774>)
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	4b1d      	ldr	r3, [pc, #116]	; (800b748 <tcp_input+0x778>)
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	4b1d      	ldr	r3, [pc, #116]	; (800b74c <tcp_input+0x77c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6dc:	4b18      	ldr	r3, [pc, #96]	; (800b740 <tcp_input+0x770>)
 800b6de:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6e0:	885b      	ldrh	r3, [r3, #2]
 800b6e2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6e4:	4a16      	ldr	r2, [pc, #88]	; (800b740 <tcp_input+0x770>)
 800b6e6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6e8:	8812      	ldrh	r2, [r2, #0]
 800b6ea:	b292      	uxth	r2, r2
 800b6ec:	9201      	str	r2, [sp, #4]
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	4b17      	ldr	r3, [pc, #92]	; (800b750 <tcp_input+0x780>)
 800b6f2:	4a18      	ldr	r2, [pc, #96]	; (800b754 <tcp_input+0x784>)
 800b6f4:	f002 ffdc 	bl	800e6b0 <tcp_rst>
    pbuf_free(p);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7fd fdc9 	bl	8009290 <pbuf_free>
  return;
 800b6fe:	e008      	b.n	800b712 <tcp_input+0x742>
    goto dropped;
 800b700:	bf00      	nop
 800b702:	e002      	b.n	800b70a <tcp_input+0x73a>
dropped:
 800b704:	bf00      	nop
 800b706:	e000      	b.n	800b70a <tcp_input+0x73a>
      goto dropped;
 800b708:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7fd fdc0 	bl	8009290 <pbuf_free>
 800b710:	e000      	b.n	800b714 <tcp_input+0x744>
  return;
 800b712:	bf00      	nop
}
 800b714:	3724      	adds	r7, #36	; 0x24
 800b716:	46bd      	mov	sp, r7
 800b718:	bd90      	pop	{r4, r7, pc}
 800b71a:	bf00      	nop
 800b71c:	20003960 	.word	0x20003960
 800b720:	20000275 	.word	0x20000275
 800b724:	2000394c 	.word	0x2000394c
 800b728:	20000270 	.word	0x20000270
 800b72c:	20000278 	.word	0x20000278
 800b730:	08019ba0 	.word	0x08019ba0
 800b734:	08019d3c 	.word	0x08019d3c
 800b738:	08019be4 	.word	0x08019be4
 800b73c:	20000248 	.word	0x20000248
 800b740:	20000258 	.word	0x20000258
 800b744:	2000026c 	.word	0x2000026c
 800b748:	20000272 	.word	0x20000272
 800b74c:	20000268 	.word	0x20000268
 800b750:	2000040c 	.word	0x2000040c
 800b754:	20000410 	.word	0x20000410

0800b758 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800b760:	4b14      	ldr	r3, [pc, #80]	; (800b7b4 <tcp_input_delayed_close+0x5c>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	f003 0310 	and.w	r3, r3, #16
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d01d      	beq.n	800b7a8 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7e9b      	ldrb	r3, [r3, #26]
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10d      	bne.n	800b794 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d008      	beq.n	800b794 <tcp_input_delayed_close+0x3c>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	6912      	ldr	r2, [r2, #16]
 800b78c:	f06f 010e 	mvn.w	r1, #14
 800b790:	4610      	mov	r0, r2
 800b792:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b794:	6879      	ldr	r1, [r7, #4]
 800b796:	4808      	ldr	r0, [pc, #32]	; (800b7b8 <tcp_input_delayed_close+0x60>)
 800b798:	f7ff fb00 	bl	800ad9c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800b79c:	6879      	ldr	r1, [r7, #4]
 800b79e:	2001      	movs	r0, #1
 800b7a0:	f7fd f844 	bl	800882c <memp_free>
    return 1;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e000      	b.n	800b7aa <tcp_input_delayed_close+0x52>
  }
  return 0;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20000275 	.word	0x20000275
 800b7b8:	2000394c 	.word	0x2000394c

0800b7bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af02      	add	r7, sp, #8
 800b7c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b7c4:	4b64      	ldr	r3, [pc, #400]	; (800b958 <tcp_listen_input+0x19c>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	f003 0304 	and.w	r3, r3, #4
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f040 80bc 	bne.w	800b94a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b7d2:	4b61      	ldr	r3, [pc, #388]	; (800b958 <tcp_listen_input+0x19c>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	f003 0310 	and.w	r3, r3, #16
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d016      	beq.n	800b80c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7de:	4b5f      	ldr	r3, [pc, #380]	; (800b95c <tcp_listen_input+0x1a0>)
 800b7e0:	6818      	ldr	r0, [r3, #0]
 800b7e2:	4b5f      	ldr	r3, [pc, #380]	; (800b960 <tcp_listen_input+0x1a4>)
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	4b5e      	ldr	r3, [pc, #376]	; (800b964 <tcp_listen_input+0x1a8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7ee:	4b5e      	ldr	r3, [pc, #376]	; (800b968 <tcp_listen_input+0x1ac>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7f2:	885b      	ldrh	r3, [r3, #2]
 800b7f4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7f6:	4a5c      	ldr	r2, [pc, #368]	; (800b968 <tcp_listen_input+0x1ac>)
 800b7f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7fa:	8812      	ldrh	r2, [r2, #0]
 800b7fc:	b292      	uxth	r2, r2
 800b7fe:	9201      	str	r2, [sp, #4]
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	4b5a      	ldr	r3, [pc, #360]	; (800b96c <tcp_listen_input+0x1b0>)
 800b804:	4a5a      	ldr	r2, [pc, #360]	; (800b970 <tcp_listen_input+0x1b4>)
 800b806:	f002 ff53 	bl	800e6b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b80a:	e0a0      	b.n	800b94e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800b80c:	4b52      	ldr	r3, [pc, #328]	; (800b958 <tcp_listen_input+0x19c>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	f003 0302 	and.w	r3, r3, #2
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 809a 	beq.w	800b94e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	7d5b      	ldrb	r3, [r3, #21]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff f93e 	bl	800aaa0 <tcp_alloc>
 800b824:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d111      	bne.n	800b850 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00a      	beq.n	800b84a <tcp_listen_input+0x8e>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	6910      	ldr	r0, [r2, #16]
 800b83c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b840:	2100      	movs	r1, #0
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	73bb      	strb	r3, [r7, #14]
      return;
 800b848:	e082      	b.n	800b950 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b84a:	23f0      	movs	r3, #240	; 0xf0
 800b84c:	73bb      	strb	r3, [r7, #14]
      return;
 800b84e:	e07f      	b.n	800b950 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b850:	4b48      	ldr	r3, [pc, #288]	; (800b974 <tcp_listen_input+0x1b8>)
 800b852:	695a      	ldr	r2, [r3, #20]
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b858:	4b46      	ldr	r3, [pc, #280]	; (800b974 <tcp_listen_input+0x1b8>)
 800b85a:	691a      	ldr	r2, [r3, #16]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	8ada      	ldrh	r2, [r3, #22]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b868:	4b3f      	ldr	r3, [pc, #252]	; (800b968 <tcp_listen_input+0x1ac>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	b29a      	uxth	r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2203      	movs	r2, #3
 800b878:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b87a:	4b3a      	ldr	r3, [pc, #232]	; (800b964 <tcp_listen_input+0x1a8>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b88c:	6978      	ldr	r0, [r7, #20]
 800b88e:	f7ff fb01 	bl	800ae94 <tcp_next_iss>
 800b892:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b8ac:	4b2d      	ldr	r3, [pc, #180]	; (800b964 <tcp_listen_input+0x1a8>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	1e5a      	subs	r2, r3, #1
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	691a      	ldr	r2, [r3, #16]
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	7a1b      	ldrb	r3, [r3, #8]
 800b8c8:	f003 030c 	and.w	r3, r3, #12
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b8d2:	4b29      	ldr	r3, [pc, #164]	; (800b978 <tcp_listen_input+0x1bc>)
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	60da      	str	r2, [r3, #12]
 800b8da:	4a27      	ldr	r2, [pc, #156]	; (800b978 <tcp_listen_input+0x1bc>)
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	f003 f936 	bl	800eb50 <tcp_timer_needed>
 800b8e4:	4b25      	ldr	r3, [pc, #148]	; (800b97c <tcp_listen_input+0x1c0>)
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b8ea:	6978      	ldr	r0, [r7, #20]
 800b8ec:	f001 fd14 	bl	800d318 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b8f0:	4b1d      	ldr	r3, [pc, #116]	; (800b968 <tcp_listen_input+0x1ac>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	89db      	ldrh	r3, [r3, #14]
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	3304      	adds	r3, #4
 800b912:	4619      	mov	r1, r3
 800b914:	4610      	mov	r0, r2
 800b916:	f7ff fad5 	bl	800aec4 <tcp_eff_send_mss_impl>
 800b91a:	4603      	mov	r3, r0
 800b91c:	461a      	mov	r2, r3
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b922:	2112      	movs	r1, #18
 800b924:	6978      	ldr	r0, [r7, #20]
 800b926:	f002 fae1 	bl	800deec <tcp_enqueue_flags>
 800b92a:	4603      	mov	r3, r0
 800b92c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800b936:	2100      	movs	r1, #0
 800b938:	6978      	ldr	r0, [r7, #20]
 800b93a:	f7fe f8f9 	bl	8009b30 <tcp_abandon>
      return;
 800b93e:	e007      	b.n	800b950 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800b940:	6978      	ldr	r0, [r7, #20]
 800b942:	f002 fc2b 	bl	800e19c <tcp_output>
  return;
 800b946:	bf00      	nop
 800b948:	e001      	b.n	800b94e <tcp_listen_input+0x192>
    return;
 800b94a:	bf00      	nop
 800b94c:	e000      	b.n	800b950 <tcp_listen_input+0x194>
  return;
 800b94e:	bf00      	nop
}
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20000274 	.word	0x20000274
 800b95c:	2000026c 	.word	0x2000026c
 800b960:	20000272 	.word	0x20000272
 800b964:	20000268 	.word	0x20000268
 800b968:	20000258 	.word	0x20000258
 800b96c:	2000040c 	.word	0x2000040c
 800b970:	20000410 	.word	0x20000410
 800b974:	200003fc 	.word	0x200003fc
 800b978:	2000394c 	.word	0x2000394c
 800b97c:	20003948 	.word	0x20003948

0800b980 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af02      	add	r7, sp, #8
 800b986:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b988:	4b29      	ldr	r3, [pc, #164]	; (800ba30 <tcp_timewait_input+0xb0>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d147      	bne.n	800ba24 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b994:	4b26      	ldr	r3, [pc, #152]	; (800ba30 <tcp_timewait_input+0xb0>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	f003 0302 	and.w	r3, r3, #2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d027      	beq.n	800b9f0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b9a0:	4b24      	ldr	r3, [pc, #144]	; (800ba34 <tcp_timewait_input+0xb4>)
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	db2a      	blt.n	800ba04 <tcp_timewait_input+0x84>
 800b9ae:	4b21      	ldr	r3, [pc, #132]	; (800ba34 <tcp_timewait_input+0xb4>)
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9ba:	440b      	add	r3, r1
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	dc20      	bgt.n	800ba04 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ba38 <tcp_timewait_input+0xb8>)
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	4b1d      	ldr	r3, [pc, #116]	; (800ba3c <tcp_timewait_input+0xbc>)
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4b19      	ldr	r3, [pc, #100]	; (800ba34 <tcp_timewait_input+0xb4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ba40 <tcp_timewait_input+0xc0>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9d6:	885b      	ldrh	r3, [r3, #2]
 800b9d8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9da:	4a19      	ldr	r2, [pc, #100]	; (800ba40 <tcp_timewait_input+0xc0>)
 800b9dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9de:	8812      	ldrh	r2, [r2, #0]
 800b9e0:	b292      	uxth	r2, r2
 800b9e2:	9201      	str	r2, [sp, #4]
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <tcp_timewait_input+0xc4>)
 800b9e8:	4a17      	ldr	r2, [pc, #92]	; (800ba48 <tcp_timewait_input+0xc8>)
 800b9ea:	f002 fe61 	bl	800e6b0 <tcp_rst>
      return;
 800b9ee:	e01c      	b.n	800ba2a <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <tcp_timewait_input+0xb0>)
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b9fc:	4b13      	ldr	r3, [pc, #76]	; (800ba4c <tcp_timewait_input+0xcc>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ba04:	4b0d      	ldr	r3, [pc, #52]	; (800ba3c <tcp_timewait_input+0xbc>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00d      	beq.n	800ba28 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	7e9b      	ldrb	r3, [r3, #26]
 800ba10:	f043 0302 	orr.w	r3, r3, #2
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f002 fbbe 	bl	800e19c <tcp_output>
  }
  return;
 800ba20:	bf00      	nop
 800ba22:	e001      	b.n	800ba28 <tcp_timewait_input+0xa8>
    return;
 800ba24:	bf00      	nop
 800ba26:	e000      	b.n	800ba2a <tcp_timewait_input+0xaa>
  return;
 800ba28:	bf00      	nop
}
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	20000274 	.word	0x20000274
 800ba34:	20000268 	.word	0x20000268
 800ba38:	2000026c 	.word	0x2000026c
 800ba3c:	20000272 	.word	0x20000272
 800ba40:	20000258 	.word	0x20000258
 800ba44:	2000040c 	.word	0x2000040c
 800ba48:	20000410 	.word	0x20000410
 800ba4c:	20003950 	.word	0x20003950

0800ba50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08a      	sub	sp, #40	; 0x28
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ba60:	4ba4      	ldr	r3, [pc, #656]	; (800bcf4 <tcp_process+0x2a4>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d04e      	beq.n	800bb0a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	7d1b      	ldrb	r3, [r3, #20]
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d108      	bne.n	800ba86 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba78:	4b9f      	ldr	r3, [pc, #636]	; (800bcf8 <tcp_process+0x2a8>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d123      	bne.n	800bac8 <tcp_process+0x78>
        acceptable = 1;
 800ba80:	2301      	movs	r3, #1
 800ba82:	76fb      	strb	r3, [r7, #27]
 800ba84:	e020      	b.n	800bac8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba8a:	4b9c      	ldr	r3, [pc, #624]	; (800bcfc <tcp_process+0x2ac>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d102      	bne.n	800ba98 <tcp_process+0x48>
        acceptable = 1;
 800ba92:	2301      	movs	r3, #1
 800ba94:	76fb      	strb	r3, [r7, #27]
 800ba96:	e017      	b.n	800bac8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ba98:	4b98      	ldr	r3, [pc, #608]	; (800bcfc <tcp_process+0x2ac>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	db10      	blt.n	800bac8 <tcp_process+0x78>
 800baa6:	4b95      	ldr	r3, [pc, #596]	; (800bcfc <tcp_process+0x2ac>)
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	6879      	ldr	r1, [r7, #4]
 800bab0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bab2:	440b      	add	r3, r1
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dc06      	bgt.n	800bac8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	7e9b      	ldrb	r3, [r3, #26]
 800babe:	f043 0302 	orr.w	r3, r3, #2
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bac8:	7efb      	ldrb	r3, [r7, #27]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d01b      	beq.n	800bb06 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	7d1b      	ldrb	r3, [r3, #20]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d106      	bne.n	800bae4 <tcp_process+0x94>
 800bad6:	4b8a      	ldr	r3, [pc, #552]	; (800bd00 <tcp_process+0x2b0>)
 800bad8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800badc:	4989      	ldr	r1, [pc, #548]	; (800bd04 <tcp_process+0x2b4>)
 800bade:	488a      	ldr	r0, [pc, #552]	; (800bd08 <tcp_process+0x2b8>)
 800bae0:	f00b fa94 	bl	801700c <iprintf>
      recv_flags |= TF_RESET;
 800bae4:	4b89      	ldr	r3, [pc, #548]	; (800bd0c <tcp_process+0x2bc>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f043 0308 	orr.w	r3, r3, #8
 800baec:	b2da      	uxtb	r2, r3
 800baee:	4b87      	ldr	r3, [pc, #540]	; (800bd0c <tcp_process+0x2bc>)
 800baf0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	7e9b      	ldrb	r3, [r3, #26]
 800baf6:	f023 0301 	bic.w	r3, r3, #1
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800bb00:	f06f 030d 	mvn.w	r3, #13
 800bb04:	e34d      	b.n	800c1a2 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e34b      	b.n	800c1a2 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bb0a:	4b7a      	ldr	r3, [pc, #488]	; (800bcf4 <tcp_process+0x2a4>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	f003 0302 	and.w	r3, r3, #2
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d010      	beq.n	800bb38 <tcp_process+0xe8>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	7d1b      	ldrb	r3, [r3, #20]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d00c      	beq.n	800bb38 <tcp_process+0xe8>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	7d1b      	ldrb	r3, [r3, #20]
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d008      	beq.n	800bb38 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	7e9b      	ldrb	r3, [r3, #26]
 800bb2a:	f043 0302 	orr.w	r3, r3, #2
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	e334      	b.n	800c1a2 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	7e9b      	ldrb	r3, [r3, #26]
 800bb3c:	f003 0310 	and.w	r3, r3, #16
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d103      	bne.n	800bb4c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bb44:	4b72      	ldr	r3, [pc, #456]	; (800bd10 <tcp_process+0x2c0>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f001 fbdf 	bl	800d318 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	3b02      	subs	r3, #2
 800bb60:	2b07      	cmp	r3, #7
 800bb62:	f200 830e 	bhi.w	800c182 <tcp_process+0x732>
 800bb66:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <tcp_process+0x11c>)
 800bb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6c:	0800bb8d 	.word	0x0800bb8d
 800bb70:	0800bd85 	.word	0x0800bd85
 800bb74:	0800bedd 	.word	0x0800bedd
 800bb78:	0800bf07 	.word	0x0800bf07
 800bb7c:	0800c031 	.word	0x0800c031
 800bb80:	0800bedd 	.word	0x0800bedd
 800bb84:	0800c0bd 	.word	0x0800c0bd
 800bb88:	0800c14d 	.word	0x0800c14d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bb8c:	4b59      	ldr	r3, [pc, #356]	; (800bcf4 <tcp_process+0x2a4>)
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	f003 0310 	and.w	r3, r3, #16
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 80cb 	beq.w	800bd30 <tcp_process+0x2e0>
 800bb9a:	4b56      	ldr	r3, [pc, #344]	; (800bcf4 <tcp_process+0x2a4>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 80c4 	beq.w	800bd30 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbac:	1c5a      	adds	r2, r3, #1
 800bbae:	4b52      	ldr	r3, [pc, #328]	; (800bcf8 <tcp_process+0x2a8>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	f040 80bc 	bne.w	800bd30 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800bbb8:	4b50      	ldr	r3, [pc, #320]	; (800bcfc <tcp_process+0x2ac>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	1c5a      	adds	r2, r3, #1
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800bbca:	4b4b      	ldr	r3, [pc, #300]	; (800bcf8 <tcp_process+0x2a8>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800bbd2:	4b50      	ldr	r3, [pc, #320]	; (800bd14 <tcp_process+0x2c4>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	89db      	ldrh	r3, [r3, #14]
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bbec:	4b43      	ldr	r3, [pc, #268]	; (800bcfc <tcp_process+0x2ac>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	1e5a      	subs	r2, r3, #1
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2204      	movs	r2, #4
 800bbfa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3304      	adds	r3, #4
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	f7ff f95c 	bl	800aec4 <tcp_eff_send_mss_impl>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	461a      	mov	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	f241 121c 	movw	r2, #4380	; 0x111c
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	bf38      	it	cc
 800bc22:	461a      	movcc	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bf28      	it	cs
 800bc2e:	4613      	movcs	r3, r2
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d106      	bne.n	800bc50 <tcp_process+0x200>
 800bc42:	4b2f      	ldr	r3, [pc, #188]	; (800bd00 <tcp_process+0x2b0>)
 800bc44:	f240 321a 	movw	r2, #794	; 0x31a
 800bc48:	4933      	ldr	r1, [pc, #204]	; (800bd18 <tcp_process+0x2c8>)
 800bc4a:	482f      	ldr	r0, [pc, #188]	; (800bd08 <tcp_process+0x2b8>)
 800bc4c:	f00b f9de 	bl	801700c <iprintf>
      --pcb->snd_queuelen;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc56:	3b01      	subs	r3, #1
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc64:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d111      	bne.n	800bc90 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc70:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d106      	bne.n	800bc86 <tcp_process+0x236>
 800bc78:	4b21      	ldr	r3, [pc, #132]	; (800bd00 <tcp_process+0x2b0>)
 800bc7a:	f240 3222 	movw	r2, #802	; 0x322
 800bc7e:	4927      	ldr	r1, [pc, #156]	; (800bd1c <tcp_process+0x2cc>)
 800bc80:	4821      	ldr	r0, [pc, #132]	; (800bd08 <tcp_process+0x2b8>)
 800bc82:	f00b f9c3 	bl	801700c <iprintf>
        pcb->unsent = rseg->next;
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	669a      	str	r2, [r3, #104]	; 0x68
 800bc8e:	e003      	b.n	800bc98 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800bc98:	69f8      	ldr	r0, [r7, #28]
 800bc9a:	f7fe fde0 	bl	800a85e <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d104      	bne.n	800bcb0 <tcp_process+0x260>
        pcb->rtime = -1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcac:	861a      	strh	r2, [r3, #48]	; 0x30
 800bcae:	e006      	b.n	800bcbe <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00a      	beq.n	800bcde <tcp_process+0x28e>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	6910      	ldr	r0, [r2, #16]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	6879      	ldr	r1, [r7, #4]
 800bcd6:	4798      	blx	r3
 800bcd8:	4603      	mov	r3, r0
 800bcda:	76bb      	strb	r3, [r7, #26]
 800bcdc:	e001      	b.n	800bce2 <tcp_process+0x292>
 800bcde:	2300      	movs	r3, #0
 800bce0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800bce2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bce6:	f113 0f0d 	cmn.w	r3, #13
 800bcea:	d119      	bne.n	800bd20 <tcp_process+0x2d0>
        return ERR_ABRT;
 800bcec:	f06f 030c 	mvn.w	r3, #12
 800bcf0:	e257      	b.n	800c1a2 <tcp_process+0x752>
 800bcf2:	bf00      	nop
 800bcf4:	20000274 	.word	0x20000274
 800bcf8:	2000026c 	.word	0x2000026c
 800bcfc:	20000268 	.word	0x20000268
 800bd00:	08019ba0 	.word	0x08019ba0
 800bd04:	08019d58 	.word	0x08019d58
 800bd08:	08019be4 	.word	0x08019be4
 800bd0c:	20000275 	.word	0x20000275
 800bd10:	20003950 	.word	0x20003950
 800bd14:	20000258 	.word	0x20000258
 800bd18:	08019d78 	.word	0x08019d78
 800bd1c:	08019d90 	.word	0x08019d90
      }
      tcp_ack_now(pcb);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	7e9b      	ldrb	r3, [r3, #26]
 800bd24:	f043 0302 	orr.w	r3, r3, #2
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800bd2e:	e22a      	b.n	800c186 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800bd30:	4b9f      	ldr	r3, [pc, #636]	; (800bfb0 <tcp_process+0x560>)
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	f003 0310 	and.w	r3, r3, #16
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 8224 	beq.w	800c186 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd3e:	4b9d      	ldr	r3, [pc, #628]	; (800bfb4 <tcp_process+0x564>)
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	4b9d      	ldr	r3, [pc, #628]	; (800bfb8 <tcp_process+0x568>)
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	4b9c      	ldr	r3, [pc, #624]	; (800bfbc <tcp_process+0x56c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd4e:	4b9c      	ldr	r3, [pc, #624]	; (800bfc0 <tcp_process+0x570>)
 800bd50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd52:	885b      	ldrh	r3, [r3, #2]
 800bd54:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd56:	4a9a      	ldr	r2, [pc, #616]	; (800bfc0 <tcp_process+0x570>)
 800bd58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd5a:	8812      	ldrh	r2, [r2, #0]
 800bd5c:	b292      	uxth	r2, r2
 800bd5e:	9201      	str	r2, [sp, #4]
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	4b98      	ldr	r3, [pc, #608]	; (800bfc4 <tcp_process+0x574>)
 800bd64:	4a98      	ldr	r2, [pc, #608]	; (800bfc8 <tcp_process+0x578>)
 800bd66:	f002 fca3 	bl	800e6b0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd70:	2b05      	cmp	r3, #5
 800bd72:	f200 8208 	bhi.w	800c186 <tcp_process+0x736>
        pcb->rtime = 0;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f002 fd0d 	bl	800e79c <tcp_rexmit_rto>
    break;
 800bd82:	e200      	b.n	800c186 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800bd84:	4b8a      	ldr	r3, [pc, #552]	; (800bfb0 <tcp_process+0x560>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	f003 0310 	and.w	r3, r3, #16
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8091 	beq.w	800beb4 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800bd92:	4b88      	ldr	r3, [pc, #544]	; (800bfb4 <tcp_process+0x564>)
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	db71      	blt.n	800be86 <tcp_process+0x436>
 800bda2:	4b84      	ldr	r3, [pc, #528]	; (800bfb4 <tcp_process+0x564>)
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	dc6a      	bgt.n	800be86 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2204      	movs	r2, #4
 800bdb4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00b      	beq.n	800bdd6 <tcp_process+0x386>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d106      	bne.n	800bdd6 <tcp_process+0x386>
 800bdc8:	4b80      	ldr	r3, [pc, #512]	; (800bfcc <tcp_process+0x57c>)
 800bdca:	f240 3251 	movw	r2, #849	; 0x351
 800bdce:	4980      	ldr	r1, [pc, #512]	; (800bfd0 <tcp_process+0x580>)
 800bdd0:	4880      	ldr	r0, [pc, #512]	; (800bfd4 <tcp_process+0x584>)
 800bdd2:	f00b f91b 	bl	801700c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d102      	bne.n	800bde4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800bdde:	23fa      	movs	r3, #250	; 0xfa
 800bde0:	76bb      	strb	r3, [r7, #26]
 800bde2:	e011      	b.n	800be08 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <tcp_process+0x3b4>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	6910      	ldr	r0, [r2, #16]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	4798      	blx	r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	76bb      	strb	r3, [r7, #26]
 800be02:	e001      	b.n	800be08 <tcp_process+0x3b8>
 800be04:	23f0      	movs	r3, #240	; 0xf0
 800be06:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800be08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00a      	beq.n	800be26 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800be10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800be14:	f113 0f0d 	cmn.w	r3, #13
 800be18:	d002      	beq.n	800be20 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7fd ff3a 	bl	8009c94 <tcp_abort>
          }
          return ERR_ABRT;
 800be20:	f06f 030c 	mvn.w	r3, #12
 800be24:	e1bd      	b.n	800c1a2 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fa42 	bl	800c2b0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800be2c:	4b6a      	ldr	r3, [pc, #424]	; (800bfd8 <tcp_process+0x588>)
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <tcp_process+0x3f0>
          recv_acked--;
 800be34:	4b68      	ldr	r3, [pc, #416]	; (800bfd8 <tcp_process+0x588>)
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	3b01      	subs	r3, #1
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	4b66      	ldr	r3, [pc, #408]	; (800bfd8 <tcp_process+0x588>)
 800be3e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	f241 121c 	movw	r2, #4380	; 0x111c
 800be4a:	429a      	cmp	r2, r3
 800be4c:	bf38      	it	cc
 800be4e:	461a      	movcc	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4293      	cmp	r3, r2
 800be58:	bf28      	it	cs
 800be5a:	4613      	movcs	r3, r2
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800be64:	4b5d      	ldr	r3, [pc, #372]	; (800bfdc <tcp_process+0x58c>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f003 0320 	and.w	r3, r3, #32
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d034      	beq.n	800beda <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7e9b      	ldrb	r3, [r3, #26]
 800be74:	f043 0302 	orr.w	r3, r3, #2
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2207      	movs	r2, #7
 800be82:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800be84:	e029      	b.n	800beda <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be86:	4b4b      	ldr	r3, [pc, #300]	; (800bfb4 <tcp_process+0x564>)
 800be88:	6818      	ldr	r0, [r3, #0]
 800be8a:	4b4b      	ldr	r3, [pc, #300]	; (800bfb8 <tcp_process+0x568>)
 800be8c:	881b      	ldrh	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	4b4a      	ldr	r3, [pc, #296]	; (800bfbc <tcp_process+0x56c>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be96:	4b4a      	ldr	r3, [pc, #296]	; (800bfc0 <tcp_process+0x570>)
 800be98:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be9a:	885b      	ldrh	r3, [r3, #2]
 800be9c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be9e:	4a48      	ldr	r2, [pc, #288]	; (800bfc0 <tcp_process+0x570>)
 800bea0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bea2:	8812      	ldrh	r2, [r2, #0]
 800bea4:	b292      	uxth	r2, r2
 800bea6:	9201      	str	r2, [sp, #4]
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	4b46      	ldr	r3, [pc, #280]	; (800bfc4 <tcp_process+0x574>)
 800beac:	4a46      	ldr	r2, [pc, #280]	; (800bfc8 <tcp_process+0x578>)
 800beae:	f002 fbff 	bl	800e6b0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800beb2:	e16a      	b.n	800c18a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800beb4:	4b3e      	ldr	r3, [pc, #248]	; (800bfb0 <tcp_process+0x560>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	f003 0302 	and.w	r3, r3, #2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 8164 	beq.w	800c18a <tcp_process+0x73a>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	1e5a      	subs	r2, r3, #1
 800bec8:	4b3c      	ldr	r3, [pc, #240]	; (800bfbc <tcp_process+0x56c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	f040 815c 	bne.w	800c18a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f002 fc98 	bl	800e808 <tcp_rexmit>
    break;
 800bed8:	e157      	b.n	800c18a <tcp_process+0x73a>
 800beda:	e156      	b.n	800c18a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f9e7 	bl	800c2b0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bee2:	4b3e      	ldr	r3, [pc, #248]	; (800bfdc <tcp_process+0x58c>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 814f 	beq.w	800c18e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	7e9b      	ldrb	r3, [r3, #26]
 800bef4:	f043 0302 	orr.w	r3, r3, #2
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2207      	movs	r2, #7
 800bf02:	751a      	strb	r2, [r3, #20]
    }
    break;
 800bf04:	e143      	b.n	800c18e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f9d2 	bl	800c2b0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800bf0c:	4b33      	ldr	r3, [pc, #204]	; (800bfdc <tcp_process+0x58c>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	f003 0320 	and.w	r3, r3, #32
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d074      	beq.n	800c002 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf18:	4b25      	ldr	r3, [pc, #148]	; (800bfb0 <tcp_process+0x560>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	f003 0310 	and.w	r3, r3, #16
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d063      	beq.n	800bfec <tcp_process+0x59c>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf28:	4b22      	ldr	r3, [pc, #136]	; (800bfb4 <tcp_process+0x564>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d15d      	bne.n	800bfec <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d159      	bne.n	800bfec <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7e9b      	ldrb	r3, [r3, #26]
 800bf3c:	f043 0302 	orr.w	r3, r3, #2
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7fe fee6 	bl	800ad18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bf4c:	4b24      	ldr	r3, [pc, #144]	; (800bfe0 <tcp_process+0x590>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d105      	bne.n	800bf62 <tcp_process+0x512>
 800bf56:	4b22      	ldr	r3, [pc, #136]	; (800bfe0 <tcp_process+0x590>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	4a20      	ldr	r2, [pc, #128]	; (800bfe0 <tcp_process+0x590>)
 800bf5e:	6013      	str	r3, [r2, #0]
 800bf60:	e013      	b.n	800bf8a <tcp_process+0x53a>
 800bf62:	4b1f      	ldr	r3, [pc, #124]	; (800bfe0 <tcp_process+0x590>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	617b      	str	r3, [r7, #20]
 800bf68:	e00c      	b.n	800bf84 <tcp_process+0x534>
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d104      	bne.n	800bf7e <tcp_process+0x52e>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68da      	ldr	r2, [r3, #12]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	60da      	str	r2, [r3, #12]
 800bf7c:	e005      	b.n	800bf8a <tcp_process+0x53a>
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1ef      	bne.n	800bf6a <tcp_process+0x51a>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	60da      	str	r2, [r3, #12]
 800bf90:	4b14      	ldr	r3, [pc, #80]	; (800bfe4 <tcp_process+0x594>)
 800bf92:	2201      	movs	r2, #1
 800bf94:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	220a      	movs	r2, #10
 800bf9a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bf9c:	4b12      	ldr	r3, [pc, #72]	; (800bfe8 <tcp_process+0x598>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	60da      	str	r2, [r3, #12]
 800bfa4:	4a10      	ldr	r2, [pc, #64]	; (800bfe8 <tcp_process+0x598>)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6013      	str	r3, [r2, #0]
 800bfaa:	f002 fdd1 	bl	800eb50 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800bfae:	e0f0      	b.n	800c192 <tcp_process+0x742>
 800bfb0:	20000274 	.word	0x20000274
 800bfb4:	2000026c 	.word	0x2000026c
 800bfb8:	20000272 	.word	0x20000272
 800bfbc:	20000268 	.word	0x20000268
 800bfc0:	20000258 	.word	0x20000258
 800bfc4:	2000040c 	.word	0x2000040c
 800bfc8:	20000410 	.word	0x20000410
 800bfcc:	08019ba0 	.word	0x08019ba0
 800bfd0:	08019da4 	.word	0x08019da4
 800bfd4:	08019be4 	.word	0x08019be4
 800bfd8:	20000270 	.word	0x20000270
 800bfdc:	20000275 	.word	0x20000275
 800bfe0:	2000394c 	.word	0x2000394c
 800bfe4:	20003948 	.word	0x20003948
 800bfe8:	2000395c 	.word	0x2000395c
        tcp_ack_now(pcb);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	7e9b      	ldrb	r3, [r3, #26]
 800bff0:	f043 0302 	orr.w	r3, r3, #2
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2208      	movs	r2, #8
 800bffe:	751a      	strb	r2, [r3, #20]
    break;
 800c000:	e0c7      	b.n	800c192 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c002:	4b6a      	ldr	r3, [pc, #424]	; (800c1ac <tcp_process+0x75c>)
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	f003 0310 	and.w	r3, r3, #16
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 80c1 	beq.w	800c192 <tcp_process+0x742>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c014:	4b66      	ldr	r3, [pc, #408]	; (800c1b0 <tcp_process+0x760>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	f040 80ba 	bne.w	800c192 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c022:	2b00      	cmp	r3, #0
 800c024:	f040 80b5 	bne.w	800c192 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2206      	movs	r2, #6
 800c02c:	751a      	strb	r2, [r3, #20]
    break;
 800c02e:	e0b0      	b.n	800c192 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f93d 	bl	800c2b0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c036:	4b5f      	ldr	r3, [pc, #380]	; (800c1b4 <tcp_process+0x764>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 80a9 	beq.w	800c196 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7e9b      	ldrb	r3, [r3, #26]
 800c048:	f043 0302 	orr.w	r3, r3, #2
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7fe fe60 	bl	800ad18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c058:	4b57      	ldr	r3, [pc, #348]	; (800c1b8 <tcp_process+0x768>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d105      	bne.n	800c06e <tcp_process+0x61e>
 800c062:	4b55      	ldr	r3, [pc, #340]	; (800c1b8 <tcp_process+0x768>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	4a53      	ldr	r2, [pc, #332]	; (800c1b8 <tcp_process+0x768>)
 800c06a:	6013      	str	r3, [r2, #0]
 800c06c:	e013      	b.n	800c096 <tcp_process+0x646>
 800c06e:	4b52      	ldr	r3, [pc, #328]	; (800c1b8 <tcp_process+0x768>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	613b      	str	r3, [r7, #16]
 800c074:	e00c      	b.n	800c090 <tcp_process+0x640>
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d104      	bne.n	800c08a <tcp_process+0x63a>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	68da      	ldr	r2, [r3, #12]
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	60da      	str	r2, [r3, #12]
 800c088:	e005      	b.n	800c096 <tcp_process+0x646>
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	613b      	str	r3, [r7, #16]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1ef      	bne.n	800c076 <tcp_process+0x626>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	60da      	str	r2, [r3, #12]
 800c09c:	4b47      	ldr	r3, [pc, #284]	; (800c1bc <tcp_process+0x76c>)
 800c09e:	2201      	movs	r2, #1
 800c0a0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	220a      	movs	r2, #10
 800c0a6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c0a8:	4b45      	ldr	r3, [pc, #276]	; (800c1c0 <tcp_process+0x770>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	60da      	str	r2, [r3, #12]
 800c0b0:	4a43      	ldr	r2, [pc, #268]	; (800c1c0 <tcp_process+0x770>)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6013      	str	r3, [r2, #0]
 800c0b6:	f002 fd4b 	bl	800eb50 <tcp_timer_needed>
    }
    break;
 800c0ba:	e06c      	b.n	800c196 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f8f7 	bl	800c2b0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c0c2:	4b3a      	ldr	r3, [pc, #232]	; (800c1ac <tcp_process+0x75c>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	f003 0310 	and.w	r3, r3, #16
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d065      	beq.n	800c19a <tcp_process+0x74a>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0d2:	4b37      	ldr	r3, [pc, #220]	; (800c1b0 <tcp_process+0x760>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d15f      	bne.n	800c19a <tcp_process+0x74a>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d15b      	bne.n	800c19a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fe fe18 	bl	800ad18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c0e8:	4b33      	ldr	r3, [pc, #204]	; (800c1b8 <tcp_process+0x768>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d105      	bne.n	800c0fe <tcp_process+0x6ae>
 800c0f2:	4b31      	ldr	r3, [pc, #196]	; (800c1b8 <tcp_process+0x768>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	4a2f      	ldr	r2, [pc, #188]	; (800c1b8 <tcp_process+0x768>)
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	e013      	b.n	800c126 <tcp_process+0x6d6>
 800c0fe:	4b2e      	ldr	r3, [pc, #184]	; (800c1b8 <tcp_process+0x768>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e00c      	b.n	800c120 <tcp_process+0x6d0>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d104      	bne.n	800c11a <tcp_process+0x6ca>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	68da      	ldr	r2, [r3, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	60da      	str	r2, [r3, #12]
 800c118:	e005      	b.n	800c126 <tcp_process+0x6d6>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1ef      	bne.n	800c106 <tcp_process+0x6b6>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	60da      	str	r2, [r3, #12]
 800c12c:	4b23      	ldr	r3, [pc, #140]	; (800c1bc <tcp_process+0x76c>)
 800c12e:	2201      	movs	r2, #1
 800c130:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	220a      	movs	r2, #10
 800c136:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c138:	4b21      	ldr	r3, [pc, #132]	; (800c1c0 <tcp_process+0x770>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	60da      	str	r2, [r3, #12]
 800c140:	4a1f      	ldr	r2, [pc, #124]	; (800c1c0 <tcp_process+0x770>)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	f002 fd03 	bl	800eb50 <tcp_timer_needed>
    }
    break;
 800c14a:	e026      	b.n	800c19a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 f8af 	bl	800c2b0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c152:	4b16      	ldr	r3, [pc, #88]	; (800c1ac <tcp_process+0x75c>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	f003 0310 	and.w	r3, r3, #16
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d01f      	beq.n	800c19e <tcp_process+0x74e>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c162:	4b13      	ldr	r3, [pc, #76]	; (800c1b0 <tcp_process+0x760>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	429a      	cmp	r2, r3
 800c168:	d119      	bne.n	800c19e <tcp_process+0x74e>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d115      	bne.n	800c19e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800c172:	4b10      	ldr	r3, [pc, #64]	; (800c1b4 <tcp_process+0x764>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	f043 0310 	orr.w	r3, r3, #16
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	4b0d      	ldr	r3, [pc, #52]	; (800c1b4 <tcp_process+0x764>)
 800c17e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c180:	e00d      	b.n	800c19e <tcp_process+0x74e>
  default:
    break;
 800c182:	bf00      	nop
 800c184:	e00c      	b.n	800c1a0 <tcp_process+0x750>
    break;
 800c186:	bf00      	nop
 800c188:	e00a      	b.n	800c1a0 <tcp_process+0x750>
    break;
 800c18a:	bf00      	nop
 800c18c:	e008      	b.n	800c1a0 <tcp_process+0x750>
    break;
 800c18e:	bf00      	nop
 800c190:	e006      	b.n	800c1a0 <tcp_process+0x750>
    break;
 800c192:	bf00      	nop
 800c194:	e004      	b.n	800c1a0 <tcp_process+0x750>
    break;
 800c196:	bf00      	nop
 800c198:	e002      	b.n	800c1a0 <tcp_process+0x750>
    break;
 800c19a:	bf00      	nop
 800c19c:	e000      	b.n	800c1a0 <tcp_process+0x750>
    break;
 800c19e:	bf00      	nop
  }
  return ERR_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3720      	adds	r7, #32
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000274 	.word	0x20000274
 800c1b0:	2000026c 	.word	0x2000026c
 800c1b4:	20000275 	.word	0x20000275
 800c1b8:	2000394c 	.word	0x2000394c
 800c1bc:	20003948 	.word	0x20003948
 800c1c0:	2000395c 	.word	0x2000395c

0800c1c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	899b      	ldrh	r3, [r3, #12]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fb ff2e 	bl	8008038 <lwip_htons>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d027      	beq.n	800c236 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c1e6:	6838      	ldr	r0, [r7, #0]
 800c1e8:	f7fe fb25 	bl	800a836 <tcp_segs_free>
    next = NULL;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	603b      	str	r3, [r7, #0]
 800c1f0:	e055      	b.n	800c29e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	899b      	ldrh	r3, [r3, #12]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fb ff1c 	bl	8008038 <lwip_htons>
 800c200:	4603      	mov	r3, r0
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00d      	beq.n	800c226 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	899b      	ldrh	r3, [r3, #12]
 800c210:	b29c      	uxth	r4, r3
 800c212:	2001      	movs	r0, #1
 800c214:	f7fb ff10 	bl	8008038 <lwip_htons>
 800c218:	4603      	mov	r3, r0
 800c21a:	461a      	mov	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	4322      	orrs	r2, r4
 800c222:	b292      	uxth	r2, r2
 800c224:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7fe fb14 	bl	800a85e <tcp_seg_free>
    while (next &&
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00e      	beq.n	800c25a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	891b      	ldrh	r3, [r3, #8]
 800c240:	461a      	mov	r2, r3
 800c242:	4b1a      	ldr	r3, [pc, #104]	; (800c2ac <tcp_oos_insert_segment+0xe8>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	441a      	add	r2, r3
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	8909      	ldrh	r1, [r1, #8]
 800c252:	440b      	add	r3, r1
 800c254:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c256:	2b00      	cmp	r3, #0
 800c258:	dacb      	bge.n	800c1f2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d01e      	beq.n	800c29e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	891b      	ldrh	r3, [r3, #8]
 800c264:	461a      	mov	r2, r3
 800c266:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <tcp_oos_insert_segment+0xe8>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	441a      	add	r2, r3
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c274:	2b00      	cmp	r3, #0
 800c276:	dd12      	ble.n	800c29e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	b29a      	uxth	r2, r3
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <tcp_oos_insert_segment+0xe8>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	b29b      	uxth	r3, r3
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	b29a      	uxth	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	891b      	ldrh	r3, [r3, #8]
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f7fc fe85 	bl	8008fa8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	683a      	ldr	r2, [r7, #0]
 800c2a2:	601a      	str	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd90      	pop	{r4, r7, pc}
 800c2ac:	20000268 	.word	0x20000268

0800c2b0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b2:	b08d      	sub	sp, #52	; 0x34
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	7d1b      	ldrb	r3, [r3, #20]
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d806      	bhi.n	800c2d2 <tcp_receive+0x22>
 800c2c4:	4ba6      	ldr	r3, [pc, #664]	; (800c560 <tcp_receive+0x2b0>)
 800c2c6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c2ca:	49a6      	ldr	r1, [pc, #664]	; (800c564 <tcp_receive+0x2b4>)
 800c2cc:	48a6      	ldr	r0, [pc, #664]	; (800c568 <tcp_receive+0x2b8>)
 800c2ce:	f00a fe9d 	bl	801700c <iprintf>

  if (flags & TCP_ACK) {
 800c2d2:	4ba6      	ldr	r3, [pc, #664]	; (800c56c <tcp_receive+0x2bc>)
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	f003 0310 	and.w	r3, r3, #16
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 82bf 	beq.w	800c85e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ec:	4413      	add	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2f4:	4b9e      	ldr	r3, [pc, #632]	; (800c570 <tcp_receive+0x2c0>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	db1b      	blt.n	800c336 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c302:	4b9b      	ldr	r3, [pc, #620]	; (800c570 <tcp_receive+0x2c0>)
 800c304:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c306:	429a      	cmp	r2, r3
 800c308:	d106      	bne.n	800c318 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c30e:	4b99      	ldr	r3, [pc, #612]	; (800c574 <tcp_receive+0x2c4>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	2b00      	cmp	r3, #0
 800c316:	db0e      	blt.n	800c336 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c31c:	4b95      	ldr	r3, [pc, #596]	; (800c574 <tcp_receive+0x2c4>)
 800c31e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c320:	429a      	cmp	r2, r3
 800c322:	d141      	bne.n	800c3a8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c324:	4b94      	ldr	r3, [pc, #592]	; (800c578 <tcp_receive+0x2c8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	89db      	ldrh	r3, [r3, #14]
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c332:	429a      	cmp	r2, r3
 800c334:	d938      	bls.n	800c3a8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c336:	4b90      	ldr	r3, [pc, #576]	; (800c578 <tcp_receive+0x2c8>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	89db      	ldrh	r3, [r3, #14]
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c350:	429a      	cmp	r2, r3
 800c352:	d205      	bcs.n	800c360 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800c360:	4b83      	ldr	r3, [pc, #524]	; (800c570 <tcp_receive+0x2c0>)
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800c368:	4b82      	ldr	r3, [pc, #520]	; (800c574 <tcp_receive+0x2c4>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10d      	bne.n	800c396 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c380:	2b00      	cmp	r3, #0
 800c382:	d111      	bne.n	800c3a8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800c394:	e008      	b.n	800c3a8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c3a8:	4b72      	ldr	r3, [pc, #456]	; (800c574 <tcp_receive+0x2c4>)
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	dc53      	bgt.n	800c45e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800c3b6:	4b71      	ldr	r3, [pc, #452]	; (800c57c <tcp_receive+0x2cc>)
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d146      	bne.n	800c44c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c3c8:	4413      	add	r3, r2
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d13d      	bne.n	800c44c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	db38      	blt.n	800c44c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3de:	4b65      	ldr	r3, [pc, #404]	; (800c574 <tcp_receive+0x2c4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d132      	bne.n	800c44c <tcp_receive+0x19c>
              found_dupack = 1;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c3f0:	2bff      	cmp	r3, #255	; 0xff
 800c3f2:	d007      	beq.n	800c404 <tcp_receive+0x154>
                ++pcb->dupacks;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d916      	bls.n	800c43c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c418:	4413      	add	r3, r2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c422:	429a      	cmp	r2, r3
 800c424:	d912      	bls.n	800c44c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c430:	4413      	add	r3, r2
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c43a:	e007      	b.n	800c44c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c442:	2b03      	cmp	r3, #3
 800c444:	d102      	bne.n	800c44c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f002 fa2e 	bl	800e8a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f040 8169 	bne.w	800c726 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c45c:	e163      	b.n	800c726 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c45e:	4b45      	ldr	r3, [pc, #276]	; (800c574 <tcp_receive+0x2c4>)
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	3b01      	subs	r3, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f2c0 8107 	blt.w	800c67e <tcp_receive+0x3ce>
 800c470:	4b40      	ldr	r3, [pc, #256]	; (800c574 <tcp_receive+0x2c4>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f300 80ff 	bgt.w	800c67e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	7e9b      	ldrb	r3, [r3, #26]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00c      	beq.n	800c4a6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	7e9b      	ldrb	r3, [r3, #26]
 800c490:	f023 0304 	bic.w	r3, r3, #4
 800c494:	b2da      	uxtb	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c4b4:	10db      	asrs	r3, r3, #3
 800c4b6:	b21b      	sxth	r3, r3
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	4413      	add	r3, r2
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	b21a      	sxth	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c4d6:	4b27      	ldr	r3, [pc, #156]	; (800c574 <tcp_receive+0x2c4>)
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	7d1b      	ldrb	r3, [r3, #20]
 800c4e2:	2b03      	cmp	r3, #3
 800c4e4:	f240 8094 	bls.w	800c610 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d216      	bcs.n	800c526 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c502:	4413      	add	r3, r2
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d97f      	bls.n	800c610 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c51a:	4413      	add	r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c524:	e074      	b.n	800c610 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c530:	4619      	mov	r1, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c536:	fb03 f301 	mul.w	r3, r3, r1
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800c540:	fb93 f3f1 	sdiv	r3, r3, r1
 800c544:	b29b      	uxth	r3, r3
 800c546:	4413      	add	r3, r2
 800c548:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c550:	8a7a      	ldrh	r2, [r7, #18]
 800c552:	429a      	cmp	r2, r3
 800c554:	d95c      	bls.n	800c610 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	8a7a      	ldrh	r2, [r7, #18]
 800c55a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c55e:	e057      	b.n	800c610 <tcp_receive+0x360>
 800c560:	08019ba0 	.word	0x08019ba0
 800c564:	08019dc4 	.word	0x08019dc4
 800c568:	08019be4 	.word	0x08019be4
 800c56c:	20000274 	.word	0x20000274
 800c570:	20000268 	.word	0x20000268
 800c574:	2000026c 	.word	0x2000026c
 800c578:	20000258 	.word	0x20000258
 800c57c:	20000272 	.word	0x20000272
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c584:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fc ff0c 	bl	80093b8 <pbuf_clen>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	429c      	cmp	r4, r3
 800c5a4:	d206      	bcs.n	800c5b4 <tcp_receive+0x304>
 800c5a6:	4b70      	ldr	r3, [pc, #448]	; (800c768 <tcp_receive+0x4b8>)
 800c5a8:	f240 429e 	movw	r2, #1182	; 0x49e
 800c5ac:	496f      	ldr	r1, [pc, #444]	; (800c76c <tcp_receive+0x4bc>)
 800c5ae:	4870      	ldr	r0, [pc, #448]	; (800c770 <tcp_receive+0x4c0>)
 800c5b0:	f00a fd2c 	bl	801700c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fc fefd 	bl	80093b8 <pbuf_clen>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5c8:	1a9b      	subs	r3, r3, r2
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800c5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d4:	891a      	ldrh	r2, [r3, #8]
 800c5d6:	4b67      	ldr	r3, [pc, #412]	; (800c774 <tcp_receive+0x4c4>)
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	4413      	add	r3, r2
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	4b65      	ldr	r3, [pc, #404]	; (800c774 <tcp_receive+0x4c4>)
 800c5e0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800c5e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5e4:	f7fe f93b 	bl	800a85e <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00e      	beq.n	800c610 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10a      	bne.n	800c610 <tcp_receive+0x360>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <tcp_receive+0x360>
 800c602:	4b59      	ldr	r3, [pc, #356]	; (800c768 <tcp_receive+0x4b8>)
 800c604:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800c608:	495b      	ldr	r1, [pc, #364]	; (800c778 <tcp_receive+0x4c8>)
 800c60a:	4859      	ldr	r0, [pc, #356]	; (800c770 <tcp_receive+0x4c0>)
 800c60c:	f00a fcfe 	bl	801700c <iprintf>
      while (pcb->unacked != NULL &&
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c614:	2b00      	cmp	r3, #0
 800c616:	d022      	beq.n	800c65e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	4618      	mov	r0, r3
 800c622:	f7fb fd17 	bl	8008054 <lwip_htonl>
 800c626:	4604      	mov	r4, r0
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c62c:	891b      	ldrh	r3, [r3, #8]
 800c62e:	461d      	mov	r5, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	899b      	ldrh	r3, [r3, #12]
 800c638:	b29b      	uxth	r3, r3
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fb fcfc 	bl	8008038 <lwip_htons>
 800c640:	4603      	mov	r3, r0
 800c642:	f003 0303 	and.w	r3, r3, #3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <tcp_receive+0x39e>
 800c64a:	2301      	movs	r3, #1
 800c64c:	e000      	b.n	800c650 <tcp_receive+0x3a0>
 800c64e:	2300      	movs	r3, #0
 800c650:	442b      	add	r3, r5
 800c652:	18e2      	adds	r2, r4, r3
 800c654:	4b49      	ldr	r3, [pc, #292]	; (800c77c <tcp_receive+0x4cc>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	dd90      	ble.n	800c580 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c662:	2b00      	cmp	r3, #0
 800c664:	d104      	bne.n	800c670 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c66c:	861a      	strh	r2, [r3, #48]	; 0x30
 800c66e:	e002      	b.n	800c676 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	76da      	strb	r2, [r3, #27]
 800c67c:	e002      	b.n	800c684 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fd30 	bl	800e0e4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c684:	e04f      	b.n	800c726 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c68a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d103      	bne.n	800c6a6 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fc fe81 	bl	80093b8 <pbuf_clen>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	429c      	cmp	r4, r3
 800c6ba:	d206      	bcs.n	800c6ca <tcp_receive+0x41a>
 800c6bc:	4b2a      	ldr	r3, [pc, #168]	; (800c768 <tcp_receive+0x4b8>)
 800c6be:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c6c2:	492a      	ldr	r1, [pc, #168]	; (800c76c <tcp_receive+0x4bc>)
 800c6c4:	482a      	ldr	r0, [pc, #168]	; (800c770 <tcp_receive+0x4c0>)
 800c6c6:	f00a fca1 	bl	801700c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fc fe72 	bl	80093b8 <pbuf_clen>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6de:	1a9b      	subs	r3, r3, r2
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800c6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ea:	891a      	ldrh	r2, [r3, #8]
 800c6ec:	4b21      	ldr	r3, [pc, #132]	; (800c774 <tcp_receive+0x4c4>)
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	4b1f      	ldr	r3, [pc, #124]	; (800c774 <tcp_receive+0x4c4>)
 800c6f6:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800c6f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6fa:	f7fe f8b0 	bl	800a85e <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00e      	beq.n	800c726 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10a      	bne.n	800c726 <tcp_receive+0x476>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c714:	2b00      	cmp	r3, #0
 800c716:	d106      	bne.n	800c726 <tcp_receive+0x476>
 800c718:	4b13      	ldr	r3, [pc, #76]	; (800c768 <tcp_receive+0x4b8>)
 800c71a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800c71e:	4916      	ldr	r1, [pc, #88]	; (800c778 <tcp_receive+0x4c8>)
 800c720:	4813      	ldr	r0, [pc, #76]	; (800c770 <tcp_receive+0x4c0>)
 800c722:	f00a fc73 	bl	801700c <iprintf>
    while (pcb->unsent != NULL &&
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d036      	beq.n	800c79c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c72e:	4b13      	ldr	r3, [pc, #76]	; (800c77c <tcp_receive+0x4cc>)
 800c730:	681c      	ldr	r4, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fb fc8a 	bl	8008054 <lwip_htonl>
 800c740:	4605      	mov	r5, r0
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c746:	891b      	ldrh	r3, [r3, #8]
 800c748:	461e      	mov	r6, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	899b      	ldrh	r3, [r3, #12]
 800c752:	b29b      	uxth	r3, r3
 800c754:	4618      	mov	r0, r3
 800c756:	f7fb fc6f 	bl	8008038 <lwip_htons>
 800c75a:	4603      	mov	r3, r0
 800c75c:	f003 0303 	and.w	r3, r3, #3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00d      	beq.n	800c780 <tcp_receive+0x4d0>
 800c764:	2301      	movs	r3, #1
 800c766:	e00c      	b.n	800c782 <tcp_receive+0x4d2>
 800c768:	08019ba0 	.word	0x08019ba0
 800c76c:	08019de0 	.word	0x08019de0
 800c770:	08019be4 	.word	0x08019be4
 800c774:	20000270 	.word	0x20000270
 800c778:	08019e08 	.word	0x08019e08
 800c77c:	2000026c 	.word	0x2000026c
 800c780:	2300      	movs	r3, #0
 800c782:	4433      	add	r3, r6
 800c784:	442b      	add	r3, r5
 800c786:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800c788:	2b00      	cmp	r3, #0
 800c78a:	db07      	blt.n	800c79c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c78c:	4b8d      	ldr	r3, [pc, #564]	; (800c9c4 <tcp_receive+0x714>)
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b00      	cmp	r3, #0
 800c798:	f77f af75 	ble.w	800c686 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7a2:	4b89      	ldr	r3, [pc, #548]	; (800c9c8 <tcp_receive+0x718>)
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d052      	beq.n	800c85e <tcp_receive+0x5ae>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7bc:	4b81      	ldr	r3, [pc, #516]	; (800c9c4 <tcp_receive+0x714>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	da4b      	bge.n	800c85e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c7c6:	4b81      	ldr	r3, [pc, #516]	; (800c9cc <tcp_receive+0x71c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800c7d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7e0:	10db      	asrs	r3, r3, #3
 800c7e2:	b21b      	sxth	r3, r3
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7f6:	4413      	add	r3, r2
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	b21a      	sxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c800:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c804:	2b00      	cmp	r3, #0
 800c806:	da03      	bge.n	800c810 <tcp_receive+0x560>
        m = -m;
 800c808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c80a:	425b      	negs	r3, r3
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800c810:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c818:	109b      	asrs	r3, r3, #2
 800c81a:	b21b      	sxth	r3, r3
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	b29b      	uxth	r3, r3
 800c822:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c82e:	4413      	add	r3, r2
 800c830:	b29b      	uxth	r3, r3
 800c832:	b21a      	sxth	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c83e:	10db      	asrs	r3, r3, #3
 800c840:	b21b      	sxth	r3, r3
 800c842:	b29a      	uxth	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	4413      	add	r3, r2
 800c84e:	b29b      	uxth	r3, r3
 800c850:	b21a      	sxth	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c85e:	4b5c      	ldr	r3, [pc, #368]	; (800c9d0 <tcp_receive+0x720>)
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 84f1 	beq.w	800d24a <tcp_receive+0xf9a>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	7d1b      	ldrb	r3, [r3, #20]
 800c86c:	2b06      	cmp	r3, #6
 800c86e:	f200 84ec 	bhi.w	800d24a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c876:	4b57      	ldr	r3, [pc, #348]	; (800c9d4 <tcp_receive+0x724>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	3b01      	subs	r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f2c0 80b8 	blt.w	800c9f4 <tcp_receive+0x744>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c888:	4b51      	ldr	r3, [pc, #324]	; (800c9d0 <tcp_receive+0x720>)
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	4619      	mov	r1, r3
 800c88e:	4b51      	ldr	r3, [pc, #324]	; (800c9d4 <tcp_receive+0x724>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	440b      	add	r3, r1
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	3301      	adds	r3, #1
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f300 80ab 	bgt.w	800c9f4 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c89e:	4b4e      	ldr	r3, [pc, #312]	; (800c9d8 <tcp_receive+0x728>)
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8a8:	4b4a      	ldr	r3, [pc, #296]	; (800c9d4 <tcp_receive+0x724>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c8b0:	4b49      	ldr	r3, [pc, #292]	; (800c9d8 <tcp_receive+0x728>)
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d106      	bne.n	800c8c6 <tcp_receive+0x616>
 800c8b8:	4b48      	ldr	r3, [pc, #288]	; (800c9dc <tcp_receive+0x72c>)
 800c8ba:	f240 523c 	movw	r2, #1340	; 0x53c
 800c8be:	4948      	ldr	r1, [pc, #288]	; (800c9e0 <tcp_receive+0x730>)
 800c8c0:	4848      	ldr	r0, [pc, #288]	; (800c9e4 <tcp_receive+0x734>)
 800c8c2:	f00a fba3 	bl	801700c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	dd06      	ble.n	800c8de <tcp_receive+0x62e>
 800c8d0:	4b42      	ldr	r3, [pc, #264]	; (800c9dc <tcp_receive+0x72c>)
 800c8d2:	f240 523d 	movw	r2, #1341	; 0x53d
 800c8d6:	4944      	ldr	r1, [pc, #272]	; (800c9e8 <tcp_receive+0x738>)
 800c8d8:	4842      	ldr	r0, [pc, #264]	; (800c9e4 <tcp_receive+0x734>)
 800c8da:	f00a fb97 	bl	801700c <iprintf>
      if (inseg.p->len < off) {
 800c8de:	4b3e      	ldr	r3, [pc, #248]	; (800c9d8 <tcp_receive+0x728>)
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	895b      	ldrh	r3, [r3, #10]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	dd3e      	ble.n	800c96a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c8ec:	4b3a      	ldr	r3, [pc, #232]	; (800c9d8 <tcp_receive+0x728>)
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	891b      	ldrh	r3, [r3, #8]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	dd06      	ble.n	800c908 <tcp_receive+0x658>
 800c8fa:	4b38      	ldr	r3, [pc, #224]	; (800c9dc <tcp_receive+0x72c>)
 800c8fc:	f240 523f 	movw	r2, #1343	; 0x53f
 800c900:	493a      	ldr	r1, [pc, #232]	; (800c9ec <tcp_receive+0x73c>)
 800c902:	4838      	ldr	r0, [pc, #224]	; (800c9e4 <tcp_receive+0x734>)
 800c904:	f00a fb82 	bl	801700c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c908:	4b33      	ldr	r3, [pc, #204]	; (800c9d8 <tcp_receive+0x728>)
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	891a      	ldrh	r2, [r3, #8]
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	b29b      	uxth	r3, r3
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800c916:	e00e      	b.n	800c936 <tcp_receive+0x686>
          off -= p->len;
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	895b      	ldrh	r3, [r3, #10]
 800c91c:	461a      	mov	r2, r3
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	1a9b      	subs	r3, r3, r2
 800c922:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	8a3a      	ldrh	r2, [r7, #16]
 800c928:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2200      	movs	r2, #0
 800c92e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	895b      	ldrh	r3, [r3, #10]
 800c93a:	461a      	mov	r2, r3
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	4293      	cmp	r3, r2
 800c940:	dcea      	bgt.n	800c918 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	b29b      	uxth	r3, r3
 800c946:	425b      	negs	r3, r3
 800c948:	b29b      	uxth	r3, r3
 800c94a:	b21b      	sxth	r3, r3
 800c94c:	4619      	mov	r1, r3
 800c94e:	69b8      	ldr	r0, [r7, #24]
 800c950:	f7fc fc7a 	bl	8009248 <pbuf_header>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d01c      	beq.n	800c994 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c95a:	4b20      	ldr	r3, [pc, #128]	; (800c9dc <tcp_receive+0x72c>)
 800c95c:	f240 524c 	movw	r2, #1356	; 0x54c
 800c960:	4923      	ldr	r1, [pc, #140]	; (800c9f0 <tcp_receive+0x740>)
 800c962:	4820      	ldr	r0, [pc, #128]	; (800c9e4 <tcp_receive+0x734>)
 800c964:	f00a fb52 	bl	801700c <iprintf>
 800c968:	e014      	b.n	800c994 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800c96a:	4b1b      	ldr	r3, [pc, #108]	; (800c9d8 <tcp_receive+0x728>)
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c970:	b292      	uxth	r2, r2
 800c972:	4252      	negs	r2, r2
 800c974:	b292      	uxth	r2, r2
 800c976:	b212      	sxth	r2, r2
 800c978:	4611      	mov	r1, r2
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fc fc64 	bl	8009248 <pbuf_header>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d006      	beq.n	800c994 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c986:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <tcp_receive+0x72c>)
 800c988:	f240 5251 	movw	r2, #1361	; 0x551
 800c98c:	4918      	ldr	r1, [pc, #96]	; (800c9f0 <tcp_receive+0x740>)
 800c98e:	4815      	ldr	r0, [pc, #84]	; (800c9e4 <tcp_receive+0x734>)
 800c990:	f00a fb3c 	bl	801700c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c994:	4b10      	ldr	r3, [pc, #64]	; (800c9d8 <tcp_receive+0x728>)
 800c996:	891a      	ldrh	r2, [r3, #8]
 800c998:	4b0e      	ldr	r3, [pc, #56]	; (800c9d4 <tcp_receive+0x724>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	b299      	uxth	r1, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	1acb      	subs	r3, r1, r3
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	4413      	add	r3, r2
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <tcp_receive+0x728>)
 800c9ae:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b4:	4a07      	ldr	r2, [pc, #28]	; (800c9d4 <tcp_receive+0x724>)
 800c9b6:	6013      	str	r3, [r2, #0]
 800c9b8:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <tcp_receive+0x728>)
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	4a05      	ldr	r2, [pc, #20]	; (800c9d4 <tcp_receive+0x724>)
 800c9be:	6812      	ldr	r2, [r2, #0]
 800c9c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c9c2:	e025      	b.n	800ca10 <tcp_receive+0x760>
 800c9c4:	2000026c 	.word	0x2000026c
 800c9c8:	20000270 	.word	0x20000270
 800c9cc:	20003950 	.word	0x20003950
 800c9d0:	20000272 	.word	0x20000272
 800c9d4:	20000268 	.word	0x20000268
 800c9d8:	20000248 	.word	0x20000248
 800c9dc:	08019ba0 	.word	0x08019ba0
 800c9e0:	08019e28 	.word	0x08019e28
 800c9e4:	08019be4 	.word	0x08019be4
 800c9e8:	08019e38 	.word	0x08019e38
 800c9ec:	08019e48 	.word	0x08019e48
 800c9f0:	08019e58 	.word	0x08019e58
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c9f4:	4b87      	ldr	r3, [pc, #540]	; (800cc14 <tcp_receive+0x964>)
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	da06      	bge.n	800ca10 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7e9b      	ldrb	r3, [r3, #26]
 800ca06:	f043 0302 	orr.w	r3, r3, #2
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca10:	4b80      	ldr	r3, [pc, #512]	; (800cc14 <tcp_receive+0x964>)
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f2c0 8410 	blt.w	800d240 <tcp_receive+0xf90>
 800ca20:	4b7c      	ldr	r3, [pc, #496]	; (800cc14 <tcp_receive+0x964>)
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ca2c:	440b      	add	r3, r1
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	3301      	adds	r3, #1
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f300 8404 	bgt.w	800d240 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca3c:	4b75      	ldr	r3, [pc, #468]	; (800cc14 <tcp_receive+0x964>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	f040 8287 	bne.w	800cf54 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ca46:	4b74      	ldr	r3, [pc, #464]	; (800cc18 <tcp_receive+0x968>)
 800ca48:	891c      	ldrh	r4, [r3, #8]
 800ca4a:	4b73      	ldr	r3, [pc, #460]	; (800cc18 <tcp_receive+0x968>)
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	899b      	ldrh	r3, [r3, #12]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fb faf0 	bl	8008038 <lwip_htons>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	f003 0303 	and.w	r3, r3, #3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d001      	beq.n	800ca66 <tcp_receive+0x7b6>
 800ca62:	2301      	movs	r3, #1
 800ca64:	e000      	b.n	800ca68 <tcp_receive+0x7b8>
 800ca66:	2300      	movs	r3, #0
 800ca68:	4423      	add	r3, r4
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	4b6b      	ldr	r3, [pc, #428]	; (800cc1c <tcp_receive+0x96c>)
 800ca6e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca74:	4b69      	ldr	r3, [pc, #420]	; (800cc1c <tcp_receive+0x96c>)
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d26e      	bcs.n	800cb5a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca7c:	4b66      	ldr	r3, [pc, #408]	; (800cc18 <tcp_receive+0x968>)
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	899b      	ldrh	r3, [r3, #12]
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fb fad7 	bl	8008038 <lwip_htons>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d01b      	beq.n	800cacc <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ca94:	4b60      	ldr	r3, [pc, #384]	; (800cc18 <tcp_receive+0x968>)
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	899b      	ldrh	r3, [r3, #12]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800caa0:	b29c      	uxth	r4, r3
 800caa2:	4b5d      	ldr	r3, [pc, #372]	; (800cc18 <tcp_receive+0x968>)
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	899b      	ldrh	r3, [r3, #12]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fb fac4 	bl	8008038 <lwip_htons>
 800cab0:	4603      	mov	r3, r0
 800cab2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fb fabd 	bl	8008038 <lwip_htons>
 800cabe:	4603      	mov	r3, r0
 800cac0:	461a      	mov	r2, r3
 800cac2:	4b55      	ldr	r3, [pc, #340]	; (800cc18 <tcp_receive+0x968>)
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	4322      	orrs	r2, r4
 800cac8:	b292      	uxth	r2, r2
 800caca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cad0:	4b51      	ldr	r3, [pc, #324]	; (800cc18 <tcp_receive+0x968>)
 800cad2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cad4:	4b50      	ldr	r3, [pc, #320]	; (800cc18 <tcp_receive+0x968>)
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	899b      	ldrh	r3, [r3, #12]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fb faab 	bl	8008038 <lwip_htons>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d005      	beq.n	800caf8 <tcp_receive+0x848>
            inseg.len -= 1;
 800caec:	4b4a      	ldr	r3, [pc, #296]	; (800cc18 <tcp_receive+0x968>)
 800caee:	891b      	ldrh	r3, [r3, #8]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	4b48      	ldr	r3, [pc, #288]	; (800cc18 <tcp_receive+0x968>)
 800caf6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800caf8:	4b47      	ldr	r3, [pc, #284]	; (800cc18 <tcp_receive+0x968>)
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	4b46      	ldr	r3, [pc, #280]	; (800cc18 <tcp_receive+0x968>)
 800cafe:	891b      	ldrh	r3, [r3, #8]
 800cb00:	4619      	mov	r1, r3
 800cb02:	4610      	mov	r0, r2
 800cb04:	f7fc fa50 	bl	8008fa8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cb08:	4b43      	ldr	r3, [pc, #268]	; (800cc18 <tcp_receive+0x968>)
 800cb0a:	891c      	ldrh	r4, [r3, #8]
 800cb0c:	4b42      	ldr	r3, [pc, #264]	; (800cc18 <tcp_receive+0x968>)
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	899b      	ldrh	r3, [r3, #12]
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fb fa8f 	bl	8008038 <lwip_htons>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f003 0303 	and.w	r3, r3, #3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <tcp_receive+0x878>
 800cb24:	2301      	movs	r3, #1
 800cb26:	e000      	b.n	800cb2a <tcp_receive+0x87a>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4423      	add	r3, r4
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	4b3b      	ldr	r3, [pc, #236]	; (800cc1c <tcp_receive+0x96c>)
 800cb30:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cb32:	4b3a      	ldr	r3, [pc, #232]	; (800cc1c <tcp_receive+0x96c>)
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	461a      	mov	r2, r3
 800cb38:	4b36      	ldr	r3, [pc, #216]	; (800cc14 <tcp_receive+0x964>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	441a      	add	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cb46:	440b      	add	r3, r1
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d006      	beq.n	800cb5a <tcp_receive+0x8aa>
 800cb4c:	4b34      	ldr	r3, [pc, #208]	; (800cc20 <tcp_receive+0x970>)
 800cb4e:	f240 527f 	movw	r2, #1407	; 0x57f
 800cb52:	4934      	ldr	r1, [pc, #208]	; (800cc24 <tcp_receive+0x974>)
 800cb54:	4834      	ldr	r0, [pc, #208]	; (800cc28 <tcp_receive+0x978>)
 800cb56:	f00a fa59 	bl	801700c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 80e1 	beq.w	800cd26 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cb64:	4b2c      	ldr	r3, [pc, #176]	; (800cc18 <tcp_receive+0x968>)
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	899b      	ldrh	r3, [r3, #12]
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fb fa63 	bl	8008038 <lwip_htons>
 800cb72:	4603      	mov	r3, r0
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d010      	beq.n	800cb9e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cb7c:	e00a      	b.n	800cb94 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb82:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800cb8e:	68b8      	ldr	r0, [r7, #8]
 800cb90:	f7fd fe65 	bl	800a85e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1f0      	bne.n	800cb7e <tcp_receive+0x8ce>
 800cb9c:	e0c3      	b.n	800cd26 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cba4:	e04f      	b.n	800cc46 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	899b      	ldrh	r3, [r3, #12]
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fb fa42 	bl	8008038 <lwip_htons>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d03b      	beq.n	800cc36 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cbbe:	4b16      	ldr	r3, [pc, #88]	; (800cc18 <tcp_receive+0x968>)
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	899b      	ldrh	r3, [r3, #12]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fb fa36 	bl	8008038 <lwip_htons>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d12f      	bne.n	800cc36 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cbd6:	4b10      	ldr	r3, [pc, #64]	; (800cc18 <tcp_receive+0x968>)
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	899b      	ldrh	r3, [r3, #12]
 800cbdc:	b29c      	uxth	r4, r3
 800cbde:	2001      	movs	r0, #1
 800cbe0:	f7fb fa2a 	bl	8008038 <lwip_htons>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4b0b      	ldr	r3, [pc, #44]	; (800cc18 <tcp_receive+0x968>)
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	4322      	orrs	r2, r4
 800cbee:	b292      	uxth	r2, r2
 800cbf0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cbf2:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <tcp_receive+0x968>)
 800cbf4:	891c      	ldrh	r4, [r3, #8]
 800cbf6:	4b08      	ldr	r3, [pc, #32]	; (800cc18 <tcp_receive+0x968>)
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	899b      	ldrh	r3, [r3, #12]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fb fa1a 	bl	8008038 <lwip_htons>
 800cc04:	4603      	mov	r3, r0
 800cc06:	f003 0303 	and.w	r3, r3, #3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00e      	beq.n	800cc2c <tcp_receive+0x97c>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e00d      	b.n	800cc2e <tcp_receive+0x97e>
 800cc12:	bf00      	nop
 800cc14:	20000268 	.word	0x20000268
 800cc18:	20000248 	.word	0x20000248
 800cc1c:	20000272 	.word	0x20000272
 800cc20:	08019ba0 	.word	0x08019ba0
 800cc24:	08019e6c 	.word	0x08019e6c
 800cc28:	08019be4 	.word	0x08019be4
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4423      	add	r3, r4
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	4b95      	ldr	r3, [pc, #596]	; (800ce88 <tcp_receive+0xbd8>)
 800cc34:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800cc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800cc40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc42:	f7fd fe0c 	bl	800a85e <tcp_seg_free>
            while (next &&
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00e      	beq.n	800cc6a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cc4c:	4b8e      	ldr	r3, [pc, #568]	; (800ce88 <tcp_receive+0xbd8>)
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	461a      	mov	r2, r3
 800cc52:	4b8e      	ldr	r3, [pc, #568]	; (800ce8c <tcp_receive+0xbdc>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	441a      	add	r2, r3
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc60:	8909      	ldrh	r1, [r1, #8]
 800cc62:	440b      	add	r3, r1
 800cc64:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	da9d      	bge.n	800cba6 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d057      	beq.n	800cd20 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800cc70:	4b85      	ldr	r3, [pc, #532]	; (800ce88 <tcp_receive+0xbd8>)
 800cc72:	881b      	ldrh	r3, [r3, #0]
 800cc74:	461a      	mov	r2, r3
 800cc76:	4b85      	ldr	r3, [pc, #532]	; (800ce8c <tcp_receive+0xbdc>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	441a      	add	r2, r3
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dd4b      	ble.n	800cd20 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	4b7e      	ldr	r3, [pc, #504]	; (800ce8c <tcp_receive+0xbdc>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	4b7d      	ldr	r3, [pc, #500]	; (800ce90 <tcp_receive+0xbe0>)
 800cc9c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cc9e:	4b7c      	ldr	r3, [pc, #496]	; (800ce90 <tcp_receive+0xbe0>)
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	899b      	ldrh	r3, [r3, #12]
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7fb f9c6 	bl	8008038 <lwip_htons>
 800ccac:	4603      	mov	r3, r0
 800ccae:	f003 0302 	and.w	r3, r3, #2
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d005      	beq.n	800ccc2 <tcp_receive+0xa12>
                inseg.len -= 1;
 800ccb6:	4b76      	ldr	r3, [pc, #472]	; (800ce90 <tcp_receive+0xbe0>)
 800ccb8:	891b      	ldrh	r3, [r3, #8]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	4b74      	ldr	r3, [pc, #464]	; (800ce90 <tcp_receive+0xbe0>)
 800ccc0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ccc2:	4b73      	ldr	r3, [pc, #460]	; (800ce90 <tcp_receive+0xbe0>)
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	4b72      	ldr	r3, [pc, #456]	; (800ce90 <tcp_receive+0xbe0>)
 800ccc8:	891b      	ldrh	r3, [r3, #8]
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7fc f96b 	bl	8008fa8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ccd2:	4b6f      	ldr	r3, [pc, #444]	; (800ce90 <tcp_receive+0xbe0>)
 800ccd4:	891c      	ldrh	r4, [r3, #8]
 800ccd6:	4b6e      	ldr	r3, [pc, #440]	; (800ce90 <tcp_receive+0xbe0>)
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	899b      	ldrh	r3, [r3, #12]
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fb f9aa 	bl	8008038 <lwip_htons>
 800cce4:	4603      	mov	r3, r0
 800cce6:	f003 0303 	and.w	r3, r3, #3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <tcp_receive+0xa42>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e000      	b.n	800ccf4 <tcp_receive+0xa44>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4423      	add	r3, r4
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	4b63      	ldr	r3, [pc, #396]	; (800ce88 <tcp_receive+0xbd8>)
 800ccfa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ccfc:	4b62      	ldr	r3, [pc, #392]	; (800ce88 <tcp_receive+0xbd8>)
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	4b62      	ldr	r3, [pc, #392]	; (800ce8c <tcp_receive+0xbdc>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	441a      	add	r2, r3
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d006      	beq.n	800cd20 <tcp_receive+0xa70>
 800cd12:	4b60      	ldr	r3, [pc, #384]	; (800ce94 <tcp_receive+0xbe4>)
 800cd14:	f240 52af 	movw	r2, #1455	; 0x5af
 800cd18:	495f      	ldr	r1, [pc, #380]	; (800ce98 <tcp_receive+0xbe8>)
 800cd1a:	4860      	ldr	r0, [pc, #384]	; (800ce9c <tcp_receive+0xbec>)
 800cd1c:	f00a f976 	bl	801700c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd24:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cd26:	4b58      	ldr	r3, [pc, #352]	; (800ce88 <tcp_receive+0xbd8>)
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	4b57      	ldr	r3, [pc, #348]	; (800ce8c <tcp_receive+0xbdc>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	441a      	add	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd3a:	4b53      	ldr	r3, [pc, #332]	; (800ce88 <tcp_receive+0xbd8>)
 800cd3c:	881b      	ldrh	r3, [r3, #0]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d206      	bcs.n	800cd50 <tcp_receive+0xaa0>
 800cd42:	4b54      	ldr	r3, [pc, #336]	; (800ce94 <tcp_receive+0xbe4>)
 800cd44:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cd48:	4955      	ldr	r1, [pc, #340]	; (800cea0 <tcp_receive+0xbf0>)
 800cd4a:	4854      	ldr	r0, [pc, #336]	; (800ce9c <tcp_receive+0xbec>)
 800cd4c:	f00a f95e 	bl	801700c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd54:	4b4c      	ldr	r3, [pc, #304]	; (800ce88 <tcp_receive+0xbd8>)
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7fd f8ef 	bl	8009f44 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cd66:	4b4a      	ldr	r3, [pc, #296]	; (800ce90 <tcp_receive+0xbe0>)
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	891b      	ldrh	r3, [r3, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d006      	beq.n	800cd7e <tcp_receive+0xace>
          recv_data = inseg.p;
 800cd70:	4b47      	ldr	r3, [pc, #284]	; (800ce90 <tcp_receive+0xbe0>)
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	4a4b      	ldr	r2, [pc, #300]	; (800cea4 <tcp_receive+0xbf4>)
 800cd76:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cd78:	4b45      	ldr	r3, [pc, #276]	; (800ce90 <tcp_receive+0xbe0>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd7e:	4b44      	ldr	r3, [pc, #272]	; (800ce90 <tcp_receive+0xbe0>)
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	899b      	ldrh	r3, [r3, #12]
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fb f956 	bl	8008038 <lwip_htons>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 80b4 	beq.w	800cf00 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cd98:	4b43      	ldr	r3, [pc, #268]	; (800cea8 <tcp_receive+0xbf8>)
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	f043 0320 	orr.w	r3, r3, #32
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	4b41      	ldr	r3, [pc, #260]	; (800cea8 <tcp_receive+0xbf8>)
 800cda4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cda6:	e0ab      	b.n	800cf00 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdac:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	4a35      	ldr	r2, [pc, #212]	; (800ce8c <tcp_receive+0xbdc>)
 800cdb8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	891b      	ldrh	r3, [r3, #8]
 800cdbe:	461c      	mov	r4, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	899b      	ldrh	r3, [r3, #12]
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fb f935 	bl	8008038 <lwip_htons>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f003 0303 	and.w	r3, r3, #3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <tcp_receive+0xb2c>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e000      	b.n	800cdde <tcp_receive+0xb2e>
 800cddc:	2300      	movs	r3, #0
 800cdde:	191a      	adds	r2, r3, r4
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	441a      	add	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdee:	461c      	mov	r4, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	891b      	ldrh	r3, [r3, #8]
 800cdf4:	461d      	mov	r5, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	899b      	ldrh	r3, [r3, #12]
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fb f91a 	bl	8008038 <lwip_htons>
 800ce04:	4603      	mov	r3, r0
 800ce06:	f003 0303 	and.w	r3, r3, #3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <tcp_receive+0xb62>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e000      	b.n	800ce14 <tcp_receive+0xb64>
 800ce12:	2300      	movs	r3, #0
 800ce14:	442b      	add	r3, r5
 800ce16:	429c      	cmp	r4, r3
 800ce18:	d206      	bcs.n	800ce28 <tcp_receive+0xb78>
 800ce1a:	4b1e      	ldr	r3, [pc, #120]	; (800ce94 <tcp_receive+0xbe4>)
 800ce1c:	f240 52de 	movw	r2, #1502	; 0x5de
 800ce20:	4922      	ldr	r1, [pc, #136]	; (800ceac <tcp_receive+0xbfc>)
 800ce22:	481e      	ldr	r0, [pc, #120]	; (800ce9c <tcp_receive+0xbec>)
 800ce24:	f00a f8f2 	bl	801700c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	891b      	ldrh	r3, [r3, #8]
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	899b      	ldrh	r3, [r3, #12]
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fb f8fe 	bl	8008038 <lwip_htons>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	f003 0303 	and.w	r3, r3, #3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <tcp_receive+0xb9a>
 800ce46:	2301      	movs	r3, #1
 800ce48:	e000      	b.n	800ce4c <tcp_receive+0xb9c>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	1919      	adds	r1, r3, r4
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce52:	b28b      	uxth	r3, r1
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7fd f871 	bl	8009f44 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	891b      	ldrh	r3, [r3, #8]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d028      	beq.n	800cebe <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ce6c:	4b0d      	ldr	r3, [pc, #52]	; (800cea4 <tcp_receive+0xbf4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d01d      	beq.n	800ceb0 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800ce74:	4b0b      	ldr	r3, [pc, #44]	; (800cea4 <tcp_receive+0xbf4>)
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4610      	mov	r0, r2
 800ce80:	f7fc fad4 	bl	800942c <pbuf_cat>
 800ce84:	e018      	b.n	800ceb8 <tcp_receive+0xc08>
 800ce86:	bf00      	nop
 800ce88:	20000272 	.word	0x20000272
 800ce8c:	20000268 	.word	0x20000268
 800ce90:	20000248 	.word	0x20000248
 800ce94:	08019ba0 	.word	0x08019ba0
 800ce98:	08019ea4 	.word	0x08019ea4
 800ce9c:	08019be4 	.word	0x08019be4
 800cea0:	08019ee0 	.word	0x08019ee0
 800cea4:	20000278 	.word	0x20000278
 800cea8:	20000275 	.word	0x20000275
 800ceac:	08019f00 	.word	0x08019f00
            } else {
              recv_data = cseg->p;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	4a71      	ldr	r2, [pc, #452]	; (800d07c <tcp_receive+0xdcc>)
 800ceb6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	899b      	ldrh	r3, [r3, #12]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fb f8b6 	bl	8008038 <lwip_htons>
 800cecc:	4603      	mov	r3, r0
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00d      	beq.n	800cef2 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ced6:	4b6a      	ldr	r3, [pc, #424]	; (800d080 <tcp_receive+0xdd0>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f043 0320 	orr.w	r3, r3, #32
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	4b67      	ldr	r3, [pc, #412]	; (800d080 <tcp_receive+0xdd0>)
 800cee2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	7d1b      	ldrb	r3, [r3, #20]
 800cee8:	2b04      	cmp	r3, #4
 800ceea:	d102      	bne.n	800cef2 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2207      	movs	r2, #7
 800cef0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f7fd fcaf 	bl	800a85e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d008      	beq.n	800cf1a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cf14:	429a      	cmp	r2, r3
 800cf16:	f43f af47 	beq.w	800cda8 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	7e9b      	ldrb	r3, [r3, #26]
 800cf1e:	f003 0301 	and.w	r3, r3, #1
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00e      	beq.n	800cf44 <tcp_receive+0xc94>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	7e9b      	ldrb	r3, [r3, #26]
 800cf2a:	f023 0301 	bic.w	r3, r3, #1
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	769a      	strb	r2, [r3, #26]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	7e9b      	ldrb	r3, [r3, #26]
 800cf38:	f043 0302 	orr.w	r3, r3, #2
 800cf3c:	b2da      	uxtb	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cf42:	e181      	b.n	800d248 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	7e9b      	ldrb	r3, [r3, #26]
 800cf48:	f043 0301 	orr.w	r3, r3, #1
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cf52:	e179      	b.n	800d248 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f001 f8c5 	bl	800e0e4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d106      	bne.n	800cf70 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cf62:	4848      	ldr	r0, [pc, #288]	; (800d084 <tcp_receive+0xdd4>)
 800cf64:	f7fd fca2 	bl	800a8ac <tcp_seg_copy>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800cf6e:	e16b      	b.n	800d248 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf7a:	e150      	b.n	800d21e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	4b41      	ldr	r3, [pc, #260]	; (800d088 <tcp_receive+0xdd8>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d11d      	bne.n	800cfc6 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cf8a:	4b3e      	ldr	r3, [pc, #248]	; (800d084 <tcp_receive+0xdd4>)
 800cf8c:	891a      	ldrh	r2, [r3, #8]
 800cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf90:	891b      	ldrh	r3, [r3, #8]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	f240 8148 	bls.w	800d228 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800cf98:	483a      	ldr	r0, [pc, #232]	; (800d084 <tcp_receive+0xdd4>)
 800cf9a:	f7fd fc87 	bl	800a8ac <tcp_seg_copy>
 800cf9e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f000 8142 	beq.w	800d22c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <tcp_receive+0xd06>
                    prev->next = cseg;
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	e002      	b.n	800cfbc <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cfbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7ff f900 	bl	800c1c4 <tcp_oos_insert_segment>
                }
                break;
 800cfc4:	e132      	b.n	800d22c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d117      	bne.n	800cffc <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cfcc:	4b2e      	ldr	r3, [pc, #184]	; (800d088 <tcp_receive+0xdd8>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	da57      	bge.n	800d08c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800cfdc:	4829      	ldr	r0, [pc, #164]	; (800d084 <tcp_receive+0xdd4>)
 800cfde:	f7fd fc65 	bl	800a8ac <tcp_seg_copy>
 800cfe2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 8122 	beq.w	800d230 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800cff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff f8e5 	bl	800c1c4 <tcp_oos_insert_segment>
                  }
                  break;
 800cffa:	e119      	b.n	800d230 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800cffc:	4b22      	ldr	r3, [pc, #136]	; (800d088 <tcp_receive+0xdd8>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	3b01      	subs	r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	db3e      	blt.n	800d08c <tcp_receive+0xddc>
 800d00e:	4b1e      	ldr	r3, [pc, #120]	; (800d088 <tcp_receive+0xdd8>)
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	3301      	adds	r3, #1
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dc35      	bgt.n	800d08c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800d020:	4818      	ldr	r0, [pc, #96]	; (800d084 <tcp_receive+0xdd4>)
 800d022:	f7fd fc43 	bl	800a8ac <tcp_seg_copy>
 800d026:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	f000 8102 	beq.w	800d234 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d038:	8912      	ldrh	r2, [r2, #8]
 800d03a:	441a      	add	r2, r3
 800d03c:	4b12      	ldr	r3, [pc, #72]	; (800d088 <tcp_receive+0xdd8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	dd12      	ble.n	800d06c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d046:	4b10      	ldr	r3, [pc, #64]	; (800d088 <tcp_receive+0xdd8>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	b29b      	uxth	r3, r3
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	b29a      	uxth	r2, r3
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d062:	891b      	ldrh	r3, [r3, #8]
 800d064:	4619      	mov	r1, r3
 800d066:	4610      	mov	r0, r2
 800d068:	f7fb ff9e 	bl	8008fa8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff f8a5 	bl	800c1c4 <tcp_oos_insert_segment>
                  }
                  break;
 800d07a:	e0db      	b.n	800d234 <tcp_receive+0xf84>
 800d07c:	20000278 	.word	0x20000278
 800d080:	20000275 	.word	0x20000275
 800d084:	20000248 	.word	0x20000248
 800d088:	20000268 	.word	0x20000268
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	f040 80bf 	bne.w	800d214 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d096:	4b7c      	ldr	r3, [pc, #496]	; (800d288 <tcp_receive+0xfd8>)
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f340 80b6 	ble.w	800d214 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	899b      	ldrh	r3, [r3, #12]
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fa ffc1 	bl	8008038 <lwip_htons>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f040 80bb 	bne.w	800d238 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d0c2:	4872      	ldr	r0, [pc, #456]	; (800d28c <tcp_receive+0xfdc>)
 800d0c4:	f7fd fbf2 	bl	800a8ac <tcp_seg_copy>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 80b2 	beq.w	800d23c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0e0:	8912      	ldrh	r2, [r2, #8]
 800d0e2:	441a      	add	r2, r3
 800d0e4:	4b68      	ldr	r3, [pc, #416]	; (800d288 <tcp_receive+0xfd8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	dd12      	ble.n	800d114 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d0ee:	4b66      	ldr	r3, [pc, #408]	; (800d288 <tcp_receive+0xfd8>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d106:	685a      	ldr	r2, [r3, #4]
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	891b      	ldrh	r3, [r3, #8]
 800d10c:	4619      	mov	r1, r3
 800d10e:	4610      	mov	r0, r2
 800d110:	f7fb ff4a 	bl	8008fa8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d114:	4b5e      	ldr	r3, [pc, #376]	; (800d290 <tcp_receive+0xfe0>)
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	4b5b      	ldr	r3, [pc, #364]	; (800d288 <tcp_receive+0xfd8>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	441a      	add	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d124:	6879      	ldr	r1, [r7, #4]
 800d126:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d128:	440b      	add	r3, r1
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f340 8085 	ble.w	800d23c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	899b      	ldrh	r3, [r3, #12]
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fa ff7b 	bl	8008038 <lwip_htons>
 800d142:	4603      	mov	r3, r0
 800d144:	f003 0301 	and.w	r3, r3, #1
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d01e      	beq.n	800d18a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	899b      	ldrh	r3, [r3, #12]
 800d154:	b29b      	uxth	r3, r3
 800d156:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d15a:	b29c      	uxth	r4, r3
 800d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	899b      	ldrh	r3, [r3, #12]
 800d164:	b29b      	uxth	r3, r3
 800d166:	4618      	mov	r0, r3
 800d168:	f7fa ff66 	bl	8008038 <lwip_htons>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d172:	b29b      	uxth	r3, r3
 800d174:	4618      	mov	r0, r3
 800d176:	f7fa ff5f 	bl	8008038 <lwip_htons>
 800d17a:	4603      	mov	r3, r0
 800d17c:	461a      	mov	r2, r3
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	4322      	orrs	r2, r4
 800d186:	b292      	uxth	r2, r2
 800d188:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18e:	b29a      	uxth	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d194:	4413      	add	r3, r2
 800d196:	b299      	uxth	r1, r3
 800d198:	4b3b      	ldr	r3, [pc, #236]	; (800d288 <tcp_receive+0xfd8>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	1a8a      	subs	r2, r1, r2
 800d1a4:	b292      	uxth	r2, r2
 800d1a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	891b      	ldrh	r3, [r3, #8]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	f7fb fef6 	bl	8008fa8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	891c      	ldrh	r4, [r3, #8]
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	899b      	ldrh	r3, [r3, #12]
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fa ff33 	bl	8008038 <lwip_htons>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	f003 0303 	and.w	r3, r3, #3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <tcp_receive+0xf30>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e000      	b.n	800d1e2 <tcp_receive+0xf32>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4423      	add	r3, r4
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	4b2a      	ldr	r3, [pc, #168]	; (800d290 <tcp_receive+0xfe0>)
 800d1e8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d1ea:	4b29      	ldr	r3, [pc, #164]	; (800d290 <tcp_receive+0xfe0>)
 800d1ec:	881b      	ldrh	r3, [r3, #0]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	4b25      	ldr	r3, [pc, #148]	; (800d288 <tcp_receive+0xfd8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	441a      	add	r2, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fa:	6879      	ldr	r1, [r7, #4]
 800d1fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d1fe:	440b      	add	r3, r1
 800d200:	429a      	cmp	r2, r3
 800d202:	d01b      	beq.n	800d23c <tcp_receive+0xf8c>
 800d204:	4b23      	ldr	r3, [pc, #140]	; (800d294 <tcp_receive+0xfe4>)
 800d206:	f240 627b 	movw	r2, #1659	; 0x67b
 800d20a:	4923      	ldr	r1, [pc, #140]	; (800d298 <tcp_receive+0xfe8>)
 800d20c:	4823      	ldr	r0, [pc, #140]	; (800d29c <tcp_receive+0xfec>)
 800d20e:	f009 fefd 	bl	801700c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d212:	e013      	b.n	800d23c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d220:	2b00      	cmp	r3, #0
 800d222:	f47f aeab 	bne.w	800cf7c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800d226:	e00f      	b.n	800d248 <tcp_receive+0xf98>
                break;
 800d228:	bf00      	nop
 800d22a:	e00d      	b.n	800d248 <tcp_receive+0xf98>
                break;
 800d22c:	bf00      	nop
 800d22e:	e00b      	b.n	800d248 <tcp_receive+0xf98>
                  break;
 800d230:	bf00      	nop
 800d232:	e009      	b.n	800d248 <tcp_receive+0xf98>
                  break;
 800d234:	bf00      	nop
 800d236:	e007      	b.n	800d248 <tcp_receive+0xf98>
                  break;
 800d238:	bf00      	nop
 800d23a:	e005      	b.n	800d248 <tcp_receive+0xf98>
                break;
 800d23c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800d23e:	e003      	b.n	800d248 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 ff4f 	bl	800e0e4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d246:	e01a      	b.n	800d27e <tcp_receive+0xfce>
 800d248:	e019      	b.n	800d27e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d24a:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <tcp_receive+0xfd8>)
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	db0a      	blt.n	800d26e <tcp_receive+0xfbe>
 800d258:	4b0b      	ldr	r3, [pc, #44]	; (800d288 <tcp_receive+0xfd8>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d260:	6879      	ldr	r1, [r7, #4]
 800d262:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d264:	440b      	add	r3, r1
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	3301      	adds	r3, #1
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	dd07      	ble.n	800d27e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	7e9b      	ldrb	r3, [r3, #26]
 800d272:	f043 0302 	orr.w	r3, r3, #2
 800d276:	b2da      	uxtb	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800d27c:	e7ff      	b.n	800d27e <tcp_receive+0xfce>
 800d27e:	bf00      	nop
 800d280:	3734      	adds	r7, #52	; 0x34
 800d282:	46bd      	mov	sp, r7
 800d284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d286:	bf00      	nop
 800d288:	20000268 	.word	0x20000268
 800d28c:	20000248 	.word	0x20000248
 800d290:	20000272 	.word	0x20000272
 800d294:	08019ba0 	.word	0x08019ba0
 800d298:	08019e6c 	.word	0x08019e6c
 800d29c:	08019be4 	.word	0x08019be4

0800d2a0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800d2a6:	4b18      	ldr	r3, [pc, #96]	; (800d308 <tcp_getoptbyte+0x68>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d005      	beq.n	800d2ba <tcp_getoptbyte+0x1a>
 800d2ae:	4b17      	ldr	r3, [pc, #92]	; (800d30c <tcp_getoptbyte+0x6c>)
 800d2b0:	881a      	ldrh	r2, [r3, #0]
 800d2b2:	4b17      	ldr	r3, [pc, #92]	; (800d310 <tcp_getoptbyte+0x70>)
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d20e      	bcs.n	800d2d8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800d2ba:	4b16      	ldr	r3, [pc, #88]	; (800d314 <tcp_getoptbyte+0x74>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	3314      	adds	r3, #20
 800d2c0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800d2c2:	4b12      	ldr	r3, [pc, #72]	; (800d30c <tcp_getoptbyte+0x6c>)
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	b291      	uxth	r1, r2
 800d2ca:	4a10      	ldr	r2, [pc, #64]	; (800d30c <tcp_getoptbyte+0x6c>)
 800d2cc:	8011      	strh	r1, [r2, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	e010      	b.n	800d2fa <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800d2d8:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <tcp_getoptbyte+0x6c>)
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	b291      	uxth	r1, r2
 800d2e0:	4a0a      	ldr	r2, [pc, #40]	; (800d30c <tcp_getoptbyte+0x6c>)
 800d2e2:	8011      	strh	r1, [r2, #0]
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <tcp_getoptbyte+0x70>)
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800d2f0:	4b05      	ldr	r3, [pc, #20]	; (800d308 <tcp_getoptbyte+0x68>)
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	79fb      	ldrb	r3, [r7, #7]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	20000260 	.word	0x20000260
 800d30c:	20000264 	.word	0x20000264
 800d310:	2000025e 	.word	0x2000025e
 800d314:	20000258 	.word	0x20000258

0800d318 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d320:	4b2d      	ldr	r3, [pc, #180]	; (800d3d8 <tcp_parseopt+0xc0>)
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d053      	beq.n	800d3d0 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d328:	4b2c      	ldr	r3, [pc, #176]	; (800d3dc <tcp_parseopt+0xc4>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	801a      	strh	r2, [r3, #0]
 800d32e:	e043      	b.n	800d3b8 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800d330:	f7ff ffb6 	bl	800d2a0 <tcp_getoptbyte>
 800d334:	4603      	mov	r3, r0
 800d336:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d03c      	beq.n	800d3b8 <tcp_parseopt+0xa0>
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d002      	beq.n	800d348 <tcp_parseopt+0x30>
 800d342:	2b00      	cmp	r3, #0
 800d344:	d03f      	beq.n	800d3c6 <tcp_parseopt+0xae>
 800d346:	e026      	b.n	800d396 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d348:	f7ff ffaa 	bl	800d2a0 <tcp_getoptbyte>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b04      	cmp	r3, #4
 800d350:	d13b      	bne.n	800d3ca <tcp_parseopt+0xb2>
 800d352:	4b22      	ldr	r3, [pc, #136]	; (800d3dc <tcp_parseopt+0xc4>)
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	3302      	adds	r3, #2
 800d358:	4a1f      	ldr	r2, [pc, #124]	; (800d3d8 <tcp_parseopt+0xc0>)
 800d35a:	8812      	ldrh	r2, [r2, #0]
 800d35c:	4293      	cmp	r3, r2
 800d35e:	dc34      	bgt.n	800d3ca <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800d360:	f7ff ff9e 	bl	800d2a0 <tcp_getoptbyte>
 800d364:	4603      	mov	r3, r0
 800d366:	b29b      	uxth	r3, r3
 800d368:	021b      	lsls	r3, r3, #8
 800d36a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800d36c:	f7ff ff98 	bl	800d2a0 <tcp_getoptbyte>
 800d370:	4603      	mov	r3, r0
 800d372:	b29a      	uxth	r2, r3
 800d374:	89bb      	ldrh	r3, [r7, #12]
 800d376:	4313      	orrs	r3, r2
 800d378:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d37a:	89bb      	ldrh	r3, [r7, #12]
 800d37c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d380:	d804      	bhi.n	800d38c <tcp_parseopt+0x74>
 800d382:	89bb      	ldrh	r3, [r7, #12]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <tcp_parseopt+0x74>
 800d388:	89ba      	ldrh	r2, [r7, #12]
 800d38a:	e001      	b.n	800d390 <tcp_parseopt+0x78>
 800d38c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800d394:	e010      	b.n	800d3b8 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800d396:	f7ff ff83 	bl	800d2a0 <tcp_getoptbyte>
 800d39a:	4603      	mov	r3, r0
 800d39c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800d39e:	7afb      	ldrb	r3, [r7, #11]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d914      	bls.n	800d3ce <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800d3a4:	7afb      	ldrb	r3, [r7, #11]
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <tcp_parseopt+0xc4>)
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	3b02      	subs	r3, #2
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <tcp_parseopt+0xc4>)
 800d3b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d3b8:	4b08      	ldr	r3, [pc, #32]	; (800d3dc <tcp_parseopt+0xc4>)
 800d3ba:	881a      	ldrh	r2, [r3, #0]
 800d3bc:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <tcp_parseopt+0xc0>)
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d3b5      	bcc.n	800d330 <tcp_parseopt+0x18>
 800d3c4:	e004      	b.n	800d3d0 <tcp_parseopt+0xb8>
        return;
 800d3c6:	bf00      	nop
 800d3c8:	e002      	b.n	800d3d0 <tcp_parseopt+0xb8>
          return;
 800d3ca:	bf00      	nop
 800d3cc:	e000      	b.n	800d3d0 <tcp_parseopt+0xb8>
          return;
 800d3ce:	bf00      	nop
      }
    }
  }
}
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	2000025c 	.word	0x2000025c
 800d3dc:	20000264 	.word	0x20000264

0800d3e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d3e4:	4b05      	ldr	r3, [pc, #20]	; (800d3fc <tcp_trigger_input_pcb_close+0x1c>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	f043 0310 	orr.w	r3, r3, #16
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	4b03      	ldr	r3, [pc, #12]	; (800d3fc <tcp_trigger_input_pcb_close+0x1c>)
 800d3f0:	701a      	strb	r2, [r3, #0]
}
 800d3f2:	bf00      	nop
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	20000275 	.word	0x20000275

0800d400 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	607b      	str	r3, [r7, #4]
 800d40a:	460b      	mov	r3, r1
 800d40c:	817b      	strh	r3, [r7, #10]
 800d40e:	4613      	mov	r3, r2
 800d410:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d412:	897a      	ldrh	r2, [r7, #10]
 800d414:	893b      	ldrh	r3, [r7, #8]
 800d416:	4413      	add	r3, r2
 800d418:	b29b      	uxth	r3, r3
 800d41a:	3314      	adds	r3, #20
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	2200      	movs	r2, #0
 800d420:	4619      	mov	r1, r3
 800d422:	2001      	movs	r0, #1
 800d424:	f7fb fbc2 	bl	8008bac <pbuf_alloc>
 800d428:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d057      	beq.n	800d4e0 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	895b      	ldrh	r3, [r3, #10]
 800d434:	461a      	mov	r2, r3
 800d436:	897b      	ldrh	r3, [r7, #10]
 800d438:	3314      	adds	r3, #20
 800d43a:	429a      	cmp	r2, r3
 800d43c:	da05      	bge.n	800d44a <tcp_output_alloc_header+0x4a>
 800d43e:	4b2b      	ldr	r3, [pc, #172]	; (800d4ec <tcp_output_alloc_header+0xec>)
 800d440:	2273      	movs	r2, #115	; 0x73
 800d442:	492b      	ldr	r1, [pc, #172]	; (800d4f0 <tcp_output_alloc_header+0xf0>)
 800d444:	482b      	ldr	r0, [pc, #172]	; (800d4f4 <tcp_output_alloc_header+0xf4>)
 800d446:	f009 fde1 	bl	801700c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	8adb      	ldrh	r3, [r3, #22]
 800d454:	4618      	mov	r0, r3
 800d456:	f7fa fdef 	bl	8008038 <lwip_htons>
 800d45a:	4603      	mov	r3, r0
 800d45c:	461a      	mov	r2, r3
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	8b1b      	ldrh	r3, [r3, #24]
 800d466:	4618      	mov	r0, r3
 800d468:	f7fa fde6 	bl	8008038 <lwip_htons>
 800d46c:	4603      	mov	r3, r0
 800d46e:	461a      	mov	r2, r3
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fa fde8 	bl	8008054 <lwip_htonl>
 800d484:	4602      	mov	r2, r0
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800d48a:	897b      	ldrh	r3, [r7, #10]
 800d48c:	089b      	lsrs	r3, r3, #2
 800d48e:	b29b      	uxth	r3, r3
 800d490:	3305      	adds	r3, #5
 800d492:	b29b      	uxth	r3, r3
 800d494:	031b      	lsls	r3, r3, #12
 800d496:	b29b      	uxth	r3, r3
 800d498:	f043 0310 	orr.w	r3, r3, #16
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fa fdca 	bl	8008038 <lwip_htons>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fa fdc1 	bl	8008038 <lwip_htons>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	741a      	strb	r2, [r3, #16]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	749a      	strb	r2, [r3, #18]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d4da:	441a      	add	r2, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d4e0:	697b      	ldr	r3, [r7, #20]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	08019f28 	.word	0x08019f28
 800d4f0:	08019f5c 	.word	0x08019f5c
 800d4f4:	08019f8c 	.word	0x08019f8c

0800d4f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d4f8:	b590      	push	{r4, r7, lr}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d504:	2b00      	cmp	r3, #0
 800d506:	d02d      	beq.n	800d564 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e002      	b.n	800d516 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1f8      	bne.n	800d510 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	899b      	ldrh	r3, [r3, #12]
 800d524:	b29b      	uxth	r3, r3
 800d526:	4618      	mov	r0, r3
 800d528:	f7fa fd86 	bl	8008038 <lwip_htons>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f003 0307 	and.w	r3, r3, #7
 800d532:	2b00      	cmp	r3, #0
 800d534:	d116      	bne.n	800d564 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	899b      	ldrh	r3, [r3, #12]
 800d53c:	b29c      	uxth	r4, r3
 800d53e:	2001      	movs	r0, #1
 800d540:	f7fa fd7a 	bl	8008038 <lwip_htons>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	4322      	orrs	r2, r4
 800d54e:	b292      	uxth	r2, r2
 800d550:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7e9b      	ldrb	r3, [r3, #26]
 800d556:	f043 0320 	orr.w	r3, r3, #32
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	e004      	b.n	800d56e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d564:	2101      	movs	r1, #1
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fcc0 	bl	800deec <tcp_enqueue_flags>
 800d56c:	4603      	mov	r3, r0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3714      	adds	r7, #20
 800d572:	46bd      	mov	sp, r7
 800d574:	bd90      	pop	{r4, r7, pc}
	...

0800d578 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800d578:	b590      	push	{r4, r7, lr}
 800d57a:	b087      	sub	sp, #28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	603b      	str	r3, [r7, #0]
 800d584:	4613      	mov	r3, r2
 800d586:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d588:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	f003 0304 	and.w	r3, r3, #4
 800d594:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d596:	2003      	movs	r0, #3
 800d598:	f7fb f8fc 	bl	8008794 <memp_malloc>
 800d59c:	6138      	str	r0, [r7, #16]
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d104      	bne.n	800d5ae <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d5a4:	68b8      	ldr	r0, [r7, #8]
 800d5a6:	f7fb fe73 	bl	8009290 <pbuf_free>
    return NULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e061      	b.n	800d672 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d5b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	891a      	ldrh	r2, [r3, #8]
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d205      	bcs.n	800d5da <tcp_create_segment+0x62>
 800d5ce:	4b2b      	ldr	r3, [pc, #172]	; (800d67c <tcp_create_segment+0x104>)
 800d5d0:	22ba      	movs	r2, #186	; 0xba
 800d5d2:	492b      	ldr	r1, [pc, #172]	; (800d680 <tcp_create_segment+0x108>)
 800d5d4:	482b      	ldr	r0, [pc, #172]	; (800d684 <tcp_create_segment+0x10c>)
 800d5d6:	f009 fd19 	bl	801700c <iprintf>
  seg->len = p->tot_len - optlen;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	891a      	ldrh	r2, [r3, #8]
 800d5de:	7dfb      	ldrb	r3, [r7, #23]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800d5ea:	2114      	movs	r1, #20
 800d5ec:	68b8      	ldr	r0, [r7, #8]
 800d5ee:	f7fb fe2b 	bl	8009248 <pbuf_header>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d5f8:	6938      	ldr	r0, [r7, #16]
 800d5fa:	f7fd f930 	bl	800a85e <tcp_seg_free>
    return NULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	e037      	b.n	800d672 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	8ada      	ldrh	r2, [r3, #22]
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	68dc      	ldr	r4, [r3, #12]
 800d614:	4610      	mov	r0, r2
 800d616:	f7fa fd0f 	bl	8008038 <lwip_htons>
 800d61a:	4603      	mov	r3, r0
 800d61c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	8b1a      	ldrh	r2, [r3, #24]
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	68dc      	ldr	r4, [r3, #12]
 800d626:	4610      	mov	r0, r2
 800d628:	f7fa fd06 	bl	8008038 <lwip_htons>
 800d62c:	4603      	mov	r3, r0
 800d62e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	68dc      	ldr	r4, [r3, #12]
 800d634:	6838      	ldr	r0, [r7, #0]
 800d636:	f7fa fd0d 	bl	8008054 <lwip_htonl>
 800d63a:	4603      	mov	r3, r0
 800d63c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800d63e:	7dfb      	ldrb	r3, [r7, #23]
 800d640:	089b      	lsrs	r3, r3, #2
 800d642:	b2db      	uxtb	r3, r3
 800d644:	b29b      	uxth	r3, r3
 800d646:	3305      	adds	r3, #5
 800d648:	b29b      	uxth	r3, r3
 800d64a:	031b      	lsls	r3, r3, #12
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	79fb      	ldrb	r3, [r7, #7]
 800d650:	b29b      	uxth	r3, r3
 800d652:	4313      	orrs	r3, r2
 800d654:	b29a      	uxth	r2, r3
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	68dc      	ldr	r4, [r3, #12]
 800d65a:	4610      	mov	r0, r2
 800d65c:	f7fa fcec 	bl	8008038 <lwip_htons>
 800d660:	4603      	mov	r3, r0
 800d662:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	749a      	strb	r2, [r3, #18]
 800d66c:	2200      	movs	r2, #0
 800d66e:	74da      	strb	r2, [r3, #19]
  return seg;
 800d670:	693b      	ldr	r3, [r7, #16]
}
 800d672:	4618      	mov	r0, r3
 800d674:	371c      	adds	r7, #28
 800d676:	46bd      	mov	sp, r7
 800d678:	bd90      	pop	{r4, r7, pc}
 800d67a:	bf00      	nop
 800d67c:	08019f28 	.word	0x08019f28
 800d680:	08019fb4 	.word	0x08019fb4
 800d684:	08019f8c 	.word	0x08019f8c

0800d688 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	607b      	str	r3, [r7, #4]
 800d690:	4603      	mov	r3, r0
 800d692:	73fb      	strb	r3, [r7, #15]
 800d694:	460b      	mov	r3, r1
 800d696:	81bb      	strh	r3, [r7, #12]
 800d698:	4613      	mov	r3, r2
 800d69a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d69c:	89bb      	ldrh	r3, [r7, #12]
 800d69e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d6a0:	89ba      	ldrh	r2, [r7, #12]
 800d6a2:	897b      	ldrh	r3, [r7, #10]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d221      	bcs.n	800d6ec <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d6a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6ac:	f003 0302 	and.w	r3, r3, #2
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d111      	bne.n	800d6d8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	7e9b      	ldrb	r3, [r3, #26]
 800d6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d115      	bne.n	800d6ec <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800d6c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d007      	beq.n	800d6d8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d6c8:	6a3b      	ldr	r3, [r7, #32]
 800d6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d103      	bne.n	800d6d8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d009      	beq.n	800d6ec <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d6d8:	89bb      	ldrh	r3, [r7, #12]
 800d6da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d6de:	f023 0203 	bic.w	r2, r3, #3
 800d6e2:	897b      	ldrh	r3, [r7, #10]
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	bf28      	it	cs
 800d6e8:	4613      	movcs	r3, r2
 800d6ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d6ec:	8af9      	ldrh	r1, [r7, #22]
 800d6ee:	7bfb      	ldrb	r3, [r7, #15]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fb fa5a 	bl	8008bac <pbuf_alloc>
 800d6f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800d700:	2300      	movs	r3, #0
 800d702:	e019      	b.n	800d738 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d006      	beq.n	800d71a <tcp_pbuf_prealloc+0x92>
 800d70c:	4b0c      	ldr	r3, [pc, #48]	; (800d740 <tcp_pbuf_prealloc+0xb8>)
 800d70e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d712:	490c      	ldr	r1, [pc, #48]	; (800d744 <tcp_pbuf_prealloc+0xbc>)
 800d714:	480c      	ldr	r0, [pc, #48]	; (800d748 <tcp_pbuf_prealloc+0xc0>)
 800d716:	f009 fc79 	bl	801700c <iprintf>
  *oversize = p->len - length;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	895a      	ldrh	r2, [r3, #10]
 800d71e:	89bb      	ldrh	r3, [r7, #12]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	b29a      	uxth	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	89ba      	ldrh	r2, [r7, #12]
 800d72c:	811a      	strh	r2, [r3, #8]
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	891a      	ldrh	r2, [r3, #8]
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	815a      	strh	r2, [r3, #10]
  return p;
 800d736:	693b      	ldr	r3, [r7, #16]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3718      	adds	r7, #24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	08019f28 	.word	0x08019f28
 800d744:	08019fcc 	.word	0x08019fcc
 800d748:	08019f8c 	.word	0x08019f8c

0800d74c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	7d1b      	ldrb	r3, [r3, #20]
 800d75c:	2b04      	cmp	r3, #4
 800d75e:	d00e      	beq.n	800d77e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d764:	2b07      	cmp	r3, #7
 800d766:	d00a      	beq.n	800d77e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d76c:	2b02      	cmp	r3, #2
 800d76e:	d006      	beq.n	800d77e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d774:	2b03      	cmp	r3, #3
 800d776:	d002      	beq.n	800d77e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d778:	f06f 030a 	mvn.w	r3, #10
 800d77c:	e04f      	b.n	800d81e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800d77e:	887b      	ldrh	r3, [r7, #2]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <tcp_write_checks+0x3c>
    return ERR_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	e04a      	b.n	800d81e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d78e:	887a      	ldrh	r2, [r7, #2]
 800d790:	429a      	cmp	r2, r3
 800d792:	d909      	bls.n	800d7a8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	7e9b      	ldrb	r3, [r3, #26]
 800d798:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d7a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a6:	e03a      	b.n	800d81e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7ae:	2b08      	cmp	r3, #8
 800d7b0:	d806      	bhi.n	800d7c0 <tcp_write_checks+0x74>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7b8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d909      	bls.n	800d7d4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	7e9b      	ldrb	r3, [r3, #26]
 800d7c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7d2:	e024      	b.n	800d81e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00f      	beq.n	800d7fe <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d11a      	bne.n	800d81c <tcp_write_checks+0xd0>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d116      	bne.n	800d81c <tcp_write_checks+0xd0>
 800d7ee:	4b0e      	ldr	r3, [pc, #56]	; (800d828 <tcp_write_checks+0xdc>)
 800d7f0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800d7f4:	490d      	ldr	r1, [pc, #52]	; (800d82c <tcp_write_checks+0xe0>)
 800d7f6:	480e      	ldr	r0, [pc, #56]	; (800d830 <tcp_write_checks+0xe4>)
 800d7f8:	f009 fc08 	bl	801700c <iprintf>
 800d7fc:	e00e      	b.n	800d81c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <tcp_write_checks+0xc2>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d006      	beq.n	800d81c <tcp_write_checks+0xd0>
 800d80e:	4b06      	ldr	r3, [pc, #24]	; (800d828 <tcp_write_checks+0xdc>)
 800d810:	f240 1259 	movw	r2, #345	; 0x159
 800d814:	4907      	ldr	r1, [pc, #28]	; (800d834 <tcp_write_checks+0xe8>)
 800d816:	4806      	ldr	r0, [pc, #24]	; (800d830 <tcp_write_checks+0xe4>)
 800d818:	f009 fbf8 	bl	801700c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	08019f28 	.word	0x08019f28
 800d82c:	08019fe0 	.word	0x08019fe0
 800d830:	08019f8c 	.word	0x08019f8c
 800d834:	0801a01c 	.word	0x0801a01c

0800d838 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d838:	b590      	push	{r4, r7, lr}
 800d83a:	b09b      	sub	sp, #108	; 0x6c
 800d83c:	af04      	add	r7, sp, #16
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	4611      	mov	r1, r2
 800d844:	461a      	mov	r2, r3
 800d846:	460b      	mov	r3, r1
 800d848:	80fb      	strh	r3, [r7, #6]
 800d84a:	4613      	mov	r3, r2
 800d84c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d84e:	2300      	movs	r3, #0
 800d850:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d852:	2300      	movs	r3, #0
 800d854:	653b      	str	r3, [r7, #80]	; 0x50
 800d856:	2300      	movs	r3, #0
 800d858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d85a:	2300      	movs	r3, #0
 800d85c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d85e:	2300      	movs	r3, #0
 800d860:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d862:	2300      	movs	r3, #0
 800d864:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800d868:	2300      	movs	r3, #0
 800d86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d874:	2300      	movs	r3, #0
 800d876:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d878:	2300      	movs	r3, #0
 800d87a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d886:	085b      	lsrs	r3, r3, #1
 800d888:	b29a      	uxth	r2, r3
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d88e:	4293      	cmp	r3, r2
 800d890:	bf28      	it	cs
 800d892:	4613      	movcs	r3, r2
 800d894:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <tcp_write+0x6a>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8a0:	e000      	b.n	800d8a4 <tcp_write+0x6c>
 800d8a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d109      	bne.n	800d8c0 <tcp_write+0x88>
 800d8ac:	4b92      	ldr	r3, [pc, #584]	; (800daf8 <tcp_write+0x2c0>)
 800d8ae:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800d8b2:	4992      	ldr	r1, [pc, #584]	; (800dafc <tcp_write+0x2c4>)
 800d8b4:	4892      	ldr	r0, [pc, #584]	; (800db00 <tcp_write+0x2c8>)
 800d8b6:	f009 fba9 	bl	801700c <iprintf>
 800d8ba:	f06f 030f 	mvn.w	r3, #15
 800d8be:	e30a      	b.n	800ded6 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d8c0:	88fb      	ldrh	r3, [r7, #6]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff ff41 	bl	800d74c <tcp_write_checks>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d8d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <tcp_write+0xa6>
    return err;
 800d8d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d8dc:	e2fb      	b.n	800ded6 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 80f5 	beq.w	800dadc <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8f6:	653b      	str	r3, [r7, #80]	; 0x50
 800d8f8:	e002      	b.n	800d900 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800d8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1f8      	bne.n	800d8fa <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800d908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d90a:	7a9b      	ldrb	r3, [r3, #10]
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	b29b      	uxth	r3, r3
 800d910:	f003 0304 	and.w	r3, r3, #4
 800d914:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d916:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d91a:	891b      	ldrh	r3, [r3, #8]
 800d91c:	4619      	mov	r1, r3
 800d91e:	8c3b      	ldrh	r3, [r7, #32]
 800d920:	440b      	add	r3, r1
 800d922:	429a      	cmp	r2, r3
 800d924:	da06      	bge.n	800d934 <tcp_write+0xfc>
 800d926:	4b74      	ldr	r3, [pc, #464]	; (800daf8 <tcp_write+0x2c0>)
 800d928:	f240 12c7 	movw	r2, #455	; 0x1c7
 800d92c:	4975      	ldr	r1, [pc, #468]	; (800db04 <tcp_write+0x2cc>)
 800d92e:	4874      	ldr	r0, [pc, #464]	; (800db00 <tcp_write+0x2c8>)
 800d930:	f009 fb6c 	bl	801700c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d936:	891a      	ldrh	r2, [r3, #8]
 800d938:	8c3b      	ldrh	r3, [r7, #32]
 800d93a:	4413      	add	r3, r2
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d94a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d94c:	8a7b      	ldrh	r3, [r7, #18]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d027      	beq.n	800d9a2 <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d952:	8a7b      	ldrh	r3, [r7, #18]
 800d954:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d956:	429a      	cmp	r2, r3
 800d958:	d206      	bcs.n	800d968 <tcp_write+0x130>
 800d95a:	4b67      	ldr	r3, [pc, #412]	; (800daf8 <tcp_write+0x2c0>)
 800d95c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800d960:	4969      	ldr	r1, [pc, #420]	; (800db08 <tcp_write+0x2d0>)
 800d962:	4867      	ldr	r0, [pc, #412]	; (800db00 <tcp_write+0x2c8>)
 800d964:	f009 fb52 	bl	801700c <iprintf>
      seg = last_unsent;
 800d968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d96a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d96c:	8a7b      	ldrh	r3, [r7, #18]
 800d96e:	88fa      	ldrh	r2, [r7, #6]
 800d970:	429a      	cmp	r2, r3
 800d972:	d901      	bls.n	800d978 <tcp_write+0x140>
 800d974:	8a7b      	ldrh	r3, [r7, #18]
 800d976:	e000      	b.n	800d97a <tcp_write+0x142>
 800d978:	88fb      	ldrh	r3, [r7, #6]
 800d97a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d97c:	4293      	cmp	r3, r2
 800d97e:	bfa8      	it	ge
 800d980:	4613      	movge	r3, r2
 800d982:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d984:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d98a:	4413      	add	r3, r2
 800d98c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d990:	8a7a      	ldrh	r2, [r7, #18]
 800d992:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	b29b      	uxth	r3, r3
 800d998:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d99a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d99c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d9a2:	8a7b      	ldrh	r3, [r7, #18]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00b      	beq.n	800d9c0 <tcp_write+0x188>
 800d9a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d9ac:	88fb      	ldrh	r3, [r7, #6]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d006      	beq.n	800d9c0 <tcp_write+0x188>
 800d9b2:	4b51      	ldr	r3, [pc, #324]	; (800daf8 <tcp_write+0x2c0>)
 800d9b4:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d9b8:	4954      	ldr	r1, [pc, #336]	; (800db0c <tcp_write+0x2d4>)
 800d9ba:	4851      	ldr	r0, [pc, #324]	; (800db00 <tcp_write+0x2c8>)
 800d9bc:	f009 fb26 	bl	801700c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d9c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d9c4:	88fb      	ldrh	r3, [r7, #6]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	f080 8168 	bcs.w	800dc9c <tcp_write+0x464>
 800d9cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 8164 	beq.w	800dc9c <tcp_write+0x464>
 800d9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d6:	891b      	ldrh	r3, [r3, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 815f 	beq.w	800dc9c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d9de:	88fa      	ldrh	r2, [r7, #6]
 800d9e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d9e4:	1ad2      	subs	r2, r2, r3
 800d9e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	bfa8      	it	ge
 800d9ec:	4613      	movge	r3, r2
 800d9ee:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d9f4:	797b      	ldrb	r3, [r7, #5]
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d027      	beq.n	800da4e <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d9fe:	f107 0012 	add.w	r0, r7, #18
 800da02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800da04:	8bf9      	ldrh	r1, [r7, #30]
 800da06:	2301      	movs	r3, #1
 800da08:	9302      	str	r3, [sp, #8]
 800da0a:	797b      	ldrb	r3, [r7, #5]
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	4603      	mov	r3, r0
 800da14:	2004      	movs	r0, #4
 800da16:	f7ff fe37 	bl	800d688 <tcp_pbuf_prealloc>
 800da1a:	6578      	str	r0, [r7, #84]	; 0x54
 800da1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 8227 	beq.w	800de72 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800da24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da26:	6858      	ldr	r0, [r3, #4]
 800da28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	4413      	add	r3, r2
 800da30:	8bfa      	ldrh	r2, [r7, #30]
 800da32:	4619      	mov	r1, r3
 800da34:	f009 fa2f 	bl	8016e96 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800da38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800da3a:	f7fb fcbd 	bl	80093b8 <pbuf_clen>
 800da3e:	4603      	mov	r3, r0
 800da40:	461a      	mov	r2, r3
 800da42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da46:	4413      	add	r3, r2
 800da48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800da4c:	e03f      	b.n	800dace <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800da4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	637b      	str	r3, [r7, #52]	; 0x34
 800da54:	e002      	b.n	800da5c <tcp_write+0x224>
 800da56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	637b      	str	r3, [r7, #52]	; 0x34
 800da5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1f8      	bne.n	800da56 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800da64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da66:	7b1b      	ldrb	r3, [r3, #12]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d115      	bne.n	800da98 <tcp_write+0x260>
 800da6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da72:	8952      	ldrh	r2, [r2, #10]
 800da74:	4413      	add	r3, r2
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d10d      	bne.n	800da98 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800da7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da80:	2b00      	cmp	r3, #0
 800da82:	d006      	beq.n	800da92 <tcp_write+0x25a>
 800da84:	4b1c      	ldr	r3, [pc, #112]	; (800daf8 <tcp_write+0x2c0>)
 800da86:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800da8a:	4921      	ldr	r1, [pc, #132]	; (800db10 <tcp_write+0x2d8>)
 800da8c:	481c      	ldr	r0, [pc, #112]	; (800db00 <tcp_write+0x2c8>)
 800da8e:	f009 fabd 	bl	801700c <iprintf>
          extendlen = seglen;
 800da92:	8bfb      	ldrh	r3, [r7, #30]
 800da94:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800da96:	e01a      	b.n	800dace <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800da98:	8bfb      	ldrh	r3, [r7, #30]
 800da9a:	2201      	movs	r2, #1
 800da9c:	4619      	mov	r1, r3
 800da9e:	2004      	movs	r0, #4
 800daa0:	f7fb f884 	bl	8008bac <pbuf_alloc>
 800daa4:	6578      	str	r0, [r7, #84]	; 0x54
 800daa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f000 81e4 	beq.w	800de76 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800daae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	441a      	add	r2, r3
 800dab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dab8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800daba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dabc:	f7fb fc7c 	bl	80093b8 <pbuf_clen>
 800dac0:	4603      	mov	r3, r0
 800dac2:	461a      	mov	r2, r3
 800dac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dac8:	4413      	add	r3, r2
 800daca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800dace:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dad2:	8bfb      	ldrh	r3, [r7, #30]
 800dad4:	4413      	add	r3, r2
 800dad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dada:	e0df      	b.n	800dc9c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f000 80da 	beq.w	800dc9c <tcp_write+0x464>
 800dae8:	4b03      	ldr	r3, [pc, #12]	; (800daf8 <tcp_write+0x2c0>)
 800daea:	f240 2225 	movw	r2, #549	; 0x225
 800daee:	4909      	ldr	r1, [pc, #36]	; (800db14 <tcp_write+0x2dc>)
 800daf0:	4803      	ldr	r0, [pc, #12]	; (800db00 <tcp_write+0x2c8>)
 800daf2:	f009 fa8b 	bl	801700c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800daf6:	e0d1      	b.n	800dc9c <tcp_write+0x464>
 800daf8:	08019f28 	.word	0x08019f28
 800dafc:	0801a050 	.word	0x0801a050
 800db00:	08019f8c 	.word	0x08019f8c
 800db04:	0801a084 	.word	0x0801a084
 800db08:	0801a09c 	.word	0x0801a09c
 800db0c:	0801a0bc 	.word	0x0801a0bc
 800db10:	0801a0dc 	.word	0x0801a0dc
 800db14:	0801a108 	.word	0x0801a108
    struct pbuf *p;
    u16_t left = len - pos;
 800db18:	88fa      	ldrh	r2, [r7, #6]
 800db1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800db22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db26:	b29b      	uxth	r3, r3
 800db28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800db2e:	8b7a      	ldrh	r2, [r7, #26]
 800db30:	8bbb      	ldrh	r3, [r7, #28]
 800db32:	4293      	cmp	r3, r2
 800db34:	bf28      	it	cs
 800db36:	4613      	movcs	r3, r2
 800db38:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db3a:	797b      	ldrb	r3, [r7, #5]
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	2b00      	cmp	r3, #0
 800db42:	d036      	beq.n	800dbb2 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800db44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db48:	b29a      	uxth	r2, r3
 800db4a:	8b3b      	ldrh	r3, [r7, #24]
 800db4c:	4413      	add	r3, r2
 800db4e:	b299      	uxth	r1, r3
 800db50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db52:	2b00      	cmp	r3, #0
 800db54:	bf0c      	ite	eq
 800db56:	2301      	moveq	r3, #1
 800db58:	2300      	movne	r3, #0
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	f107 0012 	add.w	r0, r7, #18
 800db60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db62:	9302      	str	r3, [sp, #8]
 800db64:	797b      	ldrb	r3, [r7, #5]
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	4603      	mov	r3, r0
 800db6e:	2000      	movs	r0, #0
 800db70:	f7ff fd8a 	bl	800d688 <tcp_pbuf_prealloc>
 800db74:	6338      	str	r0, [r7, #48]	; 0x30
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 817e 	beq.w	800de7a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	895b      	ldrh	r3, [r3, #10]
 800db82:	8b3a      	ldrh	r2, [r7, #24]
 800db84:	429a      	cmp	r2, r3
 800db86:	d906      	bls.n	800db96 <tcp_write+0x35e>
 800db88:	4b8f      	ldr	r3, [pc, #572]	; (800ddc8 <tcp_write+0x590>)
 800db8a:	f240 2241 	movw	r2, #577	; 0x241
 800db8e:	498f      	ldr	r1, [pc, #572]	; (800ddcc <tcp_write+0x594>)
 800db90:	488f      	ldr	r0, [pc, #572]	; (800ddd0 <tcp_write+0x598>)
 800db92:	f009 fa3b 	bl	801700c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	685a      	ldr	r2, [r3, #4]
 800db9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db9e:	18d0      	adds	r0, r2, r3
 800dba0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	4413      	add	r3, r2
 800dba8:	8b3a      	ldrh	r2, [r7, #24]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	f009 f973 	bl	8016e96 <memcpy>
 800dbb0:	e02e      	b.n	800dc10 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dbb2:	8a7b      	ldrh	r3, [r7, #18]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d006      	beq.n	800dbc6 <tcp_write+0x38e>
 800dbb8:	4b83      	ldr	r3, [pc, #524]	; (800ddc8 <tcp_write+0x590>)
 800dbba:	f240 224b 	movw	r2, #587	; 0x24b
 800dbbe:	4985      	ldr	r1, [pc, #532]	; (800ddd4 <tcp_write+0x59c>)
 800dbc0:	4883      	ldr	r0, [pc, #524]	; (800ddd0 <tcp_write+0x598>)
 800dbc2:	f009 fa23 	bl	801700c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800dbc6:	8b3b      	ldrh	r3, [r7, #24]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	4619      	mov	r1, r3
 800dbcc:	2000      	movs	r0, #0
 800dbce:	f7fa ffed 	bl	8008bac <pbuf_alloc>
 800dbd2:	6178      	str	r0, [r7, #20]
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f000 8151 	beq.w	800de7e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800dbdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	441a      	add	r2, r3
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	2200      	movs	r2, #0
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	2000      	movs	r0, #0
 800dbf4:	f7fa ffda 	bl	8008bac <pbuf_alloc>
 800dbf8:	6338      	str	r0, [r7, #48]	; 0x30
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d103      	bne.n	800dc08 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800dc00:	6978      	ldr	r0, [r7, #20]
 800dc02:	f7fb fb45 	bl	8009290 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800dc06:	e13d      	b.n	800de84 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800dc08:	6979      	ldr	r1, [r7, #20]
 800dc0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc0c:	f7fb fc0e 	bl	800942c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800dc10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc12:	f7fb fbd1 	bl	80093b8 <pbuf_clen>
 800dc16:	4603      	mov	r3, r0
 800dc18:	461a      	mov	r2, r3
 800dc1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dc1e:	4413      	add	r3, r2
 800dc20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800dc24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dc28:	2b09      	cmp	r3, #9
 800dc2a:	d805      	bhi.n	800dc38 <tcp_write+0x400>
 800dc2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dc30:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d903      	bls.n	800dc40 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800dc38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc3a:	f7fb fb29 	bl	8009290 <pbuf_free>
      goto memerr;
 800dc3e:	e121      	b.n	800de84 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc48:	441a      	add	r2, r3
 800dc4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	4613      	mov	r3, r2
 800dc52:	2200      	movs	r2, #0
 800dc54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff fc8e 	bl	800d578 <tcp_create_segment>
 800dc5c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dc5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 810e 	beq.w	800de82 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800dc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <tcp_write+0x43a>
      queue = seg;
 800dc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc6e:	647b      	str	r3, [r7, #68]	; 0x44
 800dc70:	e00c      	b.n	800dc8c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d106      	bne.n	800dc86 <tcp_write+0x44e>
 800dc78:	4b53      	ldr	r3, [pc, #332]	; (800ddc8 <tcp_write+0x590>)
 800dc7a:	f240 2285 	movw	r2, #645	; 0x285
 800dc7e:	4956      	ldr	r1, [pc, #344]	; (800ddd8 <tcp_write+0x5a0>)
 800dc80:	4853      	ldr	r0, [pc, #332]	; (800ddd0 <tcp_write+0x598>)
 800dc82:	f009 f9c3 	bl	801700c <iprintf>
      prev_seg->next = seg;
 800dc86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc8a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800dc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800dc90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc94:	8b3b      	ldrh	r3, [r7, #24]
 800dc96:	4413      	add	r3, r2
 800dc98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800dc9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dca0:	88fb      	ldrh	r3, [r7, #6]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	f4ff af38 	bcc.w	800db18 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800dca8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d02c      	beq.n	800dd08 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800dcae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcb4:	e01e      	b.n	800dcf4 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb8:	891a      	ldrh	r2, [r3, #8]
 800dcba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dcbc:	4413      	add	r3, r2
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d110      	bne.n	800dcee <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800dccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcd2:	8952      	ldrh	r2, [r2, #10]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dcd8:	68b9      	ldr	r1, [r7, #8]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f009 f8db 	bl	8016e96 <memcpy>
        p->len += oversize_used;
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	895a      	ldrh	r2, [r3, #10]
 800dce4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dce6:	4413      	add	r3, r2
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1dd      	bne.n	800dcb6 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800dcfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcfc:	891a      	ldrh	r2, [r3, #8]
 800dcfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd00:	4413      	add	r3, r2
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd06:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800dd08:	8a7a      	ldrh	r2, [r7, #18]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800dd10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d018      	beq.n	800dd48 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800dd16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d106      	bne.n	800dd2a <tcp_write+0x4f2>
 800dd1c:	4b2a      	ldr	r3, [pc, #168]	; (800ddc8 <tcp_write+0x590>)
 800dd1e:	f240 22bb 	movw	r2, #699	; 0x2bb
 800dd22:	492e      	ldr	r1, [pc, #184]	; (800dddc <tcp_write+0x5a4>)
 800dd24:	482a      	ldr	r0, [pc, #168]	; (800ddd0 <tcp_write+0x598>)
 800dd26:	f009 f971 	bl	801700c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800dd2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fb fb7b 	bl	800942c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800dd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd38:	891a      	ldrh	r2, [r3, #8]
 800dd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd3c:	891b      	ldrh	r3, [r3, #8]
 800dd3e:	4413      	add	r3, r2
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd44:	811a      	strh	r2, [r3, #8]
 800dd46:	e037      	b.n	800ddb8 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800dd48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d034      	beq.n	800ddb8 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dd4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d003      	beq.n	800dd5c <tcp_write+0x524>
 800dd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <tcp_write+0x532>
 800dd5c:	4b1a      	ldr	r3, [pc, #104]	; (800ddc8 <tcp_write+0x590>)
 800dd5e:	f240 22c1 	movw	r2, #705	; 0x2c1
 800dd62:	491f      	ldr	r1, [pc, #124]	; (800dde0 <tcp_write+0x5a8>)
 800dd64:	481a      	ldr	r0, [pc, #104]	; (800ddd0 <tcp_write+0x598>)
 800dd66:	f009 f951 	bl	801700c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dd6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd70:	e009      	b.n	800dd86 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800dd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd74:	891a      	ldrh	r2, [r3, #8]
 800dd76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dd78:	4413      	add	r3, r2
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1f1      	bne.n	800dd72 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800dd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd90:	891a      	ldrh	r2, [r3, #8]
 800dd92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dd94:	4413      	add	r3, r2
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	895a      	ldrh	r2, [r3, #10]
 800dda0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dda2:	4413      	add	r3, r2
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ddaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddac:	891a      	ldrh	r2, [r3, #8]
 800ddae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddb0:	4413      	add	r3, r2
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddb6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ddb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d112      	bne.n	800dde4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddc2:	669a      	str	r2, [r3, #104]	; 0x68
 800ddc4:	e011      	b.n	800ddea <tcp_write+0x5b2>
 800ddc6:	bf00      	nop
 800ddc8:	08019f28 	.word	0x08019f28
 800ddcc:	0801a138 	.word	0x0801a138
 800ddd0:	08019f8c 	.word	0x08019f8c
 800ddd4:	0801a178 	.word	0x0801a178
 800ddd8:	0801a188 	.word	0x0801a188
 800dddc:	0801a19c 	.word	0x0801a19c
 800dde0:	0801a1d4 	.word	0x0801a1d4
  } else {
    last_unsent->next = queue;
 800dde4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dde6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dde8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddee:	88fb      	ldrh	r3, [r7, #6]
 800ddf0:	441a      	add	r2, r3
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ddfc:	88fb      	ldrh	r3, [r7, #6]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	b29a      	uxth	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800de0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00e      	beq.n	800de3a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de20:	2b00      	cmp	r3, #0
 800de22:	d10a      	bne.n	800de3a <tcp_write+0x602>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d106      	bne.n	800de3a <tcp_write+0x602>
 800de2c:	4b2c      	ldr	r3, [pc, #176]	; (800dee0 <tcp_write+0x6a8>)
 800de2e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800de32:	492c      	ldr	r1, [pc, #176]	; (800dee4 <tcp_write+0x6ac>)
 800de34:	482c      	ldr	r0, [pc, #176]	; (800dee8 <tcp_write+0x6b0>)
 800de36:	f009 f8e9 	bl	801700c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800de3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d016      	beq.n	800de6e <tcp_write+0x636>
 800de40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d012      	beq.n	800de6e <tcp_write+0x636>
 800de48:	797b      	ldrb	r3, [r7, #5]
 800de4a:	f003 0302 	and.w	r3, r3, #2
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10d      	bne.n	800de6e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800de52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	899b      	ldrh	r3, [r3, #12]
 800de58:	b29c      	uxth	r4, r3
 800de5a:	2008      	movs	r0, #8
 800de5c:	f7fa f8ec 	bl	8008038 <lwip_htons>
 800de60:	4603      	mov	r3, r0
 800de62:	461a      	mov	r2, r3
 800de64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	4322      	orrs	r2, r4
 800de6a:	b292      	uxth	r2, r2
 800de6c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	e031      	b.n	800ded6 <tcp_write+0x69e>
          goto memerr;
 800de72:	bf00      	nop
 800de74:	e006      	b.n	800de84 <tcp_write+0x64c>
            goto memerr;
 800de76:	bf00      	nop
 800de78:	e004      	b.n	800de84 <tcp_write+0x64c>
        goto memerr;
 800de7a:	bf00      	nop
 800de7c:	e002      	b.n	800de84 <tcp_write+0x64c>
        goto memerr;
 800de7e:	bf00      	nop
 800de80:	e000      	b.n	800de84 <tcp_write+0x64c>
      goto memerr;
 800de82:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	7e9b      	ldrb	r3, [r3, #26]
 800de88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800de92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <tcp_write+0x666>
    pbuf_free(concat_p);
 800de98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de9a:	f7fb f9f9 	bl	8009290 <pbuf_free>
  }
  if (queue != NULL) {
 800de9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <tcp_write+0x672>
    tcp_segs_free(queue);
 800dea4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dea6:	f7fc fcc6 	bl	800a836 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00e      	beq.n	800ded2 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10a      	bne.n	800ded2 <tcp_write+0x69a>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <tcp_write+0x69a>
 800dec4:	4b06      	ldr	r3, [pc, #24]	; (800dee0 <tcp_write+0x6a8>)
 800dec6:	f240 3202 	movw	r2, #770	; 0x302
 800deca:	4906      	ldr	r1, [pc, #24]	; (800dee4 <tcp_write+0x6ac>)
 800decc:	4806      	ldr	r0, [pc, #24]	; (800dee8 <tcp_write+0x6b0>)
 800dece:	f009 f89d 	bl	801700c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ded2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	375c      	adds	r7, #92	; 0x5c
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd90      	pop	{r4, r7, pc}
 800dede:	bf00      	nop
 800dee0:	08019f28 	.word	0x08019f28
 800dee4:	0801a20c 	.word	0x0801a20c
 800dee8:	08019f8c 	.word	0x08019f8c

0800deec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08a      	sub	sp, #40	; 0x28
 800def0:	af02      	add	r7, sp, #8
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	460b      	mov	r3, r1
 800def6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800df00:	78fb      	ldrb	r3, [r7, #3]
 800df02:	f003 0303 	and.w	r3, r3, #3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <tcp_enqueue_flags+0x2c>
 800df0a:	4b6f      	ldr	r3, [pc, #444]	; (800e0c8 <tcp_enqueue_flags+0x1dc>)
 800df0c:	f240 321b 	movw	r2, #795	; 0x31b
 800df10:	496e      	ldr	r1, [pc, #440]	; (800e0cc <tcp_enqueue_flags+0x1e0>)
 800df12:	486f      	ldr	r0, [pc, #444]	; (800e0d0 <tcp_enqueue_flags+0x1e4>)
 800df14:	f009 f87a 	bl	801700c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df1e:	2b08      	cmp	r3, #8
 800df20:	d806      	bhi.n	800df30 <tcp_enqueue_flags+0x44>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df28:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d90e      	bls.n	800df4e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800df30:	78fb      	ldrb	r3, [r7, #3]
 800df32:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800df36:	2b00      	cmp	r3, #0
 800df38:	d109      	bne.n	800df4e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	7e9b      	ldrb	r3, [r3, #26]
 800df3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df42:	b2da      	uxtb	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800df48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df4c:	e0b7      	b.n	800e0be <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800df4e:	78fb      	ldrb	r3, [r7, #3]
 800df50:	f003 0302 	and.w	r3, r3, #2
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800df58:	2301      	movs	r3, #1
 800df5a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800df5c:	7ffb      	ldrb	r3, [r7, #31]
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	b2db      	uxtb	r3, r3
 800df62:	f003 0304 	and.w	r3, r3, #4
 800df66:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800df68:	7dfb      	ldrb	r3, [r7, #23]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	2200      	movs	r2, #0
 800df6e:	4619      	mov	r1, r3
 800df70:	2000      	movs	r0, #0
 800df72:	f7fa fe1b 	bl	8008bac <pbuf_alloc>
 800df76:	6138      	str	r0, [r7, #16]
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d109      	bne.n	800df92 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7e9b      	ldrb	r3, [r3, #26]
 800df82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df86:	b2da      	uxtb	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800df8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df90:	e095      	b.n	800e0be <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	895a      	ldrh	r2, [r3, #10]
 800df96:	7dfb      	ldrb	r3, [r7, #23]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d206      	bcs.n	800dfac <tcp_enqueue_flags+0xc0>
 800df9e:	4b4a      	ldr	r3, [pc, #296]	; (800e0c8 <tcp_enqueue_flags+0x1dc>)
 800dfa0:	f240 3241 	movw	r2, #833	; 0x341
 800dfa4:	494b      	ldr	r1, [pc, #300]	; (800e0d4 <tcp_enqueue_flags+0x1e8>)
 800dfa6:	484a      	ldr	r0, [pc, #296]	; (800e0d0 <tcp_enqueue_flags+0x1e4>)
 800dfa8:	f009 f830 	bl	801700c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800dfb0:	78fa      	ldrb	r2, [r7, #3]
 800dfb2:	7ffb      	ldrb	r3, [r7, #31]
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	6939      	ldr	r1, [r7, #16]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7ff fadc 	bl	800d578 <tcp_create_segment>
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d109      	bne.n	800dfdc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7e9b      	ldrb	r3, [r3, #26]
 800dfcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dfd0:	b2da      	uxtb	r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dfd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfda:	e070      	b.n	800e0be <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	f003 0303 	and.w	r3, r3, #3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d006      	beq.n	800dff6 <tcp_enqueue_flags+0x10a>
 800dfe8:	4b37      	ldr	r3, [pc, #220]	; (800e0c8 <tcp_enqueue_flags+0x1dc>)
 800dfea:	f240 3249 	movw	r2, #841	; 0x349
 800dfee:	493a      	ldr	r1, [pc, #232]	; (800e0d8 <tcp_enqueue_flags+0x1ec>)
 800dff0:	4837      	ldr	r0, [pc, #220]	; (800e0d0 <tcp_enqueue_flags+0x1e4>)
 800dff2:	f009 f80b 	bl	801700c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	891b      	ldrh	r3, [r3, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d006      	beq.n	800e00c <tcp_enqueue_flags+0x120>
 800dffe:	4b32      	ldr	r3, [pc, #200]	; (800e0c8 <tcp_enqueue_flags+0x1dc>)
 800e000:	f240 324a 	movw	r2, #842	; 0x34a
 800e004:	4935      	ldr	r1, [pc, #212]	; (800e0dc <tcp_enqueue_flags+0x1f0>)
 800e006:	4832      	ldr	r0, [pc, #200]	; (800e0d0 <tcp_enqueue_flags+0x1e4>)
 800e008:	f009 f800 	bl	801700c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e010:	2b00      	cmp	r3, #0
 800e012:	d103      	bne.n	800e01c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	669a      	str	r2, [r3, #104]	; 0x68
 800e01a:	e00d      	b.n	800e038 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e020:	61bb      	str	r3, [r7, #24]
 800e022:	e002      	b.n	800e02a <tcp_enqueue_flags+0x13e>
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	61bb      	str	r3, [r7, #24]
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1f8      	bne.n	800e024 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	68fa      	ldr	r2, [r7, #12]
 800e036:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	f003 0302 	and.w	r3, r3, #2
 800e046:	2b00      	cmp	r3, #0
 800e048:	d104      	bne.n	800e054 <tcp_enqueue_flags+0x168>
 800e04a:	78fb      	ldrb	r3, [r7, #3]
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b00      	cmp	r3, #0
 800e052:	d004      	beq.n	800e05e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e05e:	78fb      	ldrb	r3, [r7, #3]
 800e060:	f003 0301 	and.w	r3, r3, #1
 800e064:	2b00      	cmp	r3, #0
 800e066:	d006      	beq.n	800e076 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7e9b      	ldrb	r3, [r3, #26]
 800e06c:	f043 0320 	orr.w	r3, r3, #32
 800e070:	b2da      	uxtb	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fb f99c 	bl	80093b8 <pbuf_clen>
 800e080:	4603      	mov	r3, r0
 800e082:	461a      	mov	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e08a:	4413      	add	r3, r2
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00e      	beq.n	800e0bc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <tcp_enqueue_flags+0x1d0>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d106      	bne.n	800e0bc <tcp_enqueue_flags+0x1d0>
 800e0ae:	4b06      	ldr	r3, [pc, #24]	; (800e0c8 <tcp_enqueue_flags+0x1dc>)
 800e0b0:	f240 326d 	movw	r2, #877	; 0x36d
 800e0b4:	490a      	ldr	r1, [pc, #40]	; (800e0e0 <tcp_enqueue_flags+0x1f4>)
 800e0b6:	4806      	ldr	r0, [pc, #24]	; (800e0d0 <tcp_enqueue_flags+0x1e4>)
 800e0b8:	f008 ffa8 	bl	801700c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3720      	adds	r7, #32
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	08019f28 	.word	0x08019f28
 800e0cc:	0801a22c 	.word	0x0801a22c
 800e0d0:	08019f8c 	.word	0x08019f8c
 800e0d4:	0801a284 	.word	0x0801a284
 800e0d8:	0801a2c0 	.word	0x0801a2c0
 800e0dc:	0801a2d8 	.word	0x0801a2d8
 800e0e0:	0801a304 	.word	0x0801a304

0800e0e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e0e4:	b590      	push	{r4, r7, lr}
 800e0e6:	b08b      	sub	sp, #44	; 0x2c
 800e0e8:	af04      	add	r7, sp, #16
 800e0ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e0f0:	7dbb      	ldrb	r3, [r7, #22]
 800e0f2:	b29c      	uxth	r4, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7f9 ffab 	bl	8008054 <lwip_htonl>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2200      	movs	r2, #0
 800e102:	4621      	mov	r1, r4
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7ff f97b 	bl	800d400 <tcp_output_alloc_header>
 800e10a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d109      	bne.n	800e126 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	7e9b      	ldrb	r3, [r3, #26]
 800e116:	f043 0303 	orr.w	r3, r3, #3
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e120:	f06f 0301 	mvn.w	r3, #1
 800e124:	e036      	b.n	800e194 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	3304      	adds	r3, #4
 800e12a:	4618      	mov	r0, r3
 800e12c:	f003 fb44 	bl	80117b8 <ip4_route>
 800e130:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d102      	bne.n	800e13e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800e138:	23fc      	movs	r3, #252	; 0xfc
 800e13a:	75fb      	strb	r3, [r7, #23]
 800e13c:	e012      	b.n	800e164 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800e13e:	6879      	ldr	r1, [r7, #4]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	1d18      	adds	r0, r3, #4
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	7a9c      	ldrb	r4, [r3, #10]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	7a5b      	ldrb	r3, [r3, #9]
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	9202      	str	r2, [sp, #8]
 800e150:	2206      	movs	r2, #6
 800e152:	9201      	str	r2, [sp, #4]
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	4623      	mov	r3, r4
 800e158:	4602      	mov	r2, r0
 800e15a:	6938      	ldr	r0, [r7, #16]
 800e15c:	f003 fcf2 	bl	8011b44 <ip4_output_if>
 800e160:	4603      	mov	r3, r0
 800e162:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e164:	6938      	ldr	r0, [r7, #16]
 800e166:	f7fb f893 	bl	8009290 <pbuf_free>

  if (err != ERR_OK) {
 800e16a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d007      	beq.n	800e182 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	7e9b      	ldrb	r3, [r3, #26]
 800e176:	f043 0303 	orr.w	r3, r3, #3
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	769a      	strb	r2, [r3, #26]
 800e180:	e006      	b.n	800e190 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	7e9b      	ldrb	r3, [r3, #26]
 800e186:	f023 0303 	bic.w	r3, r3, #3
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800e190:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e194:	4618      	mov	r0, r3
 800e196:	371c      	adds	r7, #28
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd90      	pop	{r4, r7, pc}

0800e19c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e19c:	b5b0      	push	{r4, r5, r7, lr}
 800e19e:	b08a      	sub	sp, #40	; 0x28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	7d1b      	ldrb	r3, [r3, #20]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d106      	bne.n	800e1ba <tcp_output+0x1e>
 800e1ac:	4b9b      	ldr	r3, [pc, #620]	; (800e41c <tcp_output+0x280>)
 800e1ae:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800e1b2:	499b      	ldr	r1, [pc, #620]	; (800e420 <tcp_output+0x284>)
 800e1b4:	489b      	ldr	r0, [pc, #620]	; (800e424 <tcp_output+0x288>)
 800e1b6:	f008 ff29 	bl	801700c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e1ba:	4b9b      	ldr	r3, [pc, #620]	; (800e428 <tcp_output+0x28c>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d101      	bne.n	800e1c8 <tcp_output+0x2c>
    return ERR_OK;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	e1cf      	b.n	800e568 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d203      	bcs.n	800e1e0 <tcp_output+0x44>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1de:	e002      	b.n	800e1e6 <tcp_output+0x4a>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e1e6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	7e9b      	ldrb	r3, [r3, #26]
 800e1f2:	f003 0302 	and.w	r3, r3, #2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d017      	beq.n	800e22a <tcp_output+0x8e>
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00f      	beq.n	800e220 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	4618      	mov	r0, r3
 800e208:	f7f9 ff24 	bl	8008054 <lwip_htonl>
 800e20c:	4602      	mov	r2, r0
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e216:	8912      	ldrh	r2, [r2, #8]
 800e218:	4413      	add	r3, r2
     (seg == NULL ||
 800e21a:	69ba      	ldr	r2, [r7, #24]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d204      	bcs.n	800e22a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7ff ff5f 	bl	800e0e4 <tcp_send_empty_ack>
 800e226:	4603      	mov	r3, r0
 800e228:	e19e      	b.n	800e568 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e22e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e230:	6a3b      	ldr	r3, [r7, #32]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d007      	beq.n	800e246 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800e236:	e002      	b.n	800e23e <tcp_output+0xa2>
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	623b      	str	r3, [r7, #32]
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d1f8      	bne.n	800e238 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3304      	adds	r3, #4
 800e24a:	4618      	mov	r0, r3
 800e24c:	f003 fab4 	bl	80117b8 <ip4_route>
 800e250:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d102      	bne.n	800e25e <tcp_output+0xc2>
    return ERR_RTE;
 800e258:	f06f 0303 	mvn.w	r3, #3
 800e25c:	e184      	b.n	800e568 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d003      	beq.n	800e26c <tcp_output+0xd0>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d111      	bne.n	800e290 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d002      	beq.n	800e278 <tcp_output+0xdc>
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	3304      	adds	r3, #4
 800e276:	e000      	b.n	800e27a <tcp_output+0xde>
 800e278:	2300      	movs	r3, #0
 800e27a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d102      	bne.n	800e288 <tcp_output+0xec>
      return ERR_RTE;
 800e282:	f06f 0303 	mvn.w	r3, #3
 800e286:	e16f      	b.n	800e568 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e292:	2b00      	cmp	r3, #0
 800e294:	f000 813e 	beq.w	800e514 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f9 fed8 	bl	8008054 <lwip_htonl>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ae:	8912      	ldrh	r2, [r2, #8]
 800e2b0:	4413      	add	r3, r2
  if (seg != NULL &&
 800e2b2:	69ba      	ldr	r2, [r7, #24]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	f080 812d 	bcs.w	800e514 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 8129 	beq.w	800e514 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	f040 8121 	bne.w	800e514 <tcp_output+0x378>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f040 811c 	bne.w	800e514 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f040 812b 	bne.w	800e53e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800e2f8:	e121      	b.n	800e53e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	899b      	ldrh	r3, [r3, #12]
 800e300:	b29b      	uxth	r3, r3
 800e302:	4618      	mov	r0, r3
 800e304:	f7f9 fe98 	bl	8008038 <lwip_htons>
 800e308:	4603      	mov	r3, r0
 800e30a:	f003 0304 	and.w	r3, r3, #4
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d006      	beq.n	800e320 <tcp_output+0x184>
 800e312:	4b42      	ldr	r3, [pc, #264]	; (800e41c <tcp_output+0x280>)
 800e314:	f240 4246 	movw	r2, #1094	; 0x446
 800e318:	4944      	ldr	r1, [pc, #272]	; (800e42c <tcp_output+0x290>)
 800e31a:	4842      	ldr	r0, [pc, #264]	; (800e424 <tcp_output+0x288>)
 800e31c:	f008 fe76 	bl	801700c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e324:	2b00      	cmp	r3, #0
 800e326:	d01f      	beq.n	800e368 <tcp_output+0x1cc>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	7e9b      	ldrb	r3, [r3, #26]
 800e32c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e330:	2b00      	cmp	r3, #0
 800e332:	d119      	bne.n	800e368 <tcp_output+0x1cc>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00b      	beq.n	800e354 <tcp_output+0x1b8>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d110      	bne.n	800e368 <tcp_output+0x1cc>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e34a:	891a      	ldrh	r2, [r3, #8]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e350:	429a      	cmp	r2, r3
 800e352:	d209      	bcs.n	800e368 <tcp_output+0x1cc>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d004      	beq.n	800e368 <tcp_output+0x1cc>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e364:	2b08      	cmp	r3, #8
 800e366:	d901      	bls.n	800e36c <tcp_output+0x1d0>
 800e368:	2301      	movs	r3, #1
 800e36a:	e000      	b.n	800e36e <tcp_output+0x1d2>
 800e36c:	2300      	movs	r3, #0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d106      	bne.n	800e380 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	7e9b      	ldrb	r3, [r3, #26]
 800e376:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 80e1 	beq.w	800e542 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	7d1b      	ldrb	r3, [r3, #20]
 800e384:	2b02      	cmp	r3, #2
 800e386:	d00d      	beq.n	800e3a4 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	899b      	ldrh	r3, [r3, #12]
 800e38e:	b29c      	uxth	r4, r3
 800e390:	2010      	movs	r0, #16
 800e392:	f7f9 fe51 	bl	8008038 <lwip_htons>
 800e396:	4603      	mov	r3, r0
 800e398:	461a      	mov	r2, r3
 800e39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	4322      	orrs	r2, r4
 800e3a0:	b292      	uxth	r2, r2
 800e3a2:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	6879      	ldr	r1, [r7, #4]
 800e3a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3aa:	f000 f8e1 	bl	800e570 <tcp_output_segment>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d009      	beq.n	800e3ce <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	7e9b      	ldrb	r3, [r3, #26]
 800e3be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	769a      	strb	r2, [r3, #26]
      return err;
 800e3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3cc:	e0cc      	b.n	800e568 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	7d1b      	ldrb	r3, [r3, #20]
 800e3da:	2b02      	cmp	r3, #2
 800e3dc:	d006      	beq.n	800e3ec <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7e9b      	ldrb	r3, [r3, #26]
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f9 fe2e 	bl	8008054 <lwip_htonl>
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	891b      	ldrh	r3, [r3, #8]
 800e3fe:	461d      	mov	r5, r3
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	899b      	ldrh	r3, [r3, #12]
 800e406:	b29b      	uxth	r3, r3
 800e408:	4618      	mov	r0, r3
 800e40a:	f7f9 fe15 	bl	8008038 <lwip_htons>
 800e40e:	4603      	mov	r3, r0
 800e410:	f003 0303 	and.w	r3, r3, #3
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00b      	beq.n	800e430 <tcp_output+0x294>
 800e418:	2301      	movs	r3, #1
 800e41a:	e00a      	b.n	800e432 <tcp_output+0x296>
 800e41c:	08019f28 	.word	0x08019f28
 800e420:	0801a32c 	.word	0x0801a32c
 800e424:	08019f8c 	.word	0x08019f8c
 800e428:	20003960 	.word	0x20003960
 800e42c:	0801a354 	.word	0x0801a354
 800e430:	2300      	movs	r3, #0
 800e432:	442b      	add	r3, r5
 800e434:	4423      	add	r3, r4
 800e436:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	2b00      	cmp	r3, #0
 800e442:	da02      	bge.n	800e44a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	891b      	ldrh	r3, [r3, #8]
 800e44e:	461c      	mov	r4, r3
 800e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	899b      	ldrh	r3, [r3, #12]
 800e456:	b29b      	uxth	r3, r3
 800e458:	4618      	mov	r0, r3
 800e45a:	f7f9 fded 	bl	8008038 <lwip_htons>
 800e45e:	4603      	mov	r3, r0
 800e460:	f003 0303 	and.w	r3, r3, #3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <tcp_output+0x2d0>
 800e468:	2301      	movs	r3, #1
 800e46a:	e000      	b.n	800e46e <tcp_output+0x2d2>
 800e46c:	2300      	movs	r3, #0
 800e46e:	4423      	add	r3, r4
 800e470:	2b00      	cmp	r3, #0
 800e472:	d049      	beq.n	800e508 <tcp_output+0x36c>
      seg->next = NULL;
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d105      	bne.n	800e48e <tcp_output+0x2f2>
        pcb->unacked = seg;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e486:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48a:	623b      	str	r3, [r7, #32]
 800e48c:	e03f      	b.n	800e50e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	f7f9 fddd 	bl	8008054 <lwip_htonl>
 800e49a:	4604      	mov	r4, r0
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7f9 fdd6 	bl	8008054 <lwip_htonl>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	1ae3      	subs	r3, r4, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	da24      	bge.n	800e4fa <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	336c      	adds	r3, #108	; 0x6c
 800e4b4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e4b6:	e002      	b.n	800e4be <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d011      	beq.n	800e4ea <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7f9 fdc0 	bl	8008054 <lwip_htonl>
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7f9 fdb9 	bl	8008054 <lwip_htonl>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	dbe6      	blt.n	800e4b8 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4f6:	601a      	str	r2, [r3, #0]
 800e4f8:	e009      	b.n	800e50e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4fe:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e500:	6a3b      	ldr	r3, [r7, #32]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	623b      	str	r3, [r7, #32]
 800e506:	e002      	b.n	800e50e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e50a:	f7fc f9a8 	bl	800a85e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e512:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	2b00      	cmp	r3, #0
 800e518:	d015      	beq.n	800e546 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	4618      	mov	r0, r3
 800e522:	f7f9 fd97 	bl	8008054 <lwip_htonl>
 800e526:	4602      	mov	r2, r0
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e530:	8912      	ldrh	r2, [r2, #8]
 800e532:	4413      	add	r3, r2
  while (seg != NULL &&
 800e534:	69ba      	ldr	r2, [r7, #24]
 800e536:	429a      	cmp	r2, r3
 800e538:	f4bf aedf 	bcs.w	800e2fa <tcp_output+0x15e>
  }
output_done:
 800e53c:	e003      	b.n	800e546 <tcp_output+0x3aa>
    goto output_done;
 800e53e:	bf00      	nop
 800e540:	e002      	b.n	800e548 <tcp_output+0x3ac>
      break;
 800e542:	bf00      	nop
 800e544:	e000      	b.n	800e548 <tcp_output+0x3ac>
output_done:
 800e546:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d103      	bne.n	800e558 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	7e9b      	ldrb	r3, [r3, #26]
 800e55c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e560:	b2da      	uxtb	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3728      	adds	r7, #40	; 0x28
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bdb0      	pop	{r4, r5, r7, pc}

0800e570 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e570:	b5b0      	push	{r4, r5, r7, lr}
 800e572:	b08c      	sub	sp, #48	; 0x30
 800e574:	af04      	add	r7, sp, #16
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	89db      	ldrh	r3, [r3, #14]
 800e582:	2b01      	cmp	r3, #1
 800e584:	d001      	beq.n	800e58a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	e08b      	b.n	800e6a2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	68dc      	ldr	r4, [r3, #12]
 800e592:	4610      	mov	r0, r2
 800e594:	f7f9 fd5e 	bl	8008054 <lwip_htonl>
 800e598:	4603      	mov	r3, r0
 800e59a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	68dc      	ldr	r4, [r3, #12]
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	f7f9 fd47 	bl	8008038 <lwip_htons>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e5b6:	441a      	add	r2, r3
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	3314      	adds	r3, #20
 800e5c2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	7a9b      	ldrb	r3, [r3, #10]
 800e5c8:	f003 0301 	and.w	r3, r3, #1
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d014      	beq.n	800e5fa <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e5da:	f7fc fc73 	bl	800aec4 <tcp_eff_send_mss_impl>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e5e2:	8b7b      	ldrh	r3, [r7, #26]
 800e5e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7f9 fd33 	bl	8008054 <lwip_htonl>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e600:	2b00      	cmp	r3, #0
 800e602:	da02      	bge.n	800e60a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	2200      	movs	r2, #0
 800e608:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10c      	bne.n	800e62c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800e612:	4b26      	ldr	r3, [pc, #152]	; (800e6ac <tcp_output_segment+0x13c>)
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	4618      	mov	r0, r3
 800e622:	f7f9 fd17 	bl	8008054 <lwip_htonl>
 800e626:	4602      	mov	r2, r0
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	461a      	mov	r2, r3
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	8959      	ldrh	r1, [r3, #10]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	8b3a      	ldrh	r2, [r7, #24]
 800e648:	1a8a      	subs	r2, r1, r2
 800e64a:	b292      	uxth	r2, r2
 800e64c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	8919      	ldrh	r1, [r3, #8]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	8b3a      	ldrh	r2, [r7, #24]
 800e65a:	1a8a      	subs	r2, r1, r2
 800e65c:	b292      	uxth	r2, r2
 800e65e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	68d2      	ldr	r2, [r2, #12]
 800e668:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	2200      	movs	r2, #0
 800e670:	741a      	strb	r2, [r3, #16]
 800e672:	2200      	movs	r2, #0
 800e674:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	6858      	ldr	r0, [r3, #4]
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	1d1c      	adds	r4, r3, #4
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	7a9d      	ldrb	r5, [r3, #10]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	7a5b      	ldrb	r3, [r3, #9]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	9202      	str	r2, [sp, #8]
 800e68c:	2206      	movs	r2, #6
 800e68e:	9201      	str	r2, [sp, #4]
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	462b      	mov	r3, r5
 800e694:	4622      	mov	r2, r4
 800e696:	f003 fa55 	bl	8011b44 <ip4_output_if>
 800e69a:	4603      	mov	r3, r0
 800e69c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800e69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3720      	adds	r7, #32
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	20003950 	.word	0x20003950

0800e6b0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b08c      	sub	sp, #48	; 0x30
 800e6b4:	af04      	add	r7, sp, #16
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e6be:	2200      	movs	r2, #0
 800e6c0:	2114      	movs	r1, #20
 800e6c2:	2001      	movs	r0, #1
 800e6c4:	f7fa fa72 	bl	8008bac <pbuf_alloc>
 800e6c8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d05b      	beq.n	800e788 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	895b      	ldrh	r3, [r3, #10]
 800e6d4:	2b13      	cmp	r3, #19
 800e6d6:	d806      	bhi.n	800e6e6 <tcp_rst+0x36>
 800e6d8:	4b2d      	ldr	r3, [pc, #180]	; (800e790 <tcp_rst+0xe0>)
 800e6da:	f240 524d 	movw	r2, #1357	; 0x54d
 800e6de:	492d      	ldr	r1, [pc, #180]	; (800e794 <tcp_rst+0xe4>)
 800e6e0:	482d      	ldr	r0, [pc, #180]	; (800e798 <tcp_rst+0xe8>)
 800e6e2:	f008 fc93 	bl	801700c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800e6ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7f9 fca2 	bl	8008038 <lwip_htons>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800e6fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f9 fc9a 	bl	8008038 <lwip_htons>
 800e704:	4603      	mov	r3, r0
 800e706:	461a      	mov	r2, r3
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f7f9 fca1 	bl	8008054 <lwip_htonl>
 800e712:	4602      	mov	r2, r0
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800e718:	68b8      	ldr	r0, [r7, #8]
 800e71a:	f7f9 fc9b 	bl	8008054 <lwip_htonl>
 800e71e:	4602      	mov	r2, r0
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e724:	f245 0014 	movw	r0, #20500	; 0x5014
 800e728:	f7f9 fc86 	bl	8008038 <lwip_htons>
 800e72c:	4603      	mov	r3, r0
 800e72e:	461a      	mov	r2, r3
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	2200      	movs	r2, #0
 800e738:	f042 0208 	orr.w	r2, r2, #8
 800e73c:	739a      	strb	r2, [r3, #14]
 800e73e:	2200      	movs	r2, #0
 800e740:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e744:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	2200      	movs	r2, #0
 800e74a:	741a      	strb	r2, [r3, #16]
 800e74c:	2200      	movs	r2, #0
 800e74e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	2200      	movs	r2, #0
 800e754:	749a      	strb	r2, [r3, #18]
 800e756:	2200      	movs	r2, #0
 800e758:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800e75a:	6838      	ldr	r0, [r7, #0]
 800e75c:	f003 f82c 	bl	80117b8 <ip4_route>
 800e760:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00b      	beq.n	800e780 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	9302      	str	r3, [sp, #8]
 800e76c:	2306      	movs	r3, #6
 800e76e:	9301      	str	r3, [sp, #4]
 800e770:	2300      	movs	r3, #0
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	23ff      	movs	r3, #255	; 0xff
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	6879      	ldr	r1, [r7, #4]
 800e77a:	69f8      	ldr	r0, [r7, #28]
 800e77c:	f003 f9e2 	bl	8011b44 <ip4_output_if>
  }
  pbuf_free(p);
 800e780:	69f8      	ldr	r0, [r7, #28]
 800e782:	f7fa fd85 	bl	8009290 <pbuf_free>
 800e786:	e000      	b.n	800e78a <tcp_rst+0xda>
    return;
 800e788:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e78a:	3720      	adds	r7, #32
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	08019f28 	.word	0x08019f28
 800e794:	08019f5c 	.word	0x08019f5c
 800e798:	08019f8c 	.word	0x08019f8c

0800e79c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d029      	beq.n	800e800 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7b0:	60fb      	str	r3, [r7, #12]
 800e7b2:	e002      	b.n	800e7ba <tcp_rexmit_rto+0x1e>
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	60fb      	str	r3, [r7, #12]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1f8      	bne.n	800e7b4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7de:	2bff      	cmp	r3, #255	; 0xff
 800e7e0:	d007      	beq.n	800e7f2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	b2da      	uxtb	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7ff fccf 	bl	800e19c <tcp_output>
 800e7fe:	e000      	b.n	800e802 <tcp_rexmit_rto+0x66>
    return;
 800e800:	bf00      	nop
}
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e808:	b590      	push	{r4, r7, lr}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e814:	2b00      	cmp	r3, #0
 800e816:	d043      	beq.n	800e8a0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e81c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	3368      	adds	r3, #104	; 0x68
 800e82a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e82c:	e002      	b.n	800e834 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d011      	beq.n	800e860 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	4618      	mov	r0, r3
 800e846:	f7f9 fc05 	bl	8008054 <lwip_htonl>
 800e84a:	4604      	mov	r4, r0
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	4618      	mov	r0, r3
 800e854:	f7f9 fbfe 	bl	8008054 <lwip_htonl>
 800e858:	4603      	mov	r3, r0
 800e85a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dbe6      	blt.n	800e82e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d103      	bne.n	800e87e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e884:	2bff      	cmp	r3, #255	; 0xff
 800e886:	d007      	beq.n	800e898 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e88e:	3301      	adds	r3, #1
 800e890:	b2da      	uxtb	r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	635a      	str	r2, [r3, #52]	; 0x34
 800e89e:	e000      	b.n	800e8a2 <tcp_rexmit+0x9a>
    return;
 800e8a0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800e8a2:	3714      	adds	r7, #20
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd90      	pop	{r4, r7, pc}

0800e8a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d04a      	beq.n	800e94e <tcp_rexmit_fast+0xa6>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	7e9b      	ldrb	r3, [r3, #26]
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d144      	bne.n	800e94e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff ff9f 	bl	800e808 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d207      	bcs.n	800e8ea <tcp_rexmit_fast+0x42>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8e0:	0fda      	lsrs	r2, r3, #31
 800e8e2:	4413      	add	r3, r2
 800e8e4:	105b      	asrs	r3, r3, #1
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	e006      	b.n	800e8f8 <tcp_rexmit_fast+0x50>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8f0:	0fda      	lsrs	r2, r3, #31
 800e8f2:	4413      	add	r3, r2
 800e8f4:	105b      	asrs	r3, r3, #1
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e904:	461a      	mov	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e90a:	005b      	lsls	r3, r3, #1
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d206      	bcs.n	800e91e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e914:	005b      	lsls	r3, r3, #1
 800e916:	b29a      	uxth	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e928:	4619      	mov	r1, r3
 800e92a:	0049      	lsls	r1, r1, #1
 800e92c:	440b      	add	r3, r1
 800e92e:	b29b      	uxth	r3, r3
 800e930:	4413      	add	r3, r2
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	7e9b      	ldrb	r3, [r3, #26]
 800e93e:	f043 0304 	orr.w	r3, r3, #4
 800e942:	b2da      	uxtb	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800e94e:	bf00      	nop
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b08a      	sub	sp, #40	; 0x28
 800e95a:	af04      	add	r7, sp, #16
 800e95c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e962:	3b01      	subs	r3, #1
 800e964:	4618      	mov	r0, r3
 800e966:	f7f9 fb75 	bl	8008054 <lwip_htonl>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2200      	movs	r2, #0
 800e96e:	2100      	movs	r1, #0
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7fe fd45 	bl	800d400 <tcp_output_alloc_header>
 800e976:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d102      	bne.n	800e984 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e97e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e982:	e021      	b.n	800e9c8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3304      	adds	r3, #4
 800e988:	4618      	mov	r0, r3
 800e98a:	f002 ff15 	bl	80117b8 <ip4_route>
 800e98e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d102      	bne.n	800e99c <tcp_keepalive+0x46>
    err = ERR_RTE;
 800e996:	23fc      	movs	r3, #252	; 0xfc
 800e998:	75fb      	strb	r3, [r7, #23]
 800e99a:	e010      	b.n	800e9be <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800e99c:	6879      	ldr	r1, [r7, #4]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	1d1a      	adds	r2, r3, #4
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	7a98      	ldrb	r0, [r3, #10]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	9302      	str	r3, [sp, #8]
 800e9aa:	2306      	movs	r3, #6
 800e9ac:	9301      	str	r3, [sp, #4]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	6938      	ldr	r0, [r7, #16]
 800e9b6:	f003 f8c5 	bl	8011b44 <ip4_output_if>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e9be:	6938      	ldr	r0, [r7, #16]
 800e9c0:	f7fa fc66 	bl	8009290 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e9c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3718      	adds	r7, #24
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e9d0:	b590      	push	{r4, r7, lr}
 800e9d2:	b08f      	sub	sp, #60	; 0x3c
 800e9d4:	af04      	add	r7, sp, #16
 800e9d6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9dc:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d102      	bne.n	800e9ea <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9e8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d101      	bne.n	800e9f4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	e085      	b.n	800eb00 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	899b      	ldrh	r3, [r3, #12]
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7f9 fb1b 	bl	8008038 <lwip_htons>
 800ea02:	4603      	mov	r3, r0
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d005      	beq.n	800ea18 <tcp_zero_window_probe+0x48>
 800ea0c:	6a3b      	ldr	r3, [r7, #32]
 800ea0e:	891b      	ldrh	r3, [r3, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d101      	bne.n	800ea18 <tcp_zero_window_probe+0x48>
 800ea14:	2301      	movs	r3, #1
 800ea16:	e000      	b.n	800ea1a <tcp_zero_window_probe+0x4a>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ea1c:	7ffb      	ldrb	r3, [r7, #31]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	bf0c      	ite	eq
 800ea22:	2301      	moveq	r3, #1
 800ea24:	2300      	movne	r3, #0
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	8bba      	ldrh	r2, [r7, #28]
 800ea32:	2100      	movs	r1, #0
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7fe fce3 	bl	800d400 <tcp_output_alloc_header>
 800ea3a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d102      	bne.n	800ea48 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea46:	e05b      	b.n	800eb00 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ea4e:	7ffb      	ldrb	r3, [r7, #31]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00e      	beq.n	800ea72 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	899b      	ldrh	r3, [r3, #12]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea5e:	b29c      	uxth	r4, r3
 800ea60:	2011      	movs	r0, #17
 800ea62:	f7f9 fae9 	bl	8008038 <lwip_htons>
 800ea66:	4603      	mov	r3, r0
 800ea68:	4323      	orrs	r3, r4
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	819a      	strh	r2, [r3, #12]
 800ea70:	e010      	b.n	800ea94 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	3314      	adds	r3, #20
 800ea78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	6858      	ldr	r0, [r3, #4]
 800ea7e:	6a3b      	ldr	r3, [r7, #32]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	891a      	ldrh	r2, [r3, #8]
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	891b      	ldrh	r3, [r3, #8]
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	6939      	ldr	r1, [r7, #16]
 800ea90:	f7fa fdfe 	bl	8009690 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f9 fada 	bl	8008054 <lwip_htonl>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	da02      	bge.n	800eab8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3304      	adds	r3, #4
 800eabc:	4618      	mov	r0, r3
 800eabe:	f002 fe7b 	bl	80117b8 <ip4_route>
 800eac2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d103      	bne.n	800ead2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800eaca:	23fc      	movs	r3, #252	; 0xfc
 800eacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ead0:	e011      	b.n	800eaf6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ead2:	6879      	ldr	r1, [r7, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	1d1a      	adds	r2, r3, #4
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	7a98      	ldrb	r0, [r3, #10]
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	9302      	str	r3, [sp, #8]
 800eae0:	2306      	movs	r3, #6
 800eae2:	9301      	str	r3, [sp, #4]
 800eae4:	2300      	movs	r3, #0
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	4603      	mov	r3, r0
 800eaea:	69b8      	ldr	r0, [r7, #24]
 800eaec:	f003 f82a 	bl	8011b44 <ip4_output_if>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800eaf6:	69b8      	ldr	r0, [r7, #24]
 800eaf8:	f7fa fbca 	bl	8009290 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eafc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	372c      	adds	r7, #44	; 0x2c
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd90      	pop	{r4, r7, pc}

0800eb08 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eb10:	f7fa fe40 	bl	8009794 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eb14:	4b0a      	ldr	r3, [pc, #40]	; (800eb40 <tcpip_tcp_timer+0x38>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d103      	bne.n	800eb24 <tcpip_tcp_timer+0x1c>
 800eb1c:	4b09      	ldr	r3, [pc, #36]	; (800eb44 <tcpip_tcp_timer+0x3c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d005      	beq.n	800eb30 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb24:	2200      	movs	r2, #0
 800eb26:	4908      	ldr	r1, [pc, #32]	; (800eb48 <tcpip_tcp_timer+0x40>)
 800eb28:	20fa      	movs	r0, #250	; 0xfa
 800eb2a:	f000 f86f 	bl	800ec0c <sys_timeout>
 800eb2e:	e002      	b.n	800eb36 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb30:	4b06      	ldr	r3, [pc, #24]	; (800eb4c <tcpip_tcp_timer+0x44>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]
  }
}
 800eb36:	bf00      	nop
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	2000394c 	.word	0x2000394c
 800eb44:	2000395c 	.word	0x2000395c
 800eb48:	0800eb09 	.word	0x0800eb09
 800eb4c:	20000284 	.word	0x20000284

0800eb50 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb54:	4b0a      	ldr	r3, [pc, #40]	; (800eb80 <tcp_timer_needed+0x30>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10f      	bne.n	800eb7c <tcp_timer_needed+0x2c>
 800eb5c:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <tcp_timer_needed+0x34>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d103      	bne.n	800eb6c <tcp_timer_needed+0x1c>
 800eb64:	4b08      	ldr	r3, [pc, #32]	; (800eb88 <tcp_timer_needed+0x38>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d007      	beq.n	800eb7c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eb6c:	4b04      	ldr	r3, [pc, #16]	; (800eb80 <tcp_timer_needed+0x30>)
 800eb6e:	2201      	movs	r2, #1
 800eb70:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb72:	2200      	movs	r2, #0
 800eb74:	4905      	ldr	r1, [pc, #20]	; (800eb8c <tcp_timer_needed+0x3c>)
 800eb76:	20fa      	movs	r0, #250	; 0xfa
 800eb78:	f000 f848 	bl	800ec0c <sys_timeout>
  }
}
 800eb7c:	bf00      	nop
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	20000284 	.word	0x20000284
 800eb84:	2000394c 	.word	0x2000394c
 800eb88:	2000395c 	.word	0x2000395c
 800eb8c:	0800eb09 	.word	0x0800eb09

0800eb90 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	4903      	ldr	r1, [pc, #12]	; (800ebb8 <cyclic_timer+0x28>)
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f000 f82e 	bl	800ec0c <sys_timeout>
}
 800ebb0:	bf00      	nop
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	0800eb91 	.word	0x0800eb91

0800ebbc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	607b      	str	r3, [r7, #4]
 800ebc6:	e00e      	b.n	800ebe6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ebc8:	4a0d      	ldr	r2, [pc, #52]	; (800ec00 <sys_timeouts_init+0x44>)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	00db      	lsls	r3, r3, #3
 800ebd4:	4a0a      	ldr	r2, [pc, #40]	; (800ec00 <sys_timeouts_init+0x44>)
 800ebd6:	4413      	add	r3, r2
 800ebd8:	461a      	mov	r2, r3
 800ebda:	490a      	ldr	r1, [pc, #40]	; (800ec04 <sys_timeouts_init+0x48>)
 800ebdc:	f000 f816 	bl	800ec0c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	607b      	str	r3, [r7, #4]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b04      	cmp	r3, #4
 800ebea:	d9ed      	bls.n	800ebc8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800ebec:	f005 fe4e 	bl	801488c <sys_now>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	4b05      	ldr	r3, [pc, #20]	; (800ec08 <sys_timeouts_init+0x4c>)
 800ebf4:	601a      	str	r2, [r3, #0]
}
 800ebf6:	bf00      	nop
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	0801b318 	.word	0x0801b318
 800ec04:	0800eb91 	.word	0x0800eb91
 800ec08:	20000280 	.word	0x20000280

0800ec0c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ec18:	2006      	movs	r0, #6
 800ec1a:	f7f9 fdbb 	bl	8008794 <memp_malloc>
 800ec1e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10a      	bne.n	800ec3c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f040 8084 	bne.w	800ed36 <sys_timeout+0x12a>
 800ec2e:	4b44      	ldr	r3, [pc, #272]	; (800ed40 <sys_timeout+0x134>)
 800ec30:	22d4      	movs	r2, #212	; 0xd4
 800ec32:	4944      	ldr	r1, [pc, #272]	; (800ed44 <sys_timeout+0x138>)
 800ec34:	4844      	ldr	r0, [pc, #272]	; (800ed48 <sys_timeout+0x13c>)
 800ec36:	f008 f9e9 	bl	801700c <iprintf>
    return;
 800ec3a:	e07c      	b.n	800ed36 <sys_timeout+0x12a>
  }

  now = sys_now();
 800ec3c:	f005 fe26 	bl	801488c <sys_now>
 800ec40:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800ec42:	4b42      	ldr	r3, [pc, #264]	; (800ed4c <sys_timeout+0x140>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d105      	bne.n	800ec56 <sys_timeout+0x4a>
    diff = 0;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800ec4e:	4a40      	ldr	r2, [pc, #256]	; (800ed50 <sys_timeout+0x144>)
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	e004      	b.n	800ec60 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800ec56:	4b3e      	ldr	r3, [pc, #248]	; (800ed50 <sys_timeout+0x144>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	693a      	ldr	r2, [r7, #16]
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2200      	movs	r2, #0
 800ec64:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	68ba      	ldr	r2, [r7, #8]
 800ec6a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	441a      	add	r2, r3
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ec7c:	4b33      	ldr	r3, [pc, #204]	; (800ed4c <sys_timeout+0x140>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d103      	bne.n	800ec8c <sys_timeout+0x80>
    next_timeout = timeout;
 800ec84:	4a31      	ldr	r2, [pc, #196]	; (800ed4c <sys_timeout+0x140>)
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6013      	str	r3, [r2, #0]
    return;
 800ec8a:	e055      	b.n	800ed38 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800ec8c:	4b2f      	ldr	r3, [pc, #188]	; (800ed4c <sys_timeout+0x140>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d20f      	bcs.n	800ecb8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800ec98:	4b2c      	ldr	r3, [pc, #176]	; (800ed4c <sys_timeout+0x140>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	6859      	ldr	r1, [r3, #4]
 800ec9e:	4b2b      	ldr	r3, [pc, #172]	; (800ed4c <sys_timeout+0x140>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	1a8a      	subs	r2, r1, r2
 800eca6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800eca8:	4b28      	ldr	r3, [pc, #160]	; (800ed4c <sys_timeout+0x140>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ecb0:	4a26      	ldr	r2, [pc, #152]	; (800ed4c <sys_timeout+0x140>)
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	6013      	str	r3, [r2, #0]
 800ecb6:	e03f      	b.n	800ed38 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ecb8:	4b24      	ldr	r3, [pc, #144]	; (800ed4c <sys_timeout+0x140>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	61fb      	str	r3, [r7, #28]
 800ecbe:	e036      	b.n	800ed2e <sys_timeout+0x122>
      timeout->time -= t->time;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	1ad2      	subs	r2, r2, r3
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d006      	beq.n	800ece4 <sys_timeout+0xd8>
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	685a      	ldr	r2, [r3, #4]
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d921      	bls.n	800ed28 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d009      	beq.n	800ed00 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	6859      	ldr	r1, [r3, #4]
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	1a8a      	subs	r2, r1, r2
 800ecfc:	605a      	str	r2, [r3, #4]
 800ecfe:	e00b      	b.n	800ed18 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d206      	bcs.n	800ed18 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800ed0a:	4b10      	ldr	r3, [pc, #64]	; (800ed4c <sys_timeout+0x140>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	685a      	ldr	r2, [r3, #4]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	441a      	add	r2, r3
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	601a      	str	r2, [r3, #0]
        break;
 800ed26:	e007      	b.n	800ed38 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	61fb      	str	r3, [r7, #28]
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1c5      	bne.n	800ecc0 <sys_timeout+0xb4>
 800ed34:	e000      	b.n	800ed38 <sys_timeout+0x12c>
    return;
 800ed36:	bf00      	nop
      }
    }
  }
}
 800ed38:	3720      	adds	r7, #32
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	0801a36c 	.word	0x0801a36c
 800ed44:	0801a3a0 	.word	0x0801a3a0
 800ed48:	0801a3e0 	.word	0x0801a3e0
 800ed4c:	2000027c 	.word	0x2000027c
 800ed50:	20000280 	.word	0x20000280

0800ed54 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800ed5a:	4b24      	ldr	r3, [pc, #144]	; (800edec <sys_check_timeouts+0x98>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d040      	beq.n	800ede4 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800ed62:	f005 fd93 	bl	801488c <sys_now>
 800ed66:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ed68:	4b21      	ldr	r3, [pc, #132]	; (800edf0 <sys_check_timeouts+0x9c>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800ed72:	4b20      	ldr	r3, [pc, #128]	; (800edf4 <sys_check_timeouts+0xa0>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <sys_check_timeouts+0x2c>
 800ed7c:	f7f9 fee6 	bl	8008b4c <pbuf_free_ooseq>
      had_one = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800ed84:	4b19      	ldr	r3, [pc, #100]	; (800edec <sys_check_timeouts+0x98>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d026      	beq.n	800edde <sys_check_timeouts+0x8a>
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d321      	bcc.n	800edde <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	685a      	ldr	r2, [r3, #4]
 800eda2:	4b13      	ldr	r3, [pc, #76]	; (800edf0 <sys_check_timeouts+0x9c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4413      	add	r3, r2
 800eda8:	4a11      	ldr	r2, [pc, #68]	; (800edf0 <sys_check_timeouts+0x9c>)
 800edaa:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	697a      	ldr	r2, [r7, #20]
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a0c      	ldr	r2, [pc, #48]	; (800edec <sys_check_timeouts+0x98>)
 800edbc:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800edca:	68b9      	ldr	r1, [r7, #8]
 800edcc:	2006      	movs	r0, #6
 800edce:	f7f9 fd2d 	bl	800882c <memp_free>
        if (handler != NULL) {
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d002      	beq.n	800edde <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6838      	ldr	r0, [r7, #0]
 800eddc:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800edde:	7cfb      	ldrb	r3, [r7, #19]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1c6      	bne.n	800ed72 <sys_check_timeouts+0x1e>
  }
}
 800ede4:	bf00      	nop
 800ede6:	3718      	adds	r7, #24
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	2000027c 	.word	0x2000027c
 800edf0:	20000280 	.word	0x20000280
 800edf4:	20003944 	.word	0x20003944

0800edf8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800edf8:	b480      	push	{r7}
 800edfa:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800edfc:	bf00      	nop
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
	...

0800ee08 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ee12:	4b17      	ldr	r3, [pc, #92]	; (800ee70 <udp_new_port+0x68>)
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	b291      	uxth	r1, r2
 800ee1a:	4a15      	ldr	r2, [pc, #84]	; (800ee70 <udp_new_port+0x68>)
 800ee1c:	8011      	strh	r1, [r2, #0]
 800ee1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d103      	bne.n	800ee2e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ee26:	4b12      	ldr	r3, [pc, #72]	; (800ee70 <udp_new_port+0x68>)
 800ee28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ee2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee2e:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <udp_new_port+0x6c>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	603b      	str	r3, [r7, #0]
 800ee34:	e011      	b.n	800ee5a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	8a5a      	ldrh	r2, [r3, #18]
 800ee3a:	4b0d      	ldr	r3, [pc, #52]	; (800ee70 <udp_new_port+0x68>)
 800ee3c:	881b      	ldrh	r3, [r3, #0]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d108      	bne.n	800ee54 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ee42:	88fb      	ldrh	r3, [r7, #6]
 800ee44:	3301      	adds	r3, #1
 800ee46:	80fb      	strh	r3, [r7, #6]
 800ee48:	88fb      	ldrh	r3, [r7, #6]
 800ee4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee4e:	d3e0      	bcc.n	800ee12 <udp_new_port+0xa>
        return 0;
 800ee50:	2300      	movs	r3, #0
 800ee52:	e007      	b.n	800ee64 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	603b      	str	r3, [r7, #0]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1ea      	bne.n	800ee36 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ee60:	4b03      	ldr	r3, [pc, #12]	; (800ee70 <udp_new_port+0x68>)
 800ee62:	881b      	ldrh	r3, [r3, #0]
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	20000120 	.word	0x20000120
 800ee74:	20003964 	.word	0x20003964

0800ee78 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	4613      	mov	r3, r2
 800ee84:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ee86:	79fb      	ldrb	r3, [r7, #7]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d018      	beq.n	800eebe <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d013      	beq.n	800eeba <udp_input_local_match+0x42>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d00f      	beq.n	800eeba <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee9a:	4b14      	ldr	r3, [pc, #80]	; (800eeec <udp_input_local_match+0x74>)
 800ee9c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eea2:	d00a      	beq.n	800eeba <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	4b10      	ldr	r3, [pc, #64]	; (800eeec <udp_input_local_match+0x74>)
 800eeaa:	695b      	ldr	r3, [r3, #20]
 800eeac:	405a      	eors	r2, r3
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d110      	bne.n	800eedc <udp_input_local_match+0x64>
          return 1;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e00f      	b.n	800eede <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d009      	beq.n	800eed8 <udp_input_local_match+0x60>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d005      	beq.n	800eed8 <udp_input_local_match+0x60>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	4b06      	ldr	r3, [pc, #24]	; (800eeec <udp_input_local_match+0x74>)
 800eed2:	695b      	ldr	r3, [r3, #20]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d101      	bne.n	800eedc <udp_input_local_match+0x64>
      return 1;
 800eed8:	2301      	movs	r3, #1
 800eeda:	e000      	b.n	800eede <udp_input_local_match+0x66>
    }
  }

  return 0;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3714      	adds	r7, #20
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop
 800eeec:	200003fc 	.word	0x200003fc

0800eef0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eef0:	b590      	push	{r4, r7, lr}
 800eef2:	b08d      	sub	sp, #52	; 0x34
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	895b      	ldrh	r3, [r3, #10]
 800ef02:	2b07      	cmp	r3, #7
 800ef04:	d803      	bhi.n	800ef0e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7fa f9c2 	bl	8009290 <pbuf_free>
    goto end;
 800ef0c:	e0c6      	b.n	800f09c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ef14:	4b63      	ldr	r3, [pc, #396]	; (800f0a4 <udp_input+0x1b4>)
 800ef16:	695a      	ldr	r2, [r3, #20]
 800ef18:	4b62      	ldr	r3, [pc, #392]	; (800f0a4 <udp_input+0x1b4>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	4610      	mov	r0, r2
 800ef20:	f002 fee2 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 800ef24:	4603      	mov	r3, r0
 800ef26:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	881b      	ldrh	r3, [r3, #0]
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7f9 f882 	bl	8008038 <lwip_htons>
 800ef34:	4603      	mov	r3, r0
 800ef36:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	885b      	ldrh	r3, [r3, #2]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7f9 f87a 	bl	8008038 <lwip_htons>
 800ef44:	4603      	mov	r3, r0
 800ef46:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef54:	4b54      	ldr	r3, [pc, #336]	; (800f0a8 <udp_input+0x1b8>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	627b      	str	r3, [r7, #36]	; 0x24
 800ef5a:	e03b      	b.n	800efd4 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	8a5b      	ldrh	r3, [r3, #18]
 800ef60:	89fa      	ldrh	r2, [r7, #14]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d131      	bne.n	800efca <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ef66:	7cfb      	ldrb	r3, [r7, #19]
 800ef68:	461a      	mov	r2, r3
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef6e:	f7ff ff83 	bl	800ee78 <udp_input_local_match>
 800ef72:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d028      	beq.n	800efca <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	7c1b      	ldrb	r3, [r3, #16]
 800ef7c:	f003 0304 	and.w	r3, r3, #4
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d104      	bne.n	800ef8e <udp_input+0x9e>
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef90:	8a9b      	ldrh	r3, [r3, #20]
 800ef92:	8a3a      	ldrh	r2, [r7, #16]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d118      	bne.n	800efca <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d005      	beq.n	800efac <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	4b3f      	ldr	r3, [pc, #252]	; (800f0a4 <udp_input+0x1b4>)
 800efa6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d10e      	bne.n	800efca <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800efac:	6a3b      	ldr	r3, [r7, #32]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d014      	beq.n	800efdc <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb4:	68da      	ldr	r2, [r3, #12]
 800efb6:	6a3b      	ldr	r3, [r7, #32]
 800efb8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800efba:	4b3b      	ldr	r3, [pc, #236]	; (800f0a8 <udp_input+0x1b8>)
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800efc2:	4a39      	ldr	r2, [pc, #228]	; (800f0a8 <udp_input+0x1b8>)
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800efc8:	e008      	b.n	800efdc <udp_input+0xec>
      }
    }

    prev = pcb;
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	627b      	str	r3, [r7, #36]	; 0x24
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1c0      	bne.n	800ef5c <udp_input+0x6c>
 800efda:	e000      	b.n	800efde <udp_input+0xee>
        break;
 800efdc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <udp_input+0xf8>
    pcb = uncon_pcb;
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efea:	2b00      	cmp	r3, #0
 800efec:	d002      	beq.n	800eff4 <udp_input+0x104>
    for_us = 1;
 800efee:	2301      	movs	r3, #1
 800eff0:	76fb      	strb	r3, [r7, #27]
 800eff2:	e00a      	b.n	800f00a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	3304      	adds	r3, #4
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	4b2a      	ldr	r3, [pc, #168]	; (800f0a4 <udp_input+0x1b4>)
 800effc:	695b      	ldr	r3, [r3, #20]
 800effe:	429a      	cmp	r2, r3
 800f000:	bf0c      	ite	eq
 800f002:	2301      	moveq	r3, #1
 800f004:	2300      	movne	r3, #0
 800f006:	b2db      	uxtb	r3, r3
 800f008:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f00a:	7efb      	ldrb	r3, [r7, #27]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d042      	beq.n	800f096 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800f010:	f06f 0107 	mvn.w	r1, #7
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7fa f917 	bl	8009248 <pbuf_header>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00a      	beq.n	800f036 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800f020:	4b22      	ldr	r3, [pc, #136]	; (800f0ac <udp_input+0x1bc>)
 800f022:	f240 1255 	movw	r2, #341	; 0x155
 800f026:	4922      	ldr	r1, [pc, #136]	; (800f0b0 <udp_input+0x1c0>)
 800f028:	4822      	ldr	r0, [pc, #136]	; (800f0b4 <udp_input+0x1c4>)
 800f02a:	f007 ffef 	bl	801700c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7fa f92e 	bl	8009290 <pbuf_free>
      goto end;
 800f034:	e032      	b.n	800f09c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d012      	beq.n	800f062 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03e:	699b      	ldr	r3, [r3, #24]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00a      	beq.n	800f05a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f046:	699c      	ldr	r4, [r3, #24]
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	69d8      	ldr	r0, [r3, #28]
 800f04c:	8a3b      	ldrh	r3, [r7, #16]
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	4b19      	ldr	r3, [pc, #100]	; (800f0b8 <udp_input+0x1c8>)
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f056:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f058:	e021      	b.n	800f09e <udp_input+0x1ae>
        pbuf_free(p);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7fa f918 	bl	8009290 <pbuf_free>
        goto end;
 800f060:	e01c      	b.n	800f09c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f062:	7cfb      	ldrb	r3, [r7, #19]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d112      	bne.n	800f08e <udp_input+0x19e>
 800f068:	4b0e      	ldr	r3, [pc, #56]	; (800f0a4 <udp_input+0x1b4>)
 800f06a:	695b      	ldr	r3, [r3, #20]
 800f06c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f070:	2be0      	cmp	r3, #224	; 0xe0
 800f072:	d00c      	beq.n	800f08e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f074:	4b0b      	ldr	r3, [pc, #44]	; (800f0a4 <udp_input+0x1b4>)
 800f076:	899b      	ldrh	r3, [r3, #12]
 800f078:	3308      	adds	r3, #8
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	b21b      	sxth	r3, r3
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f7fa f8f3 	bl	800926c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f086:	2103      	movs	r1, #3
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f002 fb0d 	bl	80116a8 <icmp_dest_unreach>
      pbuf_free(p);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7fa f8fe 	bl	8009290 <pbuf_free>
  return;
 800f094:	e003      	b.n	800f09e <udp_input+0x1ae>
    pbuf_free(p);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7fa f8fa 	bl	8009290 <pbuf_free>
  return;
 800f09c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f09e:	372c      	adds	r7, #44	; 0x2c
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd90      	pop	{r4, r7, pc}
 800f0a4:	200003fc 	.word	0x200003fc
 800f0a8:	20003964 	.word	0x20003964
 800f0ac:	0801a408 	.word	0x0801a408
 800f0b0:	0801a438 	.word	0x0801a438
 800f0b4:	0801a44c 	.word	0x0801a44c
 800f0b8:	2000040c 	.word	0x2000040c

0800f0bc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b088      	sub	sp, #32
 800f0c0:	af02      	add	r7, sp, #8
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <udp_sendto_if+0x1a>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <udp_sendto_if+0x20>
    return ERR_VAL;
 800f0d6:	f06f 0305 	mvn.w	r3, #5
 800f0da:	e028      	b.n	800f12e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d009      	beq.n	800f0f6 <udp_sendto_if+0x3a>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d005      	beq.n	800f0f6 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0f2:	2be0      	cmp	r3, #224	; 0xe0
 800f0f4:	d103      	bne.n	800f0fe <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	617b      	str	r3, [r7, #20]
 800f0fc:	e00b      	b.n	800f116 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	3304      	adds	r3, #4
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d002      	beq.n	800f112 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800f10c:	f06f 0303 	mvn.w	r3, #3
 800f110:	e00d      	b.n	800f12e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f116:	887a      	ldrh	r2, [r7, #2]
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	9301      	str	r3, [sp, #4]
 800f11c:	6a3b      	ldr	r3, [r7, #32]
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	4613      	mov	r3, r2
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	68b9      	ldr	r1, [r7, #8]
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f000 f806 	bl	800f138 <udp_sendto_if_src>
 800f12c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08c      	sub	sp, #48	; 0x30
 800f13c:	af04      	add	r7, sp, #16
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <udp_sendto_if_src+0x1a>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800f152:	f06f 0305 	mvn.w	r3, #5
 800f156:	e07e      	b.n	800f256 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	8a5b      	ldrh	r3, [r3, #18]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10f      	bne.n	800f180 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f160:	68f9      	ldr	r1, [r7, #12]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	8a5b      	ldrh	r3, [r3, #18]
 800f166:	461a      	mov	r2, r3
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f87f 	bl	800f26c <udp_bind>
 800f16e:	4603      	mov	r3, r0
 800f170:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f172:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d002      	beq.n	800f180 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f17a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f17e:	e06a      	b.n	800f256 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800f180:	2108      	movs	r1, #8
 800f182:	68b8      	ldr	r0, [r7, #8]
 800f184:	f7fa f860 	bl	8009248 <pbuf_header>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d014      	beq.n	800f1b8 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f18e:	2200      	movs	r2, #0
 800f190:	2108      	movs	r1, #8
 800f192:	2001      	movs	r0, #1
 800f194:	f7f9 fd0a 	bl	8008bac <pbuf_alloc>
 800f198:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d102      	bne.n	800f1a6 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f1a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1a4:	e057      	b.n	800f256 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	891b      	ldrh	r3, [r3, #8]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d006      	beq.n	800f1bc <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f1ae:	68b9      	ldr	r1, [r7, #8]
 800f1b0:	69f8      	ldr	r0, [r7, #28]
 800f1b2:	f7fa f991 	bl	80094d8 <pbuf_chain>
 800f1b6:	e001      	b.n	800f1bc <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	895b      	ldrh	r3, [r3, #10]
 800f1c0:	2b07      	cmp	r3, #7
 800f1c2:	d806      	bhi.n	800f1d2 <udp_sendto_if_src+0x9a>
 800f1c4:	4b26      	ldr	r3, [pc, #152]	; (800f260 <udp_sendto_if_src+0x128>)
 800f1c6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f1ca:	4926      	ldr	r1, [pc, #152]	; (800f264 <udp_sendto_if_src+0x12c>)
 800f1cc:	4826      	ldr	r0, [pc, #152]	; (800f268 <udp_sendto_if_src+0x130>)
 800f1ce:	f007 ff1d 	bl	801700c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	8a5b      	ldrh	r3, [r3, #18]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f8 ff2b 	bl	8008038 <lwip_htons>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f1ea:	887b      	ldrh	r3, [r7, #2]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7f8 ff23 	bl	8008038 <lwip_htons>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	719a      	strb	r2, [r3, #6]
 800f200:	2200      	movs	r2, #0
 800f202:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	891b      	ldrh	r3, [r3, #8]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7f8 ff15 	bl	8008038 <lwip_htons>
 800f20e:	4603      	mov	r3, r0
 800f210:	461a      	mov	r2, r3
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f216:	2311      	movs	r3, #17
 800f218:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	7a9b      	ldrb	r3, [r3, #10]
 800f21e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	7a5b      	ldrb	r3, [r3, #9]
 800f224:	7cb9      	ldrb	r1, [r7, #18]
 800f226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f228:	9202      	str	r2, [sp, #8]
 800f22a:	7cfa      	ldrb	r2, [r7, #19]
 800f22c:	9201      	str	r2, [sp, #4]
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	460b      	mov	r3, r1
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f236:	69f8      	ldr	r0, [r7, #28]
 800f238:	f002 fcae 	bl	8011b98 <ip4_output_if_src>
 800f23c:	4603      	mov	r3, r0
 800f23e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f240:	69fa      	ldr	r2, [r7, #28]
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	429a      	cmp	r2, r3
 800f246:	d004      	beq.n	800f252 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800f248:	69f8      	ldr	r0, [r7, #28]
 800f24a:	f7fa f821 	bl	8009290 <pbuf_free>
    q = NULL;
 800f24e:	2300      	movs	r3, #0
 800f250:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f252:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3720      	adds	r7, #32
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	0801a408 	.word	0x0801a408
 800f264:	0801a474 	.word	0x0801a474
 800f268:	0801a44c 	.word	0x0801a44c

0800f26c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b086      	sub	sp, #24
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	4613      	mov	r3, r2
 800f278:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d101      	bne.n	800f284 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f280:	4b30      	ldr	r3, [pc, #192]	; (800f344 <udp_bind+0xd8>)
 800f282:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <udp_bind+0x24>
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d102      	bne.n	800f296 <udp_bind+0x2a>
    return ERR_VAL;
 800f290:	f06f 0305 	mvn.w	r3, #5
 800f294:	e052      	b.n	800f33c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f29a:	4b2b      	ldr	r3, [pc, #172]	; (800f348 <udp_bind+0xdc>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	617b      	str	r3, [r7, #20]
 800f2a0:	e009      	b.n	800f2b6 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f2a2:	68fa      	ldr	r2, [r7, #12]
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d102      	bne.n	800f2b0 <udp_bind+0x44>
      rebind = 1;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	74fb      	strb	r3, [r7, #19]
      break;
 800f2ae:	e005      	b.n	800f2bc <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	617b      	str	r3, [r7, #20]
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1f2      	bne.n	800f2a2 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800f2bc:	88fb      	ldrh	r3, [r7, #6]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d109      	bne.n	800f2d6 <udp_bind+0x6a>
    port = udp_new_port();
 800f2c2:	f7ff fda1 	bl	800ee08 <udp_new_port>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f2ca:	88fb      	ldrh	r3, [r7, #6]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d11e      	bne.n	800f30e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f2d0:	f06f 0307 	mvn.w	r3, #7
 800f2d4:	e032      	b.n	800f33c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f2d6:	4b1c      	ldr	r3, [pc, #112]	; (800f348 <udp_bind+0xdc>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	617b      	str	r3, [r7, #20]
 800f2dc:	e014      	b.n	800f308 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800f2de:	68fa      	ldr	r2, [r7, #12]
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d00d      	beq.n	800f302 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	8a5b      	ldrh	r3, [r3, #18]
 800f2ea:	88fa      	ldrh	r2, [r7, #6]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d108      	bne.n	800f302 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d102      	bne.n	800f302 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f2fc:	f06f 0307 	mvn.w	r3, #7
 800f300:	e01c      	b.n	800f33c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	617b      	str	r3, [r7, #20]
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d1e7      	bne.n	800f2de <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d002      	beq.n	800f31a <udp_bind+0xae>
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	e000      	b.n	800f31c <udp_bind+0xb0>
 800f31a:	2300      	movs	r3, #0
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	88fa      	ldrh	r2, [r7, #6]
 800f324:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f326:	7cfb      	ldrb	r3, [r7, #19]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d106      	bne.n	800f33a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f32c:	4b06      	ldr	r3, [pc, #24]	; (800f348 <udp_bind+0xdc>)
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f334:	4a04      	ldr	r2, [pc, #16]	; (800f348 <udp_bind+0xdc>)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	0801b340 	.word	0x0801b340
 800f348:	20003964 	.word	0x20003964

0800f34c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d01e      	beq.n	800f39a <udp_netif_ip_addr_changed+0x4e>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d01a      	beq.n	800f39a <udp_netif_ip_addr_changed+0x4e>
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d017      	beq.n	800f39a <udp_netif_ip_addr_changed+0x4e>
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d013      	beq.n	800f39a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f372:	4b0d      	ldr	r3, [pc, #52]	; (800f3a8 <udp_netif_ip_addr_changed+0x5c>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	e00c      	b.n	800f394 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	429a      	cmp	r2, r3
 800f384:	d103      	bne.n	800f38e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	60fb      	str	r3, [r7, #12]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1ef      	bne.n	800f37a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f39a:	bf00      	nop
 800f39c:	3714      	adds	r7, #20
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	20003964 	.word	0x20003964

0800f3ac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f3ba:	2108      	movs	r1, #8
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f000 fe23 	bl	8010008 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	3328      	adds	r3, #40	; 0x28
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f001 fe5c 	bl	8011088 <etharp_query>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	7a9b      	ldrb	r3, [r3, #10]
 800f3d8:	2bff      	cmp	r3, #255	; 0xff
 800f3da:	d005      	beq.n	800f3e8 <dhcp_check+0x3c>
    dhcp->tries++;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	7a9b      	ldrb	r3, [r3, #10]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800f3e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f3ec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f3ee:	893b      	ldrh	r3, [r7, #8]
 800f3f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f3f4:	4a06      	ldr	r2, [pc, #24]	; (800f410 <dhcp_check+0x64>)
 800f3f6:	fb82 1203 	smull	r1, r2, r2, r3
 800f3fa:	1152      	asrs	r2, r2, #5
 800f3fc:	17db      	asrs	r3, r3, #31
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	b29a      	uxth	r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f406:	bf00      	nop
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	10624dd3 	.word	0x10624dd3

0800f414 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b088      	sub	sp, #32
 800f418:	af02      	add	r7, sp, #8
 800f41a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a1b      	ldr	r3, [r3, #32]
 800f420:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f422:	2101      	movs	r1, #1
 800f424:	6938      	ldr	r0, [r7, #16]
 800f426:	f000 fdef 	bl	8010008 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f42a:	2203      	movs	r2, #3
 800f42c:	6939      	ldr	r1, [r7, #16]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fef6 	bl	8010220 <dhcp_create_msg>
 800f434:	4603      	mov	r3, r0
 800f436:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d159      	bne.n	800f4f4 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f440:	2202      	movs	r2, #2
 800f442:	2139      	movs	r1, #57	; 0x39
 800f444:	6938      	ldr	r0, [r7, #16]
 800f446:	f000 fdf9 	bl	801003c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f44e:	4619      	mov	r1, r3
 800f450:	6938      	ldr	r0, [r7, #16]
 800f452:	f000 fe55 	bl	8010100 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f456:	2204      	movs	r2, #4
 800f458:	2132      	movs	r1, #50	; 0x32
 800f45a:	6938      	ldr	r0, [r7, #16]
 800f45c:	f000 fdee 	bl	801003c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f464:	4618      	mov	r0, r3
 800f466:	f7f8 fdf5 	bl	8008054 <lwip_htonl>
 800f46a:	4603      	mov	r3, r0
 800f46c:	4619      	mov	r1, r3
 800f46e:	6938      	ldr	r0, [r7, #16]
 800f470:	f000 fe80 	bl	8010174 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800f474:	2204      	movs	r2, #4
 800f476:	2136      	movs	r1, #54	; 0x36
 800f478:	6938      	ldr	r0, [r7, #16]
 800f47a:	f000 fddf 	bl	801003c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f482:	4618      	mov	r0, r3
 800f484:	f7f8 fde6 	bl	8008054 <lwip_htonl>
 800f488:	4603      	mov	r3, r0
 800f48a:	4619      	mov	r1, r3
 800f48c:	6938      	ldr	r0, [r7, #16]
 800f48e:	f000 fe71 	bl	8010174 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f492:	2203      	movs	r2, #3
 800f494:	2137      	movs	r1, #55	; 0x37
 800f496:	6938      	ldr	r0, [r7, #16]
 800f498:	f000 fdd0 	bl	801003c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f49c:	2300      	movs	r3, #0
 800f49e:	75fb      	strb	r3, [r7, #23]
 800f4a0:	e009      	b.n	800f4b6 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f4a2:	7dfb      	ldrb	r3, [r7, #23]
 800f4a4:	4a29      	ldr	r2, [pc, #164]	; (800f54c <dhcp_select+0x138>)
 800f4a6:	5cd3      	ldrb	r3, [r2, r3]
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	6938      	ldr	r0, [r7, #16]
 800f4ac:	f000 fe00 	bl	80100b0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4b0:	7dfb      	ldrb	r3, [r7, #23]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	75fb      	strb	r3, [r7, #23]
 800f4b6:	7dfb      	ldrb	r3, [r7, #23]
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d9f2      	bls.n	800f4a2 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f4bc:	6938      	ldr	r0, [r7, #16]
 800f4be:	f001 f853 	bl	8010568 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	68da      	ldr	r2, [r3, #12]
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	8a9b      	ldrh	r3, [r3, #20]
 800f4ca:	33f0      	adds	r3, #240	; 0xf0
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	4610      	mov	r0, r2
 800f4d2:	f7f9 fd69 	bl	8008fa8 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f4d6:	4b1e      	ldr	r3, [pc, #120]	; (800f550 <dhcp_select+0x13c>)
 800f4d8:	6818      	ldr	r0, [r3, #0]
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	68d9      	ldr	r1, [r3, #12]
 800f4de:	4b1d      	ldr	r3, [pc, #116]	; (800f554 <dhcp_select+0x140>)
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	2343      	movs	r3, #67	; 0x43
 800f4e8:	4a1b      	ldr	r2, [pc, #108]	; (800f558 <dhcp_select+0x144>)
 800f4ea:	f7ff fe25 	bl	800f138 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f4ee:	6938      	ldr	r0, [r7, #16]
 800f4f0:	f000 fff8 	bl	80104e4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	7a9b      	ldrb	r3, [r3, #10]
 800f4f8:	2bff      	cmp	r3, #255	; 0xff
 800f4fa:	d005      	beq.n	800f508 <dhcp_select+0xf4>
    dhcp->tries++;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	7a9b      	ldrb	r3, [r3, #10]
 800f500:	3301      	adds	r3, #1
 800f502:	b2da      	uxtb	r2, r3
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	7a9b      	ldrb	r3, [r3, #10]
 800f50c:	2b05      	cmp	r3, #5
 800f50e:	d807      	bhi.n	800f520 <dhcp_select+0x10c>
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	7a9b      	ldrb	r3, [r3, #10]
 800f514:	461a      	mov	r2, r3
 800f516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f51a:	4093      	lsls	r3, r2
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	e001      	b.n	800f524 <dhcp_select+0x110>
 800f520:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f524:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f526:	89bb      	ldrh	r3, [r7, #12]
 800f528:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f52c:	4a0b      	ldr	r2, [pc, #44]	; (800f55c <dhcp_select+0x148>)
 800f52e:	fb82 1203 	smull	r1, r2, r2, r3
 800f532:	1152      	asrs	r2, r2, #5
 800f534:	17db      	asrs	r3, r3, #31
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	b29a      	uxth	r2, r3
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3718      	adds	r7, #24
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	20000124 	.word	0x20000124
 800f550:	20000288 	.word	0x20000288
 800f554:	0801b340 	.word	0x0801b340
 800f558:	0801b344 	.word	0x0801b344
 800f55c:	10624dd3 	.word	0x10624dd3

0800f560 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f566:	4b27      	ldr	r3, [pc, #156]	; (800f604 <dhcp_coarse_tmr+0xa4>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800f56c:	e042      	b.n	800f5f4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a1b      	ldr	r3, [r3, #32]
 800f572:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d039      	beq.n	800f5ee <dhcp_coarse_tmr+0x8e>
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	7a5b      	ldrb	r3, [r3, #9]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d035      	beq.n	800f5ee <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f586:	2b00      	cmp	r3, #0
 800f588:	d012      	beq.n	800f5b0 <dhcp_coarse_tmr+0x50>
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	8c1b      	ldrh	r3, [r3, #32]
 800f58e:	3301      	adds	r3, #1
 800f590:	b29a      	uxth	r2, r3
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	841a      	strh	r2, [r3, #32]
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	8c1a      	ldrh	r2, [r3, #32]
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d106      	bne.n	800f5b0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 fca8 	bl	800fef8 <dhcp_release>
        dhcp_discover(netif);
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 f99f 	bl	800f8ec <dhcp_discover>
 800f5ae:	e01e      	b.n	800f5ee <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	8bdb      	ldrh	r3, [r3, #30]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d00b      	beq.n	800f5d0 <dhcp_coarse_tmr+0x70>
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	8bdb      	ldrh	r3, [r3, #30]
 800f5bc:	1e5a      	subs	r2, r3, #1
 800f5be:	b291      	uxth	r1, r2
 800f5c0:	683a      	ldr	r2, [r7, #0]
 800f5c2:	83d1      	strh	r1, [r2, #30]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d103      	bne.n	800f5d0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 f8c6 	bl	800f75a <dhcp_t2_timeout>
 800f5ce:	e00e      	b.n	800f5ee <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	8b9b      	ldrh	r3, [r3, #28]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00a      	beq.n	800f5ee <dhcp_coarse_tmr+0x8e>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	8b9b      	ldrh	r3, [r3, #28]
 800f5dc:	1e5a      	subs	r2, r3, #1
 800f5de:	b291      	uxth	r1, r2
 800f5e0:	683a      	ldr	r2, [r7, #0]
 800f5e2:	8391      	strh	r1, [r2, #28]
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d102      	bne.n	800f5ee <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f888 	bl	800f6fe <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1b9      	bne.n	800f56e <dhcp_coarse_tmr+0xe>
  }
}
 800f5fa:	bf00      	nop
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	2000393c 	.word	0x2000393c

0800f608 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f60e:	4b16      	ldr	r3, [pc, #88]	; (800f668 <dhcp_fine_tmr+0x60>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800f614:	e020      	b.n	800f658 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d017      	beq.n	800f652 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	8adb      	ldrh	r3, [r3, #22]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d906      	bls.n	800f638 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	8adb      	ldrh	r3, [r3, #22]
 800f62e:	3b01      	subs	r3, #1
 800f630:	b29a      	uxth	r2, r3
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	82da      	strh	r2, [r3, #22]
 800f636:	e00c      	b.n	800f652 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	8adb      	ldrh	r3, [r3, #22]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d108      	bne.n	800f652 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	8adb      	ldrh	r3, [r3, #22]
 800f644:	3b01      	subs	r3, #1
 800f646:	b29a      	uxth	r2, r3
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f80d 	bl	800f66c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1db      	bne.n	800f616 <dhcp_fine_tmr+0xe>
  }
}
 800f65e:	bf00      	nop
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	2000393c 	.word	0x2000393c

0800f66c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6a1b      	ldr	r3, [r3, #32]
 800f678:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	7a5b      	ldrb	r3, [r3, #9]
 800f67e:	2b0c      	cmp	r3, #12
 800f680:	d003      	beq.n	800f68a <dhcp_timeout+0x1e>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	7a5b      	ldrb	r3, [r3, #9]
 800f686:	2b06      	cmp	r3, #6
 800f688:	d103      	bne.n	800f692 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 f92e 	bl	800f8ec <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f690:	e031      	b.n	800f6f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	7a5b      	ldrb	r3, [r3, #9]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d10e      	bne.n	800f6b8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	7a9b      	ldrb	r3, [r3, #10]
 800f69e:	2b05      	cmp	r3, #5
 800f6a0:	d803      	bhi.n	800f6aa <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7ff feb6 	bl	800f414 <dhcp_select>
}
 800f6a8:	e025      	b.n	800f6f6 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fc24 	bl	800fef8 <dhcp_release>
      dhcp_discover(netif);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 f91b 	bl	800f8ec <dhcp_discover>
}
 800f6b6:	e01e      	b.n	800f6f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	7a5b      	ldrb	r3, [r3, #9]
 800f6bc:	2b08      	cmp	r3, #8
 800f6be:	d10b      	bne.n	800f6d8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	7a9b      	ldrb	r3, [r3, #10]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d803      	bhi.n	800f6d0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7ff fe6f 	bl	800f3ac <dhcp_check>
}
 800f6ce:	e012      	b.n	800f6f6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f000 f997 	bl	800fa04 <dhcp_bind>
}
 800f6d6:	e00e      	b.n	800f6f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	7a5b      	ldrb	r3, [r3, #9]
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	d10a      	bne.n	800f6f6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	7a9b      	ldrb	r3, [r3, #10]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d803      	bhi.n	800f6f0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 fb71 	bl	800fdd0 <dhcp_reboot>
}
 800f6ee:	e002      	b.n	800f6f6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 f8fb 	bl	800f8ec <dhcp_discover>
}
 800f6f6:	bf00      	nop
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b084      	sub	sp, #16
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	7a5b      	ldrb	r3, [r3, #9]
 800f710:	2b01      	cmp	r3, #1
 800f712:	d007      	beq.n	800f724 <dhcp_t1_timeout+0x26>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	7a5b      	ldrb	r3, [r3, #9]
 800f718:	2b0a      	cmp	r3, #10
 800f71a:	d003      	beq.n	800f724 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f720:	2b05      	cmp	r3, #5
 800f722:	d116      	bne.n	800f752 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fa47 	bl	800fbb8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	8b5b      	ldrh	r3, [r3, #26]
 800f72e:	461a      	mov	r2, r3
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	8c1b      	ldrh	r3, [r3, #32]
 800f734:	1ad3      	subs	r3, r2, r3
 800f736:	2b01      	cmp	r3, #1
 800f738:	dd0b      	ble.n	800f752 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	8b5b      	ldrh	r3, [r3, #26]
 800f73e:	461a      	mov	r2, r3
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	8c1b      	ldrh	r3, [r3, #32]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	0fda      	lsrs	r2, r3, #31
 800f748:	4413      	add	r3, r2
 800f74a:	105b      	asrs	r3, r3, #1
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800f752:	bf00      	nop
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a1b      	ldr	r3, [r3, #32]
 800f766:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	7a5b      	ldrb	r3, [r3, #9]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d00b      	beq.n	800f788 <dhcp_t2_timeout+0x2e>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	7a5b      	ldrb	r3, [r3, #9]
 800f774:	2b0a      	cmp	r3, #10
 800f776:	d007      	beq.n	800f788 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f77c:	2b05      	cmp	r3, #5
 800f77e:	d003      	beq.n	800f788 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	7a5b      	ldrb	r3, [r3, #9]
 800f784:	2b04      	cmp	r3, #4
 800f786:	d116      	bne.n	800f7b6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fa9b 	bl	800fcc4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f792:	461a      	mov	r2, r3
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	8c1b      	ldrh	r3, [r3, #32]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	dd0b      	ble.n	800f7b6 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	8c1b      	ldrh	r3, [r3, #32]
 800f7a8:	1ad3      	subs	r3, r2, r3
 800f7aa:	0fda      	lsrs	r2, r3, #31
 800f7ac:	4413      	add	r3, r2
 800f7ae:	105b      	asrs	r3, r3, #1
 800f7b0:	b29a      	uxth	r2, r3
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800f7b6:	bf00      	nop
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
	...

0800f7c0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d107      	bne.n	800f7e0 <dhcp_arp_reply+0x20>
 800f7d0:	4b0e      	ldr	r3, [pc, #56]	; (800f80c <dhcp_arp_reply+0x4c>)
 800f7d2:	f240 327b 	movw	r2, #891	; 0x37b
 800f7d6:	490e      	ldr	r1, [pc, #56]	; (800f810 <dhcp_arp_reply+0x50>)
 800f7d8:	480e      	ldr	r0, [pc, #56]	; (800f814 <dhcp_arp_reply+0x54>)
 800f7da:	f007 fc17 	bl	801700c <iprintf>
 800f7de:	e012      	b.n	800f806 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6a1b      	ldr	r3, [r3, #32]
 800f7e4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00c      	beq.n	800f806 <dhcp_arp_reply+0x46>
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	7a5b      	ldrb	r3, [r3, #9]
 800f7f0:	2b08      	cmp	r3, #8
 800f7f2:	d108      	bne.n	800f806 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d102      	bne.n	800f806 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 f809 	bl	800f818 <dhcp_decline>
    }
  }
}
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	0801a4a4 	.word	0x0801a4a4
 800f810:	0801a550 	.word	0x0801a550
 800f814:	0801a504 	.word	0x0801a504

0800f818 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af02      	add	r7, sp, #8
 800f81e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a1b      	ldr	r3, [r3, #32]
 800f824:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800f826:	2300      	movs	r3, #0
 800f828:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f82a:	210c      	movs	r1, #12
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	f000 fbeb 	bl	8010008 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800f832:	2204      	movs	r2, #4
 800f834:	68f9      	ldr	r1, [r7, #12]
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 fcf2 	bl	8010220 <dhcp_create_msg>
 800f83c:	4603      	mov	r3, r0
 800f83e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800f840:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d12a      	bne.n	800f89e <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f848:	2204      	movs	r2, #4
 800f84a:	2132      	movs	r1, #50	; 0x32
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f000 fbf5 	bl	801003c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f856:	4618      	mov	r0, r3
 800f858:	f7f8 fbfc 	bl	8008054 <lwip_htonl>
 800f85c:	4603      	mov	r3, r0
 800f85e:	4619      	mov	r1, r3
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f000 fc87 	bl	8010174 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f000 fe7e 	bl	8010568 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	68da      	ldr	r2, [r3, #12]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	8a9b      	ldrh	r3, [r3, #20]
 800f874:	33f0      	adds	r3, #240	; 0xf0
 800f876:	b29b      	uxth	r3, r3
 800f878:	4619      	mov	r1, r3
 800f87a:	4610      	mov	r0, r2
 800f87c:	f7f9 fb94 	bl	8008fa8 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f880:	4b16      	ldr	r3, [pc, #88]	; (800f8dc <dhcp_decline+0xc4>)
 800f882:	6818      	ldr	r0, [r3, #0]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	68d9      	ldr	r1, [r3, #12]
 800f888:	4b15      	ldr	r3, [pc, #84]	; (800f8e0 <dhcp_decline+0xc8>)
 800f88a:	9301      	str	r3, [sp, #4]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	2343      	movs	r3, #67	; 0x43
 800f892:	4a14      	ldr	r2, [pc, #80]	; (800f8e4 <dhcp_decline+0xcc>)
 800f894:	f7ff fc50 	bl	800f138 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f000 fe23 	bl	80104e4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	7a9b      	ldrb	r3, [r3, #10]
 800f8a2:	2bff      	cmp	r3, #255	; 0xff
 800f8a4:	d005      	beq.n	800f8b2 <dhcp_decline+0x9a>
    dhcp->tries++;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	7a9b      	ldrb	r3, [r3, #10]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800f8b2:	f242 7310 	movw	r3, #10000	; 0x2710
 800f8b6:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f8b8:	893b      	ldrh	r3, [r7, #8]
 800f8ba:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f8be:	4a0a      	ldr	r2, [pc, #40]	; (800f8e8 <dhcp_decline+0xd0>)
 800f8c0:	fb82 1203 	smull	r1, r2, r2, r3
 800f8c4:	1152      	asrs	r2, r2, #5
 800f8c6:	17db      	asrs	r3, r3, #31
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f8d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	20000288 	.word	0x20000288
 800f8e0:	0801b340 	.word	0x0801b340
 800f8e4:	0801b344 	.word	0x0801b344
 800f8e8:	10624dd3 	.word	0x10624dd3

0800f8ec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b088      	sub	sp, #32
 800f8f0:	af02      	add	r7, sp, #8
 800f8f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6a1b      	ldr	r3, [r3, #32]
 800f8f8:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	2200      	movs	r2, #0
 800f902:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f904:	2106      	movs	r1, #6
 800f906:	6938      	ldr	r0, [r7, #16]
 800f908:	f000 fb7e 	bl	8010008 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800f90c:	2201      	movs	r2, #1
 800f90e:	6939      	ldr	r1, [r7, #16]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 fc85 	bl	8010220 <dhcp_create_msg>
 800f916:	4603      	mov	r3, r0
 800f918:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d13b      	bne.n	800f99a <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f922:	2202      	movs	r2, #2
 800f924:	2139      	movs	r1, #57	; 0x39
 800f926:	6938      	ldr	r0, [r7, #16]
 800f928:	f000 fb88 	bl	801003c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f930:	4619      	mov	r1, r3
 800f932:	6938      	ldr	r0, [r7, #16]
 800f934:	f000 fbe4 	bl	8010100 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f938:	2203      	movs	r2, #3
 800f93a:	2137      	movs	r1, #55	; 0x37
 800f93c:	6938      	ldr	r0, [r7, #16]
 800f93e:	f000 fb7d 	bl	801003c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f942:	2300      	movs	r3, #0
 800f944:	75fb      	strb	r3, [r7, #23]
 800f946:	e009      	b.n	800f95c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f948:	7dfb      	ldrb	r3, [r7, #23]
 800f94a:	4a29      	ldr	r2, [pc, #164]	; (800f9f0 <dhcp_discover+0x104>)
 800f94c:	5cd3      	ldrb	r3, [r2, r3]
 800f94e:	4619      	mov	r1, r3
 800f950:	6938      	ldr	r0, [r7, #16]
 800f952:	f000 fbad 	bl	80100b0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f956:	7dfb      	ldrb	r3, [r7, #23]
 800f958:	3301      	adds	r3, #1
 800f95a:	75fb      	strb	r3, [r7, #23]
 800f95c:	7dfb      	ldrb	r3, [r7, #23]
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d9f2      	bls.n	800f948 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800f962:	6938      	ldr	r0, [r7, #16]
 800f964:	f000 fe00 	bl	8010568 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	68da      	ldr	r2, [r3, #12]
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	8a9b      	ldrh	r3, [r3, #20]
 800f970:	33f0      	adds	r3, #240	; 0xf0
 800f972:	b29b      	uxth	r3, r3
 800f974:	4619      	mov	r1, r3
 800f976:	4610      	mov	r0, r2
 800f978:	f7f9 fb16 	bl	8008fa8 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f97c:	4b1d      	ldr	r3, [pc, #116]	; (800f9f4 <dhcp_discover+0x108>)
 800f97e:	6818      	ldr	r0, [r3, #0]
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	68d9      	ldr	r1, [r3, #12]
 800f984:	4b1c      	ldr	r3, [pc, #112]	; (800f9f8 <dhcp_discover+0x10c>)
 800f986:	9301      	str	r3, [sp, #4]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	2343      	movs	r3, #67	; 0x43
 800f98e:	4a1b      	ldr	r2, [pc, #108]	; (800f9fc <dhcp_discover+0x110>)
 800f990:	f7ff fbd2 	bl	800f138 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800f994:	6938      	ldr	r0, [r7, #16]
 800f996:	f000 fda5 	bl	80104e4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	7a9b      	ldrb	r3, [r3, #10]
 800f99e:	2bff      	cmp	r3, #255	; 0xff
 800f9a0:	d005      	beq.n	800f9ae <dhcp_discover+0xc2>
    dhcp->tries++;
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	7a9b      	ldrb	r3, [r3, #10]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	b2da      	uxtb	r2, r3
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	7a9b      	ldrb	r3, [r3, #10]
 800f9b2:	2b05      	cmp	r3, #5
 800f9b4:	d807      	bhi.n	800f9c6 <dhcp_discover+0xda>
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	7a9b      	ldrb	r3, [r3, #10]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9c0:	4093      	lsls	r3, r2
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	e001      	b.n	800f9ca <dhcp_discover+0xde>
 800f9c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f9ca:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f9cc:	89bb      	ldrh	r3, [r7, #12]
 800f9ce:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f9d2:	4a0b      	ldr	r2, [pc, #44]	; (800fa00 <dhcp_discover+0x114>)
 800f9d4:	fb82 1203 	smull	r1, r2, r2, r3
 800f9d8:	1152      	asrs	r2, r2, #5
 800f9da:	17db      	asrs	r3, r3, #31
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3718      	adds	r7, #24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	20000124 	.word	0x20000124
 800f9f4:	20000288 	.word	0x20000288
 800f9f8:	0801b340 	.word	0x0801b340
 800f9fc:	0801b344 	.word	0x0801b344
 800fa00:	10624dd3 	.word	0x10624dd3

0800fa04 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b088      	sub	sp, #32
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d107      	bne.n	800fa22 <dhcp_bind+0x1e>
 800fa12:	4b64      	ldr	r3, [pc, #400]	; (800fba4 <dhcp_bind+0x1a0>)
 800fa14:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800fa18:	4963      	ldr	r1, [pc, #396]	; (800fba8 <dhcp_bind+0x1a4>)
 800fa1a:	4864      	ldr	r0, [pc, #400]	; (800fbac <dhcp_bind+0x1a8>)
 800fa1c:	f007 faf6 	bl	801700c <iprintf>
 800fa20:	e0bc      	b.n	800fb9c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d107      	bne.n	800fa3e <dhcp_bind+0x3a>
 800fa2e:	4b5d      	ldr	r3, [pc, #372]	; (800fba4 <dhcp_bind+0x1a0>)
 800fa30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa34:	495e      	ldr	r1, [pc, #376]	; (800fbb0 <dhcp_bind+0x1ac>)
 800fa36:	485d      	ldr	r0, [pc, #372]	; (800fbac <dhcp_bind+0x1a8>)
 800fa38:	f007 fae8 	bl	801700c <iprintf>
 800fa3c:	e0ae      	b.n	800fb9c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	2200      	movs	r2, #0
 800fa42:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa4c:	d019      	beq.n	800fa82 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa52:	331e      	adds	r3, #30
 800fa54:	4a57      	ldr	r2, [pc, #348]	; (800fbb4 <dhcp_bind+0x1b0>)
 800fa56:	fba2 2303 	umull	r2, r3, r2, r3
 800fa5a:	095b      	lsrs	r3, r3, #5
 800fa5c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa64:	d302      	bcc.n	800fa6c <dhcp_bind+0x68>
       timeout = 0xffff;
 800fa66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa6a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d102      	bne.n	800fa82 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa8a:	d01d      	beq.n	800fac8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa90:	331e      	adds	r3, #30
 800fa92:	4a48      	ldr	r2, [pc, #288]	; (800fbb4 <dhcp_bind+0x1b0>)
 800fa94:	fba2 2303 	umull	r2, r3, r2, r3
 800fa98:	095b      	lsrs	r3, r3, #5
 800fa9a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faa2:	d302      	bcc.n	800faaa <dhcp_bind+0xa6>
      timeout = 0xffff;
 800faa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800faa8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	b29a      	uxth	r2, r3
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	8b1b      	ldrh	r3, [r3, #24]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d102      	bne.n	800fac0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	2201      	movs	r2, #1
 800fabe:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	8b1a      	ldrh	r2, [r3, #24]
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800facc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fad0:	d01d      	beq.n	800fb0e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad6:	331e      	adds	r3, #30
 800fad8:	4a36      	ldr	r2, [pc, #216]	; (800fbb4 <dhcp_bind+0x1b0>)
 800fada:	fba2 2303 	umull	r2, r3, r2, r3
 800fade:	095b      	lsrs	r3, r3, #5
 800fae0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fae8:	d302      	bcc.n	800faf0 <dhcp_bind+0xec>
      timeout = 0xffff;
 800faea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800faee:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	8b5b      	ldrh	r3, [r3, #26]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d102      	bne.n	800fb06 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	2201      	movs	r2, #1
 800fb04:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	8b5a      	ldrh	r2, [r3, #26]
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	8b1a      	ldrh	r2, [r3, #24]
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	8b5b      	ldrh	r3, [r3, #26]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d306      	bcc.n	800fb28 <dhcp_bind+0x124>
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	8b5b      	ldrh	r3, [r3, #26]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d002      	beq.n	800fb28 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800fb22:	69bb      	ldr	r3, [r7, #24]
 800fb24:	2200      	movs	r2, #0
 800fb26:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	7adb      	ldrb	r3, [r3, #11]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d003      	beq.n	800fb38 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb34:	613b      	str	r3, [r7, #16]
 800fb36:	e014      	b.n	800fb62 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	3328      	adds	r3, #40	; 0x28
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800fb40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	db02      	blt.n	800fb4e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800fb48:	23ff      	movs	r3, #255	; 0xff
 800fb4a:	613b      	str	r3, [r7, #16]
 800fb4c:	e009      	b.n	800fb62 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	2bbf      	cmp	r3, #191	; 0xbf
 800fb52:	d903      	bls.n	800fb5c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800fb54:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fb58:	613b      	str	r3, [r7, #16]
 800fb5a:	e002      	b.n	800fb62 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800fb5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb60:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb66:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d108      	bne.n	800fb80 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	4013      	ands	r3, r2
 800fb76:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fb7e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800fb80:	210a      	movs	r1, #10
 800fb82:	69b8      	ldr	r0, [r7, #24]
 800fb84:	f000 fa40 	bl	8010008 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	f107 0210 	add.w	r2, r7, #16
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7f8 fed6 	bl	8008948 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800fb9c:	3720      	adds	r7, #32
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	0801a4a4 	.word	0x0801a4a4
 800fba8:	0801a5e4 	.word	0x0801a5e4
 800fbac:	0801a504 	.word	0x0801a504
 800fbb0:	0801a600 	.word	0x0801a600
 800fbb4:	88888889 	.word	0x88888889

0800fbb8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b088      	sub	sp, #32
 800fbbc:	af02      	add	r7, sp, #8
 800fbbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
 800fbc4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800fbc6:	2105      	movs	r1, #5
 800fbc8:	6938      	ldr	r0, [r7, #16]
 800fbca:	f000 fa1d 	bl	8010008 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800fbce:	2203      	movs	r2, #3
 800fbd0:	6939      	ldr	r1, [r7, #16]
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 fb24 	bl	8010220 <dhcp_create_msg>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800fbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d13b      	bne.n	800fc5c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	2139      	movs	r1, #57	; 0x39
 800fbe8:	6938      	ldr	r0, [r7, #16]
 800fbea:	f000 fa27 	bl	801003c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	6938      	ldr	r0, [r7, #16]
 800fbf6:	f000 fa83 	bl	8010100 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fbfa:	2203      	movs	r2, #3
 800fbfc:	2137      	movs	r1, #55	; 0x37
 800fbfe:	6938      	ldr	r0, [r7, #16]
 800fc00:	f000 fa1c 	bl	801003c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc04:	2300      	movs	r3, #0
 800fc06:	75fb      	strb	r3, [r7, #23]
 800fc08:	e009      	b.n	800fc1e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800fc0a:	7dfb      	ldrb	r3, [r7, #23]
 800fc0c:	4a2a      	ldr	r2, [pc, #168]	; (800fcb8 <dhcp_renew+0x100>)
 800fc0e:	5cd3      	ldrb	r3, [r2, r3]
 800fc10:	4619      	mov	r1, r3
 800fc12:	6938      	ldr	r0, [r7, #16]
 800fc14:	f000 fa4c 	bl	80100b0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc18:	7dfb      	ldrb	r3, [r7, #23]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	75fb      	strb	r3, [r7, #23]
 800fc1e:	7dfb      	ldrb	r3, [r7, #23]
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	d9f2      	bls.n	800fc0a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800fc24:	6938      	ldr	r0, [r7, #16]
 800fc26:	f000 fc9f 	bl	8010568 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	68da      	ldr	r2, [r3, #12]
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	8a9b      	ldrh	r3, [r3, #20]
 800fc32:	33f0      	adds	r3, #240	; 0xf0
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	4619      	mov	r1, r3
 800fc38:	4610      	mov	r0, r2
 800fc3a:	f7f9 f9b5 	bl	8008fa8 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800fc3e:	4b1f      	ldr	r3, [pc, #124]	; (800fcbc <dhcp_renew+0x104>)
 800fc40:	6818      	ldr	r0, [r3, #0]
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	68d9      	ldr	r1, [r3, #12]
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	2343      	movs	r3, #67	; 0x43
 800fc52:	f7ff fa33 	bl	800f0bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fc56:	6938      	ldr	r0, [r7, #16]
 800fc58:	f000 fc44 	bl	80104e4 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	7a9b      	ldrb	r3, [r3, #10]
 800fc60:	2bff      	cmp	r3, #255	; 0xff
 800fc62:	d005      	beq.n	800fc70 <dhcp_renew+0xb8>
    dhcp->tries++;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	7a9b      	ldrb	r3, [r3, #10]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	b2da      	uxtb	r2, r3
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	7a9b      	ldrb	r3, [r3, #10]
 800fc74:	2b09      	cmp	r3, #9
 800fc76:	d80a      	bhi.n	800fc8e <dhcp_renew+0xd6>
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	7a9b      	ldrb	r3, [r3, #10]
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	461a      	mov	r2, r3
 800fc80:	0152      	lsls	r2, r2, #5
 800fc82:	1ad2      	subs	r2, r2, r3
 800fc84:	0092      	lsls	r2, r2, #2
 800fc86:	4413      	add	r3, r2
 800fc88:	011b      	lsls	r3, r3, #4
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	e001      	b.n	800fc92 <dhcp_renew+0xda>
 800fc8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800fc92:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fc94:	89bb      	ldrh	r3, [r7, #12]
 800fc96:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fc9a:	4a09      	ldr	r2, [pc, #36]	; (800fcc0 <dhcp_renew+0x108>)
 800fc9c:	fb82 1203 	smull	r1, r2, r2, r3
 800fca0:	1152      	asrs	r2, r2, #5
 800fca2:	17db      	asrs	r3, r3, #31
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fcac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3718      	adds	r7, #24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	20000124 	.word	0x20000124
 800fcbc:	20000288 	.word	0x20000288
 800fcc0:	10624dd3 	.word	0x10624dd3

0800fcc4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b088      	sub	sp, #32
 800fcc8:	af02      	add	r7, sp, #8
 800fcca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a1b      	ldr	r3, [r3, #32]
 800fcd0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800fcd2:	2104      	movs	r1, #4
 800fcd4:	6938      	ldr	r0, [r7, #16]
 800fcd6:	f000 f997 	bl	8010008 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800fcda:	2203      	movs	r2, #3
 800fcdc:	6939      	ldr	r1, [r7, #16]
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fa9e 	bl	8010220 <dhcp_create_msg>
 800fce4:	4603      	mov	r3, r0
 800fce6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800fce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d139      	bne.n	800fd64 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fcf0:	2202      	movs	r2, #2
 800fcf2:	2139      	movs	r1, #57	; 0x39
 800fcf4:	6938      	ldr	r0, [r7, #16]
 800fcf6:	f000 f9a1 	bl	801003c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fcfe:	4619      	mov	r1, r3
 800fd00:	6938      	ldr	r0, [r7, #16]
 800fd02:	f000 f9fd 	bl	8010100 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd06:	2203      	movs	r2, #3
 800fd08:	2137      	movs	r1, #55	; 0x37
 800fd0a:	6938      	ldr	r0, [r7, #16]
 800fd0c:	f000 f996 	bl	801003c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd10:	2300      	movs	r3, #0
 800fd12:	75fb      	strb	r3, [r7, #23]
 800fd14:	e009      	b.n	800fd2a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800fd16:	7dfb      	ldrb	r3, [r7, #23]
 800fd18:	4a29      	ldr	r2, [pc, #164]	; (800fdc0 <dhcp_rebind+0xfc>)
 800fd1a:	5cd3      	ldrb	r3, [r2, r3]
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	6938      	ldr	r0, [r7, #16]
 800fd20:	f000 f9c6 	bl	80100b0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
 800fd26:	3301      	adds	r3, #1
 800fd28:	75fb      	strb	r3, [r7, #23]
 800fd2a:	7dfb      	ldrb	r3, [r7, #23]
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d9f2      	bls.n	800fd16 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800fd30:	6938      	ldr	r0, [r7, #16]
 800fd32:	f000 fc19 	bl	8010568 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	68da      	ldr	r2, [r3, #12]
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	8a9b      	ldrh	r3, [r3, #20]
 800fd3e:	33f0      	adds	r3, #240	; 0xf0
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	4619      	mov	r1, r3
 800fd44:	4610      	mov	r0, r2
 800fd46:	f7f9 f92f 	bl	8008fa8 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800fd4a:	4b1e      	ldr	r3, [pc, #120]	; (800fdc4 <dhcp_rebind+0x100>)
 800fd4c:	6818      	ldr	r0, [r3, #0]
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	68d9      	ldr	r1, [r3, #12]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	2343      	movs	r3, #67	; 0x43
 800fd58:	4a1b      	ldr	r2, [pc, #108]	; (800fdc8 <dhcp_rebind+0x104>)
 800fd5a:	f7ff f9af 	bl	800f0bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fd5e:	6938      	ldr	r0, [r7, #16]
 800fd60:	f000 fbc0 	bl	80104e4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	7a9b      	ldrb	r3, [r3, #10]
 800fd68:	2bff      	cmp	r3, #255	; 0xff
 800fd6a:	d005      	beq.n	800fd78 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	7a9b      	ldrb	r3, [r3, #10]
 800fd70:	3301      	adds	r3, #1
 800fd72:	b2da      	uxtb	r2, r3
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	7a9b      	ldrb	r3, [r3, #10]
 800fd7c:	2b09      	cmp	r3, #9
 800fd7e:	d80a      	bhi.n	800fd96 <dhcp_rebind+0xd2>
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	7a9b      	ldrb	r3, [r3, #10]
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	461a      	mov	r2, r3
 800fd88:	0152      	lsls	r2, r2, #5
 800fd8a:	1ad2      	subs	r2, r2, r3
 800fd8c:	0092      	lsls	r2, r2, #2
 800fd8e:	4413      	add	r3, r2
 800fd90:	00db      	lsls	r3, r3, #3
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	e001      	b.n	800fd9a <dhcp_rebind+0xd6>
 800fd96:	f242 7310 	movw	r3, #10000	; 0x2710
 800fd9a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fd9c:	89bb      	ldrh	r3, [r7, #12]
 800fd9e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fda2:	4a0a      	ldr	r2, [pc, #40]	; (800fdcc <dhcp_rebind+0x108>)
 800fda4:	fb82 1203 	smull	r1, r2, r2, r3
 800fda8:	1152      	asrs	r2, r2, #5
 800fdaa:	17db      	asrs	r3, r3, #31
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fdb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	20000124 	.word	0x20000124
 800fdc4:	20000288 	.word	0x20000288
 800fdc8:	0801b344 	.word	0x0801b344
 800fdcc:	10624dd3 	.word	0x10624dd3

0800fdd0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b088      	sub	sp, #32
 800fdd4:	af02      	add	r7, sp, #8
 800fdd6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a1b      	ldr	r3, [r3, #32]
 800fddc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800fdde:	2103      	movs	r1, #3
 800fde0:	6938      	ldr	r0, [r7, #16]
 800fde2:	f000 f911 	bl	8010008 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800fde6:	2203      	movs	r2, #3
 800fde8:	6939      	ldr	r1, [r7, #16]
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 fa18 	bl	8010220 <dhcp_create_msg>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800fdf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d147      	bne.n	800fe8c <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fdfc:	2202      	movs	r2, #2
 800fdfe:	2139      	movs	r1, #57	; 0x39
 800fe00:	6938      	ldr	r0, [r7, #16]
 800fe02:	f000 f91b 	bl	801003c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800fe06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe0a:	6938      	ldr	r0, [r7, #16]
 800fe0c:	f000 f978 	bl	8010100 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800fe10:	2204      	movs	r2, #4
 800fe12:	2132      	movs	r1, #50	; 0x32
 800fe14:	6938      	ldr	r0, [r7, #16]
 800fe16:	f000 f911 	bl	801003c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7f8 f918 	bl	8008054 <lwip_htonl>
 800fe24:	4603      	mov	r3, r0
 800fe26:	4619      	mov	r1, r3
 800fe28:	6938      	ldr	r0, [r7, #16]
 800fe2a:	f000 f9a3 	bl	8010174 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fe2e:	2203      	movs	r2, #3
 800fe30:	2137      	movs	r1, #55	; 0x37
 800fe32:	6938      	ldr	r0, [r7, #16]
 800fe34:	f000 f902 	bl	801003c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe38:	2300      	movs	r3, #0
 800fe3a:	75fb      	strb	r3, [r7, #23]
 800fe3c:	e009      	b.n	800fe52 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800fe3e:	7dfb      	ldrb	r3, [r7, #23]
 800fe40:	4a29      	ldr	r2, [pc, #164]	; (800fee8 <dhcp_reboot+0x118>)
 800fe42:	5cd3      	ldrb	r3, [r2, r3]
 800fe44:	4619      	mov	r1, r3
 800fe46:	6938      	ldr	r0, [r7, #16]
 800fe48:	f000 f932 	bl	80100b0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe4c:	7dfb      	ldrb	r3, [r7, #23]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	75fb      	strb	r3, [r7, #23]
 800fe52:	7dfb      	ldrb	r3, [r7, #23]
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	d9f2      	bls.n	800fe3e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800fe58:	6938      	ldr	r0, [r7, #16]
 800fe5a:	f000 fb85 	bl	8010568 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	68da      	ldr	r2, [r3, #12]
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	8a9b      	ldrh	r3, [r3, #20]
 800fe66:	33f0      	adds	r3, #240	; 0xf0
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4610      	mov	r0, r2
 800fe6e:	f7f9 f89b 	bl	8008fa8 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800fe72:	4b1e      	ldr	r3, [pc, #120]	; (800feec <dhcp_reboot+0x11c>)
 800fe74:	6818      	ldr	r0, [r3, #0]
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	68d9      	ldr	r1, [r3, #12]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	2343      	movs	r3, #67	; 0x43
 800fe80:	4a1b      	ldr	r2, [pc, #108]	; (800fef0 <dhcp_reboot+0x120>)
 800fe82:	f7ff f91b 	bl	800f0bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fe86:	6938      	ldr	r0, [r7, #16]
 800fe88:	f000 fb2c 	bl	80104e4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	7a9b      	ldrb	r3, [r3, #10]
 800fe90:	2bff      	cmp	r3, #255	; 0xff
 800fe92:	d005      	beq.n	800fea0 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	7a9b      	ldrb	r3, [r3, #10]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	b2da      	uxtb	r2, r3
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	7a9b      	ldrb	r3, [r3, #10]
 800fea4:	2b09      	cmp	r3, #9
 800fea6:	d80a      	bhi.n	800febe <dhcp_reboot+0xee>
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	7a9b      	ldrb	r3, [r3, #10]
 800feac:	b29b      	uxth	r3, r3
 800feae:	461a      	mov	r2, r3
 800feb0:	0152      	lsls	r2, r2, #5
 800feb2:	1ad2      	subs	r2, r2, r3
 800feb4:	0092      	lsls	r2, r2, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	b29b      	uxth	r3, r3
 800febc:	e001      	b.n	800fec2 <dhcp_reboot+0xf2>
 800febe:	f242 7310 	movw	r3, #10000	; 0x2710
 800fec2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fec4:	89bb      	ldrh	r3, [r7, #12]
 800fec6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800feca:	4a0a      	ldr	r2, [pc, #40]	; (800fef4 <dhcp_reboot+0x124>)
 800fecc:	fb82 1203 	smull	r1, r2, r2, r3
 800fed0:	1152      	asrs	r2, r2, #5
 800fed2:	17db      	asrs	r3, r3, #31
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3718      	adds	r7, #24
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	20000124 	.word	0x20000124
 800feec:	20000288 	.word	0x20000288
 800fef0:	0801b344 	.word	0x0801b344
 800fef4:	10624dd3 	.word	0x10624dd3

0800fef8 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b088      	sub	sp, #32
 800fefc:	af02      	add	r7, sp, #8
 800fefe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a1b      	ldr	r3, [r3, #32]
 800ff04:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d102      	bne.n	800ff12 <dhcp_release+0x1a>
    return ERR_ARG;
 800ff0c:	f06f 030f 	mvn.w	r3, #15
 800ff10:	e072      	b.n	800fff8 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff16:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fb7f 	bl	801061c <dhcp_supplied_address>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800ff22:	2100      	movs	r1, #0
 800ff24:	6978      	ldr	r0, [r7, #20]
 800ff26:	f000 f86f 	bl	8010008 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	2200      	movs	r2, #0
 800ff34:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	2200      	movs	r2, #0
 800ff46:	63da      	str	r2, [r3, #60]	; 0x3c
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	639a      	str	r2, [r3, #56]	; 0x38
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	845a      	strh	r2, [r3, #34]	; 0x22
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	841a      	strh	r2, [r3, #32]
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	8c1a      	ldrh	r2, [r3, #32]
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	83da      	strh	r2, [r3, #30]
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	8bda      	ldrh	r2, [r3, #30]
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800ff76:	7cfb      	ldrb	r3, [r7, #19]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	e03b      	b.n	800fff8 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800ff80:	2207      	movs	r2, #7
 800ff82:	6979      	ldr	r1, [r7, #20]
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 f94b 	bl	8010220 <dhcp_create_msg>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800ff8e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d128      	bne.n	800ffe8 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800ff96:	2204      	movs	r2, #4
 800ff98:	2136      	movs	r1, #54	; 0x36
 800ff9a:	6978      	ldr	r0, [r7, #20]
 800ff9c:	f000 f84e 	bl	801003c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f8 f856 	bl	8008054 <lwip_htonl>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	4619      	mov	r1, r3
 800ffac:	6978      	ldr	r0, [r7, #20]
 800ffae:	f000 f8e1 	bl	8010174 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800ffb2:	6978      	ldr	r0, [r7, #20]
 800ffb4:	f000 fad8 	bl	8010568 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	68da      	ldr	r2, [r3, #12]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	8a9b      	ldrh	r3, [r3, #20]
 800ffc0:	33f0      	adds	r3, #240	; 0xf0
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	f7f8 ffee 	bl	8008fa8 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800ffcc:	4b0c      	ldr	r3, [pc, #48]	; (8010000 <dhcp_release+0x108>)
 800ffce:	6818      	ldr	r0, [r3, #0]
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	68d9      	ldr	r1, [r3, #12]
 800ffd4:	f107 020c 	add.w	r2, r7, #12
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	2343      	movs	r3, #67	; 0x43
 800ffde:	f7ff f86d 	bl	800f0bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800ffe2:	6978      	ldr	r0, [r7, #20]
 800ffe4:	f000 fa7e 	bl	80104e4 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ffe8:	4b06      	ldr	r3, [pc, #24]	; (8010004 <dhcp_release+0x10c>)
 800ffea:	4a06      	ldr	r2, [pc, #24]	; (8010004 <dhcp_release+0x10c>)
 800ffec:	4905      	ldr	r1, [pc, #20]	; (8010004 <dhcp_release+0x10c>)
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f7f8 fcaa 	bl	8008948 <netif_set_addr>

  return result;
 800fff4:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3718      	adds	r7, #24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	20000288 	.word	0x20000288
 8010004:	0801b340 	.word	0x0801b340

08010008 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	7a5b      	ldrb	r3, [r3, #9]
 8010018:	78fa      	ldrb	r2, [r7, #3]
 801001a:	429a      	cmp	r2, r3
 801001c:	d008      	beq.n	8010030 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	78fa      	ldrb	r2, [r7, #3]
 8010022:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	82da      	strh	r2, [r3, #22]
  }
}
 8010030:	bf00      	nop
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	460b      	mov	r3, r1
 8010046:	70fb      	strb	r3, [r7, #3]
 8010048:	4613      	mov	r3, r2
 801004a:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8a9b      	ldrh	r3, [r3, #20]
 8010050:	461a      	mov	r2, r3
 8010052:	78bb      	ldrb	r3, [r7, #2]
 8010054:	4413      	add	r3, r2
 8010056:	3302      	adds	r3, #2
 8010058:	2b44      	cmp	r3, #68	; 0x44
 801005a:	d906      	bls.n	801006a <dhcp_option+0x2e>
 801005c:	4b11      	ldr	r3, [pc, #68]	; (80100a4 <dhcp_option+0x68>)
 801005e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8010062:	4911      	ldr	r1, [pc, #68]	; (80100a8 <dhcp_option+0x6c>)
 8010064:	4811      	ldr	r0, [pc, #68]	; (80100ac <dhcp_option+0x70>)
 8010066:	f006 ffd1 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	691a      	ldr	r2, [r3, #16]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	8a9b      	ldrh	r3, [r3, #20]
 8010072:	1c59      	adds	r1, r3, #1
 8010074:	b288      	uxth	r0, r1
 8010076:	6879      	ldr	r1, [r7, #4]
 8010078:	8288      	strh	r0, [r1, #20]
 801007a:	4413      	add	r3, r2
 801007c:	78fa      	ldrb	r2, [r7, #3]
 801007e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	691a      	ldr	r2, [r3, #16]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8a9b      	ldrh	r3, [r3, #20]
 801008a:	1c59      	adds	r1, r3, #1
 801008c:	b288      	uxth	r0, r1
 801008e:	6879      	ldr	r1, [r7, #4]
 8010090:	8288      	strh	r0, [r1, #20]
 8010092:	4413      	add	r3, r2
 8010094:	78ba      	ldrb	r2, [r7, #2]
 8010096:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	0801a4a4 	.word	0x0801a4a4
 80100a8:	0801a634 	.word	0x0801a634
 80100ac:	0801a504 	.word	0x0801a504

080100b0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	8a9b      	ldrh	r3, [r3, #20]
 80100c0:	2b43      	cmp	r3, #67	; 0x43
 80100c2:	d906      	bls.n	80100d2 <dhcp_option_byte+0x22>
 80100c4:	4b0b      	ldr	r3, [pc, #44]	; (80100f4 <dhcp_option_byte+0x44>)
 80100c6:	f240 527b 	movw	r2, #1403	; 0x57b
 80100ca:	490b      	ldr	r1, [pc, #44]	; (80100f8 <dhcp_option_byte+0x48>)
 80100cc:	480b      	ldr	r0, [pc, #44]	; (80100fc <dhcp_option_byte+0x4c>)
 80100ce:	f006 ff9d 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	691a      	ldr	r2, [r3, #16]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	8a9b      	ldrh	r3, [r3, #20]
 80100da:	1c59      	adds	r1, r3, #1
 80100dc:	b288      	uxth	r0, r1
 80100de:	6879      	ldr	r1, [r7, #4]
 80100e0:	8288      	strh	r0, [r1, #20]
 80100e2:	4413      	add	r3, r2
 80100e4:	78fa      	ldrb	r2, [r7, #3]
 80100e6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80100ea:	bf00      	nop
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	0801a4a4 	.word	0x0801a4a4
 80100f8:	0801a67c 	.word	0x0801a67c
 80100fc:	0801a504 	.word	0x0801a504

08010100 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8010100:	b590      	push	{r4, r7, lr}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	460b      	mov	r3, r1
 801010a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	8a9b      	ldrh	r3, [r3, #20]
 8010110:	3302      	adds	r3, #2
 8010112:	2b44      	cmp	r3, #68	; 0x44
 8010114:	d906      	bls.n	8010124 <dhcp_option_short+0x24>
 8010116:	4b14      	ldr	r3, [pc, #80]	; (8010168 <dhcp_option_short+0x68>)
 8010118:	f240 5282 	movw	r2, #1410	; 0x582
 801011c:	4913      	ldr	r1, [pc, #76]	; (801016c <dhcp_option_short+0x6c>)
 801011e:	4814      	ldr	r0, [pc, #80]	; (8010170 <dhcp_option_short+0x70>)
 8010120:	f006 ff74 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010124:	887b      	ldrh	r3, [r7, #2]
 8010126:	0a1b      	lsrs	r3, r3, #8
 8010128:	b298      	uxth	r0, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	691a      	ldr	r2, [r3, #16]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	8a9b      	ldrh	r3, [r3, #20]
 8010132:	1c59      	adds	r1, r3, #1
 8010134:	b28c      	uxth	r4, r1
 8010136:	6879      	ldr	r1, [r7, #4]
 8010138:	828c      	strh	r4, [r1, #20]
 801013a:	b2c1      	uxtb	r1, r0
 801013c:	4413      	add	r3, r2
 801013e:	460a      	mov	r2, r1
 8010140:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	691a      	ldr	r2, [r3, #16]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	8a9b      	ldrh	r3, [r3, #20]
 801014c:	1c59      	adds	r1, r3, #1
 801014e:	b288      	uxth	r0, r1
 8010150:	6879      	ldr	r1, [r7, #4]
 8010152:	8288      	strh	r0, [r1, #20]
 8010154:	8879      	ldrh	r1, [r7, #2]
 8010156:	b2c9      	uxtb	r1, r1
 8010158:	4413      	add	r3, r2
 801015a:	460a      	mov	r2, r1
 801015c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	bd90      	pop	{r4, r7, pc}
 8010168:	0801a4a4 	.word	0x0801a4a4
 801016c:	0801a6b8 	.word	0x0801a6b8
 8010170:	0801a504 	.word	0x0801a504

08010174 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8010174:	b590      	push	{r4, r7, lr}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	8a9b      	ldrh	r3, [r3, #20]
 8010182:	3304      	adds	r3, #4
 8010184:	2b44      	cmp	r3, #68	; 0x44
 8010186:	d906      	bls.n	8010196 <dhcp_option_long+0x22>
 8010188:	4b22      	ldr	r3, [pc, #136]	; (8010214 <dhcp_option_long+0xa0>)
 801018a:	f240 528a 	movw	r2, #1418	; 0x58a
 801018e:	4922      	ldr	r1, [pc, #136]	; (8010218 <dhcp_option_long+0xa4>)
 8010190:	4822      	ldr	r0, [pc, #136]	; (801021c <dhcp_option_long+0xa8>)
 8010192:	f006 ff3b 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	0e18      	lsrs	r0, r3, #24
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	691a      	ldr	r2, [r3, #16]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8a9b      	ldrh	r3, [r3, #20]
 80101a2:	1c59      	adds	r1, r3, #1
 80101a4:	b28c      	uxth	r4, r1
 80101a6:	6879      	ldr	r1, [r7, #4]
 80101a8:	828c      	strh	r4, [r1, #20]
 80101aa:	b2c1      	uxtb	r1, r0
 80101ac:	4413      	add	r3, r2
 80101ae:	460a      	mov	r2, r1
 80101b0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	0c18      	lsrs	r0, r3, #16
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	691a      	ldr	r2, [r3, #16]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	8a9b      	ldrh	r3, [r3, #20]
 80101c0:	1c59      	adds	r1, r3, #1
 80101c2:	b28c      	uxth	r4, r1
 80101c4:	6879      	ldr	r1, [r7, #4]
 80101c6:	828c      	strh	r4, [r1, #20]
 80101c8:	b2c1      	uxtb	r1, r0
 80101ca:	4413      	add	r3, r2
 80101cc:	460a      	mov	r2, r1
 80101ce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	0a18      	lsrs	r0, r3, #8
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	691a      	ldr	r2, [r3, #16]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	8a9b      	ldrh	r3, [r3, #20]
 80101de:	1c59      	adds	r1, r3, #1
 80101e0:	b28c      	uxth	r4, r1
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	828c      	strh	r4, [r1, #20]
 80101e6:	b2c1      	uxtb	r1, r0
 80101e8:	4413      	add	r3, r2
 80101ea:	460a      	mov	r2, r1
 80101ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	691a      	ldr	r2, [r3, #16]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	8a9b      	ldrh	r3, [r3, #20]
 80101f8:	1c59      	adds	r1, r3, #1
 80101fa:	b288      	uxth	r0, r1
 80101fc:	6879      	ldr	r1, [r7, #4]
 80101fe:	8288      	strh	r0, [r1, #20]
 8010200:	6839      	ldr	r1, [r7, #0]
 8010202:	b2c9      	uxtb	r1, r1
 8010204:	4413      	add	r3, r2
 8010206:	460a      	mov	r2, r1
 8010208:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801020c:	bf00      	nop
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	bd90      	pop	{r4, r7, pc}
 8010214:	0801a4a4 	.word	0x0801a4a4
 8010218:	0801a6fc 	.word	0x0801a6fc
 801021c:	0801a504 	.word	0x0801a504

08010220 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	4613      	mov	r3, r2
 801022c:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d109      	bne.n	8010248 <dhcp_create_msg+0x28>
 8010234:	4ba3      	ldr	r3, [pc, #652]	; (80104c4 <dhcp_create_msg+0x2a4>)
 8010236:	f240 721d 	movw	r2, #1821	; 0x71d
 801023a:	49a3      	ldr	r1, [pc, #652]	; (80104c8 <dhcp_create_msg+0x2a8>)
 801023c:	48a3      	ldr	r0, [pc, #652]	; (80104cc <dhcp_create_msg+0x2ac>)
 801023e:	f006 fee5 	bl	801700c <iprintf>
 8010242:	f06f 030f 	mvn.w	r3, #15
 8010246:	e138      	b.n	80104ba <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d109      	bne.n	8010262 <dhcp_create_msg+0x42>
 801024e:	4b9d      	ldr	r3, [pc, #628]	; (80104c4 <dhcp_create_msg+0x2a4>)
 8010250:	f240 721e 	movw	r2, #1822	; 0x71e
 8010254:	499e      	ldr	r1, [pc, #632]	; (80104d0 <dhcp_create_msg+0x2b0>)
 8010256:	489d      	ldr	r0, [pc, #628]	; (80104cc <dhcp_create_msg+0x2ac>)
 8010258:	f006 fed8 	bl	801700c <iprintf>
 801025c:	f06f 0305 	mvn.w	r3, #5
 8010260:	e12b      	b.n	80104ba <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d006      	beq.n	8010278 <dhcp_create_msg+0x58>
 801026a:	4b96      	ldr	r3, [pc, #600]	; (80104c4 <dhcp_create_msg+0x2a4>)
 801026c:	f240 721f 	movw	r2, #1823	; 0x71f
 8010270:	4998      	ldr	r1, [pc, #608]	; (80104d4 <dhcp_create_msg+0x2b4>)
 8010272:	4896      	ldr	r0, [pc, #600]	; (80104cc <dhcp_create_msg+0x2ac>)
 8010274:	f006 feca 	bl	801700c <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d006      	beq.n	801028e <dhcp_create_msg+0x6e>
 8010280:	4b90      	ldr	r3, [pc, #576]	; (80104c4 <dhcp_create_msg+0x2a4>)
 8010282:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8010286:	4994      	ldr	r1, [pc, #592]	; (80104d8 <dhcp_create_msg+0x2b8>)
 8010288:	4890      	ldr	r0, [pc, #576]	; (80104cc <dhcp_create_msg+0x2ac>)
 801028a:	f006 febf 	bl	801700c <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801028e:	2200      	movs	r2, #0
 8010290:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010294:	2000      	movs	r0, #0
 8010296:	f7f8 fc89 	bl	8008bac <pbuf_alloc>
 801029a:	4602      	mov	r2, r0
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d102      	bne.n	80102ae <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 80102a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102ac:	e105      	b.n	80104ba <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	895b      	ldrh	r3, [r3, #10]
 80102b4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80102b8:	d206      	bcs.n	80102c8 <dhcp_create_msg+0xa8>
 80102ba:	4b82      	ldr	r3, [pc, #520]	; (80104c4 <dhcp_create_msg+0x2a4>)
 80102bc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80102c0:	4986      	ldr	r1, [pc, #536]	; (80104dc <dhcp_create_msg+0x2bc>)
 80102c2:	4882      	ldr	r0, [pc, #520]	; (80104cc <dhcp_create_msg+0x2ac>)
 80102c4:	f006 fea2 	bl	801700c <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80102c8:	79fb      	ldrb	r3, [r7, #7]
 80102ca:	2b03      	cmp	r3, #3
 80102cc:	d103      	bne.n	80102d6 <dhcp_create_msg+0xb6>
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	7a5b      	ldrb	r3, [r3, #9]
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d10d      	bne.n	80102f2 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	7a9b      	ldrb	r3, [r3, #10]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d105      	bne.n	80102ea <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80102de:	f006 ff11 	bl	8017104 <rand>
 80102e2:	4603      	mov	r3, r0
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b7e      	ldr	r3, [pc, #504]	; (80104e0 <dhcp_create_msg+0x2c0>)
 80102e8:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80102ea:	4b7d      	ldr	r3, [pc, #500]	; (80104e0 <dhcp_create_msg+0x2c0>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	2201      	movs	r2, #1
 8010302:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	691b      	ldr	r3, [r3, #16]
 8010308:	2201      	movs	r2, #1
 801030a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	68fa      	ldr	r2, [r7, #12]
 8010312:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8010316:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	691b      	ldr	r3, [r3, #16]
 801031c:	2200      	movs	r2, #0
 801031e:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	691c      	ldr	r4, [r3, #16]
 8010328:	4610      	mov	r0, r2
 801032a:	f7f7 fe93 	bl	8008054 <lwip_htonl>
 801032e:	4603      	mov	r3, r0
 8010330:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	2200      	movs	r2, #0
 8010338:	721a      	strb	r2, [r3, #8]
 801033a:	2200      	movs	r2, #0
 801033c:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	2200      	movs	r2, #0
 8010344:	729a      	strb	r2, [r3, #10]
 8010346:	2200      	movs	r2, #0
 8010348:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	2200      	movs	r2, #0
 8010350:	731a      	strb	r2, [r3, #12]
 8010352:	2200      	movs	r2, #0
 8010354:	735a      	strb	r2, [r3, #13]
 8010356:	2200      	movs	r2, #0
 8010358:	739a      	strb	r2, [r3, #14]
 801035a:	2200      	movs	r2, #0
 801035c:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801035e:	79fb      	ldrb	r3, [r7, #7]
 8010360:	2b08      	cmp	r3, #8
 8010362:	d010      	beq.n	8010386 <dhcp_create_msg+0x166>
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	2b04      	cmp	r3, #4
 8010368:	d00d      	beq.n	8010386 <dhcp_create_msg+0x166>
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	2b07      	cmp	r3, #7
 801036e:	d00a      	beq.n	8010386 <dhcp_create_msg+0x166>
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	2b03      	cmp	r3, #3
 8010374:	d10d      	bne.n	8010392 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801037a:	2b05      	cmp	r3, #5
 801037c:	d003      	beq.n	8010386 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	7a5b      	ldrb	r3, [r3, #9]
 8010382:	2b04      	cmp	r3, #4
 8010384:	d105      	bne.n	8010392 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	1d1a      	adds	r2, r3, #4
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	6812      	ldr	r2, [r2, #0]
 8010390:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	691b      	ldr	r3, [r3, #16]
 8010396:	2200      	movs	r2, #0
 8010398:	741a      	strb	r2, [r3, #16]
 801039a:	2200      	movs	r2, #0
 801039c:	745a      	strb	r2, [r3, #17]
 801039e:	2200      	movs	r2, #0
 80103a0:	749a      	strb	r2, [r3, #18]
 80103a2:	2200      	movs	r2, #0
 80103a4:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	691b      	ldr	r3, [r3, #16]
 80103aa:	2200      	movs	r2, #0
 80103ac:	751a      	strb	r2, [r3, #20]
 80103ae:	2200      	movs	r2, #0
 80103b0:	755a      	strb	r2, [r3, #21]
 80103b2:	2200      	movs	r2, #0
 80103b4:	759a      	strb	r2, [r3, #22]
 80103b6:	2200      	movs	r2, #0
 80103b8:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	2200      	movs	r2, #0
 80103c0:	761a      	strb	r2, [r3, #24]
 80103c2:	2200      	movs	r2, #0
 80103c4:	765a      	strb	r2, [r3, #25]
 80103c6:	2200      	movs	r2, #0
 80103c8:	769a      	strb	r2, [r3, #26]
 80103ca:	2200      	movs	r2, #0
 80103cc:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80103ce:	2300      	movs	r3, #0
 80103d0:	82fb      	strh	r3, [r7, #22]
 80103d2:	e019      	b.n	8010408 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103da:	b29b      	uxth	r3, r3
 80103dc:	8afa      	ldrh	r2, [r7, #22]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d208      	bcs.n	80103f4 <dhcp_create_msg+0x1d4>
 80103e2:	8afb      	ldrh	r3, [r7, #22]
 80103e4:	2b05      	cmp	r3, #5
 80103e6:	d805      	bhi.n	80103f4 <dhcp_create_msg+0x1d4>
 80103e8:	8afb      	ldrh	r3, [r7, #22]
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	4413      	add	r3, r2
 80103ee:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 80103f2:	e000      	b.n	80103f6 <dhcp_create_msg+0x1d6>
 80103f4:	2100      	movs	r1, #0
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	691a      	ldr	r2, [r3, #16]
 80103fa:	8afb      	ldrh	r3, [r7, #22]
 80103fc:	4413      	add	r3, r2
 80103fe:	460a      	mov	r2, r1
 8010400:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8010402:	8afb      	ldrh	r3, [r7, #22]
 8010404:	3301      	adds	r3, #1
 8010406:	82fb      	strh	r3, [r7, #22]
 8010408:	8afb      	ldrh	r3, [r7, #22]
 801040a:	2b0f      	cmp	r3, #15
 801040c:	d9e2      	bls.n	80103d4 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801040e:	2300      	movs	r3, #0
 8010410:	82fb      	strh	r3, [r7, #22]
 8010412:	e009      	b.n	8010428 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	691a      	ldr	r2, [r3, #16]
 8010418:	8afb      	ldrh	r3, [r7, #22]
 801041a:	4413      	add	r3, r2
 801041c:	2200      	movs	r2, #0
 801041e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8010422:	8afb      	ldrh	r3, [r7, #22]
 8010424:	3301      	adds	r3, #1
 8010426:	82fb      	strh	r3, [r7, #22]
 8010428:	8afb      	ldrh	r3, [r7, #22]
 801042a:	2b3f      	cmp	r3, #63	; 0x3f
 801042c:	d9f2      	bls.n	8010414 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801042e:	2300      	movs	r3, #0
 8010430:	82fb      	strh	r3, [r7, #22]
 8010432:	e009      	b.n	8010448 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	691a      	ldr	r2, [r3, #16]
 8010438:	8afb      	ldrh	r3, [r7, #22]
 801043a:	4413      	add	r3, r2
 801043c:	2200      	movs	r2, #0
 801043e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8010442:	8afb      	ldrh	r3, [r7, #22]
 8010444:	3301      	adds	r3, #1
 8010446:	82fb      	strh	r3, [r7, #22]
 8010448:	8afb      	ldrh	r3, [r7, #22]
 801044a:	2b7f      	cmp	r3, #127	; 0x7f
 801044c:	d9f2      	bls.n	8010434 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	691b      	ldr	r3, [r3, #16]
 8010452:	2200      	movs	r2, #0
 8010454:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010458:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801045c:	2200      	movs	r2, #0
 801045e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010462:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8010466:	2200      	movs	r2, #0
 8010468:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801046c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010470:	2200      	movs	r2, #0
 8010472:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010476:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2200      	movs	r2, #0
 801047e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010480:	2300      	movs	r3, #0
 8010482:	82fb      	strh	r3, [r7, #22]
 8010484:	e00b      	b.n	801049e <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	691a      	ldr	r2, [r3, #16]
 801048a:	8afb      	ldrh	r3, [r7, #22]
 801048c:	8af9      	ldrh	r1, [r7, #22]
 801048e:	b2c9      	uxtb	r1, r1
 8010490:	4413      	add	r3, r2
 8010492:	460a      	mov	r2, r1
 8010494:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010498:	8afb      	ldrh	r3, [r7, #22]
 801049a:	3301      	adds	r3, #1
 801049c:	82fb      	strh	r3, [r7, #22]
 801049e:	8afb      	ldrh	r3, [r7, #22]
 80104a0:	2b43      	cmp	r3, #67	; 0x43
 80104a2:	d9f0      	bls.n	8010486 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80104a4:	2201      	movs	r2, #1
 80104a6:	2135      	movs	r1, #53	; 0x35
 80104a8:	68b8      	ldr	r0, [r7, #8]
 80104aa:	f7ff fdc7 	bl	801003c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80104ae:	79fb      	ldrb	r3, [r7, #7]
 80104b0:	4619      	mov	r1, r3
 80104b2:	68b8      	ldr	r0, [r7, #8]
 80104b4:	f7ff fdfc 	bl	80100b0 <dhcp_option_byte>
  return ERR_OK;
 80104b8:	2300      	movs	r3, #0
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	371c      	adds	r7, #28
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd90      	pop	{r4, r7, pc}
 80104c2:	bf00      	nop
 80104c4:	0801a4a4 	.word	0x0801a4a4
 80104c8:	0801a7d4 	.word	0x0801a7d4
 80104cc:	0801a504 	.word	0x0801a504
 80104d0:	0801a7f4 	.word	0x0801a7f4
 80104d4:	0801a814 	.word	0x0801a814
 80104d8:	0801a83c 	.word	0x0801a83c
 80104dc:	0801a864 	.word	0x0801a864
 80104e0:	2000028c 	.word	0x2000028c

080104e4 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d107      	bne.n	8010502 <dhcp_delete_msg+0x1e>
 80104f2:	4b18      	ldr	r3, [pc, #96]	; (8010554 <dhcp_delete_msg+0x70>)
 80104f4:	f240 726d 	movw	r2, #1901	; 0x76d
 80104f8:	4917      	ldr	r1, [pc, #92]	; (8010558 <dhcp_delete_msg+0x74>)
 80104fa:	4818      	ldr	r0, [pc, #96]	; (801055c <dhcp_delete_msg+0x78>)
 80104fc:	f006 fd86 	bl	801700c <iprintf>
 8010500:	e024      	b.n	801054c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d106      	bne.n	8010518 <dhcp_delete_msg+0x34>
 801050a:	4b12      	ldr	r3, [pc, #72]	; (8010554 <dhcp_delete_msg+0x70>)
 801050c:	f240 726e 	movw	r2, #1902	; 0x76e
 8010510:	4913      	ldr	r1, [pc, #76]	; (8010560 <dhcp_delete_msg+0x7c>)
 8010512:	4812      	ldr	r0, [pc, #72]	; (801055c <dhcp_delete_msg+0x78>)
 8010514:	f006 fd7a 	bl	801700c <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	691b      	ldr	r3, [r3, #16]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d106      	bne.n	801052e <dhcp_delete_msg+0x4a>
 8010520:	4b0c      	ldr	r3, [pc, #48]	; (8010554 <dhcp_delete_msg+0x70>)
 8010522:	f240 726f 	movw	r2, #1903	; 0x76f
 8010526:	490f      	ldr	r1, [pc, #60]	; (8010564 <dhcp_delete_msg+0x80>)
 8010528:	480c      	ldr	r0, [pc, #48]	; (801055c <dhcp_delete_msg+0x78>)
 801052a:	f006 fd6f 	bl	801700c <iprintf>
  if (dhcp->p_out != NULL) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d004      	beq.n	8010540 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	4618      	mov	r0, r3
 801053c:	f7f8 fea8 	bl	8009290 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2200      	movs	r2, #0
 8010544:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	611a      	str	r2, [r3, #16]
}
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	0801a4a4 	.word	0x0801a4a4
 8010558:	0801a8a4 	.word	0x0801a8a4
 801055c:	0801a504 	.word	0x0801a504
 8010560:	0801a8c4 	.word	0x0801a8c4
 8010564:	0801a8ec 	.word	0x0801a8ec

08010568 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d107      	bne.n	8010586 <dhcp_option_trailer+0x1e>
 8010576:	4b24      	ldr	r3, [pc, #144]	; (8010608 <dhcp_option_trailer+0xa0>)
 8010578:	f240 7282 	movw	r2, #1922	; 0x782
 801057c:	4923      	ldr	r1, [pc, #140]	; (801060c <dhcp_option_trailer+0xa4>)
 801057e:	4824      	ldr	r0, [pc, #144]	; (8010610 <dhcp_option_trailer+0xa8>)
 8010580:	f006 fd44 	bl	801700c <iprintf>
 8010584:	e03c      	b.n	8010600 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	691b      	ldr	r3, [r3, #16]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d106      	bne.n	801059c <dhcp_option_trailer+0x34>
 801058e:	4b1e      	ldr	r3, [pc, #120]	; (8010608 <dhcp_option_trailer+0xa0>)
 8010590:	f240 7283 	movw	r2, #1923	; 0x783
 8010594:	491f      	ldr	r1, [pc, #124]	; (8010614 <dhcp_option_trailer+0xac>)
 8010596:	481e      	ldr	r0, [pc, #120]	; (8010610 <dhcp_option_trailer+0xa8>)
 8010598:	f006 fd38 	bl	801700c <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	8a9b      	ldrh	r3, [r3, #20]
 80105a0:	2b43      	cmp	r3, #67	; 0x43
 80105a2:	d906      	bls.n	80105b2 <dhcp_option_trailer+0x4a>
 80105a4:	4b18      	ldr	r3, [pc, #96]	; (8010608 <dhcp_option_trailer+0xa0>)
 80105a6:	f240 7284 	movw	r2, #1924	; 0x784
 80105aa:	491b      	ldr	r1, [pc, #108]	; (8010618 <dhcp_option_trailer+0xb0>)
 80105ac:	4818      	ldr	r0, [pc, #96]	; (8010610 <dhcp_option_trailer+0xa8>)
 80105ae:	f006 fd2d 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	691a      	ldr	r2, [r3, #16]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	8a9b      	ldrh	r3, [r3, #20]
 80105ba:	1c59      	adds	r1, r3, #1
 80105bc:	b288      	uxth	r0, r1
 80105be:	6879      	ldr	r1, [r7, #4]
 80105c0:	8288      	strh	r0, [r1, #20]
 80105c2:	4413      	add	r3, r2
 80105c4:	22ff      	movs	r2, #255	; 0xff
 80105c6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80105ca:	e00b      	b.n	80105e4 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	691a      	ldr	r2, [r3, #16]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	8a9b      	ldrh	r3, [r3, #20]
 80105d4:	1c59      	adds	r1, r3, #1
 80105d6:	b288      	uxth	r0, r1
 80105d8:	6879      	ldr	r1, [r7, #4]
 80105da:	8288      	strh	r0, [r1, #20]
 80105dc:	4413      	add	r3, r2
 80105de:	2200      	movs	r2, #0
 80105e0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	8a9b      	ldrh	r3, [r3, #20]
 80105e8:	2b43      	cmp	r3, #67	; 0x43
 80105ea:	d905      	bls.n	80105f8 <dhcp_option_trailer+0x90>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	8a9b      	ldrh	r3, [r3, #20]
 80105f0:	f003 0303 	and.w	r3, r3, #3
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d003      	beq.n	8010600 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80105fc:	2b43      	cmp	r3, #67	; 0x43
 80105fe:	d9e5      	bls.n	80105cc <dhcp_option_trailer+0x64>
  }
}
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	0801a4a4 	.word	0x0801a4a4
 801060c:	0801a914 	.word	0x0801a914
 8010610:	0801a504 	.word	0x0801a504
 8010614:	0801a938 	.word	0x0801a938
 8010618:	0801a964 	.word	0x0801a964

0801061c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d017      	beq.n	801065a <dhcp_supplied_address+0x3e>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6a1b      	ldr	r3, [r3, #32]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d013      	beq.n	801065a <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6a1b      	ldr	r3, [r3, #32]
 8010636:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	7a5b      	ldrb	r3, [r3, #9]
 801063c:	2b0a      	cmp	r3, #10
 801063e:	d007      	beq.n	8010650 <dhcp_supplied_address+0x34>
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	7a5b      	ldrb	r3, [r3, #9]
 8010644:	2b05      	cmp	r3, #5
 8010646:	d003      	beq.n	8010650 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801064c:	2b04      	cmp	r3, #4
 801064e:	d101      	bne.n	8010654 <dhcp_supplied_address+0x38>
 8010650:	2301      	movs	r3, #1
 8010652:	e000      	b.n	8010656 <dhcp_supplied_address+0x3a>
 8010654:	2300      	movs	r3, #0
 8010656:	b2db      	uxtb	r3, r3
 8010658:	e000      	b.n	801065c <dhcp_supplied_address+0x40>
  }
  return 0;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010670:	4915      	ldr	r1, [pc, #84]	; (80106c8 <etharp_free_entry+0x60>)
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	4613      	mov	r3, r2
 8010676:	005b      	lsls	r3, r3, #1
 8010678:	4413      	add	r3, r2
 801067a:	00db      	lsls	r3, r3, #3
 801067c:	440b      	add	r3, r1
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d013      	beq.n	80106ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010684:	4910      	ldr	r1, [pc, #64]	; (80106c8 <etharp_free_entry+0x60>)
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	4613      	mov	r3, r2
 801068a:	005b      	lsls	r3, r3, #1
 801068c:	4413      	add	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	440b      	add	r3, r1
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4618      	mov	r0, r3
 8010696:	f7f8 fdfb 	bl	8009290 <pbuf_free>
    arp_table[i].q = NULL;
 801069a:	490b      	ldr	r1, [pc, #44]	; (80106c8 <etharp_free_entry+0x60>)
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	4613      	mov	r3, r2
 80106a0:	005b      	lsls	r3, r3, #1
 80106a2:	4413      	add	r3, r2
 80106a4:	00db      	lsls	r3, r3, #3
 80106a6:	440b      	add	r3, r1
 80106a8:	2200      	movs	r2, #0
 80106aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80106ac:	4906      	ldr	r1, [pc, #24]	; (80106c8 <etharp_free_entry+0x60>)
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	4613      	mov	r3, r2
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	4413      	add	r3, r2
 80106b6:	00db      	lsls	r3, r3, #3
 80106b8:	440b      	add	r3, r1
 80106ba:	3314      	adds	r3, #20
 80106bc:	2200      	movs	r2, #0
 80106be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80106c0:	bf00      	nop
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	20000290 	.word	0x20000290

080106cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106d2:	2300      	movs	r3, #0
 80106d4:	71fb      	strb	r3, [r7, #7]
 80106d6:	e096      	b.n	8010806 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80106d8:	79fa      	ldrb	r2, [r7, #7]
 80106da:	494f      	ldr	r1, [pc, #316]	; (8010818 <etharp_tmr+0x14c>)
 80106dc:	4613      	mov	r3, r2
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	4413      	add	r3, r2
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	440b      	add	r3, r1
 80106e6:	3314      	adds	r3, #20
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80106ec:	79bb      	ldrb	r3, [r7, #6]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 8086 	beq.w	8010800 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80106f4:	79fa      	ldrb	r2, [r7, #7]
 80106f6:	4948      	ldr	r1, [pc, #288]	; (8010818 <etharp_tmr+0x14c>)
 80106f8:	4613      	mov	r3, r2
 80106fa:	005b      	lsls	r3, r3, #1
 80106fc:	4413      	add	r3, r2
 80106fe:	00db      	lsls	r3, r3, #3
 8010700:	440b      	add	r3, r1
 8010702:	3312      	adds	r3, #18
 8010704:	881b      	ldrh	r3, [r3, #0]
 8010706:	3301      	adds	r3, #1
 8010708:	b298      	uxth	r0, r3
 801070a:	4943      	ldr	r1, [pc, #268]	; (8010818 <etharp_tmr+0x14c>)
 801070c:	4613      	mov	r3, r2
 801070e:	005b      	lsls	r3, r3, #1
 8010710:	4413      	add	r3, r2
 8010712:	00db      	lsls	r3, r3, #3
 8010714:	440b      	add	r3, r1
 8010716:	3312      	adds	r3, #18
 8010718:	4602      	mov	r2, r0
 801071a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801071c:	79fa      	ldrb	r2, [r7, #7]
 801071e:	493e      	ldr	r1, [pc, #248]	; (8010818 <etharp_tmr+0x14c>)
 8010720:	4613      	mov	r3, r2
 8010722:	005b      	lsls	r3, r3, #1
 8010724:	4413      	add	r3, r2
 8010726:	00db      	lsls	r3, r3, #3
 8010728:	440b      	add	r3, r1
 801072a:	3312      	adds	r3, #18
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010732:	d215      	bcs.n	8010760 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010734:	79fa      	ldrb	r2, [r7, #7]
 8010736:	4938      	ldr	r1, [pc, #224]	; (8010818 <etharp_tmr+0x14c>)
 8010738:	4613      	mov	r3, r2
 801073a:	005b      	lsls	r3, r3, #1
 801073c:	4413      	add	r3, r2
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	440b      	add	r3, r1
 8010742:	3314      	adds	r3, #20
 8010744:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010746:	2b01      	cmp	r3, #1
 8010748:	d10f      	bne.n	801076a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801074a:	79fa      	ldrb	r2, [r7, #7]
 801074c:	4932      	ldr	r1, [pc, #200]	; (8010818 <etharp_tmr+0x14c>)
 801074e:	4613      	mov	r3, r2
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4413      	add	r3, r2
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	3312      	adds	r3, #18
 801075a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801075c:	2b04      	cmp	r3, #4
 801075e:	d904      	bls.n	801076a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010760:	79fb      	ldrb	r3, [r7, #7]
 8010762:	4618      	mov	r0, r3
 8010764:	f7ff ff80 	bl	8010668 <etharp_free_entry>
 8010768:	e04a      	b.n	8010800 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801076a:	79fa      	ldrb	r2, [r7, #7]
 801076c:	492a      	ldr	r1, [pc, #168]	; (8010818 <etharp_tmr+0x14c>)
 801076e:	4613      	mov	r3, r2
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	4413      	add	r3, r2
 8010774:	00db      	lsls	r3, r3, #3
 8010776:	440b      	add	r3, r1
 8010778:	3314      	adds	r3, #20
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	2b03      	cmp	r3, #3
 801077e:	d10a      	bne.n	8010796 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010780:	79fa      	ldrb	r2, [r7, #7]
 8010782:	4925      	ldr	r1, [pc, #148]	; (8010818 <etharp_tmr+0x14c>)
 8010784:	4613      	mov	r3, r2
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	4413      	add	r3, r2
 801078a:	00db      	lsls	r3, r3, #3
 801078c:	440b      	add	r3, r1
 801078e:	3314      	adds	r3, #20
 8010790:	2204      	movs	r2, #4
 8010792:	701a      	strb	r2, [r3, #0]
 8010794:	e034      	b.n	8010800 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010796:	79fa      	ldrb	r2, [r7, #7]
 8010798:	491f      	ldr	r1, [pc, #124]	; (8010818 <etharp_tmr+0x14c>)
 801079a:	4613      	mov	r3, r2
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	4413      	add	r3, r2
 80107a0:	00db      	lsls	r3, r3, #3
 80107a2:	440b      	add	r3, r1
 80107a4:	3314      	adds	r3, #20
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b04      	cmp	r3, #4
 80107aa:	d10a      	bne.n	80107c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80107ac:	79fa      	ldrb	r2, [r7, #7]
 80107ae:	491a      	ldr	r1, [pc, #104]	; (8010818 <etharp_tmr+0x14c>)
 80107b0:	4613      	mov	r3, r2
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	4413      	add	r3, r2
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	440b      	add	r3, r1
 80107ba:	3314      	adds	r3, #20
 80107bc:	2202      	movs	r2, #2
 80107be:	701a      	strb	r2, [r3, #0]
 80107c0:	e01e      	b.n	8010800 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80107c2:	79fa      	ldrb	r2, [r7, #7]
 80107c4:	4914      	ldr	r1, [pc, #80]	; (8010818 <etharp_tmr+0x14c>)
 80107c6:	4613      	mov	r3, r2
 80107c8:	005b      	lsls	r3, r3, #1
 80107ca:	4413      	add	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	440b      	add	r3, r1
 80107d0:	3314      	adds	r3, #20
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d113      	bne.n	8010800 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80107d8:	79fa      	ldrb	r2, [r7, #7]
 80107da:	490f      	ldr	r1, [pc, #60]	; (8010818 <etharp_tmr+0x14c>)
 80107dc:	4613      	mov	r3, r2
 80107de:	005b      	lsls	r3, r3, #1
 80107e0:	4413      	add	r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	440b      	add	r3, r1
 80107e6:	3308      	adds	r3, #8
 80107e8:	6818      	ldr	r0, [r3, #0]
 80107ea:	79fa      	ldrb	r2, [r7, #7]
 80107ec:	4613      	mov	r3, r2
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	4413      	add	r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	4a08      	ldr	r2, [pc, #32]	; (8010818 <etharp_tmr+0x14c>)
 80107f6:	4413      	add	r3, r2
 80107f8:	3304      	adds	r3, #4
 80107fa:	4619      	mov	r1, r3
 80107fc:	f000 fe3c 	bl	8011478 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010800:	79fb      	ldrb	r3, [r7, #7]
 8010802:	3301      	adds	r3, #1
 8010804:	71fb      	strb	r3, [r7, #7]
 8010806:	79fb      	ldrb	r3, [r7, #7]
 8010808:	2b09      	cmp	r3, #9
 801080a:	f67f af65 	bls.w	80106d8 <etharp_tmr+0xc>
      }
    }
  }
}
 801080e:	bf00      	nop
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	20000290 	.word	0x20000290

0801081c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b088      	sub	sp, #32
 8010820:	af00      	add	r7, sp, #0
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	460b      	mov	r3, r1
 8010826:	607a      	str	r2, [r7, #4]
 8010828:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801082a:	230a      	movs	r3, #10
 801082c:	77fb      	strb	r3, [r7, #31]
 801082e:	230a      	movs	r3, #10
 8010830:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8010832:	230a      	movs	r3, #10
 8010834:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8010836:	2300      	movs	r3, #0
 8010838:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801083a:	230a      	movs	r3, #10
 801083c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801083e:	2300      	movs	r3, #0
 8010840:	833b      	strh	r3, [r7, #24]
 8010842:	2300      	movs	r3, #0
 8010844:	82fb      	strh	r3, [r7, #22]
 8010846:	2300      	movs	r3, #0
 8010848:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801084a:	2300      	movs	r3, #0
 801084c:	773b      	strb	r3, [r7, #28]
 801084e:	e093      	b.n	8010978 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8010850:	7f3a      	ldrb	r2, [r7, #28]
 8010852:	4990      	ldr	r1, [pc, #576]	; (8010a94 <etharp_find_entry+0x278>)
 8010854:	4613      	mov	r3, r2
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	4413      	add	r3, r2
 801085a:	00db      	lsls	r3, r3, #3
 801085c:	440b      	add	r3, r1
 801085e:	3314      	adds	r3, #20
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010864:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010868:	2b0a      	cmp	r3, #10
 801086a:	d105      	bne.n	8010878 <etharp_find_entry+0x5c>
 801086c:	7cfb      	ldrb	r3, [r7, #19]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d102      	bne.n	8010878 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8010872:	7f3b      	ldrb	r3, [r7, #28]
 8010874:	777b      	strb	r3, [r7, #29]
 8010876:	e07c      	b.n	8010972 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010878:	7cfb      	ldrb	r3, [r7, #19]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d079      	beq.n	8010972 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801087e:	7cfb      	ldrb	r3, [r7, #19]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d009      	beq.n	8010898 <etharp_find_entry+0x7c>
 8010884:	7cfb      	ldrb	r3, [r7, #19]
 8010886:	2b01      	cmp	r3, #1
 8010888:	d806      	bhi.n	8010898 <etharp_find_entry+0x7c>
 801088a:	4b83      	ldr	r3, [pc, #524]	; (8010a98 <etharp_find_entry+0x27c>)
 801088c:	f44f 7293 	mov.w	r2, #294	; 0x126
 8010890:	4982      	ldr	r1, [pc, #520]	; (8010a9c <etharp_find_entry+0x280>)
 8010892:	4883      	ldr	r0, [pc, #524]	; (8010aa0 <etharp_find_entry+0x284>)
 8010894:	f006 fbba 	bl	801700c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00f      	beq.n	80108be <etharp_find_entry+0xa2>
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6819      	ldr	r1, [r3, #0]
 80108a2:	7f3a      	ldrb	r2, [r7, #28]
 80108a4:	487b      	ldr	r0, [pc, #492]	; (8010a94 <etharp_find_entry+0x278>)
 80108a6:	4613      	mov	r3, r2
 80108a8:	005b      	lsls	r3, r3, #1
 80108aa:	4413      	add	r3, r2
 80108ac:	00db      	lsls	r3, r3, #3
 80108ae:	4403      	add	r3, r0
 80108b0:	3304      	adds	r3, #4
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4299      	cmp	r1, r3
 80108b6:	d102      	bne.n	80108be <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80108b8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80108bc:	e0e5      	b.n	8010a8a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80108be:	7cfb      	ldrb	r3, [r7, #19]
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d13b      	bne.n	801093c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80108c4:	7f3a      	ldrb	r2, [r7, #28]
 80108c6:	4973      	ldr	r1, [pc, #460]	; (8010a94 <etharp_find_entry+0x278>)
 80108c8:	4613      	mov	r3, r2
 80108ca:	005b      	lsls	r3, r3, #1
 80108cc:	4413      	add	r3, r2
 80108ce:	00db      	lsls	r3, r3, #3
 80108d0:	440b      	add	r3, r1
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d018      	beq.n	801090a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80108d8:	7f3a      	ldrb	r2, [r7, #28]
 80108da:	496e      	ldr	r1, [pc, #440]	; (8010a94 <etharp_find_entry+0x278>)
 80108dc:	4613      	mov	r3, r2
 80108de:	005b      	lsls	r3, r3, #1
 80108e0:	4413      	add	r3, r2
 80108e2:	00db      	lsls	r3, r3, #3
 80108e4:	440b      	add	r3, r1
 80108e6:	3312      	adds	r3, #18
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	8b3a      	ldrh	r2, [r7, #24]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d840      	bhi.n	8010972 <etharp_find_entry+0x156>
            old_queue = i;
 80108f0:	7f3b      	ldrb	r3, [r7, #28]
 80108f2:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80108f4:	7f3a      	ldrb	r2, [r7, #28]
 80108f6:	4967      	ldr	r1, [pc, #412]	; (8010a94 <etharp_find_entry+0x278>)
 80108f8:	4613      	mov	r3, r2
 80108fa:	005b      	lsls	r3, r3, #1
 80108fc:	4413      	add	r3, r2
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	440b      	add	r3, r1
 8010902:	3312      	adds	r3, #18
 8010904:	881b      	ldrh	r3, [r3, #0]
 8010906:	833b      	strh	r3, [r7, #24]
 8010908:	e033      	b.n	8010972 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801090a:	7f3a      	ldrb	r2, [r7, #28]
 801090c:	4961      	ldr	r1, [pc, #388]	; (8010a94 <etharp_find_entry+0x278>)
 801090e:	4613      	mov	r3, r2
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	4413      	add	r3, r2
 8010914:	00db      	lsls	r3, r3, #3
 8010916:	440b      	add	r3, r1
 8010918:	3312      	adds	r3, #18
 801091a:	881b      	ldrh	r3, [r3, #0]
 801091c:	8afa      	ldrh	r2, [r7, #22]
 801091e:	429a      	cmp	r2, r3
 8010920:	d827      	bhi.n	8010972 <etharp_find_entry+0x156>
            old_pending = i;
 8010922:	7f3b      	ldrb	r3, [r7, #28]
 8010924:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8010926:	7f3a      	ldrb	r2, [r7, #28]
 8010928:	495a      	ldr	r1, [pc, #360]	; (8010a94 <etharp_find_entry+0x278>)
 801092a:	4613      	mov	r3, r2
 801092c:	005b      	lsls	r3, r3, #1
 801092e:	4413      	add	r3, r2
 8010930:	00db      	lsls	r3, r3, #3
 8010932:	440b      	add	r3, r1
 8010934:	3312      	adds	r3, #18
 8010936:	881b      	ldrh	r3, [r3, #0]
 8010938:	82fb      	strh	r3, [r7, #22]
 801093a:	e01a      	b.n	8010972 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801093c:	7cfb      	ldrb	r3, [r7, #19]
 801093e:	2b01      	cmp	r3, #1
 8010940:	d917      	bls.n	8010972 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010942:	7f3a      	ldrb	r2, [r7, #28]
 8010944:	4953      	ldr	r1, [pc, #332]	; (8010a94 <etharp_find_entry+0x278>)
 8010946:	4613      	mov	r3, r2
 8010948:	005b      	lsls	r3, r3, #1
 801094a:	4413      	add	r3, r2
 801094c:	00db      	lsls	r3, r3, #3
 801094e:	440b      	add	r3, r1
 8010950:	3312      	adds	r3, #18
 8010952:	881b      	ldrh	r3, [r3, #0]
 8010954:	8aba      	ldrh	r2, [r7, #20]
 8010956:	429a      	cmp	r2, r3
 8010958:	d80b      	bhi.n	8010972 <etharp_find_entry+0x156>
            old_stable = i;
 801095a:	7f3b      	ldrb	r3, [r7, #28]
 801095c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801095e:	7f3a      	ldrb	r2, [r7, #28]
 8010960:	494c      	ldr	r1, [pc, #304]	; (8010a94 <etharp_find_entry+0x278>)
 8010962:	4613      	mov	r3, r2
 8010964:	005b      	lsls	r3, r3, #1
 8010966:	4413      	add	r3, r2
 8010968:	00db      	lsls	r3, r3, #3
 801096a:	440b      	add	r3, r1
 801096c:	3312      	adds	r3, #18
 801096e:	881b      	ldrh	r3, [r3, #0]
 8010970:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010972:	7f3b      	ldrb	r3, [r7, #28]
 8010974:	3301      	adds	r3, #1
 8010976:	773b      	strb	r3, [r7, #28]
 8010978:	7f3b      	ldrb	r3, [r7, #28]
 801097a:	2b09      	cmp	r3, #9
 801097c:	f67f af68 	bls.w	8010850 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010980:	7afb      	ldrb	r3, [r7, #11]
 8010982:	f003 0302 	and.w	r3, r3, #2
 8010986:	2b00      	cmp	r3, #0
 8010988:	d108      	bne.n	801099c <etharp_find_entry+0x180>
 801098a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801098e:	2b0a      	cmp	r3, #10
 8010990:	d107      	bne.n	80109a2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010992:	7afb      	ldrb	r3, [r7, #11]
 8010994:	f003 0301 	and.w	r3, r3, #1
 8010998:	2b00      	cmp	r3, #0
 801099a:	d102      	bne.n	80109a2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801099c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109a0:	e073      	b.n	8010a8a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80109a2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80109a6:	2b09      	cmp	r3, #9
 80109a8:	dc02      	bgt.n	80109b0 <etharp_find_entry+0x194>
    i = empty;
 80109aa:	7f7b      	ldrb	r3, [r7, #29]
 80109ac:	773b      	strb	r3, [r7, #28]
 80109ae:	e036      	b.n	8010a1e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80109b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80109b4:	2b09      	cmp	r3, #9
 80109b6:	dc13      	bgt.n	80109e0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80109b8:	7fbb      	ldrb	r3, [r7, #30]
 80109ba:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80109bc:	7f3a      	ldrb	r2, [r7, #28]
 80109be:	4935      	ldr	r1, [pc, #212]	; (8010a94 <etharp_find_entry+0x278>)
 80109c0:	4613      	mov	r3, r2
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	4413      	add	r3, r2
 80109c6:	00db      	lsls	r3, r3, #3
 80109c8:	440b      	add	r3, r1
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d018      	beq.n	8010a02 <etharp_find_entry+0x1e6>
 80109d0:	4b31      	ldr	r3, [pc, #196]	; (8010a98 <etharp_find_entry+0x27c>)
 80109d2:	f240 126f 	movw	r2, #367	; 0x16f
 80109d6:	4933      	ldr	r1, [pc, #204]	; (8010aa4 <etharp_find_entry+0x288>)
 80109d8:	4831      	ldr	r0, [pc, #196]	; (8010aa0 <etharp_find_entry+0x284>)
 80109da:	f006 fb17 	bl	801700c <iprintf>
 80109de:	e010      	b.n	8010a02 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80109e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109e4:	2b09      	cmp	r3, #9
 80109e6:	dc02      	bgt.n	80109ee <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80109e8:	7ffb      	ldrb	r3, [r7, #31]
 80109ea:	773b      	strb	r3, [r7, #28]
 80109ec:	e009      	b.n	8010a02 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80109ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80109f2:	2b09      	cmp	r3, #9
 80109f4:	dc02      	bgt.n	80109fc <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80109f6:	7efb      	ldrb	r3, [r7, #27]
 80109f8:	773b      	strb	r3, [r7, #28]
 80109fa:	e002      	b.n	8010a02 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80109fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a00:	e043      	b.n	8010a8a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010a02:	7f3b      	ldrb	r3, [r7, #28]
 8010a04:	2b09      	cmp	r3, #9
 8010a06:	d906      	bls.n	8010a16 <etharp_find_entry+0x1fa>
 8010a08:	4b23      	ldr	r3, [pc, #140]	; (8010a98 <etharp_find_entry+0x27c>)
 8010a0a:	f240 1281 	movw	r2, #385	; 0x181
 8010a0e:	4926      	ldr	r1, [pc, #152]	; (8010aa8 <etharp_find_entry+0x28c>)
 8010a10:	4823      	ldr	r0, [pc, #140]	; (8010aa0 <etharp_find_entry+0x284>)
 8010a12:	f006 fafb 	bl	801700c <iprintf>
    etharp_free_entry(i);
 8010a16:	7f3b      	ldrb	r3, [r7, #28]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff fe25 	bl	8010668 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010a1e:	7f3b      	ldrb	r3, [r7, #28]
 8010a20:	2b09      	cmp	r3, #9
 8010a22:	d906      	bls.n	8010a32 <etharp_find_entry+0x216>
 8010a24:	4b1c      	ldr	r3, [pc, #112]	; (8010a98 <etharp_find_entry+0x27c>)
 8010a26:	f240 1285 	movw	r2, #389	; 0x185
 8010a2a:	491f      	ldr	r1, [pc, #124]	; (8010aa8 <etharp_find_entry+0x28c>)
 8010a2c:	481c      	ldr	r0, [pc, #112]	; (8010aa0 <etharp_find_entry+0x284>)
 8010a2e:	f006 faed 	bl	801700c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010a32:	7f3a      	ldrb	r2, [r7, #28]
 8010a34:	4917      	ldr	r1, [pc, #92]	; (8010a94 <etharp_find_entry+0x278>)
 8010a36:	4613      	mov	r3, r2
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	4413      	add	r3, r2
 8010a3c:	00db      	lsls	r3, r3, #3
 8010a3e:	440b      	add	r3, r1
 8010a40:	3314      	adds	r3, #20
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d006      	beq.n	8010a56 <etharp_find_entry+0x23a>
 8010a48:	4b13      	ldr	r3, [pc, #76]	; (8010a98 <etharp_find_entry+0x27c>)
 8010a4a:	f240 1287 	movw	r2, #391	; 0x187
 8010a4e:	4917      	ldr	r1, [pc, #92]	; (8010aac <etharp_find_entry+0x290>)
 8010a50:	4813      	ldr	r0, [pc, #76]	; (8010aa0 <etharp_find_entry+0x284>)
 8010a52:	f006 fadb 	bl	801700c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d00a      	beq.n	8010a72 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010a5c:	7f3a      	ldrb	r2, [r7, #28]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6819      	ldr	r1, [r3, #0]
 8010a62:	480c      	ldr	r0, [pc, #48]	; (8010a94 <etharp_find_entry+0x278>)
 8010a64:	4613      	mov	r3, r2
 8010a66:	005b      	lsls	r3, r3, #1
 8010a68:	4413      	add	r3, r2
 8010a6a:	00db      	lsls	r3, r3, #3
 8010a6c:	4403      	add	r3, r0
 8010a6e:	3304      	adds	r3, #4
 8010a70:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010a72:	7f3a      	ldrb	r2, [r7, #28]
 8010a74:	4907      	ldr	r1, [pc, #28]	; (8010a94 <etharp_find_entry+0x278>)
 8010a76:	4613      	mov	r3, r2
 8010a78:	005b      	lsls	r3, r3, #1
 8010a7a:	4413      	add	r3, r2
 8010a7c:	00db      	lsls	r3, r3, #3
 8010a7e:	440b      	add	r3, r1
 8010a80:	3312      	adds	r3, #18
 8010a82:	2200      	movs	r2, #0
 8010a84:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8010a86:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3720      	adds	r7, #32
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	20000290 	.word	0x20000290
 8010a98:	0801a9a4 	.word	0x0801a9a4
 8010a9c:	0801a9dc 	.word	0x0801a9dc
 8010aa0:	0801aa1c 	.word	0x0801aa1c
 8010aa4:	0801aa44 	.word	0x0801aa44
 8010aa8:	0801aa5c 	.word	0x0801aa5c
 8010aac:	0801aa70 	.word	0x0801aa70

08010ab0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b088      	sub	sp, #32
 8010ab4:	af02      	add	r7, sp, #8
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
 8010abc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ac4:	2b06      	cmp	r3, #6
 8010ac6:	d006      	beq.n	8010ad6 <etharp_update_arp_entry+0x26>
 8010ac8:	4b48      	ldr	r3, [pc, #288]	; (8010bec <etharp_update_arp_entry+0x13c>)
 8010aca:	f240 12ab 	movw	r2, #427	; 0x1ab
 8010ace:	4948      	ldr	r1, [pc, #288]	; (8010bf0 <etharp_update_arp_entry+0x140>)
 8010ad0:	4848      	ldr	r0, [pc, #288]	; (8010bf4 <etharp_update_arp_entry+0x144>)
 8010ad2:	f006 fa9b 	bl	801700c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d012      	beq.n	8010b02 <etharp_update_arp_entry+0x52>
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00e      	beq.n	8010b02 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68f9      	ldr	r1, [r7, #12]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f001 f8fc 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 8010af0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d105      	bne.n	8010b02 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010afe:	2be0      	cmp	r3, #224	; 0xe0
 8010b00:	d102      	bne.n	8010b08 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b02:	f06f 030f 	mvn.w	r3, #15
 8010b06:	e06c      	b.n	8010be2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010b08:	78fb      	ldrb	r3, [r7, #3]
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	68b8      	ldr	r0, [r7, #8]
 8010b10:	f7ff fe84 	bl	801081c <etharp_find_entry>
 8010b14:	4603      	mov	r3, r0
 8010b16:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	da02      	bge.n	8010b26 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b24:	e05d      	b.n	8010be2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010b26:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b2a:	4933      	ldr	r1, [pc, #204]	; (8010bf8 <etharp_update_arp_entry+0x148>)
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	4413      	add	r3, r2
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	440b      	add	r3, r1
 8010b36:	3314      	adds	r3, #20
 8010b38:	2202      	movs	r2, #2
 8010b3a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010b3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b40:	492d      	ldr	r1, [pc, #180]	; (8010bf8 <etharp_update_arp_entry+0x148>)
 8010b42:	4613      	mov	r3, r2
 8010b44:	005b      	lsls	r3, r3, #1
 8010b46:	4413      	add	r3, r2
 8010b48:	00db      	lsls	r3, r3, #3
 8010b4a:	440b      	add	r3, r1
 8010b4c:	3308      	adds	r3, #8
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8010b52:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b56:	4613      	mov	r3, r2
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	4413      	add	r3, r2
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	3308      	adds	r3, #8
 8010b60:	4a25      	ldr	r2, [pc, #148]	; (8010bf8 <etharp_update_arp_entry+0x148>)
 8010b62:	4413      	add	r3, r2
 8010b64:	3304      	adds	r3, #4
 8010b66:	2206      	movs	r2, #6
 8010b68:	6879      	ldr	r1, [r7, #4]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f006 f993 	bl	8016e96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010b70:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b74:	4920      	ldr	r1, [pc, #128]	; (8010bf8 <etharp_update_arp_entry+0x148>)
 8010b76:	4613      	mov	r3, r2
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	00db      	lsls	r3, r3, #3
 8010b7e:	440b      	add	r3, r1
 8010b80:	3312      	adds	r3, #18
 8010b82:	2200      	movs	r2, #0
 8010b84:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010b86:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b8a:	491b      	ldr	r1, [pc, #108]	; (8010bf8 <etharp_update_arp_entry+0x148>)
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	4413      	add	r3, r2
 8010b92:	00db      	lsls	r3, r3, #3
 8010b94:	440b      	add	r3, r1
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d021      	beq.n	8010be0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010b9c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010ba0:	4915      	ldr	r1, [pc, #84]	; (8010bf8 <etharp_update_arp_entry+0x148>)
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	4413      	add	r3, r2
 8010ba8:	00db      	lsls	r3, r3, #3
 8010baa:	440b      	add	r3, r1
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010bb0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010bb4:	4910      	ldr	r1, [pc, #64]	; (8010bf8 <etharp_update_arp_entry+0x148>)
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	4413      	add	r3, r2
 8010bbc:	00db      	lsls	r3, r3, #3
 8010bbe:	440b      	add	r3, r1
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6939      	ldr	r1, [r7, #16]
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f001 ff29 	bl	8012a2c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010bda:	6938      	ldr	r0, [r7, #16]
 8010bdc:	f7f8 fb58 	bl	8009290 <pbuf_free>
  }
  return ERR_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3718      	adds	r7, #24
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	0801a9a4 	.word	0x0801a9a4
 8010bf0:	0801aa9c 	.word	0x0801aa9c
 8010bf4:	0801aa1c 	.word	0x0801aa1c
 8010bf8:	20000290 	.word	0x20000290

08010bfc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c04:	2300      	movs	r3, #0
 8010c06:	73fb      	strb	r3, [r7, #15]
 8010c08:	e01f      	b.n	8010c4a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8010c0a:	7bfa      	ldrb	r2, [r7, #15]
 8010c0c:	4912      	ldr	r1, [pc, #72]	; (8010c58 <etharp_cleanup_netif+0x5c>)
 8010c0e:	4613      	mov	r3, r2
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	4413      	add	r3, r2
 8010c14:	00db      	lsls	r3, r3, #3
 8010c16:	440b      	add	r3, r1
 8010c18:	3314      	adds	r3, #20
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010c1e:	7bbb      	ldrb	r3, [r7, #14]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00f      	beq.n	8010c44 <etharp_cleanup_netif+0x48>
 8010c24:	7bfa      	ldrb	r2, [r7, #15]
 8010c26:	490c      	ldr	r1, [pc, #48]	; (8010c58 <etharp_cleanup_netif+0x5c>)
 8010c28:	4613      	mov	r3, r2
 8010c2a:	005b      	lsls	r3, r3, #1
 8010c2c:	4413      	add	r3, r2
 8010c2e:	00db      	lsls	r3, r3, #3
 8010c30:	440b      	add	r3, r1
 8010c32:	3308      	adds	r3, #8
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d103      	bne.n	8010c44 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff fd12 	bl	8010668 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c44:	7bfb      	ldrb	r3, [r7, #15]
 8010c46:	3301      	adds	r3, #1
 8010c48:	73fb      	strb	r3, [r7, #15]
 8010c4a:	7bfb      	ldrb	r3, [r7, #15]
 8010c4c:	2b09      	cmp	r3, #9
 8010c4e:	d9dc      	bls.n	8010c0a <etharp_cleanup_netif+0xe>
    }
  }
}
 8010c50:	bf00      	nop
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	20000290 	.word	0x20000290

08010c5c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010c5c:	b5b0      	push	{r4, r5, r7, lr}
 8010c5e:	b08a      	sub	sp, #40	; 0x28
 8010c60:	af04      	add	r7, sp, #16
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d107      	bne.n	8010c7c <etharp_input+0x20>
 8010c6c:	4b3f      	ldr	r3, [pc, #252]	; (8010d6c <etharp_input+0x110>)
 8010c6e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8010c72:	493f      	ldr	r1, [pc, #252]	; (8010d70 <etharp_input+0x114>)
 8010c74:	483f      	ldr	r0, [pc, #252]	; (8010d74 <etharp_input+0x118>)
 8010c76:	f006 f9c9 	bl	801700c <iprintf>
 8010c7a:	e074      	b.n	8010d66 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	881b      	ldrh	r3, [r3, #0]
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c8c:	d10c      	bne.n	8010ca8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010c92:	2b06      	cmp	r3, #6
 8010c94:	d108      	bne.n	8010ca8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c9a:	2b04      	cmp	r3, #4
 8010c9c:	d104      	bne.n	8010ca8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	885b      	ldrh	r3, [r3, #2]
 8010ca2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ca4:	2b08      	cmp	r3, #8
 8010ca6:	d003      	beq.n	8010cb0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f7f8 faf1 	bl	8009290 <pbuf_free>
    return;
 8010cae:	e05a      	b.n	8010d66 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	330e      	adds	r3, #14
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	3318      	adds	r3, #24
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	3304      	adds	r3, #4
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d102      	bne.n	8010cd0 <etharp_input+0x74>
    for_us = 0;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	75fb      	strb	r3, [r7, #23]
 8010cce:	e009      	b.n	8010ce4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010cd0:	68ba      	ldr	r2, [r7, #8]
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	bf0c      	ite	eq
 8010cdc:	2301      	moveq	r3, #1
 8010cde:	2300      	movne	r3, #0
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	f103 0208 	add.w	r2, r3, #8
 8010cea:	7dfb      	ldrb	r3, [r7, #23]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <etharp_input+0x98>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e000      	b.n	8010cf6 <etharp_input+0x9a>
 8010cf4:	2302      	movs	r3, #2
 8010cf6:	f107 010c 	add.w	r1, r7, #12
 8010cfa:	6838      	ldr	r0, [r7, #0]
 8010cfc:	f7ff fed8 	bl	8010ab0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	88db      	ldrh	r3, [r3, #6]
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d0a:	d003      	beq.n	8010d14 <etharp_input+0xb8>
 8010d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d10:	d01e      	beq.n	8010d50 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8010d12:	e025      	b.n	8010d60 <etharp_input+0x104>
    if (for_us) {
 8010d14:	7dfb      	ldrb	r3, [r7, #23]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d021      	beq.n	8010d5e <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	3208      	adds	r2, #8
      etharp_raw(netif,
 8010d34:	2102      	movs	r1, #2
 8010d36:	9103      	str	r1, [sp, #12]
 8010d38:	f107 010c 	add.w	r1, r7, #12
 8010d3c:	9102      	str	r1, [sp, #8]
 8010d3e:	9201      	str	r2, [sp, #4]
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	462b      	mov	r3, r5
 8010d44:	4622      	mov	r2, r4
 8010d46:	4601      	mov	r1, r0
 8010d48:	6838      	ldr	r0, [r7, #0]
 8010d4a:	f000 fae7 	bl	801131c <etharp_raw>
    break;
 8010d4e:	e006      	b.n	8010d5e <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8010d50:	f107 030c 	add.w	r3, r7, #12
 8010d54:	4619      	mov	r1, r3
 8010d56:	6838      	ldr	r0, [r7, #0]
 8010d58:	f7fe fd32 	bl	800f7c0 <dhcp_arp_reply>
    break;
 8010d5c:	e000      	b.n	8010d60 <etharp_input+0x104>
    break;
 8010d5e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7f8 fa95 	bl	8009290 <pbuf_free>
}
 8010d66:	3718      	adds	r7, #24
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8010d6c:	0801a9a4 	.word	0x0801a9a4
 8010d70:	0801aaf4 	.word	0x0801aaf4
 8010d74:	0801aa1c 	.word	0x0801aa1c

08010d78 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b086      	sub	sp, #24
 8010d7c:	af02      	add	r7, sp, #8
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	4613      	mov	r3, r2
 8010d84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010d86:	79fa      	ldrb	r2, [r7, #7]
 8010d88:	4944      	ldr	r1, [pc, #272]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	005b      	lsls	r3, r3, #1
 8010d8e:	4413      	add	r3, r2
 8010d90:	00db      	lsls	r3, r3, #3
 8010d92:	440b      	add	r3, r1
 8010d94:	3314      	adds	r3, #20
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d806      	bhi.n	8010daa <etharp_output_to_arp_index+0x32>
 8010d9c:	4b40      	ldr	r3, [pc, #256]	; (8010ea0 <etharp_output_to_arp_index+0x128>)
 8010d9e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010da2:	4940      	ldr	r1, [pc, #256]	; (8010ea4 <etharp_output_to_arp_index+0x12c>)
 8010da4:	4840      	ldr	r0, [pc, #256]	; (8010ea8 <etharp_output_to_arp_index+0x130>)
 8010da6:	f006 f931 	bl	801700c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010daa:	79fa      	ldrb	r2, [r7, #7]
 8010dac:	493b      	ldr	r1, [pc, #236]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010dae:	4613      	mov	r3, r2
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	4413      	add	r3, r2
 8010db4:	00db      	lsls	r3, r3, #3
 8010db6:	440b      	add	r3, r1
 8010db8:	3314      	adds	r3, #20
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d153      	bne.n	8010e68 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010dc0:	79fa      	ldrb	r2, [r7, #7]
 8010dc2:	4936      	ldr	r1, [pc, #216]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	005b      	lsls	r3, r3, #1
 8010dc8:	4413      	add	r3, r2
 8010dca:	00db      	lsls	r3, r3, #3
 8010dcc:	440b      	add	r3, r1
 8010dce:	3312      	adds	r3, #18
 8010dd0:	881b      	ldrh	r3, [r3, #0]
 8010dd2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010dd6:	d919      	bls.n	8010e0c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010dd8:	79fa      	ldrb	r2, [r7, #7]
 8010dda:	4613      	mov	r3, r2
 8010ddc:	005b      	lsls	r3, r3, #1
 8010dde:	4413      	add	r3, r2
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	4a2e      	ldr	r2, [pc, #184]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010de4:	4413      	add	r3, r2
 8010de6:	3304      	adds	r3, #4
 8010de8:	4619      	mov	r1, r3
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f000 fb44 	bl	8011478 <etharp_request>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d138      	bne.n	8010e68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010df6:	79fa      	ldrb	r2, [r7, #7]
 8010df8:	4928      	ldr	r1, [pc, #160]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	4413      	add	r3, r2
 8010e00:	00db      	lsls	r3, r3, #3
 8010e02:	440b      	add	r3, r1
 8010e04:	3314      	adds	r3, #20
 8010e06:	2203      	movs	r2, #3
 8010e08:	701a      	strb	r2, [r3, #0]
 8010e0a:	e02d      	b.n	8010e68 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010e0c:	79fa      	ldrb	r2, [r7, #7]
 8010e0e:	4923      	ldr	r1, [pc, #140]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010e10:	4613      	mov	r3, r2
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	4413      	add	r3, r2
 8010e16:	00db      	lsls	r3, r3, #3
 8010e18:	440b      	add	r3, r1
 8010e1a:	3312      	adds	r3, #18
 8010e1c:	881b      	ldrh	r3, [r3, #0]
 8010e1e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010e22:	d321      	bcc.n	8010e68 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010e24:	79fa      	ldrb	r2, [r7, #7]
 8010e26:	4613      	mov	r3, r2
 8010e28:	005b      	lsls	r3, r3, #1
 8010e2a:	4413      	add	r3, r2
 8010e2c:	00db      	lsls	r3, r3, #3
 8010e2e:	4a1b      	ldr	r2, [pc, #108]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010e30:	4413      	add	r3, r2
 8010e32:	1d19      	adds	r1, r3, #4
 8010e34:	79fa      	ldrb	r2, [r7, #7]
 8010e36:	4613      	mov	r3, r2
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	4413      	add	r3, r2
 8010e3c:	00db      	lsls	r3, r3, #3
 8010e3e:	3308      	adds	r3, #8
 8010e40:	4a16      	ldr	r2, [pc, #88]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010e42:	4413      	add	r3, r2
 8010e44:	3304      	adds	r3, #4
 8010e46:	461a      	mov	r2, r3
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f000 faf3 	bl	8011434 <etharp_request_dst>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d109      	bne.n	8010e68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e54:	79fa      	ldrb	r2, [r7, #7]
 8010e56:	4911      	ldr	r1, [pc, #68]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010e58:	4613      	mov	r3, r2
 8010e5a:	005b      	lsls	r3, r3, #1
 8010e5c:	4413      	add	r3, r2
 8010e5e:	00db      	lsls	r3, r3, #3
 8010e60:	440b      	add	r3, r1
 8010e62:	3314      	adds	r3, #20
 8010e64:	2203      	movs	r2, #3
 8010e66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8010e6e:	79fa      	ldrb	r2, [r7, #7]
 8010e70:	4613      	mov	r3, r2
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	4413      	add	r3, r2
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	3308      	adds	r3, #8
 8010e7a:	4a08      	ldr	r2, [pc, #32]	; (8010e9c <etharp_output_to_arp_index+0x124>)
 8010e7c:	4413      	add	r3, r2
 8010e7e:	1d1a      	adds	r2, r3, #4
 8010e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	4613      	mov	r3, r2
 8010e88:	460a      	mov	r2, r1
 8010e8a:	68b9      	ldr	r1, [r7, #8]
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f001 fdcd 	bl	8012a2c <ethernet_output>
 8010e92:	4603      	mov	r3, r0
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3710      	adds	r7, #16
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	20000290 	.word	0x20000290
 8010ea0:	0801a9a4 	.word	0x0801a9a4
 8010ea4:	0801ab14 	.word	0x0801ab14
 8010ea8:	0801aa1c 	.word	0x0801aa1c

08010eac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b08a      	sub	sp, #40	; 0x28
 8010eb0:	af02      	add	r7, sp, #8
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d106      	bne.n	8010ed0 <etharp_output+0x24>
 8010ec2:	4b69      	ldr	r3, [pc, #420]	; (8011068 <etharp_output+0x1bc>)
 8010ec4:	f240 321b 	movw	r2, #795	; 0x31b
 8010ec8:	4968      	ldr	r1, [pc, #416]	; (801106c <etharp_output+0x1c0>)
 8010eca:	4869      	ldr	r0, [pc, #420]	; (8011070 <etharp_output+0x1c4>)
 8010ecc:	f006 f89e 	bl	801700c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d106      	bne.n	8010ee4 <etharp_output+0x38>
 8010ed6:	4b64      	ldr	r3, [pc, #400]	; (8011068 <etharp_output+0x1bc>)
 8010ed8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010edc:	4965      	ldr	r1, [pc, #404]	; (8011074 <etharp_output+0x1c8>)
 8010ede:	4864      	ldr	r0, [pc, #400]	; (8011070 <etharp_output+0x1c4>)
 8010ee0:	f006 f894 	bl	801700c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d106      	bne.n	8010ef8 <etharp_output+0x4c>
 8010eea:	4b5f      	ldr	r3, [pc, #380]	; (8011068 <etharp_output+0x1bc>)
 8010eec:	f240 321d 	movw	r2, #797	; 0x31d
 8010ef0:	4961      	ldr	r1, [pc, #388]	; (8011078 <etharp_output+0x1cc>)
 8010ef2:	485f      	ldr	r0, [pc, #380]	; (8011070 <etharp_output+0x1c4>)
 8010ef4:	f006 f88a 	bl	801700c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	68f9      	ldr	r1, [r7, #12]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f000 fef2 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 8010f04:	4603      	mov	r3, r0
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d002      	beq.n	8010f10 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010f0a:	4b5c      	ldr	r3, [pc, #368]	; (801107c <etharp_output+0x1d0>)
 8010f0c:	61fb      	str	r3, [r7, #28]
 8010f0e:	e09b      	b.n	8011048 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f18:	2be0      	cmp	r3, #224	; 0xe0
 8010f1a:	d118      	bne.n	8010f4e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010f20:	2300      	movs	r3, #0
 8010f22:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010f24:	235e      	movs	r3, #94	; 0x5e
 8010f26:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	3302      	adds	r3, #2
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3303      	adds	r3, #3
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010f46:	f107 0310 	add.w	r3, r7, #16
 8010f4a:	61fb      	str	r3, [r7, #28]
 8010f4c:	e07c      	b.n	8011048 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	3304      	adds	r3, #4
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	405a      	eors	r2, r3
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	3308      	adds	r3, #8
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4013      	ands	r3, r2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d012      	beq.n	8010f8c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f6c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d00b      	beq.n	8010f8c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	330c      	adds	r3, #12
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d003      	beq.n	8010f86 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	330c      	adds	r3, #12
 8010f82:	61bb      	str	r3, [r7, #24]
 8010f84:	e002      	b.n	8010f8c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010f86:	f06f 0303 	mvn.w	r3, #3
 8010f8a:	e069      	b.n	8011060 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010f8c:	4b3c      	ldr	r3, [pc, #240]	; (8011080 <etharp_output+0x1d4>)
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	4619      	mov	r1, r3
 8010f92:	4a3c      	ldr	r2, [pc, #240]	; (8011084 <etharp_output+0x1d8>)
 8010f94:	460b      	mov	r3, r1
 8010f96:	005b      	lsls	r3, r3, #1
 8010f98:	440b      	add	r3, r1
 8010f9a:	00db      	lsls	r3, r3, #3
 8010f9c:	4413      	add	r3, r2
 8010f9e:	3314      	adds	r3, #20
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d917      	bls.n	8010fd6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	4b35      	ldr	r3, [pc, #212]	; (8011080 <etharp_output+0x1d4>)
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	4934      	ldr	r1, [pc, #208]	; (8011084 <etharp_output+0x1d8>)
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	4403      	add	r3, r0
 8010fb8:	00db      	lsls	r3, r3, #3
 8010fba:	440b      	add	r3, r1
 8010fbc:	3304      	adds	r3, #4
 8010fbe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d108      	bne.n	8010fd6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010fc4:	4b2e      	ldr	r3, [pc, #184]	; (8011080 <etharp_output+0x1d4>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	461a      	mov	r2, r3
 8010fca:	68b9      	ldr	r1, [r7, #8]
 8010fcc:	68f8      	ldr	r0, [r7, #12]
 8010fce:	f7ff fed3 	bl	8010d78 <etharp_output_to_arp_index>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	e044      	b.n	8011060 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	75fb      	strb	r3, [r7, #23]
 8010fda:	e02a      	b.n	8011032 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010fdc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010fe0:	4928      	ldr	r1, [pc, #160]	; (8011084 <etharp_output+0x1d8>)
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	4413      	add	r3, r2
 8010fe8:	00db      	lsls	r3, r3, #3
 8010fea:	440b      	add	r3, r1
 8010fec:	3314      	adds	r3, #20
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d918      	bls.n	8011026 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	6819      	ldr	r1, [r3, #0]
 8010ff8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010ffc:	4821      	ldr	r0, [pc, #132]	; (8011084 <etharp_output+0x1d8>)
 8010ffe:	4613      	mov	r3, r2
 8011000:	005b      	lsls	r3, r3, #1
 8011002:	4413      	add	r3, r2
 8011004:	00db      	lsls	r3, r3, #3
 8011006:	4403      	add	r3, r0
 8011008:	3304      	adds	r3, #4
 801100a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801100c:	4299      	cmp	r1, r3
 801100e:	d10a      	bne.n	8011026 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8011010:	7dfa      	ldrb	r2, [r7, #23]
 8011012:	4b1b      	ldr	r3, [pc, #108]	; (8011080 <etharp_output+0x1d4>)
 8011014:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011016:	7dfb      	ldrb	r3, [r7, #23]
 8011018:	461a      	mov	r2, r3
 801101a:	68b9      	ldr	r1, [r7, #8]
 801101c:	68f8      	ldr	r0, [r7, #12]
 801101e:	f7ff feab 	bl	8010d78 <etharp_output_to_arp_index>
 8011022:	4603      	mov	r3, r0
 8011024:	e01c      	b.n	8011060 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801102a:	b2db      	uxtb	r3, r3
 801102c:	3301      	adds	r3, #1
 801102e:	b2db      	uxtb	r3, r3
 8011030:	75fb      	strb	r3, [r7, #23]
 8011032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011036:	2b09      	cmp	r3, #9
 8011038:	ddd0      	ble.n	8010fdc <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801103a:	68ba      	ldr	r2, [r7, #8]
 801103c:	69b9      	ldr	r1, [r7, #24]
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f000 f822 	bl	8011088 <etharp_query>
 8011044:	4603      	mov	r3, r0
 8011046:	e00b      	b.n	8011060 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801104e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011052:	9300      	str	r3, [sp, #0]
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f001 fce7 	bl	8012a2c <ethernet_output>
 801105e:	4603      	mov	r3, r0
}
 8011060:	4618      	mov	r0, r3
 8011062:	3720      	adds	r7, #32
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	0801a9a4 	.word	0x0801a9a4
 801106c:	0801aaf4 	.word	0x0801aaf4
 8011070:	0801aa1c 	.word	0x0801aa1c
 8011074:	0801ab44 	.word	0x0801ab44
 8011078:	0801aae4 	.word	0x0801aae4
 801107c:	0801b348 	.word	0x0801b348
 8011080:	20000380 	.word	0x20000380
 8011084:	20000290 	.word	0x20000290

08011088 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b08c      	sub	sp, #48	; 0x30
 801108c:	af02      	add	r7, sp, #8
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3329      	adds	r3, #41	; 0x29
 8011098:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801109a:	23ff      	movs	r3, #255	; 0xff
 801109c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80110a0:	2300      	movs	r3, #0
 80110a2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	68f9      	ldr	r1, [r7, #12]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f000 fe1c 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10c      	bne.n	80110d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110be:	2be0      	cmp	r3, #224	; 0xe0
 80110c0:	d006      	beq.n	80110d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d003      	beq.n	80110d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d102      	bne.n	80110d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80110d0:	f06f 030f 	mvn.w	r3, #15
 80110d4:	e10f      	b.n	80112f6 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	2101      	movs	r1, #1
 80110da:	68b8      	ldr	r0, [r7, #8]
 80110dc:	f7ff fb9e 	bl	801081c <etharp_find_entry>
 80110e0:	4603      	mov	r3, r0
 80110e2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 80110e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	da02      	bge.n	80110f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 80110ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110f0:	e101      	b.n	80112f6 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80110f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80110f6:	4982      	ldr	r1, [pc, #520]	; (8011300 <etharp_query+0x278>)
 80110f8:	4613      	mov	r3, r2
 80110fa:	005b      	lsls	r3, r3, #1
 80110fc:	4413      	add	r3, r2
 80110fe:	00db      	lsls	r3, r3, #3
 8011100:	440b      	add	r3, r1
 8011102:	3314      	adds	r3, #20
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d117      	bne.n	801113a <etharp_query+0xb2>
    is_new_entry = 1;
 801110a:	2301      	movs	r3, #1
 801110c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801110e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011112:	497b      	ldr	r1, [pc, #492]	; (8011300 <etharp_query+0x278>)
 8011114:	4613      	mov	r3, r2
 8011116:	005b      	lsls	r3, r3, #1
 8011118:	4413      	add	r3, r2
 801111a:	00db      	lsls	r3, r3, #3
 801111c:	440b      	add	r3, r1
 801111e:	3314      	adds	r3, #20
 8011120:	2201      	movs	r2, #1
 8011122:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011124:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011128:	4975      	ldr	r1, [pc, #468]	; (8011300 <etharp_query+0x278>)
 801112a:	4613      	mov	r3, r2
 801112c:	005b      	lsls	r3, r3, #1
 801112e:	4413      	add	r3, r2
 8011130:	00db      	lsls	r3, r3, #3
 8011132:	440b      	add	r3, r1
 8011134:	3308      	adds	r3, #8
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801113a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801113e:	4970      	ldr	r1, [pc, #448]	; (8011300 <etharp_query+0x278>)
 8011140:	4613      	mov	r3, r2
 8011142:	005b      	lsls	r3, r3, #1
 8011144:	4413      	add	r3, r2
 8011146:	00db      	lsls	r3, r3, #3
 8011148:	440b      	add	r3, r1
 801114a:	3314      	adds	r3, #20
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	2b01      	cmp	r3, #1
 8011150:	d012      	beq.n	8011178 <etharp_query+0xf0>
 8011152:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011156:	496a      	ldr	r1, [pc, #424]	; (8011300 <etharp_query+0x278>)
 8011158:	4613      	mov	r3, r2
 801115a:	005b      	lsls	r3, r3, #1
 801115c:	4413      	add	r3, r2
 801115e:	00db      	lsls	r3, r3, #3
 8011160:	440b      	add	r3, r1
 8011162:	3314      	adds	r3, #20
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	2b01      	cmp	r3, #1
 8011168:	d806      	bhi.n	8011178 <etharp_query+0xf0>
 801116a:	4b66      	ldr	r3, [pc, #408]	; (8011304 <etharp_query+0x27c>)
 801116c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011170:	4965      	ldr	r1, [pc, #404]	; (8011308 <etharp_query+0x280>)
 8011172:	4866      	ldr	r0, [pc, #408]	; (801130c <etharp_query+0x284>)
 8011174:	f005 ff4a 	bl	801700c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d102      	bne.n	8011184 <etharp_query+0xfc>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d10c      	bne.n	801119e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011184:	68b9      	ldr	r1, [r7, #8]
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f000 f976 	bl	8011478 <etharp_request>
 801118c:	4603      	mov	r3, r0
 801118e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d102      	bne.n	801119e <etharp_query+0x116>
      return result;
 8011198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801119c:	e0ab      	b.n	80112f6 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d106      	bne.n	80111b2 <etharp_query+0x12a>
 80111a4:	4b57      	ldr	r3, [pc, #348]	; (8011304 <etharp_query+0x27c>)
 80111a6:	f240 32db 	movw	r2, #987	; 0x3db
 80111aa:	4959      	ldr	r1, [pc, #356]	; (8011310 <etharp_query+0x288>)
 80111ac:	4857      	ldr	r0, [pc, #348]	; (801130c <etharp_query+0x284>)
 80111ae:	f005 ff2d 	bl	801700c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80111b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80111b6:	4952      	ldr	r1, [pc, #328]	; (8011300 <etharp_query+0x278>)
 80111b8:	4613      	mov	r3, r2
 80111ba:	005b      	lsls	r3, r3, #1
 80111bc:	4413      	add	r3, r2
 80111be:	00db      	lsls	r3, r3, #3
 80111c0:	440b      	add	r3, r1
 80111c2:	3314      	adds	r3, #20
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d919      	bls.n	80111fe <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80111ca:	7cfa      	ldrb	r2, [r7, #19]
 80111cc:	4b51      	ldr	r3, [pc, #324]	; (8011314 <etharp_query+0x28c>)
 80111ce:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80111d0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80111d4:	4613      	mov	r3, r2
 80111d6:	005b      	lsls	r3, r3, #1
 80111d8:	4413      	add	r3, r2
 80111da:	00db      	lsls	r3, r3, #3
 80111dc:	3308      	adds	r3, #8
 80111de:	4a48      	ldr	r2, [pc, #288]	; (8011300 <etharp_query+0x278>)
 80111e0:	4413      	add	r3, r2
 80111e2:	1d1a      	adds	r2, r3, #4
 80111e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	4613      	mov	r3, r2
 80111ec:	697a      	ldr	r2, [r7, #20]
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f001 fc1b 	bl	8012a2c <ethernet_output>
 80111f6:	4603      	mov	r3, r0
 80111f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111fc:	e079      	b.n	80112f2 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80111fe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011202:	493f      	ldr	r1, [pc, #252]	; (8011300 <etharp_query+0x278>)
 8011204:	4613      	mov	r3, r2
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	4413      	add	r3, r2
 801120a:	00db      	lsls	r3, r3, #3
 801120c:	440b      	add	r3, r1
 801120e:	3314      	adds	r3, #20
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	2b01      	cmp	r3, #1
 8011214:	d16d      	bne.n	80112f2 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011216:	2300      	movs	r3, #0
 8011218:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801121e:	e01a      	b.n	8011256 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	895a      	ldrh	r2, [r3, #10]
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	891b      	ldrh	r3, [r3, #8]
 8011228:	429a      	cmp	r2, r3
 801122a:	d10a      	bne.n	8011242 <etharp_query+0x1ba>
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d006      	beq.n	8011242 <etharp_query+0x1ba>
 8011234:	4b33      	ldr	r3, [pc, #204]	; (8011304 <etharp_query+0x27c>)
 8011236:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801123a:	4937      	ldr	r1, [pc, #220]	; (8011318 <etharp_query+0x290>)
 801123c:	4833      	ldr	r0, [pc, #204]	; (801130c <etharp_query+0x284>)
 801123e:	f005 fee5 	bl	801700c <iprintf>
      if (p->type != PBUF_ROM) {
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	7b1b      	ldrb	r3, [r3, #12]
 8011246:	2b01      	cmp	r3, #1
 8011248:	d002      	beq.n	8011250 <etharp_query+0x1c8>
        copy_needed = 1;
 801124a:	2301      	movs	r3, #1
 801124c:	61bb      	str	r3, [r7, #24]
        break;
 801124e:	e005      	b.n	801125c <etharp_query+0x1d4>
      }
      p = p->next;
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1e1      	bne.n	8011220 <etharp_query+0x198>
    }
    if (copy_needed) {
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d017      	beq.n	8011292 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	891b      	ldrh	r3, [r3, #8]
 8011266:	2200      	movs	r2, #0
 8011268:	4619      	mov	r1, r3
 801126a:	2002      	movs	r0, #2
 801126c:	f7f7 fc9e 	bl	8008bac <pbuf_alloc>
 8011270:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d011      	beq.n	801129c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8011278:	6879      	ldr	r1, [r7, #4]
 801127a:	69f8      	ldr	r0, [r7, #28]
 801127c:	f7f8 f93c 	bl	80094f8 <pbuf_copy>
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d00a      	beq.n	801129c <etharp_query+0x214>
          pbuf_free(p);
 8011286:	69f8      	ldr	r0, [r7, #28]
 8011288:	f7f8 f802 	bl	8009290 <pbuf_free>
          p = NULL;
 801128c:	2300      	movs	r3, #0
 801128e:	61fb      	str	r3, [r7, #28]
 8011290:	e004      	b.n	801129c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011296:	69f8      	ldr	r0, [r7, #28]
 8011298:	f7f8 f8a6 	bl	80093e8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d024      	beq.n	80112ec <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80112a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80112a6:	4916      	ldr	r1, [pc, #88]	; (8011300 <etharp_query+0x278>)
 80112a8:	4613      	mov	r3, r2
 80112aa:	005b      	lsls	r3, r3, #1
 80112ac:	4413      	add	r3, r2
 80112ae:	00db      	lsls	r3, r3, #3
 80112b0:	440b      	add	r3, r1
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00b      	beq.n	80112d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80112b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80112bc:	4910      	ldr	r1, [pc, #64]	; (8011300 <etharp_query+0x278>)
 80112be:	4613      	mov	r3, r2
 80112c0:	005b      	lsls	r3, r3, #1
 80112c2:	4413      	add	r3, r2
 80112c4:	00db      	lsls	r3, r3, #3
 80112c6:	440b      	add	r3, r1
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7f7 ffe0 	bl	8009290 <pbuf_free>
      }
      arp_table[i].q = p;
 80112d0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80112d4:	490a      	ldr	r1, [pc, #40]	; (8011300 <etharp_query+0x278>)
 80112d6:	4613      	mov	r3, r2
 80112d8:	005b      	lsls	r3, r3, #1
 80112da:	4413      	add	r3, r2
 80112dc:	00db      	lsls	r3, r3, #3
 80112de:	440b      	add	r3, r1
 80112e0:	69fa      	ldr	r2, [r7, #28]
 80112e2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80112ea:	e002      	b.n	80112f2 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80112ec:	23ff      	movs	r3, #255	; 0xff
 80112ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80112f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3728      	adds	r7, #40	; 0x28
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	20000290 	.word	0x20000290
 8011304:	0801a9a4 	.word	0x0801a9a4
 8011308:	0801ab50 	.word	0x0801ab50
 801130c:	0801aa1c 	.word	0x0801aa1c
 8011310:	0801ab44 	.word	0x0801ab44
 8011314:	20000380 	.word	0x20000380
 8011318:	0801ab78 	.word	0x0801ab78

0801131c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b08a      	sub	sp, #40	; 0x28
 8011320:	af02      	add	r7, sp, #8
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
 8011328:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801132a:	2300      	movs	r3, #0
 801132c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d106      	bne.n	8011342 <etharp_raw+0x26>
 8011334:	4b3a      	ldr	r3, [pc, #232]	; (8011420 <etharp_raw+0x104>)
 8011336:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801133a:	493a      	ldr	r1, [pc, #232]	; (8011424 <etharp_raw+0x108>)
 801133c:	483a      	ldr	r0, [pc, #232]	; (8011428 <etharp_raw+0x10c>)
 801133e:	f005 fe65 	bl	801700c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011342:	2200      	movs	r2, #0
 8011344:	211c      	movs	r1, #28
 8011346:	2002      	movs	r0, #2
 8011348:	f7f7 fc30 	bl	8008bac <pbuf_alloc>
 801134c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d102      	bne.n	801135a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011358:	e05d      	b.n	8011416 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	895b      	ldrh	r3, [r3, #10]
 801135e:	2b1b      	cmp	r3, #27
 8011360:	d806      	bhi.n	8011370 <etharp_raw+0x54>
 8011362:	4b2f      	ldr	r3, [pc, #188]	; (8011420 <etharp_raw+0x104>)
 8011364:	f240 4264 	movw	r2, #1124	; 0x464
 8011368:	4930      	ldr	r1, [pc, #192]	; (801142c <etharp_raw+0x110>)
 801136a:	482f      	ldr	r0, [pc, #188]	; (8011428 <etharp_raw+0x10c>)
 801136c:	f005 fe4e 	bl	801700c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011376:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011378:	4618      	mov	r0, r3
 801137a:	f7f6 fe5d 	bl	8008038 <lwip_htons>
 801137e:	4603      	mov	r3, r0
 8011380:	461a      	mov	r2, r3
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801138c:	2b06      	cmp	r3, #6
 801138e:	d006      	beq.n	801139e <etharp_raw+0x82>
 8011390:	4b23      	ldr	r3, [pc, #140]	; (8011420 <etharp_raw+0x104>)
 8011392:	f240 426b 	movw	r2, #1131	; 0x46b
 8011396:	4926      	ldr	r1, [pc, #152]	; (8011430 <etharp_raw+0x114>)
 8011398:	4823      	ldr	r0, [pc, #140]	; (8011428 <etharp_raw+0x10c>)
 801139a:	f005 fe37 	bl	801700c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	3308      	adds	r3, #8
 80113a2:	2206      	movs	r2, #6
 80113a4:	6839      	ldr	r1, [r7, #0]
 80113a6:	4618      	mov	r0, r3
 80113a8:	f005 fd75 	bl	8016e96 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	3312      	adds	r3, #18
 80113b0:	2206      	movs	r2, #6
 80113b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113b4:	4618      	mov	r0, r3
 80113b6:	f005 fd6e 	bl	8016e96 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	330e      	adds	r3, #14
 80113be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113c0:	6812      	ldr	r2, [r2, #0]
 80113c2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	3318      	adds	r3, #24
 80113c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113ca:	6812      	ldr	r2, [r2, #0]
 80113cc:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	2200      	movs	r2, #0
 80113d2:	701a      	strb	r2, [r3, #0]
 80113d4:	2200      	movs	r2, #0
 80113d6:	f042 0201 	orr.w	r2, r2, #1
 80113da:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	2200      	movs	r2, #0
 80113e0:	f042 0208 	orr.w	r2, r2, #8
 80113e4:	709a      	strb	r2, [r3, #2]
 80113e6:	2200      	movs	r2, #0
 80113e8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	2206      	movs	r2, #6
 80113ee:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	2204      	movs	r2, #4
 80113f4:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80113f6:	f640 0306 	movw	r3, #2054	; 0x806
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	68ba      	ldr	r2, [r7, #8]
 8011400:	69b9      	ldr	r1, [r7, #24]
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f001 fb12 	bl	8012a2c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011408:	69b8      	ldr	r0, [r7, #24]
 801140a:	f7f7 ff41 	bl	8009290 <pbuf_free>
  p = NULL;
 801140e:	2300      	movs	r3, #0
 8011410:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011412:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011416:	4618      	mov	r0, r3
 8011418:	3720      	adds	r7, #32
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	0801a9a4 	.word	0x0801a9a4
 8011424:	0801aaf4 	.word	0x0801aaf4
 8011428:	0801aa1c 	.word	0x0801aa1c
 801142c:	0801ab94 	.word	0x0801ab94
 8011430:	0801abc8 	.word	0x0801abc8

08011434 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b088      	sub	sp, #32
 8011438:	af04      	add	r7, sp, #16
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f103 0029 	add.w	r0, r3, #41	; 0x29
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011450:	2201      	movs	r2, #1
 8011452:	9203      	str	r2, [sp, #12]
 8011454:	68ba      	ldr	r2, [r7, #8]
 8011456:	9202      	str	r2, [sp, #8]
 8011458:	4a06      	ldr	r2, [pc, #24]	; (8011474 <etharp_request_dst+0x40>)
 801145a:	9201      	str	r2, [sp, #4]
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	4603      	mov	r3, r0
 8011460:	687a      	ldr	r2, [r7, #4]
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f7ff ff5a 	bl	801131c <etharp_raw>
 8011468:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	0801b350 	.word	0x0801b350

08011478 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011482:	4a05      	ldr	r2, [pc, #20]	; (8011498 <etharp_request+0x20>)
 8011484:	6839      	ldr	r1, [r7, #0]
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f7ff ffd4 	bl	8011434 <etharp_request_dst>
 801148c:	4603      	mov	r3, r0
}
 801148e:	4618      	mov	r0, r3
 8011490:	3708      	adds	r7, #8
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	0801b348 	.word	0x0801b348

0801149c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b08e      	sub	sp, #56	; 0x38
 80114a0:	af04      	add	r7, sp, #16
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80114a6:	4b7a      	ldr	r3, [pc, #488]	; (8011690 <icmp_input+0x1f4>)
 80114a8:	689b      	ldr	r3, [r3, #8]
 80114aa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80114ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	f003 030f 	and.w	r3, r3, #15
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80114bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114be:	2b13      	cmp	r3, #19
 80114c0:	f240 80d1 	bls.w	8011666 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	895b      	ldrh	r3, [r3, #10]
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	f240 80ce 	bls.w	801166a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80114d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80114dc:	2b00      	cmp	r3, #0
 80114de:	f000 80bb 	beq.w	8011658 <icmp_input+0x1bc>
 80114e2:	2b08      	cmp	r3, #8
 80114e4:	f040 80bb 	bne.w	801165e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80114e8:	4b6a      	ldr	r3, [pc, #424]	; (8011694 <icmp_input+0x1f8>)
 80114ea:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114ec:	4b68      	ldr	r3, [pc, #416]	; (8011690 <icmp_input+0x1f4>)
 80114ee:	695b      	ldr	r3, [r3, #20]
 80114f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114f4:	2be0      	cmp	r3, #224	; 0xe0
 80114f6:	f000 80bf 	beq.w	8011678 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80114fa:	4b65      	ldr	r3, [pc, #404]	; (8011690 <icmp_input+0x1f4>)
 80114fc:	695a      	ldr	r2, [r3, #20]
 80114fe:	4b64      	ldr	r3, [pc, #400]	; (8011690 <icmp_input+0x1f4>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4619      	mov	r1, r3
 8011504:	4610      	mov	r0, r2
 8011506:	f000 fbef 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	f040 80b5 	bne.w	801167c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	891b      	ldrh	r3, [r3, #8]
 8011516:	2b07      	cmp	r3, #7
 8011518:	f240 80a9 	bls.w	801166e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801151c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801151e:	330e      	adds	r3, #14
 8011520:	b29b      	uxth	r3, r3
 8011522:	b21b      	sxth	r3, r3
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7f7 fe8e 	bl	8009248 <pbuf_header>
 801152c:	4603      	mov	r3, r0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d046      	beq.n	80115c0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	891a      	ldrh	r2, [r3, #8]
 8011536:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011538:	4413      	add	r3, r2
 801153a:	b29b      	uxth	r3, r3
 801153c:	2200      	movs	r2, #0
 801153e:	4619      	mov	r1, r3
 8011540:	2002      	movs	r0, #2
 8011542:	f7f7 fb33 	bl	8008bac <pbuf_alloc>
 8011546:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8011548:	69bb      	ldr	r3, [r7, #24]
 801154a:	2b00      	cmp	r3, #0
 801154c:	f000 8098 	beq.w	8011680 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	895b      	ldrh	r3, [r3, #10]
 8011554:	461a      	mov	r2, r3
 8011556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011558:	3308      	adds	r3, #8
 801155a:	429a      	cmp	r2, r3
 801155c:	d203      	bcs.n	8011566 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801155e:	69b8      	ldr	r0, [r7, #24]
 8011560:	f7f7 fe96 	bl	8009290 <pbuf_free>
        goto icmperr;
 8011564:	e08d      	b.n	8011682 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801156c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801156e:	4618      	mov	r0, r3
 8011570:	f005 fc91 	bl	8016e96 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8011574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011576:	425b      	negs	r3, r3
 8011578:	b29b      	uxth	r3, r3
 801157a:	b21b      	sxth	r3, r3
 801157c:	4619      	mov	r1, r3
 801157e:	69b8      	ldr	r0, [r7, #24]
 8011580:	f7f7 fe62 	bl	8009248 <pbuf_header>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d009      	beq.n	801159e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801158a:	4b43      	ldr	r3, [pc, #268]	; (8011698 <icmp_input+0x1fc>)
 801158c:	22af      	movs	r2, #175	; 0xaf
 801158e:	4943      	ldr	r1, [pc, #268]	; (801169c <icmp_input+0x200>)
 8011590:	4843      	ldr	r0, [pc, #268]	; (80116a0 <icmp_input+0x204>)
 8011592:	f005 fd3b 	bl	801700c <iprintf>
        pbuf_free(r);
 8011596:	69b8      	ldr	r0, [r7, #24]
 8011598:	f7f7 fe7a 	bl	8009290 <pbuf_free>
        goto icmperr;
 801159c:	e071      	b.n	8011682 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801159e:	6879      	ldr	r1, [r7, #4]
 80115a0:	69b8      	ldr	r0, [r7, #24]
 80115a2:	f7f7 ffa9 	bl	80094f8 <pbuf_copy>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d003      	beq.n	80115b4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80115ac:	69b8      	ldr	r0, [r7, #24]
 80115ae:	f7f7 fe6f 	bl	8009290 <pbuf_free>
        goto icmperr;
 80115b2:	e066      	b.n	8011682 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f7f7 fe6b 	bl	8009290 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	607b      	str	r3, [r7, #4]
 80115be:	e015      	b.n	80115ec <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80115c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115c2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80115c6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80115ca:	33f2      	adds	r3, #242	; 0xf2
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	b21b      	sxth	r3, r3
 80115d0:	4619      	mov	r1, r3
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7f7 fe38 	bl	8009248 <pbuf_header>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d006      	beq.n	80115ec <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80115de:	4b2e      	ldr	r3, [pc, #184]	; (8011698 <icmp_input+0x1fc>)
 80115e0:	22c0      	movs	r2, #192	; 0xc0
 80115e2:	4930      	ldr	r1, [pc, #192]	; (80116a4 <icmp_input+0x208>)
 80115e4:	482e      	ldr	r0, [pc, #184]	; (80116a0 <icmp_input+0x204>)
 80115e6:	f005 fd11 	bl	801700c <iprintf>
        goto icmperr;
 80115ea:	e04a      	b.n	8011682 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80115f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80115f6:	4619      	mov	r1, r3
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7f7 fe25 	bl	8009248 <pbuf_header>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d12b      	bne.n	801165c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801160a:	69fb      	ldr	r3, [r7, #28]
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011612:	4b1f      	ldr	r3, [pc, #124]	; (8011690 <icmp_input+0x1f4>)
 8011614:	691a      	ldr	r2, [r3, #16]
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	2200      	movs	r2, #0
 801161e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	2200      	movs	r2, #0
 8011624:	709a      	strb	r2, [r3, #2]
 8011626:	2200      	movs	r2, #0
 8011628:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	22ff      	movs	r2, #255	; 0xff
 801162e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	2200      	movs	r2, #0
 8011634:	729a      	strb	r2, [r3, #10]
 8011636:	2200      	movs	r2, #0
 8011638:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	9302      	str	r3, [sp, #8]
 801163e:	2301      	movs	r3, #1
 8011640:	9301      	str	r3, [sp, #4]
 8011642:	2300      	movs	r3, #0
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	23ff      	movs	r3, #255	; 0xff
 8011648:	2200      	movs	r2, #0
 801164a:	69f9      	ldr	r1, [r7, #28]
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f000 fa79 	bl	8011b44 <ip4_output_if>
 8011652:	4603      	mov	r3, r0
 8011654:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8011656:	e001      	b.n	801165c <icmp_input+0x1c0>
    break;
 8011658:	bf00      	nop
 801165a:	e000      	b.n	801165e <icmp_input+0x1c2>
    break;
 801165c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7f7 fe16 	bl	8009290 <pbuf_free>
  return;
 8011664:	e011      	b.n	801168a <icmp_input+0x1ee>
    goto lenerr;
 8011666:	bf00      	nop
 8011668:	e002      	b.n	8011670 <icmp_input+0x1d4>
    goto lenerr;
 801166a:	bf00      	nop
 801166c:	e000      	b.n	8011670 <icmp_input+0x1d4>
      goto lenerr;
 801166e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7f7 fe0d 	bl	8009290 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011676:	e008      	b.n	801168a <icmp_input+0x1ee>
      goto icmperr;
 8011678:	bf00      	nop
 801167a:	e002      	b.n	8011682 <icmp_input+0x1e6>
      goto icmperr;
 801167c:	bf00      	nop
 801167e:	e000      	b.n	8011682 <icmp_input+0x1e6>
        goto icmperr;
 8011680:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7f7 fe04 	bl	8009290 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011688:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801168a:	3728      	adds	r7, #40	; 0x28
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	200003fc 	.word	0x200003fc
 8011694:	20000410 	.word	0x20000410
 8011698:	0801ac0c 	.word	0x0801ac0c
 801169c:	0801ac44 	.word	0x0801ac44
 80116a0:	0801ac7c 	.word	0x0801ac7c
 80116a4:	0801aca4 	.word	0x0801aca4

080116a8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	460b      	mov	r3, r1
 80116b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80116b4:	78fb      	ldrb	r3, [r7, #3]
 80116b6:	461a      	mov	r2, r3
 80116b8:	2103      	movs	r1, #3
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f814 	bl	80116e8 <icmp_send_response>
}
 80116c0:	bf00      	nop
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80116d4:	78fb      	ldrb	r3, [r7, #3]
 80116d6:	461a      	mov	r2, r3
 80116d8:	210b      	movs	r1, #11
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f000 f804 	bl	80116e8 <icmp_send_response>
}
 80116e0:	bf00      	nop
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b08c      	sub	sp, #48	; 0x30
 80116ec:	af04      	add	r7, sp, #16
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	460b      	mov	r3, r1
 80116f2:	70fb      	strb	r3, [r7, #3]
 80116f4:	4613      	mov	r3, r2
 80116f6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80116f8:	2200      	movs	r2, #0
 80116fa:	2124      	movs	r1, #36	; 0x24
 80116fc:	2001      	movs	r0, #1
 80116fe:	f7f7 fa55 	bl	8008bac <pbuf_alloc>
 8011702:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d04c      	beq.n	80117a4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	895b      	ldrh	r3, [r3, #10]
 801170e:	2b23      	cmp	r3, #35	; 0x23
 8011710:	d806      	bhi.n	8011720 <icmp_send_response+0x38>
 8011712:	4b26      	ldr	r3, [pc, #152]	; (80117ac <icmp_send_response+0xc4>)
 8011714:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8011718:	4925      	ldr	r1, [pc, #148]	; (80117b0 <icmp_send_response+0xc8>)
 801171a:	4826      	ldr	r0, [pc, #152]	; (80117b4 <icmp_send_response+0xcc>)
 801171c:	f005 fc76 	bl	801700c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	78fa      	ldrb	r2, [r7, #3]
 8011730:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	78ba      	ldrb	r2, [r7, #2]
 8011736:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	2200      	movs	r2, #0
 801173c:	711a      	strb	r2, [r3, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	2200      	movs	r2, #0
 8011746:	719a      	strb	r2, [r3, #6]
 8011748:	2200      	movs	r2, #0
 801174a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	f103 0008 	add.w	r0, r3, #8
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	221c      	movs	r2, #28
 801175a:	4619      	mov	r1, r3
 801175c:	f005 fb9b 	bl	8016e96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	68db      	ldr	r3, [r3, #12]
 8011764:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011766:	f107 030c 	add.w	r3, r7, #12
 801176a:	4618      	mov	r0, r3
 801176c:	f000 f824 	bl	80117b8 <ip4_route>
 8011770:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d011      	beq.n	801179c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	2200      	movs	r2, #0
 801177c:	709a      	strb	r2, [r3, #2]
 801177e:	2200      	movs	r2, #0
 8011780:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011782:	f107 020c 	add.w	r2, r7, #12
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	9302      	str	r3, [sp, #8]
 801178a:	2301      	movs	r3, #1
 801178c:	9301      	str	r3, [sp, #4]
 801178e:	2300      	movs	r3, #0
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	23ff      	movs	r3, #255	; 0xff
 8011794:	2100      	movs	r1, #0
 8011796:	69f8      	ldr	r0, [r7, #28]
 8011798:	f000 f9d4 	bl	8011b44 <ip4_output_if>
  }
  pbuf_free(q);
 801179c:	69f8      	ldr	r0, [r7, #28]
 801179e:	f7f7 fd77 	bl	8009290 <pbuf_free>
 80117a2:	e000      	b.n	80117a6 <icmp_send_response+0xbe>
    return;
 80117a4:	bf00      	nop
}
 80117a6:	3720      	adds	r7, #32
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	0801ac0c 	.word	0x0801ac0c
 80117b0:	0801acd8 	.word	0x0801acd8
 80117b4:	0801ac7c 	.word	0x0801ac7c

080117b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80117c0:	4b30      	ldr	r3, [pc, #192]	; (8011884 <ip4_route+0xcc>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	60fb      	str	r3, [r7, #12]
 80117c6:	e036      	b.n	8011836 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80117ce:	f003 0301 	and.w	r3, r3, #1
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d02b      	beq.n	8011830 <ip4_route+0x78>
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80117de:	089b      	lsrs	r3, r3, #2
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	b2db      	uxtb	r3, r3
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d022      	beq.n	8011830 <ip4_route+0x78>
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	3304      	adds	r3, #4
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d01d      	beq.n	8011830 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	3304      	adds	r3, #4
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	405a      	eors	r2, r3
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	3308      	adds	r3, #8
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4013      	ands	r3, r2
 8011808:	2b00      	cmp	r3, #0
 801180a:	d101      	bne.n	8011810 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	e033      	b.n	8011878 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011816:	f003 0302 	and.w	r3, r3, #2
 801181a:	2b00      	cmp	r3, #0
 801181c:	d108      	bne.n	8011830 <ip4_route+0x78>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	330c      	adds	r3, #12
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	429a      	cmp	r2, r3
 801182a:	d101      	bne.n	8011830 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	e023      	b.n	8011878 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	60fb      	str	r3, [r7, #12]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1c5      	bne.n	80117c8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801183c:	4b12      	ldr	r3, [pc, #72]	; (8011888 <ip4_route+0xd0>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d015      	beq.n	8011870 <ip4_route+0xb8>
 8011844:	4b10      	ldr	r3, [pc, #64]	; (8011888 <ip4_route+0xd0>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801184c:	f003 0301 	and.w	r3, r3, #1
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00d      	beq.n	8011870 <ip4_route+0xb8>
 8011854:	4b0c      	ldr	r3, [pc, #48]	; (8011888 <ip4_route+0xd0>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801185c:	f003 0304 	and.w	r3, r3, #4
 8011860:	2b00      	cmp	r3, #0
 8011862:	d005      	beq.n	8011870 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8011864:	4b08      	ldr	r3, [pc, #32]	; (8011888 <ip4_route+0xd0>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	3304      	adds	r3, #4
 801186a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801186c:	2b00      	cmp	r3, #0
 801186e:	d101      	bne.n	8011874 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011870:	2300      	movs	r3, #0
 8011872:	e001      	b.n	8011878 <ip4_route+0xc0>
  }

  return netif_default;
 8011874:	4b04      	ldr	r3, [pc, #16]	; (8011888 <ip4_route+0xd0>)
 8011876:	681b      	ldr	r3, [r3, #0]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3714      	adds	r7, #20
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr
 8011884:	2000393c 	.word	0x2000393c
 8011888:	20003940 	.word	0x20003940

0801188c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b088      	sub	sp, #32
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011896:	2301      	movs	r3, #1
 8011898:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	091b      	lsrs	r3, r3, #4
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	2b04      	cmp	r3, #4
 80118aa:	d004      	beq.n	80118b6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f7f7 fcef 	bl	8009290 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80118b2:	2300      	movs	r3, #0
 80118b4:	e13e      	b.n	8011b34 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	f003 030f 	and.w	r3, r3, #15
 80118c0:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80118c2:	89fb      	ldrh	r3, [r7, #14]
 80118c4:	009b      	lsls	r3, r3, #2
 80118c6:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	885b      	ldrh	r3, [r3, #2]
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7f6 fbb2 	bl	8008038 <lwip_htons>
 80118d4:	4603      	mov	r3, r0
 80118d6:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	891b      	ldrh	r3, [r3, #8]
 80118dc:	89ba      	ldrh	r2, [r7, #12]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d204      	bcs.n	80118ec <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 80118e2:	89bb      	ldrh	r3, [r7, #12]
 80118e4:	4619      	mov	r1, r3
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7f7 fb5e 	bl	8008fa8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	895b      	ldrh	r3, [r3, #10]
 80118f0:	89fa      	ldrh	r2, [r7, #14]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d807      	bhi.n	8011906 <ip4_input+0x7a>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	891b      	ldrh	r3, [r3, #8]
 80118fa:	89ba      	ldrh	r2, [r7, #12]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d802      	bhi.n	8011906 <ip4_input+0x7a>
 8011900:	89fb      	ldrh	r3, [r7, #14]
 8011902:	2b13      	cmp	r3, #19
 8011904:	d804      	bhi.n	8011910 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7f7 fcc2 	bl	8009290 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801190c:	2300      	movs	r3, #0
 801190e:	e111      	b.n	8011b34 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	691b      	ldr	r3, [r3, #16]
 8011914:	4a89      	ldr	r2, [pc, #548]	; (8011b3c <ip4_input+0x2b0>)
 8011916:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	4a87      	ldr	r2, [pc, #540]	; (8011b3c <ip4_input+0x2b0>)
 801191e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011920:	4b86      	ldr	r3, [pc, #536]	; (8011b3c <ip4_input+0x2b0>)
 8011922:	695b      	ldr	r3, [r3, #20]
 8011924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011928:	2be0      	cmp	r3, #224	; 0xe0
 801192a:	d112      	bne.n	8011952 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011932:	f003 0301 	and.w	r3, r3, #1
 8011936:	b2db      	uxtb	r3, r3
 8011938:	2b00      	cmp	r3, #0
 801193a:	d007      	beq.n	801194c <ip4_input+0xc0>
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	3304      	adds	r3, #4
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d002      	beq.n	801194c <ip4_input+0xc0>
      netif = inp;
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	61bb      	str	r3, [r7, #24]
 801194a:	e041      	b.n	80119d0 <ip4_input+0x144>
    } else {
      netif = NULL;
 801194c:	2300      	movs	r3, #0
 801194e:	61bb      	str	r3, [r7, #24]
 8011950:	e03e      	b.n	80119d0 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8011952:	2301      	movs	r3, #1
 8011954:	613b      	str	r3, [r7, #16]
    netif = inp;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011960:	f003 0301 	and.w	r3, r3, #1
 8011964:	b2db      	uxtb	r3, r3
 8011966:	2b00      	cmp	r3, #0
 8011968:	d014      	beq.n	8011994 <ip4_input+0x108>
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	3304      	adds	r3, #4
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00f      	beq.n	8011994 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011974:	4b71      	ldr	r3, [pc, #452]	; (8011b3c <ip4_input+0x2b0>)
 8011976:	695a      	ldr	r2, [r3, #20]
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	3304      	adds	r3, #4
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	429a      	cmp	r2, r3
 8011980:	d026      	beq.n	80119d0 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011982:	4b6e      	ldr	r3, [pc, #440]	; (8011b3c <ip4_input+0x2b0>)
 8011984:	695b      	ldr	r3, [r3, #20]
 8011986:	69b9      	ldr	r1, [r7, #24]
 8011988:	4618      	mov	r0, r3
 801198a:	f000 f9ad 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 801198e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011990:	2b00      	cmp	r3, #0
 8011992:	d11d      	bne.n	80119d0 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00d      	beq.n	80119b6 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801199a:	4b68      	ldr	r3, [pc, #416]	; (8011b3c <ip4_input+0x2b0>)
 801199c:	695b      	ldr	r3, [r3, #20]
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	2b7f      	cmp	r3, #127	; 0x7f
 80119a2:	d102      	bne.n	80119aa <ip4_input+0x11e>
          netif = NULL;
 80119a4:	2300      	movs	r3, #0
 80119a6:	61bb      	str	r3, [r7, #24]
          break;
 80119a8:	e012      	b.n	80119d0 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 80119ae:	4b64      	ldr	r3, [pc, #400]	; (8011b40 <ip4_input+0x2b4>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	61bb      	str	r3, [r7, #24]
 80119b4:	e002      	b.n	80119bc <ip4_input+0x130>
      } else {
        netif = netif->next;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 80119bc:	69ba      	ldr	r2, [r7, #24]
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d102      	bne.n	80119ca <ip4_input+0x13e>
        netif = netif->next;
 80119c4:	69bb      	ldr	r3, [r7, #24]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1c4      	bne.n	801195a <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80119d0:	69bb      	ldr	r3, [r7, #24]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d111      	bne.n	80119fa <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	7a5b      	ldrb	r3, [r3, #9]
 80119da:	2b11      	cmp	r3, #17
 80119dc:	d10d      	bne.n	80119fa <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 80119de:	89fb      	ldrh	r3, [r7, #14]
 80119e0:	69fa      	ldr	r2, [r7, #28]
 80119e2:	4413      	add	r3, r2
 80119e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	885b      	ldrh	r3, [r3, #2]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80119f0:	d103      	bne.n	80119fa <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80119f6:	2300      	movs	r3, #0
 80119f8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d017      	beq.n	8011a30 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011a00:	4b4e      	ldr	r3, [pc, #312]	; (8011b3c <ip4_input+0x2b0>)
 8011a02:	691b      	ldr	r3, [r3, #16]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d013      	beq.n	8011a30 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011a08:	4b4c      	ldr	r3, [pc, #304]	; (8011b3c <ip4_input+0x2b0>)
 8011a0a:	691b      	ldr	r3, [r3, #16]
 8011a0c:	6839      	ldr	r1, [r7, #0]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f000 f96a 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d105      	bne.n	8011a26 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011a1a:	4b48      	ldr	r3, [pc, #288]	; (8011b3c <ip4_input+0x2b0>)
 8011a1c:	691b      	ldr	r3, [r3, #16]
 8011a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011a22:	2be0      	cmp	r3, #224	; 0xe0
 8011a24:	d104      	bne.n	8011a30 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7f7 fc32 	bl	8009290 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	e081      	b.n	8011b34 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d104      	bne.n	8011a40 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f7f7 fc2a 	bl	8009290 <pbuf_free>
    return ERR_OK;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e079      	b.n	8011b34 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	88db      	ldrh	r3, [r3, #6]
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	461a      	mov	r2, r3
 8011a48:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011a4c:	4013      	ands	r3, r2
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00b      	beq.n	8011a6a <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 fc8e 	bl	8012374 <ip4_reass>
 8011a58:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d101      	bne.n	8011a64 <ip4_input+0x1d8>
      return ERR_OK;
 8011a60:	2300      	movs	r3, #0
 8011a62:	e067      	b.n	8011b34 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011a6a:	4a34      	ldr	r2, [pc, #208]	; (8011b3c <ip4_input+0x2b0>)
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011a70:	4a32      	ldr	r2, [pc, #200]	; (8011b3c <ip4_input+0x2b0>)
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011a76:	4a31      	ldr	r2, [pc, #196]	; (8011b3c <ip4_input+0x2b0>)
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	f003 030f 	and.w	r3, r3, #15
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	4b2b      	ldr	r3, [pc, #172]	; (8011b3c <ip4_input+0x2b0>)
 8011a8e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011a90:	89fb      	ldrh	r3, [r7, #14]
 8011a92:	425b      	negs	r3, r3
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	b21b      	sxth	r3, r3
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7f7 fbd4 	bl	8009248 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	7a5b      	ldrb	r3, [r3, #9]
 8011aa4:	2b06      	cmp	r3, #6
 8011aa6:	d009      	beq.n	8011abc <ip4_input+0x230>
 8011aa8:	2b11      	cmp	r3, #17
 8011aaa:	d002      	beq.n	8011ab2 <ip4_input+0x226>
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d00a      	beq.n	8011ac6 <ip4_input+0x23a>
 8011ab0:	e00e      	b.n	8011ad0 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8011ab2:	6839      	ldr	r1, [r7, #0]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f7fd fa1b 	bl	800eef0 <udp_input>
      break;
 8011aba:	e028      	b.n	8011b0e <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011abc:	6839      	ldr	r1, [r7, #0]
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7f9 fa86 	bl	800afd0 <tcp_input>
      break;
 8011ac4:	e023      	b.n	8011b0e <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8011ac6:	6839      	ldr	r1, [r7, #0]
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f7ff fce7 	bl	801149c <icmp_input>
      break;
 8011ace:	e01e      	b.n	8011b0e <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011ad0:	4b1a      	ldr	r3, [pc, #104]	; (8011b3c <ip4_input+0x2b0>)
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	69b9      	ldr	r1, [r7, #24]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f000 f906 	bl	8011ce8 <ip4_addr_isbroadcast_u32>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d112      	bne.n	8011b08 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ae2:	4b16      	ldr	r3, [pc, #88]	; (8011b3c <ip4_input+0x2b0>)
 8011ae4:	695b      	ldr	r3, [r3, #20]
 8011ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011aea:	2be0      	cmp	r3, #224	; 0xe0
 8011aec:	d00c      	beq.n	8011b08 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8011aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011af2:	4619      	mov	r1, r3
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f7f7 fbb9 	bl	800926c <pbuf_header_force>
        p->payload = iphdr;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	69fa      	ldr	r2, [r7, #28]
 8011afe:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011b00:	2102      	movs	r1, #2
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7ff fdd0 	bl	80116a8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7f7 fbc1 	bl	8009290 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011b0e:	4b0b      	ldr	r3, [pc, #44]	; (8011b3c <ip4_input+0x2b0>)
 8011b10:	2200      	movs	r2, #0
 8011b12:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011b14:	4b09      	ldr	r3, [pc, #36]	; (8011b3c <ip4_input+0x2b0>)
 8011b16:	2200      	movs	r2, #0
 8011b18:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011b1a:	4b08      	ldr	r3, [pc, #32]	; (8011b3c <ip4_input+0x2b0>)
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011b20:	4b06      	ldr	r3, [pc, #24]	; (8011b3c <ip4_input+0x2b0>)
 8011b22:	2200      	movs	r2, #0
 8011b24:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011b26:	4b05      	ldr	r3, [pc, #20]	; (8011b3c <ip4_input+0x2b0>)
 8011b28:	2200      	movs	r2, #0
 8011b2a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011b2c:	4b03      	ldr	r3, [pc, #12]	; (8011b3c <ip4_input+0x2b0>)
 8011b2e:	2200      	movs	r2, #0
 8011b30:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011b32:	2300      	movs	r3, #0
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3720      	adds	r7, #32
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	200003fc 	.word	0x200003fc
 8011b40:	2000393c 	.word	0x2000393c

08011b44 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08a      	sub	sp, #40	; 0x28
 8011b48:	af04      	add	r7, sp, #16
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	607a      	str	r2, [r7, #4]
 8011b50:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d009      	beq.n	8011b70 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d003      	beq.n	8011b6a <ip4_output_if+0x26>
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d102      	bne.n	8011b70 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6c:	3304      	adds	r3, #4
 8011b6e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011b70:	78fa      	ldrb	r2, [r7, #3]
 8011b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b74:	9302      	str	r3, [sp, #8]
 8011b76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b7a:	9301      	str	r3, [sp, #4]
 8011b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	4613      	mov	r3, r2
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	6979      	ldr	r1, [r7, #20]
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	f000 f805 	bl	8011b98 <ip4_output_if_src>
 8011b8e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3718      	adds	r7, #24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b088      	sub	sp, #32
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	60f8      	str	r0, [r7, #12]
 8011ba0:	60b9      	str	r1, [r7, #8]
 8011ba2:	607a      	str	r2, [r7, #4]
 8011ba4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	89db      	ldrh	r3, [r3, #14]
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d006      	beq.n	8011bbc <ip4_output_if_src+0x24>
 8011bae:	4b48      	ldr	r3, [pc, #288]	; (8011cd0 <ip4_output_if_src+0x138>)
 8011bb0:	f240 3233 	movw	r2, #819	; 0x333
 8011bb4:	4947      	ldr	r1, [pc, #284]	; (8011cd4 <ip4_output_if_src+0x13c>)
 8011bb6:	4848      	ldr	r0, [pc, #288]	; (8011cd8 <ip4_output_if_src+0x140>)
 8011bb8:	f005 fa28 	bl	801700c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d060      	beq.n	8011c84 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011bc2:	2314      	movs	r3, #20
 8011bc4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8011bc6:	2114      	movs	r1, #20
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f7f7 fb3d 	bl	8009248 <pbuf_header>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011bd4:	f06f 0301 	mvn.w	r3, #1
 8011bd8:	e075      	b.n	8011cc6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	895b      	ldrh	r3, [r3, #10]
 8011be4:	2b13      	cmp	r3, #19
 8011be6:	d806      	bhi.n	8011bf6 <ip4_output_if_src+0x5e>
 8011be8:	4b39      	ldr	r3, [pc, #228]	; (8011cd0 <ip4_output_if_src+0x138>)
 8011bea:	f240 3261 	movw	r2, #865	; 0x361
 8011bee:	493b      	ldr	r1, [pc, #236]	; (8011cdc <ip4_output_if_src+0x144>)
 8011bf0:	4839      	ldr	r0, [pc, #228]	; (8011cd8 <ip4_output_if_src+0x140>)
 8011bf2:	f005 fa0b 	bl	801700c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	78fa      	ldrb	r2, [r7, #3]
 8011bfa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011bfc:	69fb      	ldr	r3, [r7, #28]
 8011bfe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011c02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011c0c:	8b7b      	ldrh	r3, [r7, #26]
 8011c0e:	089b      	lsrs	r3, r3, #2
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011c24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	891b      	ldrh	r3, [r3, #8]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7f6 fa04 	bl	8008038 <lwip_htons>
 8011c30:	4603      	mov	r3, r0
 8011c32:	461a      	mov	r2, r3
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011c38:	69fb      	ldr	r3, [r7, #28]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	719a      	strb	r2, [r3, #6]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011c42:	4b27      	ldr	r3, [pc, #156]	; (8011ce0 <ip4_output_if_src+0x148>)
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7f6 f9f6 	bl	8008038 <lwip_htons>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	461a      	mov	r2, r3
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011c54:	4b22      	ldr	r3, [pc, #136]	; (8011ce0 <ip4_output_if_src+0x148>)
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	4b20      	ldr	r3, [pc, #128]	; (8011ce0 <ip4_output_if_src+0x148>)
 8011c5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d104      	bne.n	8011c70 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011c66:	4b1f      	ldr	r3, [pc, #124]	; (8011ce4 <ip4_output_if_src+0x14c>)
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	60da      	str	r2, [r3, #12]
 8011c6e:	e003      	b.n	8011c78 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	69fb      	ldr	r3, [r7, #28]
 8011c76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	729a      	strb	r2, [r3, #10]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	72da      	strb	r2, [r3, #11]
 8011c82:	e008      	b.n	8011c96 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	691b      	ldr	r3, [r3, #16]
 8011c8e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011c90:	f107 0314 	add.w	r3, r7, #20
 8011c94:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00c      	beq.n	8011cb8 <ip4_output_if_src+0x120>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	891a      	ldrh	r2, [r3, #8]
 8011ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d906      	bls.n	8011cb8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f000 fd0a 	bl	80126c8 <ip4_frag>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	e006      	b.n	8011cc6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cba:	695b      	ldr	r3, [r3, #20]
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	68f9      	ldr	r1, [r7, #12]
 8011cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cc2:	4798      	blx	r3
 8011cc4:	4603      	mov	r3, r0
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3720      	adds	r7, #32
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	0801ad04 	.word	0x0801ad04
 8011cd4:	0801ad38 	.word	0x0801ad38
 8011cd8:	0801ad44 	.word	0x0801ad44
 8011cdc:	0801ad6c 	.word	0x0801ad6c
 8011ce0:	20000382 	.word	0x20000382
 8011ce4:	0801b340 	.word	0x0801b340

08011ce8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b085      	sub	sp, #20
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cfc:	d002      	beq.n	8011d04 <ip4_addr_isbroadcast_u32+0x1c>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d101      	bne.n	8011d08 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011d04:	2301      	movs	r3, #1
 8011d06:	e02a      	b.n	8011d5e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011d0e:	f003 0302 	and.w	r3, r3, #2
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d101      	bne.n	8011d1a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011d16:	2300      	movs	r3, #0
 8011d18:	e021      	b.n	8011d5e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d101      	bne.n	8011d2a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	e019      	b.n	8011d5e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	3304      	adds	r3, #4
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	405a      	eors	r2, r3
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	3308      	adds	r3, #8
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	4013      	ands	r3, r2
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d10d      	bne.n	8011d5c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	3308      	adds	r3, #8
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	43da      	mvns	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	3308      	adds	r3, #8
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d101      	bne.n	8011d5c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	e000      	b.n	8011d5e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011d5c:	2300      	movs	r3, #0
  }
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3714      	adds	r7, #20
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr
	...

08011d6c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011d72:	2300      	movs	r3, #0
 8011d74:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011d76:	4b12      	ldr	r3, [pc, #72]	; (8011dc0 <ip_reass_tmr+0x54>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011d7c:	e018      	b.n	8011db0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	7fdb      	ldrb	r3, [r3, #31]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00b      	beq.n	8011d9e <ip_reass_tmr+0x32>
      r->timer--;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	7fdb      	ldrb	r3, [r3, #31]
 8011d8a:	3b01      	subs	r3, #1
 8011d8c:	b2da      	uxtb	r2, r3
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	e008      	b.n	8011db0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011da8:	68b9      	ldr	r1, [r7, #8]
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 f80a 	bl	8011dc4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d1e3      	bne.n	8011d7e <ip_reass_tmr+0x12>
     }
   }
}
 8011db6:	bf00      	nop
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	20000384 	.word	0x20000384

08011dc4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011dd2:	683a      	ldr	r2, [r7, #0]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d105      	bne.n	8011de6 <ip_reass_free_complete_datagram+0x22>
 8011dda:	4b45      	ldr	r3, [pc, #276]	; (8011ef0 <ip_reass_free_complete_datagram+0x12c>)
 8011ddc:	22ab      	movs	r2, #171	; 0xab
 8011dde:	4945      	ldr	r1, [pc, #276]	; (8011ef4 <ip_reass_free_complete_datagram+0x130>)
 8011de0:	4845      	ldr	r0, [pc, #276]	; (8011ef8 <ip_reass_free_complete_datagram+0x134>)
 8011de2:	f005 f913 	bl	801700c <iprintf>
  if (prev != NULL) {
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00a      	beq.n	8011e02 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d005      	beq.n	8011e02 <ip_reass_free_complete_datagram+0x3e>
 8011df6:	4b3e      	ldr	r3, [pc, #248]	; (8011ef0 <ip_reass_free_complete_datagram+0x12c>)
 8011df8:	22ad      	movs	r2, #173	; 0xad
 8011dfa:	4940      	ldr	r1, [pc, #256]	; (8011efc <ip_reass_free_complete_datagram+0x138>)
 8011dfc:	483e      	ldr	r0, [pc, #248]	; (8011ef8 <ip_reass_free_complete_datagram+0x134>)
 8011dfe:	f005 f905 	bl	801700c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	889b      	ldrh	r3, [r3, #4]
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d12a      	bne.n	8011e6a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	6858      	ldr	r0, [r3, #4]
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	3308      	adds	r3, #8
 8011e2a:	2214      	movs	r2, #20
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	f005 f832 	bl	8016e96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011e32:	2101      	movs	r1, #1
 8011e34:	69b8      	ldr	r0, [r7, #24]
 8011e36:	f7ff fc47 	bl	80116c8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011e3a:	69b8      	ldr	r0, [r7, #24]
 8011e3c:	f7f7 fabc 	bl	80093b8 <pbuf_clen>
 8011e40:	4603      	mov	r3, r0
 8011e42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e44:	8bfa      	ldrh	r2, [r7, #30]
 8011e46:	8a7b      	ldrh	r3, [r7, #18]
 8011e48:	4413      	add	r3, r2
 8011e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e4e:	db05      	blt.n	8011e5c <ip_reass_free_complete_datagram+0x98>
 8011e50:	4b27      	ldr	r3, [pc, #156]	; (8011ef0 <ip_reass_free_complete_datagram+0x12c>)
 8011e52:	22bc      	movs	r2, #188	; 0xbc
 8011e54:	492a      	ldr	r1, [pc, #168]	; (8011f00 <ip_reass_free_complete_datagram+0x13c>)
 8011e56:	4828      	ldr	r0, [pc, #160]	; (8011ef8 <ip_reass_free_complete_datagram+0x134>)
 8011e58:	f005 f8d8 	bl	801700c <iprintf>
    pbufs_freed += clen;
 8011e5c:	8bfa      	ldrh	r2, [r7, #30]
 8011e5e:	8a7b      	ldrh	r3, [r7, #18]
 8011e60:	4413      	add	r3, r2
 8011e62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011e64:	69b8      	ldr	r0, [r7, #24]
 8011e66:	f7f7 fa13 	bl	8009290 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011e70:	e01f      	b.n	8011eb2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011e82:	68f8      	ldr	r0, [r7, #12]
 8011e84:	f7f7 fa98 	bl	80093b8 <pbuf_clen>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e8c:	8bfa      	ldrh	r2, [r7, #30]
 8011e8e:	8a7b      	ldrh	r3, [r7, #18]
 8011e90:	4413      	add	r3, r2
 8011e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e96:	db05      	blt.n	8011ea4 <ip_reass_free_complete_datagram+0xe0>
 8011e98:	4b15      	ldr	r3, [pc, #84]	; (8011ef0 <ip_reass_free_complete_datagram+0x12c>)
 8011e9a:	22cc      	movs	r2, #204	; 0xcc
 8011e9c:	4918      	ldr	r1, [pc, #96]	; (8011f00 <ip_reass_free_complete_datagram+0x13c>)
 8011e9e:	4816      	ldr	r0, [pc, #88]	; (8011ef8 <ip_reass_free_complete_datagram+0x134>)
 8011ea0:	f005 f8b4 	bl	801700c <iprintf>
    pbufs_freed += clen;
 8011ea4:	8bfa      	ldrh	r2, [r7, #30]
 8011ea6:	8a7b      	ldrh	r3, [r7, #18]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f7f7 f9ef 	bl	8009290 <pbuf_free>
  while (p != NULL) {
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1dc      	bne.n	8011e72 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 f8c2 	bl	8012044 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011ec0:	4b10      	ldr	r3, [pc, #64]	; (8011f04 <ip_reass_free_complete_datagram+0x140>)
 8011ec2:	881b      	ldrh	r3, [r3, #0]
 8011ec4:	8bfa      	ldrh	r2, [r7, #30]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d905      	bls.n	8011ed6 <ip_reass_free_complete_datagram+0x112>
 8011eca:	4b09      	ldr	r3, [pc, #36]	; (8011ef0 <ip_reass_free_complete_datagram+0x12c>)
 8011ecc:	22d2      	movs	r2, #210	; 0xd2
 8011ece:	490e      	ldr	r1, [pc, #56]	; (8011f08 <ip_reass_free_complete_datagram+0x144>)
 8011ed0:	4809      	ldr	r0, [pc, #36]	; (8011ef8 <ip_reass_free_complete_datagram+0x134>)
 8011ed2:	f005 f89b 	bl	801700c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8011ed6:	4b0b      	ldr	r3, [pc, #44]	; (8011f04 <ip_reass_free_complete_datagram+0x140>)
 8011ed8:	881a      	ldrh	r2, [r3, #0]
 8011eda:	8bfb      	ldrh	r3, [r7, #30]
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	4b08      	ldr	r3, [pc, #32]	; (8011f04 <ip_reass_free_complete_datagram+0x140>)
 8011ee2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011ee4:	8bfb      	ldrh	r3, [r7, #30]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3720      	adds	r7, #32
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	0801ad9c 	.word	0x0801ad9c
 8011ef4:	0801add8 	.word	0x0801add8
 8011ef8:	0801ade4 	.word	0x0801ade4
 8011efc:	0801ae0c 	.word	0x0801ae0c
 8011f00:	0801ae20 	.word	0x0801ae20
 8011f04:	20000388 	.word	0x20000388
 8011f08:	0801ae40 	.word	0x0801ae40

08011f0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08a      	sub	sp, #40	; 0x28
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011f16:	2300      	movs	r3, #0
 8011f18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011f22:	2300      	movs	r3, #0
 8011f24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011f2a:	4b28      	ldr	r3, [pc, #160]	; (8011fcc <ip_reass_remove_oldest_datagram+0xc0>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011f30:	e030      	b.n	8011f94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f34:	695a      	ldr	r2, [r3, #20]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d10c      	bne.n	8011f58 <ip_reass_remove_oldest_datagram+0x4c>
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	699a      	ldr	r2, [r3, #24]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	691b      	ldr	r3, [r3, #16]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d106      	bne.n	8011f58 <ip_reass_remove_oldest_datagram+0x4c>
 8011f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4c:	899a      	ldrh	r2, [r3, #12]
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	889b      	ldrh	r3, [r3, #4]
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d014      	beq.n	8011f82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011f5e:	6a3b      	ldr	r3, [r7, #32]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d104      	bne.n	8011f6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	61bb      	str	r3, [r7, #24]
 8011f6c:	e009      	b.n	8011f82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f70:	7fda      	ldrb	r2, [r3, #31]
 8011f72:	6a3b      	ldr	r3, [r7, #32]
 8011f74:	7fdb      	ldrb	r3, [r3, #31]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d803      	bhi.n	8011f82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d001      	beq.n	8011f8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d1cb      	bne.n	8011f32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011f9a:	6a3b      	ldr	r3, [r7, #32]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d008      	beq.n	8011fb2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011fa0:	69b9      	ldr	r1, [r7, #24]
 8011fa2:	6a38      	ldr	r0, [r7, #32]
 8011fa4:	f7ff ff0e 	bl	8011dc4 <ip_reass_free_complete_datagram>
 8011fa8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011faa:	697a      	ldr	r2, [r7, #20]
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	4413      	add	r3, r2
 8011fb0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011fb2:	697a      	ldr	r2, [r7, #20]
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	da02      	bge.n	8011fc0 <ip_reass_remove_oldest_datagram+0xb4>
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	dcac      	bgt.n	8011f1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011fc0:	697b      	ldr	r3, [r7, #20]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3728      	adds	r7, #40	; 0x28
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	20000384 	.word	0x20000384

08011fd0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011fda:	2004      	movs	r0, #4
 8011fdc:	f7f6 fbda 	bl	8008794 <memp_malloc>
 8011fe0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d110      	bne.n	801200a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011fe8:	6839      	ldr	r1, [r7, #0]
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f7ff ff8e 	bl	8011f0c <ip_reass_remove_oldest_datagram>
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	dc03      	bgt.n	8012000 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011ff8:	2004      	movs	r0, #4
 8011ffa:	f7f6 fbcb 	bl	8008794 <memp_malloc>
 8011ffe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d101      	bne.n	801200a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8012006:	2300      	movs	r3, #0
 8012008:	e016      	b.n	8012038 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801200a:	2220      	movs	r2, #32
 801200c:	2100      	movs	r1, #0
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	f004 ff4c 	bl	8016eac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2203      	movs	r2, #3
 8012018:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801201a:	4b09      	ldr	r3, [pc, #36]	; (8012040 <ip_reass_enqueue_new_datagram+0x70>)
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012022:	4a07      	ldr	r2, [pc, #28]	; (8012040 <ip_reass_enqueue_new_datagram+0x70>)
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	3308      	adds	r3, #8
 801202c:	2214      	movs	r2, #20
 801202e:	6879      	ldr	r1, [r7, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	f004 ff30 	bl	8016e96 <memcpy>
  return ipr;
 8012036:	68fb      	ldr	r3, [r7, #12]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	20000384 	.word	0x20000384

08012044 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801204e:	4b10      	ldr	r3, [pc, #64]	; (8012090 <ip_reass_dequeue_datagram+0x4c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	429a      	cmp	r2, r3
 8012056:	d104      	bne.n	8012062 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4a0c      	ldr	r2, [pc, #48]	; (8012090 <ip_reass_dequeue_datagram+0x4c>)
 801205e:	6013      	str	r3, [r2, #0]
 8012060:	e00d      	b.n	801207e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d106      	bne.n	8012076 <ip_reass_dequeue_datagram+0x32>
 8012068:	4b0a      	ldr	r3, [pc, #40]	; (8012094 <ip_reass_dequeue_datagram+0x50>)
 801206a:	f240 1245 	movw	r2, #325	; 0x145
 801206e:	490a      	ldr	r1, [pc, #40]	; (8012098 <ip_reass_dequeue_datagram+0x54>)
 8012070:	480a      	ldr	r0, [pc, #40]	; (801209c <ip_reass_dequeue_datagram+0x58>)
 8012072:	f004 ffcb 	bl	801700c <iprintf>
    prev->next = ipr->next;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801207e:	6879      	ldr	r1, [r7, #4]
 8012080:	2004      	movs	r0, #4
 8012082:	f7f6 fbd3 	bl	800882c <memp_free>
}
 8012086:	bf00      	nop
 8012088:	3708      	adds	r7, #8
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	20000384 	.word	0x20000384
 8012094:	0801ad9c 	.word	0x0801ad9c
 8012098:	0801ae5c 	.word	0x0801ae5c
 801209c:	0801ade4 	.word	0x0801ade4

080120a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b08c      	sub	sp, #48	; 0x30
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	60f8      	str	r0, [r7, #12]
 80120a8:	60b9      	str	r1, [r7, #8]
 80120aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80120ac:	2300      	movs	r3, #0
 80120ae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80120b0:	2301      	movs	r3, #1
 80120b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80120ba:	69fb      	ldr	r3, [r7, #28]
 80120bc:	885b      	ldrh	r3, [r3, #2]
 80120be:	b29b      	uxth	r3, r3
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7f5 ffb9 	bl	8008038 <lwip_htons>
 80120c6:	4603      	mov	r3, r0
 80120c8:	461a      	mov	r2, r3
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	f003 030f 	and.w	r3, r3, #15
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	009b      	lsls	r3, r3, #2
 80120d8:	b29b      	uxth	r3, r3
 80120da:	1ad3      	subs	r3, r2, r3
 80120dc:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	88db      	ldrh	r3, [r3, #6]
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7f5 ffa7 	bl	8008038 <lwip_htons>
 80120ea:	4603      	mov	r3, r0
 80120ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	00db      	lsls	r3, r3, #3
 80120f4:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80120fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fe:	2200      	movs	r2, #0
 8012100:	701a      	strb	r2, [r3, #0]
 8012102:	2200      	movs	r2, #0
 8012104:	705a      	strb	r2, [r3, #1]
 8012106:	2200      	movs	r2, #0
 8012108:	709a      	strb	r2, [r3, #2]
 801210a:	2200      	movs	r2, #0
 801210c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	8b3a      	ldrh	r2, [r7, #24]
 8012112:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8012114:	8b3a      	ldrh	r2, [r7, #24]
 8012116:	8b7b      	ldrh	r3, [r7, #26]
 8012118:	4413      	add	r3, r2
 801211a:	b29a      	uxth	r2, r3
 801211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	627b      	str	r3, [r7, #36]	; 0x24
 8012126:	e061      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8012128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012130:	889b      	ldrh	r3, [r3, #4]
 8012132:	b29a      	uxth	r2, r3
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	889b      	ldrh	r3, [r3, #4]
 8012138:	b29b      	uxth	r3, r3
 801213a:	429a      	cmp	r2, r3
 801213c:	d232      	bcs.n	80121a4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012142:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012146:	2b00      	cmp	r3, #0
 8012148:	d01f      	beq.n	801218a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214c:	889b      	ldrh	r3, [r3, #4]
 801214e:	b29a      	uxth	r2, r3
 8012150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012152:	88db      	ldrh	r3, [r3, #6]
 8012154:	b29b      	uxth	r3, r3
 8012156:	429a      	cmp	r2, r3
 8012158:	f0c0 80e3 	bcc.w	8012322 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 801215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215e:	88db      	ldrh	r3, [r3, #6]
 8012160:	b29a      	uxth	r2, r3
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	889b      	ldrh	r3, [r3, #4]
 8012166:	b29b      	uxth	r3, r3
 8012168:	429a      	cmp	r2, r3
 801216a:	f200 80da 	bhi.w	8012322 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012176:	88db      	ldrh	r3, [r3, #6]
 8012178:	b29a      	uxth	r2, r3
 801217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217c:	889b      	ldrh	r3, [r3, #4]
 801217e:	b29b      	uxth	r3, r3
 8012180:	429a      	cmp	r2, r3
 8012182:	d037      	beq.n	80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012188:	e034      	b.n	80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218c:	88db      	ldrh	r3, [r3, #6]
 801218e:	b29a      	uxth	r2, r3
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	889b      	ldrh	r3, [r3, #4]
 8012194:	b29b      	uxth	r3, r3
 8012196:	429a      	cmp	r2, r3
 8012198:	f200 80c5 	bhi.w	8012326 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	68ba      	ldr	r2, [r7, #8]
 80121a0:	605a      	str	r2, [r3, #4]
      break;
 80121a2:	e027      	b.n	80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a6:	889b      	ldrh	r3, [r3, #4]
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	889b      	ldrh	r3, [r3, #4]
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	429a      	cmp	r2, r3
 80121b2:	f000 80ba 	beq.w	801232a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80121b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b8:	889b      	ldrh	r3, [r3, #4]
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	88db      	ldrh	r3, [r3, #6]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	429a      	cmp	r2, r3
 80121c4:	f0c0 80b3 	bcc.w	801232e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80121c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d009      	beq.n	80121e2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80121ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d0:	88db      	ldrh	r3, [r3, #6]
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	889b      	ldrh	r3, [r3, #4]
 80121d8:	b29b      	uxth	r3, r3
 80121da:	429a      	cmp	r2, r3
 80121dc:	d001      	beq.n	80121e2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80121de:	2300      	movs	r3, #0
 80121e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80121ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d19a      	bne.n	8012128 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 80121f2:	e000      	b.n	80121f6 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80121f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80121f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d12d      	bne.n	8012258 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80121fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d01c      	beq.n	801223c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012204:	88db      	ldrh	r3, [r3, #6]
 8012206:	b29a      	uxth	r2, r3
 8012208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220a:	889b      	ldrh	r3, [r3, #4]
 801220c:	b29b      	uxth	r3, r3
 801220e:	429a      	cmp	r2, r3
 8012210:	d906      	bls.n	8012220 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8012212:	4b51      	ldr	r3, [pc, #324]	; (8012358 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012214:	f240 12ab 	movw	r2, #427	; 0x1ab
 8012218:	4950      	ldr	r1, [pc, #320]	; (801235c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801221a:	4851      	ldr	r0, [pc, #324]	; (8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801221c:	f004 fef6 	bl	801700c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012222:	68ba      	ldr	r2, [r7, #8]
 8012224:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	88db      	ldrh	r3, [r3, #6]
 801222a:	b29a      	uxth	r2, r3
 801222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222e:	889b      	ldrh	r3, [r3, #4]
 8012230:	b29b      	uxth	r3, r3
 8012232:	429a      	cmp	r2, r3
 8012234:	d010      	beq.n	8012258 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8012236:	2300      	movs	r3, #0
 8012238:	623b      	str	r3, [r7, #32]
 801223a:	e00d      	b.n	8012258 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d006      	beq.n	8012252 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8012244:	4b44      	ldr	r3, [pc, #272]	; (8012358 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012246:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801224a:	4946      	ldr	r1, [pc, #280]	; (8012364 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801224c:	4844      	ldr	r0, [pc, #272]	; (8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801224e:	f004 fedd 	bl	801700c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	68ba      	ldr	r2, [r7, #8]
 8012256:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d105      	bne.n	801226a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	7f9b      	ldrb	r3, [r3, #30]
 8012262:	f003 0301 	and.w	r3, r3, #1
 8012266:	2b00      	cmp	r3, #0
 8012268:	d059      	beq.n	801231e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801226a:	6a3b      	ldr	r3, [r7, #32]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d04f      	beq.n	8012310 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d006      	beq.n	8012286 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	889b      	ldrh	r3, [r3, #4]
 8012280:	b29b      	uxth	r3, r3
 8012282:	2b00      	cmp	r3, #0
 8012284:	d002      	beq.n	801228c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012286:	2300      	movs	r3, #0
 8012288:	623b      	str	r3, [r7, #32]
 801228a:	e041      	b.n	8012310 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012296:	e012      	b.n	80122be <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a0:	88db      	ldrh	r3, [r3, #6]
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a6:	889b      	ldrh	r3, [r3, #4]
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d002      	beq.n	80122b4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80122ae:	2300      	movs	r3, #0
 80122b0:	623b      	str	r3, [r7, #32]
            break;
 80122b2:	e007      	b.n	80122c4 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80122b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80122b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1e9      	bne.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80122c4:	6a3b      	ldr	r3, [r7, #32]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d022      	beq.n	8012310 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d106      	bne.n	80122e0 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80122d2:	4b21      	ldr	r3, [pc, #132]	; (8012358 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80122d4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80122d8:	4923      	ldr	r1, [pc, #140]	; (8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80122da:	4821      	ldr	r0, [pc, #132]	; (8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80122dc:	f004 fe96 	bl	801700c <iprintf>
          LWIP_ASSERT("sanity check",
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d106      	bne.n	80122fa <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80122ec:	4b1a      	ldr	r3, [pc, #104]	; (8012358 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80122ee:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80122f2:	491d      	ldr	r1, [pc, #116]	; (8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80122f4:	481a      	ldr	r0, [pc, #104]	; (8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80122f6:	f004 fe89 	bl	801700c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80122fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d006      	beq.n	8012310 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8012302:	4b15      	ldr	r3, [pc, #84]	; (8012358 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012304:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012308:	4918      	ldr	r1, [pc, #96]	; (801236c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801230a:	4815      	ldr	r0, [pc, #84]	; (8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801230c:	f004 fe7e 	bl	801700c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012310:	6a3b      	ldr	r3, [r7, #32]
 8012312:	2b00      	cmp	r3, #0
 8012314:	bf14      	ite	ne
 8012316:	2301      	movne	r3, #1
 8012318:	2300      	moveq	r3, #0
 801231a:	b2db      	uxtb	r3, r3
 801231c:	e018      	b.n	8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801231e:	2300      	movs	r3, #0
 8012320:	e016      	b.n	8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8012322:	bf00      	nop
 8012324:	e004      	b.n	8012330 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8012326:	bf00      	nop
 8012328:	e002      	b.n	8012330 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801232a:	bf00      	nop
 801232c:	e000      	b.n	8012330 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801232e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8012330:	68b8      	ldr	r0, [r7, #8]
 8012332:	f7f7 f841 	bl	80093b8 <pbuf_clen>
 8012336:	4603      	mov	r3, r0
 8012338:	461a      	mov	r2, r3
 801233a:	4b0d      	ldr	r3, [pc, #52]	; (8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	1a9b      	subs	r3, r3, r2
 8012340:	b29a      	uxth	r2, r3
 8012342:	4b0b      	ldr	r3, [pc, #44]	; (8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012344:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8012346:	68b8      	ldr	r0, [r7, #8]
 8012348:	f7f6 ffa2 	bl	8009290 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8012350:	4618      	mov	r0, r3
 8012352:	3730      	adds	r7, #48	; 0x30
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	0801ad9c 	.word	0x0801ad9c
 801235c:	0801ae78 	.word	0x0801ae78
 8012360:	0801ade4 	.word	0x0801ade4
 8012364:	0801ae98 	.word	0x0801ae98
 8012368:	0801aed0 	.word	0x0801aed0
 801236c:	0801aee0 	.word	0x0801aee0
 8012370:	20000388 	.word	0x20000388

08012374 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b08e      	sub	sp, #56	; 0x38
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8012382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	f003 030f 	and.w	r3, r3, #15
 801238a:	009b      	lsls	r3, r3, #2
 801238c:	2b14      	cmp	r3, #20
 801238e:	f040 8131 	bne.w	80125f4 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012394:	88db      	ldrh	r3, [r3, #6]
 8012396:	b29b      	uxth	r3, r3
 8012398:	4618      	mov	r0, r3
 801239a:	f7f5 fe4d 	bl	8008038 <lwip_htons>
 801239e:	4603      	mov	r3, r0
 80123a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	00db      	lsls	r3, r3, #3
 80123a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80123aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ac:	885b      	ldrh	r3, [r3, #2]
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f5 fe41 	bl	8008038 <lwip_htons>
 80123b6:	4603      	mov	r3, r0
 80123b8:	461a      	mov	r2, r3
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	f003 030f 	and.w	r3, r3, #15
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7f6 fff2 	bl	80093b8 <pbuf_clen>
 80123d4:	4603      	mov	r3, r0
 80123d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80123d8:	4b8d      	ldr	r3, [pc, #564]	; (8012610 <ip4_reass+0x29c>)
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	461a      	mov	r2, r3
 80123de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123e0:	4413      	add	r3, r2
 80123e2:	2b0a      	cmp	r3, #10
 80123e4:	dd10      	ble.n	8012408 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80123e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123e8:	4619      	mov	r1, r3
 80123ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123ec:	f7ff fd8e 	bl	8011f0c <ip_reass_remove_oldest_datagram>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f000 8100 	beq.w	80125f8 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80123f8:	4b85      	ldr	r3, [pc, #532]	; (8012610 <ip4_reass+0x29c>)
 80123fa:	881b      	ldrh	r3, [r3, #0]
 80123fc:	461a      	mov	r2, r3
 80123fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012400:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012402:	2b0a      	cmp	r3, #10
 8012404:	f300 80f8 	bgt.w	80125f8 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012408:	4b82      	ldr	r3, [pc, #520]	; (8012614 <ip4_reass+0x2a0>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	633b      	str	r3, [r7, #48]	; 0x30
 801240e:	e015      	b.n	801243c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012412:	695a      	ldr	r2, [r3, #20]
 8012414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	429a      	cmp	r2, r3
 801241a:	d10c      	bne.n	8012436 <ip4_reass+0xc2>
 801241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241e:	699a      	ldr	r2, [r3, #24]
 8012420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012422:	691b      	ldr	r3, [r3, #16]
 8012424:	429a      	cmp	r2, r3
 8012426:	d106      	bne.n	8012436 <ip4_reass+0xc2>
 8012428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242a:	899a      	ldrh	r2, [r3, #12]
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	889b      	ldrh	r3, [r3, #4]
 8012430:	b29b      	uxth	r3, r3
 8012432:	429a      	cmp	r2, r3
 8012434:	d006      	beq.n	8012444 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	633b      	str	r3, [r7, #48]	; 0x30
 801243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243e:	2b00      	cmp	r3, #0
 8012440:	d1e6      	bne.n	8012410 <ip4_reass+0x9c>
 8012442:	e000      	b.n	8012446 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012444:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012448:	2b00      	cmp	r3, #0
 801244a:	d109      	bne.n	8012460 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801244c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801244e:	4619      	mov	r1, r3
 8012450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012452:	f7ff fdbd 	bl	8011fd0 <ip_reass_enqueue_new_datagram>
 8012456:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245a:	2b00      	cmp	r3, #0
 801245c:	d11c      	bne.n	8012498 <ip4_reass+0x124>
      goto nullreturn;
 801245e:	e0ce      	b.n	80125fe <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012462:	88db      	ldrh	r3, [r3, #6]
 8012464:	b29b      	uxth	r3, r3
 8012466:	4618      	mov	r0, r3
 8012468:	f7f5 fde6 	bl	8008038 <lwip_htons>
 801246c:	4603      	mov	r3, r0
 801246e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012472:	2b00      	cmp	r3, #0
 8012474:	d110      	bne.n	8012498 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012478:	89db      	ldrh	r3, [r3, #14]
 801247a:	4618      	mov	r0, r3
 801247c:	f7f5 fddc 	bl	8008038 <lwip_htons>
 8012480:	4603      	mov	r3, r0
 8012482:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012486:	2b00      	cmp	r3, #0
 8012488:	d006      	beq.n	8012498 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248c:	3308      	adds	r3, #8
 801248e:	2214      	movs	r2, #20
 8012490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012492:	4618      	mov	r0, r3
 8012494:	f004 fcff 	bl	8016e96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249a:	88db      	ldrh	r3, [r3, #6]
 801249c:	b29b      	uxth	r3, r3
 801249e:	f003 0320 	and.w	r3, r3, #32
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	bf0c      	ite	eq
 80124a6:	2301      	moveq	r3, #1
 80124a8:	2300      	movne	r3, #0
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00e      	beq.n	80124d2 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80124b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80124b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124b8:	4413      	add	r3, r2
 80124ba:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80124bc:	8b7a      	ldrh	r2, [r7, #26]
 80124be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124c0:	429a      	cmp	r2, r3
 80124c2:	f0c0 8099 	bcc.w	80125f8 <ip4_reass+0x284>
 80124c6:	8b7b      	ldrh	r3, [r7, #26]
 80124c8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80124cc:	4293      	cmp	r3, r2
 80124ce:	f200 8093 	bhi.w	80125f8 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80124d2:	69fa      	ldr	r2, [r7, #28]
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124d8:	f7ff fde2 	bl	80120a0 <ip_reass_chain_frag_into_datagram_and_validate>
 80124dc:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124e4:	f000 808a 	beq.w	80125fc <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80124e8:	4b49      	ldr	r3, [pc, #292]	; (8012610 <ip4_reass+0x29c>)
 80124ea:	881a      	ldrh	r2, [r3, #0]
 80124ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124ee:	4413      	add	r3, r2
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	4b47      	ldr	r3, [pc, #284]	; (8012610 <ip4_reass+0x29c>)
 80124f4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d00d      	beq.n	8012518 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80124fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80124fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012500:	4413      	add	r3, r2
 8012502:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012506:	8a7a      	ldrh	r2, [r7, #18]
 8012508:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250c:	7f9b      	ldrb	r3, [r3, #30]
 801250e:	f043 0301 	orr.w	r3, r3, #1
 8012512:	b2da      	uxtb	r2, r3
 8012514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012516:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	2b01      	cmp	r3, #1
 801251c:	d168      	bne.n	80125f0 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012520:	8b9b      	ldrh	r3, [r3, #28]
 8012522:	3314      	adds	r3, #20
 8012524:	b29a      	uxth	r2, r3
 8012526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012528:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8012534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253e:	3308      	adds	r3, #8
 8012540:	2214      	movs	r2, #20
 8012542:	4619      	mov	r1, r3
 8012544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012546:	f004 fca6 	bl	8016e96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254c:	8b9b      	ldrh	r3, [r3, #28]
 801254e:	4618      	mov	r0, r3
 8012550:	f7f5 fd72 	bl	8008038 <lwip_htons>
 8012554:	4603      	mov	r3, r0
 8012556:	461a      	mov	r2, r3
 8012558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255e:	2200      	movs	r2, #0
 8012560:	719a      	strb	r2, [r3, #6]
 8012562:	2200      	movs	r2, #0
 8012564:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012568:	2200      	movs	r2, #0
 801256a:	729a      	strb	r2, [r3, #10]
 801256c:	2200      	movs	r2, #0
 801256e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012576:	e00e      	b.n	8012596 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8012578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801257e:	f06f 0113 	mvn.w	r1, #19
 8012582:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012584:	f7f6 fe60 	bl	8009248 <pbuf_header>
      pbuf_cat(p, r);
 8012588:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7f6 ff4e 	bl	800942c <pbuf_cat>
      r = iprh->next_pbuf;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012598:	2b00      	cmp	r3, #0
 801259a:	d1ed      	bne.n	8012578 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801259c:	4b1d      	ldr	r3, [pc, #116]	; (8012614 <ip4_reass+0x2a0>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d102      	bne.n	80125ac <ip4_reass+0x238>
      ipr_prev = NULL;
 80125a6:	2300      	movs	r3, #0
 80125a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125aa:	e010      	b.n	80125ce <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125ac:	4b19      	ldr	r3, [pc, #100]	; (8012614 <ip4_reass+0x2a0>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125b2:	e007      	b.n	80125c4 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80125b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d006      	beq.n	80125cc <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1f4      	bne.n	80125b4 <ip4_reass+0x240>
 80125ca:	e000      	b.n	80125ce <ip4_reass+0x25a>
          break;
 80125cc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80125ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125d2:	f7ff fd37 	bl	8012044 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f7f6 feee 	bl	80093b8 <pbuf_clen>
 80125dc:	4603      	mov	r3, r0
 80125de:	461a      	mov	r2, r3
 80125e0:	4b0b      	ldr	r3, [pc, #44]	; (8012610 <ip4_reass+0x29c>)
 80125e2:	881b      	ldrh	r3, [r3, #0]
 80125e4:	1a9b      	subs	r3, r3, r2
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	4b09      	ldr	r3, [pc, #36]	; (8012610 <ip4_reass+0x29c>)
 80125ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	e00a      	b.n	8012606 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80125f0:	2300      	movs	r3, #0
 80125f2:	e008      	b.n	8012606 <ip4_reass+0x292>
    goto nullreturn;
 80125f4:	bf00      	nop
 80125f6:	e002      	b.n	80125fe <ip4_reass+0x28a>

nullreturn:
 80125f8:	bf00      	nop
 80125fa:	e000      	b.n	80125fe <ip4_reass+0x28a>
    goto nullreturn;
 80125fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f7f6 fe46 	bl	8009290 <pbuf_free>
  return NULL;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3738      	adds	r7, #56	; 0x38
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	20000388 	.word	0x20000388
 8012614:	20000384 	.word	0x20000384

08012618 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801261c:	2005      	movs	r0, #5
 801261e:	f7f6 f8b9 	bl	8008794 <memp_malloc>
 8012622:	4603      	mov	r3, r0
}
 8012624:	4618      	mov	r0, r3
 8012626:	bd80      	pop	{r7, pc}

08012628 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d106      	bne.n	8012644 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012636:	4b07      	ldr	r3, [pc, #28]	; (8012654 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012638:	f240 22ae 	movw	r2, #686	; 0x2ae
 801263c:	4906      	ldr	r1, [pc, #24]	; (8012658 <ip_frag_free_pbuf_custom_ref+0x30>)
 801263e:	4807      	ldr	r0, [pc, #28]	; (801265c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012640:	f004 fce4 	bl	801700c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012644:	6879      	ldr	r1, [r7, #4]
 8012646:	2005      	movs	r0, #5
 8012648:	f7f6 f8f0 	bl	800882c <memp_free>
}
 801264c:	bf00      	nop
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	0801ad9c 	.word	0x0801ad9c
 8012658:	0801af04 	.word	0x0801af04
 801265c:	0801ade4 	.word	0x0801ade4

08012660 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d106      	bne.n	8012680 <ipfrag_free_pbuf_custom+0x20>
 8012672:	4b11      	ldr	r3, [pc, #68]	; (80126b8 <ipfrag_free_pbuf_custom+0x58>)
 8012674:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8012678:	4910      	ldr	r1, [pc, #64]	; (80126bc <ipfrag_free_pbuf_custom+0x5c>)
 801267a:	4811      	ldr	r0, [pc, #68]	; (80126c0 <ipfrag_free_pbuf_custom+0x60>)
 801267c:	f004 fcc6 	bl	801700c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	429a      	cmp	r2, r3
 8012686:	d006      	beq.n	8012696 <ipfrag_free_pbuf_custom+0x36>
 8012688:	4b0b      	ldr	r3, [pc, #44]	; (80126b8 <ipfrag_free_pbuf_custom+0x58>)
 801268a:	f240 22b9 	movw	r2, #697	; 0x2b9
 801268e:	490d      	ldr	r1, [pc, #52]	; (80126c4 <ipfrag_free_pbuf_custom+0x64>)
 8012690:	480b      	ldr	r0, [pc, #44]	; (80126c0 <ipfrag_free_pbuf_custom+0x60>)
 8012692:	f004 fcbb 	bl	801700c <iprintf>
  if (pcr->original != NULL) {
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	695b      	ldr	r3, [r3, #20]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d004      	beq.n	80126a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	695b      	ldr	r3, [r3, #20]
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7f6 fdf4 	bl	8009290 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f7ff ffbd 	bl	8012628 <ip_frag_free_pbuf_custom_ref>
}
 80126ae:	bf00      	nop
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	0801ad9c 	.word	0x0801ad9c
 80126bc:	0801af10 	.word	0x0801af10
 80126c0:	0801ade4 	.word	0x0801ade4
 80126c4:	0801af1c 	.word	0x0801af1c

080126c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b092      	sub	sp, #72	; 0x48
 80126cc:	af02      	add	r7, sp, #8
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80126d4:	2300      	movs	r3, #0
 80126d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80126dc:	3b14      	subs	r3, #20
 80126de:	2b00      	cmp	r3, #0
 80126e0:	da00      	bge.n	80126e4 <ip4_frag+0x1c>
 80126e2:	3307      	adds	r3, #7
 80126e4:	10db      	asrs	r3, r3, #3
 80126e6:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80126e8:	2314      	movs	r3, #20
 80126ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80126f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	f003 030f 	and.w	r3, r3, #15
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	2b14      	cmp	r3, #20
 8012702:	d009      	beq.n	8012718 <ip4_frag+0x50>
 8012704:	4b79      	ldr	r3, [pc, #484]	; (80128ec <ip4_frag+0x224>)
 8012706:	f240 22e1 	movw	r2, #737	; 0x2e1
 801270a:	4979      	ldr	r1, [pc, #484]	; (80128f0 <ip4_frag+0x228>)
 801270c:	4879      	ldr	r0, [pc, #484]	; (80128f4 <ip4_frag+0x22c>)
 801270e:	f004 fc7d 	bl	801700c <iprintf>
 8012712:	f06f 0305 	mvn.w	r3, #5
 8012716:	e0e5      	b.n	80128e4 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271a:	88db      	ldrh	r3, [r3, #6]
 801271c:	b29b      	uxth	r3, r3
 801271e:	4618      	mov	r0, r3
 8012720:	f7f5 fc8a 	bl	8008038 <lwip_htons>
 8012724:	4603      	mov	r3, r0
 8012726:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8012728:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801272a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801272e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8012730:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012736:	2b00      	cmp	r3, #0
 8012738:	d009      	beq.n	801274e <ip4_frag+0x86>
 801273a:	4b6c      	ldr	r3, [pc, #432]	; (80128ec <ip4_frag+0x224>)
 801273c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012740:	496d      	ldr	r1, [pc, #436]	; (80128f8 <ip4_frag+0x230>)
 8012742:	486c      	ldr	r0, [pc, #432]	; (80128f4 <ip4_frag+0x22c>)
 8012744:	f004 fc62 	bl	801700c <iprintf>
 8012748:	f06f 0305 	mvn.w	r3, #5
 801274c:	e0ca      	b.n	80128e4 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	891b      	ldrh	r3, [r3, #8]
 8012752:	3b14      	subs	r3, #20
 8012754:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8012756:	e0bc      	b.n	80128d2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8012758:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801275a:	00da      	lsls	r2, r3, #3
 801275c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801275e:	4293      	cmp	r3, r2
 8012760:	bfa8      	it	ge
 8012762:	4613      	movge	r3, r2
 8012764:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012766:	2200      	movs	r2, #0
 8012768:	2114      	movs	r1, #20
 801276a:	2002      	movs	r0, #2
 801276c:	f7f6 fa1e 	bl	8008bac <pbuf_alloc>
 8012770:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8012772:	6a3b      	ldr	r3, [r7, #32]
 8012774:	2b00      	cmp	r3, #0
 8012776:	f000 80b2 	beq.w	80128de <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	895b      	ldrh	r3, [r3, #10]
 801277e:	2b13      	cmp	r3, #19
 8012780:	d806      	bhi.n	8012790 <ip4_frag+0xc8>
 8012782:	4b5a      	ldr	r3, [pc, #360]	; (80128ec <ip4_frag+0x224>)
 8012784:	f240 3209 	movw	r2, #777	; 0x309
 8012788:	495c      	ldr	r1, [pc, #368]	; (80128fc <ip4_frag+0x234>)
 801278a:	485a      	ldr	r0, [pc, #360]	; (80128f4 <ip4_frag+0x22c>)
 801278c:	f004 fc3e 	bl	801700c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012790:	6a3b      	ldr	r3, [r7, #32]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	2214      	movs	r2, #20
 8012796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012798:	4618      	mov	r0, r3
 801279a:	f004 fb7c 	bl	8016e96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801279e:	6a3b      	ldr	r3, [r7, #32]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80127a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80127a8:	e04f      	b.n	801284a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	895a      	ldrh	r2, [r3, #10]
 80127ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80127b4:	8b7a      	ldrh	r2, [r7, #26]
 80127b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127b8:	4293      	cmp	r3, r2
 80127ba:	bf28      	it	cs
 80127bc:	4613      	movcs	r3, r2
 80127be:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80127c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d105      	bne.n	80127d2 <ip4_frag+0x10a>
        poff = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	60fb      	str	r3, [r7, #12]
        continue;
 80127d0:	e03b      	b.n	801284a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80127d2:	f7ff ff21 	bl	8012618 <ip_frag_alloc_pbuf_custom_ref>
 80127d6:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d103      	bne.n	80127e6 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80127de:	6a38      	ldr	r0, [r7, #32]
 80127e0:	f7f6 fd56 	bl	8009290 <pbuf_free>
        goto memerr;
 80127e4:	e07c      	b.n	80128e0 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127e6:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127ee:	4413      	add	r3, r2
 80127f0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80127f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127f4:	9201      	str	r2, [sp, #4]
 80127f6:	9300      	str	r3, [sp, #0]
 80127f8:	4603      	mov	r3, r0
 80127fa:	2202      	movs	r2, #2
 80127fc:	2004      	movs	r0, #4
 80127fe:	f7f6 fb69 	bl	8008ed4 <pbuf_alloced_custom>
 8012802:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d106      	bne.n	8012818 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801280a:	6978      	ldr	r0, [r7, #20]
 801280c:	f7ff ff0c 	bl	8012628 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012810:	6a38      	ldr	r0, [r7, #32]
 8012812:	f7f6 fd3d 	bl	8009290 <pbuf_free>
        goto memerr;
 8012816:	e063      	b.n	80128e0 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8012818:	68f8      	ldr	r0, [r7, #12]
 801281a:	f7f6 fde5 	bl	80093e8 <pbuf_ref>
      pcr->original = p;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	4a36      	ldr	r2, [pc, #216]	; (8012900 <ip4_frag+0x238>)
 8012828:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801282a:	6939      	ldr	r1, [r7, #16]
 801282c:	6a38      	ldr	r0, [r7, #32]
 801282e:	f7f6 fdfd 	bl	800942c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8012832:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012834:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801283a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801283c:	2b00      	cmp	r3, #0
 801283e:	d004      	beq.n	801284a <ip4_frag+0x182>
        poff = 0;
 8012840:	2300      	movs	r3, #0
 8012842:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801284a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d1ac      	bne.n	80127aa <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8012850:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012852:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012854:	4413      	add	r3, r2
 8012856:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012858:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801285e:	3b14      	subs	r3, #20
 8012860:	429a      	cmp	r2, r3
 8012862:	bfd4      	ite	le
 8012864:	2301      	movle	r3, #1
 8012866:	2300      	movgt	r3, #0
 8012868:	b2db      	uxtb	r3, r3
 801286a:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801286c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801286e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012872:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d103      	bne.n	8012882 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801287a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801287c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012880:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012882:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012884:	4618      	mov	r0, r3
 8012886:	f7f5 fbd7 	bl	8008038 <lwip_htons>
 801288a:	4603      	mov	r3, r0
 801288c:	461a      	mov	r2, r3
 801288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012890:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8012892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012894:	3314      	adds	r3, #20
 8012896:	b29b      	uxth	r3, r3
 8012898:	4618      	mov	r0, r3
 801289a:	f7f5 fbcd 	bl	8008038 <lwip_htons>
 801289e:	4603      	mov	r3, r0
 80128a0:	461a      	mov	r2, r3
 80128a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80128a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a8:	2200      	movs	r2, #0
 80128aa:	729a      	strb	r2, [r3, #10]
 80128ac:	2200      	movs	r2, #0
 80128ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	695b      	ldr	r3, [r3, #20]
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	6a39      	ldr	r1, [r7, #32]
 80128b8:	68b8      	ldr	r0, [r7, #8]
 80128ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80128bc:	6a38      	ldr	r0, [r7, #32]
 80128be:	f7f6 fce7 	bl	8009290 <pbuf_free>
    left -= fragsize;
 80128c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80128c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80128c6:	1ad3      	subs	r3, r2, r3
 80128c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80128ca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80128cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80128ce:	4413      	add	r3, r2
 80128d0:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80128d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	f47f af3f 	bne.w	8012758 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80128da:	2300      	movs	r3, #0
 80128dc:	e002      	b.n	80128e4 <ip4_frag+0x21c>
      goto memerr;
 80128de:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80128e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3740      	adds	r7, #64	; 0x40
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	0801ad9c 	.word	0x0801ad9c
 80128f0:	0801af28 	.word	0x0801af28
 80128f4:	0801ade4 	.word	0x0801ade4
 80128f8:	0801af50 	.word	0x0801af50
 80128fc:	0801af6c 	.word	0x0801af6c
 8012900:	08012661 	.word	0x08012661

08012904 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b086      	sub	sp, #24
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801290e:	230e      	movs	r3, #14
 8012910:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	895b      	ldrh	r3, [r3, #10]
 8012916:	2b0e      	cmp	r3, #14
 8012918:	d977      	bls.n	8012a0a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	7b1a      	ldrb	r2, [r3, #12]
 8012924:	7b5b      	ldrb	r3, [r3, #13]
 8012926:	021b      	lsls	r3, r3, #8
 8012928:	4313      	orrs	r3, r2
 801292a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	f003 0301 	and.w	r3, r3, #1
 8012934:	2b00      	cmp	r3, #0
 8012936:	d023      	beq.n	8012980 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d10f      	bne.n	8012960 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	785b      	ldrb	r3, [r3, #1]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d11b      	bne.n	8012980 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801294c:	2b5e      	cmp	r3, #94	; 0x5e
 801294e:	d117      	bne.n	8012980 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	7b5b      	ldrb	r3, [r3, #13]
 8012954:	f043 0310 	orr.w	r3, r3, #16
 8012958:	b2da      	uxtb	r2, r3
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	735a      	strb	r2, [r3, #13]
 801295e:	e00f      	b.n	8012980 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	2206      	movs	r2, #6
 8012964:	4930      	ldr	r1, [pc, #192]	; (8012a28 <ethernet_input+0x124>)
 8012966:	4618      	mov	r0, r3
 8012968:	f004 fa86 	bl	8016e78 <memcmp>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	7b5b      	ldrb	r3, [r3, #13]
 8012976:	f043 0308 	orr.w	r3, r3, #8
 801297a:	b2da      	uxtb	r2, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012980:	89fb      	ldrh	r3, [r7, #14]
 8012982:	2b08      	cmp	r3, #8
 8012984:	d003      	beq.n	801298e <ethernet_input+0x8a>
 8012986:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801298a:	d01e      	beq.n	80129ca <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801298c:	e044      	b.n	8012a18 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012994:	f003 0308 	and.w	r3, r3, #8
 8012998:	2b00      	cmp	r3, #0
 801299a:	d038      	beq.n	8012a0e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	895b      	ldrh	r3, [r3, #10]
 80129a0:	461a      	mov	r2, r3
 80129a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	db33      	blt.n	8012a12 <ethernet_input+0x10e>
 80129aa:	8afb      	ldrh	r3, [r7, #22]
 80129ac:	425b      	negs	r3, r3
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	b21b      	sxth	r3, r3
 80129b2:	4619      	mov	r1, r3
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f7f6 fc47 	bl	8009248 <pbuf_header>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d128      	bne.n	8012a12 <ethernet_input+0x10e>
        ip4_input(p, netif);
 80129c0:	6839      	ldr	r1, [r7, #0]
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7fe ff62 	bl	801188c <ip4_input>
      break;
 80129c8:	e01d      	b.n	8012a06 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80129d0:	f003 0308 	and.w	r3, r3, #8
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d01e      	beq.n	8012a16 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	895b      	ldrh	r3, [r3, #10]
 80129dc:	461a      	mov	r2, r3
 80129de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	db15      	blt.n	8012a12 <ethernet_input+0x10e>
 80129e6:	8afb      	ldrh	r3, [r7, #22]
 80129e8:	425b      	negs	r3, r3
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	b21b      	sxth	r3, r3
 80129ee:	4619      	mov	r1, r3
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7f6 fc29 	bl	8009248 <pbuf_header>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d10a      	bne.n	8012a12 <ethernet_input+0x10e>
        etharp_input(p, netif);
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7fe f92c 	bl	8010c5c <etharp_input>
      break;
 8012a04:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012a06:	2300      	movs	r3, #0
 8012a08:	e00a      	b.n	8012a20 <ethernet_input+0x11c>
    goto free_and_return;
 8012a0a:	bf00      	nop
 8012a0c:	e004      	b.n	8012a18 <ethernet_input+0x114>
        goto free_and_return;
 8012a0e:	bf00      	nop
 8012a10:	e002      	b.n	8012a18 <ethernet_input+0x114>

free_and_return:
 8012a12:	bf00      	nop
 8012a14:	e000      	b.n	8012a18 <ethernet_input+0x114>
        goto free_and_return;
 8012a16:	bf00      	nop
  pbuf_free(p);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7f6 fc39 	bl	8009290 <pbuf_free>
  return ERR_OK;
 8012a1e:	2300      	movs	r3, #0
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3718      	adds	r7, #24
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	0801b348 	.word	0x0801b348

08012a2c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b086      	sub	sp, #24
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	607a      	str	r2, [r7, #4]
 8012a38:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a3a:	8c3b      	ldrh	r3, [r7, #32]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f5 fafb 	bl	8008038 <lwip_htons>
 8012a42:	4603      	mov	r3, r0
 8012a44:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8012a46:	210e      	movs	r1, #14
 8012a48:	68b8      	ldr	r0, [r7, #8]
 8012a4a:	f7f6 fbfd 	bl	8009248 <pbuf_header>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d125      	bne.n	8012aa0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	8afa      	ldrh	r2, [r7, #22]
 8012a5e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	2206      	movs	r2, #6
 8012a64:	6839      	ldr	r1, [r7, #0]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f004 fa15 	bl	8016e96 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	3306      	adds	r3, #6
 8012a70:	2206      	movs	r2, #6
 8012a72:	6879      	ldr	r1, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	f004 fa0e 	bl	8016e96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a80:	2b06      	cmp	r3, #6
 8012a82:	d006      	beq.n	8012a92 <ethernet_output+0x66>
 8012a84:	4b0a      	ldr	r3, [pc, #40]	; (8012ab0 <ethernet_output+0x84>)
 8012a86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012a8a:	490a      	ldr	r1, [pc, #40]	; (8012ab4 <ethernet_output+0x88>)
 8012a8c:	480a      	ldr	r0, [pc, #40]	; (8012ab8 <ethernet_output+0x8c>)
 8012a8e:	f004 fabd 	bl	801700c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	699b      	ldr	r3, [r3, #24]
 8012a96:	68b9      	ldr	r1, [r7, #8]
 8012a98:	68f8      	ldr	r0, [r7, #12]
 8012a9a:	4798      	blx	r3
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	e002      	b.n	8012aa6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012aa0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012aa2:	f06f 0301 	mvn.w	r3, #1
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	0801af8c 	.word	0x0801af8c
 8012ab4:	0801afc4 	.word	0x0801afc4
 8012ab8:	0801aff8 	.word	0x0801aff8

08012abc <F_Init_TimerServo>:
 */

#include "A_Servo.h"

void F_Init_TimerServo()
{
 8012abc:	b480      	push	{r7}
 8012abe:	af00      	add	r7, sp, #0
	// Enable the Timer 9
	RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8012ac0:	4b54      	ldr	r3, [pc, #336]	; (8012c14 <F_Init_TimerServo+0x158>)
 8012ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ac4:	4a53      	ldr	r2, [pc, #332]	; (8012c14 <F_Init_TimerServo+0x158>)
 8012ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012aca:	6453      	str	r3, [r2, #68]	; 0x44

	// Init GPIO
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; // Port E : clock enable
 8012acc:	4b51      	ldr	r3, [pc, #324]	; (8012c14 <F_Init_TimerServo+0x158>)
 8012ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ad0:	4a50      	ldr	r2, [pc, #320]	; (8012c14 <F_Init_TimerServo+0x158>)
 8012ad2:	f043 0310 	orr.w	r3, r3, #16
 8012ad6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOE->MODER &= ~(GPIO_MODER_MODER5);	// PE5: Alternate --> ServoMotor 1
 8012ad8:	4b4f      	ldr	r3, [pc, #316]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a4e      	ldr	r2, [pc, #312]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012ade:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012ae2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |=  (0x02 << 10);
 8012ae4:	4b4c      	ldr	r3, [pc, #304]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4a4b      	ldr	r2, [pc, #300]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012aea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012aee:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODER6);	// PE6: Alternate --> ServoMotor 2
 8012af0:	4b49      	ldr	r3, [pc, #292]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	4a48      	ldr	r2, [pc, #288]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012af6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8012afa:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |=  (0x02 << 12);
 8012afc:	4b46      	ldr	r3, [pc, #280]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a45      	ldr	r2, [pc, #276]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012b06:	6013      	str	r3, [r2, #0]

	GPIOE->AFR[0] &= ~(0x0F << 20);	// AF3 on PE5--> Timer 9 channel 1 --> ServoMotor 1
 8012b08:	4b43      	ldr	r3, [pc, #268]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b0a:	6a1b      	ldr	r3, [r3, #32]
 8012b0c:	4a42      	ldr	r2, [pc, #264]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012b12:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |=  (3    << 20);
 8012b14:	4b40      	ldr	r3, [pc, #256]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b16:	6a1b      	ldr	r3, [r3, #32]
 8012b18:	4a3f      	ldr	r2, [pc, #252]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012b1e:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] &= ~(0x0F << 24);	// AF3 on PE6--> Timer 9 channel 2 --> ServoMotor 2
 8012b20:	4b3d      	ldr	r3, [pc, #244]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b22:	6a1b      	ldr	r3, [r3, #32]
 8012b24:	4a3c      	ldr	r2, [pc, #240]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b26:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012b2a:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |=  (3    << 24);
 8012b2c:	4b3a      	ldr	r3, [pc, #232]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b2e:	6a1b      	ldr	r3, [r3, #32]
 8012b30:	4a39      	ldr	r2, [pc, #228]	; (8012c18 <F_Init_TimerServo+0x15c>)
 8012b32:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8012b36:	6213      	str	r3, [r2, #32]


	TIM9->PSC = 840-1;	// Prescaler
 8012b38:	4b38      	ldr	r3, [pc, #224]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b3a:	f240 3247 	movw	r2, #839	; 0x347
 8012b3e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM9->ARR = 4000-1;	// 20 ms (PWM Frequency)
 8012b40:	4b36      	ldr	r3, [pc, #216]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b42:	f640 729f 	movw	r2, #3999	; 0xf9f
 8012b46:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM9->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;	// PWM mode 1 upcounting
 8012b48:	4b34      	ldr	r3, [pc, #208]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b4a:	699b      	ldr	r3, [r3, #24]
 8012b4c:	4a33      	ldr	r2, [pc, #204]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b4e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8012b52:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8012b54:	4b31      	ldr	r3, [pc, #196]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b56:	699b      	ldr	r3, [r3, #24]
 8012b58:	4a30      	ldr	r2, [pc, #192]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b5e:	6193      	str	r3, [r2, #24]

	TIM9->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;	// PWM mode 1 upcounting
 8012b60:	4b2e      	ldr	r3, [pc, #184]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b62:	699b      	ldr	r3, [r3, #24]
 8012b64:	4a2d      	ldr	r2, [pc, #180]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012b6a:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8012b6c:	4b2b      	ldr	r3, [pc, #172]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b6e:	699b      	ldr	r3, [r3, #24]
 8012b70:	4a2a      	ldr	r2, [pc, #168]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b72:	f023 0310 	bic.w	r3, r3, #16
 8012b76:	6193      	str	r3, [r2, #24]

	TIM9->CCMR1 |= TIM_CCMR1_OC2PE;	// Preload Enable
 8012b78:	4b28      	ldr	r3, [pc, #160]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b7a:	699b      	ldr	r3, [r3, #24]
 8012b7c:	4a27      	ldr	r2, [pc, #156]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012b82:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_CC2S;	// Output
 8012b84:	4b25      	ldr	r3, [pc, #148]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b86:	699b      	ldr	r3, [r3, #24]
 8012b88:	4a24      	ldr	r2, [pc, #144]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b8e:	6193      	str	r3, [r2, #24]
	TIM9->CCER 	|= TIM_CCER_CC2E;	// Channel is ON
 8012b90:	4b22      	ldr	r3, [pc, #136]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b92:	6a1b      	ldr	r3, [r3, #32]
 8012b94:	4a21      	ldr	r2, [pc, #132]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b96:	f043 0310 	orr.w	r3, r3, #16
 8012b9a:	6213      	str	r3, [r2, #32]
	TIM9->CCMR1 |= TIM_CCMR1_OC1PE;	// Preload Enable
 8012b9c:	4b1f      	ldr	r3, [pc, #124]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012b9e:	699b      	ldr	r3, [r3, #24]
 8012ba0:	4a1e      	ldr	r2, [pc, #120]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012ba2:	f043 0308 	orr.w	r3, r3, #8
 8012ba6:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_CC1S;	// Output
 8012ba8:	4b1c      	ldr	r3, [pc, #112]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012baa:	699b      	ldr	r3, [r3, #24]
 8012bac:	4a1b      	ldr	r2, [pc, #108]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bae:	f023 0303 	bic.w	r3, r3, #3
 8012bb2:	6193      	str	r3, [r2, #24]
	TIM9->CCER 	|= TIM_CCER_CC1E;	// Channel is ON
 8012bb4:	4b19      	ldr	r3, [pc, #100]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bb6:	6a1b      	ldr	r3, [r3, #32]
 8012bb8:	4a18      	ldr	r2, [pc, #96]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bba:	f043 0301 	orr.w	r3, r3, #1
 8012bbe:	6213      	str	r3, [r2, #32]

	TIM9->CR1 	|= TIM_CR1_ARPE;	// Auto reload
 8012bc0:	4b16      	ldr	r3, [pc, #88]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	4a15      	ldr	r2, [pc, #84]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bca:	6013      	str	r3, [r2, #0]
	TIM9->EGR 	|= TIM_EGR_UG;		// Reinitialize the counter
 8012bcc:	4b13      	ldr	r3, [pc, #76]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bce:	695b      	ldr	r3, [r3, #20]
 8012bd0:	4a12      	ldr	r2, [pc, #72]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bd2:	f043 0301 	orr.w	r3, r3, #1
 8012bd6:	6153      	str	r3, [r2, #20]
	TIM9->SR 	&= TIM_SR_UIF;		// Clear update interrupt flag
 8012bd8:	4b10      	ldr	r3, [pc, #64]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	4a0f      	ldr	r2, [pc, #60]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bde:	f003 0301 	and.w	r3, r3, #1
 8012be2:	6113      	str	r3, [r2, #16]
	TIM9->BDTR 	|= TIM_BDTR_MOE;	// Main output Enable
 8012be4:	4b0d      	ldr	r3, [pc, #52]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012be8:	4a0c      	ldr	r2, [pc, #48]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bee:	6453      	str	r3, [r2, #68]	; 0x44

	TIM9->CCR1 = 2000-1; 	// Set duty cycle
 8012bf0:	4b0a      	ldr	r3, [pc, #40]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bf2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8012bf6:	635a      	str	r2, [r3, #52]	; 0x34

	TIM9->CCR2 = 200-1; 	// Set duty cycle
 8012bf8:	4b08      	ldr	r3, [pc, #32]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012bfa:	22c7      	movs	r2, #199	; 0xc7
 8012bfc:	639a      	str	r2, [r3, #56]	; 0x38

	// Start Timer 1
	TIM9->CR1 |= TIM_CR1_CEN;
 8012bfe:	4b07      	ldr	r3, [pc, #28]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	4a06      	ldr	r2, [pc, #24]	; (8012c1c <F_Init_TimerServo+0x160>)
 8012c04:	f043 0301 	orr.w	r3, r3, #1
 8012c08:	6013      	str	r3, [r2, #0]

}
 8012c0a:	bf00      	nop
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c12:	4770      	bx	lr
 8012c14:	40023800 	.word	0x40023800
 8012c18:	40021000 	.word	0x40021000
 8012c1c:	40014000 	.word	0x40014000

08012c20 <F_TCP_paquetTocmd>:




void F_TCP_paquetTocmd(struct pbuf *p, struct tcp_command *s_cmd_received)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b08b      	sub	sp, #44	; 0x2c
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
	uint8_t *tempPtr;
	uint8_t i = 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tempPtr = (uint8_t *)p->payload;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint8_t tab_reveived[20] = {0};
 8012c36:	f107 030c 	add.w	r3, r7, #12
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	601a      	str	r2, [r3, #0]
 8012c3e:	605a      	str	r2, [r3, #4]
 8012c40:	609a      	str	r2, [r3, #8]
 8012c42:	60da      	str	r2, [r3, #12]
 8012c44:	611a      	str	r2, [r3, #16]

	for(i=0; i<(p->len);i++)
 8012c46:	2300      	movs	r3, #0
 8012c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012c4c:	e010      	b.n	8012c70 <F_TCP_paquetTocmd+0x50>
	{

		tab_reveived[i] = (uint8_t) *(tempPtr++);
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c50:	1c5a      	adds	r2, r3, #1
 8012c52:	627a      	str	r2, [r7, #36]	; 0x24
 8012c54:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8012c58:	7819      	ldrb	r1, [r3, #0]
 8012c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012c5e:	4413      	add	r3, r2
 8012c60:	460a      	mov	r2, r1
 8012c62:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(i=0; i<(p->len);i++)
 8012c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	895b      	ldrh	r3, [r3, #10]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d3e7      	bcc.n	8012c4e <F_TCP_paquetTocmd+0x2e>

	}

	s_cmd_received->id = (uint32_t)((tab_reveived[0] << 24) + (tab_reveived[1] << 16) + (tab_reveived[2] << 8) + tab_reveived[3]);
 8012c7e:	7b3b      	ldrb	r3, [r7, #12]
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	061a      	lsls	r2, r3, #24
 8012c84:	7b7b      	ldrb	r3, [r7, #13]
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	041b      	lsls	r3, r3, #16
 8012c8a:	441a      	add	r2, r3
 8012c8c:	7bbb      	ldrb	r3, [r7, #14]
 8012c8e:	b2db      	uxtb	r3, r3
 8012c90:	021b      	lsls	r3, r3, #8
 8012c92:	4413      	add	r3, r2
 8012c94:	7bfa      	ldrb	r2, [r7, #15]
 8012c96:	b2d2      	uxtb	r2, r2
 8012c98:	4413      	add	r3, r2
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	601a      	str	r2, [r3, #0]
	s_cmd_received->nb_octet = tab_reveived[4];
 8012ca0:	7c3b      	ldrb	r3, [r7, #16]
 8012ca2:	b2da      	uxtb	r2, r3
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	711a      	strb	r2, [r3, #4]
	s_cmd_received->cmd = tab_reveived[5];
 8012ca8:	7c7b      	ldrb	r3, [r7, #17]
 8012caa:	b2da      	uxtb	r2, r3
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	715a      	strb	r2, [r3, #5]
	s_cmd_received->nb_param = tab_reveived[6];
 8012cb0:	7cbb      	ldrb	r3, [r7, #18]
 8012cb2:	b2da      	uxtb	r2, r3
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	719a      	strb	r2, [r3, #6]
	s_cmd_received->params[0] = (uint16_t)((tab_reveived[7] << 8) + tab_reveived[8]);
 8012cb8:	7cfb      	ldrb	r3, [r7, #19]
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	b29b      	uxth	r3, r3
 8012cbe:	021b      	lsls	r3, r3, #8
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	7d3b      	ldrb	r3, [r7, #20]
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	4413      	add	r3, r2
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	811a      	strh	r2, [r3, #8]
	s_cmd_received->params[1] = (uint16_t)((tab_reveived[9] << 8) + tab_reveived[10]);
 8012cd0:	7d7b      	ldrb	r3, [r7, #21]
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	021b      	lsls	r3, r3, #8
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	7dbb      	ldrb	r3, [r7, #22]
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	4413      	add	r3, r2
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	815a      	strh	r2, [r3, #10]
	s_cmd_received->params[2] = (uint16_t)((tab_reveived[11] << 8) +tab_reveived[12]);
 8012ce8:	7dfb      	ldrb	r3, [r7, #23]
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	021b      	lsls	r3, r3, #8
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	7e3b      	ldrb	r3, [r7, #24]
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	4413      	add	r3, r2
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	819a      	strh	r2, [r3, #12]
	s_cmd_received->params[3] = (uint16_t)((tab_reveived[13] << 8) + tab_reveived[14]);
 8012d00:	7e7b      	ldrb	r3, [r7, #25]
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	021b      	lsls	r3, r3, #8
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	7ebb      	ldrb	r3, [r7, #26]
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	4413      	add	r3, r2
 8012d12:	b29a      	uxth	r2, r3
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	81da      	strh	r2, [r3, #14]

}
 8012d18:	bf00      	nop
 8012d1a:	372c      	adds	r7, #44	; 0x2c
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <F_TCP_answerTotab>:

void F_TCP_answerTotab(uint8_t *array, struct tcp_answer s_cmd_answer)
{
 8012d24:	b084      	sub	sp, #16
 8012d26:	b480      	push	{r7}
 8012d28:	b085      	sub	sp, #20
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	f107 001c 	add.w	r0, r7, #28
 8012d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t i = 0, j = 0;
 8012d36:	2300      	movs	r3, #0
 8012d38:	73fb      	strb	r3, [r7, #15]
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	73bb      	strb	r3, [r7, #14]

	array[0] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 24));
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	0e1b      	lsrs	r3, r3, #24
 8012d42:	b2da      	uxtb	r2, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	701a      	strb	r2, [r3, #0]
	array[1] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 16));
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	0c1a      	lsrs	r2, r3, #16
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	b2d2      	uxtb	r2, r2
 8012d52:	701a      	strb	r2, [r3, #0]
	array[2] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 8));
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	0a1a      	lsrs	r2, r3, #8
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	3302      	adds	r3, #2
 8012d5c:	b2d2      	uxtb	r2, r2
 8012d5e:	701a      	strb	r2, [r3, #0]
	array[3] = (uint8_t)(0x00FF & s_cmd_answer.id);
 8012d60:	69fa      	ldr	r2, [r7, #28]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	3303      	adds	r3, #3
 8012d66:	b2d2      	uxtb	r2, r2
 8012d68:	701a      	strb	r2, [r3, #0]
	array[4] = s_cmd_answer.nb_octet;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8012d72:	701a      	strb	r2, [r3, #0]
	array[5] = s_cmd_answer.cmd;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	3305      	adds	r3, #5
 8012d78:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8012d7c:	701a      	strb	r2, [r3, #0]
	array[6] = s_cmd_answer.code_retour;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	3306      	adds	r3, #6
 8012d82:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012d86:	701a      	strb	r2, [r3, #0]

	for(i=0;i<SIZE_PARAM_CMD;i++)
 8012d88:	2300      	movs	r3, #0
 8012d8a:	73fb      	strb	r3, [r7, #15]
 8012d8c:	e022      	b.n	8012dd4 <F_TCP_answerTotab+0xb0>
	{
		array[7+j] = (uint8_t)(0x00FF & (s_cmd_answer.reponse[i] >> 8));
 8012d8e:	7bfb      	ldrb	r3, [r7, #15]
 8012d90:	3304      	adds	r3, #4
 8012d92:	005b      	lsls	r3, r3, #1
 8012d94:	f107 0218 	add.w	r2, r7, #24
 8012d98:	4413      	add	r3, r2
 8012d9a:	889b      	ldrh	r3, [r3, #4]
 8012d9c:	0a1b      	lsrs	r3, r3, #8
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	7bbb      	ldrb	r3, [r7, #14]
 8012da2:	3307      	adds	r3, #7
 8012da4:	4619      	mov	r1, r3
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	440b      	add	r3, r1
 8012daa:	b2d2      	uxtb	r2, r2
 8012dac:	701a      	strb	r2, [r3, #0]
		array[7+j+1] = (uint8_t)(0x00FF & s_cmd_answer.reponse[i]);
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
 8012db0:	3304      	adds	r3, #4
 8012db2:	005b      	lsls	r3, r3, #1
 8012db4:	f107 0218 	add.w	r2, r7, #24
 8012db8:	4413      	add	r3, r2
 8012dba:	8899      	ldrh	r1, [r3, #4]
 8012dbc:	7bbb      	ldrb	r3, [r7, #14]
 8012dbe:	3308      	adds	r3, #8
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	b2ca      	uxtb	r2, r1
 8012dc6:	701a      	strb	r2, [r3, #0]

		j+=2;
 8012dc8:	7bbb      	ldrb	r3, [r7, #14]
 8012dca:	3302      	adds	r3, #2
 8012dcc:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<SIZE_PARAM_CMD;i++)
 8012dce:	7bfb      	ldrb	r3, [r7, #15]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	73fb      	strb	r3, [r7, #15]
 8012dd4:	7bfb      	ldrb	r3, [r7, #15]
 8012dd6:	2b03      	cmp	r3, #3
 8012dd8:	d9d9      	bls.n	8012d8e <F_TCP_answerTotab+0x6a>
	}


}
 8012dda:	bf00      	nop
 8012ddc:	3714      	adds	r7, #20
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	b004      	add	sp, #16
 8012de6:	4770      	bx	lr

08012de8 <F_Process_Command>:

/**
 *
 */
void F_Process_Command(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012de8:	b590      	push	{r4, r7, lr}
 8012dea:	b089      	sub	sp, #36	; 0x24
 8012dec:	af02      	add	r7, sp, #8
 8012dee:	463c      	mov	r4, r7
 8012df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012df4:	2300      	movs	r3, #0
 8012df6:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->id = s_cmd_received.id; 	// same ID as the received command
 8012df8:	683a      	ldr	r2, [r7, #0]
 8012dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfc:	601a      	str	r2, [r3, #0]
	s_cmd_answer->nb_octet = NB_OCTETS_CMD;
 8012dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e00:	220f      	movs	r2, #15
 8012e02:	711a      	strb	r2, [r3, #4]
	s_cmd_answer->cmd = s_cmd_received.cmd;	// recall the command executed
 8012e04:	797a      	ldrb	r2, [r7, #5]
 8012e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e08:	715a      	strb	r2, [r3, #5]

	// Process the command depending on the command number
	switch(s_cmd_received.cmd)
 8012e0a:	797b      	ldrb	r3, [r7, #5]
 8012e0c:	3b01      	subs	r3, #1
 8012e0e:	2b09      	cmp	r3, #9
 8012e10:	d82f      	bhi.n	8012e72 <F_Process_Command+0x8a>
 8012e12:	a201      	add	r2, pc, #4	; (adr r2, 8012e18 <F_Process_Command+0x30>)
 8012e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e18:	08012e73 	.word	0x08012e73
 8012e1c:	08012e41 	.word	0x08012e41
 8012e20:	08012e53 	.word	0x08012e53
 8012e24:	08012e65 	.word	0x08012e65
 8012e28:	08012e73 	.word	0x08012e73
 8012e2c:	08012e73 	.word	0x08012e73
 8012e30:	08012e73 	.word	0x08012e73
 8012e34:	08012e73 	.word	0x08012e73
 8012e38:	08012e73 	.word	0x08012e73
 8012e3c:	08012e73 	.word	0x08012e73
		case CMD_INFO:
			break;

		// Set LED
		case CMD_SET_LED:
			status = F_Cmd_SetLED(s_cmd_received, s_cmd_answer);
 8012e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e42:	9300      	str	r3, [sp, #0]
 8012e44:	463b      	mov	r3, r7
 8012e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e48:	f000 f818 	bl	8012e7c <F_Cmd_SetLED>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	75fb      	strb	r3, [r7, #23]
			break;
 8012e50:	e010      	b.n	8012e74 <F_Process_Command+0x8c>

		// Get LED
		case CMD_GET_LED:
			status = F_Cmd_GetLED(s_cmd_received, s_cmd_answer);
 8012e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	463b      	mov	r3, r7
 8012e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e5a:	f000 f84d 	bl	8012ef8 <F_Cmd_GetLED>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	75fb      	strb	r3, [r7, #23]
			break;
 8012e62:	e007      	b.n	8012e74 <F_Process_Command+0x8c>
		// Get distances from sensors
		case CMD_GET_DISTANCES:
			F_Cmd_GetDistance(s_cmd_received, s_cmd_answer);
 8012e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	463b      	mov	r3, r7
 8012e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e6c:	f000 f87e 	bl	8012f6c <F_Cmd_GetDistance>
			break;
 8012e70:	e000      	b.n	8012e74 <F_Process_Command+0x8c>
		case CMD_GET_LIST_POINTS:
			break;

		// Error, unknown command
		default:
			break;
 8012e72:	bf00      	nop

	}


}
 8012e74:	bf00      	nop
 8012e76:	371c      	adds	r7, #28
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd90      	pop	{r4, r7, pc}

08012e7c <F_Cmd_SetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_SetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012e7c:	b590      	push	{r4, r7, lr}
 8012e7e:	b087      	sub	sp, #28
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	463c      	mov	r4, r7
 8012e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	75fb      	strb	r3, [r7, #23]
	// All LEDs

		F_GPIO_SetLedRed(0);
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	f001 fe7b 	bl	8014b88 <F_GPIO_SetLedRed>
		F_GPIO_SetLedBlue(0);
 8012e92:	2000      	movs	r0, #0
 8012e94:	f001 fe94 	bl	8014bc0 <F_GPIO_SetLedBlue>
		F_GPIO_SetLedGreen(0);
 8012e98:	2000      	movs	r0, #0
 8012e9a:	f001 fead 	bl	8014bf8 <F_GPIO_SetLedGreen>

	// Red
	if(s_cmd_received.params[0] & 0x01)
 8012e9e:	893b      	ldrh	r3, [r7, #8]
 8012ea0:	f003 0301 	and.w	r3, r3, #1
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d003      	beq.n	8012eb0 <F_Cmd_SetLED+0x34>
	{
		F_GPIO_SetLedBlue(1);
 8012ea8:	2001      	movs	r0, #1
 8012eaa:	f001 fe89 	bl	8014bc0 <F_GPIO_SetLedBlue>
 8012eae:	e00f      	b.n	8012ed0 <F_Cmd_SetLED+0x54>
	}
	// blue
	else if(s_cmd_received.params[0] == 2)
 8012eb0:	893b      	ldrh	r3, [r7, #8]
 8012eb2:	2b02      	cmp	r3, #2
 8012eb4:	d103      	bne.n	8012ebe <F_Cmd_SetLED+0x42>
	{
		F_GPIO_SetLedGreen(1);
 8012eb6:	2001      	movs	r0, #1
 8012eb8:	f001 fe9e 	bl	8014bf8 <F_GPIO_SetLedGreen>
 8012ebc:	e008      	b.n	8012ed0 <F_Cmd_SetLED+0x54>
	}
	// Green
	else if(s_cmd_received.params[0] == 4)
 8012ebe:	893b      	ldrh	r3, [r7, #8]
 8012ec0:	2b04      	cmp	r3, #4
 8012ec2:	d103      	bne.n	8012ecc <F_Cmd_SetLED+0x50>
	{
		F_GPIO_SetLedRed(1);
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	f001 fe5f 	bl	8014b88 <F_GPIO_SetLedRed>
 8012eca:	e001      	b.n	8012ed0 <F_Cmd_SetLED+0x54>
	}
	else
	{
		status = STATUS_ERROR_PARAM;
 8012ecc:	2302      	movs	r3, #2
 8012ece:	75fb      	strb	r3, [r7, #23]
	}

	s_cmd_answer->code_retour = status;
 8012ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed2:	7dfa      	ldrb	r2, [r7, #23]
 8012ed4:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 8012ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed8:	2200      	movs	r2, #0
 8012eda:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ede:	2200      	movs	r2, #0
 8012ee0:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eea:	2200      	movs	r2, #0
 8012eec:	81da      	strh	r2, [r3, #14]

	return status;
 8012eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	371c      	adds	r7, #28
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd90      	pop	{r4, r7, pc}

08012ef8 <F_Cmd_GetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012ef8:	b490      	push	{r4, r7}
 8012efa:	b086      	sub	sp, #24
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	463c      	mov	r4, r7
 8012f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012f04:	2300      	movs	r3, #0
 8012f06:	75fb      	strb	r3, [r7, #23]


	s_cmd_answer->code_retour = status;
 8012f08:	6a3b      	ldr	r3, [r7, #32]
 8012f0a:	7dfa      	ldrb	r2, [r7, #23]
 8012f0c:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = (((GPIOB->ODR & LED_Red) >> 14) << 2) + ((GPIOB->ODR & LED_Green) << 1) + (((GPIOB->ODR & LED_Blue) >> 7));
 8012f0e:	4b16      	ldr	r3, [pc, #88]	; (8012f68 <F_Cmd_GetLED+0x70>)
 8012f10:	695b      	ldr	r3, [r3, #20]
 8012f12:	0b9b      	lsrs	r3, r3, #14
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	f003 0304 	and.w	r3, r3, #4
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	4b11      	ldr	r3, [pc, #68]	; (8012f68 <F_Cmd_GetLED+0x70>)
 8012f22:	695b      	ldr	r3, [r3, #20]
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	005b      	lsls	r3, r3, #1
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	f003 0302 	and.w	r3, r3, #2
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	4413      	add	r3, r2
 8012f32:	b29a      	uxth	r2, r3
 8012f34:	4b0c      	ldr	r3, [pc, #48]	; (8012f68 <F_Cmd_GetLED+0x70>)
 8012f36:	695b      	ldr	r3, [r3, #20]
 8012f38:	09db      	lsrs	r3, r3, #7
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	f003 0301 	and.w	r3, r3, #1
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	4413      	add	r3, r2
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	6a3b      	ldr	r3, [r7, #32]
 8012f48:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012f4a:	6a3b      	ldr	r3, [r7, #32]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012f50:	6a3b      	ldr	r3, [r7, #32]
 8012f52:	2200      	movs	r2, #0
 8012f54:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012f56:	6a3b      	ldr	r3, [r7, #32]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	81da      	strh	r2, [r3, #14]

	return status;
 8012f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3718      	adds	r7, #24
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bc90      	pop	{r4, r7}
 8012f66:	4770      	bx	lr
 8012f68:	40020400 	.word	0x40020400

08012f6c <F_Cmd_GetDistance>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetDistance(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012f6c:	b490      	push	{r4, r7}
 8012f6e:	b086      	sub	sp, #24
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	463c      	mov	r4, r7
 8012f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 8012f7c:	6a3b      	ldr	r3, [r7, #32]
 8012f7e:	7dfa      	ldrb	r2, [r7, #23]
 8012f80:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = distance_avant_1;
 8012f82:	4b0b      	ldr	r3, [pc, #44]	; (8012fb0 <F_Cmd_GetDistance+0x44>)
 8012f84:	881a      	ldrh	r2, [r3, #0]
 8012f86:	6a3b      	ldr	r3, [r7, #32]
 8012f88:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = distance_avant_2;
 8012f8a:	4b0a      	ldr	r3, [pc, #40]	; (8012fb4 <F_Cmd_GetDistance+0x48>)
 8012f8c:	881a      	ldrh	r2, [r3, #0]
 8012f8e:	6a3b      	ldr	r3, [r7, #32]
 8012f90:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = distance_avant_3;
 8012f92:	4b09      	ldr	r3, [pc, #36]	; (8012fb8 <F_Cmd_GetDistance+0x4c>)
 8012f94:	881a      	ldrh	r2, [r3, #0]
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = distance_arriere_1;
 8012f9a:	4b08      	ldr	r3, [pc, #32]	; (8012fbc <F_Cmd_GetDistance+0x50>)
 8012f9c:	881a      	ldrh	r2, [r3, #0]
 8012f9e:	6a3b      	ldr	r3, [r7, #32]
 8012fa0:	81da      	strh	r2, [r3, #14]

	return status;
 8012fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3718      	adds	r7, #24
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bc90      	pop	{r4, r7}
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	200003cc 	.word	0x200003cc
 8012fb4:	200003ce 	.word	0x200003ce
 8012fb8:	200003d0 	.word	0x200003d0
 8012fbc:	200003d2 	.word	0x200003d2

08012fc0 <Init_Motors>:
 *
 */

#include "D_MOTORS.h"

void Init_Motors(void){
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	af00      	add	r7, sp, #0
	F_GPIO_SetEnableMotors(1);
 8012fc4:	2001      	movs	r0, #1
 8012fc6:	f001 fe85 	bl	8014cd4 <F_GPIO_SetEnableMotors>

	MX_TIM4_Init();
 8012fca:	f002 ffc3 	bl	8015f54 <MX_TIM4_Init>
}
 8012fce:	bf00      	nop
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <F_PWM_SetCmdMotorDroit>:
 *
 * Cela permet de s'interfacer avec les moteurs via une commande +100/-100
 * Pour faire l'automatique c'est obligatoire
 *
 */
void F_PWM_SetCmdMotorDroit(int speed){
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b084      	sub	sp, #16
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
	int dir=0;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	60fb      	str	r3, [r7, #12]
	// Bornage de la donnée d'entrée
	if(speed<-100) speed= -100;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8012fe4:	da02      	bge.n	8012fec <F_PWM_SetCmdMotorDroit+0x1a>
 8012fe6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8012fea:	607b      	str	r3, [r7, #4]
	if(speed> 100) speed=  100;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b64      	cmp	r3, #100	; 0x64
 8012ff0:	dd01      	ble.n	8012ff6 <F_PWM_SetCmdMotorDroit+0x24>
 8012ff2:	2364      	movs	r3, #100	; 0x64
 8012ff4:	607b      	str	r3, [r7, #4]

	// Commande du pont en H
	if(speed < 0){
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	da03      	bge.n	8013004 <F_PWM_SetCmdMotorDroit+0x32>
		dir = -1;
 8012ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013000:	60fb      	str	r3, [r7, #12]
 8013002:	e001      	b.n	8013008 <F_PWM_SetCmdMotorDroit+0x36>
	}else{
		dir = 1;
 8013004:	2301      	movs	r3, #1
 8013006:	60fb      	str	r3, [r7, #12]
	}
	F_GPIO_SetMotorDroitDir(dir);
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f001 fe2b 	bl	8014c64 <F_GPIO_SetMotorDroitDir>
	F_PWM_SetDCMotorDroit(speed*dir);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	68fa      	ldr	r2, [r7, #12]
 8013012:	fb02 f303 	mul.w	r3, r2, r3
 8013016:	4618      	mov	r0, r3
 8013018:	f000 f82d 	bl	8013076 <F_PWM_SetDCMotorDroit>
}
 801301c:	bf00      	nop
 801301e:	3710      	adds	r7, #16
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <F_PWM_SetCmdMotorGauche>:
/**
 *	@param[in] new_pwm_value new Duty cycle value in percentage %
 */
void F_PWM_SetCmdMotorGauche(int speed){
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
	int dir=0;
 801302c:	2300      	movs	r3, #0
 801302e:	60fb      	str	r3, [r7, #12]
	// Bornage de la donnée d'entrée
	if(speed<-100) speed= -100;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8013036:	da02      	bge.n	801303e <F_PWM_SetCmdMotorGauche+0x1a>
 8013038:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801303c:	607b      	str	r3, [r7, #4]
	if(speed> 100) speed=  100;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b64      	cmp	r3, #100	; 0x64
 8013042:	dd01      	ble.n	8013048 <F_PWM_SetCmdMotorGauche+0x24>
 8013044:	2364      	movs	r3, #100	; 0x64
 8013046:	607b      	str	r3, [r7, #4]

	// Commande du pont en H
	if(speed < 0){
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	da03      	bge.n	8013056 <F_PWM_SetCmdMotorGauche+0x32>
		(dir = -1);
 801304e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013052:	60fb      	str	r3, [r7, #12]
 8013054:	e001      	b.n	801305a <F_PWM_SetCmdMotorGauche+0x36>
	}else{
		(dir = 1);
 8013056:	2301      	movs	r3, #1
 8013058:	60fb      	str	r3, [r7, #12]
	}
	F_GPIO_SetMotorGaucheDir(dir);
 801305a:	68f8      	ldr	r0, [r7, #12]
 801305c:	f001 fe1e 	bl	8014c9c <F_GPIO_SetMotorGaucheDir>
	F_PWM_SetDCMotorGauche(speed*dir);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	fb02 f303 	mul.w	r3, r2, r3
 8013068:	4618      	mov	r0, r3
 801306a:	f000 f80f 	bl	801308c <F_PWM_SetDCMotorGauche>
}
 801306e:	bf00      	nop
 8013070:	3710      	adds	r7, #16
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}

08013076 <F_PWM_SetDCMotorDroit>:
/**
 *	@param[in] new_pwm_value new Duty cycle value in percentage %
 *
 *	Validé sur NUCLEO F429 ZI le 18-09-2018
 */
void F_PWM_SetDCMotorDroit(int dc){
 8013076:	b580      	push	{r7, lr}
 8013078:	b082      	sub	sp, #8
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
	F_TIM4_CH3_SetDC(dc);
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f003 f8d8 	bl	8016234 <F_TIM4_CH3_SetDC>
}
 8013084:	bf00      	nop
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <F_PWM_SetDCMotorGauche>:
/**
 *	@param[in] new_pwm_value new Duty cycle value in percentage %
 *
 *	Validé sur NUCLEO F429 ZI le 18-09-2018
 */
void F_PWM_SetDCMotorGauche(int dc){
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
	F_TIM4_CH4_SetDC(dc);
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f003 f8ed 	bl	8016274 <F_TIM4_CH4_SetDC>
}
 801309a:	bf00      	nop
 801309c:	3708      	adds	r7, #8
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
	...

080130a4 <F_QEI_Read>:
	__enable_irq();
}
/*
 * F_QEI_Read is called every Timer 9 interrupt to update encoder's data
 */
void F_QEI_Read (void){
 80130a4:	b580      	push	{r7, lr}
 80130a6:	af00      	add	r7, sp, #0

	g_oldLeftCount  = g_leftCount ;
 80130a8:	4b3f      	ldr	r3, [pc, #252]	; (80131a8 <F_QEI_Read+0x104>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	4a3f      	ldr	r2, [pc, #252]	; (80131ac <F_QEI_Read+0x108>)
 80130ae:	6013      	str	r3, [r2, #0]
	g_oldRightCount = g_rightCount;
 80130b0:	4b3f      	ldr	r3, [pc, #252]	; (80131b0 <F_QEI_Read+0x10c>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4a3f      	ldr	r2, [pc, #252]	; (80131b4 <F_QEI_Read+0x110>)
 80130b6:	6013      	str	r3, [r2, #0]

	g_rightCount = TIM2->CNT ;
 80130b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130be:	461a      	mov	r2, r3
 80130c0:	4b3b      	ldr	r3, [pc, #236]	; (80131b0 <F_QEI_Read+0x10c>)
 80130c2:	601a      	str	r2, [r3, #0]
	g_leftCount  = TIM3->CNT ;
 80130c4:	4b3c      	ldr	r3, [pc, #240]	; (80131b8 <F_QEI_Read+0x114>)
 80130c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c8:	461a      	mov	r2, r3
 80130ca:	4b37      	ldr	r3, [pc, #220]	; (80131a8 <F_QEI_Read+0x104>)
 80130cc:	601a      	str	r2, [r3, #0]

	g_leftSpeed  = g_leftCount  - g_oldLeftCount ;
 80130ce:	4b36      	ldr	r3, [pc, #216]	; (80131a8 <F_QEI_Read+0x104>)
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	4b36      	ldr	r3, [pc, #216]	; (80131ac <F_QEI_Read+0x108>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	4a38      	ldr	r2, [pc, #224]	; (80131bc <F_QEI_Read+0x118>)
 80130da:	6013      	str	r3, [r2, #0]
	g_rightSpeed = g_rightCount - g_oldRightCount;
 80130dc:	4b34      	ldr	r3, [pc, #208]	; (80131b0 <F_QEI_Read+0x10c>)
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	4b34      	ldr	r3, [pc, #208]	; (80131b4 <F_QEI_Read+0x110>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	4a36      	ldr	r2, [pc, #216]	; (80131c0 <F_QEI_Read+0x11c>)
 80130e8:	6013      	str	r3, [r2, #0]

	// Si on passe par zero en phase descendante
	if(g_leftSpeed  > 4096) g_leftSpeed = -(g_oldLeftCount  + (65535-g_leftCount));
 80130ea:	4b34      	ldr	r3, [pc, #208]	; (80131bc <F_QEI_Read+0x118>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80130f2:	dd0a      	ble.n	801310a <F_QEI_Read+0x66>
 80130f4:	4b2c      	ldr	r3, [pc, #176]	; (80131a8 <F_QEI_Read+0x104>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80130fc:	33ff      	adds	r3, #255	; 0xff
 80130fe:	4a2b      	ldr	r2, [pc, #172]	; (80131ac <F_QEI_Read+0x108>)
 8013100:	6812      	ldr	r2, [r2, #0]
 8013102:	4413      	add	r3, r2
 8013104:	425b      	negs	r3, r3
 8013106:	4a2d      	ldr	r2, [pc, #180]	; (80131bc <F_QEI_Read+0x118>)
 8013108:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed > 4096) g_rightSpeed= -(g_oldRightCount + (65535-g_rightCount));
 801310a:	4b2d      	ldr	r3, [pc, #180]	; (80131c0 <F_QEI_Read+0x11c>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013112:	dd0a      	ble.n	801312a <F_QEI_Read+0x86>
 8013114:	4b26      	ldr	r3, [pc, #152]	; (80131b0 <F_QEI_Read+0x10c>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 801311c:	33ff      	adds	r3, #255	; 0xff
 801311e:	4a25      	ldr	r2, [pc, #148]	; (80131b4 <F_QEI_Read+0x110>)
 8013120:	6812      	ldr	r2, [r2, #0]
 8013122:	4413      	add	r3, r2
 8013124:	425b      	negs	r3, r3
 8013126:	4a26      	ldr	r2, [pc, #152]	; (80131c0 <F_QEI_Read+0x11c>)
 8013128:	6013      	str	r3, [r2, #0]
	// Si on passe par zero en phase montante
	if(g_leftSpeed  < -4096) g_leftSpeed = (g_leftCount + (65535  - g_oldLeftCount));
 801312a:	4b24      	ldr	r3, [pc, #144]	; (80131bc <F_QEI_Read+0x118>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8013132:	da09      	bge.n	8013148 <F_QEI_Read+0xa4>
 8013134:	4b1d      	ldr	r3, [pc, #116]	; (80131ac <F_QEI_Read+0x108>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 801313c:	33ff      	adds	r3, #255	; 0xff
 801313e:	4a1a      	ldr	r2, [pc, #104]	; (80131a8 <F_QEI_Read+0x104>)
 8013140:	6812      	ldr	r2, [r2, #0]
 8013142:	4413      	add	r3, r2
 8013144:	4a1d      	ldr	r2, [pc, #116]	; (80131bc <F_QEI_Read+0x118>)
 8013146:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed < -4096) g_rightSpeed= (g_rightCount + (65535 - g_oldRightCount));
 8013148:	4b1d      	ldr	r3, [pc, #116]	; (80131c0 <F_QEI_Read+0x11c>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8013150:	da09      	bge.n	8013166 <F_QEI_Read+0xc2>
 8013152:	4b18      	ldr	r3, [pc, #96]	; (80131b4 <F_QEI_Read+0x110>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 801315a:	33ff      	adds	r3, #255	; 0xff
 801315c:	4a14      	ldr	r2, [pc, #80]	; (80131b0 <F_QEI_Read+0x10c>)
 801315e:	6812      	ldr	r2, [r2, #0]
 8013160:	4413      	add	r3, r2
 8013162:	4a17      	ldr	r2, [pc, #92]	; (80131c0 <F_QEI_Read+0x11c>)
 8013164:	6013      	str	r3, [r2, #0]

	g_fwdSpeed = (float)( g_leftSpeed + g_rightSpeed ) / 2;
 8013166:	4b15      	ldr	r3, [pc, #84]	; (80131bc <F_QEI_Read+0x118>)
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	4b15      	ldr	r3, [pc, #84]	; (80131c0 <F_QEI_Read+0x11c>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	4413      	add	r3, r2
 8013170:	ee07 3a90 	vmov	s15, r3
 8013174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013178:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801317c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013180:	4b10      	ldr	r3, [pc, #64]	; (80131c4 <F_QEI_Read+0x120>)
 8013182:	edc3 7a00 	vstr	s15, [r3]
	g_rotSpeed =  g_rightSpeed - g_leftSpeed;
 8013186:	4b0e      	ldr	r3, [pc, #56]	; (80131c0 <F_QEI_Read+0x11c>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	4b0c      	ldr	r3, [pc, #48]	; (80131bc <F_QEI_Read+0x118>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	ee07 3a90 	vmov	s15, r3
 8013194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013198:	4b0b      	ldr	r3, [pc, #44]	; (80131c8 <F_QEI_Read+0x124>)
 801319a:	edc3 7a00 	vstr	s15, [r3]

	F_QEI_XYTetaProcessing();
 801319e:	f000 f817 	bl	80131d0 <F_QEI_XYTetaProcessing>
}
 80131a2:	bf00      	nop
 80131a4:	bd80      	pop	{r7, pc}
 80131a6:	bf00      	nop
 80131a8:	20003978 	.word	0x20003978
 80131ac:	2000396c 	.word	0x2000396c
 80131b0:	20003974 	.word	0x20003974
 80131b4:	20003984 	.word	0x20003984
 80131b8:	40000400 	.word	0x40000400
 80131bc:	2000397c 	.word	0x2000397c
 80131c0:	20003980 	.word	0x20003980
 80131c4:	20003968 	.word	0x20003968
 80131c8:	20003970 	.word	0x20003970
 80131cc:	00000000 	.word	0x00000000

080131d0 <F_QEI_XYTetaProcessing>:
/*
 * F_QEI_XYTetaProcessing - Update localization state vector
 */
void F_QEI_XYTetaProcessing(void){
 80131d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80131d4:	ed2d 8b02 	vpush	{d8}
 80131d8:	af00      	add	r7, sp, #0
	g_estimate.x +=  TICKTOMM * g_fwdSpeed  * cosf(g_estimate.teta);
 80131da:	4b51      	ldr	r3, [pc, #324]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ed f9ba 	bl	8000558 <__aeabi_f2d>
 80131e4:	4604      	mov	r4, r0
 80131e6:	460d      	mov	r5, r1
 80131e8:	4b4e      	ldr	r3, [pc, #312]	; (8013324 <F_QEI_XYTetaProcessing+0x154>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7ed f9b3 	bl	8000558 <__aeabi_f2d>
 80131f2:	a349      	add	r3, pc, #292	; (adr r3, 8013318 <F_QEI_XYTetaProcessing+0x148>)
 80131f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f8:	f7ed fa06 	bl	8000608 <__aeabi_dmul>
 80131fc:	4602      	mov	r2, r0
 80131fe:	460b      	mov	r3, r1
 8013200:	4690      	mov	r8, r2
 8013202:	4699      	mov	r9, r3
 8013204:	4b46      	ldr	r3, [pc, #280]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 8013206:	edd3 7a02 	vldr	s15, [r3, #8]
 801320a:	eeb0 0a67 	vmov.f32	s0, s15
 801320e:	f004 fea5 	bl	8017f5c <cosf>
 8013212:	ee10 3a10 	vmov	r3, s0
 8013216:	4618      	mov	r0, r3
 8013218:	f7ed f99e 	bl	8000558 <__aeabi_f2d>
 801321c:	4602      	mov	r2, r0
 801321e:	460b      	mov	r3, r1
 8013220:	4640      	mov	r0, r8
 8013222:	4649      	mov	r1, r9
 8013224:	f7ed f9f0 	bl	8000608 <__aeabi_dmul>
 8013228:	4602      	mov	r2, r0
 801322a:	460b      	mov	r3, r1
 801322c:	4620      	mov	r0, r4
 801322e:	4629      	mov	r1, r5
 8013230:	f7ed f834 	bl	800029c <__adddf3>
 8013234:	4603      	mov	r3, r0
 8013236:	460c      	mov	r4, r1
 8013238:	4618      	mov	r0, r3
 801323a:	4621      	mov	r1, r4
 801323c:	f7ed fc16 	bl	8000a6c <__aeabi_d2f>
 8013240:	4602      	mov	r2, r0
 8013242:	4b37      	ldr	r3, [pc, #220]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 8013244:	601a      	str	r2, [r3, #0]
	g_estimate.y +=  TICKTOMM * g_fwdSpeed  * sinf(g_estimate.teta);
 8013246:	4b36      	ldr	r3, [pc, #216]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	4618      	mov	r0, r3
 801324c:	f7ed f984 	bl	8000558 <__aeabi_f2d>
 8013250:	4604      	mov	r4, r0
 8013252:	460d      	mov	r5, r1
 8013254:	4b33      	ldr	r3, [pc, #204]	; (8013324 <F_QEI_XYTetaProcessing+0x154>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4618      	mov	r0, r3
 801325a:	f7ed f97d 	bl	8000558 <__aeabi_f2d>
 801325e:	a32e      	add	r3, pc, #184	; (adr r3, 8013318 <F_QEI_XYTetaProcessing+0x148>)
 8013260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013264:	f7ed f9d0 	bl	8000608 <__aeabi_dmul>
 8013268:	4602      	mov	r2, r0
 801326a:	460b      	mov	r3, r1
 801326c:	4690      	mov	r8, r2
 801326e:	4699      	mov	r9, r3
 8013270:	4b2b      	ldr	r3, [pc, #172]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 8013272:	edd3 7a02 	vldr	s15, [r3, #8]
 8013276:	eeb0 0a67 	vmov.f32	s0, s15
 801327a:	f004 feb7 	bl	8017fec <sinf>
 801327e:	ee10 3a10 	vmov	r3, s0
 8013282:	4618      	mov	r0, r3
 8013284:	f7ed f968 	bl	8000558 <__aeabi_f2d>
 8013288:	4602      	mov	r2, r0
 801328a:	460b      	mov	r3, r1
 801328c:	4640      	mov	r0, r8
 801328e:	4649      	mov	r1, r9
 8013290:	f7ed f9ba 	bl	8000608 <__aeabi_dmul>
 8013294:	4602      	mov	r2, r0
 8013296:	460b      	mov	r3, r1
 8013298:	4620      	mov	r0, r4
 801329a:	4629      	mov	r1, r5
 801329c:	f7ec fffe 	bl	800029c <__adddf3>
 80132a0:	4603      	mov	r3, r0
 80132a2:	460c      	mov	r4, r1
 80132a4:	4618      	mov	r0, r3
 80132a6:	4621      	mov	r1, r4
 80132a8:	f7ed fbe0 	bl	8000a6c <__aeabi_d2f>
 80132ac:	4602      	mov	r2, r0
 80132ae:	4b1c      	ldr	r3, [pc, #112]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 80132b0:	605a      	str	r2, [r3, #4]
	g_estimate.teta +=  tanf( TICKTOMM * g_rotSpeed  / ENTRAXE ) ;
 80132b2:	4b1b      	ldr	r3, [pc, #108]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 80132b4:	ed93 8a02 	vldr	s16, [r3, #8]
 80132b8:	4b1b      	ldr	r3, [pc, #108]	; (8013328 <F_QEI_XYTetaProcessing+0x158>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ed f94b 	bl	8000558 <__aeabi_f2d>
 80132c2:	a315      	add	r3, pc, #84	; (adr r3, 8013318 <F_QEI_XYTetaProcessing+0x148>)
 80132c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c8:	f7ed f99e 	bl	8000608 <__aeabi_dmul>
 80132cc:	4603      	mov	r3, r0
 80132ce:	460c      	mov	r4, r1
 80132d0:	4618      	mov	r0, r3
 80132d2:	4621      	mov	r1, r4
 80132d4:	f04f 0200 	mov.w	r2, #0
 80132d8:	4b14      	ldr	r3, [pc, #80]	; (801332c <F_QEI_XYTetaProcessing+0x15c>)
 80132da:	f7ed fabf 	bl	800085c <__aeabi_ddiv>
 80132de:	4603      	mov	r3, r0
 80132e0:	460c      	mov	r4, r1
 80132e2:	4618      	mov	r0, r3
 80132e4:	4621      	mov	r1, r4
 80132e6:	f7ed fbc1 	bl	8000a6c <__aeabi_d2f>
 80132ea:	4603      	mov	r3, r0
 80132ec:	ee00 3a10 	vmov	s0, r3
 80132f0:	f004 febe 	bl	8018070 <tanf>
 80132f4:	eef0 7a40 	vmov.f32	s15, s0
 80132f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80132fc:	4b08      	ldr	r3, [pc, #32]	; (8013320 <F_QEI_XYTetaProcessing+0x150>)
 80132fe:	edc3 7a02 	vstr	s15, [r3, #8]

	F_Math_ModuloPi(&g_estimate.teta);
 8013302:	480b      	ldr	r0, [pc, #44]	; (8013330 <F_QEI_XYTetaProcessing+0x160>)
 8013304:	f000 fe5e 	bl	8013fc4 <F_Math_ModuloPi>
}
 8013308:	bf00      	nop
 801330a:	46bd      	mov	sp, r7
 801330c:	ecbd 8b02 	vpop	{d8}
 8013310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013314:	f3af 8000 	nop.w
 8013318:	611d9602 	.word	0x611d9602
 801331c:	3fb8209f 	.word	0x3fb8209f
 8013320:	20003988 	.word	0x20003988
 8013324:	20003968 	.word	0x20003968
 8013328:	20003970 	.word	0x20003970
 801332c:	406e0000 	.word	0x406e0000
 8013330:	20003990 	.word	0x20003990
 8013334:	00000000 	.word	0x00000000

08013338 <F_QEI_getspeed>:
/*
 * F_QEI_getspeed - Return speed of each motor
 */
void F_QEI_getspeed(float * left, float * right){
 8013338:	b590      	push	{r4, r7, lr}
 801333a:	b083      	sub	sp, #12
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
	*left  = (float)g_leftSpeed  * TICKTOMM * FREQ_ECH; // In mm per s
 8013342:	4b37      	ldr	r3, [pc, #220]	; (8013420 <F_QEI_getspeed+0xe8>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	ee07 3a90 	vmov	s15, r3
 801334a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801334e:	ee17 0a90 	vmov	r0, s15
 8013352:	f7ed f901 	bl	8000558 <__aeabi_f2d>
 8013356:	a330      	add	r3, pc, #192	; (adr r3, 8013418 <F_QEI_getspeed+0xe0>)
 8013358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335c:	f7ed f954 	bl	8000608 <__aeabi_dmul>
 8013360:	4603      	mov	r3, r0
 8013362:	460c      	mov	r4, r1
 8013364:	4618      	mov	r0, r3
 8013366:	4621      	mov	r1, r4
 8013368:	f04f 0200 	mov.w	r2, #0
 801336c:	4b2d      	ldr	r3, [pc, #180]	; (8013424 <F_QEI_getspeed+0xec>)
 801336e:	f7ed f94b 	bl	8000608 <__aeabi_dmul>
 8013372:	4603      	mov	r3, r0
 8013374:	460c      	mov	r4, r1
 8013376:	4618      	mov	r0, r3
 8013378:	4621      	mov	r1, r4
 801337a:	f04f 0200 	mov.w	r2, #0
 801337e:	4b2a      	ldr	r3, [pc, #168]	; (8013428 <F_QEI_getspeed+0xf0>)
 8013380:	f7ed fa6c 	bl	800085c <__aeabi_ddiv>
 8013384:	4603      	mov	r3, r0
 8013386:	460c      	mov	r4, r1
 8013388:	4618      	mov	r0, r3
 801338a:	4621      	mov	r1, r4
 801338c:	f04f 0200 	mov.w	r2, #0
 8013390:	4b26      	ldr	r3, [pc, #152]	; (801342c <F_QEI_getspeed+0xf4>)
 8013392:	f7ed f939 	bl	8000608 <__aeabi_dmul>
 8013396:	4603      	mov	r3, r0
 8013398:	460c      	mov	r4, r1
 801339a:	4618      	mov	r0, r3
 801339c:	4621      	mov	r1, r4
 801339e:	f7ed fb65 	bl	8000a6c <__aeabi_d2f>
 80133a2:	4602      	mov	r2, r0
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	601a      	str	r2, [r3, #0]
	*right = (float)g_rightSpeed * TICKTOMM * FREQ_ECH;
 80133a8:	4b21      	ldr	r3, [pc, #132]	; (8013430 <F_QEI_getspeed+0xf8>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	ee07 3a90 	vmov	s15, r3
 80133b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133b4:	ee17 0a90 	vmov	r0, s15
 80133b8:	f7ed f8ce 	bl	8000558 <__aeabi_f2d>
 80133bc:	a316      	add	r3, pc, #88	; (adr r3, 8013418 <F_QEI_getspeed+0xe0>)
 80133be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c2:	f7ed f921 	bl	8000608 <__aeabi_dmul>
 80133c6:	4603      	mov	r3, r0
 80133c8:	460c      	mov	r4, r1
 80133ca:	4618      	mov	r0, r3
 80133cc:	4621      	mov	r1, r4
 80133ce:	f04f 0200 	mov.w	r2, #0
 80133d2:	4b14      	ldr	r3, [pc, #80]	; (8013424 <F_QEI_getspeed+0xec>)
 80133d4:	f7ed f918 	bl	8000608 <__aeabi_dmul>
 80133d8:	4603      	mov	r3, r0
 80133da:	460c      	mov	r4, r1
 80133dc:	4618      	mov	r0, r3
 80133de:	4621      	mov	r1, r4
 80133e0:	f04f 0200 	mov.w	r2, #0
 80133e4:	4b10      	ldr	r3, [pc, #64]	; (8013428 <F_QEI_getspeed+0xf0>)
 80133e6:	f7ed fa39 	bl	800085c <__aeabi_ddiv>
 80133ea:	4603      	mov	r3, r0
 80133ec:	460c      	mov	r4, r1
 80133ee:	4618      	mov	r0, r3
 80133f0:	4621      	mov	r1, r4
 80133f2:	f04f 0200 	mov.w	r2, #0
 80133f6:	4b0d      	ldr	r3, [pc, #52]	; (801342c <F_QEI_getspeed+0xf4>)
 80133f8:	f7ed f906 	bl	8000608 <__aeabi_dmul>
 80133fc:	4603      	mov	r3, r0
 80133fe:	460c      	mov	r4, r1
 8013400:	4618      	mov	r0, r3
 8013402:	4621      	mov	r1, r4
 8013404:	f7ed fb32 	bl	8000a6c <__aeabi_d2f>
 8013408:	4602      	mov	r2, r0
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	601a      	str	r2, [r3, #0]
}
 801340e:	bf00      	nop
 8013410:	370c      	adds	r7, #12
 8013412:	46bd      	mov	sp, r7
 8013414:	bd90      	pop	{r4, r7, pc}
 8013416:	bf00      	nop
 8013418:	5a7ed197 	.word	0x5a7ed197
 801341c:	400921fb 	.word	0x400921fb
 8013420:	2000397c 	.word	0x2000397c
 8013424:	40520000 	.word	0x40520000
 8013428:	40a2c000 	.word	0x40a2c000
 801342c:	40490000 	.word	0x40490000
 8013430:	20003980 	.word	0x20003980

08013434 <F_QEI_setPosition>:
	__enable_irq();
}
/*
 * F_QEI_setLocalisation - Set position and angle
 */
void F_QEI_setPosition( int x_mm, int y_mm, int teta_deg){
 8013434:	b580      	push	{r7, lr}
 8013436:	b084      	sub	sp, #16
 8013438:	af00      	add	r7, sp, #0
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8013440:	b672      	cpsid	i
	__disable_irq();

	g_estimate.x = x_mm ;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	ee07 3a90 	vmov	s15, r3
 8013448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801344c:	4b13      	ldr	r3, [pc, #76]	; (801349c <F_QEI_setPosition+0x68>)
 801344e:	edc3 7a00 	vstr	s15, [r3]
	g_estimate.y = y_mm ;
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	ee07 3a90 	vmov	s15, r3
 8013458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801345c:	4b0f      	ldr	r3, [pc, #60]	; (801349c <F_QEI_setPosition+0x68>)
 801345e:	edc3 7a01 	vstr	s15, [r3, #4]

	if(teta_deg < 360){
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8013468:	da0e      	bge.n	8013488 <F_QEI_setPosition+0x54>
		g_estimate.teta = F_Math_toRad( (float) teta_deg);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	ee07 3a90 	vmov	s15, r3
 8013470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013474:	eeb0 0a67 	vmov.f32	s0, s15
 8013478:	f000 fd6e 	bl	8013f58 <F_Math_toRad>
 801347c:	eef0 7a40 	vmov.f32	s15, s0
 8013480:	4b06      	ldr	r3, [pc, #24]	; (801349c <F_QEI_setPosition+0x68>)
 8013482:	edc3 7a02 	vstr	s15, [r3, #8]
 8013486:	e003      	b.n	8013490 <F_QEI_setPosition+0x5c>
	}else{
		g_estimate.teta = 0;
 8013488:	4b04      	ldr	r3, [pc, #16]	; (801349c <F_QEI_setPosition+0x68>)
 801348a:	f04f 0200 	mov.w	r2, #0
 801348e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8013490:	b662      	cpsie	i
	}

	__enable_irq();
}
 8013492:	bf00      	nop
 8013494:	3710      	adds	r7, #16
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	20003988 	.word	0x20003988

080134a0 <F_AUTO_SpeedRegulator>:
Localisation consigne[NB_POINT_MAX];

/*
 * Speed regulator for each wheel
 */
void F_AUTO_SpeedRegulator(void){
 80134a0:	b5b0      	push	{r4, r5, r7, lr}
 80134a2:	b08a      	sub	sp, #40	; 0x28
 80134a4:	af00      	add	r7, sp, #0
	// Variables de sortie
	float l_cmd_right;
	float l_cmd_left;

	// Données d'entée de régulateur
	F_QEI_getspeed(&l_leftSpeed,&l_rightSpeed);
 80134a6:	1d3a      	adds	r2, r7, #4
 80134a8:	463b      	mov	r3, r7
 80134aa:	4611      	mov	r1, r2
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff ff43 	bl	8013338 <F_QEI_getspeed>

	// Calcul des erreurs
	l_errLeft  = g_cons_speed_left  - l_leftSpeed;
 80134b2:	4b8f      	ldr	r3, [pc, #572]	; (80136f0 <F_AUTO_SpeedRegulator+0x250>)
 80134b4:	ed93 7a00 	vldr	s14, [r3]
 80134b8:	edd7 7a00 	vldr	s15, [r7]
 80134bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134c0:	edc7 7a07 	vstr	s15, [r7, #28]
	l_errRigth = g_cons_speed_right - l_rightSpeed;
 80134c4:	4b8b      	ldr	r3, [pc, #556]	; (80136f4 <F_AUTO_SpeedRegulator+0x254>)
 80134c6:	ed93 7a00 	vldr	s14, [r3]
 80134ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80134ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134d2:	edc7 7a06 	vstr	s15, [r7, #24]

	l_errLeftDt  = l_errLeft - g_errLeftOld ;
 80134d6:	4b88      	ldr	r3, [pc, #544]	; (80136f8 <F_AUTO_SpeedRegulator+0x258>)
 80134d8:	edd3 7a00 	vldr	s15, [r3]
 80134dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80134e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134e4:	edc7 7a05 	vstr	s15, [r7, #20]
	l_errRigthDt = l_errRigth - g_errRightOld ;
 80134e8:	4b84      	ldr	r3, [pc, #528]	; (80136fc <F_AUTO_SpeedRegulator+0x25c>)
 80134ea:	edd3 7a00 	vldr	s15, [r3]
 80134ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80134f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134f6:	edc7 7a04 	vstr	s15, [r7, #16]

	g_errLeftSum  += l_errLeft  * g_enableAUTO ;//* g_obstacle_not;
 80134fa:	4b81      	ldr	r3, [pc, #516]	; (8013700 <F_AUTO_SpeedRegulator+0x260>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	ee07 3a90 	vmov	s15, r3
 8013502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013506:	edd7 7a07 	vldr	s15, [r7, #28]
 801350a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801350e:	4b7d      	ldr	r3, [pc, #500]	; (8013704 <F_AUTO_SpeedRegulator+0x264>)
 8013510:	edd3 7a00 	vldr	s15, [r3]
 8013514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013518:	4b7a      	ldr	r3, [pc, #488]	; (8013704 <F_AUTO_SpeedRegulator+0x264>)
 801351a:	edc3 7a00 	vstr	s15, [r3]
	g_errRightSum += l_errRigth * g_enableAUTO ;// * g_obstacle_not;
 801351e:	4b78      	ldr	r3, [pc, #480]	; (8013700 <F_AUTO_SpeedRegulator+0x260>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	ee07 3a90 	vmov	s15, r3
 8013526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801352a:	edd7 7a06 	vldr	s15, [r7, #24]
 801352e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013532:	4b75      	ldr	r3, [pc, #468]	; (8013708 <F_AUTO_SpeedRegulator+0x268>)
 8013534:	edd3 7a00 	vldr	s15, [r3]
 8013538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801353c:	4b72      	ldr	r3, [pc, #456]	; (8013708 <F_AUTO_SpeedRegulator+0x268>)
 801353e:	edc3 7a00 	vstr	s15, [r3]

	g_errLeftOld  = l_errLeft;
 8013542:	4a6d      	ldr	r2, [pc, #436]	; (80136f8 <F_AUTO_SpeedRegulator+0x258>)
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	6013      	str	r3, [r2, #0]
	g_errRightOld = l_errRigth;
 8013548:	4a6c      	ldr	r2, [pc, #432]	; (80136fc <F_AUTO_SpeedRegulator+0x25c>)
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	6013      	str	r3, [r2, #0]

	// Calcul de la commande

	l_cmd_left  = (l_errLeft  * KP_SPEED) + (g_errLeftSum  * KI_SPEED) + (l_errLeftDt  * KD_SPEED);
 801354e:	69f8      	ldr	r0, [r7, #28]
 8013550:	f7ed f802 	bl	8000558 <__aeabi_f2d>
 8013554:	a362      	add	r3, pc, #392	; (adr r3, 80136e0 <F_AUTO_SpeedRegulator+0x240>)
 8013556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355a:	f7ed f855 	bl	8000608 <__aeabi_dmul>
 801355e:	4603      	mov	r3, r0
 8013560:	460c      	mov	r4, r1
 8013562:	4625      	mov	r5, r4
 8013564:	461c      	mov	r4, r3
 8013566:	4b67      	ldr	r3, [pc, #412]	; (8013704 <F_AUTO_SpeedRegulator+0x264>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	4618      	mov	r0, r3
 801356c:	f7ec fff4 	bl	8000558 <__aeabi_f2d>
 8013570:	a35d      	add	r3, pc, #372	; (adr r3, 80136e8 <F_AUTO_SpeedRegulator+0x248>)
 8013572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013576:	f7ed f847 	bl	8000608 <__aeabi_dmul>
 801357a:	4602      	mov	r2, r0
 801357c:	460b      	mov	r3, r1
 801357e:	4620      	mov	r0, r4
 8013580:	4629      	mov	r1, r5
 8013582:	f7ec fe8b 	bl	800029c <__adddf3>
 8013586:	4603      	mov	r3, r0
 8013588:	460c      	mov	r4, r1
 801358a:	4625      	mov	r5, r4
 801358c:	461c      	mov	r4, r3
 801358e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013592:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 801370c <F_AUTO_SpeedRegulator+0x26c>
 8013596:	ee67 7a87 	vmul.f32	s15, s15, s14
 801359a:	ee17 0a90 	vmov	r0, s15
 801359e:	f7ec ffdb 	bl	8000558 <__aeabi_f2d>
 80135a2:	4602      	mov	r2, r0
 80135a4:	460b      	mov	r3, r1
 80135a6:	4620      	mov	r0, r4
 80135a8:	4629      	mov	r1, r5
 80135aa:	f7ec fe77 	bl	800029c <__adddf3>
 80135ae:	4603      	mov	r3, r0
 80135b0:	460c      	mov	r4, r1
 80135b2:	4618      	mov	r0, r3
 80135b4:	4621      	mov	r1, r4
 80135b6:	f7ed fa59 	bl	8000a6c <__aeabi_d2f>
 80135ba:	4603      	mov	r3, r0
 80135bc:	623b      	str	r3, [r7, #32]
	l_cmd_right = (l_errRigth * KP_SPEED) + (g_errRightSum * KI_SPEED) + (l_errRigthDt * KD_SPEED);
 80135be:	69b8      	ldr	r0, [r7, #24]
 80135c0:	f7ec ffca 	bl	8000558 <__aeabi_f2d>
 80135c4:	a346      	add	r3, pc, #280	; (adr r3, 80136e0 <F_AUTO_SpeedRegulator+0x240>)
 80135c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ca:	f7ed f81d 	bl	8000608 <__aeabi_dmul>
 80135ce:	4603      	mov	r3, r0
 80135d0:	460c      	mov	r4, r1
 80135d2:	4625      	mov	r5, r4
 80135d4:	461c      	mov	r4, r3
 80135d6:	4b4c      	ldr	r3, [pc, #304]	; (8013708 <F_AUTO_SpeedRegulator+0x268>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	4618      	mov	r0, r3
 80135dc:	f7ec ffbc 	bl	8000558 <__aeabi_f2d>
 80135e0:	a341      	add	r3, pc, #260	; (adr r3, 80136e8 <F_AUTO_SpeedRegulator+0x248>)
 80135e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e6:	f7ed f80f 	bl	8000608 <__aeabi_dmul>
 80135ea:	4602      	mov	r2, r0
 80135ec:	460b      	mov	r3, r1
 80135ee:	4620      	mov	r0, r4
 80135f0:	4629      	mov	r1, r5
 80135f2:	f7ec fe53 	bl	800029c <__adddf3>
 80135f6:	4603      	mov	r3, r0
 80135f8:	460c      	mov	r4, r1
 80135fa:	4625      	mov	r5, r4
 80135fc:	461c      	mov	r4, r3
 80135fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8013602:	ed9f 7a42 	vldr	s14, [pc, #264]	; 801370c <F_AUTO_SpeedRegulator+0x26c>
 8013606:	ee67 7a87 	vmul.f32	s15, s15, s14
 801360a:	ee17 0a90 	vmov	r0, s15
 801360e:	f7ec ffa3 	bl	8000558 <__aeabi_f2d>
 8013612:	4602      	mov	r2, r0
 8013614:	460b      	mov	r3, r1
 8013616:	4620      	mov	r0, r4
 8013618:	4629      	mov	r1, r5
 801361a:	f7ec fe3f 	bl	800029c <__adddf3>
 801361e:	4603      	mov	r3, r0
 8013620:	460c      	mov	r4, r1
 8013622:	4618      	mov	r0, r3
 8013624:	4621      	mov	r1, r4
 8013626:	f7ed fa21 	bl	8000a6c <__aeabi_d2f>
 801362a:	4603      	mov	r3, r0
 801362c:	627b      	str	r3, [r7, #36]	; 0x24

	// Gestion de l'acceleration
	l_cmd_right_dV = l_cmd_right - g_cmd_right_old ;
 801362e:	4b38      	ldr	r3, [pc, #224]	; (8013710 <F_AUTO_SpeedRegulator+0x270>)
 8013630:	edd3 7a00 	vldr	s15, [r3]
 8013634:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013638:	ee77 7a67 	vsub.f32	s15, s14, s15
 801363c:	edc7 7a03 	vstr	s15, [r7, #12]
	l_cmd_left_dV  = l_cmd_left  - g_cmd_left_old  ;
 8013640:	4b34      	ldr	r3, [pc, #208]	; (8013714 <F_AUTO_SpeedRegulator+0x274>)
 8013642:	edd3 7a00 	vldr	s15, [r3]
 8013646:	ed97 7a08 	vldr	s14, [r7, #32]
 801364a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801364e:	edc7 7a02 	vstr	s15, [r7, #8]
	g_cmd_left_old  = l_cmd_left ;
 8013652:	4a30      	ldr	r2, [pc, #192]	; (8013714 <F_AUTO_SpeedRegulator+0x274>)
 8013654:	6a3b      	ldr	r3, [r7, #32]
 8013656:	6013      	str	r3, [r2, #0]
	g_cmd_right_old = l_cmd_right;
 8013658:	4a2d      	ldr	r2, [pc, #180]	; (8013710 <F_AUTO_SpeedRegulator+0x270>)
 801365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365c:	6013      	str	r3, [r2, #0]
	if(l_cmd_right_dV > DV_MAX) l_cmd_right += DV_MAX ;
 801365e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013662:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013666:	eef4 7ac7 	vcmpe.f32	s15, s14
 801366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801366e:	dd07      	ble.n	8013680 <F_AUTO_SpeedRegulator+0x1e0>
 8013670:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013674:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013678:	ee77 7a87 	vadd.f32	s15, s15, s14
 801367c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(l_cmd_left_dV  > DV_MAX) l_cmd_left  += DV_MAX ;
 8013680:	edd7 7a02 	vldr	s15, [r7, #8]
 8013684:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013688:	eef4 7ac7 	vcmpe.f32	s15, s14
 801368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013690:	dd07      	ble.n	80136a2 <F_AUTO_SpeedRegulator+0x202>
 8013692:	edd7 7a08 	vldr	s15, [r7, #32]
 8013696:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801369a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801369e:	edc7 7a08 	vstr	s15, [r7, #32]

	// Application de la commande
	if(g_enableAUTO==0){//|| (g_obstacle_not==0 && token!=REG_TETA) ){
 80136a2:	4b17      	ldr	r3, [pc, #92]	; (8013700 <F_AUTO_SpeedRegulator+0x260>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d106      	bne.n	80136b8 <F_AUTO_SpeedRegulator+0x218>
		F_PWM_SetCmdMotorGauche( 0 );
 80136aa:	2000      	movs	r0, #0
 80136ac:	f7ff fcba 	bl	8013024 <F_PWM_SetCmdMotorGauche>
		F_PWM_SetCmdMotorDroit( 0 );
 80136b0:	2000      	movs	r0, #0
 80136b2:	f7ff fc8e 	bl	8012fd2 <F_PWM_SetCmdMotorDroit>
	}else{
		F_PWM_SetCmdMotorGauche((int)l_cmd_left);
		F_PWM_SetCmdMotorDroit((int)l_cmd_right);
	}
}
 80136b6:	e00f      	b.n	80136d8 <F_AUTO_SpeedRegulator+0x238>
		F_PWM_SetCmdMotorGauche((int)l_cmd_left);
 80136b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80136bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136c0:	ee17 0a90 	vmov	r0, s15
 80136c4:	f7ff fcae 	bl	8013024 <F_PWM_SetCmdMotorGauche>
		F_PWM_SetCmdMotorDroit((int)l_cmd_right);
 80136c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80136cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136d0:	ee17 0a90 	vmov	r0, s15
 80136d4:	f7ff fc7d 	bl	8012fd2 <F_PWM_SetCmdMotorDroit>
}
 80136d8:	bf00      	nop
 80136da:	3728      	adds	r7, #40	; 0x28
 80136dc:	46bd      	mov	sp, r7
 80136de:	bdb0      	pop	{r4, r5, r7, pc}
 80136e0:	9999999a 	.word	0x9999999a
 80136e4:	3fb99999 	.word	0x3fb99999
 80136e8:	47ae147b 	.word	0x47ae147b
 80136ec:	3fa47ae1 	.word	0x3fa47ae1
 80136f0:	20000398 	.word	0x20000398
 80136f4:	20000394 	.word	0x20000394
 80136f8:	200003b0 	.word	0x200003b0
 80136fc:	200003ac 	.word	0x200003ac
 8013700:	2000038c 	.word	0x2000038c
 8013704:	200003a8 	.word	0x200003a8
 8013708:	200003a4 	.word	0x200003a4
 801370c:	00000000 	.word	0x00000000
 8013710:	2000039c 	.word	0x2000039c
 8013714:	200003a0 	.word	0x200003a0

08013718 <F_AUTO_PositionRegulator>:
	F_AUTO_Normalise(&g_cons_speed_right, &g_cons_speed_left,V_MAX);
}
/*
 * Position regulator called in Timer 10 interrupt
 */
void F_AUTO_PositionRegulator(void){
 8013718:	b590      	push	{r4, r7, lr}
 801371a:	ed2d 8b02 	vpush	{d8}
 801371e:	b089      	sub	sp, #36	; 0x24
 8013720:	af00      	add	r7, sp, #0
	// Variables local
	float l_errT;		// Angular error
	float l_errT_D;		// Angular error evolution
	float l_errD=0;		// Distance error
 8013722:	f04f 0300 	mov.w	r3, #0
 8013726:	61fb      	str	r3, [r7, #28]
	float l_angularReg;	// Sum of proportional, derivative and integral terms of angular error
	float l_distanceReg;// Sum of proportional, derivative and integral terms of distance error
	float l_cap;		// Cape needed to join the following point
	float l_ralentissement=0;
 8013728:	f04f 0300 	mov.w	r3, #0
 801372c:	61bb      	str	r3, [r7, #24]

	switch(token){
 801372e:	4bc4      	ldr	r3, [pc, #784]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	3b01      	subs	r3, #1
 8013734:	2b05      	cmp	r3, #5
 8013736:	f200 8207 	bhi.w	8013b48 <F_AUTO_PositionRegulator+0x430>
 801373a:	a201      	add	r2, pc, #4	; (adr r2, 8013740 <F_AUTO_PositionRegulator+0x28>)
 801373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013740:	08013783 	.word	0x08013783
 8013744:	080137e9 	.word	0x080137e9
 8013748:	080139d3 	.word	0x080139d3
 801374c:	08013b37 	.word	0x08013b37
 8013750:	08013b49 	.word	0x08013b49
 8013754:	08013759 	.word	0x08013759
		case WAIT_LOOP: // Attente de l'activation de g_enableAuto
			if(g_enableAUTO==1 && g_nbPoints!=0){
 8013758:	4bba      	ldr	r3, [pc, #744]	; (8013a44 <F_AUTO_PositionRegulator+0x32c>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	2b01      	cmp	r3, #1
 801375e:	d107      	bne.n	8013770 <F_AUTO_PositionRegulator+0x58>
 8013760:	4bb9      	ldr	r3, [pc, #740]	; (8013a48 <F_AUTO_PositionRegulator+0x330>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d003      	beq.n	8013770 <F_AUTO_PositionRegulator+0x58>
				token=REG_CAP_DIST;
 8013768:	4bb5      	ldr	r3, [pc, #724]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 801376a:	2202      	movs	r2, #2
 801376c:	601a      	str	r2, [r3, #0]
			}else{
				g_cons_speed_right = 0 ;
				g_cons_speed_left  = 0 ;
			}
			break;
 801376e:	e1f4      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
				g_cons_speed_right = 0 ;
 8013770:	4bb6      	ldr	r3, [pc, #728]	; (8013a4c <F_AUTO_PositionRegulator+0x334>)
 8013772:	f04f 0200 	mov.w	r2, #0
 8013776:	601a      	str	r2, [r3, #0]
				g_cons_speed_left  = 0 ;
 8013778:	4bb5      	ldr	r3, [pc, #724]	; (8013a50 <F_AUTO_PositionRegulator+0x338>)
 801377a:	f04f 0200 	mov.w	r2, #0
 801377e:	601a      	str	r2, [r3, #0]
			break;
 8013780:	e1eb      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
		case NEXT_POINT: // Passage au point suivant

			if(g_i_point == (g_nbPoints-1) ){	// j'ai atteint le dernier point
 8013782:	4bb1      	ldr	r3, [pc, #708]	; (8013a48 <F_AUTO_PositionRegulator+0x330>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	1e5a      	subs	r2, r3, #1
 8013788:	4bb2      	ldr	r3, [pc, #712]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	429a      	cmp	r2, r3
 801378e:	d10a      	bne.n	80137a6 <F_AUTO_PositionRegulator+0x8e>
				printf("AUTO__Pos OK \n\r");
 8013790:	48b1      	ldr	r0, [pc, #708]	; (8013a58 <F_AUTO_PositionRegulator+0x340>)
 8013792:	f003 fc3b 	bl	801700c <iprintf>
				g_tetaSum=0;
 8013796:	4bb1      	ldr	r3, [pc, #708]	; (8013a5c <F_AUTO_PositionRegulator+0x344>)
 8013798:	f04f 0200 	mov.w	r2, #0
 801379c:	601a      	str	r2, [r3, #0]
				token = REG_TETA;
 801379e:	4ba8      	ldr	r3, [pc, #672]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 80137a0:	2203      	movs	r2, #3
 80137a2:	601a      	str	r2, [r3, #0]
 80137a4:	e017      	b.n	80137d6 <F_AUTO_PositionRegulator+0xbe>
			}else{
				if(g_enableAUTO) g_i_point ++ ;				// Je passe au point suivant
 80137a6:	4ba7      	ldr	r3, [pc, #668]	; (8013a44 <F_AUTO_PositionRegulator+0x32c>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d004      	beq.n	80137b8 <F_AUTO_PositionRegulator+0xa0>
 80137ae:	4ba9      	ldr	r3, [pc, #676]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	3301      	adds	r3, #1
 80137b4:	4aa7      	ldr	r2, [pc, #668]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 80137b6:	6013      	str	r3, [r2, #0]
				if(g_i_point !=0) printf("AUTO__Idx : %d NbPts : %d\n\r",g_i_point,g_nbPoints);
 80137b8:	4ba6      	ldr	r3, [pc, #664]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d007      	beq.n	80137d0 <F_AUTO_PositionRegulator+0xb8>
 80137c0:	4ba4      	ldr	r3, [pc, #656]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 80137c2:	6819      	ldr	r1, [r3, #0]
 80137c4:	4ba0      	ldr	r3, [pc, #640]	; (8013a48 <F_AUTO_PositionRegulator+0x330>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	461a      	mov	r2, r3
 80137ca:	48a5      	ldr	r0, [pc, #660]	; (8013a60 <F_AUTO_PositionRegulator+0x348>)
 80137cc:	f003 fc1e 	bl	801700c <iprintf>
				token = REG_CAP_DIST;
 80137d0:	4b9b      	ldr	r3, [pc, #620]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 80137d2:	2202      	movs	r2, #2
 80137d4:	601a      	str	r2, [r3, #0]
			}

			if(g_enableAUTO==0) token = WAIT_LOOP;
 80137d6:	4b9b      	ldr	r3, [pc, #620]	; (8013a44 <F_AUTO_PositionRegulator+0x32c>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f040 81b8 	bne.w	8013b50 <F_AUTO_PositionRegulator+0x438>
 80137e0:	4b97      	ldr	r3, [pc, #604]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 80137e2:	2206      	movs	r2, #6
 80137e4:	601a      	str	r2, [r3, #0]
			break;
 80137e6:	e1b3      	b.n	8013b50 <F_AUTO_PositionRegulator+0x438>

		case REG_CAP_DIST: // Regulation en cap et avance

			// #### Est-ce que je suis arrivé ? ####
			if( F_AUTO_DistanceAvantPoint() < 10 ){
 80137e8:	f000 fa46 	bl	8013c78 <F_AUTO_DistanceAvantPoint>
 80137ec:	eeb0 7a40 	vmov.f32	s14, s0
 80137f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80137f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fc:	d50f      	bpl.n	801381e <F_AUTO_PositionRegulator+0x106>
				g_tetaSum=0;
 80137fe:	4b97      	ldr	r3, [pc, #604]	; (8013a5c <F_AUTO_PositionRegulator+0x344>)
 8013800:	f04f 0200 	mov.w	r2, #0
 8013804:	601a      	str	r2, [r3, #0]
				g_errT_old=0;
 8013806:	4b97      	ldr	r3, [pc, #604]	; (8013a64 <F_AUTO_PositionRegulator+0x34c>)
 8013808:	f04f 0200 	mov.w	r2, #0
 801380c:	601a      	str	r2, [r3, #0]
				g_distSum=0;
 801380e:	4b96      	ldr	r3, [pc, #600]	; (8013a68 <F_AUTO_PositionRegulator+0x350>)
 8013810:	f04f 0200 	mov.w	r2, #0
 8013814:	601a      	str	r2, [r3, #0]

				token = NEXT_POINT;
 8013816:	4b8a      	ldr	r3, [pc, #552]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 8013818:	2201      	movs	r2, #1
 801381a:	601a      	str	r2, [r3, #0]
				break;
 801381c:	e19d      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
			}
			// #### Je ne suis pas arrivé ####

			// Gestion de l'angle
			l_cap = atan2f(consigne[g_i_point].y - g_estimate.y , consigne[g_i_point].x - g_estimate.x);
 801381e:	4b8d      	ldr	r3, [pc, #564]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 8013820:	681a      	ldr	r2, [r3, #0]
 8013822:	4992      	ldr	r1, [pc, #584]	; (8013a6c <F_AUTO_PositionRegulator+0x354>)
 8013824:	4613      	mov	r3, r2
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	4413      	add	r3, r2
 801382a:	009b      	lsls	r3, r3, #2
 801382c:	440b      	add	r3, r1
 801382e:	3304      	adds	r3, #4
 8013830:	ed93 7a00 	vldr	s14, [r3]
 8013834:	4b8e      	ldr	r3, [pc, #568]	; (8013a70 <F_AUTO_PositionRegulator+0x358>)
 8013836:	edd3 7a01 	vldr	s15, [r3, #4]
 801383a:	ee77 6a67 	vsub.f32	s13, s14, s15
 801383e:	4b85      	ldr	r3, [pc, #532]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	498a      	ldr	r1, [pc, #552]	; (8013a6c <F_AUTO_PositionRegulator+0x354>)
 8013844:	4613      	mov	r3, r2
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	4413      	add	r3, r2
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	440b      	add	r3, r1
 801384e:	ed93 7a00 	vldr	s14, [r3]
 8013852:	4b87      	ldr	r3, [pc, #540]	; (8013a70 <F_AUTO_PositionRegulator+0x358>)
 8013854:	edd3 7a00 	vldr	s15, [r3]
 8013858:	ee77 7a67 	vsub.f32	s15, s14, s15
 801385c:	eef0 0a67 	vmov.f32	s1, s15
 8013860:	eeb0 0a66 	vmov.f32	s0, s13
 8013864:	f004 fc2c 	bl	80180c0 <atan2f>
 8013868:	ed87 0a03 	vstr	s0, [r7, #12]
			l_errT = l_cap - g_estimate.teta ;	// Cape error calculating
 801386c:	4b80      	ldr	r3, [pc, #512]	; (8013a70 <F_AUTO_PositionRegulator+0x358>)
 801386e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013872:	ed97 7a03 	vldr	s14, [r7, #12]
 8013876:	ee77 7a67 	vsub.f32	s15, s14, s15
 801387a:	edc7 7a01 	vstr	s15, [r7, #4]
			F_Math_ModuloPi(&l_errT) ;
 801387e:	1d3b      	adds	r3, r7, #4
 8013880:	4618      	mov	r0, r3
 8013882:	f000 fb9f 	bl	8013fc4 <F_Math_ModuloPi>

			l_errT_D   = l_errT - g_errT_old;		// Derivative
 8013886:	ed97 7a01 	vldr	s14, [r7, #4]
 801388a:	4b76      	ldr	r3, [pc, #472]	; (8013a64 <F_AUTO_PositionRegulator+0x34c>)
 801388c:	edd3 7a00 	vldr	s15, [r3]
 8013890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013894:	edc7 7a05 	vstr	s15, [r7, #20]
			g_tetaSum += l_errT * g_enableAUTO * g_obstacle_not;		// Update sum
 8013898:	4b6a      	ldr	r3, [pc, #424]	; (8013a44 <F_AUTO_PositionRegulator+0x32c>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	ee07 3a90 	vmov	s15, r3
 80138a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80138a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80138a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138ac:	4b71      	ldr	r3, [pc, #452]	; (8013a74 <F_AUTO_PositionRegulator+0x35c>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	ee07 3a90 	vmov	s15, r3
 80138b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138bc:	4b67      	ldr	r3, [pc, #412]	; (8013a5c <F_AUTO_PositionRegulator+0x344>)
 80138be:	edd3 7a00 	vldr	s15, [r3]
 80138c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138c6:	4b65      	ldr	r3, [pc, #404]	; (8013a5c <F_AUTO_PositionRegulator+0x344>)
 80138c8:	edc3 7a00 	vstr	s15, [r3]
			g_errT_old = l_errT;					// Save value
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a65      	ldr	r2, [pc, #404]	; (8013a64 <F_AUTO_PositionRegulator+0x34c>)
 80138d0:	6013      	str	r3, [r2, #0]

			// Gestion de la distance
			l_ralentissement = ( F_Math_Abs(l_errT)/PI ) * V_MAX * 8 ;
 80138d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80138d6:	eeb0 0a67 	vmov.f32	s0, s15
 80138da:	f000 fb93 	bl	8014004 <F_Math_Abs>
 80138de:	ee10 3a10 	vmov	r3, s0
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7ec fe38 	bl	8000558 <__aeabi_f2d>
 80138e8:	a353      	add	r3, pc, #332	; (adr r3, 8013a38 <F_AUTO_PositionRegulator+0x320>)
 80138ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ee:	f7ec ffb5 	bl	800085c <__aeabi_ddiv>
 80138f2:	4603      	mov	r3, r0
 80138f4:	460c      	mov	r4, r1
 80138f6:	4618      	mov	r0, r3
 80138f8:	4621      	mov	r1, r4
 80138fa:	f04f 0200 	mov.w	r2, #0
 80138fe:	4b5e      	ldr	r3, [pc, #376]	; (8013a78 <F_AUTO_PositionRegulator+0x360>)
 8013900:	f7ec fe82 	bl	8000608 <__aeabi_dmul>
 8013904:	4603      	mov	r3, r0
 8013906:	460c      	mov	r4, r1
 8013908:	4618      	mov	r0, r3
 801390a:	4621      	mov	r1, r4
 801390c:	f04f 0200 	mov.w	r2, #0
 8013910:	4b5a      	ldr	r3, [pc, #360]	; (8013a7c <F_AUTO_PositionRegulator+0x364>)
 8013912:	f7ec fe79 	bl	8000608 <__aeabi_dmul>
 8013916:	4603      	mov	r3, r0
 8013918:	460c      	mov	r4, r1
 801391a:	4618      	mov	r0, r3
 801391c:	4621      	mov	r1, r4
 801391e:	f7ed f8a5 	bl	8000a6c <__aeabi_d2f>
 8013922:	4603      	mov	r3, r0
 8013924:	61bb      	str	r3, [r7, #24]
			l_errD = V_MAX;//KP_DIST_POS * F_AUTO_DistanceAvantCible() ;
 8013926:	4b56      	ldr	r3, [pc, #344]	; (8013a80 <F_AUTO_PositionRegulator+0x368>)
 8013928:	61fb      	str	r3, [r7, #28]

			if( l_errD > V_MAX){
 801392a:	edd7 7a07 	vldr	s15, [r7, #28]
 801392e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8013a84 <F_AUTO_PositionRegulator+0x36c>
 8013932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801393a:	dd01      	ble.n	8013940 <F_AUTO_PositionRegulator+0x228>
				l_errD = V_MAX;
 801393c:	4b50      	ldr	r3, [pc, #320]	; (8013a80 <F_AUTO_PositionRegulator+0x368>)
 801393e:	61fb      	str	r3, [r7, #28]
			}
			if(l_ralentissement > l_errD){
 8013940:	ed97 7a06 	vldr	s14, [r7, #24]
 8013944:	edd7 7a07 	vldr	s15, [r7, #28]
 8013948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013950:	dd01      	ble.n	8013956 <F_AUTO_PositionRegulator+0x23e>
				l_ralentissement = l_errD ;
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	61bb      	str	r3, [r7, #24]
			}

			l_errD = l_errD - l_ralentissement;
 8013956:	ed97 7a07 	vldr	s14, [r7, #28]
 801395a:	edd7 7a06 	vldr	s15, [r7, #24]
 801395e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013962:	edc7 7a07 	vstr	s15, [r7, #28]
			//g_distSum += l_errD * g_enableAUTO;		// Update sum

			// Calcul de la commande
			l_angularReg  = ( KP_TETA_POS * l_errT + KI_TETA_POS * g_tetaSum + KD_TETA_POS * l_errT_D ) ;
 8013966:	edd7 7a01 	vldr	s15, [r7, #4]
 801396a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013a88 <F_AUTO_PositionRegulator+0x370>
 801396e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013972:	4b3a      	ldr	r3, [pc, #232]	; (8013a5c <F_AUTO_PositionRegulator+0x344>)
 8013974:	edd3 7a00 	vldr	s15, [r3]
 8013978:	eddf 6a44 	vldr	s13, [pc, #272]	; 8013a8c <F_AUTO_PositionRegulator+0x374>
 801397c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013984:	edd7 7a05 	vldr	s15, [r7, #20]
 8013988:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013a8c <F_AUTO_PositionRegulator+0x374>
 801398c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013994:	edc7 7a04 	vstr	s15, [r7, #16]
			l_distanceReg = ( KP_DIST_POS * l_errD );//+ KI_DIST_POS * g_distSum) ;
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	60bb      	str	r3, [r7, #8]

			g_cons_speed_right = l_distanceReg + l_angularReg ;
 801399c:	ed97 7a02 	vldr	s14, [r7, #8]
 80139a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80139a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139a8:	4b28      	ldr	r3, [pc, #160]	; (8013a4c <F_AUTO_PositionRegulator+0x334>)
 80139aa:	edc3 7a00 	vstr	s15, [r3]
			g_cons_speed_left  = l_distanceReg - l_angularReg ;
 80139ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80139b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80139b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139ba:	4b25      	ldr	r3, [pc, #148]	; (8013a50 <F_AUTO_PositionRegulator+0x338>)
 80139bc:	edc3 7a00 	vstr	s15, [r3]

			if(g_enableAUTO==0) token = WAIT_LOOP;
 80139c0:	4b20      	ldr	r3, [pc, #128]	; (8013a44 <F_AUTO_PositionRegulator+0x32c>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	f040 80c5 	bne.w	8013b54 <F_AUTO_PositionRegulator+0x43c>
 80139ca:	4b1d      	ldr	r3, [pc, #116]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 80139cc:	2206      	movs	r2, #6
 80139ce:	601a      	str	r2, [r3, #0]
			break;
 80139d0:	e0c0      	b.n	8013b54 <F_AUTO_PositionRegulator+0x43c>

		case REG_TETA: // Regulation en teta

			l_errT =   consigne[g_i_point].teta - g_estimate.teta ;	// Theta error calculating
 80139d2:	4b20      	ldr	r3, [pc, #128]	; (8013a54 <F_AUTO_PositionRegulator+0x33c>)
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	4925      	ldr	r1, [pc, #148]	; (8013a6c <F_AUTO_PositionRegulator+0x354>)
 80139d8:	4613      	mov	r3, r2
 80139da:	005b      	lsls	r3, r3, #1
 80139dc:	4413      	add	r3, r2
 80139de:	009b      	lsls	r3, r3, #2
 80139e0:	440b      	add	r3, r1
 80139e2:	3308      	adds	r3, #8
 80139e4:	ed93 7a00 	vldr	s14, [r3]
 80139e8:	4b21      	ldr	r3, [pc, #132]	; (8013a70 <F_AUTO_PositionRegulator+0x358>)
 80139ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80139ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139f2:	edc7 7a01 	vstr	s15, [r7, #4]
			F_Math_ModuloPi(&l_errT);
 80139f6:	1d3b      	adds	r3, r7, #4
 80139f8:	4618      	mov	r0, r3
 80139fa:	f000 fae3 	bl	8013fc4 <F_Math_ModuloPi>

			if(F_Math_Abs(l_errT) < F_Math_toRad(1)){
 80139fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8013a02:	eeb0 0a67 	vmov.f32	s0, s15
 8013a06:	f000 fafd 	bl	8014004 <F_Math_Abs>
 8013a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8013a0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013a12:	f000 faa1 	bl	8013f58 <F_Math_toRad>
 8013a16:	eef0 7a40 	vmov.f32	s15, s0
 8013a1a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a22:	d537      	bpl.n	8013a94 <F_AUTO_PositionRegulator+0x37c>
				printf("AUTO__Teta OK \n\r");
 8013a24:	481a      	ldr	r0, [pc, #104]	; (8013a90 <F_AUTO_PositionRegulator+0x378>)
 8013a26:	f003 faf1 	bl	801700c <iprintf>
				token = REG_TARGET_OK;
 8013a2a:	4b05      	ldr	r3, [pc, #20]	; (8013a40 <F_AUTO_PositionRegulator+0x328>)
 8013a2c:	2204      	movs	r2, #4
 8013a2e:	601a      	str	r2, [r3, #0]
				break;
 8013a30:	e093      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
 8013a32:	bf00      	nop
 8013a34:	f3af 8000 	nop.w
 8013a38:	5a7ed197 	.word	0x5a7ed197
 8013a3c:	400921fb 	.word	0x400921fb
 8013a40:	200003c8 	.word	0x200003c8
 8013a44:	2000038c 	.word	0x2000038c
 8013a48:	200003c4 	.word	0x200003c4
 8013a4c:	20000394 	.word	0x20000394
 8013a50:	20000398 	.word	0x20000398
 8013a54:	200003c0 	.word	0x200003c0
 8013a58:	0801b020 	.word	0x0801b020
 8013a5c:	200003b4 	.word	0x200003b4
 8013a60:	0801b030 	.word	0x0801b030
 8013a64:	200003b8 	.word	0x200003b8
 8013a68:	200003bc 	.word	0x200003bc
 8013a6c:	20003994 	.word	0x20003994
 8013a70:	20003988 	.word	0x20003988
 8013a74:	20000390 	.word	0x20000390
 8013a78:	40590000 	.word	0x40590000
 8013a7c:	40200000 	.word	0x40200000
 8013a80:	42c80000 	.word	0x42c80000
 8013a84:	42c80000 	.word	0x42c80000
 8013a88:	43480000 	.word	0x43480000
 8013a8c:	00000000 	.word	0x00000000
 8013a90:	0801b04c 	.word	0x0801b04c
			}

			l_errT_D   = l_errT - g_errT_old;		// Derivative
 8013a94:	ed97 7a01 	vldr	s14, [r7, #4]
 8013a98:	4b36      	ldr	r3, [pc, #216]	; (8013b74 <F_AUTO_PositionRegulator+0x45c>)
 8013a9a:	edd3 7a00 	vldr	s15, [r3]
 8013a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013aa2:	edc7 7a05 	vstr	s15, [r7, #20]
			g_tetaSum += l_errT * g_enableAUTO * g_obstacle_not;		// Update sum
 8013aa6:	4b34      	ldr	r3, [pc, #208]	; (8013b78 <F_AUTO_PositionRegulator+0x460>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	ee07 3a90 	vmov	s15, r3
 8013aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8013ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013aba:	4b30      	ldr	r3, [pc, #192]	; (8013b7c <F_AUTO_PositionRegulator+0x464>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	ee07 3a90 	vmov	s15, r3
 8013ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013aca:	4b2d      	ldr	r3, [pc, #180]	; (8013b80 <F_AUTO_PositionRegulator+0x468>)
 8013acc:	edd3 7a00 	vldr	s15, [r3]
 8013ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ad4:	4b2a      	ldr	r3, [pc, #168]	; (8013b80 <F_AUTO_PositionRegulator+0x468>)
 8013ad6:	edc3 7a00 	vstr	s15, [r3]
			g_errT_old = l_errT;					// Save value
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4a25      	ldr	r2, [pc, #148]	; (8013b74 <F_AUTO_PositionRegulator+0x45c>)
 8013ade:	6013      	str	r3, [r2, #0]

			// Calcul de la commande
			l_angularReg  = ( KP_TETA_POS * l_errT + KI_TETA_POS * g_tetaSum + KD_TETA_POS * l_errT_D ) ;
 8013ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8013ae4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013b84 <F_AUTO_PositionRegulator+0x46c>
 8013ae8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013aec:	4b24      	ldr	r3, [pc, #144]	; (8013b80 <F_AUTO_PositionRegulator+0x468>)
 8013aee:	edd3 7a00 	vldr	s15, [r3]
 8013af2:	eddf 6a25 	vldr	s13, [pc, #148]	; 8013b88 <F_AUTO_PositionRegulator+0x470>
 8013af6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8013b02:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013b88 <F_AUTO_PositionRegulator+0x470>
 8013b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b0e:	edc7 7a04 	vstr	s15, [r7, #16]

			g_cons_speed_right =  l_angularReg ;
 8013b12:	4a1e      	ldr	r2, [pc, #120]	; (8013b8c <F_AUTO_PositionRegulator+0x474>)
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	6013      	str	r3, [r2, #0]
			g_cons_speed_left  = -l_angularReg ;
 8013b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8013b1c:	eef1 7a67 	vneg.f32	s15, s15
 8013b20:	4b1b      	ldr	r3, [pc, #108]	; (8013b90 <F_AUTO_PositionRegulator+0x478>)
 8013b22:	edc3 7a00 	vstr	s15, [r3]

			if(g_enableAUTO==0) token = WAIT_LOOP;
 8013b26:	4b14      	ldr	r3, [pc, #80]	; (8013b78 <F_AUTO_PositionRegulator+0x460>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d114      	bne.n	8013b58 <F_AUTO_PositionRegulator+0x440>
 8013b2e:	4b19      	ldr	r3, [pc, #100]	; (8013b94 <F_AUTO_PositionRegulator+0x47c>)
 8013b30:	2206      	movs	r2, #6
 8013b32:	601a      	str	r2, [r3, #0]
			break;
 8013b34:	e010      	b.n	8013b58 <F_AUTO_PositionRegulator+0x440>

		case REG_TARGET_OK:// Je suis arrivé
			F_AUTO_ResetTargetList();
 8013b36:	f000 f893 	bl	8013c60 <F_AUTO_ResetTargetList>
			g_i_point=0;
 8013b3a:	4b17      	ldr	r3, [pc, #92]	; (8013b98 <F_AUTO_PositionRegulator+0x480>)
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	601a      	str	r2, [r3, #0]
			token = WAIT_LOOP;
 8013b40:	4b14      	ldr	r3, [pc, #80]	; (8013b94 <F_AUTO_PositionRegulator+0x47c>)
 8013b42:	2206      	movs	r2, #6
 8013b44:	601a      	str	r2, [r3, #0]
			break;
 8013b46:	e008      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
		default: // Error go to state 1;
			token = WAIT_LOOP;
 8013b48:	4b12      	ldr	r3, [pc, #72]	; (8013b94 <F_AUTO_PositionRegulator+0x47c>)
 8013b4a:	2206      	movs	r2, #6
 8013b4c:	601a      	str	r2, [r3, #0]
 8013b4e:	e004      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
			break;
 8013b50:	bf00      	nop
 8013b52:	e002      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
			break;
 8013b54:	bf00      	nop
 8013b56:	e000      	b.n	8013b5a <F_AUTO_PositionRegulator+0x442>
			break;
 8013b58:	bf00      	nop
	}

	F_AUTO_Normalise(&g_cons_speed_left,&g_cons_speed_right,V_MAX);
 8013b5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8013b9c <F_AUTO_PositionRegulator+0x484>
 8013b5e:	490b      	ldr	r1, [pc, #44]	; (8013b8c <F_AUTO_PositionRegulator+0x474>)
 8013b60:	480b      	ldr	r0, [pc, #44]	; (8013b90 <F_AUTO_PositionRegulator+0x478>)
 8013b62:	f000 f973 	bl	8013e4c <F_AUTO_Normalise>

}
 8013b66:	bf00      	nop
 8013b68:	3724      	adds	r7, #36	; 0x24
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	ecbd 8b02 	vpop	{d8}
 8013b70:	bd90      	pop	{r4, r7, pc}
 8013b72:	bf00      	nop
 8013b74:	200003b8 	.word	0x200003b8
 8013b78:	2000038c 	.word	0x2000038c
 8013b7c:	20000390 	.word	0x20000390
 8013b80:	200003b4 	.word	0x200003b4
 8013b84:	43480000 	.word	0x43480000
 8013b88:	00000000 	.word	0x00000000
 8013b8c:	20000394 	.word	0x20000394
 8013b90:	20000398 	.word	0x20000398
 8013b94:	200003c8 	.word	0x200003c8
 8013b98:	200003c0 	.word	0x200003c0
 8013b9c:	42c80000 	.word	0x42c80000

08013ba0 <F_AUTO_AddTargetPoint>:
	return returnCode;
}
/*
 * Add point trajectory
 */
uint8_t F_AUTO_AddTargetPoint(float x_mm , float y_mm, float angle_deg){
 8013ba0:	b590      	push	{r4, r7, lr}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	ed87 0a03 	vstr	s0, [r7, #12]
 8013baa:	edc7 0a02 	vstr	s1, [r7, #8]
 8013bae:	ed87 1a01 	vstr	s2, [r7, #4]
		//y_mm= -y_mm;
	if(g_nbPoints<NB_POINT_MAX){
 8013bb2:	4b27      	ldr	r3, [pc, #156]	; (8013c50 <F_AUTO_AddTargetPoint+0xb0>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2bfd      	cmp	r3, #253	; 0xfd
 8013bb8:	dc42      	bgt.n	8013c40 <F_AUTO_AddTargetPoint+0xa0>
		angle_deg=F_Math_toRad(angle_deg);
 8013bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8013bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8013bc2:	f000 f9c9 	bl	8013f58 <F_Math_toRad>
 8013bc6:	eef0 7a40 	vmov.f32	s15, s0
 8013bca:	edc7 7a01 	vstr	s15, [r7, #4]
		F_Math_ModuloPi(&angle_deg);
 8013bce:	1d3b      	adds	r3, r7, #4
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f000 f9f7 	bl	8013fc4 <F_Math_ModuloPi>

		consigne[g_nbPoints].x = x_mm;
 8013bd6:	4b1e      	ldr	r3, [pc, #120]	; (8013c50 <F_AUTO_AddTargetPoint+0xb0>)
 8013bd8:	681a      	ldr	r2, [r3, #0]
 8013bda:	491e      	ldr	r1, [pc, #120]	; (8013c54 <F_AUTO_AddTargetPoint+0xb4>)
 8013bdc:	4613      	mov	r3, r2
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	4413      	add	r3, r2
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	440b      	add	r3, r1
 8013be6:	68fa      	ldr	r2, [r7, #12]
 8013be8:	601a      	str	r2, [r3, #0]
		consigne[g_nbPoints].y = y_mm;
 8013bea:	4b19      	ldr	r3, [pc, #100]	; (8013c50 <F_AUTO_AddTargetPoint+0xb0>)
 8013bec:	681a      	ldr	r2, [r3, #0]
 8013bee:	4919      	ldr	r1, [pc, #100]	; (8013c54 <F_AUTO_AddTargetPoint+0xb4>)
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	005b      	lsls	r3, r3, #1
 8013bf4:	4413      	add	r3, r2
 8013bf6:	009b      	lsls	r3, r3, #2
 8013bf8:	440b      	add	r3, r1
 8013bfa:	3304      	adds	r3, #4
 8013bfc:	68ba      	ldr	r2, [r7, #8]
 8013bfe:	601a      	str	r2, [r3, #0]
		consigne[g_nbPoints].teta = angle_deg;
 8013c00:	4b13      	ldr	r3, [pc, #76]	; (8013c50 <F_AUTO_AddTargetPoint+0xb0>)
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	6879      	ldr	r1, [r7, #4]
 8013c06:	4813      	ldr	r0, [pc, #76]	; (8013c54 <F_AUTO_AddTargetPoint+0xb4>)
 8013c08:	4613      	mov	r3, r2
 8013c0a:	005b      	lsls	r3, r3, #1
 8013c0c:	4413      	add	r3, r2
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	4403      	add	r3, r0
 8013c12:	3308      	adds	r3, #8
 8013c14:	6019      	str	r1, [r3, #0]

		g_nbPoints++;
 8013c16:	4b0e      	ldr	r3, [pc, #56]	; (8013c50 <F_AUTO_AddTargetPoint+0xb0>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	4a0c      	ldr	r2, [pc, #48]	; (8013c50 <F_AUTO_AddTargetPoint+0xb0>)
 8013c1e:	6013      	str	r3, [r2, #0]
		printf("AUTO: AddPt: Nb de point = %d Dist tot = %d \n\r",g_nbPoints,(int)F_AUTO_DistanceAvantCible());
 8013c20:	4b0b      	ldr	r3, [pc, #44]	; (8013c50 <F_AUTO_AddTargetPoint+0xb0>)
 8013c22:	681c      	ldr	r4, [r3, #0]
 8013c24:	f000 f870 	bl	8013d08 <F_AUTO_DistanceAvantCible>
 8013c28:	eef0 7a40 	vmov.f32	s15, s0
 8013c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c30:	ee17 2a90 	vmov	r2, s15
 8013c34:	4621      	mov	r1, r4
 8013c36:	4808      	ldr	r0, [pc, #32]	; (8013c58 <F_AUTO_AddTargetPoint+0xb8>)
 8013c38:	f003 f9e8 	bl	801700c <iprintf>
		return STATUS_AUTO_OK;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	e003      	b.n	8013c48 <F_AUTO_AddTargetPoint+0xa8>
	}else{
		printf("AUTO: AddPt: Erreur nb de pts trop important \n\r");
 8013c40:	4806      	ldr	r0, [pc, #24]	; (8013c5c <F_AUTO_AddTargetPoint+0xbc>)
 8013c42:	f003 f9e3 	bl	801700c <iprintf>
		return STATUS_AUTO_ERROR;
 8013c46:	2301      	movs	r3, #1
	}
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3714      	adds	r7, #20
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd90      	pop	{r4, r7, pc}
 8013c50:	200003c4 	.word	0x200003c4
 8013c54:	20003994 	.word	0x20003994
 8013c58:	0801b060 	.word	0x0801b060
 8013c5c:	0801b090 	.word	0x0801b090

08013c60 <F_AUTO_ResetTargetList>:
/*
 *
 */
void F_AUTO_ResetTargetList(void){
 8013c60:	b480      	push	{r7}
 8013c62:	af00      	add	r7, sp, #0
	g_nbPoints=0;
 8013c64:	4b03      	ldr	r3, [pc, #12]	; (8013c74 <F_AUTO_ResetTargetList+0x14>)
 8013c66:	2200      	movs	r2, #0
 8013c68:	601a      	str	r2, [r3, #0]
}
 8013c6a:	bf00      	nop
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr
 8013c74:	200003c4 	.word	0x200003c4

08013c78 <F_AUTO_DistanceAvantPoint>:
/*
 *
 */
float F_AUTO_DistanceAvantPoint(){
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b084      	sub	sp, #16
 8013c7c:	af00      	add	r7, sp, #0
	float a = g_estimate.x - consigne[g_i_point].x;
 8013c7e:	4b1f      	ldr	r3, [pc, #124]	; (8013cfc <F_AUTO_DistanceAvantPoint+0x84>)
 8013c80:	ed93 7a00 	vldr	s14, [r3]
 8013c84:	4b1e      	ldr	r3, [pc, #120]	; (8013d00 <F_AUTO_DistanceAvantPoint+0x88>)
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	491e      	ldr	r1, [pc, #120]	; (8013d04 <F_AUTO_DistanceAvantPoint+0x8c>)
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	005b      	lsls	r3, r3, #1
 8013c8e:	4413      	add	r3, r2
 8013c90:	009b      	lsls	r3, r3, #2
 8013c92:	440b      	add	r3, r1
 8013c94:	edd3 7a00 	vldr	s15, [r3]
 8013c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c9c:	edc7 7a03 	vstr	s15, [r7, #12]
	float b = g_estimate.y - consigne[g_i_point].y;
 8013ca0:	4b16      	ldr	r3, [pc, #88]	; (8013cfc <F_AUTO_DistanceAvantPoint+0x84>)
 8013ca2:	ed93 7a01 	vldr	s14, [r3, #4]
 8013ca6:	4b16      	ldr	r3, [pc, #88]	; (8013d00 <F_AUTO_DistanceAvantPoint+0x88>)
 8013ca8:	681a      	ldr	r2, [r3, #0]
 8013caa:	4916      	ldr	r1, [pc, #88]	; (8013d04 <F_AUTO_DistanceAvantPoint+0x8c>)
 8013cac:	4613      	mov	r3, r2
 8013cae:	005b      	lsls	r3, r3, #1
 8013cb0:	4413      	add	r3, r2
 8013cb2:	009b      	lsls	r3, r3, #2
 8013cb4:	440b      	add	r3, r1
 8013cb6:	3304      	adds	r3, #4
 8013cb8:	edd3 7a00 	vldr	s15, [r3]
 8013cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cc0:	edc7 7a02 	vstr	s15, [r7, #8]
	float dist = sqrtf((a*a)+(b*b)) ;
 8013cc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8013cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8013ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013cd0:	edd7 6a02 	vldr	s13, [r7, #8]
 8013cd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8013cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8013ce4:	f004 f9ee 	bl	80180c4 <sqrtf>
 8013ce8:	ed87 0a01 	vstr	s0, [r7, #4]

	return dist;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	ee07 3a90 	vmov	s15, r3
}
 8013cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8013cf6:	3710      	adds	r7, #16
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	20003988 	.word	0x20003988
 8013d00:	200003c0 	.word	0x200003c0
 8013d04:	20003994 	.word	0x20003994

08013d08 <F_AUTO_DistanceAvantCible>:
/*
 * Distance between us and final target point
 */
float F_AUTO_DistanceAvantCible(){
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
	float a = g_estimate.x - consigne[g_i_point].x;
 8013d0e:	4b4b      	ldr	r3, [pc, #300]	; (8013e3c <F_AUTO_DistanceAvantCible+0x134>)
 8013d10:	ed93 7a00 	vldr	s14, [r3]
 8013d14:	4b4a      	ldr	r3, [pc, #296]	; (8013e40 <F_AUTO_DistanceAvantCible+0x138>)
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	494a      	ldr	r1, [pc, #296]	; (8013e44 <F_AUTO_DistanceAvantCible+0x13c>)
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	005b      	lsls	r3, r3, #1
 8013d1e:	4413      	add	r3, r2
 8013d20:	009b      	lsls	r3, r3, #2
 8013d22:	440b      	add	r3, r1
 8013d24:	edd3 7a00 	vldr	s15, [r3]
 8013d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d2c:	edc7 7a01 	vstr	s15, [r7, #4]
	float b = g_estimate.y - consigne[g_i_point].y;
 8013d30:	4b42      	ldr	r3, [pc, #264]	; (8013e3c <F_AUTO_DistanceAvantCible+0x134>)
 8013d32:	ed93 7a01 	vldr	s14, [r3, #4]
 8013d36:	4b42      	ldr	r3, [pc, #264]	; (8013e40 <F_AUTO_DistanceAvantCible+0x138>)
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	4942      	ldr	r1, [pc, #264]	; (8013e44 <F_AUTO_DistanceAvantCible+0x13c>)
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	005b      	lsls	r3, r3, #1
 8013d40:	4413      	add	r3, r2
 8013d42:	009b      	lsls	r3, r3, #2
 8013d44:	440b      	add	r3, r1
 8013d46:	3304      	adds	r3, #4
 8013d48:	edd3 7a00 	vldr	s15, [r3]
 8013d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d50:	edc7 7a00 	vstr	s15, [r7]
	float dist = sqrtf((a*a)+(b*b)) ;
 8013d54:	ed97 7a01 	vldr	s14, [r7, #4]
 8013d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8013d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d60:	edd7 6a00 	vldr	s13, [r7]
 8013d64:	edd7 7a00 	vldr	s15, [r7]
 8013d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d70:	eeb0 0a67 	vmov.f32	s0, s15
 8013d74:	f004 f9a6 	bl	80180c4 <sqrtf>
 8013d78:	ed87 0a03 	vstr	s0, [r7, #12]
	int i;

	for( i=g_i_point; i<g_nbPoints-1 ; i++ ){
 8013d7c:	4b30      	ldr	r3, [pc, #192]	; (8013e40 <F_AUTO_DistanceAvantCible+0x138>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	60bb      	str	r3, [r7, #8]
 8013d82:	e04c      	b.n	8013e1e <F_AUTO_DistanceAvantCible+0x116>
		a = consigne[i].x - consigne[i+1].x;
 8013d84:	492f      	ldr	r1, [pc, #188]	; (8013e44 <F_AUTO_DistanceAvantCible+0x13c>)
 8013d86:	68ba      	ldr	r2, [r7, #8]
 8013d88:	4613      	mov	r3, r2
 8013d8a:	005b      	lsls	r3, r3, #1
 8013d8c:	4413      	add	r3, r2
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	440b      	add	r3, r1
 8013d92:	ed93 7a00 	vldr	s14, [r3]
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	1c5a      	adds	r2, r3, #1
 8013d9a:	492a      	ldr	r1, [pc, #168]	; (8013e44 <F_AUTO_DistanceAvantCible+0x13c>)
 8013d9c:	4613      	mov	r3, r2
 8013d9e:	005b      	lsls	r3, r3, #1
 8013da0:	4413      	add	r3, r2
 8013da2:	009b      	lsls	r3, r3, #2
 8013da4:	440b      	add	r3, r1
 8013da6:	edd3 7a00 	vldr	s15, [r3]
 8013daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dae:	edc7 7a01 	vstr	s15, [r7, #4]
		b = consigne[i].y - consigne[i+1].y;
 8013db2:	4924      	ldr	r1, [pc, #144]	; (8013e44 <F_AUTO_DistanceAvantCible+0x13c>)
 8013db4:	68ba      	ldr	r2, [r7, #8]
 8013db6:	4613      	mov	r3, r2
 8013db8:	005b      	lsls	r3, r3, #1
 8013dba:	4413      	add	r3, r2
 8013dbc:	009b      	lsls	r3, r3, #2
 8013dbe:	440b      	add	r3, r1
 8013dc0:	3304      	adds	r3, #4
 8013dc2:	ed93 7a00 	vldr	s14, [r3]
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	1c5a      	adds	r2, r3, #1
 8013dca:	491e      	ldr	r1, [pc, #120]	; (8013e44 <F_AUTO_DistanceAvantCible+0x13c>)
 8013dcc:	4613      	mov	r3, r2
 8013dce:	005b      	lsls	r3, r3, #1
 8013dd0:	4413      	add	r3, r2
 8013dd2:	009b      	lsls	r3, r3, #2
 8013dd4:	440b      	add	r3, r1
 8013dd6:	3304      	adds	r3, #4
 8013dd8:	edd3 7a00 	vldr	s15, [r3]
 8013ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013de0:	edc7 7a00 	vstr	s15, [r7]
		dist += sqrtf((a*a)+(b*b)) ;
 8013de4:	ed97 7a01 	vldr	s14, [r7, #4]
 8013de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8013dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013df0:	edd7 6a00 	vldr	s13, [r7]
 8013df4:	edd7 7a00 	vldr	s15, [r7]
 8013df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e00:	eeb0 0a67 	vmov.f32	s0, s15
 8013e04:	f004 f95e 	bl	80180c4 <sqrtf>
 8013e08:	eeb0 7a40 	vmov.f32	s14, s0
 8013e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e14:	edc7 7a03 	vstr	s15, [r7, #12]
	for( i=g_i_point; i<g_nbPoints-1 ; i++ ){
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	60bb      	str	r3, [r7, #8]
 8013e1e:	4b0a      	ldr	r3, [pc, #40]	; (8013e48 <F_AUTO_DistanceAvantCible+0x140>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	3b01      	subs	r3, #1
 8013e24:	68ba      	ldr	r2, [r7, #8]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	dbac      	blt.n	8013d84 <F_AUTO_DistanceAvantCible+0x7c>
	}

	return dist;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	ee07 3a90 	vmov	s15, r3
}
 8013e30:	eeb0 0a67 	vmov.f32	s0, s15
 8013e34:	3710      	adds	r7, #16
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	20003988 	.word	0x20003988
 8013e40:	200003c0 	.word	0x200003c0
 8013e44:	20003994 	.word	0x20003994
 8013e48:	200003c4 	.word	0x200003c4

08013e4c <F_AUTO_Normalise>:
/*
 * Return arg % pi
 */
void F_AUTO_Normalise(float *cmd_L , float *cmd_R, float max){
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	ed2d 8b02 	vpush	{d8}
 8013e52:	b088      	sub	sp, #32
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	60b9      	str	r1, [r7, #8]
 8013e5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float x;
	float cmd_right = *cmd_R ;
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	61bb      	str	r3, [r7, #24]
	float cmd_left  = *cmd_L ;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	617b      	str	r3, [r7, #20]

	if(F_Math_Abs(cmd_right) > max || F_Math_Abs(cmd_left) > max){
 8013e6a:	ed97 0a06 	vldr	s0, [r7, #24]
 8013e6e:	f000 f8c9 	bl	8014004 <F_Math_Abs>
 8013e72:	eeb0 7a40 	vmov.f32	s14, s0
 8013e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8013e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e82:	d40d      	bmi.n	8013ea0 <F_AUTO_Normalise+0x54>
 8013e84:	ed97 0a05 	vldr	s0, [r7, #20]
 8013e88:	f000 f8bc 	bl	8014004 <F_Math_Abs>
 8013e8c:	eeb0 7a40 	vmov.f32	s14, s0
 8013e90:	edd7 7a01 	vldr	s15, [r7, #4]
 8013e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9c:	d400      	bmi.n	8013ea0 <F_AUTO_Normalise+0x54>
		}

		*cmd_R = cmd_right * x;
		*cmd_L  = cmd_left  * x;
	}
}
 8013e9e:	e054      	b.n	8013f4a <F_AUTO_Normalise+0xfe>
		if(F_Math_Abs(cmd_right) > max && F_Math_Abs(cmd_right) > F_Math_Abs(cmd_left) ){
 8013ea0:	ed97 0a06 	vldr	s0, [r7, #24]
 8013ea4:	f000 f8ae 	bl	8014004 <F_Math_Abs>
 8013ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8013eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8013eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb8:	d523      	bpl.n	8013f02 <F_AUTO_Normalise+0xb6>
 8013eba:	ed97 0a06 	vldr	s0, [r7, #24]
 8013ebe:	f000 f8a1 	bl	8014004 <F_Math_Abs>
 8013ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8013ec6:	ed97 0a05 	vldr	s0, [r7, #20]
 8013eca:	f000 f89b 	bl	8014004 <F_Math_Abs>
 8013ece:	eef0 7a40 	vmov.f32	s15, s0
 8013ed2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eda:	dd12      	ble.n	8013f02 <F_AUTO_Normalise+0xb6>
			x = F_Math_Sign(cmd_right) * max / cmd_right ;
 8013edc:	ed97 0a06 	vldr	s0, [r7, #24]
 8013ee0:	f000 f85a 	bl	8013f98 <F_Math_Sign>
 8013ee4:	ee07 0a90 	vmov	s15, r0
 8013ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8013ef0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8013ef4:	ed97 7a06 	vldr	s14, [r7, #24]
 8013ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013efc:	edc7 7a07 	vstr	s15, [r7, #28]
 8013f00:	e011      	b.n	8013f26 <F_AUTO_Normalise+0xda>
			x = F_Math_Sign(cmd_left) * max / cmd_left ;
 8013f02:	ed97 0a05 	vldr	s0, [r7, #20]
 8013f06:	f000 f847 	bl	8013f98 <F_Math_Sign>
 8013f0a:	ee07 0a90 	vmov	s15, r0
 8013f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8013f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8013f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f22:	edc7 7a07 	vstr	s15, [r7, #28]
		*cmd_R = cmd_right * x;
 8013f26:	ed97 7a06 	vldr	s14, [r7, #24]
 8013f2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8013f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	edc3 7a00 	vstr	s15, [r3]
		*cmd_L  = cmd_left  * x;
 8013f38:	ed97 7a05 	vldr	s14, [r7, #20]
 8013f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8013f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	edc3 7a00 	vstr	s15, [r3]
}
 8013f4a:	bf00      	nop
 8013f4c:	3720      	adds	r7, #32
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	ecbd 8b02 	vpop	{d8}
 8013f54:	bd80      	pop	{r7, pc}
	...

08013f58 <F_Math_toRad>:
#include "F_Math.h"

/*
 * F_toRad - Convert angle form degree to radius
 */
float F_Math_toRad( float angle_deg){
 8013f58:	b590      	push	{r4, r7, lr}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle_deg*COEF_PI_180;
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f7ec faf8 	bl	8000558 <__aeabi_f2d>
 8013f68:	a309      	add	r3, pc, #36	; (adr r3, 8013f90 <F_Math_toRad+0x38>)
 8013f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6e:	f7ec fb4b 	bl	8000608 <__aeabi_dmul>
 8013f72:	4603      	mov	r3, r0
 8013f74:	460c      	mov	r4, r1
 8013f76:	4618      	mov	r0, r3
 8013f78:	4621      	mov	r1, r4
 8013f7a:	f7ec fd77 	bl	8000a6c <__aeabi_d2f>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	ee07 3a90 	vmov	s15, r3
}
 8013f84:	eeb0 0a67 	vmov.f32	s0, s15
 8013f88:	370c      	adds	r7, #12
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd90      	pop	{r4, r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	7707c94d 	.word	0x7707c94d
 8013f94:	3f91df46 	.word	0x3f91df46

08013f98 <F_Math_Sign>:
	return angle_rad*COEF_180_PI;
}
/*
 *
 */
int F_Math_Sign(float nb){
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(nb>=0){
 8013fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8013fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	db01      	blt.n	8013fb4 <F_Math_Sign+0x1c>
		return 1;
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	e001      	b.n	8013fb8 <F_Math_Sign+0x20>
	}else{
		return -1;
 8013fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr

08013fc4 <F_Math_ModuloPi>:
/*
 * Return arg % pi
 */
void F_Math_ModuloPi(float *angleRad){
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
	*angleRad = 2 * atanf(tanf(*angleRad / 2));
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	edd3 7a00 	vldr	s15, [r3]
 8013fd2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013fd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013fda:	eeb0 0a66 	vmov.f32	s0, s13
 8013fde:	f004 f847 	bl	8018070 <tanf>
 8013fe2:	eef0 7a40 	vmov.f32	s15, s0
 8013fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8013fea:	f003 fee3 	bl	8017db4 <atanf>
 8013fee:	eef0 7a40 	vmov.f32	s15, s0
 8013ff2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	edc3 7a00 	vstr	s15, [r3]

	if(angle >  PI) angle = -( PI_X2 - angle);
	if(angle < -PI) angle =  ( PI_X2 + angle);

	*angleRad=	angle;*/
}
 8013ffc:	bf00      	nop
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <F_Math_Abs>:
/*
 * Return absolute value
 */
float F_Math_Abs(float nb){
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(nb>=0){
 801400e:	edd7 7a01 	vldr	s15, [r7, #4]
 8014012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401a:	db02      	blt.n	8014022 <F_Math_Abs+0x1e>
		return nb;
 801401c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014020:	e003      	b.n	801402a <F_Math_Abs+0x26>
	}else{
		return -nb;
 8014022:	edd7 7a01 	vldr	s15, [r7, #4]
 8014026:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 801402a:	eeb0 0a67 	vmov.f32	s0, s15
 801402e:	370c      	adds	r7, #12
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr

08014038 <F_VL53L1X_InitSensors>:

/**
 * Init all the VL53L1X connected to I2C2
 */
void F_VL53L1X_InitSensors()
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 801403e:	2302      	movs	r3, #2
 8014040:	70fb      	strb	r3, [r7, #3]
	uint32_t i = 0;
 8014042:	2300      	movs	r3, #0
 8014044:	607b      	str	r3, [r7, #4]

	// Set up I2C initial address
	dev_avant_1.addr = 0x52;
 8014046:	4b54      	ldr	r3, [pc, #336]	; (8014198 <F_VL53L1X_InitSensors+0x160>)
 8014048:	2252      	movs	r2, #82	; 0x52
 801404a:	601a      	str	r2, [r3, #0]
	dev_avant_2.addr = 0x52;
 801404c:	4b53      	ldr	r3, [pc, #332]	; (801419c <F_VL53L1X_InitSensors+0x164>)
 801404e:	2252      	movs	r2, #82	; 0x52
 8014050:	601a      	str	r2, [r3, #0]
	dev_avant_3.addr = 0x52;
 8014052:	4b53      	ldr	r3, [pc, #332]	; (80141a0 <F_VL53L1X_InitSensors+0x168>)
 8014054:	2252      	movs	r2, #82	; 0x52
 8014056:	601a      	str	r2, [r3, #0]


	// Configure VL53L1X_AVANT_1_ADDR	0x10	PF2

		// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD2;
 8014058:	4b52      	ldr	r3, [pc, #328]	; (80141a4 <F_VL53L1X_InitSensors+0x16c>)
 801405a:	695b      	ldr	r3, [r3, #20]
 801405c:	4a51      	ldr	r2, [pc, #324]	; (80141a4 <F_VL53L1X_InitSensors+0x16c>)
 801405e:	f043 0304 	orr.w	r3, r3, #4
 8014062:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 8014064:	2300      	movs	r3, #0
 8014066:	607b      	str	r3, [r7, #4]
 8014068:	e003      	b.n	8014072 <F_VL53L1X_InitSensors+0x3a>
 801406a:	bf00      	nop
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	3301      	adds	r3, #1
 8014070:	607b      	str	r3, [r7, #4]
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8014078:	4293      	cmp	r3, r2
 801407a:	d9f6      	bls.n	801406a <F_VL53L1X_InitSensors+0x32>

		// Wait for device booted
		while((state & 0x01) != 0x01){ VL53L1X_BootState(dev_avant_1, &state); HAL_Delay(2);}
 801407c:	e008      	b.n	8014090 <F_VL53L1X_InitSensors+0x58>
 801407e:	1cfa      	adds	r2, r7, #3
 8014080:	4b45      	ldr	r3, [pc, #276]	; (8014198 <F_VL53L1X_InitSensors+0x160>)
 8014082:	4611      	mov	r1, r2
 8014084:	6818      	ldr	r0, [r3, #0]
 8014086:	f7ec ffbe 	bl	8001006 <VL53L1X_BootState>
 801408a:	2002      	movs	r0, #2
 801408c:	f7ed f938 	bl	8001300 <HAL_Delay>
 8014090:	78fb      	ldrb	r3, [r7, #3]
 8014092:	f003 0301 	and.w	r3, r3, #1
 8014096:	2b00      	cmp	r3, #0
 8014098:	d0f1      	beq.n	801407e <F_VL53L1X_InitSensors+0x46>

		VL53L1X_SetI2CAddress(dev_avant_1, VL53L1X_AVANT_1_ADDR);
 801409a:	4b3f      	ldr	r3, [pc, #252]	; (8014198 <F_VL53L1X_InitSensors+0x160>)
 801409c:	2110      	movs	r1, #16
 801409e:	6818      	ldr	r0, [r3, #0]
 80140a0:	f7ec feb4 	bl	8000e0c <VL53L1X_SetI2CAddress>
		dev_avant_1.addr = VL53L1X_AVANT_1_ADDR;
 80140a4:	4b3c      	ldr	r3, [pc, #240]	; (8014198 <F_VL53L1X_InitSensors+0x160>)
 80140a6:	2210      	movs	r2, #16
 80140a8:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80140aa:	2001      	movs	r0, #1
 80140ac:	f7ed f928 	bl	8001300 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_1);
 80140b0:	4b39      	ldr	r3, [pc, #228]	; (8014198 <F_VL53L1X_InitSensors+0x160>)
 80140b2:	6818      	ldr	r0, [r3, #0]
 80140b4:	f7ec fec2 	bl	8000e3c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_1);
 80140b8:	4b37      	ldr	r3, [pc, #220]	; (8014198 <F_VL53L1X_InitSensors+0x160>)
 80140ba:	6818      	ldr	r0, [r3, #0]
 80140bc:	f7ec ff4c 	bl	8000f58 <VL53L1X_StartRanging>


	// Configure VL53L1X_AVANT_2_ADDR	0x12	PF3
		// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD3;
 80140c0:	4b38      	ldr	r3, [pc, #224]	; (80141a4 <F_VL53L1X_InitSensors+0x16c>)
 80140c2:	695b      	ldr	r3, [r3, #20]
 80140c4:	4a37      	ldr	r2, [pc, #220]	; (80141a4 <F_VL53L1X_InitSensors+0x16c>)
 80140c6:	f043 0308 	orr.w	r3, r3, #8
 80140ca:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 80140cc:	2300      	movs	r3, #0
 80140ce:	607b      	str	r3, [r7, #4]
 80140d0:	e003      	b.n	80140da <F_VL53L1X_InitSensors+0xa2>
 80140d2:	bf00      	nop
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	3301      	adds	r3, #1
 80140d8:	607b      	str	r3, [r7, #4]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80140e0:	4293      	cmp	r3, r2
 80140e2:	d9f6      	bls.n	80140d2 <F_VL53L1X_InitSensors+0x9a>

		// Wait for device booted
		while((state & 0x01) != 0x01){VL53L1X_BootState(dev_avant_2, &state); HAL_Delay(2);}
 80140e4:	e008      	b.n	80140f8 <F_VL53L1X_InitSensors+0xc0>
 80140e6:	1cfa      	adds	r2, r7, #3
 80140e8:	4b2c      	ldr	r3, [pc, #176]	; (801419c <F_VL53L1X_InitSensors+0x164>)
 80140ea:	4611      	mov	r1, r2
 80140ec:	6818      	ldr	r0, [r3, #0]
 80140ee:	f7ec ff8a 	bl	8001006 <VL53L1X_BootState>
 80140f2:	2002      	movs	r0, #2
 80140f4:	f7ed f904 	bl	8001300 <HAL_Delay>
 80140f8:	78fb      	ldrb	r3, [r7, #3]
 80140fa:	f003 0301 	and.w	r3, r3, #1
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d0f1      	beq.n	80140e6 <F_VL53L1X_InitSensors+0xae>

		VL53L1X_SetI2CAddress(dev_avant_2, VL53L1X_AVANT_2_ADDR);
 8014102:	4b26      	ldr	r3, [pc, #152]	; (801419c <F_VL53L1X_InitSensors+0x164>)
 8014104:	2112      	movs	r1, #18
 8014106:	6818      	ldr	r0, [r3, #0]
 8014108:	f7ec fe80 	bl	8000e0c <VL53L1X_SetI2CAddress>
		dev_avant_2.addr = VL53L1X_AVANT_2_ADDR;
 801410c:	4b23      	ldr	r3, [pc, #140]	; (801419c <F_VL53L1X_InitSensors+0x164>)
 801410e:	2212      	movs	r2, #18
 8014110:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8014112:	2001      	movs	r0, #1
 8014114:	f7ed f8f4 	bl	8001300 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_2);
 8014118:	4b20      	ldr	r3, [pc, #128]	; (801419c <F_VL53L1X_InitSensors+0x164>)
 801411a:	6818      	ldr	r0, [r3, #0]
 801411c:	f7ec fe8e 	bl	8000e3c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_2);
 8014120:	4b1e      	ldr	r3, [pc, #120]	; (801419c <F_VL53L1X_InitSensors+0x164>)
 8014122:	6818      	ldr	r0, [r3, #0]
 8014124:	f7ec ff18 	bl	8000f58 <VL53L1X_StartRanging>


	// Configure VL53L1X_AVANT_3_ADDR	0x14	PF5
		// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD5;
 8014128:	4b1e      	ldr	r3, [pc, #120]	; (80141a4 <F_VL53L1X_InitSensors+0x16c>)
 801412a:	695b      	ldr	r3, [r3, #20]
 801412c:	4a1d      	ldr	r2, [pc, #116]	; (80141a4 <F_VL53L1X_InitSensors+0x16c>)
 801412e:	f043 0320 	orr.w	r3, r3, #32
 8014132:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 8014134:	2300      	movs	r3, #0
 8014136:	607b      	str	r3, [r7, #4]
 8014138:	e003      	b.n	8014142 <F_VL53L1X_InitSensors+0x10a>
 801413a:	bf00      	nop
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	3301      	adds	r3, #1
 8014140:	607b      	str	r3, [r7, #4]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8014148:	4293      	cmp	r3, r2
 801414a:	d9f6      	bls.n	801413a <F_VL53L1X_InitSensors+0x102>

		// Wait for device booted
		while((state & 0x01) != 0x01){VL53L1X_BootState(dev_avant_3, &state); HAL_Delay(2);}
 801414c:	e008      	b.n	8014160 <F_VL53L1X_InitSensors+0x128>
 801414e:	1cfa      	adds	r2, r7, #3
 8014150:	4b13      	ldr	r3, [pc, #76]	; (80141a0 <F_VL53L1X_InitSensors+0x168>)
 8014152:	4611      	mov	r1, r2
 8014154:	6818      	ldr	r0, [r3, #0]
 8014156:	f7ec ff56 	bl	8001006 <VL53L1X_BootState>
 801415a:	2002      	movs	r0, #2
 801415c:	f7ed f8d0 	bl	8001300 <HAL_Delay>
 8014160:	78fb      	ldrb	r3, [r7, #3]
 8014162:	f003 0301 	and.w	r3, r3, #1
 8014166:	2b00      	cmp	r3, #0
 8014168:	d0f1      	beq.n	801414e <F_VL53L1X_InitSensors+0x116>

		VL53L1X_SetI2CAddress(dev_avant_3, VL53L1X_AVANT_3_ADDR);
 801416a:	4b0d      	ldr	r3, [pc, #52]	; (80141a0 <F_VL53L1X_InitSensors+0x168>)
 801416c:	2114      	movs	r1, #20
 801416e:	6818      	ldr	r0, [r3, #0]
 8014170:	f7ec fe4c 	bl	8000e0c <VL53L1X_SetI2CAddress>
		dev_avant_3.addr = VL53L1X_AVANT_3_ADDR;
 8014174:	4b0a      	ldr	r3, [pc, #40]	; (80141a0 <F_VL53L1X_InitSensors+0x168>)
 8014176:	2214      	movs	r2, #20
 8014178:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 801417a:	2001      	movs	r0, #1
 801417c:	f7ed f8c0 	bl	8001300 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_3);
 8014180:	4b07      	ldr	r3, [pc, #28]	; (80141a0 <F_VL53L1X_InitSensors+0x168>)
 8014182:	6818      	ldr	r0, [r3, #0]
 8014184:	f7ec fe5a 	bl	8000e3c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_3);
 8014188:	4b05      	ldr	r3, [pc, #20]	; (80141a0 <F_VL53L1X_InitSensors+0x168>)
 801418a:	6818      	ldr	r0, [r3, #0]
 801418c:	f7ec fee4 	bl	8000f58 <VL53L1X_StartRanging>

		HAL_Delay(1);

		VL53L1X_SensorInit(dev_arriere_1);
		VL53L1X_StartRanging(dev_arriere_1);*/
}
 8014190:	bf00      	nop
 8014192:	3708      	adds	r7, #8
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}
 8014198:	20004580 	.word	0x20004580
 801419c:	20004588 	.word	0x20004588
 80141a0:	20004584 	.word	0x20004584
 80141a4:	40021400 	.word	0x40021400

080141a8 <F_VL53L1X_CheckSensors>:
/**
 * Check the VL53L1X connected to the STM32
 * If data is ready ,update the value of distance_avant_1, distance_avant_2, distance_avant_3, distance_arriere_1
 */
void F_VL53L1X_CheckSensors(void)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
	uint8_t dataReady = 0;
 80141ae:	2300      	movs	r3, #0
 80141b0:	71fb      	strb	r3, [r7, #7]
	uint8_t rangeStatus = 0;
 80141b2:	2300      	movs	r3, #0
 80141b4:	71bb      	strb	r3, [r7, #6]

	// dev_avant_1;
	VL53L1X_CheckForDataReady(dev_avant_1, &dataReady);
 80141b6:	1dfa      	adds	r2, r7, #7
 80141b8:	4b29      	ldr	r3, [pc, #164]	; (8014260 <F_VL53L1X_CheckSensors+0xb8>)
 80141ba:	4611      	mov	r1, r2
 80141bc:	6818      	ldr	r0, [r3, #0]
 80141be:	f7ec fef3 	bl	8000fa8 <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 80141c2:	79fb      	ldrb	r3, [r7, #7]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d011      	beq.n	80141ec <F_VL53L1X_CheckSensors+0x44>
	{
		VL53L1X_GetRangeStatus(dev_avant_1, &rangeStatus);
 80141c8:	1dba      	adds	r2, r7, #6
 80141ca:	4b25      	ldr	r3, [pc, #148]	; (8014260 <F_VL53L1X_CheckSensors+0xb8>)
 80141cc:	4611      	mov	r1, r2
 80141ce:	6818      	ldr	r0, [r3, #0]
 80141d0:	f7ec ff4e 	bl	8001070 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 80141d4:	79bb      	ldrb	r3, [r7, #6]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d104      	bne.n	80141e4 <F_VL53L1X_CheckSensors+0x3c>
		{
			VL53L1X_GetDistance(dev_avant_1, &distance_avant_1);
 80141da:	4b21      	ldr	r3, [pc, #132]	; (8014260 <F_VL53L1X_CheckSensors+0xb8>)
 80141dc:	4921      	ldr	r1, [pc, #132]	; (8014264 <F_VL53L1X_CheckSensors+0xbc>)
 80141de:	6818      	ldr	r0, [r3, #0]
 80141e0:	f7ec ff2c 	bl	800103c <VL53L1X_GetDistance>
		}
		VL53L1X_ClearInterrupt(dev_avant_1);
 80141e4:	4b1e      	ldr	r3, [pc, #120]	; (8014260 <F_VL53L1X_CheckSensors+0xb8>)
 80141e6:	6818      	ldr	r0, [r3, #0]
 80141e8:	f7ec fe7c 	bl	8000ee4 <VL53L1X_ClearInterrupt>

	}

	// dev_avant_2;
	VL53L1X_CheckForDataReady(dev_avant_2, &dataReady);
 80141ec:	1dfa      	adds	r2, r7, #7
 80141ee:	4b1e      	ldr	r3, [pc, #120]	; (8014268 <F_VL53L1X_CheckSensors+0xc0>)
 80141f0:	4611      	mov	r1, r2
 80141f2:	6818      	ldr	r0, [r3, #0]
 80141f4:	f7ec fed8 	bl	8000fa8 <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 80141f8:	79fb      	ldrb	r3, [r7, #7]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d011      	beq.n	8014222 <F_VL53L1X_CheckSensors+0x7a>
	{
		VL53L1X_GetRangeStatus(dev_avant_2, &rangeStatus);
 80141fe:	1dba      	adds	r2, r7, #6
 8014200:	4b19      	ldr	r3, [pc, #100]	; (8014268 <F_VL53L1X_CheckSensors+0xc0>)
 8014202:	4611      	mov	r1, r2
 8014204:	6818      	ldr	r0, [r3, #0]
 8014206:	f7ec ff33 	bl	8001070 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 801420a:	79bb      	ldrb	r3, [r7, #6]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d104      	bne.n	801421a <F_VL53L1X_CheckSensors+0x72>
		{
			VL53L1X_GetDistance(dev_avant_2, &distance_avant_2);
 8014210:	4b15      	ldr	r3, [pc, #84]	; (8014268 <F_VL53L1X_CheckSensors+0xc0>)
 8014212:	4916      	ldr	r1, [pc, #88]	; (801426c <F_VL53L1X_CheckSensors+0xc4>)
 8014214:	6818      	ldr	r0, [r3, #0]
 8014216:	f7ec ff11 	bl	800103c <VL53L1X_GetDistance>
		}
		VL53L1X_ClearInterrupt(dev_avant_2);
 801421a:	4b13      	ldr	r3, [pc, #76]	; (8014268 <F_VL53L1X_CheckSensors+0xc0>)
 801421c:	6818      	ldr	r0, [r3, #0]
 801421e:	f7ec fe61 	bl	8000ee4 <VL53L1X_ClearInterrupt>
	}

	// dev_avant_3;
	VL53L1X_CheckForDataReady(dev_avant_3, &dataReady);
 8014222:	1dfa      	adds	r2, r7, #7
 8014224:	4b12      	ldr	r3, [pc, #72]	; (8014270 <F_VL53L1X_CheckSensors+0xc8>)
 8014226:	4611      	mov	r1, r2
 8014228:	6818      	ldr	r0, [r3, #0]
 801422a:	f7ec febd 	bl	8000fa8 <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 801422e:	79fb      	ldrb	r3, [r7, #7]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d011      	beq.n	8014258 <F_VL53L1X_CheckSensors+0xb0>
	{
		VL53L1X_GetRangeStatus(dev_avant_3, &rangeStatus);
 8014234:	1dba      	adds	r2, r7, #6
 8014236:	4b0e      	ldr	r3, [pc, #56]	; (8014270 <F_VL53L1X_CheckSensors+0xc8>)
 8014238:	4611      	mov	r1, r2
 801423a:	6818      	ldr	r0, [r3, #0]
 801423c:	f7ec ff18 	bl	8001070 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 8014240:	79bb      	ldrb	r3, [r7, #6]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d104      	bne.n	8014250 <F_VL53L1X_CheckSensors+0xa8>
		{
			VL53L1X_GetDistance(dev_avant_3, &distance_avant_3);
 8014246:	4b0a      	ldr	r3, [pc, #40]	; (8014270 <F_VL53L1X_CheckSensors+0xc8>)
 8014248:	490a      	ldr	r1, [pc, #40]	; (8014274 <F_VL53L1X_CheckSensors+0xcc>)
 801424a:	6818      	ldr	r0, [r3, #0]
 801424c:	f7ec fef6 	bl	800103c <VL53L1X_GetDistance>
		}
		VL53L1X_ClearInterrupt(dev_avant_3);
 8014250:	4b07      	ldr	r3, [pc, #28]	; (8014270 <F_VL53L1X_CheckSensors+0xc8>)
 8014252:	6818      	ldr	r0, [r3, #0]
 8014254:	f7ec fe46 	bl	8000ee4 <VL53L1X_ClearInterrupt>
			VL53L1X_GetDistance(dev_arriere_1, &distance_arriere_1);
		}
		VL53L1X_ClearInterrupt(dev_arriere_1);
	}*/

}
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	20004580 	.word	0x20004580
 8014264:	200003cc 	.word	0x200003cc
 8014268:	20004588 	.word	0x20004588
 801426c:	200003ce 	.word	0x200003ce
 8014270:	20004584 	.word	0x20004584
 8014274:	200003d0 	.word	0x200003d0

08014278 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b08e      	sub	sp, #56	; 0x38
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014284:	2200      	movs	r2, #0
 8014286:	601a      	str	r2, [r3, #0]
 8014288:	605a      	str	r2, [r3, #4]
 801428a:	609a      	str	r2, [r3, #8]
 801428c:	60da      	str	r2, [r3, #12]
 801428e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4a55      	ldr	r2, [pc, #340]	; (80143ec <HAL_ETH_MspInit+0x174>)
 8014296:	4293      	cmp	r3, r2
 8014298:	f040 80a4 	bne.w	80143e4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801429c:	2300      	movs	r3, #0
 801429e:	623b      	str	r3, [r7, #32]
 80142a0:	4b53      	ldr	r3, [pc, #332]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142a4:	4a52      	ldr	r2, [pc, #328]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80142aa:	6313      	str	r3, [r2, #48]	; 0x30
 80142ac:	4b50      	ldr	r3, [pc, #320]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80142b4:	623b      	str	r3, [r7, #32]
 80142b6:	6a3b      	ldr	r3, [r7, #32]
 80142b8:	2300      	movs	r3, #0
 80142ba:	61fb      	str	r3, [r7, #28]
 80142bc:	4b4c      	ldr	r3, [pc, #304]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c0:	4a4b      	ldr	r2, [pc, #300]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80142c6:	6313      	str	r3, [r2, #48]	; 0x30
 80142c8:	4b49      	ldr	r3, [pc, #292]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80142d0:	61fb      	str	r3, [r7, #28]
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	2300      	movs	r3, #0
 80142d6:	61bb      	str	r3, [r7, #24]
 80142d8:	4b45      	ldr	r3, [pc, #276]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142dc:	4a44      	ldr	r2, [pc, #272]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80142e2:	6313      	str	r3, [r2, #48]	; 0x30
 80142e4:	4b42      	ldr	r3, [pc, #264]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80142ec:	61bb      	str	r3, [r7, #24]
 80142ee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80142f0:	2300      	movs	r3, #0
 80142f2:	617b      	str	r3, [r7, #20]
 80142f4:	4b3e      	ldr	r3, [pc, #248]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f8:	4a3d      	ldr	r2, [pc, #244]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 80142fa:	f043 0304 	orr.w	r3, r3, #4
 80142fe:	6313      	str	r3, [r2, #48]	; 0x30
 8014300:	4b3b      	ldr	r3, [pc, #236]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 8014302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014304:	f003 0304 	and.w	r3, r3, #4
 8014308:	617b      	str	r3, [r7, #20]
 801430a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801430c:	2300      	movs	r3, #0
 801430e:	613b      	str	r3, [r7, #16]
 8014310:	4b37      	ldr	r3, [pc, #220]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 8014312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014314:	4a36      	ldr	r2, [pc, #216]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 8014316:	f043 0301 	orr.w	r3, r3, #1
 801431a:	6313      	str	r3, [r2, #48]	; 0x30
 801431c:	4b34      	ldr	r3, [pc, #208]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 801431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014320:	f003 0301 	and.w	r3, r3, #1
 8014324:	613b      	str	r3, [r7, #16]
 8014326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014328:	2300      	movs	r3, #0
 801432a:	60fb      	str	r3, [r7, #12]
 801432c:	4b30      	ldr	r3, [pc, #192]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 801432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014330:	4a2f      	ldr	r2, [pc, #188]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 8014332:	f043 0302 	orr.w	r3, r3, #2
 8014336:	6313      	str	r3, [r2, #48]	; 0x30
 8014338:	4b2d      	ldr	r3, [pc, #180]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 801433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801433c:	f003 0302 	and.w	r3, r3, #2
 8014340:	60fb      	str	r3, [r7, #12]
 8014342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014344:	2300      	movs	r3, #0
 8014346:	60bb      	str	r3, [r7, #8]
 8014348:	4b29      	ldr	r3, [pc, #164]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 801434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801434c:	4a28      	ldr	r2, [pc, #160]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 801434e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014352:	6313      	str	r3, [r2, #48]	; 0x30
 8014354:	4b26      	ldr	r3, [pc, #152]	; (80143f0 <HAL_ETH_MspInit+0x178>)
 8014356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801435c:	60bb      	str	r3, [r7, #8]
 801435e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8014360:	2332      	movs	r3, #50	; 0x32
 8014362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014364:	2302      	movs	r3, #2
 8014366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014368:	2300      	movs	r3, #0
 801436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801436c:	2303      	movs	r3, #3
 801436e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014370:	230b      	movs	r3, #11
 8014372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014378:	4619      	mov	r1, r3
 801437a:	481e      	ldr	r0, [pc, #120]	; (80143f4 <HAL_ETH_MspInit+0x17c>)
 801437c:	f7ee f888 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8014380:	2386      	movs	r3, #134	; 0x86
 8014382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014384:	2302      	movs	r3, #2
 8014386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014388:	2300      	movs	r3, #0
 801438a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801438c:	2303      	movs	r3, #3
 801438e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014390:	230b      	movs	r3, #11
 8014392:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014398:	4619      	mov	r1, r3
 801439a:	4817      	ldr	r0, [pc, #92]	; (80143f8 <HAL_ETH_MspInit+0x180>)
 801439c:	f7ee f878 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80143a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80143a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143a6:	2302      	movs	r3, #2
 80143a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143aa:	2300      	movs	r3, #0
 80143ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80143ae:	2303      	movs	r3, #3
 80143b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80143b2:	230b      	movs	r3, #11
 80143b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80143b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143ba:	4619      	mov	r1, r3
 80143bc:	480f      	ldr	r0, [pc, #60]	; (80143fc <HAL_ETH_MspInit+0x184>)
 80143be:	f7ee f867 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80143c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80143c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143c8:	2302      	movs	r3, #2
 80143ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143cc:	2300      	movs	r3, #0
 80143ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80143d0:	2303      	movs	r3, #3
 80143d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80143d4:	230b      	movs	r3, #11
 80143d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80143d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143dc:	4619      	mov	r1, r3
 80143de:	4808      	ldr	r0, [pc, #32]	; (8014400 <HAL_ETH_MspInit+0x188>)
 80143e0:	f7ee f856 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80143e4:	bf00      	nop
 80143e6:	3738      	adds	r7, #56	; 0x38
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	40028000 	.word	0x40028000
 80143f0:	40023800 	.word	0x40023800
 80143f4:	40020800 	.word	0x40020800
 80143f8:	40020000 	.word	0x40020000
 80143fc:	40020400 	.word	0x40020400
 8014400:	40021800 	.word	0x40021800

08014404 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8014404:	b580      	push	{r7, lr}
 8014406:	b086      	sub	sp, #24
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 801440c:	2300      	movs	r3, #0
 801440e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8014410:	4b49      	ldr	r3, [pc, #292]	; (8014538 <low_level_init+0x134>)
 8014412:	4a4a      	ldr	r2, [pc, #296]	; (801453c <low_level_init+0x138>)
 8014414:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8014416:	4b48      	ldr	r3, [pc, #288]	; (8014538 <low_level_init+0x134>)
 8014418:	2201      	movs	r2, #1
 801441a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801441c:	4b46      	ldr	r3, [pc, #280]	; (8014538 <low_level_init+0x134>)
 801441e:	2200      	movs	r2, #0
 8014420:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8014422:	2300      	movs	r3, #0
 8014424:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8014426:	2380      	movs	r3, #128	; 0x80
 8014428:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801442a:	23e1      	movs	r3, #225	; 0xe1
 801442c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801442e:	2300      	movs	r3, #0
 8014430:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8014432:	2300      	movs	r3, #0
 8014434:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8014436:	2300      	movs	r3, #0
 8014438:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801443a:	4a3f      	ldr	r2, [pc, #252]	; (8014538 <low_level_init+0x134>)
 801443c:	f107 0308 	add.w	r3, r7, #8
 8014440:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8014442:	4b3d      	ldr	r3, [pc, #244]	; (8014538 <low_level_init+0x134>)
 8014444:	2200      	movs	r2, #0
 8014446:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8014448:	4b3b      	ldr	r3, [pc, #236]	; (8014538 <low_level_init+0x134>)
 801444a:	2200      	movs	r2, #0
 801444c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801444e:	4b3a      	ldr	r3, [pc, #232]	; (8014538 <low_level_init+0x134>)
 8014450:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8014454:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8014456:	4838      	ldr	r0, [pc, #224]	; (8014538 <low_level_init+0x134>)
 8014458:	f7ed f886 	bl	8001568 <HAL_ETH_Init>
 801445c:	4603      	mov	r3, r0
 801445e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8014460:	7dfb      	ldrb	r3, [r7, #23]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d108      	bne.n	8014478 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801446c:	f043 0304 	orr.w	r3, r3, #4
 8014470:	b2da      	uxtb	r2, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014478:	2304      	movs	r3, #4
 801447a:	4a31      	ldr	r2, [pc, #196]	; (8014540 <low_level_init+0x13c>)
 801447c:	4931      	ldr	r1, [pc, #196]	; (8014544 <low_level_init+0x140>)
 801447e:	482e      	ldr	r0, [pc, #184]	; (8014538 <low_level_init+0x134>)
 8014480:	f7ed fa10 	bl	80018a4 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8014484:	2304      	movs	r3, #4
 8014486:	4a30      	ldr	r2, [pc, #192]	; (8014548 <low_level_init+0x144>)
 8014488:	4930      	ldr	r1, [pc, #192]	; (801454c <low_level_init+0x148>)
 801448a:	482b      	ldr	r0, [pc, #172]	; (8014538 <low_level_init+0x134>)
 801448c:	f7ed fa73 	bl	8001976 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2206      	movs	r2, #6
 8014494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014498:	4b27      	ldr	r3, [pc, #156]	; (8014538 <low_level_init+0x134>)
 801449a:	695b      	ldr	r3, [r3, #20]
 801449c:	781a      	ldrb	r2, [r3, #0]
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80144a4:	4b24      	ldr	r3, [pc, #144]	; (8014538 <low_level_init+0x134>)
 80144a6:	695b      	ldr	r3, [r3, #20]
 80144a8:	785a      	ldrb	r2, [r3, #1]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80144b0:	4b21      	ldr	r3, [pc, #132]	; (8014538 <low_level_init+0x134>)
 80144b2:	695b      	ldr	r3, [r3, #20]
 80144b4:	789a      	ldrb	r2, [r3, #2]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80144bc:	4b1e      	ldr	r3, [pc, #120]	; (8014538 <low_level_init+0x134>)
 80144be:	695b      	ldr	r3, [r3, #20]
 80144c0:	78da      	ldrb	r2, [r3, #3]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80144c8:	4b1b      	ldr	r3, [pc, #108]	; (8014538 <low_level_init+0x134>)
 80144ca:	695b      	ldr	r3, [r3, #20]
 80144cc:	791a      	ldrb	r2, [r3, #4]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80144d4:	4b18      	ldr	r3, [pc, #96]	; (8014538 <low_level_init+0x134>)
 80144d6:	695b      	ldr	r3, [r3, #20]
 80144d8:	795a      	ldrb	r2, [r3, #5]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80144e6:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80144ee:	f043 030a 	orr.w	r3, r3, #10
 80144f2:	b2da      	uxtb	r2, r3
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80144fa:	480f      	ldr	r0, [pc, #60]	; (8014538 <low_level_init+0x134>)
 80144fc:	f7ed fce4 	bl	8001ec8 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8014500:	f107 0310 	add.w	r3, r7, #16
 8014504:	461a      	mov	r2, r3
 8014506:	211d      	movs	r1, #29
 8014508:	480b      	ldr	r0, [pc, #44]	; (8014538 <low_level_init+0x134>)
 801450a:	f7ed fc0f 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	f043 030b 	orr.w	r3, r3, #11
 8014514:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	461a      	mov	r2, r3
 801451a:	211d      	movs	r1, #29
 801451c:	4806      	ldr	r0, [pc, #24]	; (8014538 <low_level_init+0x134>)
 801451e:	f7ed fc6d 	bl	8001dfc <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8014522:	f107 0310 	add.w	r3, r7, #16
 8014526:	461a      	mov	r2, r3
 8014528:	211d      	movs	r1, #29
 801452a:	4803      	ldr	r0, [pc, #12]	; (8014538 <low_level_init+0x134>)
 801452c:	f7ed fbfe 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8014530:	bf00      	nop
 8014532:	3718      	adds	r7, #24
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	20005e5c 	.word	0x20005e5c
 801453c:	40028000 	.word	0x40028000
 8014540:	20005ea4 	.word	0x20005ea4
 8014544:	2000458c 	.word	0x2000458c
 8014548:	2000460c 	.word	0x2000460c
 801454c:	20005ddc 	.word	0x20005ddc

08014550 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b08a      	sub	sp, #40	; 0x28
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801455a:	4b4b      	ldr	r3, [pc, #300]	; (8014688 <low_level_output+0x138>)
 801455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801455e:	689b      	ldr	r3, [r3, #8]
 8014560:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8014562:	2300      	movs	r3, #0
 8014564:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8014566:	2300      	movs	r3, #0
 8014568:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801456a:	2300      	movs	r3, #0
 801456c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8014572:	4b45      	ldr	r3, [pc, #276]	; (8014688 <low_level_output+0x138>)
 8014574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014576:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8014578:	2300      	movs	r3, #0
 801457a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	623b      	str	r3, [r7, #32]
 8014580:	e05a      	b.n	8014638 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	da03      	bge.n	8014592 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801458a:	23f8      	movs	r3, #248	; 0xf8
 801458c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8014590:	e05c      	b.n	801464c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8014592:	6a3b      	ldr	r3, [r7, #32]
 8014594:	895b      	ldrh	r3, [r3, #10]
 8014596:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8014598:	2300      	movs	r3, #0
 801459a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801459c:	e02f      	b.n	80145fe <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801459e:	69fa      	ldr	r2, [r7, #28]
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	18d0      	adds	r0, r2, r3
 80145a4:	6a3b      	ldr	r3, [r7, #32]
 80145a6:	685a      	ldr	r2, [r3, #4]
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	18d1      	adds	r1, r2, r3
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80145b2:	3304      	adds	r3, #4
 80145b4:	461a      	mov	r2, r3
 80145b6:	f002 fc6e 	bl	8016e96 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80145c0:	69bb      	ldr	r3, [r7, #24]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	da03      	bge.n	80145d0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80145c8:	23f8      	movs	r3, #248	; 0xf8
 80145ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80145ce:	e03d      	b.n	801464c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	689b      	ldr	r3, [r3, #8]
 80145d4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80145d6:	693a      	ldr	r2, [r7, #16]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	4413      	add	r3, r2
 80145dc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80145e0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80145e2:	68ba      	ldr	r2, [r7, #8]
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80145ec:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80145ee:	697a      	ldr	r2, [r7, #20]
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	1ad3      	subs	r3, r2, r3
 80145f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80145f8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80145fa:	2300      	movs	r3, #0
 80145fc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80145fe:	68fa      	ldr	r2, [r7, #12]
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	4413      	add	r3, r2
 8014604:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8014608:	4293      	cmp	r3, r2
 801460a:	d8c8      	bhi.n	801459e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801460c:	69fa      	ldr	r2, [r7, #28]
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	18d0      	adds	r0, r2, r3
 8014612:	6a3b      	ldr	r3, [r7, #32]
 8014614:	685a      	ldr	r2, [r3, #4]
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	4413      	add	r3, r2
 801461a:	68fa      	ldr	r2, [r7, #12]
 801461c:	4619      	mov	r1, r3
 801461e:	f002 fc3a 	bl	8016e96 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8014622:	693a      	ldr	r2, [r7, #16]
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	4413      	add	r3, r2
 8014628:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 801462a:	697a      	ldr	r2, [r7, #20]
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	4413      	add	r3, r2
 8014630:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8014632:	6a3b      	ldr	r3, [r7, #32]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	623b      	str	r3, [r7, #32]
 8014638:	6a3b      	ldr	r3, [r7, #32]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d1a1      	bne.n	8014582 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 801463e:	6979      	ldr	r1, [r7, #20]
 8014640:	4811      	ldr	r0, [pc, #68]	; (8014688 <low_level_output+0x138>)
 8014642:	f7ed fa05 	bl	8001a50 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8014646:	2300      	movs	r3, #0
 8014648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801464c:	4b0e      	ldr	r3, [pc, #56]	; (8014688 <low_level_output+0x138>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014654:	3314      	adds	r3, #20
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	f003 0320 	and.w	r3, r3, #32
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00d      	beq.n	801467c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8014660:	4b09      	ldr	r3, [pc, #36]	; (8014688 <low_level_output+0x138>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014668:	3314      	adds	r3, #20
 801466a:	2220      	movs	r2, #32
 801466c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801466e:	4b06      	ldr	r3, [pc, #24]	; (8014688 <low_level_output+0x138>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014676:	3304      	adds	r3, #4
 8014678:	2200      	movs	r2, #0
 801467a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 801467c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014680:	4618      	mov	r0, r3
 8014682:	3728      	adds	r7, #40	; 0x28
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	20005e5c 	.word	0x20005e5c

0801468c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b08c      	sub	sp, #48	; 0x30
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8014694:	2300      	movs	r3, #0
 8014696:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8014698:	2300      	movs	r3, #0
 801469a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 801469c:	2300      	movs	r3, #0
 801469e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80146a0:	2300      	movs	r3, #0
 80146a2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80146a4:	2300      	movs	r3, #0
 80146a6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80146a8:	2300      	movs	r3, #0
 80146aa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80146ac:	2300      	movs	r3, #0
 80146ae:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80146b0:	484e      	ldr	r0, [pc, #312]	; (80147ec <low_level_input+0x160>)
 80146b2:	f7ed fab7 	bl	8001c24 <HAL_ETH_GetReceivedFrame>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d001      	beq.n	80146c0 <low_level_input+0x34>
    return NULL;
 80146bc:	2300      	movs	r3, #0
 80146be:	e091      	b.n	80147e4 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80146c0:	4b4a      	ldr	r3, [pc, #296]	; (80147ec <low_level_input+0x160>)
 80146c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146c4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80146c6:	4b49      	ldr	r3, [pc, #292]	; (80147ec <low_level_input+0x160>)
 80146c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ca:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80146cc:	89fb      	ldrh	r3, [r7, #14]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d006      	beq.n	80146e0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80146d2:	89fb      	ldrh	r3, [r7, #14]
 80146d4:	2203      	movs	r2, #3
 80146d6:	4619      	mov	r1, r3
 80146d8:	2004      	movs	r0, #4
 80146da:	f7f4 fa67 	bl	8008bac <pbuf_alloc>
 80146de:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80146e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d04b      	beq.n	801477e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80146e6:	4b41      	ldr	r3, [pc, #260]	; (80147ec <low_level_input+0x160>)
 80146e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146ea:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80146ec:	2300      	movs	r3, #0
 80146ee:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80146f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80146f4:	e040      	b.n	8014778 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80146f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f8:	895b      	ldrh	r3, [r3, #10]
 80146fa:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80146fc:	2300      	movs	r3, #0
 80146fe:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014700:	e021      	b.n	8014746 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	685a      	ldr	r2, [r3, #4]
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	18d0      	adds	r0, r2, r3
 801470a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	18d1      	adds	r1, r2, r3
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8014716:	3304      	adds	r3, #4
 8014718:	461a      	mov	r2, r3
 801471a:	f002 fbbc 	bl	8016e96 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801471e:	6a3b      	ldr	r3, [r7, #32]
 8014720:	68db      	ldr	r3, [r3, #12]
 8014722:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8014724:	6a3b      	ldr	r3, [r7, #32]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801472a:	69fa      	ldr	r2, [r7, #28]
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	4413      	add	r3, r2
 8014730:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8014734:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8014736:	69ba      	ldr	r2, [r7, #24]
 8014738:	69fb      	ldr	r3, [r7, #28]
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8014740:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8014742:	2300      	movs	r3, #0
 8014744:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014746:	697a      	ldr	r2, [r7, #20]
 8014748:	69fb      	ldr	r3, [r7, #28]
 801474a:	4413      	add	r3, r2
 801474c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8014750:	4293      	cmp	r3, r2
 8014752:	d8d6      	bhi.n	8014702 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8014754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014756:	685a      	ldr	r2, [r3, #4]
 8014758:	69bb      	ldr	r3, [r7, #24]
 801475a:	18d0      	adds	r0, r2, r3
 801475c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801475e:	69fb      	ldr	r3, [r7, #28]
 8014760:	4413      	add	r3, r2
 8014762:	697a      	ldr	r2, [r7, #20]
 8014764:	4619      	mov	r1, r3
 8014766:	f002 fb96 	bl	8016e96 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801476a:	69fa      	ldr	r2, [r7, #28]
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	4413      	add	r3, r2
 8014770:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8014772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	62bb      	str	r3, [r7, #40]	; 0x28
 8014778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477a:	2b00      	cmp	r3, #0
 801477c:	d1bb      	bne.n	80146f6 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801477e:	4b1b      	ldr	r3, [pc, #108]	; (80147ec <low_level_input+0x160>)
 8014780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014782:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8014784:	2300      	movs	r3, #0
 8014786:	613b      	str	r3, [r7, #16]
 8014788:	e00b      	b.n	80147a2 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801478a:	6a3b      	ldr	r3, [r7, #32]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014792:	6a3b      	ldr	r3, [r7, #32]
 8014794:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8014796:	6a3b      	ldr	r3, [r7, #32]
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	3301      	adds	r3, #1
 80147a0:	613b      	str	r3, [r7, #16]
 80147a2:	4b12      	ldr	r3, [pc, #72]	; (80147ec <low_level_input+0x160>)
 80147a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147a6:	693a      	ldr	r2, [r7, #16]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d3ee      	bcc.n	801478a <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80147ac:	4b0f      	ldr	r3, [pc, #60]	; (80147ec <low_level_input+0x160>)
 80147ae:	2200      	movs	r2, #0
 80147b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80147b2:	4b0e      	ldr	r3, [pc, #56]	; (80147ec <low_level_input+0x160>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147ba:	3314      	adds	r3, #20
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d00d      	beq.n	80147e2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80147c6:	4b09      	ldr	r3, [pc, #36]	; (80147ec <low_level_input+0x160>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147ce:	3314      	adds	r3, #20
 80147d0:	2280      	movs	r2, #128	; 0x80
 80147d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80147d4:	4b05      	ldr	r3, [pc, #20]	; (80147ec <low_level_input+0x160>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147dc:	3308      	adds	r3, #8
 80147de:	2200      	movs	r2, #0
 80147e0:	601a      	str	r2, [r3, #0]
  }
  return p;
 80147e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3730      	adds	r7, #48	; 0x30
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	20005e5c 	.word	0x20005e5c

080147f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f7ff ff47 	bl	801468c <low_level_input>
 80147fe:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d010      	beq.n	8014828 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	691b      	ldr	r3, [r3, #16]
 801480a:	6879      	ldr	r1, [r7, #4]
 801480c:	68f8      	ldr	r0, [r7, #12]
 801480e:	4798      	blx	r3
 8014810:	4603      	mov	r3, r0
 8014812:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8014814:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d006      	beq.n	801482a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f7f4 fd37 	bl	8009290 <pbuf_free>
    p = NULL;    
 8014822:	2300      	movs	r3, #0
 8014824:	60fb      	str	r3, [r7, #12]
 8014826:	e000      	b.n	801482a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8014828:	bf00      	nop
  }
}
 801482a:	3710      	adds	r7, #16
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}

08014830 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d106      	bne.n	801484c <ethernetif_init+0x1c>
 801483e:	4b0e      	ldr	r3, [pc, #56]	; (8014878 <ethernetif_init+0x48>)
 8014840:	f44f 7204 	mov.w	r2, #528	; 0x210
 8014844:	490d      	ldr	r1, [pc, #52]	; (801487c <ethernetif_init+0x4c>)
 8014846:	480e      	ldr	r0, [pc, #56]	; (8014880 <ethernetif_init+0x50>)
 8014848:	f002 fbe0 	bl	801700c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2273      	movs	r2, #115	; 0x73
 8014850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2274      	movs	r2, #116	; 0x74
 8014858:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	4a09      	ldr	r2, [pc, #36]	; (8014884 <ethernetif_init+0x54>)
 8014860:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4a08      	ldr	r2, [pc, #32]	; (8014888 <ethernetif_init+0x58>)
 8014866:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f7ff fdcb 	bl	8014404 <low_level_init>

  return ERR_OK;
 801486e:	2300      	movs	r3, #0
}
 8014870:	4618      	mov	r0, r3
 8014872:	3708      	adds	r7, #8
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	0801b0c0 	.word	0x0801b0c0
 801487c:	0801b0d4 	.word	0x0801b0d4
 8014880:	0801b0e4 	.word	0x0801b0e4
 8014884:	08010ead 	.word	0x08010ead
 8014888:	08014551 	.word	0x08014551

0801488c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8014890:	f7ec fd2a 	bl	80012e8 <HAL_GetTick>
 8014894:	4603      	mov	r3, r0
}
 8014896:	4618      	mov	r0, r3
 8014898:	bd80      	pop	{r7, pc}
	...

0801489c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b08e      	sub	sp, #56	; 0x38
 80148a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80148a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148a6:	2200      	movs	r2, #0
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	605a      	str	r2, [r3, #4]
 80148ac:	609a      	str	r2, [r3, #8]
 80148ae:	60da      	str	r2, [r3, #12]
 80148b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80148b2:	2300      	movs	r3, #0
 80148b4:	623b      	str	r3, [r7, #32]
 80148b6:	4bab      	ldr	r3, [pc, #684]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ba:	4aaa      	ldr	r2, [pc, #680]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148bc:	f043 0310 	orr.w	r3, r3, #16
 80148c0:	6313      	str	r3, [r2, #48]	; 0x30
 80148c2:	4ba8      	ldr	r3, [pc, #672]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148c6:	f003 0310 	and.w	r3, r3, #16
 80148ca:	623b      	str	r3, [r7, #32]
 80148cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80148ce:	2300      	movs	r3, #0
 80148d0:	61fb      	str	r3, [r7, #28]
 80148d2:	4ba4      	ldr	r3, [pc, #656]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148d6:	4aa3      	ldr	r2, [pc, #652]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148d8:	f043 0304 	orr.w	r3, r3, #4
 80148dc:	6313      	str	r3, [r2, #48]	; 0x30
 80148de:	4ba1      	ldr	r3, [pc, #644]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148e2:	f003 0304 	and.w	r3, r3, #4
 80148e6:	61fb      	str	r3, [r7, #28]
 80148e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80148ea:	2300      	movs	r3, #0
 80148ec:	61bb      	str	r3, [r7, #24]
 80148ee:	4b9d      	ldr	r3, [pc, #628]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148f2:	4a9c      	ldr	r2, [pc, #624]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148f4:	f043 0320 	orr.w	r3, r3, #32
 80148f8:	6313      	str	r3, [r2, #48]	; 0x30
 80148fa:	4b9a      	ldr	r3, [pc, #616]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 80148fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148fe:	f003 0320 	and.w	r3, r3, #32
 8014902:	61bb      	str	r3, [r7, #24]
 8014904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8014906:	2300      	movs	r3, #0
 8014908:	617b      	str	r3, [r7, #20]
 801490a:	4b96      	ldr	r3, [pc, #600]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 801490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801490e:	4a95      	ldr	r2, [pc, #596]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014914:	6313      	str	r3, [r2, #48]	; 0x30
 8014916:	4b93      	ldr	r3, [pc, #588]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801491e:	617b      	str	r3, [r7, #20]
 8014920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014922:	2300      	movs	r3, #0
 8014924:	613b      	str	r3, [r7, #16]
 8014926:	4b8f      	ldr	r3, [pc, #572]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801492a:	4a8e      	ldr	r2, [pc, #568]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 801492c:	f043 0301 	orr.w	r3, r3, #1
 8014930:	6313      	str	r3, [r2, #48]	; 0x30
 8014932:	4b8c      	ldr	r3, [pc, #560]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014936:	f003 0301 	and.w	r3, r3, #1
 801493a:	613b      	str	r3, [r7, #16]
 801493c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801493e:	2300      	movs	r3, #0
 8014940:	60fb      	str	r3, [r7, #12]
 8014942:	4b88      	ldr	r3, [pc, #544]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014946:	4a87      	ldr	r2, [pc, #540]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014948:	f043 0302 	orr.w	r3, r3, #2
 801494c:	6313      	str	r3, [r2, #48]	; 0x30
 801494e:	4b85      	ldr	r3, [pc, #532]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014952:	f003 0302 	and.w	r3, r3, #2
 8014956:	60fb      	str	r3, [r7, #12]
 8014958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801495a:	2300      	movs	r3, #0
 801495c:	60bb      	str	r3, [r7, #8]
 801495e:	4b81      	ldr	r3, [pc, #516]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014962:	4a80      	ldr	r2, [pc, #512]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014968:	6313      	str	r3, [r2, #48]	; 0x30
 801496a:	4b7e      	ldr	r3, [pc, #504]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 801496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014972:	60bb      	str	r3, [r7, #8]
 8014974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8014976:	2300      	movs	r3, #0
 8014978:	607b      	str	r3, [r7, #4]
 801497a:	4b7a      	ldr	r3, [pc, #488]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 801497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801497e:	4a79      	ldr	r2, [pc, #484]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014980:	f043 0308 	orr.w	r3, r3, #8
 8014984:	6313      	str	r3, [r2, #48]	; 0x30
 8014986:	4b77      	ldr	r3, [pc, #476]	; (8014b64 <MX_GPIO_Init+0x2c8>)
 8014988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801498a:	f003 0308 	and.w	r3, r3, #8
 801498e:	607b      	str	r3, [r7, #4]
 8014990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 8014992:	2200      	movs	r2, #0
 8014994:	f247 013c 	movw	r1, #28732	; 0x703c
 8014998:	4873      	ldr	r0, [pc, #460]	; (8014b68 <MX_GPIO_Init+0x2cc>)
 801499a:	f7ed ff23 	bl	80027e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LD1_Pin, GPIO_PIN_RESET);
 801499e:	2200      	movs	r2, #0
 80149a0:	f240 2101 	movw	r1, #513	; 0x201
 80149a4:	4871      	ldr	r0, [pc, #452]	; (8014b6c <MX_GPIO_Init+0x2d0>)
 80149a6:	f7ed ff1d 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80149aa:	2200      	movs	r2, #0
 80149ac:	2108      	movs	r1, #8
 80149ae:	4870      	ldr	r0, [pc, #448]	; (8014b70 <MX_GPIO_Init+0x2d4>)
 80149b0:	f7ed ff18 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80149b4:	2200      	movs	r2, #0
 80149b6:	f244 0181 	movw	r1, #16513	; 0x4081
 80149ba:	486e      	ldr	r0, [pc, #440]	; (8014b74 <MX_GPIO_Init+0x2d8>)
 80149bc:	f7ed ff12 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80149c0:	2200      	movs	r2, #0
 80149c2:	2140      	movs	r1, #64	; 0x40
 80149c4:	486c      	ldr	r0, [pc, #432]	; (8014b78 <MX_GPIO_Init+0x2dc>)
 80149c6:	f7ed ff0d 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80149ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80149d0:	2303      	movs	r3, #3
 80149d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149d4:	2300      	movs	r3, #0
 80149d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80149d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80149dc:	4619      	mov	r1, r3
 80149de:	4867      	ldr	r0, [pc, #412]	; (8014b7c <MX_GPIO_Init+0x2e0>)
 80149e0:	f7ed fd56 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80149e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80149e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80149ea:	4b65      	ldr	r3, [pc, #404]	; (8014b80 <MX_GPIO_Init+0x2e4>)
 80149ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149ee:	2300      	movs	r3, #0
 80149f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80149f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80149f6:	4619      	mov	r1, r3
 80149f8:	485c      	ldr	r0, [pc, #368]	; (8014b6c <MX_GPIO_Init+0x2d0>)
 80149fa:	f7ed fd49 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 80149fe:	f247 033c 	movw	r3, #28732	; 0x703c
 8014a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a04:	2301      	movs	r3, #1
 8014a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a14:	4619      	mov	r1, r3
 8014a16:	4854      	ldr	r0, [pc, #336]	; (8014b68 <MX_GPIO_Init+0x2cc>)
 8014a18:	f7ed fd3a 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8014a1c:	f648 73c0 	movw	r3, #36800	; 0x8fc0
 8014a20:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014a22:	2303      	movs	r3, #3
 8014a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a26:	2300      	movs	r3, #0
 8014a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a2e:	4619      	mov	r1, r3
 8014a30:	484d      	ldr	r0, [pc, #308]	; (8014b68 <MX_GPIO_Init+0x2cc>)
 8014a32:	f7ed fd2d 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD1_Pin;
 8014a36:	f240 2301 	movw	r3, #513	; 0x201
 8014a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a40:	2300      	movs	r3, #0
 8014a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a44:	2300      	movs	r3, #0
 8014a46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	4847      	ldr	r0, [pc, #284]	; (8014b6c <MX_GPIO_Init+0x2d0>)
 8014a50:	f7ed fd1e 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC6 PC7 
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7 
 8014a54:	f641 53cc 	movw	r3, #7628	; 0x1dcc
 8014a58:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a66:	4619      	mov	r1, r3
 8014a68:	4840      	ldr	r0, [pc, #256]	; (8014b6c <MX_GPIO_Init+0x2d0>)
 8014a6a:	f7ed fd11 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8014a6e:	2331      	movs	r3, #49	; 0x31
 8014a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014a72:	2303      	movs	r3, #3
 8014a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a76:	2300      	movs	r3, #0
 8014a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a7e:	4619      	mov	r1, r3
 8014a80:	483b      	ldr	r0, [pc, #236]	; (8014b70 <MX_GPIO_Init+0x2d4>)
 8014a82:	f7ed fd05 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8014a86:	2308      	movs	r3, #8
 8014a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a92:	2300      	movs	r3, #0
 8014a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	4834      	ldr	r0, [pc, #208]	; (8014b70 <MX_GPIO_Init+0x2d4>)
 8014a9e:	f7ed fcf7 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014aa2:	2340      	movs	r3, #64	; 0x40
 8014aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	482e      	ldr	r0, [pc, #184]	; (8014b70 <MX_GPIO_Init+0x2d4>)
 8014ab6:	f7ed fceb 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8014aba:	f244 0381 	movw	r3, #16513	; 0x4081
 8014abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ad0:	4619      	mov	r1, r3
 8014ad2:	4828      	ldr	r0, [pc, #160]	; (8014b74 <MX_GPIO_Init+0x2d8>)
 8014ad4:	f7ed fcdc 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8014ad8:	f649 4346 	movw	r3, #40006	; 0x9c46
 8014adc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014ade:	2303      	movs	r3, #3
 8014ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014aea:	4619      	mov	r1, r3
 8014aec:	4821      	ldr	r0, [pc, #132]	; (8014b74 <MX_GPIO_Init+0x2d8>)
 8014aee:	f7ed fccf 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8014af2:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8014af6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014af8:	2303      	movs	r3, #3
 8014afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014afc:	2300      	movs	r3, #0
 8014afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b04:	4619      	mov	r1, r3
 8014b06:	481c      	ldr	r0, [pc, #112]	; (8014b78 <MX_GPIO_Init+0x2dc>)
 8014b08:	f7ed fcc2 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8014b0c:	f643 43ff 	movw	r3, #15615	; 0x3cff
 8014b10:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014b12:	2303      	movs	r3, #3
 8014b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b16:	2300      	movs	r3, #0
 8014b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b1e:	4619      	mov	r1, r3
 8014b20:	4818      	ldr	r0, [pc, #96]	; (8014b84 <MX_GPIO_Init+0x2e8>)
 8014b22:	f7ed fcb5 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8014b26:	2340      	movs	r3, #64	; 0x40
 8014b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b32:	2300      	movs	r3, #0
 8014b34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8014b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	480e      	ldr	r0, [pc, #56]	; (8014b78 <MX_GPIO_Init+0x2dc>)
 8014b3e:	f7ed fca7 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8014b42:	2380      	movs	r3, #128	; 0x80
 8014b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014b46:	2300      	movs	r3, #0
 8014b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8014b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b52:	4619      	mov	r1, r3
 8014b54:	4808      	ldr	r0, [pc, #32]	; (8014b78 <MX_GPIO_Init+0x2dc>)
 8014b56:	f7ed fc9b 	bl	8002490 <HAL_GPIO_Init>

}
 8014b5a:	bf00      	nop
 8014b5c:	3738      	adds	r7, #56	; 0x38
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	40023800 	.word	0x40023800
 8014b68:	40021400 	.word	0x40021400
 8014b6c:	40020800 	.word	0x40020800
 8014b70:	40020000 	.word	0x40020000
 8014b74:	40020400 	.word	0x40020400
 8014b78:	40021800 	.word	0x40021800
 8014b7c:	40021000 	.word	0x40021000
 8014b80:	10110000 	.word	0x10110000
 8014b84:	40020c00 	.word	0x40020c00

08014b88 <F_GPIO_SetLedRed>:

/* USER CODE BEGIN 2 */
void F_GPIO_SetLedRed(int state){
 8014b88:	b480      	push	{r7}
 8014b8a:	b083      	sub	sp, #12
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
	(state) ? (GPIOB->ODR |= LED_Red) : (GPIOB->ODR &= ~LED_Red) ;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d006      	beq.n	8014ba4 <F_GPIO_SetLedRed+0x1c>
 8014b96:	4b09      	ldr	r3, [pc, #36]	; (8014bbc <F_GPIO_SetLedRed+0x34>)
 8014b98:	695b      	ldr	r3, [r3, #20]
 8014b9a:	4a08      	ldr	r2, [pc, #32]	; (8014bbc <F_GPIO_SetLedRed+0x34>)
 8014b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014ba0:	6153      	str	r3, [r2, #20]
}
 8014ba2:	e005      	b.n	8014bb0 <F_GPIO_SetLedRed+0x28>
	(state) ? (GPIOB->ODR |= LED_Red) : (GPIOB->ODR &= ~LED_Red) ;
 8014ba4:	4b05      	ldr	r3, [pc, #20]	; (8014bbc <F_GPIO_SetLedRed+0x34>)
 8014ba6:	695b      	ldr	r3, [r3, #20]
 8014ba8:	4a04      	ldr	r2, [pc, #16]	; (8014bbc <F_GPIO_SetLedRed+0x34>)
 8014baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014bae:	6153      	str	r3, [r2, #20]
}
 8014bb0:	bf00      	nop
 8014bb2:	370c      	adds	r7, #12
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bba:	4770      	bx	lr
 8014bbc:	40020400 	.word	0x40020400

08014bc0 <F_GPIO_SetLedBlue>:

void F_GPIO_SetLedBlue(int state){
 8014bc0:	b480      	push	{r7}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
	// Led sur PB7
	(state) ? (GPIOB->ODR |= LED_Blue) : (GPIOB->ODR &= ~LED_Blue) ;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d006      	beq.n	8014bdc <F_GPIO_SetLedBlue+0x1c>
 8014bce:	4b09      	ldr	r3, [pc, #36]	; (8014bf4 <F_GPIO_SetLedBlue+0x34>)
 8014bd0:	695b      	ldr	r3, [r3, #20]
 8014bd2:	4a08      	ldr	r2, [pc, #32]	; (8014bf4 <F_GPIO_SetLedBlue+0x34>)
 8014bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bd8:	6153      	str	r3, [r2, #20]
}
 8014bda:	e005      	b.n	8014be8 <F_GPIO_SetLedBlue+0x28>
	(state) ? (GPIOB->ODR |= LED_Blue) : (GPIOB->ODR &= ~LED_Blue) ;
 8014bdc:	4b05      	ldr	r3, [pc, #20]	; (8014bf4 <F_GPIO_SetLedBlue+0x34>)
 8014bde:	695b      	ldr	r3, [r3, #20]
 8014be0:	4a04      	ldr	r2, [pc, #16]	; (8014bf4 <F_GPIO_SetLedBlue+0x34>)
 8014be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014be6:	6153      	str	r3, [r2, #20]
}
 8014be8:	bf00      	nop
 8014bea:	370c      	adds	r7, #12
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr
 8014bf4:	40020400 	.word	0x40020400

08014bf8 <F_GPIO_SetLedGreen>:

void F_GPIO_SetLedGreen(int state){
 8014bf8:	b480      	push	{r7}
 8014bfa:	b083      	sub	sp, #12
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
	// Led sur PB14
	(state) ? (GPIOB->ODR |= LED_Green) : (GPIOB->ODR &= ~LED_Green) ;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d006      	beq.n	8014c14 <F_GPIO_SetLedGreen+0x1c>
 8014c06:	4b09      	ldr	r3, [pc, #36]	; (8014c2c <F_GPIO_SetLedGreen+0x34>)
 8014c08:	695b      	ldr	r3, [r3, #20]
 8014c0a:	4a08      	ldr	r2, [pc, #32]	; (8014c2c <F_GPIO_SetLedGreen+0x34>)
 8014c0c:	f043 0301 	orr.w	r3, r3, #1
 8014c10:	6153      	str	r3, [r2, #20]
}
 8014c12:	e005      	b.n	8014c20 <F_GPIO_SetLedGreen+0x28>
	(state) ? (GPIOB->ODR |= LED_Green) : (GPIOB->ODR &= ~LED_Green) ;
 8014c14:	4b05      	ldr	r3, [pc, #20]	; (8014c2c <F_GPIO_SetLedGreen+0x34>)
 8014c16:	695b      	ldr	r3, [r3, #20]
 8014c18:	4a04      	ldr	r2, [pc, #16]	; (8014c2c <F_GPIO_SetLedGreen+0x34>)
 8014c1a:	f023 0301 	bic.w	r3, r3, #1
 8014c1e:	6153      	str	r3, [r2, #20]
}
 8014c20:	bf00      	nop
 8014c22:	370c      	adds	r7, #12
 8014c24:	46bd      	mov	sp, r7
 8014c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2a:	4770      	bx	lr
 8014c2c:	40020400 	.word	0x40020400

08014c30 <F_GPIO_GetTirette>:
	int l_state = 0;
	(GPIOC->IDR & BP_NUCLEO) ? (l_state=1) : (l_state=0) ;
	return l_state;
}

int F_GPIO_GetTirette(void){
 8014c30:	b480      	push	{r7}
 8014c32:	b083      	sub	sp, #12
 8014c34:	af00      	add	r7, sp, #0
	int l_state = 0;
 8014c36:	2300      	movs	r3, #0
 8014c38:	607b      	str	r3, [r7, #4]
	(GPIOF->IDR & GPIO_PIN_15) ? (l_state=1) : (l_state=0) ;
 8014c3a:	4b09      	ldr	r3, [pc, #36]	; (8014c60 <F_GPIO_GetTirette+0x30>)
 8014c3c:	691b      	ldr	r3, [r3, #16]
 8014c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d002      	beq.n	8014c4c <F_GPIO_GetTirette+0x1c>
 8014c46:	2301      	movs	r3, #1
 8014c48:	607b      	str	r3, [r7, #4]
 8014c4a:	e001      	b.n	8014c50 <F_GPIO_GetTirette+0x20>
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	607b      	str	r3, [r7, #4]
	return l_state;
 8014c50:	687b      	ldr	r3, [r7, #4]
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	370c      	adds	r7, #12
 8014c56:	46bd      	mov	sp, r7
 8014c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop
 8014c60:	40021400 	.word	0x40021400

08014c64 <F_GPIO_SetMotorDroitDir>:

void F_GPIO_SetMotorDroitDir(int dir){
 8014c64:	b480      	push	{r7}
 8014c66:	b083      	sub	sp, #12
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
	// PF 12
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_12) : (GPIOF->ODR &= ~GPIO_ODR_ODR_12) ;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	da06      	bge.n	8014c80 <F_GPIO_SetMotorDroitDir+0x1c>
 8014c72:	4b09      	ldr	r3, [pc, #36]	; (8014c98 <F_GPIO_SetMotorDroitDir+0x34>)
 8014c74:	695b      	ldr	r3, [r3, #20]
 8014c76:	4a08      	ldr	r2, [pc, #32]	; (8014c98 <F_GPIO_SetMotorDroitDir+0x34>)
 8014c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014c7c:	6153      	str	r3, [r2, #20]
}
 8014c7e:	e005      	b.n	8014c8c <F_GPIO_SetMotorDroitDir+0x28>
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_12) : (GPIOF->ODR &= ~GPIO_ODR_ODR_12) ;
 8014c80:	4b05      	ldr	r3, [pc, #20]	; (8014c98 <F_GPIO_SetMotorDroitDir+0x34>)
 8014c82:	695b      	ldr	r3, [r3, #20]
 8014c84:	4a04      	ldr	r2, [pc, #16]	; (8014c98 <F_GPIO_SetMotorDroitDir+0x34>)
 8014c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c8a:	6153      	str	r3, [r2, #20]
}
 8014c8c:	bf00      	nop
 8014c8e:	370c      	adds	r7, #12
 8014c90:	46bd      	mov	sp, r7
 8014c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c96:	4770      	bx	lr
 8014c98:	40021400 	.word	0x40021400

08014c9c <F_GPIO_SetMotorGaucheDir>:

void F_GPIO_SetMotorGaucheDir(int dir){
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
	// PF 13
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_13) : (GPIOF->ODR &= ~GPIO_ODR_ODR_13) ;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	da06      	bge.n	8014cb8 <F_GPIO_SetMotorGaucheDir+0x1c>
 8014caa:	4b09      	ldr	r3, [pc, #36]	; (8014cd0 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014cac:	695b      	ldr	r3, [r3, #20]
 8014cae:	4a08      	ldr	r2, [pc, #32]	; (8014cd0 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014cb4:	6153      	str	r3, [r2, #20]
}
 8014cb6:	e005      	b.n	8014cc4 <F_GPIO_SetMotorGaucheDir+0x28>
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_13) : (GPIOF->ODR &= ~GPIO_ODR_ODR_13) ;
 8014cb8:	4b05      	ldr	r3, [pc, #20]	; (8014cd0 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014cba:	695b      	ldr	r3, [r3, #20]
 8014cbc:	4a04      	ldr	r2, [pc, #16]	; (8014cd0 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014cc2:	6153      	str	r3, [r2, #20]
}
 8014cc4:	bf00      	nop
 8014cc6:	370c      	adds	r7, #12
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr
 8014cd0:	40021400 	.word	0x40021400

08014cd4 <F_GPIO_SetEnableMotors>:

void F_GPIO_SetEnableMotors(int state){
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
	// PF 14
	(state) ? (GPIOF->ODR |= GPIO_ODR_ODR_14) : (GPIOF->ODR &= ~GPIO_ODR_ODR_14) ;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d006      	beq.n	8014cf0 <F_GPIO_SetEnableMotors+0x1c>
 8014ce2:	4b09      	ldr	r3, [pc, #36]	; (8014d08 <F_GPIO_SetEnableMotors+0x34>)
 8014ce4:	695b      	ldr	r3, [r3, #20]
 8014ce6:	4a08      	ldr	r2, [pc, #32]	; (8014d08 <F_GPIO_SetEnableMotors+0x34>)
 8014ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014cec:	6153      	str	r3, [r2, #20]
}
 8014cee:	e005      	b.n	8014cfc <F_GPIO_SetEnableMotors+0x28>
	(state) ? (GPIOF->ODR |= GPIO_ODR_ODR_14) : (GPIOF->ODR &= ~GPIO_ODR_ODR_14) ;
 8014cf0:	4b05      	ldr	r3, [pc, #20]	; (8014d08 <F_GPIO_SetEnableMotors+0x34>)
 8014cf2:	695b      	ldr	r3, [r3, #20]
 8014cf4:	4a04      	ldr	r2, [pc, #16]	; (8014d08 <F_GPIO_SetEnableMotors+0x34>)
 8014cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014cfa:	6153      	str	r3, [r2, #20]
}
 8014cfc:	bf00      	nop
 8014cfe:	370c      	adds	r7, #12
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr
 8014d08:	40021400 	.word	0x40021400

08014d0c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8014d10:	4b1b      	ldr	r3, [pc, #108]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d12:	4a1c      	ldr	r2, [pc, #112]	; (8014d84 <MX_I2C1_Init+0x78>)
 8014d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8014d16:	4b1a      	ldr	r3, [pc, #104]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d18:	4a1b      	ldr	r2, [pc, #108]	; (8014d88 <MX_I2C1_Init+0x7c>)
 8014d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014d1c:	4b18      	ldr	r3, [pc, #96]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d1e:	2200      	movs	r2, #0
 8014d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8014d22:	4b17      	ldr	r3, [pc, #92]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d24:	2200      	movs	r2, #0
 8014d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014d28:	4b15      	ldr	r3, [pc, #84]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014d30:	4b13      	ldr	r3, [pc, #76]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d32:	2200      	movs	r2, #0
 8014d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8014d36:	4b12      	ldr	r3, [pc, #72]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d38:	2200      	movs	r2, #0
 8014d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014d3c:	4b10      	ldr	r3, [pc, #64]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d3e:	2200      	movs	r2, #0
 8014d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014d42:	4b0f      	ldr	r3, [pc, #60]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d44:	2200      	movs	r2, #0
 8014d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014d48:	480d      	ldr	r0, [pc, #52]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d4a:	f7ed fd65 	bl	8002818 <HAL_I2C_Init>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d001      	beq.n	8014d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8014d54:	f000 fc72 	bl	801563c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014d58:	2100      	movs	r1, #0
 8014d5a:	4809      	ldr	r0, [pc, #36]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d5c:	f7ed fe84 	bl	8002a68 <HAL_I2CEx_ConfigAnalogFilter>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d001      	beq.n	8014d6a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8014d66:	f000 fc69 	bl	801563c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	4804      	ldr	r0, [pc, #16]	; (8014d80 <MX_I2C1_Init+0x74>)
 8014d6e:	f7ed feb7 	bl	8002ae0 <HAL_I2CEx_ConfigDigitalFilter>
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d001      	beq.n	8014d7c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8014d78:	f000 fc60 	bl	801563c <Error_Handler>
  }

}
 8014d7c:	bf00      	nop
 8014d7e:	bd80      	pop	{r7, pc}
 8014d80:	20007674 	.word	0x20007674
 8014d84:	40005400 	.word	0x40005400
 8014d88:	000186a0 	.word	0x000186a0

08014d8c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8014d90:	4b1b      	ldr	r3, [pc, #108]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014d92:	4a1c      	ldr	r2, [pc, #112]	; (8014e04 <MX_I2C2_Init+0x78>)
 8014d94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8014d96:	4b1a      	ldr	r3, [pc, #104]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014d98:	4a1b      	ldr	r2, [pc, #108]	; (8014e08 <MX_I2C2_Init+0x7c>)
 8014d9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014d9c:	4b18      	ldr	r3, [pc, #96]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014d9e:	2200      	movs	r2, #0
 8014da0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8014da2:	4b17      	ldr	r3, [pc, #92]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014da4:	2200      	movs	r2, #0
 8014da6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014da8:	4b15      	ldr	r3, [pc, #84]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014dae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014db0:	4b13      	ldr	r3, [pc, #76]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014db2:	2200      	movs	r2, #0
 8014db4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8014db6:	4b12      	ldr	r3, [pc, #72]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014db8:	2200      	movs	r2, #0
 8014dba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014dbc:	4b10      	ldr	r3, [pc, #64]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014dc2:	4b0f      	ldr	r3, [pc, #60]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8014dc8:	480d      	ldr	r0, [pc, #52]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014dca:	f7ed fd25 	bl	8002818 <HAL_I2C_Init>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d001      	beq.n	8014dd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8014dd4:	f000 fc32 	bl	801563c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014dd8:	2100      	movs	r1, #0
 8014dda:	4809      	ldr	r0, [pc, #36]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014ddc:	f7ed fe44 	bl	8002a68 <HAL_I2CEx_ConfigAnalogFilter>
 8014de0:	4603      	mov	r3, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d001      	beq.n	8014dea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8014de6:	f000 fc29 	bl	801563c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8014dea:	2100      	movs	r1, #0
 8014dec:	4804      	ldr	r0, [pc, #16]	; (8014e00 <MX_I2C2_Init+0x74>)
 8014dee:	f7ed fe77 	bl	8002ae0 <HAL_I2CEx_ConfigDigitalFilter>
 8014df2:	4603      	mov	r3, r0
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d001      	beq.n	8014dfc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8014df8:	f000 fc20 	bl	801563c <Error_Handler>
  }

}
 8014dfc:	bf00      	nop
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	200076c8 	.word	0x200076c8
 8014e04:	40005800 	.word	0x40005800
 8014e08:	000186a0 	.word	0x000186a0

08014e0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b08c      	sub	sp, #48	; 0x30
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e14:	f107 031c 	add.w	r3, r7, #28
 8014e18:	2200      	movs	r2, #0
 8014e1a:	601a      	str	r2, [r3, #0]
 8014e1c:	605a      	str	r2, [r3, #4]
 8014e1e:	609a      	str	r2, [r3, #8]
 8014e20:	60da      	str	r2, [r3, #12]
 8014e22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	4a32      	ldr	r2, [pc, #200]	; (8014ef4 <HAL_I2C_MspInit+0xe8>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d12d      	bne.n	8014e8a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014e2e:	2300      	movs	r3, #0
 8014e30:	61bb      	str	r3, [r7, #24]
 8014e32:	4b31      	ldr	r3, [pc, #196]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e36:	4a30      	ldr	r2, [pc, #192]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e38:	f043 0302 	orr.w	r3, r3, #2
 8014e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8014e3e:	4b2e      	ldr	r3, [pc, #184]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e42:	f003 0302 	and.w	r3, r3, #2
 8014e46:	61bb      	str	r3, [r7, #24]
 8014e48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8014e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014e50:	2312      	movs	r3, #18
 8014e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014e54:	2301      	movs	r3, #1
 8014e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e58:	2303      	movs	r3, #3
 8014e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014e5c:	2304      	movs	r3, #4
 8014e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e60:	f107 031c 	add.w	r3, r7, #28
 8014e64:	4619      	mov	r1, r3
 8014e66:	4825      	ldr	r0, [pc, #148]	; (8014efc <HAL_I2C_MspInit+0xf0>)
 8014e68:	f7ed fb12 	bl	8002490 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	617b      	str	r3, [r7, #20]
 8014e70:	4b21      	ldr	r3, [pc, #132]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e74:	4a20      	ldr	r2, [pc, #128]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8014e7c:	4b1e      	ldr	r3, [pc, #120]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014e84:	617b      	str	r3, [r7, #20]
 8014e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8014e88:	e030      	b.n	8014eec <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	4a1c      	ldr	r2, [pc, #112]	; (8014f00 <HAL_I2C_MspInit+0xf4>)
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d12b      	bne.n	8014eec <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014e94:	2300      	movs	r3, #0
 8014e96:	613b      	str	r3, [r7, #16]
 8014e98:	4b17      	ldr	r3, [pc, #92]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e9c:	4a16      	ldr	r2, [pc, #88]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014e9e:	f043 0320 	orr.w	r3, r3, #32
 8014ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8014ea4:	4b14      	ldr	r3, [pc, #80]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ea8:	f003 0320 	and.w	r3, r3, #32
 8014eac:	613b      	str	r3, [r7, #16]
 8014eae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8014eb0:	2303      	movs	r3, #3
 8014eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014eb4:	2312      	movs	r3, #18
 8014eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014eb8:	2301      	movs	r3, #1
 8014eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ebc:	2303      	movs	r3, #3
 8014ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8014ec0:	2304      	movs	r3, #4
 8014ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014ec4:	f107 031c 	add.w	r3, r7, #28
 8014ec8:	4619      	mov	r1, r3
 8014eca:	480e      	ldr	r0, [pc, #56]	; (8014f04 <HAL_I2C_MspInit+0xf8>)
 8014ecc:	f7ed fae0 	bl	8002490 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	60fb      	str	r3, [r7, #12]
 8014ed4:	4b08      	ldr	r3, [pc, #32]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ed8:	4a07      	ldr	r2, [pc, #28]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014ede:	6413      	str	r3, [r2, #64]	; 0x40
 8014ee0:	4b05      	ldr	r3, [pc, #20]	; (8014ef8 <HAL_I2C_MspInit+0xec>)
 8014ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014ee8:	60fb      	str	r3, [r7, #12]
 8014eea:	68fb      	ldr	r3, [r7, #12]
}
 8014eec:	bf00      	nop
 8014eee:	3730      	adds	r7, #48	; 0x30
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	40005400 	.word	0x40005400
 8014ef8:	40023800 	.word	0x40023800
 8014efc:	40020400 	.word	0x40020400
 8014f00:	40005800 	.word	0x40005800
 8014f04:	40021400 	.word	0x40021400

08014f08 <F_I2C2_WriteRegister>:

/** I2C2 *****/
/**
 * Write a single value in a slave register
 */
uint8_t F_I2C2_WriteRegister(uint8_t slave_addr, uint16_t register_addr, uint8_t *value, uint8_t size){
 8014f08:	b480      	push	{r7}
 8014f0a:	b085      	sub	sp, #20
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	603a      	str	r2, [r7, #0]
 8014f10:	461a      	mov	r2, r3
 8014f12:	4603      	mov	r3, r0
 8014f14:	71fb      	strb	r3, [r7, #7]
 8014f16:	460b      	mov	r3, r1
 8014f18:	80bb      	strh	r3, [r7, #4]
 8014f1a:	4613      	mov	r3, r2
 8014f1c:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = I2C_STATUS_OK;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	72bb      	strb	r3, [r7, #10]
	uint32_t timeout = 0;
 8014f22:	2300      	movs	r3, #0
 8014f24:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8014f26:	2300      	movs	r3, #0
 8014f28:	72fb      	strb	r3, [r7, #11]

    // Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 8014f2a:	4b38      	ldr	r3, [pc, #224]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	4a37      	ldr	r2, [pc, #220]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f34:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8014f36:	e002      	b.n	8014f3e <F_I2C2_WriteRegister+0x36>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8014f3e:	4b33      	ldr	r3, [pc, #204]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f40:	695b      	ldr	r3, [r3, #20]
 8014f42:	f003 0301 	and.w	r3, r3, #1
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d0f6      	beq.n	8014f38 <F_I2C2_WriteRegister+0x30>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 8014f4a:	79fb      	ldrb	r3, [r7, #7]
 8014f4c:	4a2f      	ldr	r2, [pc, #188]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8014f52:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8014f54:	e002      	b.n	8014f5c <F_I2C2_WriteRegister+0x54>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8014f5c:	4b2b      	ldr	r3, [pc, #172]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f5e:	695b      	ldr	r3, [r3, #20]
 8014f60:	f003 0302 	and.w	r3, r3, #2
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d0f6      	beq.n	8014f56 <F_I2C2_WriteRegister+0x4e>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 8014f68:	4b28      	ldr	r3, [pc, #160]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f6a:	699b      	ldr	r3, [r3, #24]
 8014f6c:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 8014f6e:	88bb      	ldrh	r3, [r7, #4]
 8014f70:	0a1b      	lsrs	r3, r3, #8
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	4b25      	ldr	r3, [pc, #148]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f78:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8014f7a:	bf00      	nop
 8014f7c:	4b23      	ldr	r3, [pc, #140]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f7e:	695b      	ldr	r3, [r3, #20]
 8014f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d105      	bne.n	8014f94 <F_I2C2_WriteRegister+0x8c>
 8014f88:	4b20      	ldr	r3, [pc, #128]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f8a:	695b      	ldr	r3, [r3, #20]
 8014f8c:	f003 0304 	and.w	r3, r3, #4
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d0f3      	beq.n	8014f7c <F_I2C2_WriteRegister+0x74>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 8014f94:	88bb      	ldrh	r3, [r7, #4]
 8014f96:	b2da      	uxtb	r2, r3
 8014f98:	4b1c      	ldr	r3, [pc, #112]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014f9a:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8014f9c:	bf00      	nop
 8014f9e:	4b1b      	ldr	r3, [pc, #108]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014fa0:	695b      	ldr	r3, [r3, #20]
 8014fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d105      	bne.n	8014fb6 <F_I2C2_WriteRegister+0xae>
 8014faa:	4b18      	ldr	r3, [pc, #96]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014fac:	695b      	ldr	r3, [r3, #20]
 8014fae:	f003 0304 	and.w	r3, r3, #4
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d0f3      	beq.n	8014f9e <F_I2C2_WriteRegister+0x96>

	for(i=0;i<size;i++)
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	72fb      	strb	r3, [r7, #11]
 8014fba:	e015      	b.n	8014fe8 <F_I2C2_WriteRegister+0xe0>
	{

		// Send new value to write to the register
		I2C2->DR = value[i];
 8014fbc:	7afb      	ldrb	r3, [r7, #11]
 8014fbe:	683a      	ldr	r2, [r7, #0]
 8014fc0:	4413      	add	r3, r2
 8014fc2:	781a      	ldrb	r2, [r3, #0]
 8014fc4:	4b11      	ldr	r3, [pc, #68]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014fc6:	611a      	str	r2, [r3, #16]
		while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8014fc8:	bf00      	nop
 8014fca:	4b10      	ldr	r3, [pc, #64]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014fcc:	695b      	ldr	r3, [r3, #20]
 8014fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d105      	bne.n	8014fe2 <F_I2C2_WriteRegister+0xda>
 8014fd6:	4b0d      	ldr	r3, [pc, #52]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014fd8:	695b      	ldr	r3, [r3, #20]
 8014fda:	f003 0304 	and.w	r3, r3, #4
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d0f3      	beq.n	8014fca <F_I2C2_WriteRegister+0xc2>
	for(i=0;i<size;i++)
 8014fe2:	7afb      	ldrb	r3, [r7, #11]
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	72fb      	strb	r3, [r7, #11]
 8014fe8:	7afa      	ldrb	r2, [r7, #11]
 8014fea:	79bb      	ldrb	r3, [r7, #6]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d3e5      	bcc.n	8014fbc <F_I2C2_WriteRegister+0xb4>

	}

	I2C2->CR1 |= I2C_CR1_STOP; // send STOP bit
 8014ff0:	4b06      	ldr	r3, [pc, #24]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a05      	ldr	r2, [pc, #20]	; (801500c <F_I2C2_WriteRegister+0x104>)
 8014ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014ffa:	6013      	str	r3, [r2, #0]
	return i2c_status;
 8014ffc:	7abb      	ldrb	r3, [r7, #10]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3714      	adds	r7, #20
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	40005800 	.word	0x40005800

08015010 <F_I2C2_ReadRegisterVL53L1X>:
	return i2c_status;
}


// Read x value from the device
uint8_t F_I2C2_ReadRegisterVL53L1X(uint8_t slave_addr, uint16_t register_addr, uint8_t nb_value_to_read, uint8_t *value_read){
 8015010:	b480      	push	{r7}
 8015012:	b085      	sub	sp, #20
 8015014:	af00      	add	r7, sp, #0
 8015016:	603b      	str	r3, [r7, #0]
 8015018:	4603      	mov	r3, r0
 801501a:	71fb      	strb	r3, [r7, #7]
 801501c:	460b      	mov	r3, r1
 801501e:	80bb      	strh	r3, [r7, #4]
 8015020:	4613      	mov	r3, r2
 8015022:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = 0;	// Init return value to error
 8015024:	2300      	movs	r3, #0
 8015026:	72bb      	strb	r3, [r7, #10]
	uint8_t status = I2C_STATUS_OK;
 8015028:	2300      	movs	r3, #0
 801502a:	727b      	strb	r3, [r7, #9]
	int timeout=0;
 801502c:	2300      	movs	r3, #0
 801502e:	60fb      	str	r3, [r7, #12]

	uint8_t i = 0;
 8015030:	2300      	movs	r3, #0
 8015032:	72fb      	strb	r3, [r7, #11]

	// Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 8015034:	4b4e      	ldr	r3, [pc, #312]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	4a4d      	ldr	r2, [pc, #308]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801503a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801503e:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8015040:	e002      	b.n	8015048 <F_I2C2_ReadRegisterVL53L1X+0x38>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	3301      	adds	r3, #1
 8015046:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8015048:	4b49      	ldr	r3, [pc, #292]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801504a:	695b      	ldr	r3, [r3, #20]
 801504c:	f003 0301 	and.w	r3, r3, #1
 8015050:	2b00      	cmp	r3, #0
 8015052:	d0f6      	beq.n	8015042 <F_I2C2_ReadRegisterVL53L1X+0x32>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 8015054:	79fb      	ldrb	r3, [r7, #7]
 8015056:	4a46      	ldr	r2, [pc, #280]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015058:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801505c:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 801505e:	e002      	b.n	8015066 <F_I2C2_ReadRegisterVL53L1X+0x56>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	3301      	adds	r3, #1
 8015064:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8015066:	4b42      	ldr	r3, [pc, #264]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015068:	695b      	ldr	r3, [r3, #20]
 801506a:	f003 0302 	and.w	r3, r3, #2
 801506e:	2b00      	cmp	r3, #0
 8015070:	d0f6      	beq.n	8015060 <F_I2C2_ReadRegisterVL53L1X+0x50>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 8015072:	4b3f      	ldr	r3, [pc, #252]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015074:	699b      	ldr	r3, [r3, #24]
 8015076:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 8015078:	88bb      	ldrh	r3, [r7, #4]
 801507a:	0a1b      	lsrs	r3, r3, #8
 801507c:	b29b      	uxth	r3, r3
 801507e:	b2da      	uxtb	r2, r3
 8015080:	4b3b      	ldr	r3, [pc, #236]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015082:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8015084:	bf00      	nop
 8015086:	4b3a      	ldr	r3, [pc, #232]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015088:	695b      	ldr	r3, [r3, #20]
 801508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801508e:	2b00      	cmp	r3, #0
 8015090:	d105      	bne.n	801509e <F_I2C2_ReadRegisterVL53L1X+0x8e>
 8015092:	4b37      	ldr	r3, [pc, #220]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015094:	695b      	ldr	r3, [r3, #20]
 8015096:	f003 0304 	and.w	r3, r3, #4
 801509a:	2b00      	cmp	r3, #0
 801509c:	d0f3      	beq.n	8015086 <F_I2C2_ReadRegisterVL53L1X+0x76>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 801509e:	88bb      	ldrh	r3, [r7, #4]
 80150a0:	b2da      	uxtb	r2, r3
 80150a2:	4b33      	ldr	r3, [pc, #204]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150a4:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80150a6:	bf00      	nop
 80150a8:	4b31      	ldr	r3, [pc, #196]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150aa:	695b      	ldr	r3, [r3, #20]
 80150ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d105      	bne.n	80150c0 <F_I2C2_ReadRegisterVL53L1X+0xb0>
 80150b4:	4b2e      	ldr	r3, [pc, #184]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150b6:	695b      	ldr	r3, [r3, #20]
 80150b8:	f003 0304 	and.w	r3, r3, #4
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d0f3      	beq.n	80150a8 <F_I2C2_ReadRegisterVL53L1X+0x98>


	// Send repeated start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 80150c0:	4b2b      	ldr	r3, [pc, #172]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4a2a      	ldr	r2, [pc, #168]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150ca:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB));	// wait for START condition (SB=1)
 80150cc:	bf00      	nop
 80150ce:	4b28      	ldr	r3, [pc, #160]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150d0:	695b      	ldr	r3, [r3, #20]
 80150d2:	f003 0301 	and.w	r3, r3, #1
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d0f9      	beq.n	80150ce <F_I2C2_ReadRegisterVL53L1X+0xbe>

	timeout=0;
 80150da:	2300      	movs	r3, #0
 80150dc:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C2->DR = slave_addr | 1;	// address + read
 80150de:	79fb      	ldrb	r3, [r7, #7]
 80150e0:	f043 0301 	orr.w	r3, r3, #1
 80150e4:	b2da      	uxtb	r2, r3
 80150e6:	4b22      	ldr	r3, [pc, #136]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150e8:	611a      	str	r2, [r3, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 80150ea:	e002      	b.n	80150f2 <F_I2C2_ReadRegisterVL53L1X+0xe2>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	3301      	adds	r3, #1
 80150f0:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 80150f2:	4b1f      	ldr	r3, [pc, #124]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80150f4:	695b      	ldr	r3, [r3, #20]
 80150f6:	f003 0302 	and.w	r3, r3, #2
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d0f6      	beq.n	80150ec <F_I2C2_ReadRegisterVL53L1X+0xdc>
	}
	i2c_status = I2C2->SR2; // read status to clear flag
 80150fe:	4b1c      	ldr	r3, [pc, #112]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015100:	699b      	ldr	r3, [r3, #24]
 8015102:	72bb      	strb	r3, [r7, #10]


	// prepare ACK
	I2C2->CR1 |= I2C_CR1_ACK;
 8015104:	4b1a      	ldr	r3, [pc, #104]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	4a19      	ldr	r2, [pc, #100]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801510a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801510e:	6013      	str	r3, [r2, #0]

	for(i=0;i<nb_value_to_read;i++)
 8015110:	2300      	movs	r3, #0
 8015112:	72fb      	strb	r3, [r7, #11]
 8015114:	e01b      	b.n	801514e <F_I2C2_ReadRegisterVL53L1X+0x13e>
	{

		// If this is the last byte to receive
		if((i+1) >= nb_value_to_read)
 8015116:	7afb      	ldrb	r3, [r7, #11]
 8015118:	1c5a      	adds	r2, r3, #1
 801511a:	79bb      	ldrb	r3, [r7, #6]
 801511c:	429a      	cmp	r2, r3
 801511e:	db05      	blt.n	801512c <F_I2C2_ReadRegisterVL53L1X+0x11c>
		{
			// prepare NACK
			I2C2->CR1 &= ~I2C_CR1_ACK;
 8015120:	4b13      	ldr	r3, [pc, #76]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	4a12      	ldr	r2, [pc, #72]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801512a:	6013      	str	r3, [r2, #0]
		}

		// Wait for Data available
			while (!(I2C2->SR1 & I2C_SR1_RXNE));
 801512c:	bf00      	nop
 801512e:	4b10      	ldr	r3, [pc, #64]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015130:	695b      	ldr	r3, [r3, #20]
 8015132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015136:	2b00      	cmp	r3, #0
 8015138:	d0f9      	beq.n	801512e <F_I2C2_ReadRegisterVL53L1X+0x11e>
			value_read[i] = I2C2->DR; 			// Address in chip -> DR & write
 801513a:	4b0d      	ldr	r3, [pc, #52]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801513c:	6919      	ldr	r1, [r3, #16]
 801513e:	7afb      	ldrb	r3, [r7, #11]
 8015140:	683a      	ldr	r2, [r7, #0]
 8015142:	4413      	add	r3, r2
 8015144:	b2ca      	uxtb	r2, r1
 8015146:	701a      	strb	r2, [r3, #0]
	for(i=0;i<nb_value_to_read;i++)
 8015148:	7afb      	ldrb	r3, [r7, #11]
 801514a:	3301      	adds	r3, #1
 801514c:	72fb      	strb	r3, [r7, #11]
 801514e:	7afa      	ldrb	r2, [r7, #11]
 8015150:	79bb      	ldrb	r3, [r7, #6]
 8015152:	429a      	cmp	r2, r3
 8015154:	d3df      	bcc.n	8015116 <F_I2C2_ReadRegisterVL53L1X+0x106>
	}


	// send STOP bit
	I2C2->CR1 |= I2C_CR1_STOP;
 8015156:	4b06      	ldr	r3, [pc, #24]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4a05      	ldr	r2, [pc, #20]	; (8015170 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801515c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015160:	6013      	str	r3, [r2, #0]
	return status;
 8015162:	7a7b      	ldrb	r3, [r7, #9]
}
 8015164:	4618      	mov	r0, r3
 8015166:	3714      	adds	r7, #20
 8015168:	46bd      	mov	sp, r7
 801516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516e:	4770      	bx	lr
 8015170:	40005800 	.word	0x40005800

08015174 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b084      	sub	sp, #16
 8015178:	af04      	add	r7, sp, #16

	/* IP addresses initialization */
		  IP_ADDRESS[0] = 192;
 801517a:	4b8b      	ldr	r3, [pc, #556]	; (80153a8 <MX_LWIP_Init+0x234>)
 801517c:	22c0      	movs	r2, #192	; 0xc0
 801517e:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = 168;
 8015180:	4b89      	ldr	r3, [pc, #548]	; (80153a8 <MX_LWIP_Init+0x234>)
 8015182:	22a8      	movs	r2, #168	; 0xa8
 8015184:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = 1;
 8015186:	4b88      	ldr	r3, [pc, #544]	; (80153a8 <MX_LWIP_Init+0x234>)
 8015188:	2201      	movs	r2, #1
 801518a:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = 21;
 801518c:	4b86      	ldr	r3, [pc, #536]	; (80153a8 <MX_LWIP_Init+0x234>)
 801518e:	2215      	movs	r2, #21
 8015190:	70da      	strb	r2, [r3, #3]
		  NETMASK_ADDRESS[0] = 255;
 8015192:	4b86      	ldr	r3, [pc, #536]	; (80153ac <MX_LWIP_Init+0x238>)
 8015194:	22ff      	movs	r2, #255	; 0xff
 8015196:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = 255;
 8015198:	4b84      	ldr	r3, [pc, #528]	; (80153ac <MX_LWIP_Init+0x238>)
 801519a:	22ff      	movs	r2, #255	; 0xff
 801519c:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = 255;
 801519e:	4b83      	ldr	r3, [pc, #524]	; (80153ac <MX_LWIP_Init+0x238>)
 80151a0:	22ff      	movs	r2, #255	; 0xff
 80151a2:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = 0;
 80151a4:	4b81      	ldr	r3, [pc, #516]	; (80153ac <MX_LWIP_Init+0x238>)
 80151a6:	2200      	movs	r2, #0
 80151a8:	70da      	strb	r2, [r3, #3]
		  GATEWAY_ADDRESS[0] = 192;
 80151aa:	4b81      	ldr	r3, [pc, #516]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80151ac:	22c0      	movs	r2, #192	; 0xc0
 80151ae:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = 168;
 80151b0:	4b7f      	ldr	r3, [pc, #508]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80151b2:	22a8      	movs	r2, #168	; 0xa8
 80151b4:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = 1;
 80151b6:	4b7e      	ldr	r3, [pc, #504]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80151b8:	2201      	movs	r2, #1
 80151ba:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = 1;
 80151bc:	4b7c      	ldr	r3, [pc, #496]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80151be:	2201      	movs	r2, #1
 80151c0:	70da      	strb	r2, [r3, #3]

		  /* Initilialize the LwIP stack without RTOS */
		  lwip_init();
 80151c2:	f7f2 ff60 	bl	8008086 <lwip_init>

		  /* IP addresses initialization without DHCP (IPv4) */
		  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80151c6:	4b78      	ldr	r3, [pc, #480]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151c8:	781b      	ldrb	r3, [r3, #0]
 80151ca:	061a      	lsls	r2, r3, #24
 80151cc:	4b76      	ldr	r3, [pc, #472]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151ce:	785b      	ldrb	r3, [r3, #1]
 80151d0:	041b      	lsls	r3, r3, #16
 80151d2:	431a      	orrs	r2, r3
 80151d4:	4b74      	ldr	r3, [pc, #464]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151d6:	789b      	ldrb	r3, [r3, #2]
 80151d8:	021b      	lsls	r3, r3, #8
 80151da:	4313      	orrs	r3, r2
 80151dc:	4a72      	ldr	r2, [pc, #456]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151de:	78d2      	ldrb	r2, [r2, #3]
 80151e0:	4313      	orrs	r3, r2
 80151e2:	061a      	lsls	r2, r3, #24
 80151e4:	4b70      	ldr	r3, [pc, #448]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	0619      	lsls	r1, r3, #24
 80151ea:	4b6f      	ldr	r3, [pc, #444]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151ec:	785b      	ldrb	r3, [r3, #1]
 80151ee:	041b      	lsls	r3, r3, #16
 80151f0:	4319      	orrs	r1, r3
 80151f2:	4b6d      	ldr	r3, [pc, #436]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151f4:	789b      	ldrb	r3, [r3, #2]
 80151f6:	021b      	lsls	r3, r3, #8
 80151f8:	430b      	orrs	r3, r1
 80151fa:	496b      	ldr	r1, [pc, #428]	; (80153a8 <MX_LWIP_Init+0x234>)
 80151fc:	78c9      	ldrb	r1, [r1, #3]
 80151fe:	430b      	orrs	r3, r1
 8015200:	021b      	lsls	r3, r3, #8
 8015202:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015206:	431a      	orrs	r2, r3
 8015208:	4b67      	ldr	r3, [pc, #412]	; (80153a8 <MX_LWIP_Init+0x234>)
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	0619      	lsls	r1, r3, #24
 801520e:	4b66      	ldr	r3, [pc, #408]	; (80153a8 <MX_LWIP_Init+0x234>)
 8015210:	785b      	ldrb	r3, [r3, #1]
 8015212:	041b      	lsls	r3, r3, #16
 8015214:	4319      	orrs	r1, r3
 8015216:	4b64      	ldr	r3, [pc, #400]	; (80153a8 <MX_LWIP_Init+0x234>)
 8015218:	789b      	ldrb	r3, [r3, #2]
 801521a:	021b      	lsls	r3, r3, #8
 801521c:	430b      	orrs	r3, r1
 801521e:	4962      	ldr	r1, [pc, #392]	; (80153a8 <MX_LWIP_Init+0x234>)
 8015220:	78c9      	ldrb	r1, [r1, #3]
 8015222:	430b      	orrs	r3, r1
 8015224:	0a1b      	lsrs	r3, r3, #8
 8015226:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801522a:	431a      	orrs	r2, r3
 801522c:	4b5e      	ldr	r3, [pc, #376]	; (80153a8 <MX_LWIP_Init+0x234>)
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	0619      	lsls	r1, r3, #24
 8015232:	4b5d      	ldr	r3, [pc, #372]	; (80153a8 <MX_LWIP_Init+0x234>)
 8015234:	785b      	ldrb	r3, [r3, #1]
 8015236:	041b      	lsls	r3, r3, #16
 8015238:	4319      	orrs	r1, r3
 801523a:	4b5b      	ldr	r3, [pc, #364]	; (80153a8 <MX_LWIP_Init+0x234>)
 801523c:	789b      	ldrb	r3, [r3, #2]
 801523e:	021b      	lsls	r3, r3, #8
 8015240:	430b      	orrs	r3, r1
 8015242:	4959      	ldr	r1, [pc, #356]	; (80153a8 <MX_LWIP_Init+0x234>)
 8015244:	78c9      	ldrb	r1, [r1, #3]
 8015246:	430b      	orrs	r3, r1
 8015248:	0e1b      	lsrs	r3, r3, #24
 801524a:	4313      	orrs	r3, r2
 801524c:	4a59      	ldr	r2, [pc, #356]	; (80153b4 <MX_LWIP_Init+0x240>)
 801524e:	6013      	str	r3, [r2, #0]
		  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8015250:	4b56      	ldr	r3, [pc, #344]	; (80153ac <MX_LWIP_Init+0x238>)
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	061a      	lsls	r2, r3, #24
 8015256:	4b55      	ldr	r3, [pc, #340]	; (80153ac <MX_LWIP_Init+0x238>)
 8015258:	785b      	ldrb	r3, [r3, #1]
 801525a:	041b      	lsls	r3, r3, #16
 801525c:	431a      	orrs	r2, r3
 801525e:	4b53      	ldr	r3, [pc, #332]	; (80153ac <MX_LWIP_Init+0x238>)
 8015260:	789b      	ldrb	r3, [r3, #2]
 8015262:	021b      	lsls	r3, r3, #8
 8015264:	4313      	orrs	r3, r2
 8015266:	4a51      	ldr	r2, [pc, #324]	; (80153ac <MX_LWIP_Init+0x238>)
 8015268:	78d2      	ldrb	r2, [r2, #3]
 801526a:	4313      	orrs	r3, r2
 801526c:	061a      	lsls	r2, r3, #24
 801526e:	4b4f      	ldr	r3, [pc, #316]	; (80153ac <MX_LWIP_Init+0x238>)
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	0619      	lsls	r1, r3, #24
 8015274:	4b4d      	ldr	r3, [pc, #308]	; (80153ac <MX_LWIP_Init+0x238>)
 8015276:	785b      	ldrb	r3, [r3, #1]
 8015278:	041b      	lsls	r3, r3, #16
 801527a:	4319      	orrs	r1, r3
 801527c:	4b4b      	ldr	r3, [pc, #300]	; (80153ac <MX_LWIP_Init+0x238>)
 801527e:	789b      	ldrb	r3, [r3, #2]
 8015280:	021b      	lsls	r3, r3, #8
 8015282:	430b      	orrs	r3, r1
 8015284:	4949      	ldr	r1, [pc, #292]	; (80153ac <MX_LWIP_Init+0x238>)
 8015286:	78c9      	ldrb	r1, [r1, #3]
 8015288:	430b      	orrs	r3, r1
 801528a:	021b      	lsls	r3, r3, #8
 801528c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015290:	431a      	orrs	r2, r3
 8015292:	4b46      	ldr	r3, [pc, #280]	; (80153ac <MX_LWIP_Init+0x238>)
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	0619      	lsls	r1, r3, #24
 8015298:	4b44      	ldr	r3, [pc, #272]	; (80153ac <MX_LWIP_Init+0x238>)
 801529a:	785b      	ldrb	r3, [r3, #1]
 801529c:	041b      	lsls	r3, r3, #16
 801529e:	4319      	orrs	r1, r3
 80152a0:	4b42      	ldr	r3, [pc, #264]	; (80153ac <MX_LWIP_Init+0x238>)
 80152a2:	789b      	ldrb	r3, [r3, #2]
 80152a4:	021b      	lsls	r3, r3, #8
 80152a6:	430b      	orrs	r3, r1
 80152a8:	4940      	ldr	r1, [pc, #256]	; (80153ac <MX_LWIP_Init+0x238>)
 80152aa:	78c9      	ldrb	r1, [r1, #3]
 80152ac:	430b      	orrs	r3, r1
 80152ae:	0a1b      	lsrs	r3, r3, #8
 80152b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80152b4:	431a      	orrs	r2, r3
 80152b6:	4b3d      	ldr	r3, [pc, #244]	; (80153ac <MX_LWIP_Init+0x238>)
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	0619      	lsls	r1, r3, #24
 80152bc:	4b3b      	ldr	r3, [pc, #236]	; (80153ac <MX_LWIP_Init+0x238>)
 80152be:	785b      	ldrb	r3, [r3, #1]
 80152c0:	041b      	lsls	r3, r3, #16
 80152c2:	4319      	orrs	r1, r3
 80152c4:	4b39      	ldr	r3, [pc, #228]	; (80153ac <MX_LWIP_Init+0x238>)
 80152c6:	789b      	ldrb	r3, [r3, #2]
 80152c8:	021b      	lsls	r3, r3, #8
 80152ca:	430b      	orrs	r3, r1
 80152cc:	4937      	ldr	r1, [pc, #220]	; (80153ac <MX_LWIP_Init+0x238>)
 80152ce:	78c9      	ldrb	r1, [r1, #3]
 80152d0:	430b      	orrs	r3, r1
 80152d2:	0e1b      	lsrs	r3, r3, #24
 80152d4:	4313      	orrs	r3, r2
 80152d6:	4a38      	ldr	r2, [pc, #224]	; (80153b8 <MX_LWIP_Init+0x244>)
 80152d8:	6013      	str	r3, [r2, #0]
		  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80152da:	4b35      	ldr	r3, [pc, #212]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80152dc:	781b      	ldrb	r3, [r3, #0]
 80152de:	061a      	lsls	r2, r3, #24
 80152e0:	4b33      	ldr	r3, [pc, #204]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80152e2:	785b      	ldrb	r3, [r3, #1]
 80152e4:	041b      	lsls	r3, r3, #16
 80152e6:	431a      	orrs	r2, r3
 80152e8:	4b31      	ldr	r3, [pc, #196]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80152ea:	789b      	ldrb	r3, [r3, #2]
 80152ec:	021b      	lsls	r3, r3, #8
 80152ee:	4313      	orrs	r3, r2
 80152f0:	4a2f      	ldr	r2, [pc, #188]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80152f2:	78d2      	ldrb	r2, [r2, #3]
 80152f4:	4313      	orrs	r3, r2
 80152f6:	061a      	lsls	r2, r3, #24
 80152f8:	4b2d      	ldr	r3, [pc, #180]	; (80153b0 <MX_LWIP_Init+0x23c>)
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	0619      	lsls	r1, r3, #24
 80152fe:	4b2c      	ldr	r3, [pc, #176]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015300:	785b      	ldrb	r3, [r3, #1]
 8015302:	041b      	lsls	r3, r3, #16
 8015304:	4319      	orrs	r1, r3
 8015306:	4b2a      	ldr	r3, [pc, #168]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015308:	789b      	ldrb	r3, [r3, #2]
 801530a:	021b      	lsls	r3, r3, #8
 801530c:	430b      	orrs	r3, r1
 801530e:	4928      	ldr	r1, [pc, #160]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015310:	78c9      	ldrb	r1, [r1, #3]
 8015312:	430b      	orrs	r3, r1
 8015314:	021b      	lsls	r3, r3, #8
 8015316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801531a:	431a      	orrs	r2, r3
 801531c:	4b24      	ldr	r3, [pc, #144]	; (80153b0 <MX_LWIP_Init+0x23c>)
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	0619      	lsls	r1, r3, #24
 8015322:	4b23      	ldr	r3, [pc, #140]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015324:	785b      	ldrb	r3, [r3, #1]
 8015326:	041b      	lsls	r3, r3, #16
 8015328:	4319      	orrs	r1, r3
 801532a:	4b21      	ldr	r3, [pc, #132]	; (80153b0 <MX_LWIP_Init+0x23c>)
 801532c:	789b      	ldrb	r3, [r3, #2]
 801532e:	021b      	lsls	r3, r3, #8
 8015330:	430b      	orrs	r3, r1
 8015332:	491f      	ldr	r1, [pc, #124]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015334:	78c9      	ldrb	r1, [r1, #3]
 8015336:	430b      	orrs	r3, r1
 8015338:	0a1b      	lsrs	r3, r3, #8
 801533a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801533e:	431a      	orrs	r2, r3
 8015340:	4b1b      	ldr	r3, [pc, #108]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015342:	781b      	ldrb	r3, [r3, #0]
 8015344:	0619      	lsls	r1, r3, #24
 8015346:	4b1a      	ldr	r3, [pc, #104]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015348:	785b      	ldrb	r3, [r3, #1]
 801534a:	041b      	lsls	r3, r3, #16
 801534c:	4319      	orrs	r1, r3
 801534e:	4b18      	ldr	r3, [pc, #96]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015350:	789b      	ldrb	r3, [r3, #2]
 8015352:	021b      	lsls	r3, r3, #8
 8015354:	430b      	orrs	r3, r1
 8015356:	4916      	ldr	r1, [pc, #88]	; (80153b0 <MX_LWIP_Init+0x23c>)
 8015358:	78c9      	ldrb	r1, [r1, #3]
 801535a:	430b      	orrs	r3, r1
 801535c:	0e1b      	lsrs	r3, r3, #24
 801535e:	4313      	orrs	r3, r2
 8015360:	4a16      	ldr	r2, [pc, #88]	; (80153bc <MX_LWIP_Init+0x248>)
 8015362:	6013      	str	r3, [r2, #0]

		  /* add the network interface (IPv4/IPv6) without RTOS */
		  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8015364:	4b16      	ldr	r3, [pc, #88]	; (80153c0 <MX_LWIP_Init+0x24c>)
 8015366:	9302      	str	r3, [sp, #8]
 8015368:	4b16      	ldr	r3, [pc, #88]	; (80153c4 <MX_LWIP_Init+0x250>)
 801536a:	9301      	str	r3, [sp, #4]
 801536c:	2300      	movs	r3, #0
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	4b12      	ldr	r3, [pc, #72]	; (80153bc <MX_LWIP_Init+0x248>)
 8015372:	4a11      	ldr	r2, [pc, #68]	; (80153b8 <MX_LWIP_Init+0x244>)
 8015374:	490f      	ldr	r1, [pc, #60]	; (80153b4 <MX_LWIP_Init+0x240>)
 8015376:	4814      	ldr	r0, [pc, #80]	; (80153c8 <MX_LWIP_Init+0x254>)
 8015378:	f7f3 fa8a 	bl	8008890 <netif_add>

		  /* Registers the default network interface */
		  netif_set_default(&gnetif);
 801537c:	4812      	ldr	r0, [pc, #72]	; (80153c8 <MX_LWIP_Init+0x254>)
 801537e:	f7f3 fb6f 	bl	8008a60 <netif_set_default>

		  if (netif_is_link_up(&gnetif))
 8015382:	4b11      	ldr	r3, [pc, #68]	; (80153c8 <MX_LWIP_Init+0x254>)
 8015384:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015388:	089b      	lsrs	r3, r3, #2
 801538a:	f003 0301 	and.w	r3, r3, #1
 801538e:	b2db      	uxtb	r3, r3
 8015390:	2b00      	cmp	r3, #0
 8015392:	d003      	beq.n	801539c <MX_LWIP_Init+0x228>
		  {
		    /* When the netif is fully configured this function must be called */
		    netif_set_up(&gnetif);
 8015394:	480c      	ldr	r0, [pc, #48]	; (80153c8 <MX_LWIP_Init+0x254>)
 8015396:	f7f3 fb73 	bl	8008a80 <netif_set_up>
		    netif_set_down(&gnetif);
		  }
/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801539a:	e002      	b.n	80153a2 <MX_LWIP_Init+0x22e>
		    netif_set_down(&gnetif);
 801539c:	480a      	ldr	r0, [pc, #40]	; (80153c8 <MX_LWIP_Init+0x254>)
 801539e:	f7f3 fbb3 	bl	8008b08 <netif_set_down>
}
 80153a2:	bf00      	nop
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}
 80153a8:	2000775c 	.word	0x2000775c
 80153ac:	20007758 	.word	0x20007758
 80153b0:	2000771c 	.word	0x2000771c
 80153b4:	20007754 	.word	0x20007754
 80153b8:	20007760 	.word	0x20007760
 80153bc:	20007764 	.word	0x20007764
 80153c0:	08012905 	.word	0x08012905
 80153c4:	08014831 	.word	0x08014831
 80153c8:	20007720 	.word	0x20007720

080153cc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80153d0:	4803      	ldr	r0, [pc, #12]	; (80153e0 <MX_LWIP_Process+0x14>)
 80153d2:	f7ff fa0d 	bl	80147f0 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 80153d6:	f7f9 fcbd 	bl	800ed54 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80153da:	bf00      	nop
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	20007720 	.word	0x20007720

080153e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b086      	sub	sp, #24
 80153e8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80153ea:	f7eb ff17 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80153ee:	f000 f8bb 	bl	8015568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80153f2:	f7ff fa53 	bl	801489c <MX_GPIO_Init>
  MX_I2C1_Init();
 80153f6:	f7ff fc89 	bl	8014d0c <MX_I2C1_Init>
  MX_I2C2_Init();
 80153fa:	f7ff fcc7 	bl	8014d8c <MX_I2C2_Init>
  MX_TIM2_Init();
 80153fe:	f000 fcef 	bl	8015de0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8015402:	f000 fd49 	bl	8015e98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8015406:	f000 fda5 	bl	8015f54 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 801540a:	f000 ff53 	bl	80162b4 <MX_USART3_UART_Init>
#if USE_TCP_SERVER == 1
  MX_LWIP_Init();
 801540e:	f7ff feb1 	bl	8015174 <MX_LWIP_Init>
#endif
  MX_USB_DEVICE_Init();
 8015412:	f000 ffc1 	bl	8016398 <MX_USB_DEVICE_Init>
  MX_TIM13_Init();
 8015416:	f000 fe27 	bl	8016068 <MX_TIM13_Init>

  /* USER CODE BEGIN 2 */
#if PRINTF_USB_UART == 1
  printf("Initializing the VL53L1X sensors....\r\n");
 801541a:	4840      	ldr	r0, [pc, #256]	; (801551c <main+0x138>)
 801541c:	f001 fe6a 	bl	80170f4 <puts>
#endif
  F_VL53L1X_InitSensors();
 8015420:	f7fe fe0a 	bl	8014038 <F_VL53L1X_InitSensors>

  TIM13->DIER |= TIM_DIER_UIE;	// Enable interrupt
 8015424:	4b3e      	ldr	r3, [pc, #248]	; (8015520 <main+0x13c>)
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	4a3d      	ldr	r2, [pc, #244]	; (8015520 <main+0x13c>)
 801542a:	f043 0301 	orr.w	r3, r3, #1
 801542e:	60d3      	str	r3, [r2, #12]
  TIM13->CR1 |= TIM_CR1_CEN;
 8015430:	4b3b      	ldr	r3, [pc, #236]	; (8015520 <main+0x13c>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4a3a      	ldr	r2, [pc, #232]	; (8015520 <main+0x13c>)
 8015436:	f043 0301 	orr.w	r3, r3, #1
 801543a:	6013      	str	r3, [r2, #0]

  F_Init_TimerServo();
 801543c:	f7fd fb3e 	bl	8012abc <F_Init_TimerServo>


  Init_Motors();
 8015440:	f7fd fdbe 	bl	8012fc0 <Init_Motors>
//  Init_Timer9();
//  Init_Timer10();

    // Initialize the TCP Echo Server
#if PRINTF_USB_UART == 1
  printf("Initializing the TCP server....\r\n");
 8015444:	4837      	ldr	r0, [pc, #220]	; (8015524 <main+0x140>)
 8015446:	f001 fe55 	bl	80170f4 <puts>
#endif
  F_GPIO_SetLedRed(1);
 801544a:	2001      	movs	r0, #1
 801544c:	f7ff fb9c 	bl	8014b88 <F_GPIO_SetLedRed>
#if USE_TCP_SERVER == 1
      tcp_server_init();
 8015450:	f000 faa4 	bl	801599c <tcp_server_init>
#endif


  int dcG=0,dcD=0,bp_flag=0,dutyC=25;
 8015454:	2300      	movs	r3, #0
 8015456:	617b      	str	r3, [r7, #20]
 8015458:	2300      	movs	r3, #0
 801545a:	613b      	str	r3, [r7, #16]
 801545c:	2300      	movs	r3, #0
 801545e:	60fb      	str	r3, [r7, #12]
 8015460:	2319      	movs	r3, #25
 8015462:	60bb      	str	r3, [r7, #8]
  float speedL,speedR;
  int angleDeg=90;
 8015464:	235a      	movs	r3, #90	; 0x5a
 8015466:	607b      	str	r3, [r7, #4]

  F_QEI_setPosition(100,-420,0);
 8015468:	2200      	movs	r2, #0
 801546a:	492f      	ldr	r1, [pc, #188]	; (8015528 <main+0x144>)
 801546c:	2064      	movs	r0, #100	; 0x64
 801546e:	f7fd ffe1 	bl	8013434 <F_QEI_setPosition>

  F_AUTO_AddTargetPoint( 220 , -200 , 0);		// 1
 8015472:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 801552c <main+0x148>
 8015476:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8015530 <main+0x14c>
 801547a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015534 <main+0x150>
 801547e:	f7fe fb8f 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 500 , -200 , 0);		// 2
 8015482:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 801552c <main+0x148>
 8015486:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8015530 <main+0x14c>
 801548a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8015538 <main+0x154>
 801548e:	f7fe fb87 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 900 , -450 , 0);		// 2
 8015492:	ed9f 1a26 	vldr	s2, [pc, #152]	; 801552c <main+0x148>
 8015496:	eddf 0a29 	vldr	s1, [pc, #164]	; 801553c <main+0x158>
 801549a:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8015540 <main+0x15c>
 801549e:	f7fe fb7f 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 500 , -420 , 0);		// 3 Pousse le palet 1
 80154a2:	ed9f 1a22 	vldr	s2, [pc, #136]	; 801552c <main+0x148>
 80154a6:	eddf 0a27 	vldr	s1, [pc, #156]	; 8015544 <main+0x160>
 80154aa:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8015538 <main+0x154>
 80154ae:	f7fe fb77 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 500 , -650 , 0);
 80154b2:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 801552c <main+0x148>
 80154b6:	eddf 0a24 	vldr	s1, [pc, #144]	; 8015548 <main+0x164>
 80154ba:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015538 <main+0x154>
 80154be:	f7fe fb6f 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 850 , -650 , 0);
 80154c2:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 801552c <main+0x148>
 80154c6:	eddf 0a20 	vldr	s1, [pc, #128]	; 8015548 <main+0x164>
 80154ca:	ed9f 0a20 	vldr	s0, [pc, #128]	; 801554c <main+0x168>
 80154ce:	f7fe fb67 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 850 , -950 , 0);
 80154d2:	ed9f 1a16 	vldr	s2, [pc, #88]	; 801552c <main+0x148>
 80154d6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8015550 <main+0x16c>
 80154da:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801554c <main+0x168>
 80154de:	f7fe fb5f 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 300 , -1050 , 0);
 80154e2:	ed9f 1a12 	vldr	s2, [pc, #72]	; 801552c <main+0x148>
 80154e6:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015554 <main+0x170>
 80154ea:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8015558 <main+0x174>
 80154ee:	f7fe fb57 	bl	8013ba0 <F_AUTO_AddTargetPoint>
  F_AUTO_AddTargetPoint( 250 , -900 , 0);
 80154f2:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 801552c <main+0x148>
 80154f6:	eddf 0a19 	vldr	s1, [pc, #100]	; 801555c <main+0x178>
 80154fa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8015560 <main+0x17c>
 80154fe:	f7fe fb4f 	bl	8013ba0 <F_AUTO_AddTargetPoint>

  //F_AUTO_Enable();

  F_PWM_SetCmdMotorDroit(90);
 8015502:	205a      	movs	r0, #90	; 0x5a
 8015504:	f7fd fd65 	bl	8012fd2 <F_PWM_SetCmdMotorDroit>
  F_PWM_SetCmdMotorGauche(50);
 8015508:	2032      	movs	r0, #50	; 0x32
 801550a:	f7fd fd8b 	bl	8013024 <F_PWM_SetCmdMotorGauche>
#if PRINTF_USB_UART == 1
  printf("Entering the infinite loop....\r\n");
 801550e:	4815      	ldr	r0, [pc, #84]	; (8015564 <main+0x180>)
 8015510:	f001 fdf0 	bl	80170f4 <puts>

    /* USER CODE BEGIN 3 */

	  // Handle the TCP connection
#if USE_TCP_SERVER == 1
	  MX_LWIP_Process();
 8015514:	f7ff ff5a 	bl	80153cc <MX_LWIP_Process>
 8015518:	e7fc      	b.n	8015514 <main+0x130>
 801551a:	bf00      	nop
 801551c:	0801b10c 	.word	0x0801b10c
 8015520:	40001c00 	.word	0x40001c00
 8015524:	0801b134 	.word	0x0801b134
 8015528:	fffffe5c 	.word	0xfffffe5c
 801552c:	00000000 	.word	0x00000000
 8015530:	c3480000 	.word	0xc3480000
 8015534:	435c0000 	.word	0x435c0000
 8015538:	43fa0000 	.word	0x43fa0000
 801553c:	c3e10000 	.word	0xc3e10000
 8015540:	44610000 	.word	0x44610000
 8015544:	c3d20000 	.word	0xc3d20000
 8015548:	c4228000 	.word	0xc4228000
 801554c:	44548000 	.word	0x44548000
 8015550:	c46d8000 	.word	0xc46d8000
 8015554:	c4834000 	.word	0xc4834000
 8015558:	43960000 	.word	0x43960000
 801555c:	c4610000 	.word	0xc4610000
 8015560:	437a0000 	.word	0x437a0000
 8015564:	0801b158 	.word	0x0801b158

08015568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b094      	sub	sp, #80	; 0x50
 801556c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801556e:	f107 0320 	add.w	r3, r7, #32
 8015572:	2230      	movs	r2, #48	; 0x30
 8015574:	2100      	movs	r1, #0
 8015576:	4618      	mov	r0, r3
 8015578:	f001 fc98 	bl	8016eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801557c:	f107 030c 	add.w	r3, r7, #12
 8015580:	2200      	movs	r2, #0
 8015582:	601a      	str	r2, [r3, #0]
 8015584:	605a      	str	r2, [r3, #4]
 8015586:	609a      	str	r2, [r3, #8]
 8015588:	60da      	str	r2, [r3, #12]
 801558a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801558c:	2300      	movs	r3, #0
 801558e:	60bb      	str	r3, [r7, #8]
 8015590:	4b28      	ldr	r3, [pc, #160]	; (8015634 <SystemClock_Config+0xcc>)
 8015592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015594:	4a27      	ldr	r2, [pc, #156]	; (8015634 <SystemClock_Config+0xcc>)
 8015596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801559a:	6413      	str	r3, [r2, #64]	; 0x40
 801559c:	4b25      	ldr	r3, [pc, #148]	; (8015634 <SystemClock_Config+0xcc>)
 801559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80155a4:	60bb      	str	r3, [r7, #8]
 80155a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80155a8:	2300      	movs	r3, #0
 80155aa:	607b      	str	r3, [r7, #4]
 80155ac:	4b22      	ldr	r3, [pc, #136]	; (8015638 <SystemClock_Config+0xd0>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	4a21      	ldr	r2, [pc, #132]	; (8015638 <SystemClock_Config+0xd0>)
 80155b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80155b6:	6013      	str	r3, [r2, #0]
 80155b8:	4b1f      	ldr	r3, [pc, #124]	; (8015638 <SystemClock_Config+0xd0>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80155c0:	607b      	str	r3, [r7, #4]
 80155c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80155c4:	2301      	movs	r3, #1
 80155c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80155c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80155cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80155ce:	2302      	movs	r3, #2
 80155d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80155d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80155d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80155d8:	2304      	movs	r3, #4
 80155da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80155dc:	23a8      	movs	r3, #168	; 0xa8
 80155de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80155e0:	2302      	movs	r3, #2
 80155e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80155e4:	2307      	movs	r3, #7
 80155e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80155e8:	f107 0320 	add.w	r3, r7, #32
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7ee fc41 	bl	8003e74 <HAL_RCC_OscConfig>
 80155f2:	4603      	mov	r3, r0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d001      	beq.n	80155fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80155f8:	f000 f820 	bl	801563c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80155fc:	230f      	movs	r3, #15
 80155fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015600:	2302      	movs	r3, #2
 8015602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015604:	2300      	movs	r3, #0
 8015606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8015608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801560c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801560e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8015614:	f107 030c 	add.w	r3, r7, #12
 8015618:	2105      	movs	r1, #5
 801561a:	4618      	mov	r0, r3
 801561c:	f7ee fe6c 	bl	80042f8 <HAL_RCC_ClockConfig>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d001      	beq.n	801562a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8015626:	f000 f809 	bl	801563c <Error_Handler>
  }
}
 801562a:	bf00      	nop
 801562c:	3750      	adds	r7, #80	; 0x50
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	40023800 	.word	0x40023800
 8015638:	40007000 	.word	0x40007000

0801563c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801563c:	b480      	push	{r7}
 801563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8015640:	bf00      	nop
 8015642:	46bd      	mov	sp, r7
 8015644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015648:	4770      	bx	lr
	...

0801564c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015652:	2300      	movs	r3, #0
 8015654:	607b      	str	r3, [r7, #4]
 8015656:	4b10      	ldr	r3, [pc, #64]	; (8015698 <HAL_MspInit+0x4c>)
 8015658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801565a:	4a0f      	ldr	r2, [pc, #60]	; (8015698 <HAL_MspInit+0x4c>)
 801565c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015660:	6453      	str	r3, [r2, #68]	; 0x44
 8015662:	4b0d      	ldr	r3, [pc, #52]	; (8015698 <HAL_MspInit+0x4c>)
 8015664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801566a:	607b      	str	r3, [r7, #4]
 801566c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801566e:	2300      	movs	r3, #0
 8015670:	603b      	str	r3, [r7, #0]
 8015672:	4b09      	ldr	r3, [pc, #36]	; (8015698 <HAL_MspInit+0x4c>)
 8015674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015676:	4a08      	ldr	r2, [pc, #32]	; (8015698 <HAL_MspInit+0x4c>)
 8015678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801567c:	6413      	str	r3, [r2, #64]	; 0x40
 801567e:	4b06      	ldr	r3, [pc, #24]	; (8015698 <HAL_MspInit+0x4c>)
 8015680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015686:	603b      	str	r3, [r7, #0]
 8015688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801568a:	bf00      	nop
 801568c:	370c      	adds	r7, #12
 801568e:	46bd      	mov	sp, r7
 8015690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015694:	4770      	bx	lr
 8015696:	bf00      	nop
 8015698:	40023800 	.word	0x40023800

0801569c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801569c:	b480      	push	{r7}
 801569e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80156a0:	bf00      	nop
 80156a2:	46bd      	mov	sp, r7
 80156a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a8:	4770      	bx	lr

080156aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80156aa:	b480      	push	{r7}
 80156ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80156ae:	e7fe      	b.n	80156ae <HardFault_Handler+0x4>

080156b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80156b0:	b480      	push	{r7}
 80156b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80156b4:	e7fe      	b.n	80156b4 <MemManage_Handler+0x4>

080156b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80156b6:	b480      	push	{r7}
 80156b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80156ba:	e7fe      	b.n	80156ba <BusFault_Handler+0x4>

080156bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80156bc:	b480      	push	{r7}
 80156be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80156c0:	e7fe      	b.n	80156c0 <UsageFault_Handler+0x4>

080156c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80156c2:	b480      	push	{r7}
 80156c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80156c6:	bf00      	nop
 80156c8:	46bd      	mov	sp, r7
 80156ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ce:	4770      	bx	lr

080156d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80156d0:	b480      	push	{r7}
 80156d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80156d4:	bf00      	nop
 80156d6:	46bd      	mov	sp, r7
 80156d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156dc:	4770      	bx	lr

080156de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80156de:	b480      	push	{r7}
 80156e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80156e2:	bf00      	nop
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80156f0:	f7eb fde6 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80156f4:	bf00      	nop
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(TIM13->SR & TIM_SR_UIF)
 80156fc:	4b0c      	ldr	r3, [pc, #48]	; (8015730 <TIM8_UP_TIM13_IRQHandler+0x38>)
 80156fe:	691b      	ldr	r3, [r3, #16]
 8015700:	f003 0301 	and.w	r3, r3, #1
 8015704:	2b00      	cmp	r3, #0
 8015706:	d00e      	beq.n	8015726 <TIM8_UP_TIM13_IRQHandler+0x2e>
	{
		  // Clear interrupt
		  F_VL53L1X_CheckSensors();
 8015708:	f7fe fd4e 	bl	80141a8 <F_VL53L1X_CheckSensors>

		  if(i == 10)
 801570c:	4b09      	ldr	r3, [pc, #36]	; (8015734 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	2b0a      	cmp	r3, #10
 8015712:	d102      	bne.n	801571a <TIM8_UP_TIM13_IRQHandler+0x22>
		  {

			  i = 0;
 8015714:	4b07      	ldr	r3, [pc, #28]	; (8015734 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8015716:	2200      	movs	r2, #0
 8015718:	701a      	strb	r2, [r3, #0]
		  }

		  i++;
 801571a:	4b06      	ldr	r3, [pc, #24]	; (8015734 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 801571c:	781b      	ldrb	r3, [r3, #0]
 801571e:	3301      	adds	r3, #1
 8015720:	b2da      	uxtb	r2, r3
 8015722:	4b04      	ldr	r3, [pc, #16]	; (8015734 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8015724:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8015726:	4804      	ldr	r0, [pc, #16]	; (8015738 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8015728:	f7ef f82a 	bl	8004780 <HAL_TIM_IRQHandler>


  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 801572c:	bf00      	nop
 801572e:	bd80      	pop	{r7, pc}
 8015730:	40001c00 	.word	0x40001c00
 8015734:	200003e8 	.word	0x200003e8
 8015738:	20007804 	.word	0x20007804

0801573c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8015740:	4802      	ldr	r0, [pc, #8]	; (801574c <OTG_FS_IRQHandler+0x10>)
 8015742:	f7ed fb5c 	bl	8002dfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8015746:	bf00      	nop
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	20008b60 	.word	0x20008b60

08015750 <TIM1_BRK_TIM9_IRQHandler>:
/**
 * Interrupt process of Timer 9
 * Motor speed regulation
 * T = 5ms;
 */
void TIM1_BRK_TIM9_IRQHandler(void){
 8015750:	b580      	push	{r7, lr}
 8015752:	af00      	add	r7, sp, #0

	if(TIM9->SR & TIM_SR_UIF){
 8015754:	4b15      	ldr	r3, [pc, #84]	; (80157ac <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 8015756:	691b      	ldr	r3, [r3, #16]
 8015758:	f003 0301 	and.w	r3, r3, #1
 801575c:	2b00      	cmp	r3, #0
 801575e:	d023      	beq.n	80157a8 <TIM1_BRK_TIM9_IRQHandler+0x58>
		TIM9->SR &= ~TIM_SR_UIF;
 8015760:	4b12      	ldr	r3, [pc, #72]	; (80157ac <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 8015762:	691b      	ldr	r3, [r3, #16]
 8015764:	4a11      	ldr	r2, [pc, #68]	; (80157ac <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 8015766:	f023 0301 	bic.w	r3, r3, #1
 801576a:	6113      	str	r3, [r2, #16]

		if(F_GPIO_GetTirette() && g_temps_match<(DUREE_MATCH*1000)){
 801576c:	f7ff fa60 	bl	8014c30 <F_GPIO_GetTirette>
 8015770:	4603      	mov	r3, r0
 8015772:	2b00      	cmp	r3, #0
 8015774:	d010      	beq.n	8015798 <TIM1_BRK_TIM9_IRQHandler+0x48>
 8015776:	4b0e      	ldr	r3, [pc, #56]	; (80157b0 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4a0e      	ldr	r2, [pc, #56]	; (80157b4 <TIM1_BRK_TIM9_IRQHandler+0x64>)
 801577c:	4293      	cmp	r3, r2
 801577e:	dc0b      	bgt.n	8015798 <TIM1_BRK_TIM9_IRQHandler+0x48>
			g_start_signal=1;
 8015780:	4b0d      	ldr	r3, [pc, #52]	; (80157b8 <TIM1_BRK_TIM9_IRQHandler+0x68>)
 8015782:	2201      	movs	r2, #1
 8015784:	601a      	str	r2, [r3, #0]
			g_stop_signal=0;
 8015786:	4b0d      	ldr	r3, [pc, #52]	; (80157bc <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8015788:	2200      	movs	r2, #0
 801578a:	601a      	str	r2, [r3, #0]

			g_temps_match+=5;
 801578c:	4b08      	ldr	r3, [pc, #32]	; (80157b0 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	3305      	adds	r3, #5
 8015792:	4a07      	ldr	r2, [pc, #28]	; (80157b0 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 8015794:	6013      	str	r3, [r2, #0]
 8015796:	e002      	b.n	801579e <TIM1_BRK_TIM9_IRQHandler+0x4e>
		}else{
			g_stop_signal=1;
 8015798:	4b08      	ldr	r3, [pc, #32]	; (80157bc <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 801579a:	2201      	movs	r2, #1
 801579c:	601a      	str	r2, [r3, #0]
		}

		g_timer_9_cnt++;
 801579e:	4b08      	ldr	r3, [pc, #32]	; (80157c0 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	3301      	adds	r3, #1
 80157a4:	4a06      	ldr	r2, [pc, #24]	; (80157c0 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 80157a6:	6013      	str	r3, [r2, #0]
	}
}
 80157a8:	bf00      	nop
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	40014000 	.word	0x40014000
 80157b0:	200003dc 	.word	0x200003dc
 80157b4:	0001869f 	.word	0x0001869f
 80157b8:	200003e0 	.word	0x200003e0
 80157bc:	200003e4 	.word	0x200003e4
 80157c0:	200003d4 	.word	0x200003d4

080157c4 <TIM1_UP_TIM10_IRQHandler>:
/**
 * Interrupt process of Timer 10
 * Robot position regulator
 * T = 20ms;
 */
void TIM1_UP_TIM10_IRQHandler(void){
 80157c4:	b580      	push	{r7, lr}
 80157c6:	af00      	add	r7, sp, #0
	if(TIM10->SR & TIM_SR_UIF){
 80157c8:	4b0f      	ldr	r3, [pc, #60]	; (8015808 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80157ca:	691b      	ldr	r3, [r3, #16]
 80157cc:	f003 0301 	and.w	r3, r3, #1
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d017      	beq.n	8015804 <TIM1_UP_TIM10_IRQHandler+0x40>
		TIM10->SR &= ~TIM_SR_UIF;
 80157d4:	4b0c      	ldr	r3, [pc, #48]	; (8015808 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80157d6:	691b      	ldr	r3, [r3, #16]
 80157d8:	4a0b      	ldr	r2, [pc, #44]	; (8015808 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80157da:	f023 0301 	bic.w	r3, r3, #1
 80157de:	6113      	str	r3, [r2, #16]

		/* #### Every 20 ms ### */
		F_QEI_Read();			// Update localization data
 80157e0:	f7fd fc60 	bl	80130a4 <F_QEI_Read>
		F_AUTO_SpeedRegulator();// Call proportional regulator
 80157e4:	f7fd fe5c 	bl	80134a0 <F_AUTO_SpeedRegulator>

		/* #### Every 40 ms ### */
		if(g_timer_10_cnt>1){
 80157e8:	4b08      	ldr	r3, [pc, #32]	; (801580c <TIM1_UP_TIM10_IRQHandler+0x48>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	dd04      	ble.n	80157fa <TIM1_UP_TIM10_IRQHandler+0x36>
//		F_AUTO_AngularPositionRegulator();// Angular regulation
		F_AUTO_PositionRegulator();// Position regulation
 80157f0:	f7fd ff92 	bl	8013718 <F_AUTO_PositionRegulator>
		g_timer_10_cnt=0;
 80157f4:	4b05      	ldr	r3, [pc, #20]	; (801580c <TIM1_UP_TIM10_IRQHandler+0x48>)
 80157f6:	2200      	movs	r2, #0
 80157f8:	601a      	str	r2, [r3, #0]
		}
		g_timer_10_cnt++;
 80157fa:	4b04      	ldr	r3, [pc, #16]	; (801580c <TIM1_UP_TIM10_IRQHandler+0x48>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	3301      	adds	r3, #1
 8015800:	4a02      	ldr	r2, [pc, #8]	; (801580c <TIM1_UP_TIM10_IRQHandler+0x48>)
 8015802:	6013      	str	r3, [r2, #0]

	}
}
 8015804:	bf00      	nop
 8015806:	bd80      	pop	{r7, pc}
 8015808:	40014400 	.word	0x40014400
 801580c:	200003d8 	.word	0x200003d8

08015810 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b086      	sub	sp, #24
 8015814:	af00      	add	r7, sp, #0
 8015816:	60f8      	str	r0, [r7, #12]
 8015818:	60b9      	str	r1, [r7, #8]
 801581a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801581c:	2300      	movs	r3, #0
 801581e:	617b      	str	r3, [r7, #20]
 8015820:	e00a      	b.n	8015838 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8015822:	f000 fde9 	bl	80163f8 <__io_getchar>
 8015826:	4601      	mov	r1, r0
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	1c5a      	adds	r2, r3, #1
 801582c:	60ba      	str	r2, [r7, #8]
 801582e:	b2ca      	uxtb	r2, r1
 8015830:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	3301      	adds	r3, #1
 8015836:	617b      	str	r3, [r7, #20]
 8015838:	697a      	ldr	r2, [r7, #20]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	429a      	cmp	r2, r3
 801583e:	dbf0      	blt.n	8015822 <_read+0x12>
	}


return len;
 8015840:	687b      	ldr	r3, [r7, #4]
}
 8015842:	4618      	mov	r0, r3
 8015844:	3718      	adds	r7, #24
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <_write>:

int _write(int file, char *ptr, int len)
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b084      	sub	sp, #16
 801584e:	af00      	add	r7, sp, #0
 8015850:	60f8      	str	r0, [r7, #12]
 8015852:	60b9      	str	r1, [r7, #8]
 8015854:	607a      	str	r2, [r7, #4]
	int DataIdx;

#if PRINTF_USB_UART == 1
	CDC_Transmit_FS((uint8_t *)ptr, (uint16_t)len);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	b29b      	uxth	r3, r3
 801585a:	4619      	mov	r1, r3
 801585c:	68b8      	ldr	r0, [r7, #8]
 801585e:	f000 fe6b 	bl	8016538 <CDC_Transmit_FS>
			__io_putchar(*ptr++);
		}
#endif


	return len;
 8015862:	687b      	ldr	r3, [r7, #4]
}
 8015864:	4618      	mov	r0, r3
 8015866:	3710      	adds	r7, #16
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}

0801586c <_close>:

int _close(int file)
{
 801586c:	b480      	push	{r7}
 801586e:	b083      	sub	sp, #12
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
	return -1;
 8015874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015878:	4618      	mov	r0, r3
 801587a:	370c      	adds	r7, #12
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr

08015884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801588e:	683b      	ldr	r3, [r7, #0]
 8015890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015894:	605a      	str	r2, [r3, #4]
	return 0;
 8015896:	2300      	movs	r3, #0
}
 8015898:	4618      	mov	r0, r3
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <_isatty>:

int _isatty(int file)
{
 80158a4:	b480      	push	{r7}
 80158a6:	b083      	sub	sp, #12
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
	return 1;
 80158ac:	2301      	movs	r3, #1
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	370c      	adds	r7, #12
 80158b2:	46bd      	mov	sp, r7
 80158b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b8:	4770      	bx	lr

080158ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80158ba:	b480      	push	{r7}
 80158bc:	b085      	sub	sp, #20
 80158be:	af00      	add	r7, sp, #0
 80158c0:	60f8      	str	r0, [r7, #12]
 80158c2:	60b9      	str	r1, [r7, #8]
 80158c4:	607a      	str	r2, [r7, #4]
	return 0;
 80158c6:	2300      	movs	r3, #0
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3714      	adds	r7, #20
 80158cc:	46bd      	mov	sp, r7
 80158ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d2:	4770      	bx	lr

080158d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80158d4:	b480      	push	{r7}
 80158d6:	b085      	sub	sp, #20
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80158dc:	4b11      	ldr	r3, [pc, #68]	; (8015924 <_sbrk+0x50>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d102      	bne.n	80158ea <_sbrk+0x16>
		heap_end = &end;
 80158e4:	4b0f      	ldr	r3, [pc, #60]	; (8015924 <_sbrk+0x50>)
 80158e6:	4a10      	ldr	r2, [pc, #64]	; (8015928 <_sbrk+0x54>)
 80158e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80158ea:	4b0e      	ldr	r3, [pc, #56]	; (8015924 <_sbrk+0x50>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80158f0:	4b0c      	ldr	r3, [pc, #48]	; (8015924 <_sbrk+0x50>)
 80158f2:	681a      	ldr	r2, [r3, #0]
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	4413      	add	r3, r2
 80158f8:	466a      	mov	r2, sp
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d905      	bls.n	801590a <_sbrk+0x36>
	{
		errno = ENOMEM;
 80158fe:	4b0b      	ldr	r3, [pc, #44]	; (801592c <_sbrk+0x58>)
 8015900:	220c      	movs	r2, #12
 8015902:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8015904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015908:	e006      	b.n	8015918 <_sbrk+0x44>
	}

	heap_end += incr;
 801590a:	4b06      	ldr	r3, [pc, #24]	; (8015924 <_sbrk+0x50>)
 801590c:	681a      	ldr	r2, [r3, #0]
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4413      	add	r3, r2
 8015912:	4a04      	ldr	r2, [pc, #16]	; (8015924 <_sbrk+0x50>)
 8015914:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8015916:	68fb      	ldr	r3, [r7, #12]
}
 8015918:	4618      	mov	r0, r3
 801591a:	3714      	adds	r7, #20
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr
 8015924:	200003ec 	.word	0x200003ec
 8015928:	20009170 	.word	0x20009170
 801592c:	20009168 	.word	0x20009168

08015930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015930:	b480      	push	{r7}
 8015932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015934:	4b16      	ldr	r3, [pc, #88]	; (8015990 <SystemInit+0x60>)
 8015936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801593a:	4a15      	ldr	r2, [pc, #84]	; (8015990 <SystemInit+0x60>)
 801593c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8015944:	4b13      	ldr	r3, [pc, #76]	; (8015994 <SystemInit+0x64>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	4a12      	ldr	r2, [pc, #72]	; (8015994 <SystemInit+0x64>)
 801594a:	f043 0301 	orr.w	r3, r3, #1
 801594e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015950:	4b10      	ldr	r3, [pc, #64]	; (8015994 <SystemInit+0x64>)
 8015952:	2200      	movs	r2, #0
 8015954:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8015956:	4b0f      	ldr	r3, [pc, #60]	; (8015994 <SystemInit+0x64>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	4a0e      	ldr	r2, [pc, #56]	; (8015994 <SystemInit+0x64>)
 801595c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8015960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015964:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8015966:	4b0b      	ldr	r3, [pc, #44]	; (8015994 <SystemInit+0x64>)
 8015968:	4a0b      	ldr	r2, [pc, #44]	; (8015998 <SystemInit+0x68>)
 801596a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801596c:	4b09      	ldr	r3, [pc, #36]	; (8015994 <SystemInit+0x64>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	4a08      	ldr	r2, [pc, #32]	; (8015994 <SystemInit+0x64>)
 8015972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015976:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8015978:	4b06      	ldr	r3, [pc, #24]	; (8015994 <SystemInit+0x64>)
 801597a:	2200      	movs	r2, #0
 801597c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801597e:	4b04      	ldr	r3, [pc, #16]	; (8015990 <SystemInit+0x60>)
 8015980:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015984:	609a      	str	r2, [r3, #8]
#endif
}
 8015986:	bf00      	nop
 8015988:	46bd      	mov	sp, r7
 801598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598e:	4770      	bx	lr
 8015990:	e000ed00 	.word	0xe000ed00
 8015994:	40023800 	.word	0x40023800
 8015998:	24003010 	.word	0x24003010

0801599c <tcp_server_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 80159a2:	f7f5 f8ff 	bl	800aba4 <tcp_new>
 80159a6:	4602      	mov	r2, r0
 80159a8:	4b16      	ldr	r3, [pc, #88]	; (8015a04 <tcp_server_init+0x68>)
 80159aa:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 80159ac:	4b15      	ldr	r3, [pc, #84]	; (8015a04 <tcp_server_init+0x68>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d022      	beq.n	80159fa <tcp_server_init+0x5e>
  {
    err_t err;

    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80159b4:	4b13      	ldr	r3, [pc, #76]	; (8015a04 <tcp_server_init+0x68>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	2207      	movs	r2, #7
 80159ba:	4913      	ldr	r1, [pc, #76]	; (8015a08 <tcp_server_init+0x6c>)
 80159bc:	4618      	mov	r0, r3
 80159be:	f7f4 f975 	bl	8009cac <tcp_bind>
 80159c2:	4603      	mov	r3, r0
 80159c4:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 80159c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d10f      	bne.n	80159ee <tcp_server_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80159ce:	4b0d      	ldr	r3, [pc, #52]	; (8015a04 <tcp_server_init+0x68>)
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	21ff      	movs	r1, #255	; 0xff
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7f4 fa0b 	bl	8009df0 <tcp_listen_with_backlog>
 80159da:	4602      	mov	r2, r0
 80159dc:	4b09      	ldr	r3, [pc, #36]	; (8015a04 <tcp_server_init+0x68>)
 80159de:	601a      	str	r2, [r3, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_server_accept);
 80159e0:	4b08      	ldr	r3, [pc, #32]	; (8015a04 <tcp_server_init+0x68>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	4909      	ldr	r1, [pc, #36]	; (8015a0c <tcp_server_init+0x70>)
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7f5 f95a 	bl	800aca0 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80159ec:	e005      	b.n	80159fa <tcp_server_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80159ee:	4b05      	ldr	r3, [pc, #20]	; (8015a04 <tcp_server_init+0x68>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	4619      	mov	r1, r3
 80159f4:	2001      	movs	r0, #1
 80159f6:	f7f2 ff19 	bl	800882c <memp_free>
}
 80159fa:	bf00      	nop
 80159fc:	3708      	adds	r7, #8
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	20007780 	.word	0x20007780
 8015a08:	0801b340 	.word	0x0801b340
 8015a0c:	08015a11 	.word	0x08015a11

08015a10 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b086      	sub	sp, #24
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	60f8      	str	r0, [r7, #12]
 8015a18:	60b9      	str	r1, [r7, #8]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8015a1e:	2101      	movs	r1, #1
 8015a20:	68b8      	ldr	r0, [r7, #8]
 8015a22:	f7f4 ff34 	bl	800a88e <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8015a26:	200c      	movs	r0, #12
 8015a28:	f7f2 fd56 	bl	80084d8 <mem_malloc>
 8015a2c:	6138      	str	r0, [r7, #16]

  if (es != NULL)
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d01c      	beq.n	8015a6e <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	2201      	movs	r2, #1
 8015a38:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	68ba      	ldr	r2, [r7, #8]
 8015a3e:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	2200      	movs	r2, #0
 8015a44:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8015a46:	6939      	ldr	r1, [r7, #16]
 8015a48:	68b8      	ldr	r0, [r7, #8]
 8015a4a:	f7f5 f8b3 	bl	800abb4 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8015a4e:	490e      	ldr	r1, [pc, #56]	; (8015a88 <tcp_server_accept+0x78>)
 8015a50:	68b8      	ldr	r0, [r7, #8]
 8015a52:	f7f5 f8c1 	bl	800abd8 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8015a56:	490d      	ldr	r1, [pc, #52]	; (8015a8c <tcp_server_accept+0x7c>)
 8015a58:	68b8      	ldr	r0, [r7, #8]
 8015a5a:	f7f5 f8ff 	bl	800ac5c <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 8015a5e:	2201      	movs	r2, #1
 8015a60:	490b      	ldr	r1, [pc, #44]	; (8015a90 <tcp_server_accept+0x80>)
 8015a62:	68b8      	ldr	r0, [r7, #8]
 8015a64:	f7f5 f934 	bl	800acd0 <tcp_poll>

    ret_err = ERR_OK;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	75fb      	strb	r3, [r7, #23]
 8015a6c:	e005      	b.n	8015a7a <tcp_server_accept+0x6a>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8015a6e:	6939      	ldr	r1, [r7, #16]
 8015a70:	68b8      	ldr	r0, [r7, #8]
 8015a72:	f000 f98d 	bl	8015d90 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8015a76:	23ff      	movs	r3, #255	; 0xff
 8015a78:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8015a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3718      	adds	r7, #24
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	08015a95 	.word	0x08015a95
 8015a8c:	08015c41 	.word	0x08015c41
 8015a90:	08015c65 	.word	0x08015c65

08015a94 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b096      	sub	sp, #88	; 0x58
 8015a98:	af02      	add	r7, sp, #8
 8015a9a:	60f8      	str	r0, [r7, #12]
 8015a9c:	60b9      	str	r1, [r7, #8]
 8015a9e:	607a      	str	r2, [r7, #4]
 8015aa0:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;
  uint8_t array[NB_OCTETS_CMD] = {0};
 8015aa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	601a      	str	r2, [r3, #0]
 8015aaa:	605a      	str	r2, [r3, #4]
 8015aac:	609a      	str	r2, [r3, #8]
 8015aae:	f8c3 200b 	str.w	r2, [r3, #11]
  struct tcp_answer s_cmd_answer;
  struct tcp_command s_cmd_received;


  LWIP_ASSERT("arg != NULL",arg != NULL);
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d105      	bne.n	8015ac4 <tcp_server_recv+0x30>
 8015ab8:	4b5d      	ldr	r3, [pc, #372]	; (8015c30 <tcp_server_recv+0x19c>)
 8015aba:	22b6      	movs	r2, #182	; 0xb6
 8015abc:	495d      	ldr	r1, [pc, #372]	; (8015c34 <tcp_server_recv+0x1a0>)
 8015abe:	485e      	ldr	r0, [pc, #376]	; (8015c38 <tcp_server_recv+0x1a4>)
 8015ac0:	f001 faa4 	bl	801700c <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d117      	bne.n	8015afe <tcp_server_recv+0x6a>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8015ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ad0:	2203      	movs	r2, #3
 8015ad2:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8015ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ad6:	689b      	ldr	r3, [r3, #8]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d104      	bne.n	8015ae6 <tcp_server_recv+0x52>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8015adc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015ade:	68b8      	ldr	r0, [r7, #8]
 8015ae0:	f000 f956 	bl	8015d90 <tcp_server_connection_close>
 8015ae4:	e007      	b.n	8015af6 <tcp_server_recv+0x62>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8015ae6:	4955      	ldr	r1, [pc, #340]	; (8015c3c <tcp_server_recv+0x1a8>)
 8015ae8:	68b8      	ldr	r0, [r7, #8]
 8015aea:	f7f5 f897 	bl	800ac1c <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8015aee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015af0:	68b8      	ldr	r0, [r7, #8]
 8015af2:	f000 f8ff 	bl	8015cf4 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8015af6:	2300      	movs	r3, #0
 8015af8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015afc:	e092      	b.n	8015c24 <tcp_server_recv+0x190>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8015afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00c      	beq.n	8015b20 <tcp_server_recv+0x8c>
  {
    /* free received pbuf*/
    if (p != NULL)
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d005      	beq.n	8015b18 <tcp_server_recv+0x84>
    {
      es->p = NULL;
 8015b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b0e:	2200      	movs	r2, #0
 8015b10:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7f3 fbbc 	bl	8009290 <pbuf_free>
    }
    ret_err = err;
 8015b18:	78fb      	ldrb	r3, [r7, #3]
 8015b1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015b1e:	e081      	b.n	8015c24 <tcp_server_recv+0x190>
  }
  else if(es->state == ES_ACCEPTED)
 8015b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b22:	781b      	ldrb	r3, [r3, #0]
 8015b24:	2b01      	cmp	r3, #1
 8015b26:	d132      	bne.n	8015b8e <tcp_server_recv+0xfa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8015b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b2a:	2202      	movs	r2, #2
 8015b2c:	701a      	strb	r2, [r3, #0]

    // Get the command from the data received over TCP
    F_TCP_paquetTocmd(p, &s_cmd_received);
 8015b2e:	f107 0314 	add.w	r3, r7, #20
 8015b32:	4619      	mov	r1, r3
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f7fd f873 	bl	8012c20 <F_TCP_paquetTocmd>
    // Process the command received

    // Send back the answer of the command received


    F_Process_Command(s_cmd_received,&s_cmd_answer);
 8015b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b3e:	9300      	str	r3, [sp, #0]
 8015b40:	f107 0314 	add.w	r3, r7, #20
 8015b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b46:	f7fd f94f 	bl	8012de8 <F_Process_Command>


    F_TCP_answerTotab(array, s_cmd_answer);
 8015b4a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8015b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015b58:	f7fd f8e4 	bl	8012d24 <F_TCP_answerTotab>

    p->payload = array;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015b62:	605a      	str	r2, [r3, #4]
    p->len = NB_OCTETS_CMD;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	220f      	movs	r2, #15
 8015b68:	815a      	strh	r2, [r3, #10]
    p->tot_len = NB_OCTETS_CMD;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	220f      	movs	r2, #15
 8015b6e:	811a      	strh	r2, [r3, #8]

    /* store reference to incoming pbuf (chain) */
        es->p = p;
 8015b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b72:	687a      	ldr	r2, [r7, #4]
 8015b74:	609a      	str	r2, [r3, #8]
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8015b76:	4931      	ldr	r1, [pc, #196]	; (8015c3c <tcp_server_recv+0x1a8>)
 8015b78:	68b8      	ldr	r0, [r7, #8]
 8015b7a:	f7f5 f84f 	bl	800ac1c <tcp_sent>

    /* send back the received data (echo) */
    tcp_server_send(tpcb, es);
 8015b7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015b80:	68b8      	ldr	r0, [r7, #8]
 8015b82:	f000 f8b7 	bl	8015cf4 <tcp_server_send>

    ret_err = ERR_OK;
 8015b86:	2300      	movs	r3, #0
 8015b88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015b8c:	e04a      	b.n	8015c24 <tcp_server_recv+0x190>

  }
  else if (es->state == ES_RECEIVED)
 8015b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	2b02      	cmp	r3, #2
 8015b94:	d137      	bne.n	8015c06 <tcp_server_recv+0x172>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8015b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b98:	689b      	ldr	r3, [r3, #8]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d128      	bne.n	8015bf0 <tcp_server_recv+0x15c>
    {

    	// Get the command from the data received over TCP
		F_TCP_paquetTocmd(p, &s_cmd_received);
 8015b9e:	f107 0314 	add.w	r3, r7, #20
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f7fd f83b 	bl	8012c20 <F_TCP_paquetTocmd>
		// Process the command received

		// Send back the answer of the command received


		F_Process_Command(s_cmd_received,&s_cmd_answer);
 8015baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bae:	9300      	str	r3, [sp, #0]
 8015bb0:	f107 0314 	add.w	r3, r7, #20
 8015bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015bb6:	f7fd f917 	bl	8012de8 <F_Process_Command>


		F_TCP_answerTotab(array, s_cmd_answer);
 8015bba:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8015bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc0:	9300      	str	r3, [sp, #0]
 8015bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015bc8:	f7fd f8ac 	bl	8012d24 <F_TCP_answerTotab>

		p->payload = array;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015bd2:	605a      	str	r2, [r3, #4]
		p->len = NB_OCTETS_CMD;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	220f      	movs	r2, #15
 8015bd8:	815a      	strh	r2, [r3, #10]
		p->tot_len = NB_OCTETS_CMD;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	220f      	movs	r2, #15
 8015bde:	811a      	strh	r2, [r3, #8]

		es->p = p;
 8015be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 8015be6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015be8:	68b8      	ldr	r0, [r7, #8]
 8015bea:	f000 f883 	bl	8015cf4 <tcp_server_send>
 8015bee:	e006      	b.n	8015bfe <tcp_server_recv+0x16a>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8015bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bf2:	689b      	ldr	r3, [r3, #8]
 8015bf4:	647b      	str	r3, [r7, #68]	; 0x44
      pbuf_chain(ptr,p);
 8015bf6:	6879      	ldr	r1, [r7, #4]
 8015bf8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015bfa:	f7f3 fc6d 	bl	80094d8 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015c04:	e00e      	b.n	8015c24 <tcp_server_recv+0x190>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	891b      	ldrh	r3, [r3, #8]
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	68b8      	ldr	r0, [r7, #8]
 8015c0e:	f7f4 f9e7 	bl	8009fe0 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 8015c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c14:	2200      	movs	r2, #0
 8015c16:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f7f3 fb39 	bl	8009290 <pbuf_free>
    ret_err = ERR_OK;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  return ret_err;
 8015c24:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	3750      	adds	r7, #80	; 0x50
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	0801b178 	.word	0x0801b178
 8015c34:	0801b18c 	.word	0x0801b18c
 8015c38:	0801b198 	.word	0x0801b198
 8015c3c:	08015cb7 	.word	0x08015cb7

08015c40 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	460b      	mov	r3, r1
 8015c4a:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d002      	beq.n	8015c5c <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8015c56:	68f8      	ldr	r0, [r7, #12]
 8015c58:	f7f2 fb00 	bl	800825c <mem_free>
  }
}
 8015c5c:	bf00      	nop
 8015c5e:	3710      	adds	r7, #16
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}

08015c64 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d013      	beq.n	8015ca0 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d004      	beq.n	8015c8a <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8015c80:	68b9      	ldr	r1, [r7, #8]
 8015c82:	6838      	ldr	r0, [r7, #0]
 8015c84:	f000 f836 	bl	8015cf4 <tcp_server_send>
 8015c88:	e007      	b.n	8015c9a <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	2b03      	cmp	r3, #3
 8015c90:	d103      	bne.n	8015c9a <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8015c92:	68b9      	ldr	r1, [r7, #8]
 8015c94:	6838      	ldr	r0, [r7, #0]
 8015c96:	f000 f87b 	bl	8015d90 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	73fb      	strb	r3, [r7, #15]
 8015c9e:	e004      	b.n	8015caa <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8015ca0:	6838      	ldr	r0, [r7, #0]
 8015ca2:	f7f3 fff7 	bl	8009c94 <tcp_abort>
    ret_err = ERR_ABRT;
 8015ca6:	23f3      	movs	r3, #243	; 0xf3
 8015ca8:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8015caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}

08015cb6 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b086      	sub	sp, #24
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	60f8      	str	r0, [r7, #12]
 8015cbe:	60b9      	str	r1, [r7, #8]
 8015cc0:	4613      	mov	r3, r2
 8015cc2:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	689b      	ldr	r3, [r3, #8]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d004      	beq.n	8015cda <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 8015cd0:	6979      	ldr	r1, [r7, #20]
 8015cd2:	68b8      	ldr	r0, [r7, #8]
 8015cd4:	f000 f80e 	bl	8015cf4 <tcp_server_send>
 8015cd8:	e007      	b.n	8015cea <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	2b03      	cmp	r3, #3
 8015ce0:	d103      	bne.n	8015cea <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 8015ce2:	6979      	ldr	r1, [r7, #20]
 8015ce4:	68b8      	ldr	r0, [r7, #8]
 8015ce6:	f000 f853 	bl	8015d90 <tcp_server_connection_close>
  }
  return ERR_OK;
 8015cea:	2300      	movs	r3, #0
}
 8015cec:	4618      	mov	r0, r3
 8015cee:	3718      	adds	r7, #24
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}

08015cf4 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b086      	sub	sp, #24
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	75fb      	strb	r3, [r7, #23]


  while ((wr_err == ERR_OK) &&
 8015d02:	e031      	b.n	8015d68 <tcp_server_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	689b      	ldr	r3, [r3, #8]
 8015d08:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	6859      	ldr	r1, [r3, #4]
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	895a      	ldrh	r2, [r3, #10]
 8015d12:	2301      	movs	r3, #1
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f7f7 fd8f 	bl	800d838 <tcp_write>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8015d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d118      	bne.n	8015d58 <tcp_server_send+0x64>
    {
      u16_t plen;

      plen = ptr->len;
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	895b      	ldrh	r3, [r3, #10]
 8015d2a:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	681a      	ldr	r2, [r3, #0]
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	689b      	ldr	r3, [r3, #8]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d004      	beq.n	8015d46 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	689b      	ldr	r3, [r3, #8]
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7f3 fb51 	bl	80093e8 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8015d46:	6938      	ldr	r0, [r7, #16]
 8015d48:	f7f3 faa2 	bl	8009290 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8015d4c:	89fb      	ldrh	r3, [r7, #14]
 8015d4e:	4619      	mov	r1, r3
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7f4 f945 	bl	8009fe0 <tcp_recved>
 8015d56:	e007      	b.n	8015d68 <tcp_server_send+0x74>
   }
   else if(wr_err == ERR_MEM)
 8015d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d60:	d102      	bne.n	8015d68 <tcp_server_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	693a      	ldr	r2, [r7, #16]
 8015d66:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8015d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d10b      	bne.n	8015d88 <tcp_server_send+0x94>
         (es->p != NULL) &&
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d007      	beq.n	8015d88 <tcp_server_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	689b      	ldr	r3, [r3, #8]
 8015d7c:	895a      	ldrh	r2, [r3, #10]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8015d84:	429a      	cmp	r2, r3
 8015d86:	d9bd      	bls.n	8015d04 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8015d88:	bf00      	nop
 8015d8a:	3718      	adds	r7, #24
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8015d9a:	2100      	movs	r1, #0
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f7f4 ff09 	bl	800abb4 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8015da2:	2100      	movs	r1, #0
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f7f4 ff39 	bl	800ac1c <tcp_sent>
  tcp_recv(tpcb, NULL);
 8015daa:	2100      	movs	r1, #0
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7f4 ff13 	bl	800abd8 <tcp_recv>
  tcp_err(tpcb, NULL);
 8015db2:	2100      	movs	r1, #0
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f7f4 ff51 	bl	800ac5c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8015dba:	2200      	movs	r2, #0
 8015dbc:	2100      	movs	r1, #0
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f7f4 ff86 	bl	800acd0 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d002      	beq.n	8015dd0 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8015dca:	6838      	ldr	r0, [r7, #0]
 8015dcc:	f7f2 fa46 	bl	800825c <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f7f3 fe95 	bl	8009b00 <tcp_close>
}
 8015dd6:	bf00      	nop
 8015dd8:	3708      	adds	r7, #8
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
	...

08015de0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015de6:	f107 0310 	add.w	r3, r7, #16
 8015dea:	2200      	movs	r2, #0
 8015dec:	601a      	str	r2, [r3, #0]
 8015dee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8015df0:	463b      	mov	r3, r7
 8015df2:	2200      	movs	r2, #0
 8015df4:	601a      	str	r2, [r3, #0]
 8015df6:	605a      	str	r2, [r3, #4]
 8015df8:	609a      	str	r2, [r3, #8]
 8015dfa:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8015dfc:	4b25      	ldr	r3, [pc, #148]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8015e04:	4b23      	ldr	r3, [pc, #140]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e06:	2200      	movs	r2, #0
 8015e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015e0a:	4b22      	ldr	r3, [pc, #136]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8015e10:	4b20      	ldr	r3, [pc, #128]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e12:	2200      	movs	r2, #0
 8015e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015e16:	4b1f      	ldr	r3, [pc, #124]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e18:	2200      	movs	r2, #0
 8015e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015e1c:	4b1d      	ldr	r3, [pc, #116]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e1e:	2200      	movs	r2, #0
 8015e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8015e22:	481c      	ldr	r0, [pc, #112]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e24:	f7ee fc81 	bl	800472a <HAL_TIM_IC_Init>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d001      	beq.n	8015e32 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8015e2e:	f7ff fc05 	bl	801563c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015e32:	2300      	movs	r3, #0
 8015e34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015e36:	2300      	movs	r3, #0
 8015e38:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8015e3a:	f107 0310 	add.w	r3, r7, #16
 8015e3e:	4619      	mov	r1, r3
 8015e40:	4814      	ldr	r0, [pc, #80]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e42:	f7ef f83d 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8015e46:	4603      	mov	r3, r0
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d001      	beq.n	8015e50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8015e4c:	f7ff fbf6 	bl	801563c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8015e50:	2300      	movs	r3, #0
 8015e52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8015e54:	2301      	movs	r3, #1
 8015e56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8015e60:	463b      	mov	r3, r7
 8015e62:	2200      	movs	r2, #0
 8015e64:	4619      	mov	r1, r3
 8015e66:	480b      	ldr	r0, [pc, #44]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e68:	f7ee fd92 	bl	8004990 <HAL_TIM_IC_ConfigChannel>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d001      	beq.n	8015e76 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8015e72:	f7ff fbe3 	bl	801563c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8015e76:	463b      	mov	r3, r7
 8015e78:	2204      	movs	r2, #4
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	4805      	ldr	r0, [pc, #20]	; (8015e94 <MX_TIM2_Init+0xb4>)
 8015e7e:	f7ee fd87 	bl	8004990 <HAL_TIM_IC_ConfigChannel>
 8015e82:	4603      	mov	r3, r0
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d001      	beq.n	8015e8c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8015e88:	f7ff fbd8 	bl	801563c <Error_Handler>
  }

}
 8015e8c:	bf00      	nop
 8015e8e:	3718      	adds	r7, #24
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}
 8015e94:	20007844 	.word	0x20007844

08015e98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b086      	sub	sp, #24
 8015e9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015e9e:	f107 0310 	add.w	r3, r7, #16
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	601a      	str	r2, [r3, #0]
 8015ea6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8015ea8:	463b      	mov	r3, r7
 8015eaa:	2200      	movs	r2, #0
 8015eac:	601a      	str	r2, [r3, #0]
 8015eae:	605a      	str	r2, [r3, #4]
 8015eb0:	609a      	str	r2, [r3, #8]
 8015eb2:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8015eb4:	4b25      	ldr	r3, [pc, #148]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015eb6:	4a26      	ldr	r2, [pc, #152]	; (8015f50 <MX_TIM3_Init+0xb8>)
 8015eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8015eba:	4b24      	ldr	r3, [pc, #144]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015ec0:	4b22      	ldr	r3, [pc, #136]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8015ec6:	4b21      	ldr	r3, [pc, #132]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015ec8:	2200      	movs	r2, #0
 8015eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015ecc:	4b1f      	ldr	r3, [pc, #124]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015ece:	2200      	movs	r2, #0
 8015ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015ed2:	4b1e      	ldr	r3, [pc, #120]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8015ed8:	481c      	ldr	r0, [pc, #112]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015eda:	f7ee fc26 	bl	800472a <HAL_TIM_IC_Init>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d001      	beq.n	8015ee8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8015ee4:	f7ff fbaa 	bl	801563c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015eec:	2300      	movs	r3, #0
 8015eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8015ef0:	f107 0310 	add.w	r3, r7, #16
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	4815      	ldr	r0, [pc, #84]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015ef8:	f7ee ffe2 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8015efc:	4603      	mov	r3, r0
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d001      	beq.n	8015f06 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8015f02:	f7ff fb9b 	bl	801563c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8015f06:	2300      	movs	r3, #0
 8015f08:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8015f12:	2300      	movs	r3, #0
 8015f14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8015f16:	463b      	mov	r3, r7
 8015f18:	2200      	movs	r2, #0
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	480b      	ldr	r0, [pc, #44]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015f1e:	f7ee fd37 	bl	8004990 <HAL_TIM_IC_ConfigChannel>
 8015f22:	4603      	mov	r3, r0
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d001      	beq.n	8015f2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8015f28:	f7ff fb88 	bl	801563c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8015f2c:	463b      	mov	r3, r7
 8015f2e:	2204      	movs	r2, #4
 8015f30:	4619      	mov	r1, r3
 8015f32:	4806      	ldr	r0, [pc, #24]	; (8015f4c <MX_TIM3_Init+0xb4>)
 8015f34:	f7ee fd2c 	bl	8004990 <HAL_TIM_IC_ConfigChannel>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d001      	beq.n	8015f42 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8015f3e:	f7ff fb7d 	bl	801563c <Error_Handler>
  }

}
 8015f42:	bf00      	nop
 8015f44:	3718      	adds	r7, #24
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}
 8015f4a:	bf00      	nop
 8015f4c:	200077c4 	.word	0x200077c4
 8015f50:	40000400 	.word	0x40000400

08015f54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b086      	sub	sp, #24
 8015f58:	af00      	add	r7, sp, #0

	/**TIM4 GPIO Configuration
	PD14     ------> TIM4_CH3
	PD15     ------> TIM4_CH4
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8015f5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8015f5e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f60:	2302      	movs	r3, #2
 8015f62:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f64:	2300      	movs	r3, #0
 8015f66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8015f6c:	2302      	movs	r3, #2
 8015f6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015f70:	1d3b      	adds	r3, r7, #4
 8015f72:	4619      	mov	r1, r3
 8015f74:	4839      	ldr	r0, [pc, #228]	; (801605c <MX_TIM4_Init+0x108>)
 8015f76:	f7ec fa8b 	bl	8002490 <HAL_GPIO_Init>

	// Init Timer 4 CH4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;	// Enable clock on timer 4
 8015f7a:	4b39      	ldr	r3, [pc, #228]	; (8016060 <MX_TIM4_Init+0x10c>)
 8015f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f7e:	4a38      	ldr	r2, [pc, #224]	; (8016060 <MX_TIM4_Init+0x10c>)
 8015f80:	f043 0304 	orr.w	r3, r3, #4
 8015f84:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->PSC = 1;	// Prescaler
 8015f86:	4b37      	ldr	r3, [pc, #220]	; (8016064 <MX_TIM4_Init+0x110>)
 8015f88:	2201      	movs	r2, #1
 8015f8a:	629a      	str	r2, [r3, #40]	; 0x28

	TIM4->ARR = 2250-1;	// 20 KHz (PWM Frequency)
 8015f8c:	4b35      	ldr	r3, [pc, #212]	; (8016064 <MX_TIM4_Init+0x110>)
 8015f8e:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8015f92:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;	// PWM mode 1 upcounting
 8015f94:	4b33      	ldr	r3, [pc, #204]	; (8016064 <MX_TIM4_Init+0x110>)
 8015f96:	69db      	ldr	r3, [r3, #28]
 8015f98:	4a32      	ldr	r2, [pc, #200]	; (8016064 <MX_TIM4_Init+0x110>)
 8015f9a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8015f9e:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8015fa0:	4b30      	ldr	r3, [pc, #192]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fa2:	69db      	ldr	r3, [r3, #28]
 8015fa4:	4a2f      	ldr	r2, [pc, #188]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015faa:	61d3      	str	r3, [r2, #28]

	TIM4->CCMR2 |= TIM_CCMR2_OC4PE;	// Preload Enable
 8015fac:	4b2d      	ldr	r3, [pc, #180]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fae:	69db      	ldr	r3, [r3, #28]
 8015fb0:	4a2c      	ldr	r2, [pc, #176]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015fb6:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~TIM_CCMR2_CC4S;	// Output
 8015fb8:	4b2a      	ldr	r3, [pc, #168]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fba:	69db      	ldr	r3, [r3, #28]
 8015fbc:	4a29      	ldr	r2, [pc, #164]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015fc2:	61d3      	str	r3, [r2, #28]
	TIM4->CCER 	|= TIM_CCER_CC4E;	// Channel is ON
 8015fc4:	4b27      	ldr	r3, [pc, #156]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fc6:	6a1b      	ldr	r3, [r3, #32]
 8015fc8:	4a26      	ldr	r2, [pc, #152]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015fce:	6213      	str	r3, [r2, #32]
	TIM4->CR1 	|= TIM_CR1_ARPE;	// Auto reload
 8015fd0:	4b24      	ldr	r3, [pc, #144]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	4a23      	ldr	r2, [pc, #140]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fda:	6013      	str	r3, [r2, #0]
	TIM4->EGR 	|= TIM_EGR_UG;		// Reinitialize the counter
 8015fdc:	4b21      	ldr	r3, [pc, #132]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fde:	695b      	ldr	r3, [r3, #20]
 8015fe0:	4a20      	ldr	r2, [pc, #128]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fe2:	f043 0301 	orr.w	r3, r3, #1
 8015fe6:	6153      	str	r3, [r2, #20]
	TIM4->SR 	&= TIM_SR_UIF;		// Clear update interrupt flag
 8015fe8:	4b1e      	ldr	r3, [pc, #120]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fea:	691b      	ldr	r3, [r3, #16]
 8015fec:	4a1d      	ldr	r2, [pc, #116]	; (8016064 <MX_TIM4_Init+0x110>)
 8015fee:	f003 0301 	and.w	r3, r3, #1
 8015ff2:	6113      	str	r3, [r2, #16]
	TIM4->BDTR 	|= TIM_BDTR_MOE;	// Main output Enable
 8015ff4:	4b1b      	ldr	r3, [pc, #108]	; (8016064 <MX_TIM4_Init+0x110>)
 8015ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ff8:	4a1a      	ldr	r2, [pc, #104]	; (8016064 <MX_TIM4_Init+0x110>)
 8015ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015ffe:	6453      	str	r3, [r2, #68]	; 0x44

	TIM4->CCR2 = 0; 	// Set duty cycle to 0%
 8016000:	4b18      	ldr	r3, [pc, #96]	; (8016064 <MX_TIM4_Init+0x110>)
 8016002:	2200      	movs	r2, #0
 8016004:	639a      	str	r2, [r3, #56]	; 0x38

	// Init Timer 4 CH3
	TIM4->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;	// PWM mode 1 upcounting
 8016006:	4b17      	ldr	r3, [pc, #92]	; (8016064 <MX_TIM4_Init+0x110>)
 8016008:	69db      	ldr	r3, [r3, #28]
 801600a:	4a16      	ldr	r2, [pc, #88]	; (8016064 <MX_TIM4_Init+0x110>)
 801600c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8016010:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8016012:	4b14      	ldr	r3, [pc, #80]	; (8016064 <MX_TIM4_Init+0x110>)
 8016014:	69db      	ldr	r3, [r3, #28]
 8016016:	4a13      	ldr	r2, [pc, #76]	; (8016064 <MX_TIM4_Init+0x110>)
 8016018:	f023 0310 	bic.w	r3, r3, #16
 801601c:	61d3      	str	r3, [r2, #28]

	TIM4->CCMR2 |= TIM_CCMR2_OC3PE;	// Preload Enable
 801601e:	4b11      	ldr	r3, [pc, #68]	; (8016064 <MX_TIM4_Init+0x110>)
 8016020:	69db      	ldr	r3, [r3, #28]
 8016022:	4a10      	ldr	r2, [pc, #64]	; (8016064 <MX_TIM4_Init+0x110>)
 8016024:	f043 0308 	orr.w	r3, r3, #8
 8016028:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~TIM_CCMR2_CC3S;	// Output
 801602a:	4b0e      	ldr	r3, [pc, #56]	; (8016064 <MX_TIM4_Init+0x110>)
 801602c:	69db      	ldr	r3, [r3, #28]
 801602e:	4a0d      	ldr	r2, [pc, #52]	; (8016064 <MX_TIM4_Init+0x110>)
 8016030:	f023 0303 	bic.w	r3, r3, #3
 8016034:	61d3      	str	r3, [r2, #28]
	TIM4->CCER 	|= TIM_CCER_CC3E;	// Channel is ON
 8016036:	4b0b      	ldr	r3, [pc, #44]	; (8016064 <MX_TIM4_Init+0x110>)
 8016038:	6a1b      	ldr	r3, [r3, #32]
 801603a:	4a0a      	ldr	r2, [pc, #40]	; (8016064 <MX_TIM4_Init+0x110>)
 801603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016040:	6213      	str	r3, [r2, #32]

	TIM4->CCR3 = 0; 	// Set duty cycle to 0%
 8016042:	4b08      	ldr	r3, [pc, #32]	; (8016064 <MX_TIM4_Init+0x110>)
 8016044:	2200      	movs	r2, #0
 8016046:	63da      	str	r2, [r3, #60]	; 0x3c

	// Start Timer 4
	TIM4->CR1 |= TIM_CR1_CEN;
 8016048:	4b06      	ldr	r3, [pc, #24]	; (8016064 <MX_TIM4_Init+0x110>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	4a05      	ldr	r2, [pc, #20]	; (8016064 <MX_TIM4_Init+0x110>)
 801604e:	f043 0301 	orr.w	r3, r3, #1
 8016052:	6013      	str	r3, [r2, #0]


}
 8016054:	bf00      	nop
 8016056:	3718      	adds	r7, #24
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	40020c00 	.word	0x40020c00
 8016060:	40023800 	.word	0x40023800
 8016064:	40000800 	.word	0x40000800

08016068 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 801606c:	4b0e      	ldr	r3, [pc, #56]	; (80160a8 <MX_TIM13_Init+0x40>)
 801606e:	4a0f      	ldr	r2, [pc, #60]	; (80160ac <MX_TIM13_Init+0x44>)
 8016070:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400;
 8016072:	4b0d      	ldr	r3, [pc, #52]	; (80160a8 <MX_TIM13_Init+0x40>)
 8016074:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8016078:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 801607a:	4b0b      	ldr	r3, [pc, #44]	; (80160a8 <MX_TIM13_Init+0x40>)
 801607c:	2200      	movs	r2, #0
 801607e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 8016080:	4b09      	ldr	r3, [pc, #36]	; (80160a8 <MX_TIM13_Init+0x40>)
 8016082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016086:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016088:	4b07      	ldr	r3, [pc, #28]	; (80160a8 <MX_TIM13_Init+0x40>)
 801608a:	2200      	movs	r2, #0
 801608c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801608e:	4b06      	ldr	r3, [pc, #24]	; (80160a8 <MX_TIM13_Init+0x40>)
 8016090:	2280      	movs	r2, #128	; 0x80
 8016092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8016094:	4804      	ldr	r0, [pc, #16]	; (80160a8 <MX_TIM13_Init+0x40>)
 8016096:	f7ee fb1d 	bl	80046d4 <HAL_TIM_Base_Init>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d001      	beq.n	80160a4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80160a0:	f7ff facc 	bl	801563c <Error_Handler>
  }

}
 80160a4:	bf00      	nop
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	20007804 	.word	0x20007804
 80160ac:	40001c00 	.word	0x40001c00

080160b0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b08c      	sub	sp, #48	; 0x30
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80160b8:	f107 031c 	add.w	r3, r7, #28
 80160bc:	2200      	movs	r2, #0
 80160be:	601a      	str	r2, [r3, #0]
 80160c0:	605a      	str	r2, [r3, #4]
 80160c2:	609a      	str	r2, [r3, #8]
 80160c4:	60da      	str	r2, [r3, #12]
 80160c6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80160d0:	d14b      	bne.n	801616a <HAL_TIM_IC_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80160d2:	2300      	movs	r3, #0
 80160d4:	61bb      	str	r3, [r7, #24]
 80160d6:	4b3f      	ldr	r3, [pc, #252]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 80160d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160da:	4a3e      	ldr	r2, [pc, #248]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 80160dc:	f043 0301 	orr.w	r3, r3, #1
 80160e0:	6413      	str	r3, [r2, #64]	; 0x40
 80160e2:	4b3c      	ldr	r3, [pc, #240]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 80160e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160e6:	f003 0301 	and.w	r3, r3, #1
 80160ea:	61bb      	str	r3, [r7, #24]
 80160ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80160ee:	2300      	movs	r3, #0
 80160f0:	617b      	str	r3, [r7, #20]
 80160f2:	4b38      	ldr	r3, [pc, #224]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 80160f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160f6:	4a37      	ldr	r2, [pc, #220]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 80160f8:	f043 0301 	orr.w	r3, r3, #1
 80160fc:	6313      	str	r3, [r2, #48]	; 0x30
 80160fe:	4b35      	ldr	r3, [pc, #212]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 8016100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016102:	f003 0301 	and.w	r3, r3, #1
 8016106:	617b      	str	r3, [r7, #20]
 8016108:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801610a:	2300      	movs	r3, #0
 801610c:	613b      	str	r3, [r7, #16]
 801610e:	4b31      	ldr	r3, [pc, #196]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 8016110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016112:	4a30      	ldr	r2, [pc, #192]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 8016114:	f043 0302 	orr.w	r3, r3, #2
 8016118:	6313      	str	r3, [r2, #48]	; 0x30
 801611a:	4b2e      	ldr	r3, [pc, #184]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 801611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801611e:	f003 0302 	and.w	r3, r3, #2
 8016122:	613b      	str	r3, [r7, #16]
 8016124:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8016126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801612a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801612c:	2302      	movs	r3, #2
 801612e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016130:	2300      	movs	r3, #0
 8016132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016134:	2300      	movs	r3, #0
 8016136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8016138:	2301      	movs	r3, #1
 801613a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801613c:	f107 031c 	add.w	r3, r7, #28
 8016140:	4619      	mov	r1, r3
 8016142:	4825      	ldr	r0, [pc, #148]	; (80161d8 <HAL_TIM_IC_MspInit+0x128>)
 8016144:	f7ec f9a4 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8016148:	2308      	movs	r3, #8
 801614a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801614c:	2302      	movs	r3, #2
 801614e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016150:	2300      	movs	r3, #0
 8016152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016154:	2300      	movs	r3, #0
 8016156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8016158:	2301      	movs	r3, #1
 801615a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801615c:	f107 031c 	add.w	r3, r7, #28
 8016160:	4619      	mov	r1, r3
 8016162:	481e      	ldr	r0, [pc, #120]	; (80161dc <HAL_TIM_IC_MspInit+0x12c>)
 8016164:	f7ec f994 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8016168:	e030      	b.n	80161cc <HAL_TIM_IC_MspInit+0x11c>
  else if(tim_icHandle->Instance==TIM3)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	4a1c      	ldr	r2, [pc, #112]	; (80161e0 <HAL_TIM_IC_MspInit+0x130>)
 8016170:	4293      	cmp	r3, r2
 8016172:	d12b      	bne.n	80161cc <HAL_TIM_IC_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8016174:	2300      	movs	r3, #0
 8016176:	60fb      	str	r3, [r7, #12]
 8016178:	4b16      	ldr	r3, [pc, #88]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 801617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617c:	4a15      	ldr	r2, [pc, #84]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 801617e:	f043 0302 	orr.w	r3, r3, #2
 8016182:	6413      	str	r3, [r2, #64]	; 0x40
 8016184:	4b13      	ldr	r3, [pc, #76]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 8016186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016188:	f003 0302 	and.w	r3, r3, #2
 801618c:	60fb      	str	r3, [r7, #12]
 801618e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016190:	2300      	movs	r3, #0
 8016192:	60bb      	str	r3, [r7, #8]
 8016194:	4b0f      	ldr	r3, [pc, #60]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 8016196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016198:	4a0e      	ldr	r2, [pc, #56]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 801619a:	f043 0302 	orr.w	r3, r3, #2
 801619e:	6313      	str	r3, [r2, #48]	; 0x30
 80161a0:	4b0c      	ldr	r3, [pc, #48]	; (80161d4 <HAL_TIM_IC_MspInit+0x124>)
 80161a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161a4:	f003 0302 	and.w	r3, r3, #2
 80161a8:	60bb      	str	r3, [r7, #8]
 80161aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80161ac:	2330      	movs	r3, #48	; 0x30
 80161ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80161b0:	2302      	movs	r3, #2
 80161b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161b4:	2300      	movs	r3, #0
 80161b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80161b8:	2300      	movs	r3, #0
 80161ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80161bc:	2302      	movs	r3, #2
 80161be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80161c0:	f107 031c 	add.w	r3, r7, #28
 80161c4:	4619      	mov	r1, r3
 80161c6:	4805      	ldr	r0, [pc, #20]	; (80161dc <HAL_TIM_IC_MspInit+0x12c>)
 80161c8:	f7ec f962 	bl	8002490 <HAL_GPIO_Init>
}
 80161cc:	bf00      	nop
 80161ce:	3730      	adds	r7, #48	; 0x30
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}
 80161d4:	40023800 	.word	0x40023800
 80161d8:	40020000 	.word	0x40020000
 80161dc:	40020400 	.word	0x40020400
 80161e0:	40000400 	.word	0x40000400

080161e4 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM4_MspInit 1 */
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	4a0e      	ldr	r2, [pc, #56]	; (801622c <HAL_TIM_Base_MspInit+0x48>)
 80161f2:	4293      	cmp	r3, r2
 80161f4:	d115      	bne.n	8016222 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80161f6:	2300      	movs	r3, #0
 80161f8:	60fb      	str	r3, [r7, #12]
 80161fa:	4b0d      	ldr	r3, [pc, #52]	; (8016230 <HAL_TIM_Base_MspInit+0x4c>)
 80161fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161fe:	4a0c      	ldr	r2, [pc, #48]	; (8016230 <HAL_TIM_Base_MspInit+0x4c>)
 8016200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016204:	6413      	str	r3, [r2, #64]	; 0x40
 8016206:	4b0a      	ldr	r3, [pc, #40]	; (8016230 <HAL_TIM_Base_MspInit+0x4c>)
 8016208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801620e:	60fb      	str	r3, [r7, #12]
 8016210:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8016212:	2200      	movs	r2, #0
 8016214:	2105      	movs	r1, #5
 8016216:	202c      	movs	r0, #44	; 0x2c
 8016218:	f7eb f96f 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801621c:	202c      	movs	r0, #44	; 0x2c
 801621e:	f7eb f988 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8016222:	bf00      	nop
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	40001c00 	.word	0x40001c00
 8016230:	40023800 	.word	0x40023800

08016234 <F_TIM4_CH3_SetDC>:
  }
} 

/* USER CODE BEGIN 1 */
// Fonction validée sur NUCLEO F429ZI le 18-09-2018
void F_TIM4_CH3_SetDC(int dc){
 8016234:	b590      	push	{r4, r7, lr}
 8016236:	b083      	sub	sp, #12
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
	TIM4->CCR3 = dc*22.5; 	// Set duty cycle to 0%
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f7ea f979 	bl	8000534 <__aeabi_i2d>
 8016242:	f04f 0200 	mov.w	r2, #0
 8016246:	4b09      	ldr	r3, [pc, #36]	; (801626c <F_TIM4_CH3_SetDC+0x38>)
 8016248:	f7ea f9de 	bl	8000608 <__aeabi_dmul>
 801624c:	4603      	mov	r3, r0
 801624e:	460c      	mov	r4, r1
 8016250:	461a      	mov	r2, r3
 8016252:	4623      	mov	r3, r4
 8016254:	4c06      	ldr	r4, [pc, #24]	; (8016270 <F_TIM4_CH3_SetDC+0x3c>)
 8016256:	4610      	mov	r0, r2
 8016258:	4619      	mov	r1, r3
 801625a:	f7ea fbe7 	bl	8000a2c <__aeabi_d2uiz>
 801625e:	4603      	mov	r3, r0
 8016260:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8016262:	bf00      	nop
 8016264:	370c      	adds	r7, #12
 8016266:	46bd      	mov	sp, r7
 8016268:	bd90      	pop	{r4, r7, pc}
 801626a:	bf00      	nop
 801626c:	40368000 	.word	0x40368000
 8016270:	40000800 	.word	0x40000800

08016274 <F_TIM4_CH4_SetDC>:
// Fonction validée sur NUCLEO F429ZI le 18-09-2018
void F_TIM4_CH4_SetDC(int dc){
 8016274:	b590      	push	{r4, r7, lr}
 8016276:	b083      	sub	sp, #12
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
	TIM4->CCR4 = dc*22.5; 	// Set duty cycle to 0%
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f7ea f959 	bl	8000534 <__aeabi_i2d>
 8016282:	f04f 0200 	mov.w	r2, #0
 8016286:	4b09      	ldr	r3, [pc, #36]	; (80162ac <F_TIM4_CH4_SetDC+0x38>)
 8016288:	f7ea f9be 	bl	8000608 <__aeabi_dmul>
 801628c:	4603      	mov	r3, r0
 801628e:	460c      	mov	r4, r1
 8016290:	461a      	mov	r2, r3
 8016292:	4623      	mov	r3, r4
 8016294:	4c06      	ldr	r4, [pc, #24]	; (80162b0 <F_TIM4_CH4_SetDC+0x3c>)
 8016296:	4610      	mov	r0, r2
 8016298:	4619      	mov	r1, r3
 801629a:	f7ea fbc7 	bl	8000a2c <__aeabi_d2uiz>
 801629e:	4603      	mov	r3, r0
 80162a0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80162a2:	bf00      	nop
 80162a4:	370c      	adds	r7, #12
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd90      	pop	{r4, r7, pc}
 80162aa:	bf00      	nop
 80162ac:	40368000 	.word	0x40368000
 80162b0:	40000800 	.word	0x40000800

080162b4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80162b8:	4b11      	ldr	r3, [pc, #68]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162ba:	4a12      	ldr	r2, [pc, #72]	; (8016304 <MX_USART3_UART_Init+0x50>)
 80162bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80162be:	4b10      	ldr	r3, [pc, #64]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80162c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80162c6:	4b0e      	ldr	r3, [pc, #56]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162c8:	2200      	movs	r2, #0
 80162ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80162cc:	4b0c      	ldr	r3, [pc, #48]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162ce:	2200      	movs	r2, #0
 80162d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80162d2:	4b0b      	ldr	r3, [pc, #44]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162d4:	2200      	movs	r2, #0
 80162d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80162d8:	4b09      	ldr	r3, [pc, #36]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162da:	220c      	movs	r2, #12
 80162dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80162de:	4b08      	ldr	r3, [pc, #32]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162e0:	2200      	movs	r2, #0
 80162e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80162e4:	4b06      	ldr	r3, [pc, #24]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162e6:	2200      	movs	r2, #0
 80162e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80162ea:	4805      	ldr	r0, [pc, #20]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162ec:	f7ee fe41 	bl	8004f72 <HAL_UART_Init>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d001      	beq.n	80162fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80162f6:	f7ff f9a1 	bl	801563c <Error_Handler>
  }

}
 80162fa:	bf00      	nop
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop
 8016300:	20007884 	.word	0x20007884
 8016304:	40004800 	.word	0x40004800

08016308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b08a      	sub	sp, #40	; 0x28
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016310:	f107 0314 	add.w	r3, r7, #20
 8016314:	2200      	movs	r2, #0
 8016316:	601a      	str	r2, [r3, #0]
 8016318:	605a      	str	r2, [r3, #4]
 801631a:	609a      	str	r2, [r3, #8]
 801631c:	60da      	str	r2, [r3, #12]
 801631e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4a19      	ldr	r2, [pc, #100]	; (801638c <HAL_UART_MspInit+0x84>)
 8016326:	4293      	cmp	r3, r2
 8016328:	d12c      	bne.n	8016384 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801632a:	2300      	movs	r3, #0
 801632c:	613b      	str	r3, [r7, #16]
 801632e:	4b18      	ldr	r3, [pc, #96]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016332:	4a17      	ldr	r2, [pc, #92]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016338:	6413      	str	r3, [r2, #64]	; 0x40
 801633a:	4b15      	ldr	r3, [pc, #84]	; (8016390 <HAL_UART_MspInit+0x88>)
 801633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016342:	613b      	str	r3, [r7, #16]
 8016344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016346:	2300      	movs	r3, #0
 8016348:	60fb      	str	r3, [r7, #12]
 801634a:	4b11      	ldr	r3, [pc, #68]	; (8016390 <HAL_UART_MspInit+0x88>)
 801634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801634e:	4a10      	ldr	r2, [pc, #64]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016350:	f043 0308 	orr.w	r3, r3, #8
 8016354:	6313      	str	r3, [r2, #48]	; 0x30
 8016356:	4b0e      	ldr	r3, [pc, #56]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801635a:	f003 0308 	and.w	r3, r3, #8
 801635e:	60fb      	str	r3, [r7, #12]
 8016360:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8016362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8016366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016368:	2302      	movs	r3, #2
 801636a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801636c:	2301      	movs	r3, #1
 801636e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016370:	2303      	movs	r3, #3
 8016372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8016374:	2307      	movs	r3, #7
 8016376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016378:	f107 0314 	add.w	r3, r7, #20
 801637c:	4619      	mov	r1, r3
 801637e:	4805      	ldr	r0, [pc, #20]	; (8016394 <HAL_UART_MspInit+0x8c>)
 8016380:	f7ec f886 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8016384:	bf00      	nop
 8016386:	3728      	adds	r7, #40	; 0x28
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	40004800 	.word	0x40004800
 8016390:	40023800 	.word	0x40023800
 8016394:	40020c00 	.word	0x40020c00

08016398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801639c:	2200      	movs	r2, #0
 801639e:	4912      	ldr	r1, [pc, #72]	; (80163e8 <MX_USB_DEVICE_Init+0x50>)
 80163a0:	4812      	ldr	r0, [pc, #72]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163a2:	f7f0 fdef 	bl	8006f84 <USBD_Init>
 80163a6:	4603      	mov	r3, r0
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d001      	beq.n	80163b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80163ac:	f7ff f946 	bl	801563c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80163b0:	490f      	ldr	r1, [pc, #60]	; (80163f0 <MX_USB_DEVICE_Init+0x58>)
 80163b2:	480e      	ldr	r0, [pc, #56]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163b4:	f7f0 fe11 	bl	8006fda <USBD_RegisterClass>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d001      	beq.n	80163c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163be:	f7ff f93d 	bl	801563c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80163c2:	490c      	ldr	r1, [pc, #48]	; (80163f4 <MX_USB_DEVICE_Init+0x5c>)
 80163c4:	4809      	ldr	r0, [pc, #36]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163c6:	f7f0 fd3f 	bl	8006e48 <USBD_CDC_RegisterInterface>
 80163ca:	4603      	mov	r3, r0
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d001      	beq.n	80163d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163d0:	f7ff f934 	bl	801563c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80163d4:	4805      	ldr	r0, [pc, #20]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163d6:	f7f0 fe1a 	bl	800700e <USBD_Start>
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d001      	beq.n	80163e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80163e0:	f7ff f92c 	bl	801563c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80163e4:	bf00      	nop
 80163e6:	bd80      	pop	{r7, pc}
 80163e8:	2000013c 	.word	0x2000013c
 80163ec:	200078c4 	.word	0x200078c4
 80163f0:	20000014 	.word	0x20000014
 80163f4:	2000012c 	.word	0x2000012c

080163f8 <__io_getchar>:
	CDC_Transmit_FS((uint8_t *)&ch, 1);

	return(ch);
}

int __io_getchar(void){
 80163f8:	b480      	push	{r7}
 80163fa:	af00      	add	r7, sp, #0

  // Loop until the reception buffer is not empty
  while(!(USART6->SR & USART_SR_RXNE));
 80163fc:	bf00      	nop
 80163fe:	4b06      	ldr	r3, [pc, #24]	; (8016418 <__io_getchar+0x20>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f003 0320 	and.w	r3, r3, #32
 8016406:	2b00      	cmp	r3, #0
 8016408:	d0f9      	beq.n	80163fe <__io_getchar+0x6>

  return((int)USART6->DR);
 801640a:	4b03      	ldr	r3, [pc, #12]	; (8016418 <__io_getchar+0x20>)
 801640c:	685b      	ldr	r3, [r3, #4]
}
 801640e:	4618      	mov	r0, r3
 8016410:	46bd      	mov	sp, r7
 8016412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016416:	4770      	bx	lr
 8016418:	40011400 	.word	0x40011400

0801641c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016420:	2200      	movs	r2, #0
 8016422:	4905      	ldr	r1, [pc, #20]	; (8016438 <CDC_Init_FS+0x1c>)
 8016424:	4805      	ldr	r0, [pc, #20]	; (801643c <CDC_Init_FS+0x20>)
 8016426:	f7f0 fd26 	bl	8006e76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801642a:	4905      	ldr	r1, [pc, #20]	; (8016440 <CDC_Init_FS+0x24>)
 801642c:	4803      	ldr	r0, [pc, #12]	; (801643c <CDC_Init_FS+0x20>)
 801642e:	f7f0 fd3c 	bl	8006eaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016432:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016434:	4618      	mov	r0, r3
 8016436:	bd80      	pop	{r7, pc}
 8016438:	20008360 	.word	0x20008360
 801643c:	200078c4 	.word	0x200078c4
 8016440:	20007b60 	.word	0x20007b60

08016444 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016444:	b480      	push	{r7}
 8016446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016448:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801644a:	4618      	mov	r0, r3
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr

08016454 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	4603      	mov	r3, r0
 801645c:	6039      	str	r1, [r7, #0]
 801645e:	71fb      	strb	r3, [r7, #7]
 8016460:	4613      	mov	r3, r2
 8016462:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016464:	79fb      	ldrb	r3, [r7, #7]
 8016466:	2b23      	cmp	r3, #35	; 0x23
 8016468:	d84a      	bhi.n	8016500 <CDC_Control_FS+0xac>
 801646a:	a201      	add	r2, pc, #4	; (adr r2, 8016470 <CDC_Control_FS+0x1c>)
 801646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016470:	08016501 	.word	0x08016501
 8016474:	08016501 	.word	0x08016501
 8016478:	08016501 	.word	0x08016501
 801647c:	08016501 	.word	0x08016501
 8016480:	08016501 	.word	0x08016501
 8016484:	08016501 	.word	0x08016501
 8016488:	08016501 	.word	0x08016501
 801648c:	08016501 	.word	0x08016501
 8016490:	08016501 	.word	0x08016501
 8016494:	08016501 	.word	0x08016501
 8016498:	08016501 	.word	0x08016501
 801649c:	08016501 	.word	0x08016501
 80164a0:	08016501 	.word	0x08016501
 80164a4:	08016501 	.word	0x08016501
 80164a8:	08016501 	.word	0x08016501
 80164ac:	08016501 	.word	0x08016501
 80164b0:	08016501 	.word	0x08016501
 80164b4:	08016501 	.word	0x08016501
 80164b8:	08016501 	.word	0x08016501
 80164bc:	08016501 	.word	0x08016501
 80164c0:	08016501 	.word	0x08016501
 80164c4:	08016501 	.word	0x08016501
 80164c8:	08016501 	.word	0x08016501
 80164cc:	08016501 	.word	0x08016501
 80164d0:	08016501 	.word	0x08016501
 80164d4:	08016501 	.word	0x08016501
 80164d8:	08016501 	.word	0x08016501
 80164dc:	08016501 	.word	0x08016501
 80164e0:	08016501 	.word	0x08016501
 80164e4:	08016501 	.word	0x08016501
 80164e8:	08016501 	.word	0x08016501
 80164ec:	08016501 	.word	0x08016501
 80164f0:	08016501 	.word	0x08016501
 80164f4:	08016501 	.word	0x08016501
 80164f8:	08016501 	.word	0x08016501
 80164fc:	08016501 	.word	0x08016501
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016500:	bf00      	nop
  }

  return (USBD_OK);
 8016502:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016504:	4618      	mov	r0, r3
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650e:	4770      	bx	lr

08016510 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801651a:	6879      	ldr	r1, [r7, #4]
 801651c:	4805      	ldr	r0, [pc, #20]	; (8016534 <CDC_Receive_FS+0x24>)
 801651e:	f7f0 fcc4 	bl	8006eaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016522:	4804      	ldr	r0, [pc, #16]	; (8016534 <CDC_Receive_FS+0x24>)
 8016524:	f7f0 fd04 	bl	8006f30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016528:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801652a:	4618      	mov	r0, r3
 801652c:	3708      	adds	r7, #8
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	200078c4 	.word	0x200078c4

08016538 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b084      	sub	sp, #16
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	460b      	mov	r3, r1
 8016542:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016544:	2300      	movs	r3, #0
 8016546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016548:	4b0d      	ldr	r3, [pc, #52]	; (8016580 <CDC_Transmit_FS+0x48>)
 801654a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801654e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016556:	2b00      	cmp	r3, #0
 8016558:	d001      	beq.n	801655e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801655a:	2301      	movs	r3, #1
 801655c:	e00b      	b.n	8016576 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801655e:	887b      	ldrh	r3, [r7, #2]
 8016560:	461a      	mov	r2, r3
 8016562:	6879      	ldr	r1, [r7, #4]
 8016564:	4806      	ldr	r0, [pc, #24]	; (8016580 <CDC_Transmit_FS+0x48>)
 8016566:	f7f0 fc86 	bl	8006e76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801656a:	4805      	ldr	r0, [pc, #20]	; (8016580 <CDC_Transmit_FS+0x48>)
 801656c:	f7f0 fcb1 	bl	8006ed2 <USBD_CDC_TransmitPacket>
 8016570:	4603      	mov	r3, r0
 8016572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016574:	7bfb      	ldrb	r3, [r7, #15]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3710      	adds	r7, #16
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
 801657e:	bf00      	nop
 8016580:	200078c4 	.word	0x200078c4

08016584 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b08a      	sub	sp, #40	; 0x28
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801658c:	f107 0314 	add.w	r3, r7, #20
 8016590:	2200      	movs	r2, #0
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	605a      	str	r2, [r3, #4]
 8016596:	609a      	str	r2, [r3, #8]
 8016598:	60da      	str	r2, [r3, #12]
 801659a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80165a4:	d147      	bne.n	8016636 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80165a6:	2300      	movs	r3, #0
 80165a8:	613b      	str	r3, [r7, #16]
 80165aa:	4b25      	ldr	r3, [pc, #148]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 80165ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ae:	4a24      	ldr	r2, [pc, #144]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 80165b0:	f043 0301 	orr.w	r3, r3, #1
 80165b4:	6313      	str	r3, [r2, #48]	; 0x30
 80165b6:	4b22      	ldr	r3, [pc, #136]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 80165b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ba:	f003 0301 	and.w	r3, r3, #1
 80165be:	613b      	str	r3, [r7, #16]
 80165c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80165c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80165c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165c8:	2302      	movs	r3, #2
 80165ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165cc:	2300      	movs	r3, #0
 80165ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165d0:	2303      	movs	r3, #3
 80165d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80165d4:	230a      	movs	r3, #10
 80165d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80165d8:	f107 0314 	add.w	r3, r7, #20
 80165dc:	4619      	mov	r1, r3
 80165de:	4819      	ldr	r0, [pc, #100]	; (8016644 <HAL_PCD_MspInit+0xc0>)
 80165e0:	f7eb ff56 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80165e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80165e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80165ea:	2300      	movs	r3, #0
 80165ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165ee:	2300      	movs	r3, #0
 80165f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80165f2:	f107 0314 	add.w	r3, r7, #20
 80165f6:	4619      	mov	r1, r3
 80165f8:	4812      	ldr	r0, [pc, #72]	; (8016644 <HAL_PCD_MspInit+0xc0>)
 80165fa:	f7eb ff49 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80165fe:	4b10      	ldr	r3, [pc, #64]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016602:	4a0f      	ldr	r2, [pc, #60]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016608:	6353      	str	r3, [r2, #52]	; 0x34
 801660a:	2300      	movs	r3, #0
 801660c:	60fb      	str	r3, [r7, #12]
 801660e:	4b0c      	ldr	r3, [pc, #48]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016612:	4a0b      	ldr	r2, [pc, #44]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016618:	6453      	str	r3, [r2, #68]	; 0x44
 801661a:	4b09      	ldr	r3, [pc, #36]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 801661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801661e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016622:	60fb      	str	r3, [r7, #12]
 8016624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016626:	2200      	movs	r2, #0
 8016628:	2100      	movs	r1, #0
 801662a:	2043      	movs	r0, #67	; 0x43
 801662c:	f7ea ff65 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016630:	2043      	movs	r0, #67	; 0x43
 8016632:	f7ea ff7e 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016636:	bf00      	nop
 8016638:	3728      	adds	r7, #40	; 0x28
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	40023800 	.word	0x40023800
 8016644:	40020000 	.word	0x40020000

08016648 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801665c:	4619      	mov	r1, r3
 801665e:	4610      	mov	r0, r2
 8016660:	f7f0 fd1e 	bl	80070a0 <USBD_LL_SetupStage>
}
 8016664:	bf00      	nop
 8016666:	3708      	adds	r7, #8
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
 8016674:	460b      	mov	r3, r1
 8016676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801667e:	78fa      	ldrb	r2, [r7, #3]
 8016680:	6879      	ldr	r1, [r7, #4]
 8016682:	4613      	mov	r3, r2
 8016684:	00db      	lsls	r3, r3, #3
 8016686:	1a9b      	subs	r3, r3, r2
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	440b      	add	r3, r1
 801668c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	78fb      	ldrb	r3, [r7, #3]
 8016694:	4619      	mov	r1, r3
 8016696:	f7f0 fd4e 	bl	8007136 <USBD_LL_DataOutStage>
}
 801669a:	bf00      	nop
 801669c:	3708      	adds	r7, #8
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166a2:	b580      	push	{r7, lr}
 80166a4:	b082      	sub	sp, #8
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
 80166aa:	460b      	mov	r3, r1
 80166ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80166b4:	78fa      	ldrb	r2, [r7, #3]
 80166b6:	6879      	ldr	r1, [r7, #4]
 80166b8:	4613      	mov	r3, r2
 80166ba:	00db      	lsls	r3, r3, #3
 80166bc:	1a9b      	subs	r3, r3, r2
 80166be:	009b      	lsls	r3, r3, #2
 80166c0:	440b      	add	r3, r1
 80166c2:	3348      	adds	r3, #72	; 0x48
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	78fb      	ldrb	r3, [r7, #3]
 80166c8:	4619      	mov	r1, r3
 80166ca:	f7f0 fda5 	bl	8007218 <USBD_LL_DataInStage>
}
 80166ce:	bf00      	nop
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}

080166d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b082      	sub	sp, #8
 80166da:	af00      	add	r7, sp, #0
 80166dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7f0 feb3 	bl	8007450 <USBD_LL_SOF>
}
 80166ea:	bf00      	nop
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}

080166f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80166f2:	b580      	push	{r7, lr}
 80166f4:	b084      	sub	sp, #16
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80166fa:	2301      	movs	r3, #1
 80166fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d102      	bne.n	801670c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016706:	2300      	movs	r3, #0
 8016708:	73fb      	strb	r3, [r7, #15]
 801670a:	e008      	b.n	801671e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	68db      	ldr	r3, [r3, #12]
 8016710:	2b02      	cmp	r3, #2
 8016712:	d102      	bne.n	801671a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016714:	2301      	movs	r3, #1
 8016716:	73fb      	strb	r3, [r7, #15]
 8016718:	e001      	b.n	801671e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801671a:	f7fe ff8f 	bl	801563c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016724:	7bfa      	ldrb	r2, [r7, #15]
 8016726:	4611      	mov	r1, r2
 8016728:	4618      	mov	r0, r3
 801672a:	f7f0 fe5b 	bl	80073e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016734:	4618      	mov	r0, r3
 8016736:	f7f0 fe14 	bl	8007362 <USBD_LL_Reset>
}
 801673a:	bf00      	nop
 801673c:	3710      	adds	r7, #16
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
	...

08016744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016752:	4618      	mov	r0, r3
 8016754:	f7f0 fe56 	bl	8007404 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	687a      	ldr	r2, [r7, #4]
 8016764:	6812      	ldr	r2, [r2, #0]
 8016766:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801676a:	f043 0301 	orr.w	r3, r3, #1
 801676e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	6a1b      	ldr	r3, [r3, #32]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d005      	beq.n	8016784 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016778:	4b04      	ldr	r3, [pc, #16]	; (801678c <HAL_PCD_SuspendCallback+0x48>)
 801677a:	691b      	ldr	r3, [r3, #16]
 801677c:	4a03      	ldr	r2, [pc, #12]	; (801678c <HAL_PCD_SuspendCallback+0x48>)
 801677e:	f043 0306 	orr.w	r3, r3, #6
 8016782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016784:	bf00      	nop
 8016786:	3708      	adds	r7, #8
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	e000ed00 	.word	0xe000ed00

08016790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801679e:	4618      	mov	r0, r3
 80167a0:	f7f0 fe45 	bl	800742e <USBD_LL_Resume>
}
 80167a4:	bf00      	nop
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	460b      	mov	r3, r1
 80167b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167be:	78fa      	ldrb	r2, [r7, #3]
 80167c0:	4611      	mov	r1, r2
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7f0 fe6b 	bl	800749e <USBD_LL_IsoOUTIncomplete>
}
 80167c8:	bf00      	nop
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	460b      	mov	r3, r1
 80167da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167e2:	78fa      	ldrb	r2, [r7, #3]
 80167e4:	4611      	mov	r1, r2
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7f0 fe4c 	bl	8007484 <USBD_LL_IsoINIncomplete>
}
 80167ec:	bf00      	nop
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b082      	sub	sp, #8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016802:	4618      	mov	r0, r3
 8016804:	f7f0 fe58 	bl	80074b8 <USBD_LL_DevConnected>
}
 8016808:	bf00      	nop
 801680a:	3708      	adds	r7, #8
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}

08016810 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801681e:	4618      	mov	r0, r3
 8016820:	f7f0 fe55 	bl	80074ce <USBD_LL_DevDisconnected>
}
 8016824:	bf00      	nop
 8016826:	3708      	adds	r7, #8
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	781b      	ldrb	r3, [r3, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d13c      	bne.n	80168b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801683c:	4a20      	ldr	r2, [pc, #128]	; (80168c0 <USBD_LL_Init+0x94>)
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	4a1e      	ldr	r2, [pc, #120]	; (80168c0 <USBD_LL_Init+0x94>)
 8016848:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801684c:	4b1c      	ldr	r3, [pc, #112]	; (80168c0 <USBD_LL_Init+0x94>)
 801684e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016854:	4b1a      	ldr	r3, [pc, #104]	; (80168c0 <USBD_LL_Init+0x94>)
 8016856:	2204      	movs	r2, #4
 8016858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801685a:	4b19      	ldr	r3, [pc, #100]	; (80168c0 <USBD_LL_Init+0x94>)
 801685c:	2202      	movs	r2, #2
 801685e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016860:	4b17      	ldr	r3, [pc, #92]	; (80168c0 <USBD_LL_Init+0x94>)
 8016862:	2200      	movs	r2, #0
 8016864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016866:	4b16      	ldr	r3, [pc, #88]	; (80168c0 <USBD_LL_Init+0x94>)
 8016868:	2202      	movs	r2, #2
 801686a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801686c:	4b14      	ldr	r3, [pc, #80]	; (80168c0 <USBD_LL_Init+0x94>)
 801686e:	2201      	movs	r2, #1
 8016870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016872:	4b13      	ldr	r3, [pc, #76]	; (80168c0 <USBD_LL_Init+0x94>)
 8016874:	2200      	movs	r2, #0
 8016876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016878:	4b11      	ldr	r3, [pc, #68]	; (80168c0 <USBD_LL_Init+0x94>)
 801687a:	2200      	movs	r2, #0
 801687c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801687e:	4b10      	ldr	r3, [pc, #64]	; (80168c0 <USBD_LL_Init+0x94>)
 8016880:	2201      	movs	r2, #1
 8016882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016884:	4b0e      	ldr	r3, [pc, #56]	; (80168c0 <USBD_LL_Init+0x94>)
 8016886:	2200      	movs	r2, #0
 8016888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801688a:	480d      	ldr	r0, [pc, #52]	; (80168c0 <USBD_LL_Init+0x94>)
 801688c:	f7ec f967 	bl	8002b5e <HAL_PCD_Init>
 8016890:	4603      	mov	r3, r0
 8016892:	2b00      	cmp	r3, #0
 8016894:	d001      	beq.n	801689a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016896:	f7fe fed1 	bl	801563c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801689a:	2180      	movs	r1, #128	; 0x80
 801689c:	4808      	ldr	r0, [pc, #32]	; (80168c0 <USBD_LL_Init+0x94>)
 801689e:	f7ed facc 	bl	8003e3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80168a2:	2240      	movs	r2, #64	; 0x40
 80168a4:	2100      	movs	r1, #0
 80168a6:	4806      	ldr	r0, [pc, #24]	; (80168c0 <USBD_LL_Init+0x94>)
 80168a8:	f7ed fa80 	bl	8003dac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80168ac:	2280      	movs	r2, #128	; 0x80
 80168ae:	2101      	movs	r1, #1
 80168b0:	4803      	ldr	r0, [pc, #12]	; (80168c0 <USBD_LL_Init+0x94>)
 80168b2:	f7ed fa7b 	bl	8003dac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80168b6:	2300      	movs	r3, #0
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3708      	adds	r7, #8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	20008b60 	.word	0x20008b60

080168c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b084      	sub	sp, #16
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168cc:	2300      	movs	r3, #0
 80168ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168d0:	2300      	movs	r3, #0
 80168d2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80168da:	4618      	mov	r0, r3
 80168dc:	f7ec fa5c 	bl	8002d98 <HAL_PCD_Start>
 80168e0:	4603      	mov	r3, r0
 80168e2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80168e4:	7bfb      	ldrb	r3, [r7, #15]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f000 f92e 	bl	8016b48 <USBD_Get_USB_Status>
 80168ec:	4603      	mov	r3, r0
 80168ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80168f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3710      	adds	r7, #16
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}

080168fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80168fa:	b580      	push	{r7, lr}
 80168fc:	b084      	sub	sp, #16
 80168fe:	af00      	add	r7, sp, #0
 8016900:	6078      	str	r0, [r7, #4]
 8016902:	4608      	mov	r0, r1
 8016904:	4611      	mov	r1, r2
 8016906:	461a      	mov	r2, r3
 8016908:	4603      	mov	r3, r0
 801690a:	70fb      	strb	r3, [r7, #3]
 801690c:	460b      	mov	r3, r1
 801690e:	70bb      	strb	r3, [r7, #2]
 8016910:	4613      	mov	r3, r2
 8016912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016914:	2300      	movs	r3, #0
 8016916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016918:	2300      	movs	r3, #0
 801691a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016922:	78bb      	ldrb	r3, [r7, #2]
 8016924:	883a      	ldrh	r2, [r7, #0]
 8016926:	78f9      	ldrb	r1, [r7, #3]
 8016928:	f7ec fe31 	bl	800358e <HAL_PCD_EP_Open>
 801692c:	4603      	mov	r3, r0
 801692e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016930:	7bfb      	ldrb	r3, [r7, #15]
 8016932:	4618      	mov	r0, r3
 8016934:	f000 f908 	bl	8016b48 <USBD_Get_USB_Status>
 8016938:	4603      	mov	r3, r0
 801693a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801693c:	7bbb      	ldrb	r3, [r7, #14]
}
 801693e:	4618      	mov	r0, r3
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b084      	sub	sp, #16
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
 801694e:	460b      	mov	r3, r1
 8016950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016952:	2300      	movs	r3, #0
 8016954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016956:	2300      	movs	r3, #0
 8016958:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016960:	78fa      	ldrb	r2, [r7, #3]
 8016962:	4611      	mov	r1, r2
 8016964:	4618      	mov	r0, r3
 8016966:	f7ec fe7a 	bl	800365e <HAL_PCD_EP_Close>
 801696a:	4603      	mov	r3, r0
 801696c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801696e:	7bfb      	ldrb	r3, [r7, #15]
 8016970:	4618      	mov	r0, r3
 8016972:	f000 f8e9 	bl	8016b48 <USBD_Get_USB_Status>
 8016976:	4603      	mov	r3, r0
 8016978:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801697a:	7bbb      	ldrb	r3, [r7, #14]
}
 801697c:	4618      	mov	r0, r3
 801697e:	3710      	adds	r7, #16
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}

08016984 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b084      	sub	sp, #16
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	460b      	mov	r3, r1
 801698e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016990:	2300      	movs	r3, #0
 8016992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016994:	2300      	movs	r3, #0
 8016996:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801699e:	78fa      	ldrb	r2, [r7, #3]
 80169a0:	4611      	mov	r1, r2
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7ec ff52 	bl	800384c <HAL_PCD_EP_SetStall>
 80169a8:	4603      	mov	r3, r0
 80169aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169ac:	7bfb      	ldrb	r3, [r7, #15]
 80169ae:	4618      	mov	r0, r3
 80169b0:	f000 f8ca 	bl	8016b48 <USBD_Get_USB_Status>
 80169b4:	4603      	mov	r3, r0
 80169b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80169b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3710      	adds	r7, #16
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b084      	sub	sp, #16
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	460b      	mov	r3, r1
 80169cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169ce:	2300      	movs	r3, #0
 80169d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169d2:	2300      	movs	r3, #0
 80169d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80169dc:	78fa      	ldrb	r2, [r7, #3]
 80169de:	4611      	mov	r1, r2
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7ec ff97 	bl	8003914 <HAL_PCD_EP_ClrStall>
 80169e6:	4603      	mov	r3, r0
 80169e8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80169ea:	7bfb      	ldrb	r3, [r7, #15]
 80169ec:	4618      	mov	r0, r3
 80169ee:	f000 f8ab 	bl	8016b48 <USBD_Get_USB_Status>
 80169f2:	4603      	mov	r3, r0
 80169f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80169f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	3710      	adds	r7, #16
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}

08016a00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a00:	b480      	push	{r7}
 8016a02:	b085      	sub	sp, #20
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
 8016a08:	460b      	mov	r3, r1
 8016a0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a12:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	da0b      	bge.n	8016a34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016a1c:	78fb      	ldrb	r3, [r7, #3]
 8016a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a22:	68f9      	ldr	r1, [r7, #12]
 8016a24:	4613      	mov	r3, r2
 8016a26:	00db      	lsls	r3, r3, #3
 8016a28:	1a9b      	subs	r3, r3, r2
 8016a2a:	009b      	lsls	r3, r3, #2
 8016a2c:	440b      	add	r3, r1
 8016a2e:	333e      	adds	r3, #62	; 0x3e
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	e00b      	b.n	8016a4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016a34:	78fb      	ldrb	r3, [r7, #3]
 8016a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a3a:	68f9      	ldr	r1, [r7, #12]
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	1a9b      	subs	r3, r3, r2
 8016a42:	009b      	lsls	r3, r3, #2
 8016a44:	440b      	add	r3, r1
 8016a46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016a4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3714      	adds	r7, #20
 8016a50:	46bd      	mov	sp, r7
 8016a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a56:	4770      	bx	lr

08016a58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b084      	sub	sp, #16
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	460b      	mov	r3, r1
 8016a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a64:	2300      	movs	r3, #0
 8016a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a72:	78fa      	ldrb	r2, [r7, #3]
 8016a74:	4611      	mov	r1, r2
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7ec fd64 	bl	8003544 <HAL_PCD_SetAddress>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a80:	7bfb      	ldrb	r3, [r7, #15]
 8016a82:	4618      	mov	r0, r3
 8016a84:	f000 f860 	bl	8016b48 <USBD_Get_USB_Status>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3710      	adds	r7, #16
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}

08016a96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016a96:	b580      	push	{r7, lr}
 8016a98:	b086      	sub	sp, #24
 8016a9a:	af00      	add	r7, sp, #0
 8016a9c:	60f8      	str	r0, [r7, #12]
 8016a9e:	607a      	str	r2, [r7, #4]
 8016aa0:	461a      	mov	r2, r3
 8016aa2:	460b      	mov	r3, r1
 8016aa4:	72fb      	strb	r3, [r7, #11]
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016ab8:	893b      	ldrh	r3, [r7, #8]
 8016aba:	7af9      	ldrb	r1, [r7, #11]
 8016abc:	687a      	ldr	r2, [r7, #4]
 8016abe:	f7ec fe7b 	bl	80037b8 <HAL_PCD_EP_Transmit>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016ac6:	7dfb      	ldrb	r3, [r7, #23]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f000 f83d 	bl	8016b48 <USBD_Get_USB_Status>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3718      	adds	r7, #24
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}

08016adc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b086      	sub	sp, #24
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	607a      	str	r2, [r7, #4]
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	460b      	mov	r3, r1
 8016aea:	72fb      	strb	r3, [r7, #11]
 8016aec:	4613      	mov	r3, r2
 8016aee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016af4:	2300      	movs	r3, #0
 8016af6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016afe:	893b      	ldrh	r3, [r7, #8]
 8016b00:	7af9      	ldrb	r1, [r7, #11]
 8016b02:	687a      	ldr	r2, [r7, #4]
 8016b04:	f7ec fdf5 	bl	80036f2 <HAL_PCD_EP_Receive>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016b0c:	7dfb      	ldrb	r3, [r7, #23]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f000 f81a 	bl	8016b48 <USBD_Get_USB_Status>
 8016b14:	4603      	mov	r3, r0
 8016b16:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016b18:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3718      	adds	r7, #24
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}

08016b22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b082      	sub	sp, #8
 8016b26:	af00      	add	r7, sp, #0
 8016b28:	6078      	str	r0, [r7, #4]
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b34:	78fa      	ldrb	r2, [r7, #3]
 8016b36:	4611      	mov	r1, r2
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7ec fe25 	bl	8003788 <HAL_PCD_EP_GetRxCount>
 8016b3e:	4603      	mov	r3, r0
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	4603      	mov	r3, r0
 8016b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b52:	2300      	movs	r3, #0
 8016b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016b56:	79fb      	ldrb	r3, [r7, #7]
 8016b58:	2b03      	cmp	r3, #3
 8016b5a:	d817      	bhi.n	8016b8c <USBD_Get_USB_Status+0x44>
 8016b5c:	a201      	add	r2, pc, #4	; (adr r2, 8016b64 <USBD_Get_USB_Status+0x1c>)
 8016b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b62:	bf00      	nop
 8016b64:	08016b75 	.word	0x08016b75
 8016b68:	08016b7b 	.word	0x08016b7b
 8016b6c:	08016b81 	.word	0x08016b81
 8016b70:	08016b87 	.word	0x08016b87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016b74:	2300      	movs	r3, #0
 8016b76:	73fb      	strb	r3, [r7, #15]
    break;
 8016b78:	e00b      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016b7a:	2302      	movs	r3, #2
 8016b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8016b7e:	e008      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016b80:	2301      	movs	r3, #1
 8016b82:	73fb      	strb	r3, [r7, #15]
    break;
 8016b84:	e005      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016b86:	2302      	movs	r3, #2
 8016b88:	73fb      	strb	r3, [r7, #15]
    break;
 8016b8a:	e002      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016b8c:	2302      	movs	r3, #2
 8016b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8016b90:	bf00      	nop
  }
  return usb_status;
 8016b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	3714      	adds	r7, #20
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9e:	4770      	bx	lr

08016ba0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	b083      	sub	sp, #12
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	6039      	str	r1, [r7, #0]
 8016baa:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	2212      	movs	r2, #18
 8016bb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016bb2:	4b03      	ldr	r3, [pc, #12]	; (8016bc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	370c      	adds	r7, #12
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr
 8016bc0:	20000158 	.word	0x20000158

08016bc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b083      	sub	sp, #12
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	4603      	mov	r3, r0
 8016bcc:	6039      	str	r1, [r7, #0]
 8016bce:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	2204      	movs	r2, #4
 8016bd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016bd6:	4b03      	ldr	r3, [pc, #12]	; (8016be4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	370c      	adds	r7, #12
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be2:	4770      	bx	lr
 8016be4:	2000016c 	.word	0x2000016c

08016be8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	6039      	str	r1, [r7, #0]
 8016bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016bf4:	79fb      	ldrb	r3, [r7, #7]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d105      	bne.n	8016c06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016bfa:	683a      	ldr	r2, [r7, #0]
 8016bfc:	4907      	ldr	r1, [pc, #28]	; (8016c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8016bfe:	4808      	ldr	r0, [pc, #32]	; (8016c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c00:	f7f1 f93c 	bl	8007e7c <USBD_GetString>
 8016c04:	e004      	b.n	8016c10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016c06:	683a      	ldr	r2, [r7, #0]
 8016c08:	4904      	ldr	r1, [pc, #16]	; (8016c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8016c0a:	4805      	ldr	r0, [pc, #20]	; (8016c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c0c:	f7f1 f936 	bl	8007e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c10:	4b02      	ldr	r3, [pc, #8]	; (8016c1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3708      	adds	r7, #8
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	20008f68 	.word	0x20008f68
 8016c20:	0801b1c0 	.word	0x0801b1c0

08016c24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	6039      	str	r1, [r7, #0]
 8016c2e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016c30:	683a      	ldr	r2, [r7, #0]
 8016c32:	4904      	ldr	r1, [pc, #16]	; (8016c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016c34:	4804      	ldr	r0, [pc, #16]	; (8016c48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016c36:	f7f1 f921 	bl	8007e7c <USBD_GetString>
  return USBD_StrDesc;
 8016c3a:	4b02      	ldr	r3, [pc, #8]	; (8016c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	3708      	adds	r7, #8
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bd80      	pop	{r7, pc}
 8016c44:	20008f68 	.word	0x20008f68
 8016c48:	0801b1d8 	.word	0x0801b1d8

08016c4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	4603      	mov	r3, r0
 8016c54:	6039      	str	r1, [r7, #0]
 8016c56:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	221a      	movs	r2, #26
 8016c5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016c5e:	f000 f843 	bl	8016ce8 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8016c62:	4b02      	ldr	r3, [pc, #8]	; (8016c6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}
 8016c6c:	20000170 	.word	0x20000170

08016c70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	4603      	mov	r3, r0
 8016c78:	6039      	str	r1, [r7, #0]
 8016c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016c7c:	79fb      	ldrb	r3, [r7, #7]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d105      	bne.n	8016c8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016c82:	683a      	ldr	r2, [r7, #0]
 8016c84:	4907      	ldr	r1, [pc, #28]	; (8016ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016c86:	4808      	ldr	r0, [pc, #32]	; (8016ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016c88:	f7f1 f8f8 	bl	8007e7c <USBD_GetString>
 8016c8c:	e004      	b.n	8016c98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016c8e:	683a      	ldr	r2, [r7, #0]
 8016c90:	4904      	ldr	r1, [pc, #16]	; (8016ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016c92:	4805      	ldr	r0, [pc, #20]	; (8016ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016c94:	f7f1 f8f2 	bl	8007e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c98:	4b02      	ldr	r3, [pc, #8]	; (8016ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3708      	adds	r7, #8
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	20008f68 	.word	0x20008f68
 8016ca8:	0801b1e8 	.word	0x0801b1e8

08016cac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	6039      	str	r1, [r7, #0]
 8016cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016cb8:	79fb      	ldrb	r3, [r7, #7]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d105      	bne.n	8016cca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016cbe:	683a      	ldr	r2, [r7, #0]
 8016cc0:	4907      	ldr	r1, [pc, #28]	; (8016ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016cc2:	4808      	ldr	r0, [pc, #32]	; (8016ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016cc4:	f7f1 f8da 	bl	8007e7c <USBD_GetString>
 8016cc8:	e004      	b.n	8016cd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016cca:	683a      	ldr	r2, [r7, #0]
 8016ccc:	4904      	ldr	r1, [pc, #16]	; (8016ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016cce:	4805      	ldr	r0, [pc, #20]	; (8016ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016cd0:	f7f1 f8d4 	bl	8007e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cd4:	4b02      	ldr	r3, [pc, #8]	; (8016ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3708      	adds	r7, #8
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	20008f68 	.word	0x20008f68
 8016ce4:	0801b1f4 	.word	0x0801b1f4

08016ce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b084      	sub	sp, #16
 8016cec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016cee:	4b0f      	ldr	r3, [pc, #60]	; (8016d2c <Get_SerialNum+0x44>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016cf4:	4b0e      	ldr	r3, [pc, #56]	; (8016d30 <Get_SerialNum+0x48>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016cfa:	4b0e      	ldr	r3, [pc, #56]	; (8016d34 <Get_SerialNum+0x4c>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016d00:	68fa      	ldr	r2, [r7, #12]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	4413      	add	r3, r2
 8016d06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d009      	beq.n	8016d22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016d0e:	2208      	movs	r2, #8
 8016d10:	4909      	ldr	r1, [pc, #36]	; (8016d38 <Get_SerialNum+0x50>)
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f000 f814 	bl	8016d40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016d18:	2204      	movs	r2, #4
 8016d1a:	4908      	ldr	r1, [pc, #32]	; (8016d3c <Get_SerialNum+0x54>)
 8016d1c:	68b8      	ldr	r0, [r7, #8]
 8016d1e:	f000 f80f 	bl	8016d40 <IntToUnicode>
  }
}
 8016d22:	bf00      	nop
 8016d24:	3710      	adds	r7, #16
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	bf00      	nop
 8016d2c:	1fff7a10 	.word	0x1fff7a10
 8016d30:	1fff7a14 	.word	0x1fff7a14
 8016d34:	1fff7a18 	.word	0x1fff7a18
 8016d38:	20000172 	.word	0x20000172
 8016d3c:	20000182 	.word	0x20000182

08016d40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016d40:	b480      	push	{r7}
 8016d42:	b087      	sub	sp, #28
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	60f8      	str	r0, [r7, #12]
 8016d48:	60b9      	str	r1, [r7, #8]
 8016d4a:	4613      	mov	r3, r2
 8016d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016d52:	2300      	movs	r3, #0
 8016d54:	75fb      	strb	r3, [r7, #23]
 8016d56:	e027      	b.n	8016da8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	0f1b      	lsrs	r3, r3, #28
 8016d5c:	2b09      	cmp	r3, #9
 8016d5e:	d80b      	bhi.n	8016d78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	0f1b      	lsrs	r3, r3, #28
 8016d64:	b2da      	uxtb	r2, r3
 8016d66:	7dfb      	ldrb	r3, [r7, #23]
 8016d68:	005b      	lsls	r3, r3, #1
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	440b      	add	r3, r1
 8016d70:	3230      	adds	r2, #48	; 0x30
 8016d72:	b2d2      	uxtb	r2, r2
 8016d74:	701a      	strb	r2, [r3, #0]
 8016d76:	e00a      	b.n	8016d8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	0f1b      	lsrs	r3, r3, #28
 8016d7c:	b2da      	uxtb	r2, r3
 8016d7e:	7dfb      	ldrb	r3, [r7, #23]
 8016d80:	005b      	lsls	r3, r3, #1
 8016d82:	4619      	mov	r1, r3
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	440b      	add	r3, r1
 8016d88:	3237      	adds	r2, #55	; 0x37
 8016d8a:	b2d2      	uxtb	r2, r2
 8016d8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	011b      	lsls	r3, r3, #4
 8016d92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016d94:	7dfb      	ldrb	r3, [r7, #23]
 8016d96:	005b      	lsls	r3, r3, #1
 8016d98:	3301      	adds	r3, #1
 8016d9a:	68ba      	ldr	r2, [r7, #8]
 8016d9c:	4413      	add	r3, r2
 8016d9e:	2200      	movs	r2, #0
 8016da0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016da2:	7dfb      	ldrb	r3, [r7, #23]
 8016da4:	3301      	adds	r3, #1
 8016da6:	75fb      	strb	r3, [r7, #23]
 8016da8:	7dfa      	ldrb	r2, [r7, #23]
 8016daa:	79fb      	ldrb	r3, [r7, #7]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d3d3      	bcc.n	8016d58 <IntToUnicode+0x18>
  }
}
 8016db0:	bf00      	nop
 8016db2:	371c      	adds	r7, #28
 8016db4:	46bd      	mov	sp, r7
 8016db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dba:	4770      	bx	lr

08016dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8016dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016df4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8016dc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8016dc2:	e003      	b.n	8016dcc <LoopCopyDataInit>

08016dc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8016dc4:	4b0c      	ldr	r3, [pc, #48]	; (8016df8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8016dc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8016dc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8016dca:	3104      	adds	r1, #4

08016dcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8016dcc:	480b      	ldr	r0, [pc, #44]	; (8016dfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8016dce:	4b0c      	ldr	r3, [pc, #48]	; (8016e00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8016dd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8016dd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8016dd4:	d3f6      	bcc.n	8016dc4 <CopyDataInit>
  ldr  r2, =_sbss
 8016dd6:	4a0b      	ldr	r2, [pc, #44]	; (8016e04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8016dd8:	e002      	b.n	8016de0 <LoopFillZerobss>

08016dda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8016dda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016ddc:	f842 3b04 	str.w	r3, [r2], #4

08016de0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8016de0:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8016de2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016de4:	d3f9      	bcc.n	8016dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016de6:	f7fe fda3 	bl	8015930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016dea:	f000 f811 	bl	8016e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016dee:	f7fe faf9 	bl	80153e4 <main>
  bx  lr    
 8016df2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8016df4:	2002ffff 	.word	0x2002ffff
  ldr  r3, =_sidata
 8016df8:	0801b810 	.word	0x0801b810
  ldr  r0, =_sdata
 8016dfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8016e00:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8016e04:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8016e08:	2000916c 	.word	0x2000916c

08016e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016e0c:	e7fe      	b.n	8016e0c <ADC_IRQHandler>
	...

08016e10 <__libc_init_array>:
 8016e10:	b570      	push	{r4, r5, r6, lr}
 8016e12:	4e0d      	ldr	r6, [pc, #52]	; (8016e48 <__libc_init_array+0x38>)
 8016e14:	4c0d      	ldr	r4, [pc, #52]	; (8016e4c <__libc_init_array+0x3c>)
 8016e16:	1ba4      	subs	r4, r4, r6
 8016e18:	10a4      	asrs	r4, r4, #2
 8016e1a:	2500      	movs	r5, #0
 8016e1c:	42a5      	cmp	r5, r4
 8016e1e:	d109      	bne.n	8016e34 <__libc_init_array+0x24>
 8016e20:	4e0b      	ldr	r6, [pc, #44]	; (8016e50 <__libc_init_array+0x40>)
 8016e22:	4c0c      	ldr	r4, [pc, #48]	; (8016e54 <__libc_init_array+0x44>)
 8016e24:	f002 f83e 	bl	8018ea4 <_init>
 8016e28:	1ba4      	subs	r4, r4, r6
 8016e2a:	10a4      	asrs	r4, r4, #2
 8016e2c:	2500      	movs	r5, #0
 8016e2e:	42a5      	cmp	r5, r4
 8016e30:	d105      	bne.n	8016e3e <__libc_init_array+0x2e>
 8016e32:	bd70      	pop	{r4, r5, r6, pc}
 8016e34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016e38:	4798      	blx	r3
 8016e3a:	3501      	adds	r5, #1
 8016e3c:	e7ee      	b.n	8016e1c <__libc_init_array+0xc>
 8016e3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016e42:	4798      	blx	r3
 8016e44:	3501      	adds	r5, #1
 8016e46:	e7f2      	b.n	8016e2e <__libc_init_array+0x1e>
 8016e48:	0801b808 	.word	0x0801b808
 8016e4c:	0801b808 	.word	0x0801b808
 8016e50:	0801b808 	.word	0x0801b808
 8016e54:	0801b80c 	.word	0x0801b80c

08016e58 <malloc>:
 8016e58:	4b02      	ldr	r3, [pc, #8]	; (8016e64 <malloc+0xc>)
 8016e5a:	4601      	mov	r1, r0
 8016e5c:	6818      	ldr	r0, [r3, #0]
 8016e5e:	f000 b87b 	b.w	8016f58 <_malloc_r>
 8016e62:	bf00      	nop
 8016e64:	2000018c 	.word	0x2000018c

08016e68 <free>:
 8016e68:	4b02      	ldr	r3, [pc, #8]	; (8016e74 <free+0xc>)
 8016e6a:	4601      	mov	r1, r0
 8016e6c:	6818      	ldr	r0, [r3, #0]
 8016e6e:	f000 b825 	b.w	8016ebc <_free_r>
 8016e72:	bf00      	nop
 8016e74:	2000018c 	.word	0x2000018c

08016e78 <memcmp>:
 8016e78:	b530      	push	{r4, r5, lr}
 8016e7a:	2400      	movs	r4, #0
 8016e7c:	42a2      	cmp	r2, r4
 8016e7e:	d101      	bne.n	8016e84 <memcmp+0xc>
 8016e80:	2000      	movs	r0, #0
 8016e82:	e007      	b.n	8016e94 <memcmp+0x1c>
 8016e84:	5d03      	ldrb	r3, [r0, r4]
 8016e86:	3401      	adds	r4, #1
 8016e88:	190d      	adds	r5, r1, r4
 8016e8a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016e8e:	42ab      	cmp	r3, r5
 8016e90:	d0f4      	beq.n	8016e7c <memcmp+0x4>
 8016e92:	1b58      	subs	r0, r3, r5
 8016e94:	bd30      	pop	{r4, r5, pc}

08016e96 <memcpy>:
 8016e96:	b510      	push	{r4, lr}
 8016e98:	1e43      	subs	r3, r0, #1
 8016e9a:	440a      	add	r2, r1
 8016e9c:	4291      	cmp	r1, r2
 8016e9e:	d100      	bne.n	8016ea2 <memcpy+0xc>
 8016ea0:	bd10      	pop	{r4, pc}
 8016ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016eaa:	e7f7      	b.n	8016e9c <memcpy+0x6>

08016eac <memset>:
 8016eac:	4402      	add	r2, r0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	4293      	cmp	r3, r2
 8016eb2:	d100      	bne.n	8016eb6 <memset+0xa>
 8016eb4:	4770      	bx	lr
 8016eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8016eba:	e7f9      	b.n	8016eb0 <memset+0x4>

08016ebc <_free_r>:
 8016ebc:	b538      	push	{r3, r4, r5, lr}
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	2900      	cmp	r1, #0
 8016ec2:	d045      	beq.n	8016f50 <_free_r+0x94>
 8016ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ec8:	1f0c      	subs	r4, r1, #4
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	bfb8      	it	lt
 8016ece:	18e4      	addlt	r4, r4, r3
 8016ed0:	f000 fbfa 	bl	80176c8 <__malloc_lock>
 8016ed4:	4a1f      	ldr	r2, [pc, #124]	; (8016f54 <_free_r+0x98>)
 8016ed6:	6813      	ldr	r3, [r2, #0]
 8016ed8:	4610      	mov	r0, r2
 8016eda:	b933      	cbnz	r3, 8016eea <_free_r+0x2e>
 8016edc:	6063      	str	r3, [r4, #4]
 8016ede:	6014      	str	r4, [r2, #0]
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ee6:	f000 bbf0 	b.w	80176ca <__malloc_unlock>
 8016eea:	42a3      	cmp	r3, r4
 8016eec:	d90c      	bls.n	8016f08 <_free_r+0x4c>
 8016eee:	6821      	ldr	r1, [r4, #0]
 8016ef0:	1862      	adds	r2, r4, r1
 8016ef2:	4293      	cmp	r3, r2
 8016ef4:	bf04      	itt	eq
 8016ef6:	681a      	ldreq	r2, [r3, #0]
 8016ef8:	685b      	ldreq	r3, [r3, #4]
 8016efa:	6063      	str	r3, [r4, #4]
 8016efc:	bf04      	itt	eq
 8016efe:	1852      	addeq	r2, r2, r1
 8016f00:	6022      	streq	r2, [r4, #0]
 8016f02:	6004      	str	r4, [r0, #0]
 8016f04:	e7ec      	b.n	8016ee0 <_free_r+0x24>
 8016f06:	4613      	mov	r3, r2
 8016f08:	685a      	ldr	r2, [r3, #4]
 8016f0a:	b10a      	cbz	r2, 8016f10 <_free_r+0x54>
 8016f0c:	42a2      	cmp	r2, r4
 8016f0e:	d9fa      	bls.n	8016f06 <_free_r+0x4a>
 8016f10:	6819      	ldr	r1, [r3, #0]
 8016f12:	1858      	adds	r0, r3, r1
 8016f14:	42a0      	cmp	r0, r4
 8016f16:	d10b      	bne.n	8016f30 <_free_r+0x74>
 8016f18:	6820      	ldr	r0, [r4, #0]
 8016f1a:	4401      	add	r1, r0
 8016f1c:	1858      	adds	r0, r3, r1
 8016f1e:	4282      	cmp	r2, r0
 8016f20:	6019      	str	r1, [r3, #0]
 8016f22:	d1dd      	bne.n	8016ee0 <_free_r+0x24>
 8016f24:	6810      	ldr	r0, [r2, #0]
 8016f26:	6852      	ldr	r2, [r2, #4]
 8016f28:	605a      	str	r2, [r3, #4]
 8016f2a:	4401      	add	r1, r0
 8016f2c:	6019      	str	r1, [r3, #0]
 8016f2e:	e7d7      	b.n	8016ee0 <_free_r+0x24>
 8016f30:	d902      	bls.n	8016f38 <_free_r+0x7c>
 8016f32:	230c      	movs	r3, #12
 8016f34:	602b      	str	r3, [r5, #0]
 8016f36:	e7d3      	b.n	8016ee0 <_free_r+0x24>
 8016f38:	6820      	ldr	r0, [r4, #0]
 8016f3a:	1821      	adds	r1, r4, r0
 8016f3c:	428a      	cmp	r2, r1
 8016f3e:	bf04      	itt	eq
 8016f40:	6811      	ldreq	r1, [r2, #0]
 8016f42:	6852      	ldreq	r2, [r2, #4]
 8016f44:	6062      	str	r2, [r4, #4]
 8016f46:	bf04      	itt	eq
 8016f48:	1809      	addeq	r1, r1, r0
 8016f4a:	6021      	streq	r1, [r4, #0]
 8016f4c:	605c      	str	r4, [r3, #4]
 8016f4e:	e7c7      	b.n	8016ee0 <_free_r+0x24>
 8016f50:	bd38      	pop	{r3, r4, r5, pc}
 8016f52:	bf00      	nop
 8016f54:	200003f0 	.word	0x200003f0

08016f58 <_malloc_r>:
 8016f58:	b570      	push	{r4, r5, r6, lr}
 8016f5a:	1ccd      	adds	r5, r1, #3
 8016f5c:	f025 0503 	bic.w	r5, r5, #3
 8016f60:	3508      	adds	r5, #8
 8016f62:	2d0c      	cmp	r5, #12
 8016f64:	bf38      	it	cc
 8016f66:	250c      	movcc	r5, #12
 8016f68:	2d00      	cmp	r5, #0
 8016f6a:	4606      	mov	r6, r0
 8016f6c:	db01      	blt.n	8016f72 <_malloc_r+0x1a>
 8016f6e:	42a9      	cmp	r1, r5
 8016f70:	d903      	bls.n	8016f7a <_malloc_r+0x22>
 8016f72:	230c      	movs	r3, #12
 8016f74:	6033      	str	r3, [r6, #0]
 8016f76:	2000      	movs	r0, #0
 8016f78:	bd70      	pop	{r4, r5, r6, pc}
 8016f7a:	f000 fba5 	bl	80176c8 <__malloc_lock>
 8016f7e:	4a21      	ldr	r2, [pc, #132]	; (8017004 <_malloc_r+0xac>)
 8016f80:	6814      	ldr	r4, [r2, #0]
 8016f82:	4621      	mov	r1, r4
 8016f84:	b991      	cbnz	r1, 8016fac <_malloc_r+0x54>
 8016f86:	4c20      	ldr	r4, [pc, #128]	; (8017008 <_malloc_r+0xb0>)
 8016f88:	6823      	ldr	r3, [r4, #0]
 8016f8a:	b91b      	cbnz	r3, 8016f94 <_malloc_r+0x3c>
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	f000 f8ed 	bl	801716c <_sbrk_r>
 8016f92:	6020      	str	r0, [r4, #0]
 8016f94:	4629      	mov	r1, r5
 8016f96:	4630      	mov	r0, r6
 8016f98:	f000 f8e8 	bl	801716c <_sbrk_r>
 8016f9c:	1c43      	adds	r3, r0, #1
 8016f9e:	d124      	bne.n	8016fea <_malloc_r+0x92>
 8016fa0:	230c      	movs	r3, #12
 8016fa2:	6033      	str	r3, [r6, #0]
 8016fa4:	4630      	mov	r0, r6
 8016fa6:	f000 fb90 	bl	80176ca <__malloc_unlock>
 8016faa:	e7e4      	b.n	8016f76 <_malloc_r+0x1e>
 8016fac:	680b      	ldr	r3, [r1, #0]
 8016fae:	1b5b      	subs	r3, r3, r5
 8016fb0:	d418      	bmi.n	8016fe4 <_malloc_r+0x8c>
 8016fb2:	2b0b      	cmp	r3, #11
 8016fb4:	d90f      	bls.n	8016fd6 <_malloc_r+0x7e>
 8016fb6:	600b      	str	r3, [r1, #0]
 8016fb8:	50cd      	str	r5, [r1, r3]
 8016fba:	18cc      	adds	r4, r1, r3
 8016fbc:	4630      	mov	r0, r6
 8016fbe:	f000 fb84 	bl	80176ca <__malloc_unlock>
 8016fc2:	f104 000b 	add.w	r0, r4, #11
 8016fc6:	1d23      	adds	r3, r4, #4
 8016fc8:	f020 0007 	bic.w	r0, r0, #7
 8016fcc:	1ac3      	subs	r3, r0, r3
 8016fce:	d0d3      	beq.n	8016f78 <_malloc_r+0x20>
 8016fd0:	425a      	negs	r2, r3
 8016fd2:	50e2      	str	r2, [r4, r3]
 8016fd4:	e7d0      	b.n	8016f78 <_malloc_r+0x20>
 8016fd6:	428c      	cmp	r4, r1
 8016fd8:	684b      	ldr	r3, [r1, #4]
 8016fda:	bf16      	itet	ne
 8016fdc:	6063      	strne	r3, [r4, #4]
 8016fde:	6013      	streq	r3, [r2, #0]
 8016fe0:	460c      	movne	r4, r1
 8016fe2:	e7eb      	b.n	8016fbc <_malloc_r+0x64>
 8016fe4:	460c      	mov	r4, r1
 8016fe6:	6849      	ldr	r1, [r1, #4]
 8016fe8:	e7cc      	b.n	8016f84 <_malloc_r+0x2c>
 8016fea:	1cc4      	adds	r4, r0, #3
 8016fec:	f024 0403 	bic.w	r4, r4, #3
 8016ff0:	42a0      	cmp	r0, r4
 8016ff2:	d005      	beq.n	8017000 <_malloc_r+0xa8>
 8016ff4:	1a21      	subs	r1, r4, r0
 8016ff6:	4630      	mov	r0, r6
 8016ff8:	f000 f8b8 	bl	801716c <_sbrk_r>
 8016ffc:	3001      	adds	r0, #1
 8016ffe:	d0cf      	beq.n	8016fa0 <_malloc_r+0x48>
 8017000:	6025      	str	r5, [r4, #0]
 8017002:	e7db      	b.n	8016fbc <_malloc_r+0x64>
 8017004:	200003f0 	.word	0x200003f0
 8017008:	200003f4 	.word	0x200003f4

0801700c <iprintf>:
 801700c:	b40f      	push	{r0, r1, r2, r3}
 801700e:	4b0a      	ldr	r3, [pc, #40]	; (8017038 <iprintf+0x2c>)
 8017010:	b513      	push	{r0, r1, r4, lr}
 8017012:	681c      	ldr	r4, [r3, #0]
 8017014:	b124      	cbz	r4, 8017020 <iprintf+0x14>
 8017016:	69a3      	ldr	r3, [r4, #24]
 8017018:	b913      	cbnz	r3, 8017020 <iprintf+0x14>
 801701a:	4620      	mov	r0, r4
 801701c:	f000 fa66 	bl	80174ec <__sinit>
 8017020:	ab05      	add	r3, sp, #20
 8017022:	9a04      	ldr	r2, [sp, #16]
 8017024:	68a1      	ldr	r1, [r4, #8]
 8017026:	9301      	str	r3, [sp, #4]
 8017028:	4620      	mov	r0, r4
 801702a:	f000 fb79 	bl	8017720 <_vfiprintf_r>
 801702e:	b002      	add	sp, #8
 8017030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017034:	b004      	add	sp, #16
 8017036:	4770      	bx	lr
 8017038:	2000018c 	.word	0x2000018c

0801703c <_puts_r>:
 801703c:	b570      	push	{r4, r5, r6, lr}
 801703e:	460e      	mov	r6, r1
 8017040:	4605      	mov	r5, r0
 8017042:	b118      	cbz	r0, 801704c <_puts_r+0x10>
 8017044:	6983      	ldr	r3, [r0, #24]
 8017046:	b90b      	cbnz	r3, 801704c <_puts_r+0x10>
 8017048:	f000 fa50 	bl	80174ec <__sinit>
 801704c:	69ab      	ldr	r3, [r5, #24]
 801704e:	68ac      	ldr	r4, [r5, #8]
 8017050:	b913      	cbnz	r3, 8017058 <_puts_r+0x1c>
 8017052:	4628      	mov	r0, r5
 8017054:	f000 fa4a 	bl	80174ec <__sinit>
 8017058:	4b23      	ldr	r3, [pc, #140]	; (80170e8 <_puts_r+0xac>)
 801705a:	429c      	cmp	r4, r3
 801705c:	d117      	bne.n	801708e <_puts_r+0x52>
 801705e:	686c      	ldr	r4, [r5, #4]
 8017060:	89a3      	ldrh	r3, [r4, #12]
 8017062:	071b      	lsls	r3, r3, #28
 8017064:	d51d      	bpl.n	80170a2 <_puts_r+0x66>
 8017066:	6923      	ldr	r3, [r4, #16]
 8017068:	b1db      	cbz	r3, 80170a2 <_puts_r+0x66>
 801706a:	3e01      	subs	r6, #1
 801706c:	68a3      	ldr	r3, [r4, #8]
 801706e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017072:	3b01      	subs	r3, #1
 8017074:	60a3      	str	r3, [r4, #8]
 8017076:	b9e9      	cbnz	r1, 80170b4 <_puts_r+0x78>
 8017078:	2b00      	cmp	r3, #0
 801707a:	da2e      	bge.n	80170da <_puts_r+0x9e>
 801707c:	4622      	mov	r2, r4
 801707e:	210a      	movs	r1, #10
 8017080:	4628      	mov	r0, r5
 8017082:	f000 f883 	bl	801718c <__swbuf_r>
 8017086:	3001      	adds	r0, #1
 8017088:	d011      	beq.n	80170ae <_puts_r+0x72>
 801708a:	200a      	movs	r0, #10
 801708c:	e011      	b.n	80170b2 <_puts_r+0x76>
 801708e:	4b17      	ldr	r3, [pc, #92]	; (80170ec <_puts_r+0xb0>)
 8017090:	429c      	cmp	r4, r3
 8017092:	d101      	bne.n	8017098 <_puts_r+0x5c>
 8017094:	68ac      	ldr	r4, [r5, #8]
 8017096:	e7e3      	b.n	8017060 <_puts_r+0x24>
 8017098:	4b15      	ldr	r3, [pc, #84]	; (80170f0 <_puts_r+0xb4>)
 801709a:	429c      	cmp	r4, r3
 801709c:	bf08      	it	eq
 801709e:	68ec      	ldreq	r4, [r5, #12]
 80170a0:	e7de      	b.n	8017060 <_puts_r+0x24>
 80170a2:	4621      	mov	r1, r4
 80170a4:	4628      	mov	r0, r5
 80170a6:	f000 f8c3 	bl	8017230 <__swsetup_r>
 80170aa:	2800      	cmp	r0, #0
 80170ac:	d0dd      	beq.n	801706a <_puts_r+0x2e>
 80170ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170b2:	bd70      	pop	{r4, r5, r6, pc}
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	da04      	bge.n	80170c2 <_puts_r+0x86>
 80170b8:	69a2      	ldr	r2, [r4, #24]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	dc06      	bgt.n	80170cc <_puts_r+0x90>
 80170be:	290a      	cmp	r1, #10
 80170c0:	d004      	beq.n	80170cc <_puts_r+0x90>
 80170c2:	6823      	ldr	r3, [r4, #0]
 80170c4:	1c5a      	adds	r2, r3, #1
 80170c6:	6022      	str	r2, [r4, #0]
 80170c8:	7019      	strb	r1, [r3, #0]
 80170ca:	e7cf      	b.n	801706c <_puts_r+0x30>
 80170cc:	4622      	mov	r2, r4
 80170ce:	4628      	mov	r0, r5
 80170d0:	f000 f85c 	bl	801718c <__swbuf_r>
 80170d4:	3001      	adds	r0, #1
 80170d6:	d1c9      	bne.n	801706c <_puts_r+0x30>
 80170d8:	e7e9      	b.n	80170ae <_puts_r+0x72>
 80170da:	6823      	ldr	r3, [r4, #0]
 80170dc:	200a      	movs	r0, #10
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	6022      	str	r2, [r4, #0]
 80170e2:	7018      	strb	r0, [r3, #0]
 80170e4:	e7e5      	b.n	80170b2 <_puts_r+0x76>
 80170e6:	bf00      	nop
 80170e8:	0801b394 	.word	0x0801b394
 80170ec:	0801b3b4 	.word	0x0801b3b4
 80170f0:	0801b374 	.word	0x0801b374

080170f4 <puts>:
 80170f4:	4b02      	ldr	r3, [pc, #8]	; (8017100 <puts+0xc>)
 80170f6:	4601      	mov	r1, r0
 80170f8:	6818      	ldr	r0, [r3, #0]
 80170fa:	f7ff bf9f 	b.w	801703c <_puts_r>
 80170fe:	bf00      	nop
 8017100:	2000018c 	.word	0x2000018c

08017104 <rand>:
 8017104:	b538      	push	{r3, r4, r5, lr}
 8017106:	4b13      	ldr	r3, [pc, #76]	; (8017154 <rand+0x50>)
 8017108:	681c      	ldr	r4, [r3, #0]
 801710a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801710c:	b97b      	cbnz	r3, 801712e <rand+0x2a>
 801710e:	2018      	movs	r0, #24
 8017110:	f7ff fea2 	bl	8016e58 <malloc>
 8017114:	4a10      	ldr	r2, [pc, #64]	; (8017158 <rand+0x54>)
 8017116:	4b11      	ldr	r3, [pc, #68]	; (801715c <rand+0x58>)
 8017118:	63a0      	str	r0, [r4, #56]	; 0x38
 801711a:	e9c0 2300 	strd	r2, r3, [r0]
 801711e:	4b10      	ldr	r3, [pc, #64]	; (8017160 <rand+0x5c>)
 8017120:	6083      	str	r3, [r0, #8]
 8017122:	230b      	movs	r3, #11
 8017124:	8183      	strh	r3, [r0, #12]
 8017126:	2201      	movs	r2, #1
 8017128:	2300      	movs	r3, #0
 801712a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801712e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017130:	480c      	ldr	r0, [pc, #48]	; (8017164 <rand+0x60>)
 8017132:	690a      	ldr	r2, [r1, #16]
 8017134:	694b      	ldr	r3, [r1, #20]
 8017136:	4c0c      	ldr	r4, [pc, #48]	; (8017168 <rand+0x64>)
 8017138:	4350      	muls	r0, r2
 801713a:	fb04 0003 	mla	r0, r4, r3, r0
 801713e:	fba2 2304 	umull	r2, r3, r2, r4
 8017142:	4403      	add	r3, r0
 8017144:	1c54      	adds	r4, r2, #1
 8017146:	f143 0500 	adc.w	r5, r3, #0
 801714a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801714e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017152:	bd38      	pop	{r3, r4, r5, pc}
 8017154:	2000018c 	.word	0x2000018c
 8017158:	abcd330e 	.word	0xabcd330e
 801715c:	e66d1234 	.word	0xe66d1234
 8017160:	0005deec 	.word	0x0005deec
 8017164:	5851f42d 	.word	0x5851f42d
 8017168:	4c957f2d 	.word	0x4c957f2d

0801716c <_sbrk_r>:
 801716c:	b538      	push	{r3, r4, r5, lr}
 801716e:	4c06      	ldr	r4, [pc, #24]	; (8017188 <_sbrk_r+0x1c>)
 8017170:	2300      	movs	r3, #0
 8017172:	4605      	mov	r5, r0
 8017174:	4608      	mov	r0, r1
 8017176:	6023      	str	r3, [r4, #0]
 8017178:	f7fe fbac 	bl	80158d4 <_sbrk>
 801717c:	1c43      	adds	r3, r0, #1
 801717e:	d102      	bne.n	8017186 <_sbrk_r+0x1a>
 8017180:	6823      	ldr	r3, [r4, #0]
 8017182:	b103      	cbz	r3, 8017186 <_sbrk_r+0x1a>
 8017184:	602b      	str	r3, [r5, #0]
 8017186:	bd38      	pop	{r3, r4, r5, pc}
 8017188:	20009168 	.word	0x20009168

0801718c <__swbuf_r>:
 801718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801718e:	460e      	mov	r6, r1
 8017190:	4614      	mov	r4, r2
 8017192:	4605      	mov	r5, r0
 8017194:	b118      	cbz	r0, 801719e <__swbuf_r+0x12>
 8017196:	6983      	ldr	r3, [r0, #24]
 8017198:	b90b      	cbnz	r3, 801719e <__swbuf_r+0x12>
 801719a:	f000 f9a7 	bl	80174ec <__sinit>
 801719e:	4b21      	ldr	r3, [pc, #132]	; (8017224 <__swbuf_r+0x98>)
 80171a0:	429c      	cmp	r4, r3
 80171a2:	d12a      	bne.n	80171fa <__swbuf_r+0x6e>
 80171a4:	686c      	ldr	r4, [r5, #4]
 80171a6:	69a3      	ldr	r3, [r4, #24]
 80171a8:	60a3      	str	r3, [r4, #8]
 80171aa:	89a3      	ldrh	r3, [r4, #12]
 80171ac:	071a      	lsls	r2, r3, #28
 80171ae:	d52e      	bpl.n	801720e <__swbuf_r+0x82>
 80171b0:	6923      	ldr	r3, [r4, #16]
 80171b2:	b363      	cbz	r3, 801720e <__swbuf_r+0x82>
 80171b4:	6923      	ldr	r3, [r4, #16]
 80171b6:	6820      	ldr	r0, [r4, #0]
 80171b8:	1ac0      	subs	r0, r0, r3
 80171ba:	6963      	ldr	r3, [r4, #20]
 80171bc:	b2f6      	uxtb	r6, r6
 80171be:	4283      	cmp	r3, r0
 80171c0:	4637      	mov	r7, r6
 80171c2:	dc04      	bgt.n	80171ce <__swbuf_r+0x42>
 80171c4:	4621      	mov	r1, r4
 80171c6:	4628      	mov	r0, r5
 80171c8:	f000 f926 	bl	8017418 <_fflush_r>
 80171cc:	bb28      	cbnz	r0, 801721a <__swbuf_r+0x8e>
 80171ce:	68a3      	ldr	r3, [r4, #8]
 80171d0:	3b01      	subs	r3, #1
 80171d2:	60a3      	str	r3, [r4, #8]
 80171d4:	6823      	ldr	r3, [r4, #0]
 80171d6:	1c5a      	adds	r2, r3, #1
 80171d8:	6022      	str	r2, [r4, #0]
 80171da:	701e      	strb	r6, [r3, #0]
 80171dc:	6963      	ldr	r3, [r4, #20]
 80171de:	3001      	adds	r0, #1
 80171e0:	4283      	cmp	r3, r0
 80171e2:	d004      	beq.n	80171ee <__swbuf_r+0x62>
 80171e4:	89a3      	ldrh	r3, [r4, #12]
 80171e6:	07db      	lsls	r3, r3, #31
 80171e8:	d519      	bpl.n	801721e <__swbuf_r+0x92>
 80171ea:	2e0a      	cmp	r6, #10
 80171ec:	d117      	bne.n	801721e <__swbuf_r+0x92>
 80171ee:	4621      	mov	r1, r4
 80171f0:	4628      	mov	r0, r5
 80171f2:	f000 f911 	bl	8017418 <_fflush_r>
 80171f6:	b190      	cbz	r0, 801721e <__swbuf_r+0x92>
 80171f8:	e00f      	b.n	801721a <__swbuf_r+0x8e>
 80171fa:	4b0b      	ldr	r3, [pc, #44]	; (8017228 <__swbuf_r+0x9c>)
 80171fc:	429c      	cmp	r4, r3
 80171fe:	d101      	bne.n	8017204 <__swbuf_r+0x78>
 8017200:	68ac      	ldr	r4, [r5, #8]
 8017202:	e7d0      	b.n	80171a6 <__swbuf_r+0x1a>
 8017204:	4b09      	ldr	r3, [pc, #36]	; (801722c <__swbuf_r+0xa0>)
 8017206:	429c      	cmp	r4, r3
 8017208:	bf08      	it	eq
 801720a:	68ec      	ldreq	r4, [r5, #12]
 801720c:	e7cb      	b.n	80171a6 <__swbuf_r+0x1a>
 801720e:	4621      	mov	r1, r4
 8017210:	4628      	mov	r0, r5
 8017212:	f000 f80d 	bl	8017230 <__swsetup_r>
 8017216:	2800      	cmp	r0, #0
 8017218:	d0cc      	beq.n	80171b4 <__swbuf_r+0x28>
 801721a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801721e:	4638      	mov	r0, r7
 8017220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017222:	bf00      	nop
 8017224:	0801b394 	.word	0x0801b394
 8017228:	0801b3b4 	.word	0x0801b3b4
 801722c:	0801b374 	.word	0x0801b374

08017230 <__swsetup_r>:
 8017230:	4b32      	ldr	r3, [pc, #200]	; (80172fc <__swsetup_r+0xcc>)
 8017232:	b570      	push	{r4, r5, r6, lr}
 8017234:	681d      	ldr	r5, [r3, #0]
 8017236:	4606      	mov	r6, r0
 8017238:	460c      	mov	r4, r1
 801723a:	b125      	cbz	r5, 8017246 <__swsetup_r+0x16>
 801723c:	69ab      	ldr	r3, [r5, #24]
 801723e:	b913      	cbnz	r3, 8017246 <__swsetup_r+0x16>
 8017240:	4628      	mov	r0, r5
 8017242:	f000 f953 	bl	80174ec <__sinit>
 8017246:	4b2e      	ldr	r3, [pc, #184]	; (8017300 <__swsetup_r+0xd0>)
 8017248:	429c      	cmp	r4, r3
 801724a:	d10f      	bne.n	801726c <__swsetup_r+0x3c>
 801724c:	686c      	ldr	r4, [r5, #4]
 801724e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017252:	b29a      	uxth	r2, r3
 8017254:	0715      	lsls	r5, r2, #28
 8017256:	d42c      	bmi.n	80172b2 <__swsetup_r+0x82>
 8017258:	06d0      	lsls	r0, r2, #27
 801725a:	d411      	bmi.n	8017280 <__swsetup_r+0x50>
 801725c:	2209      	movs	r2, #9
 801725e:	6032      	str	r2, [r6, #0]
 8017260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017264:	81a3      	strh	r3, [r4, #12]
 8017266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801726a:	e03e      	b.n	80172ea <__swsetup_r+0xba>
 801726c:	4b25      	ldr	r3, [pc, #148]	; (8017304 <__swsetup_r+0xd4>)
 801726e:	429c      	cmp	r4, r3
 8017270:	d101      	bne.n	8017276 <__swsetup_r+0x46>
 8017272:	68ac      	ldr	r4, [r5, #8]
 8017274:	e7eb      	b.n	801724e <__swsetup_r+0x1e>
 8017276:	4b24      	ldr	r3, [pc, #144]	; (8017308 <__swsetup_r+0xd8>)
 8017278:	429c      	cmp	r4, r3
 801727a:	bf08      	it	eq
 801727c:	68ec      	ldreq	r4, [r5, #12]
 801727e:	e7e6      	b.n	801724e <__swsetup_r+0x1e>
 8017280:	0751      	lsls	r1, r2, #29
 8017282:	d512      	bpl.n	80172aa <__swsetup_r+0x7a>
 8017284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017286:	b141      	cbz	r1, 801729a <__swsetup_r+0x6a>
 8017288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801728c:	4299      	cmp	r1, r3
 801728e:	d002      	beq.n	8017296 <__swsetup_r+0x66>
 8017290:	4630      	mov	r0, r6
 8017292:	f7ff fe13 	bl	8016ebc <_free_r>
 8017296:	2300      	movs	r3, #0
 8017298:	6363      	str	r3, [r4, #52]	; 0x34
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80172a0:	81a3      	strh	r3, [r4, #12]
 80172a2:	2300      	movs	r3, #0
 80172a4:	6063      	str	r3, [r4, #4]
 80172a6:	6923      	ldr	r3, [r4, #16]
 80172a8:	6023      	str	r3, [r4, #0]
 80172aa:	89a3      	ldrh	r3, [r4, #12]
 80172ac:	f043 0308 	orr.w	r3, r3, #8
 80172b0:	81a3      	strh	r3, [r4, #12]
 80172b2:	6923      	ldr	r3, [r4, #16]
 80172b4:	b94b      	cbnz	r3, 80172ca <__swsetup_r+0x9a>
 80172b6:	89a3      	ldrh	r3, [r4, #12]
 80172b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80172bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172c0:	d003      	beq.n	80172ca <__swsetup_r+0x9a>
 80172c2:	4621      	mov	r1, r4
 80172c4:	4630      	mov	r0, r6
 80172c6:	f000 f9bf 	bl	8017648 <__smakebuf_r>
 80172ca:	89a2      	ldrh	r2, [r4, #12]
 80172cc:	f012 0301 	ands.w	r3, r2, #1
 80172d0:	d00c      	beq.n	80172ec <__swsetup_r+0xbc>
 80172d2:	2300      	movs	r3, #0
 80172d4:	60a3      	str	r3, [r4, #8]
 80172d6:	6963      	ldr	r3, [r4, #20]
 80172d8:	425b      	negs	r3, r3
 80172da:	61a3      	str	r3, [r4, #24]
 80172dc:	6923      	ldr	r3, [r4, #16]
 80172de:	b953      	cbnz	r3, 80172f6 <__swsetup_r+0xc6>
 80172e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80172e8:	d1ba      	bne.n	8017260 <__swsetup_r+0x30>
 80172ea:	bd70      	pop	{r4, r5, r6, pc}
 80172ec:	0792      	lsls	r2, r2, #30
 80172ee:	bf58      	it	pl
 80172f0:	6963      	ldrpl	r3, [r4, #20]
 80172f2:	60a3      	str	r3, [r4, #8]
 80172f4:	e7f2      	b.n	80172dc <__swsetup_r+0xac>
 80172f6:	2000      	movs	r0, #0
 80172f8:	e7f7      	b.n	80172ea <__swsetup_r+0xba>
 80172fa:	bf00      	nop
 80172fc:	2000018c 	.word	0x2000018c
 8017300:	0801b394 	.word	0x0801b394
 8017304:	0801b3b4 	.word	0x0801b3b4
 8017308:	0801b374 	.word	0x0801b374

0801730c <__sflush_r>:
 801730c:	898a      	ldrh	r2, [r1, #12]
 801730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017312:	4605      	mov	r5, r0
 8017314:	0710      	lsls	r0, r2, #28
 8017316:	460c      	mov	r4, r1
 8017318:	d458      	bmi.n	80173cc <__sflush_r+0xc0>
 801731a:	684b      	ldr	r3, [r1, #4]
 801731c:	2b00      	cmp	r3, #0
 801731e:	dc05      	bgt.n	801732c <__sflush_r+0x20>
 8017320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017322:	2b00      	cmp	r3, #0
 8017324:	dc02      	bgt.n	801732c <__sflush_r+0x20>
 8017326:	2000      	movs	r0, #0
 8017328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801732c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801732e:	2e00      	cmp	r6, #0
 8017330:	d0f9      	beq.n	8017326 <__sflush_r+0x1a>
 8017332:	2300      	movs	r3, #0
 8017334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017338:	682f      	ldr	r7, [r5, #0]
 801733a:	6a21      	ldr	r1, [r4, #32]
 801733c:	602b      	str	r3, [r5, #0]
 801733e:	d032      	beq.n	80173a6 <__sflush_r+0x9a>
 8017340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017342:	89a3      	ldrh	r3, [r4, #12]
 8017344:	075a      	lsls	r2, r3, #29
 8017346:	d505      	bpl.n	8017354 <__sflush_r+0x48>
 8017348:	6863      	ldr	r3, [r4, #4]
 801734a:	1ac0      	subs	r0, r0, r3
 801734c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801734e:	b10b      	cbz	r3, 8017354 <__sflush_r+0x48>
 8017350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017352:	1ac0      	subs	r0, r0, r3
 8017354:	2300      	movs	r3, #0
 8017356:	4602      	mov	r2, r0
 8017358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801735a:	6a21      	ldr	r1, [r4, #32]
 801735c:	4628      	mov	r0, r5
 801735e:	47b0      	blx	r6
 8017360:	1c43      	adds	r3, r0, #1
 8017362:	89a3      	ldrh	r3, [r4, #12]
 8017364:	d106      	bne.n	8017374 <__sflush_r+0x68>
 8017366:	6829      	ldr	r1, [r5, #0]
 8017368:	291d      	cmp	r1, #29
 801736a:	d848      	bhi.n	80173fe <__sflush_r+0xf2>
 801736c:	4a29      	ldr	r2, [pc, #164]	; (8017414 <__sflush_r+0x108>)
 801736e:	40ca      	lsrs	r2, r1
 8017370:	07d6      	lsls	r6, r2, #31
 8017372:	d544      	bpl.n	80173fe <__sflush_r+0xf2>
 8017374:	2200      	movs	r2, #0
 8017376:	6062      	str	r2, [r4, #4]
 8017378:	04d9      	lsls	r1, r3, #19
 801737a:	6922      	ldr	r2, [r4, #16]
 801737c:	6022      	str	r2, [r4, #0]
 801737e:	d504      	bpl.n	801738a <__sflush_r+0x7e>
 8017380:	1c42      	adds	r2, r0, #1
 8017382:	d101      	bne.n	8017388 <__sflush_r+0x7c>
 8017384:	682b      	ldr	r3, [r5, #0]
 8017386:	b903      	cbnz	r3, 801738a <__sflush_r+0x7e>
 8017388:	6560      	str	r0, [r4, #84]	; 0x54
 801738a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801738c:	602f      	str	r7, [r5, #0]
 801738e:	2900      	cmp	r1, #0
 8017390:	d0c9      	beq.n	8017326 <__sflush_r+0x1a>
 8017392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017396:	4299      	cmp	r1, r3
 8017398:	d002      	beq.n	80173a0 <__sflush_r+0x94>
 801739a:	4628      	mov	r0, r5
 801739c:	f7ff fd8e 	bl	8016ebc <_free_r>
 80173a0:	2000      	movs	r0, #0
 80173a2:	6360      	str	r0, [r4, #52]	; 0x34
 80173a4:	e7c0      	b.n	8017328 <__sflush_r+0x1c>
 80173a6:	2301      	movs	r3, #1
 80173a8:	4628      	mov	r0, r5
 80173aa:	47b0      	blx	r6
 80173ac:	1c41      	adds	r1, r0, #1
 80173ae:	d1c8      	bne.n	8017342 <__sflush_r+0x36>
 80173b0:	682b      	ldr	r3, [r5, #0]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d0c5      	beq.n	8017342 <__sflush_r+0x36>
 80173b6:	2b1d      	cmp	r3, #29
 80173b8:	d001      	beq.n	80173be <__sflush_r+0xb2>
 80173ba:	2b16      	cmp	r3, #22
 80173bc:	d101      	bne.n	80173c2 <__sflush_r+0xb6>
 80173be:	602f      	str	r7, [r5, #0]
 80173c0:	e7b1      	b.n	8017326 <__sflush_r+0x1a>
 80173c2:	89a3      	ldrh	r3, [r4, #12]
 80173c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173c8:	81a3      	strh	r3, [r4, #12]
 80173ca:	e7ad      	b.n	8017328 <__sflush_r+0x1c>
 80173cc:	690f      	ldr	r7, [r1, #16]
 80173ce:	2f00      	cmp	r7, #0
 80173d0:	d0a9      	beq.n	8017326 <__sflush_r+0x1a>
 80173d2:	0793      	lsls	r3, r2, #30
 80173d4:	680e      	ldr	r6, [r1, #0]
 80173d6:	bf08      	it	eq
 80173d8:	694b      	ldreq	r3, [r1, #20]
 80173da:	600f      	str	r7, [r1, #0]
 80173dc:	bf18      	it	ne
 80173de:	2300      	movne	r3, #0
 80173e0:	eba6 0807 	sub.w	r8, r6, r7
 80173e4:	608b      	str	r3, [r1, #8]
 80173e6:	f1b8 0f00 	cmp.w	r8, #0
 80173ea:	dd9c      	ble.n	8017326 <__sflush_r+0x1a>
 80173ec:	4643      	mov	r3, r8
 80173ee:	463a      	mov	r2, r7
 80173f0:	6a21      	ldr	r1, [r4, #32]
 80173f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80173f4:	4628      	mov	r0, r5
 80173f6:	47b0      	blx	r6
 80173f8:	2800      	cmp	r0, #0
 80173fa:	dc06      	bgt.n	801740a <__sflush_r+0xfe>
 80173fc:	89a3      	ldrh	r3, [r4, #12]
 80173fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017402:	81a3      	strh	r3, [r4, #12]
 8017404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017408:	e78e      	b.n	8017328 <__sflush_r+0x1c>
 801740a:	4407      	add	r7, r0
 801740c:	eba8 0800 	sub.w	r8, r8, r0
 8017410:	e7e9      	b.n	80173e6 <__sflush_r+0xda>
 8017412:	bf00      	nop
 8017414:	20400001 	.word	0x20400001

08017418 <_fflush_r>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	690b      	ldr	r3, [r1, #16]
 801741c:	4605      	mov	r5, r0
 801741e:	460c      	mov	r4, r1
 8017420:	b1db      	cbz	r3, 801745a <_fflush_r+0x42>
 8017422:	b118      	cbz	r0, 801742c <_fflush_r+0x14>
 8017424:	6983      	ldr	r3, [r0, #24]
 8017426:	b90b      	cbnz	r3, 801742c <_fflush_r+0x14>
 8017428:	f000 f860 	bl	80174ec <__sinit>
 801742c:	4b0c      	ldr	r3, [pc, #48]	; (8017460 <_fflush_r+0x48>)
 801742e:	429c      	cmp	r4, r3
 8017430:	d109      	bne.n	8017446 <_fflush_r+0x2e>
 8017432:	686c      	ldr	r4, [r5, #4]
 8017434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017438:	b17b      	cbz	r3, 801745a <_fflush_r+0x42>
 801743a:	4621      	mov	r1, r4
 801743c:	4628      	mov	r0, r5
 801743e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017442:	f7ff bf63 	b.w	801730c <__sflush_r>
 8017446:	4b07      	ldr	r3, [pc, #28]	; (8017464 <_fflush_r+0x4c>)
 8017448:	429c      	cmp	r4, r3
 801744a:	d101      	bne.n	8017450 <_fflush_r+0x38>
 801744c:	68ac      	ldr	r4, [r5, #8]
 801744e:	e7f1      	b.n	8017434 <_fflush_r+0x1c>
 8017450:	4b05      	ldr	r3, [pc, #20]	; (8017468 <_fflush_r+0x50>)
 8017452:	429c      	cmp	r4, r3
 8017454:	bf08      	it	eq
 8017456:	68ec      	ldreq	r4, [r5, #12]
 8017458:	e7ec      	b.n	8017434 <_fflush_r+0x1c>
 801745a:	2000      	movs	r0, #0
 801745c:	bd38      	pop	{r3, r4, r5, pc}
 801745e:	bf00      	nop
 8017460:	0801b394 	.word	0x0801b394
 8017464:	0801b3b4 	.word	0x0801b3b4
 8017468:	0801b374 	.word	0x0801b374

0801746c <std>:
 801746c:	2300      	movs	r3, #0
 801746e:	b510      	push	{r4, lr}
 8017470:	4604      	mov	r4, r0
 8017472:	e9c0 3300 	strd	r3, r3, [r0]
 8017476:	6083      	str	r3, [r0, #8]
 8017478:	8181      	strh	r1, [r0, #12]
 801747a:	6643      	str	r3, [r0, #100]	; 0x64
 801747c:	81c2      	strh	r2, [r0, #14]
 801747e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017482:	6183      	str	r3, [r0, #24]
 8017484:	4619      	mov	r1, r3
 8017486:	2208      	movs	r2, #8
 8017488:	305c      	adds	r0, #92	; 0x5c
 801748a:	f7ff fd0f 	bl	8016eac <memset>
 801748e:	4b05      	ldr	r3, [pc, #20]	; (80174a4 <std+0x38>)
 8017490:	6263      	str	r3, [r4, #36]	; 0x24
 8017492:	4b05      	ldr	r3, [pc, #20]	; (80174a8 <std+0x3c>)
 8017494:	62a3      	str	r3, [r4, #40]	; 0x28
 8017496:	4b05      	ldr	r3, [pc, #20]	; (80174ac <std+0x40>)
 8017498:	62e3      	str	r3, [r4, #44]	; 0x2c
 801749a:	4b05      	ldr	r3, [pc, #20]	; (80174b0 <std+0x44>)
 801749c:	6224      	str	r4, [r4, #32]
 801749e:	6323      	str	r3, [r4, #48]	; 0x30
 80174a0:	bd10      	pop	{r4, pc}
 80174a2:	bf00      	nop
 80174a4:	08017c5d 	.word	0x08017c5d
 80174a8:	08017c7f 	.word	0x08017c7f
 80174ac:	08017cb7 	.word	0x08017cb7
 80174b0:	08017cdb 	.word	0x08017cdb

080174b4 <_cleanup_r>:
 80174b4:	4901      	ldr	r1, [pc, #4]	; (80174bc <_cleanup_r+0x8>)
 80174b6:	f000 b885 	b.w	80175c4 <_fwalk_reent>
 80174ba:	bf00      	nop
 80174bc:	08017419 	.word	0x08017419

080174c0 <__sfmoreglue>:
 80174c0:	b570      	push	{r4, r5, r6, lr}
 80174c2:	1e4a      	subs	r2, r1, #1
 80174c4:	2568      	movs	r5, #104	; 0x68
 80174c6:	4355      	muls	r5, r2
 80174c8:	460e      	mov	r6, r1
 80174ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80174ce:	f7ff fd43 	bl	8016f58 <_malloc_r>
 80174d2:	4604      	mov	r4, r0
 80174d4:	b140      	cbz	r0, 80174e8 <__sfmoreglue+0x28>
 80174d6:	2100      	movs	r1, #0
 80174d8:	e9c0 1600 	strd	r1, r6, [r0]
 80174dc:	300c      	adds	r0, #12
 80174de:	60a0      	str	r0, [r4, #8]
 80174e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80174e4:	f7ff fce2 	bl	8016eac <memset>
 80174e8:	4620      	mov	r0, r4
 80174ea:	bd70      	pop	{r4, r5, r6, pc}

080174ec <__sinit>:
 80174ec:	6983      	ldr	r3, [r0, #24]
 80174ee:	b510      	push	{r4, lr}
 80174f0:	4604      	mov	r4, r0
 80174f2:	bb33      	cbnz	r3, 8017542 <__sinit+0x56>
 80174f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80174f8:	6503      	str	r3, [r0, #80]	; 0x50
 80174fa:	4b12      	ldr	r3, [pc, #72]	; (8017544 <__sinit+0x58>)
 80174fc:	4a12      	ldr	r2, [pc, #72]	; (8017548 <__sinit+0x5c>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	6282      	str	r2, [r0, #40]	; 0x28
 8017502:	4298      	cmp	r0, r3
 8017504:	bf04      	itt	eq
 8017506:	2301      	moveq	r3, #1
 8017508:	6183      	streq	r3, [r0, #24]
 801750a:	f000 f81f 	bl	801754c <__sfp>
 801750e:	6060      	str	r0, [r4, #4]
 8017510:	4620      	mov	r0, r4
 8017512:	f000 f81b 	bl	801754c <__sfp>
 8017516:	60a0      	str	r0, [r4, #8]
 8017518:	4620      	mov	r0, r4
 801751a:	f000 f817 	bl	801754c <__sfp>
 801751e:	2200      	movs	r2, #0
 8017520:	60e0      	str	r0, [r4, #12]
 8017522:	2104      	movs	r1, #4
 8017524:	6860      	ldr	r0, [r4, #4]
 8017526:	f7ff ffa1 	bl	801746c <std>
 801752a:	2201      	movs	r2, #1
 801752c:	2109      	movs	r1, #9
 801752e:	68a0      	ldr	r0, [r4, #8]
 8017530:	f7ff ff9c 	bl	801746c <std>
 8017534:	2202      	movs	r2, #2
 8017536:	2112      	movs	r1, #18
 8017538:	68e0      	ldr	r0, [r4, #12]
 801753a:	f7ff ff97 	bl	801746c <std>
 801753e:	2301      	movs	r3, #1
 8017540:	61a3      	str	r3, [r4, #24]
 8017542:	bd10      	pop	{r4, pc}
 8017544:	0801b370 	.word	0x0801b370
 8017548:	080174b5 	.word	0x080174b5

0801754c <__sfp>:
 801754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801754e:	4b1b      	ldr	r3, [pc, #108]	; (80175bc <__sfp+0x70>)
 8017550:	681e      	ldr	r6, [r3, #0]
 8017552:	69b3      	ldr	r3, [r6, #24]
 8017554:	4607      	mov	r7, r0
 8017556:	b913      	cbnz	r3, 801755e <__sfp+0x12>
 8017558:	4630      	mov	r0, r6
 801755a:	f7ff ffc7 	bl	80174ec <__sinit>
 801755e:	3648      	adds	r6, #72	; 0x48
 8017560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017564:	3b01      	subs	r3, #1
 8017566:	d503      	bpl.n	8017570 <__sfp+0x24>
 8017568:	6833      	ldr	r3, [r6, #0]
 801756a:	b133      	cbz	r3, 801757a <__sfp+0x2e>
 801756c:	6836      	ldr	r6, [r6, #0]
 801756e:	e7f7      	b.n	8017560 <__sfp+0x14>
 8017570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017574:	b16d      	cbz	r5, 8017592 <__sfp+0x46>
 8017576:	3468      	adds	r4, #104	; 0x68
 8017578:	e7f4      	b.n	8017564 <__sfp+0x18>
 801757a:	2104      	movs	r1, #4
 801757c:	4638      	mov	r0, r7
 801757e:	f7ff ff9f 	bl	80174c0 <__sfmoreglue>
 8017582:	6030      	str	r0, [r6, #0]
 8017584:	2800      	cmp	r0, #0
 8017586:	d1f1      	bne.n	801756c <__sfp+0x20>
 8017588:	230c      	movs	r3, #12
 801758a:	603b      	str	r3, [r7, #0]
 801758c:	4604      	mov	r4, r0
 801758e:	4620      	mov	r0, r4
 8017590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017592:	4b0b      	ldr	r3, [pc, #44]	; (80175c0 <__sfp+0x74>)
 8017594:	6665      	str	r5, [r4, #100]	; 0x64
 8017596:	e9c4 5500 	strd	r5, r5, [r4]
 801759a:	60a5      	str	r5, [r4, #8]
 801759c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80175a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80175a4:	2208      	movs	r2, #8
 80175a6:	4629      	mov	r1, r5
 80175a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80175ac:	f7ff fc7e 	bl	8016eac <memset>
 80175b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80175b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80175b8:	e7e9      	b.n	801758e <__sfp+0x42>
 80175ba:	bf00      	nop
 80175bc:	0801b370 	.word	0x0801b370
 80175c0:	ffff0001 	.word	0xffff0001

080175c4 <_fwalk_reent>:
 80175c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175c8:	4680      	mov	r8, r0
 80175ca:	4689      	mov	r9, r1
 80175cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80175d0:	2600      	movs	r6, #0
 80175d2:	b914      	cbnz	r4, 80175da <_fwalk_reent+0x16>
 80175d4:	4630      	mov	r0, r6
 80175d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80175de:	3f01      	subs	r7, #1
 80175e0:	d501      	bpl.n	80175e6 <_fwalk_reent+0x22>
 80175e2:	6824      	ldr	r4, [r4, #0]
 80175e4:	e7f5      	b.n	80175d2 <_fwalk_reent+0xe>
 80175e6:	89ab      	ldrh	r3, [r5, #12]
 80175e8:	2b01      	cmp	r3, #1
 80175ea:	d907      	bls.n	80175fc <_fwalk_reent+0x38>
 80175ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175f0:	3301      	adds	r3, #1
 80175f2:	d003      	beq.n	80175fc <_fwalk_reent+0x38>
 80175f4:	4629      	mov	r1, r5
 80175f6:	4640      	mov	r0, r8
 80175f8:	47c8      	blx	r9
 80175fa:	4306      	orrs	r6, r0
 80175fc:	3568      	adds	r5, #104	; 0x68
 80175fe:	e7ee      	b.n	80175de <_fwalk_reent+0x1a>

08017600 <__swhatbuf_r>:
 8017600:	b570      	push	{r4, r5, r6, lr}
 8017602:	460e      	mov	r6, r1
 8017604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017608:	2900      	cmp	r1, #0
 801760a:	b096      	sub	sp, #88	; 0x58
 801760c:	4614      	mov	r4, r2
 801760e:	461d      	mov	r5, r3
 8017610:	da07      	bge.n	8017622 <__swhatbuf_r+0x22>
 8017612:	2300      	movs	r3, #0
 8017614:	602b      	str	r3, [r5, #0]
 8017616:	89b3      	ldrh	r3, [r6, #12]
 8017618:	061a      	lsls	r2, r3, #24
 801761a:	d410      	bmi.n	801763e <__swhatbuf_r+0x3e>
 801761c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017620:	e00e      	b.n	8017640 <__swhatbuf_r+0x40>
 8017622:	466a      	mov	r2, sp
 8017624:	f000 fb80 	bl	8017d28 <_fstat_r>
 8017628:	2800      	cmp	r0, #0
 801762a:	dbf2      	blt.n	8017612 <__swhatbuf_r+0x12>
 801762c:	9a01      	ldr	r2, [sp, #4]
 801762e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017632:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017636:	425a      	negs	r2, r3
 8017638:	415a      	adcs	r2, r3
 801763a:	602a      	str	r2, [r5, #0]
 801763c:	e7ee      	b.n	801761c <__swhatbuf_r+0x1c>
 801763e:	2340      	movs	r3, #64	; 0x40
 8017640:	2000      	movs	r0, #0
 8017642:	6023      	str	r3, [r4, #0]
 8017644:	b016      	add	sp, #88	; 0x58
 8017646:	bd70      	pop	{r4, r5, r6, pc}

08017648 <__smakebuf_r>:
 8017648:	898b      	ldrh	r3, [r1, #12]
 801764a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801764c:	079d      	lsls	r5, r3, #30
 801764e:	4606      	mov	r6, r0
 8017650:	460c      	mov	r4, r1
 8017652:	d507      	bpl.n	8017664 <__smakebuf_r+0x1c>
 8017654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017658:	6023      	str	r3, [r4, #0]
 801765a:	6123      	str	r3, [r4, #16]
 801765c:	2301      	movs	r3, #1
 801765e:	6163      	str	r3, [r4, #20]
 8017660:	b002      	add	sp, #8
 8017662:	bd70      	pop	{r4, r5, r6, pc}
 8017664:	ab01      	add	r3, sp, #4
 8017666:	466a      	mov	r2, sp
 8017668:	f7ff ffca 	bl	8017600 <__swhatbuf_r>
 801766c:	9900      	ldr	r1, [sp, #0]
 801766e:	4605      	mov	r5, r0
 8017670:	4630      	mov	r0, r6
 8017672:	f7ff fc71 	bl	8016f58 <_malloc_r>
 8017676:	b948      	cbnz	r0, 801768c <__smakebuf_r+0x44>
 8017678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801767c:	059a      	lsls	r2, r3, #22
 801767e:	d4ef      	bmi.n	8017660 <__smakebuf_r+0x18>
 8017680:	f023 0303 	bic.w	r3, r3, #3
 8017684:	f043 0302 	orr.w	r3, r3, #2
 8017688:	81a3      	strh	r3, [r4, #12]
 801768a:	e7e3      	b.n	8017654 <__smakebuf_r+0xc>
 801768c:	4b0d      	ldr	r3, [pc, #52]	; (80176c4 <__smakebuf_r+0x7c>)
 801768e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017690:	89a3      	ldrh	r3, [r4, #12]
 8017692:	6020      	str	r0, [r4, #0]
 8017694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017698:	81a3      	strh	r3, [r4, #12]
 801769a:	9b00      	ldr	r3, [sp, #0]
 801769c:	6163      	str	r3, [r4, #20]
 801769e:	9b01      	ldr	r3, [sp, #4]
 80176a0:	6120      	str	r0, [r4, #16]
 80176a2:	b15b      	cbz	r3, 80176bc <__smakebuf_r+0x74>
 80176a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176a8:	4630      	mov	r0, r6
 80176aa:	f000 fb4f 	bl	8017d4c <_isatty_r>
 80176ae:	b128      	cbz	r0, 80176bc <__smakebuf_r+0x74>
 80176b0:	89a3      	ldrh	r3, [r4, #12]
 80176b2:	f023 0303 	bic.w	r3, r3, #3
 80176b6:	f043 0301 	orr.w	r3, r3, #1
 80176ba:	81a3      	strh	r3, [r4, #12]
 80176bc:	89a3      	ldrh	r3, [r4, #12]
 80176be:	431d      	orrs	r5, r3
 80176c0:	81a5      	strh	r5, [r4, #12]
 80176c2:	e7cd      	b.n	8017660 <__smakebuf_r+0x18>
 80176c4:	080174b5 	.word	0x080174b5

080176c8 <__malloc_lock>:
 80176c8:	4770      	bx	lr

080176ca <__malloc_unlock>:
 80176ca:	4770      	bx	lr

080176cc <__sfputc_r>:
 80176cc:	6893      	ldr	r3, [r2, #8]
 80176ce:	3b01      	subs	r3, #1
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	b410      	push	{r4}
 80176d4:	6093      	str	r3, [r2, #8]
 80176d6:	da08      	bge.n	80176ea <__sfputc_r+0x1e>
 80176d8:	6994      	ldr	r4, [r2, #24]
 80176da:	42a3      	cmp	r3, r4
 80176dc:	db01      	blt.n	80176e2 <__sfputc_r+0x16>
 80176de:	290a      	cmp	r1, #10
 80176e0:	d103      	bne.n	80176ea <__sfputc_r+0x1e>
 80176e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176e6:	f7ff bd51 	b.w	801718c <__swbuf_r>
 80176ea:	6813      	ldr	r3, [r2, #0]
 80176ec:	1c58      	adds	r0, r3, #1
 80176ee:	6010      	str	r0, [r2, #0]
 80176f0:	7019      	strb	r1, [r3, #0]
 80176f2:	4608      	mov	r0, r1
 80176f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176f8:	4770      	bx	lr

080176fa <__sfputs_r>:
 80176fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176fc:	4606      	mov	r6, r0
 80176fe:	460f      	mov	r7, r1
 8017700:	4614      	mov	r4, r2
 8017702:	18d5      	adds	r5, r2, r3
 8017704:	42ac      	cmp	r4, r5
 8017706:	d101      	bne.n	801770c <__sfputs_r+0x12>
 8017708:	2000      	movs	r0, #0
 801770a:	e007      	b.n	801771c <__sfputs_r+0x22>
 801770c:	463a      	mov	r2, r7
 801770e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017712:	4630      	mov	r0, r6
 8017714:	f7ff ffda 	bl	80176cc <__sfputc_r>
 8017718:	1c43      	adds	r3, r0, #1
 801771a:	d1f3      	bne.n	8017704 <__sfputs_r+0xa>
 801771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017720 <_vfiprintf_r>:
 8017720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017724:	460c      	mov	r4, r1
 8017726:	b09d      	sub	sp, #116	; 0x74
 8017728:	4617      	mov	r7, r2
 801772a:	461d      	mov	r5, r3
 801772c:	4606      	mov	r6, r0
 801772e:	b118      	cbz	r0, 8017738 <_vfiprintf_r+0x18>
 8017730:	6983      	ldr	r3, [r0, #24]
 8017732:	b90b      	cbnz	r3, 8017738 <_vfiprintf_r+0x18>
 8017734:	f7ff feda 	bl	80174ec <__sinit>
 8017738:	4b7c      	ldr	r3, [pc, #496]	; (801792c <_vfiprintf_r+0x20c>)
 801773a:	429c      	cmp	r4, r3
 801773c:	d158      	bne.n	80177f0 <_vfiprintf_r+0xd0>
 801773e:	6874      	ldr	r4, [r6, #4]
 8017740:	89a3      	ldrh	r3, [r4, #12]
 8017742:	0718      	lsls	r0, r3, #28
 8017744:	d55e      	bpl.n	8017804 <_vfiprintf_r+0xe4>
 8017746:	6923      	ldr	r3, [r4, #16]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d05b      	beq.n	8017804 <_vfiprintf_r+0xe4>
 801774c:	2300      	movs	r3, #0
 801774e:	9309      	str	r3, [sp, #36]	; 0x24
 8017750:	2320      	movs	r3, #32
 8017752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017756:	2330      	movs	r3, #48	; 0x30
 8017758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801775c:	9503      	str	r5, [sp, #12]
 801775e:	f04f 0b01 	mov.w	fp, #1
 8017762:	46b8      	mov	r8, r7
 8017764:	4645      	mov	r5, r8
 8017766:	f815 3b01 	ldrb.w	r3, [r5], #1
 801776a:	b10b      	cbz	r3, 8017770 <_vfiprintf_r+0x50>
 801776c:	2b25      	cmp	r3, #37	; 0x25
 801776e:	d154      	bne.n	801781a <_vfiprintf_r+0xfa>
 8017770:	ebb8 0a07 	subs.w	sl, r8, r7
 8017774:	d00b      	beq.n	801778e <_vfiprintf_r+0x6e>
 8017776:	4653      	mov	r3, sl
 8017778:	463a      	mov	r2, r7
 801777a:	4621      	mov	r1, r4
 801777c:	4630      	mov	r0, r6
 801777e:	f7ff ffbc 	bl	80176fa <__sfputs_r>
 8017782:	3001      	adds	r0, #1
 8017784:	f000 80c2 	beq.w	801790c <_vfiprintf_r+0x1ec>
 8017788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801778a:	4453      	add	r3, sl
 801778c:	9309      	str	r3, [sp, #36]	; 0x24
 801778e:	f898 3000 	ldrb.w	r3, [r8]
 8017792:	2b00      	cmp	r3, #0
 8017794:	f000 80ba 	beq.w	801790c <_vfiprintf_r+0x1ec>
 8017798:	2300      	movs	r3, #0
 801779a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801779e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177a2:	9304      	str	r3, [sp, #16]
 80177a4:	9307      	str	r3, [sp, #28]
 80177a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177aa:	931a      	str	r3, [sp, #104]	; 0x68
 80177ac:	46a8      	mov	r8, r5
 80177ae:	2205      	movs	r2, #5
 80177b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80177b4:	485e      	ldr	r0, [pc, #376]	; (8017930 <_vfiprintf_r+0x210>)
 80177b6:	f7e8 fd1b 	bl	80001f0 <memchr>
 80177ba:	9b04      	ldr	r3, [sp, #16]
 80177bc:	bb78      	cbnz	r0, 801781e <_vfiprintf_r+0xfe>
 80177be:	06d9      	lsls	r1, r3, #27
 80177c0:	bf44      	itt	mi
 80177c2:	2220      	movmi	r2, #32
 80177c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177c8:	071a      	lsls	r2, r3, #28
 80177ca:	bf44      	itt	mi
 80177cc:	222b      	movmi	r2, #43	; 0x2b
 80177ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177d2:	782a      	ldrb	r2, [r5, #0]
 80177d4:	2a2a      	cmp	r2, #42	; 0x2a
 80177d6:	d02a      	beq.n	801782e <_vfiprintf_r+0x10e>
 80177d8:	9a07      	ldr	r2, [sp, #28]
 80177da:	46a8      	mov	r8, r5
 80177dc:	2000      	movs	r0, #0
 80177de:	250a      	movs	r5, #10
 80177e0:	4641      	mov	r1, r8
 80177e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177e6:	3b30      	subs	r3, #48	; 0x30
 80177e8:	2b09      	cmp	r3, #9
 80177ea:	d969      	bls.n	80178c0 <_vfiprintf_r+0x1a0>
 80177ec:	b360      	cbz	r0, 8017848 <_vfiprintf_r+0x128>
 80177ee:	e024      	b.n	801783a <_vfiprintf_r+0x11a>
 80177f0:	4b50      	ldr	r3, [pc, #320]	; (8017934 <_vfiprintf_r+0x214>)
 80177f2:	429c      	cmp	r4, r3
 80177f4:	d101      	bne.n	80177fa <_vfiprintf_r+0xda>
 80177f6:	68b4      	ldr	r4, [r6, #8]
 80177f8:	e7a2      	b.n	8017740 <_vfiprintf_r+0x20>
 80177fa:	4b4f      	ldr	r3, [pc, #316]	; (8017938 <_vfiprintf_r+0x218>)
 80177fc:	429c      	cmp	r4, r3
 80177fe:	bf08      	it	eq
 8017800:	68f4      	ldreq	r4, [r6, #12]
 8017802:	e79d      	b.n	8017740 <_vfiprintf_r+0x20>
 8017804:	4621      	mov	r1, r4
 8017806:	4630      	mov	r0, r6
 8017808:	f7ff fd12 	bl	8017230 <__swsetup_r>
 801780c:	2800      	cmp	r0, #0
 801780e:	d09d      	beq.n	801774c <_vfiprintf_r+0x2c>
 8017810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017814:	b01d      	add	sp, #116	; 0x74
 8017816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801781a:	46a8      	mov	r8, r5
 801781c:	e7a2      	b.n	8017764 <_vfiprintf_r+0x44>
 801781e:	4a44      	ldr	r2, [pc, #272]	; (8017930 <_vfiprintf_r+0x210>)
 8017820:	1a80      	subs	r0, r0, r2
 8017822:	fa0b f000 	lsl.w	r0, fp, r0
 8017826:	4318      	orrs	r0, r3
 8017828:	9004      	str	r0, [sp, #16]
 801782a:	4645      	mov	r5, r8
 801782c:	e7be      	b.n	80177ac <_vfiprintf_r+0x8c>
 801782e:	9a03      	ldr	r2, [sp, #12]
 8017830:	1d11      	adds	r1, r2, #4
 8017832:	6812      	ldr	r2, [r2, #0]
 8017834:	9103      	str	r1, [sp, #12]
 8017836:	2a00      	cmp	r2, #0
 8017838:	db01      	blt.n	801783e <_vfiprintf_r+0x11e>
 801783a:	9207      	str	r2, [sp, #28]
 801783c:	e004      	b.n	8017848 <_vfiprintf_r+0x128>
 801783e:	4252      	negs	r2, r2
 8017840:	f043 0302 	orr.w	r3, r3, #2
 8017844:	9207      	str	r2, [sp, #28]
 8017846:	9304      	str	r3, [sp, #16]
 8017848:	f898 3000 	ldrb.w	r3, [r8]
 801784c:	2b2e      	cmp	r3, #46	; 0x2e
 801784e:	d10e      	bne.n	801786e <_vfiprintf_r+0x14e>
 8017850:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017854:	2b2a      	cmp	r3, #42	; 0x2a
 8017856:	d138      	bne.n	80178ca <_vfiprintf_r+0x1aa>
 8017858:	9b03      	ldr	r3, [sp, #12]
 801785a:	1d1a      	adds	r2, r3, #4
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	9203      	str	r2, [sp, #12]
 8017860:	2b00      	cmp	r3, #0
 8017862:	bfb8      	it	lt
 8017864:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017868:	f108 0802 	add.w	r8, r8, #2
 801786c:	9305      	str	r3, [sp, #20]
 801786e:	4d33      	ldr	r5, [pc, #204]	; (801793c <_vfiprintf_r+0x21c>)
 8017870:	f898 1000 	ldrb.w	r1, [r8]
 8017874:	2203      	movs	r2, #3
 8017876:	4628      	mov	r0, r5
 8017878:	f7e8 fcba 	bl	80001f0 <memchr>
 801787c:	b140      	cbz	r0, 8017890 <_vfiprintf_r+0x170>
 801787e:	2340      	movs	r3, #64	; 0x40
 8017880:	1b40      	subs	r0, r0, r5
 8017882:	fa03 f000 	lsl.w	r0, r3, r0
 8017886:	9b04      	ldr	r3, [sp, #16]
 8017888:	4303      	orrs	r3, r0
 801788a:	f108 0801 	add.w	r8, r8, #1
 801788e:	9304      	str	r3, [sp, #16]
 8017890:	f898 1000 	ldrb.w	r1, [r8]
 8017894:	482a      	ldr	r0, [pc, #168]	; (8017940 <_vfiprintf_r+0x220>)
 8017896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801789a:	2206      	movs	r2, #6
 801789c:	f108 0701 	add.w	r7, r8, #1
 80178a0:	f7e8 fca6 	bl	80001f0 <memchr>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d037      	beq.n	8017918 <_vfiprintf_r+0x1f8>
 80178a8:	4b26      	ldr	r3, [pc, #152]	; (8017944 <_vfiprintf_r+0x224>)
 80178aa:	bb1b      	cbnz	r3, 80178f4 <_vfiprintf_r+0x1d4>
 80178ac:	9b03      	ldr	r3, [sp, #12]
 80178ae:	3307      	adds	r3, #7
 80178b0:	f023 0307 	bic.w	r3, r3, #7
 80178b4:	3308      	adds	r3, #8
 80178b6:	9303      	str	r3, [sp, #12]
 80178b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ba:	444b      	add	r3, r9
 80178bc:	9309      	str	r3, [sp, #36]	; 0x24
 80178be:	e750      	b.n	8017762 <_vfiprintf_r+0x42>
 80178c0:	fb05 3202 	mla	r2, r5, r2, r3
 80178c4:	2001      	movs	r0, #1
 80178c6:	4688      	mov	r8, r1
 80178c8:	e78a      	b.n	80177e0 <_vfiprintf_r+0xc0>
 80178ca:	2300      	movs	r3, #0
 80178cc:	f108 0801 	add.w	r8, r8, #1
 80178d0:	9305      	str	r3, [sp, #20]
 80178d2:	4619      	mov	r1, r3
 80178d4:	250a      	movs	r5, #10
 80178d6:	4640      	mov	r0, r8
 80178d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178dc:	3a30      	subs	r2, #48	; 0x30
 80178de:	2a09      	cmp	r2, #9
 80178e0:	d903      	bls.n	80178ea <_vfiprintf_r+0x1ca>
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d0c3      	beq.n	801786e <_vfiprintf_r+0x14e>
 80178e6:	9105      	str	r1, [sp, #20]
 80178e8:	e7c1      	b.n	801786e <_vfiprintf_r+0x14e>
 80178ea:	fb05 2101 	mla	r1, r5, r1, r2
 80178ee:	2301      	movs	r3, #1
 80178f0:	4680      	mov	r8, r0
 80178f2:	e7f0      	b.n	80178d6 <_vfiprintf_r+0x1b6>
 80178f4:	ab03      	add	r3, sp, #12
 80178f6:	9300      	str	r3, [sp, #0]
 80178f8:	4622      	mov	r2, r4
 80178fa:	4b13      	ldr	r3, [pc, #76]	; (8017948 <_vfiprintf_r+0x228>)
 80178fc:	a904      	add	r1, sp, #16
 80178fe:	4630      	mov	r0, r6
 8017900:	f3af 8000 	nop.w
 8017904:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8017908:	4681      	mov	r9, r0
 801790a:	d1d5      	bne.n	80178b8 <_vfiprintf_r+0x198>
 801790c:	89a3      	ldrh	r3, [r4, #12]
 801790e:	065b      	lsls	r3, r3, #25
 8017910:	f53f af7e 	bmi.w	8017810 <_vfiprintf_r+0xf0>
 8017914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017916:	e77d      	b.n	8017814 <_vfiprintf_r+0xf4>
 8017918:	ab03      	add	r3, sp, #12
 801791a:	9300      	str	r3, [sp, #0]
 801791c:	4622      	mov	r2, r4
 801791e:	4b0a      	ldr	r3, [pc, #40]	; (8017948 <_vfiprintf_r+0x228>)
 8017920:	a904      	add	r1, sp, #16
 8017922:	4630      	mov	r0, r6
 8017924:	f000 f888 	bl	8017a38 <_printf_i>
 8017928:	e7ec      	b.n	8017904 <_vfiprintf_r+0x1e4>
 801792a:	bf00      	nop
 801792c:	0801b394 	.word	0x0801b394
 8017930:	0801b3d4 	.word	0x0801b3d4
 8017934:	0801b3b4 	.word	0x0801b3b4
 8017938:	0801b374 	.word	0x0801b374
 801793c:	0801b3da 	.word	0x0801b3da
 8017940:	0801b3de 	.word	0x0801b3de
 8017944:	00000000 	.word	0x00000000
 8017948:	080176fb 	.word	0x080176fb

0801794c <_printf_common>:
 801794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017950:	4691      	mov	r9, r2
 8017952:	461f      	mov	r7, r3
 8017954:	688a      	ldr	r2, [r1, #8]
 8017956:	690b      	ldr	r3, [r1, #16]
 8017958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801795c:	4293      	cmp	r3, r2
 801795e:	bfb8      	it	lt
 8017960:	4613      	movlt	r3, r2
 8017962:	f8c9 3000 	str.w	r3, [r9]
 8017966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801796a:	4606      	mov	r6, r0
 801796c:	460c      	mov	r4, r1
 801796e:	b112      	cbz	r2, 8017976 <_printf_common+0x2a>
 8017970:	3301      	adds	r3, #1
 8017972:	f8c9 3000 	str.w	r3, [r9]
 8017976:	6823      	ldr	r3, [r4, #0]
 8017978:	0699      	lsls	r1, r3, #26
 801797a:	bf42      	ittt	mi
 801797c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017980:	3302      	addmi	r3, #2
 8017982:	f8c9 3000 	strmi.w	r3, [r9]
 8017986:	6825      	ldr	r5, [r4, #0]
 8017988:	f015 0506 	ands.w	r5, r5, #6
 801798c:	d107      	bne.n	801799e <_printf_common+0x52>
 801798e:	f104 0a19 	add.w	sl, r4, #25
 8017992:	68e3      	ldr	r3, [r4, #12]
 8017994:	f8d9 2000 	ldr.w	r2, [r9]
 8017998:	1a9b      	subs	r3, r3, r2
 801799a:	42ab      	cmp	r3, r5
 801799c:	dc28      	bgt.n	80179f0 <_printf_common+0xa4>
 801799e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80179a2:	6822      	ldr	r2, [r4, #0]
 80179a4:	3300      	adds	r3, #0
 80179a6:	bf18      	it	ne
 80179a8:	2301      	movne	r3, #1
 80179aa:	0692      	lsls	r2, r2, #26
 80179ac:	d42d      	bmi.n	8017a0a <_printf_common+0xbe>
 80179ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179b2:	4639      	mov	r1, r7
 80179b4:	4630      	mov	r0, r6
 80179b6:	47c0      	blx	r8
 80179b8:	3001      	adds	r0, #1
 80179ba:	d020      	beq.n	80179fe <_printf_common+0xb2>
 80179bc:	6823      	ldr	r3, [r4, #0]
 80179be:	68e5      	ldr	r5, [r4, #12]
 80179c0:	f8d9 2000 	ldr.w	r2, [r9]
 80179c4:	f003 0306 	and.w	r3, r3, #6
 80179c8:	2b04      	cmp	r3, #4
 80179ca:	bf08      	it	eq
 80179cc:	1aad      	subeq	r5, r5, r2
 80179ce:	68a3      	ldr	r3, [r4, #8]
 80179d0:	6922      	ldr	r2, [r4, #16]
 80179d2:	bf0c      	ite	eq
 80179d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179d8:	2500      	movne	r5, #0
 80179da:	4293      	cmp	r3, r2
 80179dc:	bfc4      	itt	gt
 80179de:	1a9b      	subgt	r3, r3, r2
 80179e0:	18ed      	addgt	r5, r5, r3
 80179e2:	f04f 0900 	mov.w	r9, #0
 80179e6:	341a      	adds	r4, #26
 80179e8:	454d      	cmp	r5, r9
 80179ea:	d11a      	bne.n	8017a22 <_printf_common+0xd6>
 80179ec:	2000      	movs	r0, #0
 80179ee:	e008      	b.n	8017a02 <_printf_common+0xb6>
 80179f0:	2301      	movs	r3, #1
 80179f2:	4652      	mov	r2, sl
 80179f4:	4639      	mov	r1, r7
 80179f6:	4630      	mov	r0, r6
 80179f8:	47c0      	blx	r8
 80179fa:	3001      	adds	r0, #1
 80179fc:	d103      	bne.n	8017a06 <_printf_common+0xba>
 80179fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a06:	3501      	adds	r5, #1
 8017a08:	e7c3      	b.n	8017992 <_printf_common+0x46>
 8017a0a:	18e1      	adds	r1, r4, r3
 8017a0c:	1c5a      	adds	r2, r3, #1
 8017a0e:	2030      	movs	r0, #48	; 0x30
 8017a10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a14:	4422      	add	r2, r4
 8017a16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a1e:	3302      	adds	r3, #2
 8017a20:	e7c5      	b.n	80179ae <_printf_common+0x62>
 8017a22:	2301      	movs	r3, #1
 8017a24:	4622      	mov	r2, r4
 8017a26:	4639      	mov	r1, r7
 8017a28:	4630      	mov	r0, r6
 8017a2a:	47c0      	blx	r8
 8017a2c:	3001      	adds	r0, #1
 8017a2e:	d0e6      	beq.n	80179fe <_printf_common+0xb2>
 8017a30:	f109 0901 	add.w	r9, r9, #1
 8017a34:	e7d8      	b.n	80179e8 <_printf_common+0x9c>
	...

08017a38 <_printf_i>:
 8017a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017a40:	460c      	mov	r4, r1
 8017a42:	7e09      	ldrb	r1, [r1, #24]
 8017a44:	b085      	sub	sp, #20
 8017a46:	296e      	cmp	r1, #110	; 0x6e
 8017a48:	4617      	mov	r7, r2
 8017a4a:	4606      	mov	r6, r0
 8017a4c:	4698      	mov	r8, r3
 8017a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a50:	f000 80b3 	beq.w	8017bba <_printf_i+0x182>
 8017a54:	d822      	bhi.n	8017a9c <_printf_i+0x64>
 8017a56:	2963      	cmp	r1, #99	; 0x63
 8017a58:	d036      	beq.n	8017ac8 <_printf_i+0x90>
 8017a5a:	d80a      	bhi.n	8017a72 <_printf_i+0x3a>
 8017a5c:	2900      	cmp	r1, #0
 8017a5e:	f000 80b9 	beq.w	8017bd4 <_printf_i+0x19c>
 8017a62:	2958      	cmp	r1, #88	; 0x58
 8017a64:	f000 8083 	beq.w	8017b6e <_printf_i+0x136>
 8017a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017a70:	e032      	b.n	8017ad8 <_printf_i+0xa0>
 8017a72:	2964      	cmp	r1, #100	; 0x64
 8017a74:	d001      	beq.n	8017a7a <_printf_i+0x42>
 8017a76:	2969      	cmp	r1, #105	; 0x69
 8017a78:	d1f6      	bne.n	8017a68 <_printf_i+0x30>
 8017a7a:	6820      	ldr	r0, [r4, #0]
 8017a7c:	6813      	ldr	r3, [r2, #0]
 8017a7e:	0605      	lsls	r5, r0, #24
 8017a80:	f103 0104 	add.w	r1, r3, #4
 8017a84:	d52a      	bpl.n	8017adc <_printf_i+0xa4>
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	6011      	str	r1, [r2, #0]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	da03      	bge.n	8017a96 <_printf_i+0x5e>
 8017a8e:	222d      	movs	r2, #45	; 0x2d
 8017a90:	425b      	negs	r3, r3
 8017a92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017a96:	486f      	ldr	r0, [pc, #444]	; (8017c54 <_printf_i+0x21c>)
 8017a98:	220a      	movs	r2, #10
 8017a9a:	e039      	b.n	8017b10 <_printf_i+0xd8>
 8017a9c:	2973      	cmp	r1, #115	; 0x73
 8017a9e:	f000 809d 	beq.w	8017bdc <_printf_i+0x1a4>
 8017aa2:	d808      	bhi.n	8017ab6 <_printf_i+0x7e>
 8017aa4:	296f      	cmp	r1, #111	; 0x6f
 8017aa6:	d020      	beq.n	8017aea <_printf_i+0xb2>
 8017aa8:	2970      	cmp	r1, #112	; 0x70
 8017aaa:	d1dd      	bne.n	8017a68 <_printf_i+0x30>
 8017aac:	6823      	ldr	r3, [r4, #0]
 8017aae:	f043 0320 	orr.w	r3, r3, #32
 8017ab2:	6023      	str	r3, [r4, #0]
 8017ab4:	e003      	b.n	8017abe <_printf_i+0x86>
 8017ab6:	2975      	cmp	r1, #117	; 0x75
 8017ab8:	d017      	beq.n	8017aea <_printf_i+0xb2>
 8017aba:	2978      	cmp	r1, #120	; 0x78
 8017abc:	d1d4      	bne.n	8017a68 <_printf_i+0x30>
 8017abe:	2378      	movs	r3, #120	; 0x78
 8017ac0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017ac4:	4864      	ldr	r0, [pc, #400]	; (8017c58 <_printf_i+0x220>)
 8017ac6:	e055      	b.n	8017b74 <_printf_i+0x13c>
 8017ac8:	6813      	ldr	r3, [r2, #0]
 8017aca:	1d19      	adds	r1, r3, #4
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	6011      	str	r1, [r2, #0]
 8017ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ad8:	2301      	movs	r3, #1
 8017ada:	e08c      	b.n	8017bf6 <_printf_i+0x1be>
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	6011      	str	r1, [r2, #0]
 8017ae0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017ae4:	bf18      	it	ne
 8017ae6:	b21b      	sxthne	r3, r3
 8017ae8:	e7cf      	b.n	8017a8a <_printf_i+0x52>
 8017aea:	6813      	ldr	r3, [r2, #0]
 8017aec:	6825      	ldr	r5, [r4, #0]
 8017aee:	1d18      	adds	r0, r3, #4
 8017af0:	6010      	str	r0, [r2, #0]
 8017af2:	0628      	lsls	r0, r5, #24
 8017af4:	d501      	bpl.n	8017afa <_printf_i+0xc2>
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	e002      	b.n	8017b00 <_printf_i+0xc8>
 8017afa:	0668      	lsls	r0, r5, #25
 8017afc:	d5fb      	bpl.n	8017af6 <_printf_i+0xbe>
 8017afe:	881b      	ldrh	r3, [r3, #0]
 8017b00:	4854      	ldr	r0, [pc, #336]	; (8017c54 <_printf_i+0x21c>)
 8017b02:	296f      	cmp	r1, #111	; 0x6f
 8017b04:	bf14      	ite	ne
 8017b06:	220a      	movne	r2, #10
 8017b08:	2208      	moveq	r2, #8
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b10:	6865      	ldr	r5, [r4, #4]
 8017b12:	60a5      	str	r5, [r4, #8]
 8017b14:	2d00      	cmp	r5, #0
 8017b16:	f2c0 8095 	blt.w	8017c44 <_printf_i+0x20c>
 8017b1a:	6821      	ldr	r1, [r4, #0]
 8017b1c:	f021 0104 	bic.w	r1, r1, #4
 8017b20:	6021      	str	r1, [r4, #0]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d13d      	bne.n	8017ba2 <_printf_i+0x16a>
 8017b26:	2d00      	cmp	r5, #0
 8017b28:	f040 808e 	bne.w	8017c48 <_printf_i+0x210>
 8017b2c:	4665      	mov	r5, ip
 8017b2e:	2a08      	cmp	r2, #8
 8017b30:	d10b      	bne.n	8017b4a <_printf_i+0x112>
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	07db      	lsls	r3, r3, #31
 8017b36:	d508      	bpl.n	8017b4a <_printf_i+0x112>
 8017b38:	6923      	ldr	r3, [r4, #16]
 8017b3a:	6862      	ldr	r2, [r4, #4]
 8017b3c:	429a      	cmp	r2, r3
 8017b3e:	bfde      	ittt	le
 8017b40:	2330      	movle	r3, #48	; 0x30
 8017b42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b46:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017b4a:	ebac 0305 	sub.w	r3, ip, r5
 8017b4e:	6123      	str	r3, [r4, #16]
 8017b50:	f8cd 8000 	str.w	r8, [sp]
 8017b54:	463b      	mov	r3, r7
 8017b56:	aa03      	add	r2, sp, #12
 8017b58:	4621      	mov	r1, r4
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f7ff fef6 	bl	801794c <_printf_common>
 8017b60:	3001      	adds	r0, #1
 8017b62:	d14d      	bne.n	8017c00 <_printf_i+0x1c8>
 8017b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b68:	b005      	add	sp, #20
 8017b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b6e:	4839      	ldr	r0, [pc, #228]	; (8017c54 <_printf_i+0x21c>)
 8017b70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017b74:	6813      	ldr	r3, [r2, #0]
 8017b76:	6821      	ldr	r1, [r4, #0]
 8017b78:	1d1d      	adds	r5, r3, #4
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	6015      	str	r5, [r2, #0]
 8017b7e:	060a      	lsls	r2, r1, #24
 8017b80:	d50b      	bpl.n	8017b9a <_printf_i+0x162>
 8017b82:	07ca      	lsls	r2, r1, #31
 8017b84:	bf44      	itt	mi
 8017b86:	f041 0120 	orrmi.w	r1, r1, #32
 8017b8a:	6021      	strmi	r1, [r4, #0]
 8017b8c:	b91b      	cbnz	r3, 8017b96 <_printf_i+0x15e>
 8017b8e:	6822      	ldr	r2, [r4, #0]
 8017b90:	f022 0220 	bic.w	r2, r2, #32
 8017b94:	6022      	str	r2, [r4, #0]
 8017b96:	2210      	movs	r2, #16
 8017b98:	e7b7      	b.n	8017b0a <_printf_i+0xd2>
 8017b9a:	064d      	lsls	r5, r1, #25
 8017b9c:	bf48      	it	mi
 8017b9e:	b29b      	uxthmi	r3, r3
 8017ba0:	e7ef      	b.n	8017b82 <_printf_i+0x14a>
 8017ba2:	4665      	mov	r5, ip
 8017ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ba8:	fb02 3311 	mls	r3, r2, r1, r3
 8017bac:	5cc3      	ldrb	r3, [r0, r3]
 8017bae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017bb2:	460b      	mov	r3, r1
 8017bb4:	2900      	cmp	r1, #0
 8017bb6:	d1f5      	bne.n	8017ba4 <_printf_i+0x16c>
 8017bb8:	e7b9      	b.n	8017b2e <_printf_i+0xf6>
 8017bba:	6813      	ldr	r3, [r2, #0]
 8017bbc:	6825      	ldr	r5, [r4, #0]
 8017bbe:	6961      	ldr	r1, [r4, #20]
 8017bc0:	1d18      	adds	r0, r3, #4
 8017bc2:	6010      	str	r0, [r2, #0]
 8017bc4:	0628      	lsls	r0, r5, #24
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	d501      	bpl.n	8017bce <_printf_i+0x196>
 8017bca:	6019      	str	r1, [r3, #0]
 8017bcc:	e002      	b.n	8017bd4 <_printf_i+0x19c>
 8017bce:	066a      	lsls	r2, r5, #25
 8017bd0:	d5fb      	bpl.n	8017bca <_printf_i+0x192>
 8017bd2:	8019      	strh	r1, [r3, #0]
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	6123      	str	r3, [r4, #16]
 8017bd8:	4665      	mov	r5, ip
 8017bda:	e7b9      	b.n	8017b50 <_printf_i+0x118>
 8017bdc:	6813      	ldr	r3, [r2, #0]
 8017bde:	1d19      	adds	r1, r3, #4
 8017be0:	6011      	str	r1, [r2, #0]
 8017be2:	681d      	ldr	r5, [r3, #0]
 8017be4:	6862      	ldr	r2, [r4, #4]
 8017be6:	2100      	movs	r1, #0
 8017be8:	4628      	mov	r0, r5
 8017bea:	f7e8 fb01 	bl	80001f0 <memchr>
 8017bee:	b108      	cbz	r0, 8017bf4 <_printf_i+0x1bc>
 8017bf0:	1b40      	subs	r0, r0, r5
 8017bf2:	6060      	str	r0, [r4, #4]
 8017bf4:	6863      	ldr	r3, [r4, #4]
 8017bf6:	6123      	str	r3, [r4, #16]
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bfe:	e7a7      	b.n	8017b50 <_printf_i+0x118>
 8017c00:	6923      	ldr	r3, [r4, #16]
 8017c02:	462a      	mov	r2, r5
 8017c04:	4639      	mov	r1, r7
 8017c06:	4630      	mov	r0, r6
 8017c08:	47c0      	blx	r8
 8017c0a:	3001      	adds	r0, #1
 8017c0c:	d0aa      	beq.n	8017b64 <_printf_i+0x12c>
 8017c0e:	6823      	ldr	r3, [r4, #0]
 8017c10:	079b      	lsls	r3, r3, #30
 8017c12:	d413      	bmi.n	8017c3c <_printf_i+0x204>
 8017c14:	68e0      	ldr	r0, [r4, #12]
 8017c16:	9b03      	ldr	r3, [sp, #12]
 8017c18:	4298      	cmp	r0, r3
 8017c1a:	bfb8      	it	lt
 8017c1c:	4618      	movlt	r0, r3
 8017c1e:	e7a3      	b.n	8017b68 <_printf_i+0x130>
 8017c20:	2301      	movs	r3, #1
 8017c22:	464a      	mov	r2, r9
 8017c24:	4639      	mov	r1, r7
 8017c26:	4630      	mov	r0, r6
 8017c28:	47c0      	blx	r8
 8017c2a:	3001      	adds	r0, #1
 8017c2c:	d09a      	beq.n	8017b64 <_printf_i+0x12c>
 8017c2e:	3501      	adds	r5, #1
 8017c30:	68e3      	ldr	r3, [r4, #12]
 8017c32:	9a03      	ldr	r2, [sp, #12]
 8017c34:	1a9b      	subs	r3, r3, r2
 8017c36:	42ab      	cmp	r3, r5
 8017c38:	dcf2      	bgt.n	8017c20 <_printf_i+0x1e8>
 8017c3a:	e7eb      	b.n	8017c14 <_printf_i+0x1dc>
 8017c3c:	2500      	movs	r5, #0
 8017c3e:	f104 0919 	add.w	r9, r4, #25
 8017c42:	e7f5      	b.n	8017c30 <_printf_i+0x1f8>
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d1ac      	bne.n	8017ba2 <_printf_i+0x16a>
 8017c48:	7803      	ldrb	r3, [r0, #0]
 8017c4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c52:	e76c      	b.n	8017b2e <_printf_i+0xf6>
 8017c54:	0801b3e5 	.word	0x0801b3e5
 8017c58:	0801b3f6 	.word	0x0801b3f6

08017c5c <__sread>:
 8017c5c:	b510      	push	{r4, lr}
 8017c5e:	460c      	mov	r4, r1
 8017c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c64:	f000 f894 	bl	8017d90 <_read_r>
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	bfab      	itete	ge
 8017c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8017c70:	181b      	addge	r3, r3, r0
 8017c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c76:	bfac      	ite	ge
 8017c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c7a:	81a3      	strhlt	r3, [r4, #12]
 8017c7c:	bd10      	pop	{r4, pc}

08017c7e <__swrite>:
 8017c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c82:	461f      	mov	r7, r3
 8017c84:	898b      	ldrh	r3, [r1, #12]
 8017c86:	05db      	lsls	r3, r3, #23
 8017c88:	4605      	mov	r5, r0
 8017c8a:	460c      	mov	r4, r1
 8017c8c:	4616      	mov	r6, r2
 8017c8e:	d505      	bpl.n	8017c9c <__swrite+0x1e>
 8017c90:	2302      	movs	r3, #2
 8017c92:	2200      	movs	r2, #0
 8017c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c98:	f000 f868 	bl	8017d6c <_lseek_r>
 8017c9c:	89a3      	ldrh	r3, [r4, #12]
 8017c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ca6:	81a3      	strh	r3, [r4, #12]
 8017ca8:	4632      	mov	r2, r6
 8017caa:	463b      	mov	r3, r7
 8017cac:	4628      	mov	r0, r5
 8017cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb2:	f000 b817 	b.w	8017ce4 <_write_r>

08017cb6 <__sseek>:
 8017cb6:	b510      	push	{r4, lr}
 8017cb8:	460c      	mov	r4, r1
 8017cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cbe:	f000 f855 	bl	8017d6c <_lseek_r>
 8017cc2:	1c43      	adds	r3, r0, #1
 8017cc4:	89a3      	ldrh	r3, [r4, #12]
 8017cc6:	bf15      	itete	ne
 8017cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017cd2:	81a3      	strheq	r3, [r4, #12]
 8017cd4:	bf18      	it	ne
 8017cd6:	81a3      	strhne	r3, [r4, #12]
 8017cd8:	bd10      	pop	{r4, pc}

08017cda <__sclose>:
 8017cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cde:	f000 b813 	b.w	8017d08 <_close_r>
	...

08017ce4 <_write_r>:
 8017ce4:	b538      	push	{r3, r4, r5, lr}
 8017ce6:	4c07      	ldr	r4, [pc, #28]	; (8017d04 <_write_r+0x20>)
 8017ce8:	4605      	mov	r5, r0
 8017cea:	4608      	mov	r0, r1
 8017cec:	4611      	mov	r1, r2
 8017cee:	2200      	movs	r2, #0
 8017cf0:	6022      	str	r2, [r4, #0]
 8017cf2:	461a      	mov	r2, r3
 8017cf4:	f7fd fda9 	bl	801584a <_write>
 8017cf8:	1c43      	adds	r3, r0, #1
 8017cfa:	d102      	bne.n	8017d02 <_write_r+0x1e>
 8017cfc:	6823      	ldr	r3, [r4, #0]
 8017cfe:	b103      	cbz	r3, 8017d02 <_write_r+0x1e>
 8017d00:	602b      	str	r3, [r5, #0]
 8017d02:	bd38      	pop	{r3, r4, r5, pc}
 8017d04:	20009168 	.word	0x20009168

08017d08 <_close_r>:
 8017d08:	b538      	push	{r3, r4, r5, lr}
 8017d0a:	4c06      	ldr	r4, [pc, #24]	; (8017d24 <_close_r+0x1c>)
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	4605      	mov	r5, r0
 8017d10:	4608      	mov	r0, r1
 8017d12:	6023      	str	r3, [r4, #0]
 8017d14:	f7fd fdaa 	bl	801586c <_close>
 8017d18:	1c43      	adds	r3, r0, #1
 8017d1a:	d102      	bne.n	8017d22 <_close_r+0x1a>
 8017d1c:	6823      	ldr	r3, [r4, #0]
 8017d1e:	b103      	cbz	r3, 8017d22 <_close_r+0x1a>
 8017d20:	602b      	str	r3, [r5, #0]
 8017d22:	bd38      	pop	{r3, r4, r5, pc}
 8017d24:	20009168 	.word	0x20009168

08017d28 <_fstat_r>:
 8017d28:	b538      	push	{r3, r4, r5, lr}
 8017d2a:	4c07      	ldr	r4, [pc, #28]	; (8017d48 <_fstat_r+0x20>)
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	4605      	mov	r5, r0
 8017d30:	4608      	mov	r0, r1
 8017d32:	4611      	mov	r1, r2
 8017d34:	6023      	str	r3, [r4, #0]
 8017d36:	f7fd fda5 	bl	8015884 <_fstat>
 8017d3a:	1c43      	adds	r3, r0, #1
 8017d3c:	d102      	bne.n	8017d44 <_fstat_r+0x1c>
 8017d3e:	6823      	ldr	r3, [r4, #0]
 8017d40:	b103      	cbz	r3, 8017d44 <_fstat_r+0x1c>
 8017d42:	602b      	str	r3, [r5, #0]
 8017d44:	bd38      	pop	{r3, r4, r5, pc}
 8017d46:	bf00      	nop
 8017d48:	20009168 	.word	0x20009168

08017d4c <_isatty_r>:
 8017d4c:	b538      	push	{r3, r4, r5, lr}
 8017d4e:	4c06      	ldr	r4, [pc, #24]	; (8017d68 <_isatty_r+0x1c>)
 8017d50:	2300      	movs	r3, #0
 8017d52:	4605      	mov	r5, r0
 8017d54:	4608      	mov	r0, r1
 8017d56:	6023      	str	r3, [r4, #0]
 8017d58:	f7fd fda4 	bl	80158a4 <_isatty>
 8017d5c:	1c43      	adds	r3, r0, #1
 8017d5e:	d102      	bne.n	8017d66 <_isatty_r+0x1a>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	b103      	cbz	r3, 8017d66 <_isatty_r+0x1a>
 8017d64:	602b      	str	r3, [r5, #0]
 8017d66:	bd38      	pop	{r3, r4, r5, pc}
 8017d68:	20009168 	.word	0x20009168

08017d6c <_lseek_r>:
 8017d6c:	b538      	push	{r3, r4, r5, lr}
 8017d6e:	4c07      	ldr	r4, [pc, #28]	; (8017d8c <_lseek_r+0x20>)
 8017d70:	4605      	mov	r5, r0
 8017d72:	4608      	mov	r0, r1
 8017d74:	4611      	mov	r1, r2
 8017d76:	2200      	movs	r2, #0
 8017d78:	6022      	str	r2, [r4, #0]
 8017d7a:	461a      	mov	r2, r3
 8017d7c:	f7fd fd9d 	bl	80158ba <_lseek>
 8017d80:	1c43      	adds	r3, r0, #1
 8017d82:	d102      	bne.n	8017d8a <_lseek_r+0x1e>
 8017d84:	6823      	ldr	r3, [r4, #0]
 8017d86:	b103      	cbz	r3, 8017d8a <_lseek_r+0x1e>
 8017d88:	602b      	str	r3, [r5, #0]
 8017d8a:	bd38      	pop	{r3, r4, r5, pc}
 8017d8c:	20009168 	.word	0x20009168

08017d90 <_read_r>:
 8017d90:	b538      	push	{r3, r4, r5, lr}
 8017d92:	4c07      	ldr	r4, [pc, #28]	; (8017db0 <_read_r+0x20>)
 8017d94:	4605      	mov	r5, r0
 8017d96:	4608      	mov	r0, r1
 8017d98:	4611      	mov	r1, r2
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	6022      	str	r2, [r4, #0]
 8017d9e:	461a      	mov	r2, r3
 8017da0:	f7fd fd36 	bl	8015810 <_read>
 8017da4:	1c43      	adds	r3, r0, #1
 8017da6:	d102      	bne.n	8017dae <_read_r+0x1e>
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	b103      	cbz	r3, 8017dae <_read_r+0x1e>
 8017dac:	602b      	str	r3, [r5, #0]
 8017dae:	bd38      	pop	{r3, r4, r5, pc}
 8017db0:	20009168 	.word	0x20009168

08017db4 <atanf>:
 8017db4:	b538      	push	{r3, r4, r5, lr}
 8017db6:	ee10 5a10 	vmov	r5, s0
 8017dba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017dbe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8017dc2:	eef0 7a40 	vmov.f32	s15, s0
 8017dc6:	db10      	blt.n	8017dea <atanf+0x36>
 8017dc8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017dcc:	dd04      	ble.n	8017dd8 <atanf+0x24>
 8017dce:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8017dd6:	bd38      	pop	{r3, r4, r5, pc}
 8017dd8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8017f10 <atanf+0x15c>
 8017ddc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017f14 <atanf+0x160>
 8017de0:	2d00      	cmp	r5, #0
 8017de2:	bfd8      	it	le
 8017de4:	eef0 7a47 	vmovle.f32	s15, s14
 8017de8:	e7f3      	b.n	8017dd2 <atanf+0x1e>
 8017dea:	4b4b      	ldr	r3, [pc, #300]	; (8017f18 <atanf+0x164>)
 8017dec:	429c      	cmp	r4, r3
 8017dee:	dc10      	bgt.n	8017e12 <atanf+0x5e>
 8017df0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8017df4:	da0a      	bge.n	8017e0c <atanf+0x58>
 8017df6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017f1c <atanf+0x168>
 8017dfa:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e02:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e0a:	dce2      	bgt.n	8017dd2 <atanf+0x1e>
 8017e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e10:	e013      	b.n	8017e3a <atanf+0x86>
 8017e12:	f000 f8e3 	bl	8017fdc <fabsf>
 8017e16:	4b42      	ldr	r3, [pc, #264]	; (8017f20 <atanf+0x16c>)
 8017e18:	429c      	cmp	r4, r3
 8017e1a:	dc4f      	bgt.n	8017ebc <atanf+0x108>
 8017e1c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017e20:	429c      	cmp	r4, r3
 8017e22:	dc41      	bgt.n	8017ea8 <atanf+0xf4>
 8017e24:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017e28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017e2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017e30:	2300      	movs	r3, #0
 8017e32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017e36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e3a:	1c5a      	adds	r2, r3, #1
 8017e3c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017e40:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017f24 <atanf+0x170>
 8017e44:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017f28 <atanf+0x174>
 8017e48:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017f2c <atanf+0x178>
 8017e4c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017e50:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017e54:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8017f30 <atanf+0x17c>
 8017e58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017e5c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8017f34 <atanf+0x180>
 8017e60:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017e64:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8017f38 <atanf+0x184>
 8017e68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017e6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8017f3c <atanf+0x188>
 8017e70:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017e74:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8017f40 <atanf+0x18c>
 8017e78:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017e7c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017f44 <atanf+0x190>
 8017e80:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017e84:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8017f48 <atanf+0x194>
 8017e88:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017e8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8017f4c <atanf+0x198>
 8017e90:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017e94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017e98:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017ea0:	d121      	bne.n	8017ee6 <atanf+0x132>
 8017ea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017ea6:	e794      	b.n	8017dd2 <atanf+0x1e>
 8017ea8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017eac:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017eb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017eba:	e7be      	b.n	8017e3a <atanf+0x86>
 8017ebc:	4b24      	ldr	r3, [pc, #144]	; (8017f50 <atanf+0x19c>)
 8017ebe:	429c      	cmp	r4, r3
 8017ec0:	dc0b      	bgt.n	8017eda <atanf+0x126>
 8017ec2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017eca:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017ece:	2302      	movs	r3, #2
 8017ed0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017ed8:	e7af      	b.n	8017e3a <atanf+0x86>
 8017eda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017ede:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017ee2:	2303      	movs	r3, #3
 8017ee4:	e7a9      	b.n	8017e3a <atanf+0x86>
 8017ee6:	4a1b      	ldr	r2, [pc, #108]	; (8017f54 <atanf+0x1a0>)
 8017ee8:	491b      	ldr	r1, [pc, #108]	; (8017f58 <atanf+0x1a4>)
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	441a      	add	r2, r3
 8017eee:	440b      	add	r3, r1
 8017ef0:	edd3 6a00 	vldr	s13, [r3]
 8017ef4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017ef8:	2d00      	cmp	r5, #0
 8017efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017efe:	ed92 7a00 	vldr	s14, [r2]
 8017f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f06:	bfb8      	it	lt
 8017f08:	eef1 7a67 	vneglt.f32	s15, s15
 8017f0c:	e761      	b.n	8017dd2 <atanf+0x1e>
 8017f0e:	bf00      	nop
 8017f10:	bfc90fdb 	.word	0xbfc90fdb
 8017f14:	3fc90fdb 	.word	0x3fc90fdb
 8017f18:	3edfffff 	.word	0x3edfffff
 8017f1c:	7149f2ca 	.word	0x7149f2ca
 8017f20:	3f97ffff 	.word	0x3f97ffff
 8017f24:	3c8569d7 	.word	0x3c8569d7
 8017f28:	3d4bda59 	.word	0x3d4bda59
 8017f2c:	bd6ef16b 	.word	0xbd6ef16b
 8017f30:	3d886b35 	.word	0x3d886b35
 8017f34:	3dba2e6e 	.word	0x3dba2e6e
 8017f38:	3e124925 	.word	0x3e124925
 8017f3c:	3eaaaaab 	.word	0x3eaaaaab
 8017f40:	bd15a221 	.word	0xbd15a221
 8017f44:	bd9d8795 	.word	0xbd9d8795
 8017f48:	bde38e38 	.word	0xbde38e38
 8017f4c:	be4ccccd 	.word	0xbe4ccccd
 8017f50:	401bffff 	.word	0x401bffff
 8017f54:	0801b408 	.word	0x0801b408
 8017f58:	0801b418 	.word	0x0801b418

08017f5c <cosf>:
 8017f5c:	ee10 3a10 	vmov	r3, s0
 8017f60:	b507      	push	{r0, r1, r2, lr}
 8017f62:	4a1c      	ldr	r2, [pc, #112]	; (8017fd4 <cosf+0x78>)
 8017f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	dc04      	bgt.n	8017f76 <cosf+0x1a>
 8017f6c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8017fd8 <cosf+0x7c>
 8017f70:	f000 fad6 	bl	8018520 <__kernel_cosf>
 8017f74:	e004      	b.n	8017f80 <cosf+0x24>
 8017f76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017f7a:	db04      	blt.n	8017f86 <cosf+0x2a>
 8017f7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017f80:	b003      	add	sp, #12
 8017f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f86:	4668      	mov	r0, sp
 8017f88:	f000 f99a 	bl	80182c0 <__ieee754_rem_pio2f>
 8017f8c:	f000 0003 	and.w	r0, r0, #3
 8017f90:	2801      	cmp	r0, #1
 8017f92:	d007      	beq.n	8017fa4 <cosf+0x48>
 8017f94:	2802      	cmp	r0, #2
 8017f96:	d00e      	beq.n	8017fb6 <cosf+0x5a>
 8017f98:	b9a0      	cbnz	r0, 8017fc4 <cosf+0x68>
 8017f9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017f9e:	ed9d 0a00 	vldr	s0, [sp]
 8017fa2:	e7e5      	b.n	8017f70 <cosf+0x14>
 8017fa4:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fa8:	ed9d 0a00 	vldr	s0, [sp]
 8017fac:	f000 fd98 	bl	8018ae0 <__kernel_sinf>
 8017fb0:	eeb1 0a40 	vneg.f32	s0, s0
 8017fb4:	e7e4      	b.n	8017f80 <cosf+0x24>
 8017fb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fba:	ed9d 0a00 	vldr	s0, [sp]
 8017fbe:	f000 faaf 	bl	8018520 <__kernel_cosf>
 8017fc2:	e7f5      	b.n	8017fb0 <cosf+0x54>
 8017fc4:	2001      	movs	r0, #1
 8017fc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fca:	ed9d 0a00 	vldr	s0, [sp]
 8017fce:	f000 fd87 	bl	8018ae0 <__kernel_sinf>
 8017fd2:	e7d5      	b.n	8017f80 <cosf+0x24>
 8017fd4:	3f490fd8 	.word	0x3f490fd8
 8017fd8:	00000000 	.word	0x00000000

08017fdc <fabsf>:
 8017fdc:	ee10 3a10 	vmov	r3, s0
 8017fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017fe4:	ee00 3a10 	vmov	s0, r3
 8017fe8:	4770      	bx	lr
	...

08017fec <sinf>:
 8017fec:	ee10 3a10 	vmov	r3, s0
 8017ff0:	b507      	push	{r0, r1, r2, lr}
 8017ff2:	4a1d      	ldr	r2, [pc, #116]	; (8018068 <sinf+0x7c>)
 8017ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	dc05      	bgt.n	8018008 <sinf+0x1c>
 8017ffc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801806c <sinf+0x80>
 8018000:	2000      	movs	r0, #0
 8018002:	f000 fd6d 	bl	8018ae0 <__kernel_sinf>
 8018006:	e004      	b.n	8018012 <sinf+0x26>
 8018008:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801800c:	db04      	blt.n	8018018 <sinf+0x2c>
 801800e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018012:	b003      	add	sp, #12
 8018014:	f85d fb04 	ldr.w	pc, [sp], #4
 8018018:	4668      	mov	r0, sp
 801801a:	f000 f951 	bl	80182c0 <__ieee754_rem_pio2f>
 801801e:	f000 0003 	and.w	r0, r0, #3
 8018022:	2801      	cmp	r0, #1
 8018024:	d008      	beq.n	8018038 <sinf+0x4c>
 8018026:	2802      	cmp	r0, #2
 8018028:	d00d      	beq.n	8018046 <sinf+0x5a>
 801802a:	b9b0      	cbnz	r0, 801805a <sinf+0x6e>
 801802c:	2001      	movs	r0, #1
 801802e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018032:	ed9d 0a00 	vldr	s0, [sp]
 8018036:	e7e4      	b.n	8018002 <sinf+0x16>
 8018038:	eddd 0a01 	vldr	s1, [sp, #4]
 801803c:	ed9d 0a00 	vldr	s0, [sp]
 8018040:	f000 fa6e 	bl	8018520 <__kernel_cosf>
 8018044:	e7e5      	b.n	8018012 <sinf+0x26>
 8018046:	2001      	movs	r0, #1
 8018048:	eddd 0a01 	vldr	s1, [sp, #4]
 801804c:	ed9d 0a00 	vldr	s0, [sp]
 8018050:	f000 fd46 	bl	8018ae0 <__kernel_sinf>
 8018054:	eeb1 0a40 	vneg.f32	s0, s0
 8018058:	e7db      	b.n	8018012 <sinf+0x26>
 801805a:	eddd 0a01 	vldr	s1, [sp, #4]
 801805e:	ed9d 0a00 	vldr	s0, [sp]
 8018062:	f000 fa5d 	bl	8018520 <__kernel_cosf>
 8018066:	e7f5      	b.n	8018054 <sinf+0x68>
 8018068:	3f490fd8 	.word	0x3f490fd8
 801806c:	00000000 	.word	0x00000000

08018070 <tanf>:
 8018070:	ee10 3a10 	vmov	r3, s0
 8018074:	b507      	push	{r0, r1, r2, lr}
 8018076:	4a10      	ldr	r2, [pc, #64]	; (80180b8 <tanf+0x48>)
 8018078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801807c:	4293      	cmp	r3, r2
 801807e:	dc05      	bgt.n	801808c <tanf+0x1c>
 8018080:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80180bc <tanf+0x4c>
 8018084:	2001      	movs	r0, #1
 8018086:	f000 fd73 	bl	8018b70 <__kernel_tanf>
 801808a:	e004      	b.n	8018096 <tanf+0x26>
 801808c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018090:	db04      	blt.n	801809c <tanf+0x2c>
 8018092:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018096:	b003      	add	sp, #12
 8018098:	f85d fb04 	ldr.w	pc, [sp], #4
 801809c:	4668      	mov	r0, sp
 801809e:	f000 f90f 	bl	80182c0 <__ieee754_rem_pio2f>
 80180a2:	0040      	lsls	r0, r0, #1
 80180a4:	f000 0002 	and.w	r0, r0, #2
 80180a8:	f1c0 0001 	rsb	r0, r0, #1
 80180ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80180b0:	ed9d 0a00 	vldr	s0, [sp]
 80180b4:	e7e7      	b.n	8018086 <tanf+0x16>
 80180b6:	bf00      	nop
 80180b8:	3f490fda 	.word	0x3f490fda
 80180bc:	00000000 	.word	0x00000000

080180c0 <atan2f>:
 80180c0:	f000 b850 	b.w	8018164 <__ieee754_atan2f>

080180c4 <sqrtf>:
 80180c4:	b510      	push	{r4, lr}
 80180c6:	ed2d 8b02 	vpush	{d8}
 80180ca:	b08a      	sub	sp, #40	; 0x28
 80180cc:	eeb0 8a40 	vmov.f32	s16, s0
 80180d0:	f000 fa22 	bl	8018518 <__ieee754_sqrtf>
 80180d4:	4b21      	ldr	r3, [pc, #132]	; (801815c <sqrtf+0x98>)
 80180d6:	f993 4000 	ldrsb.w	r4, [r3]
 80180da:	1c63      	adds	r3, r4, #1
 80180dc:	d02c      	beq.n	8018138 <sqrtf+0x74>
 80180de:	eeb4 8a48 	vcmp.f32	s16, s16
 80180e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e6:	d627      	bvs.n	8018138 <sqrtf+0x74>
 80180e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80180ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f0:	d522      	bpl.n	8018138 <sqrtf+0x74>
 80180f2:	2301      	movs	r3, #1
 80180f4:	9300      	str	r3, [sp, #0]
 80180f6:	4b1a      	ldr	r3, [pc, #104]	; (8018160 <sqrtf+0x9c>)
 80180f8:	9301      	str	r3, [sp, #4]
 80180fa:	ee18 0a10 	vmov	r0, s16
 80180fe:	2300      	movs	r3, #0
 8018100:	9308      	str	r3, [sp, #32]
 8018102:	f7e8 fa29 	bl	8000558 <__aeabi_f2d>
 8018106:	2200      	movs	r2, #0
 8018108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801810c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018110:	2300      	movs	r3, #0
 8018112:	b9ac      	cbnz	r4, 8018140 <sqrtf+0x7c>
 8018114:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018118:	4668      	mov	r0, sp
 801811a:	f000 fe0d 	bl	8018d38 <matherr>
 801811e:	b1b8      	cbz	r0, 8018150 <sqrtf+0x8c>
 8018120:	9b08      	ldr	r3, [sp, #32]
 8018122:	b11b      	cbz	r3, 801812c <sqrtf+0x68>
 8018124:	f000 feb8 	bl	8018e98 <__errno>
 8018128:	9b08      	ldr	r3, [sp, #32]
 801812a:	6003      	str	r3, [r0, #0]
 801812c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018130:	f7e8 fc9c 	bl	8000a6c <__aeabi_d2f>
 8018134:	ee00 0a10 	vmov	s0, r0
 8018138:	b00a      	add	sp, #40	; 0x28
 801813a:	ecbd 8b02 	vpop	{d8}
 801813e:	bd10      	pop	{r4, pc}
 8018140:	4610      	mov	r0, r2
 8018142:	4619      	mov	r1, r3
 8018144:	f7e8 fb8a 	bl	800085c <__aeabi_ddiv>
 8018148:	2c02      	cmp	r4, #2
 801814a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801814e:	d1e3      	bne.n	8018118 <sqrtf+0x54>
 8018150:	f000 fea2 	bl	8018e98 <__errno>
 8018154:	2321      	movs	r3, #33	; 0x21
 8018156:	6003      	str	r3, [r0, #0]
 8018158:	e7e2      	b.n	8018120 <sqrtf+0x5c>
 801815a:	bf00      	nop
 801815c:	200001f0 	.word	0x200001f0
 8018160:	0801b428 	.word	0x0801b428

08018164 <__ieee754_atan2f>:
 8018164:	ee10 2a90 	vmov	r2, s1
 8018168:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801816c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018170:	b510      	push	{r4, lr}
 8018172:	eef0 7a40 	vmov.f32	s15, s0
 8018176:	dc06      	bgt.n	8018186 <__ieee754_atan2f+0x22>
 8018178:	ee10 0a10 	vmov	r0, s0
 801817c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018180:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018184:	dd04      	ble.n	8018190 <__ieee754_atan2f+0x2c>
 8018186:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801818a:	eeb0 0a67 	vmov.f32	s0, s15
 801818e:	bd10      	pop	{r4, pc}
 8018190:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018194:	d103      	bne.n	801819e <__ieee754_atan2f+0x3a>
 8018196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801819a:	f7ff be0b 	b.w	8017db4 <atanf>
 801819e:	1794      	asrs	r4, r2, #30
 80181a0:	f004 0402 	and.w	r4, r4, #2
 80181a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80181a8:	b943      	cbnz	r3, 80181bc <__ieee754_atan2f+0x58>
 80181aa:	2c02      	cmp	r4, #2
 80181ac:	d06e      	beq.n	801828c <__ieee754_atan2f+0x128>
 80181ae:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8018294 <__ieee754_atan2f+0x130>
 80181b2:	2c03      	cmp	r4, #3
 80181b4:	bf08      	it	eq
 80181b6:	eef0 7a47 	vmoveq.f32	s15, s14
 80181ba:	e7e6      	b.n	801818a <__ieee754_atan2f+0x26>
 80181bc:	b941      	cbnz	r1, 80181d0 <__ieee754_atan2f+0x6c>
 80181be:	eddf 7a36 	vldr	s15, [pc, #216]	; 8018298 <__ieee754_atan2f+0x134>
 80181c2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801829c <__ieee754_atan2f+0x138>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	bfb8      	it	lt
 80181ca:	eef0 7a47 	vmovlt.f32	s15, s14
 80181ce:	e7dc      	b.n	801818a <__ieee754_atan2f+0x26>
 80181d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80181d4:	d122      	bne.n	801821c <__ieee754_atan2f+0xb8>
 80181d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80181da:	d112      	bne.n	8018202 <__ieee754_atan2f+0x9e>
 80181dc:	2c02      	cmp	r4, #2
 80181de:	d00a      	beq.n	80181f6 <__ieee754_atan2f+0x92>
 80181e0:	2c03      	cmp	r4, #3
 80181e2:	d00b      	beq.n	80181fc <__ieee754_atan2f+0x98>
 80181e4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80182a0 <__ieee754_atan2f+0x13c>
 80181e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80182a4 <__ieee754_atan2f+0x140>
 80181ec:	2c01      	cmp	r4, #1
 80181ee:	bf18      	it	ne
 80181f0:	eef0 7a47 	vmovne.f32	s15, s14
 80181f4:	e7c9      	b.n	801818a <__ieee754_atan2f+0x26>
 80181f6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80182a8 <__ieee754_atan2f+0x144>
 80181fa:	e7c6      	b.n	801818a <__ieee754_atan2f+0x26>
 80181fc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80182ac <__ieee754_atan2f+0x148>
 8018200:	e7c3      	b.n	801818a <__ieee754_atan2f+0x26>
 8018202:	2c02      	cmp	r4, #2
 8018204:	d042      	beq.n	801828c <__ieee754_atan2f+0x128>
 8018206:	2c03      	cmp	r4, #3
 8018208:	d005      	beq.n	8018216 <__ieee754_atan2f+0xb2>
 801820a:	2c01      	cmp	r4, #1
 801820c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80182b0 <__ieee754_atan2f+0x14c>
 8018210:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80182b4 <__ieee754_atan2f+0x150>
 8018214:	e7eb      	b.n	80181ee <__ieee754_atan2f+0x8a>
 8018216:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018294 <__ieee754_atan2f+0x130>
 801821a:	e7b6      	b.n	801818a <__ieee754_atan2f+0x26>
 801821c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018220:	d0cd      	beq.n	80181be <__ieee754_atan2f+0x5a>
 8018222:	1a5b      	subs	r3, r3, r1
 8018224:	15db      	asrs	r3, r3, #23
 8018226:	2b3c      	cmp	r3, #60	; 0x3c
 8018228:	dc1a      	bgt.n	8018260 <__ieee754_atan2f+0xfc>
 801822a:	2a00      	cmp	r2, #0
 801822c:	da01      	bge.n	8018232 <__ieee754_atan2f+0xce>
 801822e:	333c      	adds	r3, #60	; 0x3c
 8018230:	db19      	blt.n	8018266 <__ieee754_atan2f+0x102>
 8018232:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8018236:	f7ff fed1 	bl	8017fdc <fabsf>
 801823a:	f7ff fdbb 	bl	8017db4 <atanf>
 801823e:	eef0 7a40 	vmov.f32	s15, s0
 8018242:	2c01      	cmp	r4, #1
 8018244:	d012      	beq.n	801826c <__ieee754_atan2f+0x108>
 8018246:	2c02      	cmp	r4, #2
 8018248:	d017      	beq.n	801827a <__ieee754_atan2f+0x116>
 801824a:	2c00      	cmp	r4, #0
 801824c:	d09d      	beq.n	801818a <__ieee754_atan2f+0x26>
 801824e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80182b8 <__ieee754_atan2f+0x154>
 8018252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018256:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80182bc <__ieee754_atan2f+0x158>
 801825a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801825e:	e794      	b.n	801818a <__ieee754_atan2f+0x26>
 8018260:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018298 <__ieee754_atan2f+0x134>
 8018264:	e7ed      	b.n	8018242 <__ieee754_atan2f+0xde>
 8018266:	eddf 7a13 	vldr	s15, [pc, #76]	; 80182b4 <__ieee754_atan2f+0x150>
 801826a:	e7ea      	b.n	8018242 <__ieee754_atan2f+0xde>
 801826c:	ee17 3a90 	vmov	r3, s15
 8018270:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018274:	ee07 3a90 	vmov	s15, r3
 8018278:	e787      	b.n	801818a <__ieee754_atan2f+0x26>
 801827a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80182b8 <__ieee754_atan2f+0x154>
 801827e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018282:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80182bc <__ieee754_atan2f+0x158>
 8018286:	ee77 7a67 	vsub.f32	s15, s14, s15
 801828a:	e77e      	b.n	801818a <__ieee754_atan2f+0x26>
 801828c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80182bc <__ieee754_atan2f+0x158>
 8018290:	e77b      	b.n	801818a <__ieee754_atan2f+0x26>
 8018292:	bf00      	nop
 8018294:	c0490fdb 	.word	0xc0490fdb
 8018298:	3fc90fdb 	.word	0x3fc90fdb
 801829c:	bfc90fdb 	.word	0xbfc90fdb
 80182a0:	bf490fdb 	.word	0xbf490fdb
 80182a4:	3f490fdb 	.word	0x3f490fdb
 80182a8:	4016cbe4 	.word	0x4016cbe4
 80182ac:	c016cbe4 	.word	0xc016cbe4
 80182b0:	80000000 	.word	0x80000000
 80182b4:	00000000 	.word	0x00000000
 80182b8:	33bbbd2e 	.word	0x33bbbd2e
 80182bc:	40490fdb 	.word	0x40490fdb

080182c0 <__ieee754_rem_pio2f>:
 80182c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182c2:	ee10 6a10 	vmov	r6, s0
 80182c6:	4b86      	ldr	r3, [pc, #536]	; (80184e0 <__ieee754_rem_pio2f+0x220>)
 80182c8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80182cc:	429c      	cmp	r4, r3
 80182ce:	b087      	sub	sp, #28
 80182d0:	4605      	mov	r5, r0
 80182d2:	dc05      	bgt.n	80182e0 <__ieee754_rem_pio2f+0x20>
 80182d4:	2300      	movs	r3, #0
 80182d6:	ed85 0a00 	vstr	s0, [r5]
 80182da:	6043      	str	r3, [r0, #4]
 80182dc:	2000      	movs	r0, #0
 80182de:	e020      	b.n	8018322 <__ieee754_rem_pio2f+0x62>
 80182e0:	4b80      	ldr	r3, [pc, #512]	; (80184e4 <__ieee754_rem_pio2f+0x224>)
 80182e2:	429c      	cmp	r4, r3
 80182e4:	dc38      	bgt.n	8018358 <__ieee754_rem_pio2f+0x98>
 80182e6:	2e00      	cmp	r6, #0
 80182e8:	f024 040f 	bic.w	r4, r4, #15
 80182ec:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80184e8 <__ieee754_rem_pio2f+0x228>
 80182f0:	4b7e      	ldr	r3, [pc, #504]	; (80184ec <__ieee754_rem_pio2f+0x22c>)
 80182f2:	dd18      	ble.n	8018326 <__ieee754_rem_pio2f+0x66>
 80182f4:	429c      	cmp	r4, r3
 80182f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80182fa:	bf09      	itett	eq
 80182fc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80184f0 <__ieee754_rem_pio2f+0x230>
 8018300:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80184f4 <__ieee754_rem_pio2f+0x234>
 8018304:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018308:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80184f8 <__ieee754_rem_pio2f+0x238>
 801830c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8018310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018314:	edc0 6a00 	vstr	s13, [r0]
 8018318:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801831c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018320:	2001      	movs	r0, #1
 8018322:	b007      	add	sp, #28
 8018324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018326:	429c      	cmp	r4, r3
 8018328:	ee70 7a07 	vadd.f32	s15, s0, s14
 801832c:	bf09      	itett	eq
 801832e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80184f0 <__ieee754_rem_pio2f+0x230>
 8018332:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80184f4 <__ieee754_rem_pio2f+0x234>
 8018336:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801833a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80184f8 <__ieee754_rem_pio2f+0x238>
 801833e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018346:	edc0 6a00 	vstr	s13, [r0]
 801834a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801834e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018356:	e7e4      	b.n	8018322 <__ieee754_rem_pio2f+0x62>
 8018358:	4b68      	ldr	r3, [pc, #416]	; (80184fc <__ieee754_rem_pio2f+0x23c>)
 801835a:	429c      	cmp	r4, r3
 801835c:	dc71      	bgt.n	8018442 <__ieee754_rem_pio2f+0x182>
 801835e:	f7ff fe3d 	bl	8017fdc <fabsf>
 8018362:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8018500 <__ieee754_rem_pio2f+0x240>
 8018366:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801836a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801836e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018372:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018376:	ee17 0a90 	vmov	r0, s15
 801837a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80184e8 <__ieee754_rem_pio2f+0x228>
 801837e:	eeb1 7a46 	vneg.f32	s14, s12
 8018382:	eea7 0a27 	vfma.f32	s0, s14, s15
 8018386:	281f      	cmp	r0, #31
 8018388:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80184f4 <__ieee754_rem_pio2f+0x234>
 801838c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018390:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018394:	ee16 3a90 	vmov	r3, s13
 8018398:	dc1c      	bgt.n	80183d4 <__ieee754_rem_pio2f+0x114>
 801839a:	1e47      	subs	r7, r0, #1
 801839c:	4959      	ldr	r1, [pc, #356]	; (8018504 <__ieee754_rem_pio2f+0x244>)
 801839e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80183a2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80183a6:	428a      	cmp	r2, r1
 80183a8:	d014      	beq.n	80183d4 <__ieee754_rem_pio2f+0x114>
 80183aa:	602b      	str	r3, [r5, #0]
 80183ac:	ed95 7a00 	vldr	s14, [r5]
 80183b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80183b4:	2e00      	cmp	r6, #0
 80183b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80183ba:	ed85 0a01 	vstr	s0, [r5, #4]
 80183be:	dab0      	bge.n	8018322 <__ieee754_rem_pio2f+0x62>
 80183c0:	eeb1 7a47 	vneg.f32	s14, s14
 80183c4:	eeb1 0a40 	vneg.f32	s0, s0
 80183c8:	ed85 7a00 	vstr	s14, [r5]
 80183cc:	ed85 0a01 	vstr	s0, [r5, #4]
 80183d0:	4240      	negs	r0, r0
 80183d2:	e7a6      	b.n	8018322 <__ieee754_rem_pio2f+0x62>
 80183d4:	15e4      	asrs	r4, r4, #23
 80183d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80183da:	1aa2      	subs	r2, r4, r2
 80183dc:	2a08      	cmp	r2, #8
 80183de:	dde4      	ble.n	80183aa <__ieee754_rem_pio2f+0xea>
 80183e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80184f0 <__ieee754_rem_pio2f+0x230>
 80183e4:	eef0 6a40 	vmov.f32	s13, s0
 80183e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80183ec:	ee30 0a66 	vsub.f32	s0, s0, s13
 80183f0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80183f4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80184f8 <__ieee754_rem_pio2f+0x238>
 80183f8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80183fc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8018400:	eef0 7a40 	vmov.f32	s15, s0
 8018404:	ee15 3a90 	vmov	r3, s11
 8018408:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801840c:	1aa4      	subs	r4, r4, r2
 801840e:	2c19      	cmp	r4, #25
 8018410:	dc04      	bgt.n	801841c <__ieee754_rem_pio2f+0x15c>
 8018412:	edc5 5a00 	vstr	s11, [r5]
 8018416:	eeb0 0a66 	vmov.f32	s0, s13
 801841a:	e7c7      	b.n	80183ac <__ieee754_rem_pio2f+0xec>
 801841c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8018508 <__ieee754_rem_pio2f+0x248>
 8018420:	eeb0 0a66 	vmov.f32	s0, s13
 8018424:	eea7 0a25 	vfma.f32	s0, s14, s11
 8018428:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801842c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018430:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801850c <__ieee754_rem_pio2f+0x24c>
 8018434:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8018438:	ee30 7a67 	vsub.f32	s14, s0, s15
 801843c:	ed85 7a00 	vstr	s14, [r5]
 8018440:	e7b4      	b.n	80183ac <__ieee754_rem_pio2f+0xec>
 8018442:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018446:	db06      	blt.n	8018456 <__ieee754_rem_pio2f+0x196>
 8018448:	ee70 7a40 	vsub.f32	s15, s0, s0
 801844c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018450:	edc0 7a00 	vstr	s15, [r0]
 8018454:	e742      	b.n	80182dc <__ieee754_rem_pio2f+0x1c>
 8018456:	15e2      	asrs	r2, r4, #23
 8018458:	3a86      	subs	r2, #134	; 0x86
 801845a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801845e:	ee07 3a90 	vmov	s15, r3
 8018462:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018466:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8018510 <__ieee754_rem_pio2f+0x250>
 801846a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801846e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018472:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018476:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801847a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801847e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018486:	ed8d 7a04 	vstr	s14, [sp, #16]
 801848a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801848e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018496:	edcd 7a05 	vstr	s15, [sp, #20]
 801849a:	d11e      	bne.n	80184da <__ieee754_rem_pio2f+0x21a>
 801849c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80184a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a4:	bf0c      	ite	eq
 80184a6:	2301      	moveq	r3, #1
 80184a8:	2302      	movne	r3, #2
 80184aa:	491a      	ldr	r1, [pc, #104]	; (8018514 <__ieee754_rem_pio2f+0x254>)
 80184ac:	9101      	str	r1, [sp, #4]
 80184ae:	2102      	movs	r1, #2
 80184b0:	9100      	str	r1, [sp, #0]
 80184b2:	a803      	add	r0, sp, #12
 80184b4:	4629      	mov	r1, r5
 80184b6:	f000 f891 	bl	80185dc <__kernel_rem_pio2f>
 80184ba:	2e00      	cmp	r6, #0
 80184bc:	f6bf af31 	bge.w	8018322 <__ieee754_rem_pio2f+0x62>
 80184c0:	edd5 7a00 	vldr	s15, [r5]
 80184c4:	eef1 7a67 	vneg.f32	s15, s15
 80184c8:	edc5 7a00 	vstr	s15, [r5]
 80184cc:	edd5 7a01 	vldr	s15, [r5, #4]
 80184d0:	eef1 7a67 	vneg.f32	s15, s15
 80184d4:	edc5 7a01 	vstr	s15, [r5, #4]
 80184d8:	e77a      	b.n	80183d0 <__ieee754_rem_pio2f+0x110>
 80184da:	2303      	movs	r3, #3
 80184dc:	e7e5      	b.n	80184aa <__ieee754_rem_pio2f+0x1ea>
 80184de:	bf00      	nop
 80184e0:	3f490fd8 	.word	0x3f490fd8
 80184e4:	4016cbe3 	.word	0x4016cbe3
 80184e8:	3fc90f80 	.word	0x3fc90f80
 80184ec:	3fc90fd0 	.word	0x3fc90fd0
 80184f0:	37354400 	.word	0x37354400
 80184f4:	37354443 	.word	0x37354443
 80184f8:	2e85a308 	.word	0x2e85a308
 80184fc:	43490f80 	.word	0x43490f80
 8018500:	3f22f984 	.word	0x3f22f984
 8018504:	0801b430 	.word	0x0801b430
 8018508:	2e85a300 	.word	0x2e85a300
 801850c:	248d3132 	.word	0x248d3132
 8018510:	43800000 	.word	0x43800000
 8018514:	0801b4b0 	.word	0x0801b4b0

08018518 <__ieee754_sqrtf>:
 8018518:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801851c:	4770      	bx	lr
	...

08018520 <__kernel_cosf>:
 8018520:	ee10 3a10 	vmov	r3, s0
 8018524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018528:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801852c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018530:	da05      	bge.n	801853e <__kernel_cosf+0x1e>
 8018532:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018536:	ee17 2a90 	vmov	r2, s15
 801853a:	2a00      	cmp	r2, #0
 801853c:	d03b      	beq.n	80185b6 <__kernel_cosf+0x96>
 801853e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8018542:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018546:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80185bc <__kernel_cosf+0x9c>
 801854a:	4a1d      	ldr	r2, [pc, #116]	; (80185c0 <__kernel_cosf+0xa0>)
 801854c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8018550:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80185c4 <__kernel_cosf+0xa4>
 8018554:	eea6 7a25 	vfma.f32	s14, s12, s11
 8018558:	4293      	cmp	r3, r2
 801855a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80185c8 <__kernel_cosf+0xa8>
 801855e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018562:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80185cc <__kernel_cosf+0xac>
 8018566:	eea5 7a86 	vfma.f32	s14, s11, s12
 801856a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80185d0 <__kernel_cosf+0xb0>
 801856e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018572:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80185d4 <__kernel_cosf+0xb4>
 8018576:	eea5 7a86 	vfma.f32	s14, s11, s12
 801857a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801857e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018582:	eee6 0a07 	vfma.f32	s1, s12, s14
 8018586:	dc04      	bgt.n	8018592 <__kernel_cosf+0x72>
 8018588:	ee77 0ae0 	vsub.f32	s1, s15, s1
 801858c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8018590:	4770      	bx	lr
 8018592:	4a11      	ldr	r2, [pc, #68]	; (80185d8 <__kernel_cosf+0xb8>)
 8018594:	4293      	cmp	r3, r2
 8018596:	bfda      	itte	le
 8018598:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801859c:	ee07 3a10 	vmovle	s14, r3
 80185a0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80185a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80185a8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80185ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80185b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80185b4:	4770      	bx	lr
 80185b6:	eeb0 0a66 	vmov.f32	s0, s13
 80185ba:	4770      	bx	lr
 80185bc:	ad47d74e 	.word	0xad47d74e
 80185c0:	3e999999 	.word	0x3e999999
 80185c4:	310f74f6 	.word	0x310f74f6
 80185c8:	b493f27c 	.word	0xb493f27c
 80185cc:	37d00d01 	.word	0x37d00d01
 80185d0:	bab60b61 	.word	0xbab60b61
 80185d4:	3d2aaaab 	.word	0x3d2aaaab
 80185d8:	3f480000 	.word	0x3f480000

080185dc <__kernel_rem_pio2f>:
 80185dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e0:	ed2d 8b04 	vpush	{d8-d9}
 80185e4:	b0d7      	sub	sp, #348	; 0x15c
 80185e6:	469b      	mov	fp, r3
 80185e8:	460e      	mov	r6, r1
 80185ea:	4bbe      	ldr	r3, [pc, #760]	; (80188e4 <__kernel_rem_pio2f+0x308>)
 80185ec:	9964      	ldr	r1, [sp, #400]	; 0x190
 80185ee:	9002      	str	r0, [sp, #8]
 80185f0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80185f4:	9865      	ldr	r0, [sp, #404]	; 0x194
 80185f6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80185fa:	1ed1      	subs	r1, r2, #3
 80185fc:	2308      	movs	r3, #8
 80185fe:	fb91 f1f3 	sdiv	r1, r1, r3
 8018602:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018606:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 801860a:	1c4c      	adds	r4, r1, #1
 801860c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8018610:	eba1 050a 	sub.w	r5, r1, sl
 8018614:	aa1a      	add	r2, sp, #104	; 0x68
 8018616:	eb09 070a 	add.w	r7, r9, sl
 801861a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801861e:	4696      	mov	lr, r2
 8018620:	2300      	movs	r3, #0
 8018622:	42bb      	cmp	r3, r7
 8018624:	dd0f      	ble.n	8018646 <__kernel_rem_pio2f+0x6a>
 8018626:	af42      	add	r7, sp, #264	; 0x108
 8018628:	2200      	movs	r2, #0
 801862a:	454a      	cmp	r2, r9
 801862c:	dc27      	bgt.n	801867e <__kernel_rem_pio2f+0xa2>
 801862e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8018632:	eb0b 0302 	add.w	r3, fp, r2
 8018636:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801863a:	9d02      	ldr	r5, [sp, #8]
 801863c:	eddf 7aad 	vldr	s15, [pc, #692]	; 80188f4 <__kernel_rem_pio2f+0x318>
 8018640:	f04f 0c00 	mov.w	ip, #0
 8018644:	e015      	b.n	8018672 <__kernel_rem_pio2f+0x96>
 8018646:	42dd      	cmn	r5, r3
 8018648:	bf5d      	ittte	pl
 801864a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801864e:	ee07 2a90 	vmovpl	s15, r2
 8018652:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018656:	eef0 7a47 	vmovmi.f32	s15, s14
 801865a:	ecee 7a01 	vstmia	lr!, {s15}
 801865e:	3301      	adds	r3, #1
 8018660:	e7df      	b.n	8018622 <__kernel_rem_pio2f+0x46>
 8018662:	ecf5 6a01 	vldmia	r5!, {s13}
 8018666:	ed33 7a01 	vldmdb	r3!, {s14}
 801866a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801866e:	f10c 0c01 	add.w	ip, ip, #1
 8018672:	45d4      	cmp	ip, sl
 8018674:	ddf5      	ble.n	8018662 <__kernel_rem_pio2f+0x86>
 8018676:	ece7 7a01 	vstmia	r7!, {s15}
 801867a:	3201      	adds	r2, #1
 801867c:	e7d5      	b.n	801862a <__kernel_rem_pio2f+0x4e>
 801867e:	ab06      	add	r3, sp, #24
 8018680:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8018684:	9304      	str	r3, [sp, #16]
 8018686:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80188f0 <__kernel_rem_pio2f+0x314>
 801868a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80188ec <__kernel_rem_pio2f+0x310>
 801868e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8018692:	9303      	str	r3, [sp, #12]
 8018694:	464d      	mov	r5, r9
 8018696:	ab56      	add	r3, sp, #344	; 0x158
 8018698:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 801869c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80186a0:	3f01      	subs	r7, #1
 80186a2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80186a6:	00bf      	lsls	r7, r7, #2
 80186a8:	ab56      	add	r3, sp, #344	; 0x158
 80186aa:	19da      	adds	r2, r3, r7
 80186ac:	3a4c      	subs	r2, #76	; 0x4c
 80186ae:	2300      	movs	r3, #0
 80186b0:	1ae9      	subs	r1, r5, r3
 80186b2:	2900      	cmp	r1, #0
 80186b4:	dc4c      	bgt.n	8018750 <__kernel_rem_pio2f+0x174>
 80186b6:	4620      	mov	r0, r4
 80186b8:	f000 fb82 	bl	8018dc0 <scalbnf>
 80186bc:	eeb0 8a40 	vmov.f32	s16, s0
 80186c0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80186c4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80186c8:	f000 fb38 	bl	8018d3c <floorf>
 80186cc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80186d0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80186d4:	2c00      	cmp	r4, #0
 80186d6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80186da:	edcd 7a01 	vstr	s15, [sp, #4]
 80186de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80186e6:	dd48      	ble.n	801877a <__kernel_rem_pio2f+0x19e>
 80186e8:	1e69      	subs	r1, r5, #1
 80186ea:	ab06      	add	r3, sp, #24
 80186ec:	f1c4 0008 	rsb	r0, r4, #8
 80186f0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80186f4:	9a01      	ldr	r2, [sp, #4]
 80186f6:	fa4c f300 	asr.w	r3, ip, r0
 80186fa:	441a      	add	r2, r3
 80186fc:	4083      	lsls	r3, r0
 80186fe:	9201      	str	r2, [sp, #4]
 8018700:	ebac 0203 	sub.w	r2, ip, r3
 8018704:	ab06      	add	r3, sp, #24
 8018706:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801870a:	f1c4 0307 	rsb	r3, r4, #7
 801870e:	fa42 f803 	asr.w	r8, r2, r3
 8018712:	f1b8 0f00 	cmp.w	r8, #0
 8018716:	dd41      	ble.n	801879c <__kernel_rem_pio2f+0x1c0>
 8018718:	9b01      	ldr	r3, [sp, #4]
 801871a:	2000      	movs	r0, #0
 801871c:	3301      	adds	r3, #1
 801871e:	9301      	str	r3, [sp, #4]
 8018720:	4601      	mov	r1, r0
 8018722:	4285      	cmp	r5, r0
 8018724:	dc6d      	bgt.n	8018802 <__kernel_rem_pio2f+0x226>
 8018726:	2c00      	cmp	r4, #0
 8018728:	dd04      	ble.n	8018734 <__kernel_rem_pio2f+0x158>
 801872a:	2c01      	cmp	r4, #1
 801872c:	d07e      	beq.n	801882c <__kernel_rem_pio2f+0x250>
 801872e:	2c02      	cmp	r4, #2
 8018730:	f000 8086 	beq.w	8018840 <__kernel_rem_pio2f+0x264>
 8018734:	f1b8 0f02 	cmp.w	r8, #2
 8018738:	d130      	bne.n	801879c <__kernel_rem_pio2f+0x1c0>
 801873a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801873e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018742:	b359      	cbz	r1, 801879c <__kernel_rem_pio2f+0x1c0>
 8018744:	4620      	mov	r0, r4
 8018746:	f000 fb3b 	bl	8018dc0 <scalbnf>
 801874a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801874e:	e025      	b.n	801879c <__kernel_rem_pio2f+0x1c0>
 8018750:	ee60 7a28 	vmul.f32	s15, s0, s17
 8018754:	a806      	add	r0, sp, #24
 8018756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801875a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801875e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018762:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018766:	ee10 1a10 	vmov	r1, s0
 801876a:	ed32 0a01 	vldmdb	r2!, {s0}
 801876e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8018772:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018776:	3301      	adds	r3, #1
 8018778:	e79a      	b.n	80186b0 <__kernel_rem_pio2f+0xd4>
 801877a:	d106      	bne.n	801878a <__kernel_rem_pio2f+0x1ae>
 801877c:	1e6b      	subs	r3, r5, #1
 801877e:	aa06      	add	r2, sp, #24
 8018780:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018784:	ea4f 2822 	mov.w	r8, r2, asr #8
 8018788:	e7c3      	b.n	8018712 <__kernel_rem_pio2f+0x136>
 801878a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801878e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018796:	da31      	bge.n	80187fc <__kernel_rem_pio2f+0x220>
 8018798:	f04f 0800 	mov.w	r8, #0
 801879c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80187a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a4:	f040 80a8 	bne.w	80188f8 <__kernel_rem_pio2f+0x31c>
 80187a8:	1e6b      	subs	r3, r5, #1
 80187aa:	4618      	mov	r0, r3
 80187ac:	2200      	movs	r2, #0
 80187ae:	4548      	cmp	r0, r9
 80187b0:	da4d      	bge.n	801884e <__kernel_rem_pio2f+0x272>
 80187b2:	2a00      	cmp	r2, #0
 80187b4:	f000 8087 	beq.w	80188c6 <__kernel_rem_pio2f+0x2ea>
 80187b8:	aa06      	add	r2, sp, #24
 80187ba:	3c08      	subs	r4, #8
 80187bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80187c0:	2900      	cmp	r1, #0
 80187c2:	f000 808d 	beq.w	80188e0 <__kernel_rem_pio2f+0x304>
 80187c6:	4620      	mov	r0, r4
 80187c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80187cc:	9302      	str	r3, [sp, #8]
 80187ce:	f000 faf7 	bl	8018dc0 <scalbnf>
 80187d2:	9b02      	ldr	r3, [sp, #8]
 80187d4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80188f0 <__kernel_rem_pio2f+0x314>
 80187d8:	0099      	lsls	r1, r3, #2
 80187da:	aa42      	add	r2, sp, #264	; 0x108
 80187dc:	1850      	adds	r0, r2, r1
 80187de:	1d05      	adds	r5, r0, #4
 80187e0:	461c      	mov	r4, r3
 80187e2:	2c00      	cmp	r4, #0
 80187e4:	f280 80b8 	bge.w	8018958 <__kernel_rem_pio2f+0x37c>
 80187e8:	2500      	movs	r5, #0
 80187ea:	1b5c      	subs	r4, r3, r5
 80187ec:	2c00      	cmp	r4, #0
 80187ee:	f2c0 80d8 	blt.w	80189a2 <__kernel_rem_pio2f+0x3c6>
 80187f2:	4f3d      	ldr	r7, [pc, #244]	; (80188e8 <__kernel_rem_pio2f+0x30c>)
 80187f4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80187f8:	2400      	movs	r4, #0
 80187fa:	e0c6      	b.n	801898a <__kernel_rem_pio2f+0x3ae>
 80187fc:	f04f 0802 	mov.w	r8, #2
 8018800:	e78a      	b.n	8018718 <__kernel_rem_pio2f+0x13c>
 8018802:	ab06      	add	r3, sp, #24
 8018804:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018808:	b949      	cbnz	r1, 801881e <__kernel_rem_pio2f+0x242>
 801880a:	b12b      	cbz	r3, 8018818 <__kernel_rem_pio2f+0x23c>
 801880c:	aa06      	add	r2, sp, #24
 801880e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018812:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8018816:	2301      	movs	r3, #1
 8018818:	3001      	adds	r0, #1
 801881a:	4619      	mov	r1, r3
 801881c:	e781      	b.n	8018722 <__kernel_rem_pio2f+0x146>
 801881e:	aa06      	add	r2, sp, #24
 8018820:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8018824:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8018828:	460b      	mov	r3, r1
 801882a:	e7f5      	b.n	8018818 <__kernel_rem_pio2f+0x23c>
 801882c:	1e68      	subs	r0, r5, #1
 801882e:	ab06      	add	r3, sp, #24
 8018830:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018838:	aa06      	add	r2, sp, #24
 801883a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801883e:	e779      	b.n	8018734 <__kernel_rem_pio2f+0x158>
 8018840:	1e68      	subs	r0, r5, #1
 8018842:	ab06      	add	r3, sp, #24
 8018844:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801884c:	e7f4      	b.n	8018838 <__kernel_rem_pio2f+0x25c>
 801884e:	a906      	add	r1, sp, #24
 8018850:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018854:	3801      	subs	r0, #1
 8018856:	430a      	orrs	r2, r1
 8018858:	e7a9      	b.n	80187ae <__kernel_rem_pio2f+0x1d2>
 801885a:	f10c 0c01 	add.w	ip, ip, #1
 801885e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018862:	2a00      	cmp	r2, #0
 8018864:	d0f9      	beq.n	801885a <__kernel_rem_pio2f+0x27e>
 8018866:	eb0b 0305 	add.w	r3, fp, r5
 801886a:	aa1a      	add	r2, sp, #104	; 0x68
 801886c:	009b      	lsls	r3, r3, #2
 801886e:	1898      	adds	r0, r3, r2
 8018870:	3004      	adds	r0, #4
 8018872:	1c69      	adds	r1, r5, #1
 8018874:	3704      	adds	r7, #4
 8018876:	2200      	movs	r2, #0
 8018878:	4465      	add	r5, ip
 801887a:	9005      	str	r0, [sp, #20]
 801887c:	428d      	cmp	r5, r1
 801887e:	f6ff af0a 	blt.w	8018696 <__kernel_rem_pio2f+0xba>
 8018882:	a81a      	add	r0, sp, #104	; 0x68
 8018884:	eb02 0c03 	add.w	ip, r2, r3
 8018888:	4484      	add	ip, r0
 801888a:	9803      	ldr	r0, [sp, #12]
 801888c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8018890:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8018894:	9001      	str	r0, [sp, #4]
 8018896:	ee07 0a90 	vmov	s15, r0
 801889a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801889e:	9805      	ldr	r0, [sp, #20]
 80188a0:	edcc 7a00 	vstr	s15, [ip]
 80188a4:	eddf 7a13 	vldr	s15, [pc, #76]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80188a8:	eb00 0802 	add.w	r8, r0, r2
 80188ac:	f04f 0c00 	mov.w	ip, #0
 80188b0:	45d4      	cmp	ip, sl
 80188b2:	dd0c      	ble.n	80188ce <__kernel_rem_pio2f+0x2f2>
 80188b4:	eb02 0c07 	add.w	ip, r2, r7
 80188b8:	a842      	add	r0, sp, #264	; 0x108
 80188ba:	4484      	add	ip, r0
 80188bc:	edcc 7a01 	vstr	s15, [ip, #4]
 80188c0:	3101      	adds	r1, #1
 80188c2:	3204      	adds	r2, #4
 80188c4:	e7da      	b.n	801887c <__kernel_rem_pio2f+0x2a0>
 80188c6:	9b04      	ldr	r3, [sp, #16]
 80188c8:	f04f 0c01 	mov.w	ip, #1
 80188cc:	e7c7      	b.n	801885e <__kernel_rem_pio2f+0x282>
 80188ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80188d2:	ed38 7a01 	vldmdb	r8!, {s14}
 80188d6:	f10c 0c01 	add.w	ip, ip, #1
 80188da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80188de:	e7e7      	b.n	80188b0 <__kernel_rem_pio2f+0x2d4>
 80188e0:	3b01      	subs	r3, #1
 80188e2:	e769      	b.n	80187b8 <__kernel_rem_pio2f+0x1dc>
 80188e4:	0801b7f4 	.word	0x0801b7f4
 80188e8:	0801b7c8 	.word	0x0801b7c8
 80188ec:	43800000 	.word	0x43800000
 80188f0:	3b800000 	.word	0x3b800000
 80188f4:	00000000 	.word	0x00000000
 80188f8:	4260      	negs	r0, r4
 80188fa:	eeb0 0a48 	vmov.f32	s0, s16
 80188fe:	f000 fa5f 	bl	8018dc0 <scalbnf>
 8018902:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80188ec <__kernel_rem_pio2f+0x310>
 8018906:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890e:	db1a      	blt.n	8018946 <__kernel_rem_pio2f+0x36a>
 8018910:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80188f0 <__kernel_rem_pio2f+0x314>
 8018914:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018918:	aa06      	add	r2, sp, #24
 801891a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801891e:	a906      	add	r1, sp, #24
 8018920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018924:	3408      	adds	r4, #8
 8018926:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801892a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801892e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018932:	ee10 3a10 	vmov	r3, s0
 8018936:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801893a:	1c6b      	adds	r3, r5, #1
 801893c:	ee17 2a90 	vmov	r2, s15
 8018940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018944:	e73f      	b.n	80187c6 <__kernel_rem_pio2f+0x1ea>
 8018946:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801894a:	aa06      	add	r2, sp, #24
 801894c:	ee10 3a10 	vmov	r3, s0
 8018950:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8018954:	462b      	mov	r3, r5
 8018956:	e736      	b.n	80187c6 <__kernel_rem_pio2f+0x1ea>
 8018958:	aa06      	add	r2, sp, #24
 801895a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801895e:	9202      	str	r2, [sp, #8]
 8018960:	ee07 2a90 	vmov	s15, r2
 8018964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018968:	3c01      	subs	r4, #1
 801896a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801896e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018972:	ed65 7a01 	vstmdb	r5!, {s15}
 8018976:	e734      	b.n	80187e2 <__kernel_rem_pio2f+0x206>
 8018978:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801897c:	ecf7 6a01 	vldmia	r7!, {s13}
 8018980:	ed9c 7a00 	vldr	s14, [ip]
 8018984:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018988:	3401      	adds	r4, #1
 801898a:	454c      	cmp	r4, r9
 801898c:	dc01      	bgt.n	8018992 <__kernel_rem_pio2f+0x3b6>
 801898e:	42a5      	cmp	r5, r4
 8018990:	daf2      	bge.n	8018978 <__kernel_rem_pio2f+0x39c>
 8018992:	aa56      	add	r2, sp, #344	; 0x158
 8018994:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8018998:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 801899c:	3501      	adds	r5, #1
 801899e:	3804      	subs	r0, #4
 80189a0:	e723      	b.n	80187ea <__kernel_rem_pio2f+0x20e>
 80189a2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80189a4:	2a03      	cmp	r2, #3
 80189a6:	d84d      	bhi.n	8018a44 <__kernel_rem_pio2f+0x468>
 80189a8:	e8df f002 	tbb	[pc, r2]
 80189ac:	021f1f3e 	.word	0x021f1f3e
 80189b0:	aa56      	add	r2, sp, #344	; 0x158
 80189b2:	4411      	add	r1, r2
 80189b4:	399c      	subs	r1, #156	; 0x9c
 80189b6:	4608      	mov	r0, r1
 80189b8:	461c      	mov	r4, r3
 80189ba:	2c00      	cmp	r4, #0
 80189bc:	dc5f      	bgt.n	8018a7e <__kernel_rem_pio2f+0x4a2>
 80189be:	4608      	mov	r0, r1
 80189c0:	461c      	mov	r4, r3
 80189c2:	2c01      	cmp	r4, #1
 80189c4:	dc6b      	bgt.n	8018a9e <__kernel_rem_pio2f+0x4c2>
 80189c6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80189ca:	2b01      	cmp	r3, #1
 80189cc:	dc77      	bgt.n	8018abe <__kernel_rem_pio2f+0x4e2>
 80189ce:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80189d2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80189d6:	f1b8 0f00 	cmp.w	r8, #0
 80189da:	d176      	bne.n	8018aca <__kernel_rem_pio2f+0x4ee>
 80189dc:	edc6 6a00 	vstr	s13, [r6]
 80189e0:	ed86 7a01 	vstr	s14, [r6, #4]
 80189e4:	edc6 7a02 	vstr	s15, [r6, #8]
 80189e8:	e02c      	b.n	8018a44 <__kernel_rem_pio2f+0x468>
 80189ea:	aa56      	add	r2, sp, #344	; 0x158
 80189ec:	4411      	add	r1, r2
 80189ee:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80189f2:	399c      	subs	r1, #156	; 0x9c
 80189f4:	4618      	mov	r0, r3
 80189f6:	2800      	cmp	r0, #0
 80189f8:	da32      	bge.n	8018a60 <__kernel_rem_pio2f+0x484>
 80189fa:	f1b8 0f00 	cmp.w	r8, #0
 80189fe:	d035      	beq.n	8018a6c <__kernel_rem_pio2f+0x490>
 8018a00:	eef1 7a47 	vneg.f32	s15, s14
 8018a04:	edc6 7a00 	vstr	s15, [r6]
 8018a08:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8018a0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a10:	a82f      	add	r0, sp, #188	; 0xbc
 8018a12:	2101      	movs	r1, #1
 8018a14:	428b      	cmp	r3, r1
 8018a16:	da2c      	bge.n	8018a72 <__kernel_rem_pio2f+0x496>
 8018a18:	f1b8 0f00 	cmp.w	r8, #0
 8018a1c:	d001      	beq.n	8018a22 <__kernel_rem_pio2f+0x446>
 8018a1e:	eef1 7a67 	vneg.f32	s15, s15
 8018a22:	edc6 7a01 	vstr	s15, [r6, #4]
 8018a26:	e00d      	b.n	8018a44 <__kernel_rem_pio2f+0x468>
 8018a28:	aa56      	add	r2, sp, #344	; 0x158
 8018a2a:	4411      	add	r1, r2
 8018a2c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80188f4 <__kernel_rem_pio2f+0x318>
 8018a30:	399c      	subs	r1, #156	; 0x9c
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	da0e      	bge.n	8018a54 <__kernel_rem_pio2f+0x478>
 8018a36:	f1b8 0f00 	cmp.w	r8, #0
 8018a3a:	d001      	beq.n	8018a40 <__kernel_rem_pio2f+0x464>
 8018a3c:	eef1 7a67 	vneg.f32	s15, s15
 8018a40:	edc6 7a00 	vstr	s15, [r6]
 8018a44:	9b01      	ldr	r3, [sp, #4]
 8018a46:	f003 0007 	and.w	r0, r3, #7
 8018a4a:	b057      	add	sp, #348	; 0x15c
 8018a4c:	ecbd 8b04 	vpop	{d8-d9}
 8018a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a54:	ed31 7a01 	vldmdb	r1!, {s14}
 8018a58:	3b01      	subs	r3, #1
 8018a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a5e:	e7e8      	b.n	8018a32 <__kernel_rem_pio2f+0x456>
 8018a60:	ed71 7a01 	vldmdb	r1!, {s15}
 8018a64:	3801      	subs	r0, #1
 8018a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a6a:	e7c4      	b.n	80189f6 <__kernel_rem_pio2f+0x41a>
 8018a6c:	eef0 7a47 	vmov.f32	s15, s14
 8018a70:	e7c8      	b.n	8018a04 <__kernel_rem_pio2f+0x428>
 8018a72:	ecb0 7a01 	vldmia	r0!, {s14}
 8018a76:	3101      	adds	r1, #1
 8018a78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a7c:	e7ca      	b.n	8018a14 <__kernel_rem_pio2f+0x438>
 8018a7e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8018a82:	ed70 6a01 	vldmdb	r0!, {s13}
 8018a86:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018a8a:	3c01      	subs	r4, #1
 8018a8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a90:	ed00 7a01 	vstr	s14, [r0, #-4]
 8018a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a98:	edc0 7a00 	vstr	s15, [r0]
 8018a9c:	e78d      	b.n	80189ba <__kernel_rem_pio2f+0x3de>
 8018a9e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8018aa2:	ed70 6a01 	vldmdb	r0!, {s13}
 8018aa6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018aaa:	3c01      	subs	r4, #1
 8018aac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ab0:	ed00 7a01 	vstr	s14, [r0, #-4]
 8018ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ab8:	edc0 7a00 	vstr	s15, [r0]
 8018abc:	e781      	b.n	80189c2 <__kernel_rem_pio2f+0x3e6>
 8018abe:	ed31 7a01 	vldmdb	r1!, {s14}
 8018ac2:	3b01      	subs	r3, #1
 8018ac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ac8:	e77f      	b.n	80189ca <__kernel_rem_pio2f+0x3ee>
 8018aca:	eef1 6a66 	vneg.f32	s13, s13
 8018ace:	eeb1 7a47 	vneg.f32	s14, s14
 8018ad2:	edc6 6a00 	vstr	s13, [r6]
 8018ad6:	ed86 7a01 	vstr	s14, [r6, #4]
 8018ada:	eef1 7a67 	vneg.f32	s15, s15
 8018ade:	e781      	b.n	80189e4 <__kernel_rem_pio2f+0x408>

08018ae0 <__kernel_sinf>:
 8018ae0:	ee10 3a10 	vmov	r3, s0
 8018ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ae8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8018aec:	da04      	bge.n	8018af8 <__kernel_sinf+0x18>
 8018aee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018af2:	ee17 3a90 	vmov	r3, s15
 8018af6:	b35b      	cbz	r3, 8018b50 <__kernel_sinf+0x70>
 8018af8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018afc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018b54 <__kernel_sinf+0x74>
 8018b00:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8018b58 <__kernel_sinf+0x78>
 8018b04:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b08:	eddf 7a14 	vldr	s15, [pc, #80]	; 8018b5c <__kernel_sinf+0x7c>
 8018b0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018b10:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8018b60 <__kernel_sinf+0x80>
 8018b14:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018b18:	eddf 7a12 	vldr	s15, [pc, #72]	; 8018b64 <__kernel_sinf+0x84>
 8018b1c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018b20:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018b24:	b930      	cbnz	r0, 8018b34 <__kernel_sinf+0x54>
 8018b26:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8018b68 <__kernel_sinf+0x88>
 8018b2a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b2e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8018b32:	4770      	bx	lr
 8018b34:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018b38:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018b3c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018b40:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018b44:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018b6c <__kernel_sinf+0x8c>
 8018b48:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018b4c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018b50:	4770      	bx	lr
 8018b52:	bf00      	nop
 8018b54:	2f2ec9d3 	.word	0x2f2ec9d3
 8018b58:	b2d72f34 	.word	0xb2d72f34
 8018b5c:	3638ef1b 	.word	0x3638ef1b
 8018b60:	b9500d01 	.word	0xb9500d01
 8018b64:	3c088889 	.word	0x3c088889
 8018b68:	be2aaaab 	.word	0xbe2aaaab
 8018b6c:	3e2aaaab 	.word	0x3e2aaaab

08018b70 <__kernel_tanf>:
 8018b70:	b508      	push	{r3, lr}
 8018b72:	ee10 3a10 	vmov	r3, s0
 8018b76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018b7a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8018b7e:	eef0 7a40 	vmov.f32	s15, s0
 8018b82:	da17      	bge.n	8018bb4 <__kernel_tanf+0x44>
 8018b84:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8018b88:	ee17 1a10 	vmov	r1, s14
 8018b8c:	bb41      	cbnz	r1, 8018be0 <__kernel_tanf+0x70>
 8018b8e:	1c43      	adds	r3, r0, #1
 8018b90:	4313      	orrs	r3, r2
 8018b92:	d108      	bne.n	8018ba6 <__kernel_tanf+0x36>
 8018b94:	f7ff fa22 	bl	8017fdc <fabsf>
 8018b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018b9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8018ba4:	bd08      	pop	{r3, pc}
 8018ba6:	2801      	cmp	r0, #1
 8018ba8:	d0fa      	beq.n	8018ba0 <__kernel_tanf+0x30>
 8018baa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018bae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018bb2:	e7f5      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018bb4:	494e      	ldr	r1, [pc, #312]	; (8018cf0 <__kernel_tanf+0x180>)
 8018bb6:	428a      	cmp	r2, r1
 8018bb8:	dd12      	ble.n	8018be0 <__kernel_tanf+0x70>
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8018cf4 <__kernel_tanf+0x184>
 8018bc0:	bfb8      	it	lt
 8018bc2:	eef1 7a40 	vneglt.f32	s15, s0
 8018bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018bca:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018cf8 <__kernel_tanf+0x188>
 8018bce:	bfb8      	it	lt
 8018bd0:	eef1 0a60 	vneglt.f32	s1, s1
 8018bd4:	ee77 0a60 	vsub.f32	s1, s14, s1
 8018bd8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8018bdc:	eddf 0a47 	vldr	s1, [pc, #284]	; 8018cfc <__kernel_tanf+0x18c>
 8018be0:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8018d00 <__kernel_tanf+0x190>
 8018be4:	eddf 5a47 	vldr	s11, [pc, #284]	; 8018d04 <__kernel_tanf+0x194>
 8018be8:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8018d08 <__kernel_tanf+0x198>
 8018bec:	4940      	ldr	r1, [pc, #256]	; (8018cf0 <__kernel_tanf+0x180>)
 8018bee:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8018bf2:	428a      	cmp	r2, r1
 8018bf4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018bf8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8018bfc:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018c00:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8018d0c <__kernel_tanf+0x19c>
 8018c04:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018c08:	eddf 5a41 	vldr	s11, [pc, #260]	; 8018d10 <__kernel_tanf+0x1a0>
 8018c0c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018c10:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8018d14 <__kernel_tanf+0x1a4>
 8018c14:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018c18:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8018d18 <__kernel_tanf+0x1a8>
 8018c1c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018c20:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8018d1c <__kernel_tanf+0x1ac>
 8018c24:	eea7 6a05 	vfma.f32	s12, s14, s10
 8018c28:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8018d20 <__kernel_tanf+0x1b0>
 8018c2c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8018c30:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8018d24 <__kernel_tanf+0x1b4>
 8018c34:	eea5 6a07 	vfma.f32	s12, s10, s14
 8018c38:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8018d28 <__kernel_tanf+0x1b8>
 8018c3c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8018c40:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8018d2c <__kernel_tanf+0x1bc>
 8018c44:	eea5 6a07 	vfma.f32	s12, s10, s14
 8018c48:	eeb0 7a46 	vmov.f32	s14, s12
 8018c4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018c50:	eeb0 6a60 	vmov.f32	s12, s1
 8018c54:	eea7 6a24 	vfma.f32	s12, s14, s9
 8018c58:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8018d30 <__kernel_tanf+0x1c0>
 8018c5c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8018c60:	eee4 0a87 	vfma.f32	s1, s9, s14
 8018c64:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8018c68:	dd1d      	ble.n	8018ca6 <__kernel_tanf+0x136>
 8018c6a:	ee07 0a10 	vmov	s14, r0
 8018c6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c72:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8018c76:	ee76 6a87 	vadd.f32	s13, s13, s14
 8018c7a:	179b      	asrs	r3, r3, #30
 8018c7c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8018c80:	f003 0302 	and.w	r3, r3, #2
 8018c84:	f1c3 0301 	rsb	r3, r3, #1
 8018c88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018c8c:	ee76 0a60 	vsub.f32	s1, s12, s1
 8018c90:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018c94:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018c98:	ee07 3a90 	vmov	s15, r3
 8018c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ca4:	e77c      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018ca6:	2801      	cmp	r0, #1
 8018ca8:	d01f      	beq.n	8018cea <__kernel_tanf+0x17a>
 8018caa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018cae:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8018cb2:	4b20      	ldr	r3, [pc, #128]	; (8018d34 <__kernel_tanf+0x1c4>)
 8018cb4:	ee16 2a90 	vmov	r2, s13
 8018cb8:	401a      	ands	r2, r3
 8018cba:	ee06 2a10 	vmov	s12, r2
 8018cbe:	ee15 2a90 	vmov	r2, s11
 8018cc2:	4013      	ands	r3, r2
 8018cc4:	ee07 3a10 	vmov	s14, r3
 8018cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018ccc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018cd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8018cd4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018cd8:	eef0 7a66 	vmov.f32	s15, s13
 8018cdc:	eee7 7a20 	vfma.f32	s15, s14, s1
 8018ce0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8018ce4:	eef0 7a47 	vmov.f32	s15, s14
 8018ce8:	e75a      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018cea:	eef0 7a66 	vmov.f32	s15, s13
 8018cee:	e757      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018cf0:	3f2ca13f 	.word	0x3f2ca13f
 8018cf4:	3f490fda 	.word	0x3f490fda
 8018cf8:	33222168 	.word	0x33222168
 8018cfc:	00000000 	.word	0x00000000
 8018d00:	37d95384 	.word	0x37d95384
 8018d04:	3895c07a 	.word	0x3895c07a
 8018d08:	b79bae5f 	.word	0xb79bae5f
 8018d0c:	398137b9 	.word	0x398137b9
 8018d10:	3abede48 	.word	0x3abede48
 8018d14:	3c11371f 	.word	0x3c11371f
 8018d18:	3d5d0dd1 	.word	0x3d5d0dd1
 8018d1c:	38a3f445 	.word	0x38a3f445
 8018d20:	3a1a26c8 	.word	0x3a1a26c8
 8018d24:	3b6b6916 	.word	0x3b6b6916
 8018d28:	3cb327a4 	.word	0x3cb327a4
 8018d2c:	3e088889 	.word	0x3e088889
 8018d30:	3eaaaaab 	.word	0x3eaaaaab
 8018d34:	fffff000 	.word	0xfffff000

08018d38 <matherr>:
 8018d38:	2000      	movs	r0, #0
 8018d3a:	4770      	bx	lr

08018d3c <floorf>:
 8018d3c:	ee10 3a10 	vmov	r3, s0
 8018d40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018d44:	0dca      	lsrs	r2, r1, #23
 8018d46:	3a7f      	subs	r2, #127	; 0x7f
 8018d48:	2a16      	cmp	r2, #22
 8018d4a:	dc2a      	bgt.n	8018da2 <floorf+0x66>
 8018d4c:	2a00      	cmp	r2, #0
 8018d4e:	da11      	bge.n	8018d74 <floorf+0x38>
 8018d50:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018db4 <floorf+0x78>
 8018d54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018d58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d60:	dd05      	ble.n	8018d6e <floorf+0x32>
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	da23      	bge.n	8018dae <floorf+0x72>
 8018d66:	4a14      	ldr	r2, [pc, #80]	; (8018db8 <floorf+0x7c>)
 8018d68:	2900      	cmp	r1, #0
 8018d6a:	bf18      	it	ne
 8018d6c:	4613      	movne	r3, r2
 8018d6e:	ee00 3a10 	vmov	s0, r3
 8018d72:	4770      	bx	lr
 8018d74:	4911      	ldr	r1, [pc, #68]	; (8018dbc <floorf+0x80>)
 8018d76:	4111      	asrs	r1, r2
 8018d78:	420b      	tst	r3, r1
 8018d7a:	d0fa      	beq.n	8018d72 <floorf+0x36>
 8018d7c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018db4 <floorf+0x78>
 8018d80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018d84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8c:	ddef      	ble.n	8018d6e <floorf+0x32>
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	bfbe      	ittt	lt
 8018d92:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8018d96:	fa40 f202 	asrlt.w	r2, r0, r2
 8018d9a:	189b      	addlt	r3, r3, r2
 8018d9c:	ea23 0301 	bic.w	r3, r3, r1
 8018da0:	e7e5      	b.n	8018d6e <floorf+0x32>
 8018da2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018da6:	d3e4      	bcc.n	8018d72 <floorf+0x36>
 8018da8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018dac:	4770      	bx	lr
 8018dae:	2300      	movs	r3, #0
 8018db0:	e7dd      	b.n	8018d6e <floorf+0x32>
 8018db2:	bf00      	nop
 8018db4:	7149f2ca 	.word	0x7149f2ca
 8018db8:	bf800000 	.word	0xbf800000
 8018dbc:	007fffff 	.word	0x007fffff

08018dc0 <scalbnf>:
 8018dc0:	b508      	push	{r3, lr}
 8018dc2:	ee10 2a10 	vmov	r2, s0
 8018dc6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8018dca:	ed2d 8b02 	vpush	{d8}
 8018dce:	eef0 0a40 	vmov.f32	s1, s0
 8018dd2:	d004      	beq.n	8018dde <scalbnf+0x1e>
 8018dd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018dd8:	d306      	bcc.n	8018de8 <scalbnf+0x28>
 8018dda:	ee70 0a00 	vadd.f32	s1, s0, s0
 8018dde:	ecbd 8b02 	vpop	{d8}
 8018de2:	eeb0 0a60 	vmov.f32	s0, s1
 8018de6:	bd08      	pop	{r3, pc}
 8018de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018dec:	d21c      	bcs.n	8018e28 <scalbnf+0x68>
 8018dee:	4b1f      	ldr	r3, [pc, #124]	; (8018e6c <scalbnf+0xac>)
 8018df0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018e70 <scalbnf+0xb0>
 8018df4:	4298      	cmp	r0, r3
 8018df6:	ee60 0a27 	vmul.f32	s1, s0, s15
 8018dfa:	db10      	blt.n	8018e1e <scalbnf+0x5e>
 8018dfc:	ee10 2a90 	vmov	r2, s1
 8018e00:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8018e04:	3b19      	subs	r3, #25
 8018e06:	4403      	add	r3, r0
 8018e08:	2bfe      	cmp	r3, #254	; 0xfe
 8018e0a:	dd0f      	ble.n	8018e2c <scalbnf+0x6c>
 8018e0c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8018e74 <scalbnf+0xb4>
 8018e10:	eeb0 0a48 	vmov.f32	s0, s16
 8018e14:	f000 f834 	bl	8018e80 <copysignf>
 8018e18:	ee60 0a08 	vmul.f32	s1, s0, s16
 8018e1c:	e7df      	b.n	8018dde <scalbnf+0x1e>
 8018e1e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8018e78 <scalbnf+0xb8>
 8018e22:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8018e26:	e7da      	b.n	8018dde <scalbnf+0x1e>
 8018e28:	0ddb      	lsrs	r3, r3, #23
 8018e2a:	e7ec      	b.n	8018e06 <scalbnf+0x46>
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	dd06      	ble.n	8018e3e <scalbnf+0x7e>
 8018e30:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8018e34:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018e38:	ee00 3a90 	vmov	s1, r3
 8018e3c:	e7cf      	b.n	8018dde <scalbnf+0x1e>
 8018e3e:	f113 0f16 	cmn.w	r3, #22
 8018e42:	da06      	bge.n	8018e52 <scalbnf+0x92>
 8018e44:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018e48:	4298      	cmp	r0, r3
 8018e4a:	dcdf      	bgt.n	8018e0c <scalbnf+0x4c>
 8018e4c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8018e78 <scalbnf+0xb8>
 8018e50:	e7de      	b.n	8018e10 <scalbnf+0x50>
 8018e52:	3319      	adds	r3, #25
 8018e54:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8018e58:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018e5c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018e7c <scalbnf+0xbc>
 8018e60:	ee07 3a10 	vmov	s14, r3
 8018e64:	ee67 0a27 	vmul.f32	s1, s14, s15
 8018e68:	e7b9      	b.n	8018dde <scalbnf+0x1e>
 8018e6a:	bf00      	nop
 8018e6c:	ffff3cb0 	.word	0xffff3cb0
 8018e70:	4c000000 	.word	0x4c000000
 8018e74:	7149f2ca 	.word	0x7149f2ca
 8018e78:	0da24260 	.word	0x0da24260
 8018e7c:	33000000 	.word	0x33000000

08018e80 <copysignf>:
 8018e80:	ee10 3a10 	vmov	r3, s0
 8018e84:	ee10 2a90 	vmov	r2, s1
 8018e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e8c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8018e90:	4313      	orrs	r3, r2
 8018e92:	ee00 3a10 	vmov	s0, r3
 8018e96:	4770      	bx	lr

08018e98 <__errno>:
 8018e98:	4b01      	ldr	r3, [pc, #4]	; (8018ea0 <__errno+0x8>)
 8018e9a:	6818      	ldr	r0, [r3, #0]
 8018e9c:	4770      	bx	lr
 8018e9e:	bf00      	nop
 8018ea0:	2000018c 	.word	0x2000018c

08018ea4 <_init>:
 8018ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ea6:	bf00      	nop
 8018ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eaa:	bc08      	pop	{r3}
 8018eac:	469e      	mov	lr, r3
 8018eae:	4770      	bx	lr

08018eb0 <_fini>:
 8018eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb2:	bf00      	nop
 8018eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eb6:	bc08      	pop	{r3}
 8018eb8:	469e      	mov	lr, r3
 8018eba:	4770      	bx	lr
