
CDFR release 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000239c  0801489c  0801489c  0002489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c38  08016c38  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016c38  08016c38  00026c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c40  08016c40  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c40  08016c40  00026c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c44  08016c44  00026c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08016c48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000082b8  200001ec  08016e34  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200084a4  08016e34  000384a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c408  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007625  00000000  00000000  0006c624  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002100  00000000  00000000  00073c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ea8  00000000  00000000  00075d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f457  00000000  00000000  00077bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a658  00000000  00000000  0008704f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f527a  00000000  00000000  000b16a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a6921  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dd4  00000000  00000000  001a699c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014884 	.word	0x08014884

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08014884 	.word	0x08014884

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f94d 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f012 f934 	bl	8012830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f965 	bl	80008c2 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000610:	f000 f92d 	bl	800086e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000124 	.word	0x20000124
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000394 	.word	0x20000394

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000394 	.word	0x20000394

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db0b      	blt.n	8000746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 021f 	and.w	r2, r3, #31
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <__NVIC_EnableIRQ+0x38>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000838:	f7ff ff8e 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff29 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff3e 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff8e 	bl	80007ac <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff5d 	bl	8000758 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff31 	bl	800071c <__NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80008ec:	4baa      	ldr	r3, [pc, #680]	; (8000b98 <HAL_ETH_Init+0x2bc>)
 80008ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e185      	b.n	8000c0e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d106      	bne.n	800091c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f011 fa0a 	bl	8011d30 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b9e      	ldr	r3, [pc, #632]	; (8000b9c <HAL_ETH_Init+0x2c0>)
 8000922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000924:	4a9d      	ldr	r2, [pc, #628]	; (8000b9c <HAL_ETH_Init+0x2c0>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6453      	str	r3, [r2, #68]	; 0x44
 800092c:	4b9b      	ldr	r3, [pc, #620]	; (8000b9c <HAL_ETH_Init+0x2c0>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000938:	4b99      	ldr	r3, [pc, #612]	; (8000ba0 <HAL_ETH_Init+0x2c4>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4a98      	ldr	r2, [pc, #608]	; (8000ba0 <HAL_ETH_Init+0x2c4>)
 800093e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000942:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000944:	4b96      	ldr	r3, [pc, #600]	; (8000ba0 <HAL_ETH_Init+0x2c4>)
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	4994      	ldr	r1, [pc, #592]	; (8000ba0 <HAL_ETH_Init+0x2c4>)
 800094e:	4313      	orrs	r3, r2
 8000950:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f042 0201 	orr.w	r2, r2, #1
 8000964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000968:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800096a:	f7ff fe77 	bl	800065c <HAL_GetTick>
 800096e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000970:	e011      	b.n	8000996 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000972:	f7ff fe73 	bl	800065c <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000980:	d909      	bls.n	8000996 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2203      	movs	r2, #3
 8000986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000992:	2303      	movs	r3, #3
 8000994:	e13b      	b.n	8000c0e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e4      	bne.n	8000972 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f023 031c 	bic.w	r3, r3, #28
 80009b6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80009b8:	f002 ff8e 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 80009bc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4a78      	ldr	r2, [pc, #480]	; (8000ba4 <HAL_ETH_Init+0x2c8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d908      	bls.n	80009d8 <HAL_ETH_Init+0xfc>
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4a77      	ldr	r2, [pc, #476]	; (8000ba8 <HAL_ETH_Init+0x2cc>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d804      	bhi.n	80009d8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	e027      	b.n	8000a28 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	4a73      	ldr	r2, [pc, #460]	; (8000ba8 <HAL_ETH_Init+0x2cc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d908      	bls.n	80009f2 <HAL_ETH_Init+0x116>
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	4a72      	ldr	r2, [pc, #456]	; (8000bac <HAL_ETH_Init+0x2d0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d804      	bhi.n	80009f2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f043 030c 	orr.w	r3, r3, #12
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	e01a      	b.n	8000a28 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	4a6d      	ldr	r2, [pc, #436]	; (8000bac <HAL_ETH_Init+0x2d0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d903      	bls.n	8000a02 <HAL_ETH_Init+0x126>
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	4a6c      	ldr	r2, [pc, #432]	; (8000bb0 <HAL_ETH_Init+0x2d4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d911      	bls.n	8000a26 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	4a6a      	ldr	r2, [pc, #424]	; (8000bb0 <HAL_ETH_Init+0x2d4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d908      	bls.n	8000a1c <HAL_ETH_Init+0x140>
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4a69      	ldr	r2, [pc, #420]	; (8000bb4 <HAL_ETH_Init+0x2d8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d804      	bhi.n	8000a1c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	e005      	b.n	8000a28 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	e000      	b.n	8000a28 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000a26:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000a30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a34:	2100      	movs	r1, #0
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 fb16 	bl	8001068 <HAL_ETH_WritePHYRegister>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00b      	beq.n	8000a5a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a46:	6939      	ldr	r1, [r7, #16]
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 fba3 	bl	8001194 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e0d9      	b.n	8000c0e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a5a:	20ff      	movs	r0, #255	; 0xff
 8000a5c:	f7ff fe0a 	bl	8000674 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f000 80a7 	beq.w	8000bb8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a6a:	f7ff fdf7 	bl	800065c <HAL_GetTick>
 8000a6e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	461a      	mov	r2, r3
 8000a76:	2101      	movs	r1, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 fa8d 	bl	8000f98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a7e:	f7ff fded 	bl	800065c <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d90f      	bls.n	8000ab0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 fb7c 	bl	8001194 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000aac:	2303      	movs	r3, #3
 8000aae:	e0ae      	b.n	8000c0e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0da      	beq.n	8000a70 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000abe:	2100      	movs	r1, #0
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 fad1 	bl	8001068 <HAL_ETH_WritePHYRegister>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00b      	beq.n	8000ae4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ad0:	6939      	ldr	r1, [r7, #16]
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 fb5e 	bl	8001194 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e094      	b.n	8000c0e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ae4:	f7ff fdba 	bl	800065c <HAL_GetTick>
 8000ae8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	461a      	mov	r2, r3
 8000af0:	2101      	movs	r1, #1
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 fa50 	bl	8000f98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000af8:	f7ff fdb0 	bl	800065c <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d90f      	bls.n	8000b2a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000b0e:	6939      	ldr	r1, [r7, #16]
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 fb3f 	bl	8001194 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e071      	b.n	8000c0e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f003 0320 	and.w	r3, r3, #32
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0da      	beq.n	8000aea <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	461a      	mov	r2, r3
 8000b3a:	211f      	movs	r1, #31
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 fa2b 	bl	8000f98 <HAL_ETH_ReadPHYRegister>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00b      	beq.n	8000b60 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b4c:	6939      	ldr	r1, [r7, #16]
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 fb20 	bl	8001194 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2201      	movs	r2, #1
 8000b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e056      	b.n	8000c0e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d004      	beq.n	8000b74 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	e002      	b.n	8000b7a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	e037      	b.n	8000bfc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	e032      	b.n	8000bfc <HAL_ETH_Init+0x320>
 8000b96:	bf00      	nop
 8000b98:	03938700 	.word	0x03938700
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40013800 	.word	0x40013800
 8000ba4:	01312cff 	.word	0x01312cff
 8000ba8:	02160ebf 	.word	0x02160ebf
 8000bac:	039386ff 	.word	0x039386ff
 8000bb0:	05f5e0ff 	.word	0x05f5e0ff
 8000bb4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	085b      	lsrs	r3, r3, #1
 8000bc6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 fa49 	bl	8001068 <HAL_ETH_WritePHYRegister>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00b      	beq.n	8000bf4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 fad6 	bl	8001194 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e00c      	b.n	8000c0e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000bf4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000bf8:	f7ff fd3c 	bl	8000674 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000bfc:	6939      	ldr	r1, [r7, #16]
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f000 fac8 	bl	8001194 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop

08000c18 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <HAL_ETH_DMATxDescListInit+0x20>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e052      	b.n	8000cde <HAL_ETH_DMATxDescListInit+0xc6>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2202      	movs	r2, #2
 8000c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e030      	b.n	8000cb6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	015b      	lsls	r3, r3, #5
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c64:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d105      	bne.n	8000c8e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d208      	bcs.n	8000caa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	015b      	lsls	r3, r3, #5
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	e002      	b.n	8000cb0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d3ca      	bcc.n	8000c54 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cc8:	3310      	adds	r3, #16
 8000cca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b087      	sub	sp, #28
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_ETH_DMARxDescListInit+0x20>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e056      	b.n	8000db8 <HAL_ETH_DMARxDescListInit+0xce>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2202      	movs	r2, #2
 8000d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e034      	b.n	8000d90 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	015b      	lsls	r3, r3, #5
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d36:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000d3e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	461a      	mov	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d105      	bne.n	8000d68 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d208      	bcs.n	8000d84 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	015b      	lsls	r3, r3, #5
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	e002      	b.n	8000d8a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3c6      	bcc.n	8000d26 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000da2:	330c      	adds	r3, #12
 8000da4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_ETH_TransmitFrame+0x24>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e0cd      	b.n	8000f84 <HAL_ETH_TransmitFrame+0x1c0>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e0b8      	b.n	8000f84 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	da09      	bge.n	8000e30 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2212      	movs	r2, #18
 8000e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e0a9      	b.n	8000f84 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d915      	bls.n	8000e66 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	4a54      	ldr	r2, [pc, #336]	; (8000f90 <HAL_ETH_TransmitFrame+0x1cc>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	0a9b      	lsrs	r3, r3, #10
 8000e44:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	4b51      	ldr	r3, [pc, #324]	; (8000f90 <HAL_ETH_TransmitFrame+0x1cc>)
 8000e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4e:	0a9b      	lsrs	r3, r3, #10
 8000e50:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000e54:	fb01 f303 	mul.w	r3, r1, r3
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e001      	b.n	8000e6a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000e66:	2301      	movs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d11c      	bne.n	8000eaa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000e7e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e8a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e9a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea8:	e04b      	b.n	8000f42 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	e044      	b.n	8000f3a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ebe:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d107      	bne.n	8000ed6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ed4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ede:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d116      	bne.n	8000f18 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000ef8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_ETH_TransmitFrame+0x1d0>)
 8000efe:	fb02 f203 	mul.w	r2, r2, r3
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000f0a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000f16:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f26:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	3301      	adds	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3b6      	bcc.n	8000eb0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f4a:	3314      	adds	r3, #20
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00d      	beq.n	8000f72 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f5e:	3314      	adds	r3, #20
 8000f60:	2204      	movs	r2, #4
 8000f62:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	ac02b00b 	.word	0xac02b00b
 8000f94:	fffffa0c 	.word	0xfffffa0c

08000f98 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b82      	cmp	r3, #130	; 0x82
 8000fb8:	d101      	bne.n	8000fbe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e050      	b.n	8001060 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2282      	movs	r2, #130	; 0x82
 8000fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 031c 	and.w	r3, r3, #28
 8000fd4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8a1b      	ldrh	r3, [r3, #16]
 8000fda:	02db      	lsls	r3, r3, #11
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	019b      	lsls	r3, r3, #6
 8000fe8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f023 0302 	bic.w	r3, r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800100a:	f7ff fb27 	bl	800065c <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001010:	e015      	b.n	800103e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001012:	f7ff fb23 	bl	800065c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001020:	d309      	bcc.n	8001036 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e014      	b.n	8001060 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e4      	bne.n	8001012 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	460b      	mov	r3, r1
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b42      	cmp	r3, #66	; 0x42
 8001088:	d101      	bne.n	800108e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800108a:	2302      	movs	r3, #2
 800108c:	e04e      	b.n	800112c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2242      	movs	r2, #66	; 0x42
 8001092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 031c 	and.w	r3, r3, #28
 80010a4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8a1b      	ldrh	r3, [r3, #16]
 80010aa:	02db      	lsls	r3, r3, #11
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80010b4:	897b      	ldrh	r3, [r7, #10]
 80010b6:	019b      	lsls	r3, r3, #6
 80010b8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	4313      	orrs	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010e4:	f7ff faba 	bl	800065c <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80010ea:	e015      	b.n	8001118 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80010ec:	f7ff fab6 	bl	800065c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fa:	d309      	bcc.n	8001110 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e00d      	b.n	800112c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e4      	bne.n	80010ec <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <HAL_ETH_Start+0x16>
 8001146:	2302      	movs	r3, #2
 8001148:	e01f      	b.n	800118a <HAL_ETH_Start+0x56>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2202      	movs	r2, #2
 8001156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fa1c 	bl	8001598 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fa36 	bl	80015d2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fa80 	bl	800166c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fa4d 	bl	800160c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fa62 	bl	800163c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0b0      	sub	sp, #192	; 0xc0
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	663b      	str	r3, [r7, #96]	; 0x60
 80011e0:	e001      	b.n	80011e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80011e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80011f0:	2300      	movs	r3, #0
 80011f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001268:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800126c:	4bac      	ldr	r3, [pc, #688]	; (8001520 <ETH_MACDMAConfig+0x38c>)
 800126e:	4013      	ands	r3, r2
 8001270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001274:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001278:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800127a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800127c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800127e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001280:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001286:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800128a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800128c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800128e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001294:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001298:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800129a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800129c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800129e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80012a0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80012a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80012a4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80012a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80012a8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80012aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff f9d3 	bl	8000674 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012d6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80012d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80012da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80012dc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80012de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80012e0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80012e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80012e6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80012e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80012ec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80012ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80012f2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80012f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80012f8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80012fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001304:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001306:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff f9ae 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001320:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800132a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001334:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001344:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001348:	4013      	ands	r3, r2
 800134a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800134e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001352:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001358:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800135a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800135e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001364:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800136a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800136c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001370:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001372:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001376:	4313      	orrs	r3, r2
 8001378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001384:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff f96f 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800139e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80013a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80013a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff f95a 	bl	8000674 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80013ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80013d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80013ee:	2304      	movs	r3, #4
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80013f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80013f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80013fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800140e:	2300      	movs	r3, #0
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001412:	2300      	movs	r3, #0
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141e:	3318      	adds	r3, #24
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001426:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <ETH_MACDMAConfig+0x390>)
 800142c:	4013      	ands	r3, r2
 800142e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001432:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001434:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001436:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001438:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800143a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800143c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800143e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001440:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001442:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001444:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001446:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001448:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800144a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800144e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001452:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001454:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001458:	4313      	orrs	r3, r2
 800145a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001466:	3318      	adds	r3, #24
 8001468:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800146c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001476:	3318      	adds	r3, #24
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff f8f8 	bl	8000674 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148c:	3318      	adds	r3, #24
 800148e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001492:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001498:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800149c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80014a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80014a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80014a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80014a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80014aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80014ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80014ae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014bc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff f8d1 	bl	8000674 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014de:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d10f      	bne.n	8001508 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f0:	331c      	adds	r3, #28
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001504:	331c      	adds	r3, #28
 8001506:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	461a      	mov	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f809 	bl	8001528 <ETH_MACAddressConfig>
}
 8001516:	bf00      	nop
 8001518:	37c0      	adds	r7, #192	; 0xc0
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	ff20810f 	.word	0xff20810f
 8001524:	f8de3f23 	.word	0xf8de3f23

08001528 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3305      	adds	r3, #5
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	3204      	adds	r2, #4
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <ETH_MACAddressConfig+0x68>)
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3303      	adds	r3, #3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	061a      	lsls	r2, r3, #24
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3302      	adds	r3, #2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3301      	adds	r3, #1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	4313      	orrs	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	4313      	orrs	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <ETH_MACAddressConfig+0x6c>)
 800157a:	4413      	add	r3, r2
 800157c:	461a      	mov	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	6013      	str	r3, [r2, #0]
}
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40028040 	.word	0x40028040
 8001594:	40028044 	.word	0x40028044

08001598 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0208 	orr.w	r2, r2, #8
 80015b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80015bc:	2001      	movs	r0, #1
 80015be:	f000 f87f 	bl	80016c0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	601a      	str	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0204 	orr.w	r2, r2, #4
 80015ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 f862 	bl	80016c0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161c:	3318      	adds	r3, #24
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	3318      	adds	r3, #24
 800162e:	601a      	str	r2, [r3, #0]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164c:	3318      	adds	r3, #24
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0202 	orr.w	r2, r2, #2
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	3318      	adds	r3, #24
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	3318      	adds	r3, #24
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800168c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001690:	3318      	adds	r3, #24
 8001692:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	3318      	adds	r3, #24
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 f80c 	bl	80016c0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b2:	3318      	adds	r3, #24
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <ETH_Delay+0x34>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <ETH_Delay+0x38>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0a5b      	lsrs	r3, r3, #9
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80016dc:	bf00      	nop
  } 
  while (Delay --);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	60fa      	str	r2, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <ETH_Delay+0x1c>
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	20000124 	.word	0x20000124
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e177      	b.n	8001a08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8166 	bne.w	8001a02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x4a>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b12      	cmp	r3, #18
 8001744:	d123      	bne.n	800178e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	69b9      	ldr	r1, [r7, #24]
 800178a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0203 	and.w	r2, r3, #3
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d00b      	beq.n	80017e2 <HAL_GPIO_Init+0xe6>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d6:	2b11      	cmp	r3, #17
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d130      	bne.n	8001844 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 0201 	and.w	r2, r3, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80c0 	beq.w	8001a02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_GPIO_Init+0x320>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a64      	ldr	r2, [pc, #400]	; (8001a1c <HAL_GPIO_Init+0x320>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_GPIO_Init+0x320>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189e:	4a60      	ldr	r2, [pc, #384]	; (8001a20 <HAL_GPIO_Init+0x324>)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <HAL_GPIO_Init+0x328>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d037      	beq.n	800193a <HAL_GPIO_Init+0x23e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a56      	ldr	r2, [pc, #344]	; (8001a28 <HAL_GPIO_Init+0x32c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d031      	beq.n	8001936 <HAL_GPIO_Init+0x23a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <HAL_GPIO_Init+0x330>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d02b      	beq.n	8001932 <HAL_GPIO_Init+0x236>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a54      	ldr	r2, [pc, #336]	; (8001a30 <HAL_GPIO_Init+0x334>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x232>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_GPIO_Init+0x338>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x22e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x33c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x22a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_GPIO_Init+0x340>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x226>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <HAL_GPIO_Init+0x344>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x222>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <HAL_GPIO_Init+0x348>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x21e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <HAL_GPIO_Init+0x34c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x21a>
 8001912:	2309      	movs	r3, #9
 8001914:	e012      	b.n	800193c <HAL_GPIO_Init+0x240>
 8001916:	230a      	movs	r3, #10
 8001918:	e010      	b.n	800193c <HAL_GPIO_Init+0x240>
 800191a:	2308      	movs	r3, #8
 800191c:	e00e      	b.n	800193c <HAL_GPIO_Init+0x240>
 800191e:	2307      	movs	r3, #7
 8001920:	e00c      	b.n	800193c <HAL_GPIO_Init+0x240>
 8001922:	2306      	movs	r3, #6
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x240>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x240>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x240>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x240>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x240>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x240>
 800193a:	2300      	movs	r3, #0
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194c:	4934      	ldr	r1, [pc, #208]	; (8001a20 <HAL_GPIO_Init+0x324>)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195a:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <HAL_GPIO_Init+0x350>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800197e:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <HAL_GPIO_Init+0x350>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_GPIO_Init+0x350>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a8:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <HAL_GPIO_Init+0x350>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_GPIO_Init+0x350>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_GPIO_Init+0x350>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_GPIO_Init+0x350>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019fc:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <HAL_GPIO_Init+0x350>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	f67f ae84 	bls.w	8001718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	3724      	adds	r7, #36	; 0x24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40021400 	.word	0x40021400
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	40021c00 	.word	0x40021c00
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40022400 	.word	0x40022400
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e10f      	b.n	8001cb6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f010 fd76 	bl	801259c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	; 0x24
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ac8:	f001 ff12 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a7b      	ldr	r2, [pc, #492]	; (8001cc0 <HAL_I2C_Init+0x23c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d807      	bhi.n	8001ae8 <HAL_I2C_Init+0x64>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a7a      	ldr	r2, [pc, #488]	; (8001cc4 <HAL_I2C_Init+0x240>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e006      	b.n	8001af6 <HAL_I2C_Init+0x72>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_I2C_Init+0x244>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0db      	b.n	8001cb6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4a72      	ldr	r2, [pc, #456]	; (8001ccc <HAL_I2C_Init+0x248>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a64      	ldr	r2, [pc, #400]	; (8001cc0 <HAL_I2C_Init+0x23c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d802      	bhi.n	8001b38 <HAL_I2C_Init+0xb4>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3301      	adds	r3, #1
 8001b36:	e009      	b.n	8001b4c <HAL_I2C_Init+0xc8>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <HAL_I2C_Init+0x24c>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4956      	ldr	r1, [pc, #344]	; (8001cc0 <HAL_I2C_Init+0x23c>)
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	d80d      	bhi.n	8001b88 <HAL_I2C_Init+0x104>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e59      	subs	r1, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	bf38      	it	cc
 8001b84:	2304      	movcc	r3, #4
 8001b86:	e04f      	b.n	8001c28 <HAL_I2C_Init+0x1a4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d111      	bne.n	8001bb4 <HAL_I2C_Init+0x130>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	440b      	add	r3, r1
 8001b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e012      	b.n	8001bda <HAL_I2C_Init+0x156>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e58      	subs	r0, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	0099      	lsls	r1, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Init+0x15e>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e022      	b.n	8001c28 <HAL_I2C_Init+0x1a4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <HAL_I2C_Init+0x184>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1e58      	subs	r0, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	440b      	add	r3, r1
 8001bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c06:	e00f      	b.n	8001c28 <HAL_I2C_Init+0x1a4>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	6809      	ldr	r1, [r1, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6911      	ldr	r1, [r2, #16]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68d2      	ldr	r2, [r2, #12]
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	000186a0 	.word	0x000186a0
 8001cc4:	001e847f 	.word	0x001e847f
 8001cc8:	003d08ff 	.word	0x003d08ff
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	10624dd3 	.word	0x10624dd3

08001cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d129      	bne.n	8001d3e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2224      	movs	r2, #36	; 0x24
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0210 	bic.w	r2, r2, #16
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
  }
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d12a      	bne.n	8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2224      	movs	r2, #36	; 0x24
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	f023 030f 	bic.w	r3, r3, #15
 8001d8c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	89fb      	ldrh	r3, [r7, #14]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	89fa      	ldrh	r2, [r7, #14]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dcc:	b08f      	sub	sp, #60	; 0x3c
 8001dce:	af0a      	add	r7, sp, #40	; 0x28
 8001dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e10f      	b.n	8001ffc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f011 f990 	bl	801311c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fe73 	bl	8004b06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	687e      	ldr	r6, [r7, #4]
 8001e28:	466d      	mov	r5, sp
 8001e2a:	f106 0410 	add.w	r4, r6, #16
 8001e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e3e:	1d33      	adds	r3, r6, #4
 8001e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f002 fd4a 	bl	80048dc <USB_CoreInit>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0d0      	b.n	8001ffc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fe61 	bl	8004b28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e04a      	b.n	8001f02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	333d      	adds	r3, #61	; 0x3d
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	333c      	adds	r3, #60	; 0x3c
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	b298      	uxth	r0, r3
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3342      	adds	r3, #66	; 0x42
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	333f      	adds	r3, #63	; 0x3f
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3344      	adds	r3, #68	; 0x44
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3348      	adds	r3, #72	; 0x48
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3350      	adds	r3, #80	; 0x50
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	3301      	adds	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d3af      	bcc.n	8001e6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e044      	b.n	8001f9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3b5      	bcc.n	8001f12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	687e      	ldr	r6, [r7, #4]
 8001fae:	466d      	mov	r5, sp
 8001fb0:	f106 0410 	add.w	r4, r6, #16
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc4:	1d33      	adds	r3, r6, #4
 8001fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc8:	6838      	ldr	r0, [r7, #0]
 8001fca:	f002 fdd7 	bl	8004b7c <USB_DevInit>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e00d      	b.n	8001ffc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fdcc 	bl	8005b92 <USB_DevDisconnect>

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002004 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_PCD_Start+0x1c>
 800201c:	2302      	movs	r3, #2
 800201e:	e020      	b.n	8002062 <HAL_PCD_Start+0x5e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b01      	cmp	r3, #1
 800202e:	d109      	bne.n	8002044 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002034:	2b01      	cmp	r3, #1
 8002036:	d005      	beq.n	8002044 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fd8a 	bl	8005b62 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fd46 	bl	8004ae4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800206a:	b590      	push	{r4, r7, lr}
 800206c:	b08d      	sub	sp, #52	; 0x34
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fe31 	bl	8005ce8 <USB_GetMode>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 838e 	bne.w	80027aa <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fd95 	bl	8005bc2 <USB_ReadInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8384 	beq.w	80027a8 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fd8c 	bl	8005bc2 <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d107      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f002 0202 	and.w	r2, r2, #2
 80020c2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 fd7a 	bl	8005bc2 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020d8:	d17b      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fd80 	bl	8005be8 <USB_ReadDevAllOutEpInterrupt>
 80020e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020ea:	e06f      	b.n	80021cc <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d064      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fda5 	bl	8005c50 <USB_ReadDevOutEPInterrupt>
 8002106:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	461a      	mov	r2, r3
 8002120:	2301      	movs	r3, #1
 8002122:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fe0e 	bl	8002d48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00c      	beq.n	8002150 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 ff0d 	bl	8002f58 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214a:	461a      	mov	r2, r3
 800214c:	2308      	movs	r3, #8
 800214e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002166:	461a      	mov	r2, r3
 8002168:	2310      	movs	r3, #16
 800216a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d015      	beq.n	80021a2 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d108      	bne.n	8002190 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002188:	461a      	mov	r2, r3
 800218a:	2101      	movs	r1, #1
 800218c:	f003 fdf0 	bl	8005d70 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	2320      	movs	r3, #32
 80021a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b8:	461a      	mov	r2, r3
 80021ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	3301      	adds	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d18c      	bne.n	80020ec <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fcf3 	bl	8005bc2 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021e6:	f040 80c4 	bne.w	8002372 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fd14 	bl	8005c1c <USB_ReadDevAllInEpInterrupt>
 80021f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021fa:	e0b6      	b.n	800236a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80ab 	beq.w	800235e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fd3a 	bl	8005c8c <USB_ReadDevInEPInterrupt>
 8002218:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d05b      	beq.n	80022dc <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	2201      	movs	r2, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	43db      	mvns	r3, r3
 800223e:	69f9      	ldr	r1, [r7, #28]
 8002240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002244:	4013      	ands	r3, r2
 8002246:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002254:	461a      	mov	r2, r3
 8002256:	2301      	movs	r3, #1
 8002258:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d11b      	bne.n	800229a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3348      	adds	r3, #72	; 0x48
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4403      	add	r3, r0
 8002282:	3344      	adds	r3, #68	; 0x44
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4419      	add	r1, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4403      	add	r3, r0
 8002296:	3348      	adds	r3, #72	; 0x48
 8002298:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f010 ffca 	bl	801323a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d116      	bne.n	80022dc <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d113      	bne.n	80022dc <HAL_PCD_IRQHandler+0x272>
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3350      	adds	r3, #80	; 0x50
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d4:	461a      	mov	r2, r3
 80022d6:	2101      	movs	r1, #1
 80022d8:	f003 fd4a 	bl	8005d70 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f2:	461a      	mov	r2, r3
 80022f4:	2308      	movs	r3, #8
 80022f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800230e:	461a      	mov	r2, r3
 8002310:	2310      	movs	r3, #16
 8002312:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800232a:	461a      	mov	r2, r3
 800232c:	2340      	movs	r3, #64	; 0x40
 800232e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002346:	461a      	mov	r2, r3
 8002348:	2302      	movs	r3, #2
 800234a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fc67 	bl	8002c2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	3301      	adds	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f af45 	bne.w	80021fc <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fc23 	bl	8005bc2 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002386:	d122      	bne.n	80023ce <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023ae:	2100      	movs	r1, #0
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fe89 	bl	80030c8 <HAL_PCDEx_LPM_Callback>
 80023b6:	e002      	b.n	80023be <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f010 ffb5 	bl	8013328 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fbf5 	bl	8005bc2 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e2:	d112      	bne.n	800240a <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f010 ff71 	bl	80132dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002408:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fbd7 	bl	8005bc2 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241e:	f040 80a7 	bne.w	8002570 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2110      	movs	r1, #16
 800243c:	4618      	mov	r0, r3
 800243e:	f002 fd0f 	bl	8004e60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002446:	e036      	b.n	80024b6 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002454:	461a      	mov	r2, r3
 8002456:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800245a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246c:	0151      	lsls	r1, r2, #5
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	440a      	add	r2, r1
 8002472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800247a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800248e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a0:	0151      	lsls	r1, r2, #5
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	440a      	add	r2, r1
 80024a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	3301      	adds	r3, #1
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3c3      	bcc.n	8002448 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d016      	beq.n	800250a <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ec:	f043 030b 	orr.w	r3, r3, #11
 80024f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002502:	f043 030b 	orr.w	r3, r3, #11
 8002506:	6453      	str	r3, [r2, #68]	; 0x44
 8002508:	e015      	b.n	8002536 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800251c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002520:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002530:	f043 030b 	orr.w	r3, r3, #11
 8002534:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002544:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002548:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800255a:	461a      	mov	r2, r3
 800255c:	f003 fc08 	bl	8005d70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800256e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fb24 	bl	8005bc2 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002584:	d124      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fbba 	bl	8005d04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fcc4 	bl	8004f22 <USB_GetDevSpeed>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681c      	ldr	r4, [r3, #0]
 80025a6:	f001 f997 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 80025aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	4620      	mov	r0, r4
 80025b6:	f002 f9f3 	bl	80049a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f010 fe65 	bl	801328a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 faf4 	bl	8005bc2 <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d161      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0210 	bic.w	r2, r2, #16
 80025f2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	0c5b      	lsrs	r3, r3, #17
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	2b02      	cmp	r3, #2
 800261e:	d124      	bne.n	800266a <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d035      	beq.n	8002698 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	6a38      	ldr	r0, [r7, #32]
 8002640:	f003 f96c 	bl	800591c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002650:	441a      	add	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002662:	441a      	add	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	619a      	str	r2, [r3, #24]
 8002668:	e016      	b.n	8002698 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	0c5b      	lsrs	r3, r3, #17
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	2b06      	cmp	r3, #6
 8002674:	d110      	bne.n	8002698 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800267c:	2208      	movs	r2, #8
 800267e:	4619      	mov	r1, r3
 8002680:	6a38      	ldr	r0, [r7, #32]
 8002682:	f003 f94b 	bl	800591c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002692:	441a      	add	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0210 	orr.w	r2, r2, #16
 80026a6:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 fa88 	bl	8005bc2 <USB_ReadInterrupts>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d10a      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f010 fdd6 	bl	801326e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 0208 	and.w	r2, r2, #8
 80026d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fa73 	bl	8005bc2 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e6:	d10f      	bne.n	8002708 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f010 fe38 	bl	8013368 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fa58 	bl	8005bc2 <USB_ReadInterrupts>
 8002712:	4603      	mov	r3, r0
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271c:	d10f      	bne.n	800273e <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f010 fe0b 	bl	8013344 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fa3d 	bl	8005bc2 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d10a      	bne.n	800276a <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f010 fe19 	bl	801338c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fa27 	bl	8005bc2 <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d115      	bne.n	80027aa <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f010 fe09 	bl	80133a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	e000      	b.n	80027aa <HAL_PCD_IRQHandler+0x740>
      return;
 80027a8:	bf00      	nop
    }
  }
}
 80027aa:	3734      	adds	r7, #52	; 0x34
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_PCD_SetAddress+0x1a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e013      	b.n	80027f2 <HAL_PCD_SetAddress+0x42>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 f997 	bl	8005b16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	4608      	mov	r0, r1
 8002804:	4611      	mov	r1, r2
 8002806:	461a      	mov	r2, r3
 8002808:	4603      	mov	r3, r0
 800280a:	70fb      	strb	r3, [r7, #3]
 800280c:	460b      	mov	r3, r1
 800280e:	803b      	strh	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da0f      	bge.n	8002840 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	3338      	adds	r3, #56	; 0x38
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	705a      	strb	r2, [r3, #1]
 800283e:	e00f      	b.n	8002860 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	b2da      	uxtb	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800286c:	883a      	ldrh	r2, [r7, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	78ba      	ldrb	r2, [r7, #2]
 8002876:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800288a:	78bb      	ldrb	r3, [r7, #2]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d102      	bne.n	8002896 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_PCD_EP_Open+0xaa>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e00e      	b.n	80028c2 <HAL_PCD_EP_Open+0xc8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fb5a 	bl	8004f6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80028c0:	7afb      	ldrb	r3, [r7, #11]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da0f      	bge.n	80028fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	3338      	adds	r3, #56	; 0x38
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	705a      	strb	r2, [r3, #1]
 80028fc:	e00f      	b.n	800291e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_PCD_EP_Close+0x6e>
 8002934:	2302      	movs	r3, #2
 8002936:	e00e      	b.n	8002956 <HAL_PCD_EP_Close+0x8c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fb98 	bl	800507c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	460b      	mov	r3, r1
 800296c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296e:	7afb      	ldrb	r3, [r7, #11]
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a0:	7afb      	ldrb	r3, [r7, #11]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6979      	ldr	r1, [r7, #20]
 80029d2:	f002 fe1b 	bl	800560c <USB_EP0StartXfer>
 80029d6:	e008      	b.n	80029ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6979      	ldr	r1, [r7, #20]
 80029e6:	f002 fbcd 	bl	8005184 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	460b      	mov	r3, r1
 8002a32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	f003 020f 	and.w	r2, r3, #15
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	3338      	adds	r3, #56	; 0x38
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	3304      	adds	r3, #4
 8002a4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2201      	movs	r2, #1
 8002a62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6979      	ldr	r1, [r7, #20]
 8002a96:	f002 fdb9 	bl	800560c <USB_EP0StartXfer>
 8002a9a:	e008      	b.n	8002aae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6979      	ldr	r1, [r7, #20]
 8002aaa:	f002 fb6b 	bl	8005184 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d901      	bls.n	8002ad6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e050      	b.n	8002b78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da0f      	bge.n	8002afe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 020f 	and.w	r2, r3, #15
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	3338      	adds	r3, #56	; 0x38
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	705a      	strb	r2, [r3, #1]
 8002afc:	e00d      	b.n	8002b1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_PCD_EP_SetStall+0x82>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e01e      	b.n	8002b78 <HAL_PCD_EP_SetStall+0xc0>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 ff10 	bl	800596e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	b2d9      	uxtb	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f003 f901 	bl	8005d70 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d901      	bls.n	8002b9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e042      	b.n	8002c24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da0f      	bge.n	8002bc6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	705a      	strb	r2, [r3, #1]
 8002bc4:	e00f      	b.n	8002be6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_PCD_EP_ClrStall+0x86>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e00e      	b.n	8002c24 <HAL_PCD_EP_ClrStall+0xa4>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 ff18 	bl	8005a4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	3338      	adds	r3, #56	; 0x38
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d901      	bls.n	8002c64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e06c      	b.n	8002d3e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d902      	bls.n	8002c80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3303      	adds	r3, #3
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c88:	e02b      	b.n	8002ce2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d902      	bls.n	8002ca6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3303      	adds	r3, #3
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f002 fdf4 	bl	80058b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	441a      	add	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d809      	bhi.n	8002d0c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d203      	bcs.n	8002d0c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1be      	bne.n	8002c8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d811      	bhi.n	8002d3c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	2201      	movs	r2, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d38:	4013      	ands	r3, r2
 8002d3a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	333c      	adds	r3, #60	; 0x3c
 8002d60:	3304      	adds	r3, #4
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	f040 80b3 	bne.w	8002ee6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a70      	ldr	r2, [pc, #448]	; (8002f50 <PCD_EP_OutXfrComplete_int+0x208>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d90e      	bls.n	8002db0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da8:	461a      	mov	r2, r3
 8002daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dae:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f010 fa15 	bl	80131e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	f002 ffd4 	bl	8005d70 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	6093      	str	r3, [r2, #8]
 8002dda:	e0b3      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df2:	461a      	mov	r2, r3
 8002df4:	2320      	movs	r3, #32
 8002df6:	6093      	str	r3, [r2, #8]
 8002df8:	e0a4      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 809f 	bne.w	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a51      	ldr	r2, [pc, #324]	; (8002f50 <PCD_EP_OutXfrComplete_int+0x208>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d90f      	bls.n	8002e2e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e24:	461a      	mov	r2, r3
 8002e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2a:	6093      	str	r3, [r2, #8]
 8002e2c:	e08a      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e40:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	0159      	lsls	r1, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e54:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4403      	add	r3, r0
 8002e64:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e68:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4419      	add	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4403      	add	r3, r0
 8002ea2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ea6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f010 f9a8 	bl	8013204 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d144      	bne.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d138      	bne.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002edc:	461a      	mov	r2, r3
 8002ede:	2101      	movs	r1, #1
 8002ee0:	f002 ff46 	bl	8005d70 <USB_EP0_OutStart>
 8002ee4:	e02e      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d124      	bne.n	8002f38 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	6093      	str	r3, [r2, #8]
 8002f0c:	e01a      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	2320      	movs	r3, #32
 8002f28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f010 f967 	bl	8013204 <HAL_PCD_DataOutStageCallback>
 8002f36:	e005      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f010 f960 	bl	8013204 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	4f54300a 	.word	0x4f54300a
 8002f54:	4f54310a 	.word	0x4f54310a

08002f58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	333c      	adds	r3, #60	; 0x3c
 8002f70:	3304      	adds	r3, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d113      	bne.n	8002fb6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d922      	bls.n	8002fdc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01d      	beq.n	8002fdc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fac:	461a      	mov	r2, r3
 8002fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb2:	6093      	str	r3, [r2, #8]
 8002fb4:	e012      	b.n	8002fdc <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10e      	bne.n	8002fdc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f010 f8ff 	bl	80131e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d90c      	bls.n	8003004 <PCD_EP_OutSetupPacket_int+0xac>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2101      	movs	r1, #1
 8003000:	f002 feb6 	bl	8005d70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	4f54300a 	.word	0x4f54300a
 8003014:	4f54310a 	.word	0x4f54310a

08003018 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
 8003024:	4613      	mov	r3, r2
 8003026:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003036:	883b      	ldrh	r3, [r7, #0]
 8003038:	0419      	lsls	r1, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	430a      	orrs	r2, r1
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
 8003044:	e028      	b.n	8003098 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4413      	add	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e00d      	b.n	8003076 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	3340      	adds	r3, #64	; 0x40
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4413      	add	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	3301      	adds	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	3b01      	subs	r3, #1
 800307c:	429a      	cmp	r2, r3
 800307e:	d3ec      	bcc.n	800305a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003080:	883b      	ldrh	r3, [r7, #0]
 8003082:	0418      	lsls	r0, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	3b01      	subs	r3, #1
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	4302      	orrs	r2, r0
 8003090:	3340      	adds	r3, #64	; 0x40
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e22d      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fe:	4ba3      	ldr	r3, [pc, #652]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4ba0      	ldr	r3, [pc, #640]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b9d      	ldr	r3, [pc, #628]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b99      	ldr	r3, [pc, #612]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e208      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a90      	ldr	r2, [pc, #576]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b8b      	ldr	r3, [pc, #556]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a8a      	ldr	r2, [pc, #552]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b88      	ldr	r3, [pc, #544]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a87      	ldr	r2, [pc, #540]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b84      	ldr	r3, [pc, #528]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a83      	ldr	r2, [pc, #524]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b81      	ldr	r3, [pc, #516]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a80      	ldr	r2, [pc, #512]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fa60 	bl	800065c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fd fa5c 	bl	800065c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1cd      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fa4c 	bl	800065c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fd fa48 	bl	800065c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1b9      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f6:	4b65      	ldr	r3, [pc, #404]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b62      	ldr	r3, [pc, #392]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b5c      	ldr	r3, [pc, #368]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e18d      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4952      	ldr	r1, [pc, #328]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_RCC_OscConfig+0x2b0>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd fa01 	bl	800065c <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7fd f9fd 	bl	800065c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e16e      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4940      	ldr	r1, [pc, #256]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCC_OscConfig+0x2b0>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd f9e0 	bl	800065c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fd f9dc 	bl	800065c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e14d      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d030      	beq.n	800332c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_RCC_OscConfig+0x2b4>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd f9c0 	bl	800065c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fd f9bc 	bl	800065c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e12d      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e015      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x2b4>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fd f9a9 	bl	800065c <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7fd f9a5 	bl	800065c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e116      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a0e      	ldr	r2, [pc, #56]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d121      	bne.n	80033ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fd f96b 	bl	800065c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e011      	b.n	80033ae <HAL_RCC_OscConfig+0x2ce>
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	42470000 	.word	0x42470000
 8003394:	42470e80 	.word	0x42470e80
 8003398:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fd f95e 	bl	800065c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0cf      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d106      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2f0>
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	e01c      	b.n	800340a <HAL_RCC_OscConfig+0x32a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x312>
 80033d8:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a5f      	ldr	r2, [pc, #380]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	4b5d      	ldr	r3, [pc, #372]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a5c      	ldr	r2, [pc, #368]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x32a>
 80033f2:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a59      	ldr	r2, [pc, #356]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7fd f923 	bl	800065c <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fd f91f 	bl	800065c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e08e      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ee      	beq.n	800341a <HAL_RCC_OscConfig+0x33a>
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7fd f90d 	bl	800065c <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd f909 	bl	800065c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e078      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b3f      	ldr	r3, [pc, #252]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a3a      	ldr	r2, [pc, #232]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d064      	beq.n	800354c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003482:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b08      	cmp	r3, #8
 800348c:	d05c      	beq.n	8003548 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d141      	bne.n	800351a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_RCC_OscConfig+0x480>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fd f8de 	bl	800065c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fd f8da 	bl	800065c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e04b      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	3b01      	subs	r3, #1
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	491d      	ldr	r1, [pc, #116]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ec:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_RCC_OscConfig+0x480>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fd f8b3 	bl	800065c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fd f8af 	bl	800065c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e020      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x41a>
 8003518:	e018      	b.n	800354c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_OscConfig+0x480>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fd f89c 	bl	800065c <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fd f898 	bl	800065c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e009      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_RCC_OscConfig+0x47c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x448>
 8003546:	e001      	b.n	800354c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40007000 	.word	0x40007000
 800355c:	40023800 	.word	0x40023800
 8003560:	42470060 	.word	0x42470060

08003564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0ca      	b.n	800370e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b67      	ldr	r3, [pc, #412]	; (8003718 <HAL_RCC_ClockConfig+0x1b4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d90c      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b64      	ldr	r3, [pc, #400]	; (8003718 <HAL_RCC_ClockConfig+0x1b4>)
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b62      	ldr	r3, [pc, #392]	; (8003718 <HAL_RCC_ClockConfig+0x1b4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b6      	b.n	800370e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d0:	4b52      	ldr	r3, [pc, #328]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a51      	ldr	r2, [pc, #324]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	494c      	ldr	r1, [pc, #304]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d044      	beq.n	8003684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b46      	ldr	r3, [pc, #280]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d119      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e07d      	b.n	800370e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d003      	beq.n	8003622 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361e:	2b03      	cmp	r3, #3
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06d      	b.n	800370e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003632:	4b3a      	ldr	r3, [pc, #232]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e065      	b.n	800370e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f023 0203 	bic.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4933      	ldr	r1, [pc, #204]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003654:	f7fd f802 	bl	800065c <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	e00a      	b.n	8003672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	f7fc fffe 	bl	800065c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e04d      	b.n	800370e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 020c 	and.w	r2, r3, #12
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	429a      	cmp	r2, r3
 8003682:	d1eb      	bne.n	800365c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_ClockConfig+0x1b4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d20c      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b21      	ldr	r3, [pc, #132]	; (8003718 <HAL_RCC_ClockConfig+0x1b4>)
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <HAL_RCC_ClockConfig+0x1b4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e030      	b.n	800370e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4915      	ldr	r1, [pc, #84]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	490d      	ldr	r1, [pc, #52]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ea:	f000 f81d 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80036ee:	4601      	mov	r1, r0
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	5cd3      	ldrb	r3, [r2, r3]
 80036fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003706:	2000      	movs	r0, #0
 8003708:	f7fc ff64 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023c00 	.word	0x40023c00
 800371c:	40023800 	.word	0x40023800
 8003720:	08016b88 	.word	0x08016b88
 8003724:	20000124 	.word	0x20000124

08003728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	2300      	movs	r3, #0
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373e:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d007      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x32>
 800374a:	2b08      	cmp	r3, #8
 800374c:	d008      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x38>
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80b4 	bne.w	80038bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003756:	60bb      	str	r3, [r7, #8]
       break;
 8003758:	e0b3      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375a:	4b5e      	ldr	r3, [pc, #376]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800375c:	60bb      	str	r3, [r7, #8]
      break;
 800375e:	e0b0      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003768:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376a:	4b58      	ldr	r3, [pc, #352]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04a      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003776:	4b55      	ldr	r3, [pc, #340]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	099b      	lsrs	r3, r3, #6
 800377c:	f04f 0400 	mov.w	r4, #0
 8003780:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	ea03 0501 	and.w	r5, r3, r1
 800378c:	ea04 0602 	and.w	r6, r4, r2
 8003790:	4629      	mov	r1, r5
 8003792:	4632      	mov	r2, r6
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	f04f 0400 	mov.w	r4, #0
 800379c:	0154      	lsls	r4, r2, #5
 800379e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037a2:	014b      	lsls	r3, r1, #5
 80037a4:	4619      	mov	r1, r3
 80037a6:	4622      	mov	r2, r4
 80037a8:	1b49      	subs	r1, r1, r5
 80037aa:	eb62 0206 	sbc.w	r2, r2, r6
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	0194      	lsls	r4, r2, #6
 80037b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037bc:	018b      	lsls	r3, r1, #6
 80037be:	1a5b      	subs	r3, r3, r1
 80037c0:	eb64 0402 	sbc.w	r4, r4, r2
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	00e2      	lsls	r2, r4, #3
 80037ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037d2:	00d9      	lsls	r1, r3, #3
 80037d4:	460b      	mov	r3, r1
 80037d6:	4614      	mov	r4, r2
 80037d8:	195b      	adds	r3, r3, r5
 80037da:	eb44 0406 	adc.w	r4, r4, r6
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	0262      	lsls	r2, r4, #9
 80037e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037ec:	0259      	lsls	r1, r3, #9
 80037ee:	460b      	mov	r3, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	4621      	mov	r1, r4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	461a      	mov	r2, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	f7fc fd46 	bl	8000290 <__aeabi_uldivmod>
 8003804:	4603      	mov	r3, r0
 8003806:	460c      	mov	r4, r1
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	e049      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380c:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	f04f 0400 	mov.w	r4, #0
 8003816:	f240 11ff 	movw	r1, #511	; 0x1ff
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	ea03 0501 	and.w	r5, r3, r1
 8003822:	ea04 0602 	and.w	r6, r4, r2
 8003826:	4629      	mov	r1, r5
 8003828:	4632      	mov	r2, r6
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	f04f 0400 	mov.w	r4, #0
 8003832:	0154      	lsls	r4, r2, #5
 8003834:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003838:	014b      	lsls	r3, r1, #5
 800383a:	4619      	mov	r1, r3
 800383c:	4622      	mov	r2, r4
 800383e:	1b49      	subs	r1, r1, r5
 8003840:	eb62 0206 	sbc.w	r2, r2, r6
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	0194      	lsls	r4, r2, #6
 800384e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003852:	018b      	lsls	r3, r1, #6
 8003854:	1a5b      	subs	r3, r3, r1
 8003856:	eb64 0402 	sbc.w	r4, r4, r2
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	00e2      	lsls	r2, r4, #3
 8003864:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003868:	00d9      	lsls	r1, r3, #3
 800386a:	460b      	mov	r3, r1
 800386c:	4614      	mov	r4, r2
 800386e:	195b      	adds	r3, r3, r5
 8003870:	eb44 0406 	adc.w	r4, r4, r6
 8003874:	f04f 0100 	mov.w	r1, #0
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	02a2      	lsls	r2, r4, #10
 800387e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003882:	0299      	lsls	r1, r3, #10
 8003884:	460b      	mov	r3, r1
 8003886:	4614      	mov	r4, r2
 8003888:	4618      	mov	r0, r3
 800388a:	4621      	mov	r1, r4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	461a      	mov	r2, r3
 8003894:	4623      	mov	r3, r4
 8003896:	f7fc fcfb 	bl	8000290 <__aeabi_uldivmod>
 800389a:	4603      	mov	r3, r0
 800389c:	460c      	mov	r4, r1
 800389e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	60bb      	str	r3, [r7, #8]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038be:	60bb      	str	r3, [r7, #8]
      break;
 80038c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c2:	68bb      	ldr	r3, [r7, #8]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	007a1200 	.word	0x007a1200

080038d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_RCC_GetHCLKFreq+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000124 	.word	0x20000124

080038f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038f4:	f7ff fff0 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 80038f8:	4601      	mov	r1, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0a9b      	lsrs	r3, r3, #10
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4a03      	ldr	r2, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	08016b98 	.word	0x08016b98

08003918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800391c:	f7ff ffdc 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8003920:	4601      	mov	r1, r0
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	0b5b      	lsrs	r3, r3, #13
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4a03      	ldr	r2, [pc, #12]	; (800393c <HAL_RCC_GetPCLK2Freq+0x24>)
 800392e:	5cd3      	ldrb	r3, [r2, r3]
 8003930:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	08016b98 	.word	0x08016b98

08003940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01d      	b.n	800398e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f00f fa4c 	bl	8012e04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 f996 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01d      	b.n	80039e4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f00f f987 	bl	8012cd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f000 f96b 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e08a      	b.n	8003b1c <HAL_TIM_IC_ConfigChannel+0x130>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11b      	bne.n	8003a54 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f000 fb90 	bl	8004150 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 020c 	bic.w	r2, r2, #12
 8003a3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
 8003a52:	e05a      	b.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d11c      	bne.n	8003a94 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f000 fbe5 	bl	8004238 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6999      	ldr	r1, [r3, #24]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	619a      	str	r2, [r3, #24]
 8003a92:	e03a      	b.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11b      	bne.n	8003ad2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f000 fc02 	bl	80042b2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 020c 	bic.w	r2, r2, #12
 8003abc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	61da      	str	r2, [r3, #28]
 8003ad0:	e01b      	b.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f000 fc22 	bl	800432a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003af4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	021a      	lsls	r2, r3, #8
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e0b4      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	f200 809f 	bhi.w	8003c94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003c95 	.word	0x08003c95
 8003b64:	08003c95 	.word	0x08003c95
 8003b68:	08003c95 	.word	0x08003c95
 8003b6c:	08003bd1 	.word	0x08003bd1
 8003b70:	08003c95 	.word	0x08003c95
 8003b74:	08003c95 	.word	0x08003c95
 8003b78:	08003c95 	.word	0x08003c95
 8003b7c:	08003c13 	.word	0x08003c13
 8003b80:	08003c95 	.word	0x08003c95
 8003b84:	08003c95 	.word	0x08003c95
 8003b88:	08003c95 	.word	0x08003c95
 8003b8c:	08003c53 	.word	0x08003c53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f92a 	bl	8003df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0204 	bic.w	r2, r2, #4
 8003bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6999      	ldr	r1, [r3, #24]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	619a      	str	r2, [r3, #24]
      break;
 8003bce:	e062      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f97a 	bl	8003ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]
      break;
 8003c10:	e041      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f9cf 	bl	8003fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0208 	orr.w	r2, r2, #8
 8003c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0204 	bic.w	r2, r2, #4
 8003c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69d9      	ldr	r1, [r3, #28]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	61da      	str	r2, [r3, #28]
      break;
 8003c50:	e021      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fa23 	bl	80040a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	021a      	lsls	r2, r3, #8
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	61da      	str	r2, [r3, #28]
      break;
 8003c92:	e000      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003c94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d00f      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3d      	ldr	r2, [pc, #244]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3a      	ldr	r2, [pc, #232]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d027      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d023      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d017      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <TIM_Base_SetConfig+0x128>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <TIM_Base_SetConfig+0x12c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <TIM_Base_SetConfig+0x130>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <TIM_Base_SetConfig+0x134>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <TIM_Base_SetConfig+0x138>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <TIM_Base_SetConfig+0x13c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d108      	bne.n	8003d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0xf8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40010400 	.word	0x40010400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800
 8003de4:	40001800 	.word	0x40001800
 8003de8:	40001c00 	.word	0x40001c00
 8003dec:	40002000 	.word	0x40002000

08003df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <TIM_OC1_SetConfig+0xd8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC1_SetConfig+0x64>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10c      	bne.n	8003e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0308 	bic.w	r3, r3, #8
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <TIM_OC1_SetConfig+0xd8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC1_SetConfig+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d111      	bne.n	8003ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0210 	bic.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0320 	bic.w	r3, r3, #32
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <TIM_OC2_SetConfig+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC2_SetConfig+0x68>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <TIM_OC2_SetConfig+0xe8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10d      	bne.n	8003f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <TIM_OC2_SetConfig+0xe4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC2_SetConfig+0x94>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <TIM_OC2_SetConfig+0xe8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d113      	bne.n	8003f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010400 	.word	0x40010400

08003fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <TIM_OC3_SetConfig+0xe0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_OC3_SetConfig+0x66>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <TIM_OC3_SetConfig+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10d      	bne.n	800403e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a16      	ldr	r2, [pc, #88]	; (800409c <TIM_OC3_SetConfig+0xe0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC3_SetConfig+0x92>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <TIM_OC3_SetConfig+0xe4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d113      	bne.n	8004076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	031b      	lsls	r3, r3, #12
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <TIM_OC4_SetConfig+0xa4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC4_SetConfig+0x68>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <TIM_OC4_SetConfig+0xa8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40010400 	.word	0x40010400

08004150 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a28      	ldr	r2, [pc, #160]	; (800421c <TIM_TI1_SetConfig+0xcc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01b      	beq.n	80041b6 <TIM_TI1_SetConfig+0x66>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d017      	beq.n	80041b6 <TIM_TI1_SetConfig+0x66>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4a25      	ldr	r2, [pc, #148]	; (8004220 <TIM_TI1_SetConfig+0xd0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <TIM_TI1_SetConfig+0x66>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a24      	ldr	r2, [pc, #144]	; (8004224 <TIM_TI1_SetConfig+0xd4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00f      	beq.n	80041b6 <TIM_TI1_SetConfig+0x66>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <TIM_TI1_SetConfig+0xd8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_TI1_SetConfig+0x66>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a22      	ldr	r2, [pc, #136]	; (800422c <TIM_TI1_SetConfig+0xdc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_TI1_SetConfig+0x66>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a21      	ldr	r2, [pc, #132]	; (8004230 <TIM_TI1_SetConfig+0xe0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_TI1_SetConfig+0x66>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a20      	ldr	r2, [pc, #128]	; (8004234 <TIM_TI1_SetConfig+0xe4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <TIM_TI1_SetConfig+0x6a>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <TIM_TI1_SetConfig+0x6c>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e003      	b.n	80041da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f023 030a 	bic.w	r3, r3, #10
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f003 030a 	and.w	r3, r3, #10
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40010400 	.word	0x40010400
 8004230:	40014000 	.word	0x40014000
 8004234:	40001800 	.word	0x40001800

08004238 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0210 	bic.w	r2, r3, #16
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004276:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	031b      	lsls	r3, r3, #12
 800427c:	b29b      	uxth	r3, r3
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800428a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004302:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800432a:	b480      	push	{r7}
 800432c:	b087      	sub	sp, #28
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004368:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	b29b      	uxth	r3, r3
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800437c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	031b      	lsls	r3, r3, #12
 8004382:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e032      	b.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e03f      	b.n	80044c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f00e fd5b 	bl	8012f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2224      	movs	r2, #36	; 0x24
 800445e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004470:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f828 	bl	80044c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004486:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004496:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c8:	b5b0      	push	{r4, r5, r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004508:	f023 030c 	bic.w	r3, r3, #12
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	430b      	orrs	r3, r1
 8004514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699a      	ldr	r2, [r3, #24]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004534:	f040 80e4 	bne.w	8004700 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4aab      	ldr	r2, [pc, #684]	; (80047ec <UART_SetConfig+0x324>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <UART_SetConfig+0x84>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4aaa      	ldr	r2, [pc, #680]	; (80047f0 <UART_SetConfig+0x328>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d16c      	bne.n	8004626 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800454c:	f7ff f9e4 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004550:	4602      	mov	r2, r0
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009a      	lsls	r2, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	4aa3      	ldr	r2, [pc, #652]	; (80047f4 <UART_SetConfig+0x32c>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	011c      	lsls	r4, r3, #4
 8004570:	f7ff f9d2 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004574:	4602      	mov	r2, r0
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009a      	lsls	r2, r3, #2
 800457e:	441a      	add	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	fbb2 f5f3 	udiv	r5, r2, r3
 800458a:	f7ff f9c5 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 800458e:	4602      	mov	r2, r0
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	4a93      	ldr	r2, [pc, #588]	; (80047f4 <UART_SetConfig+0x32c>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2264      	movs	r2, #100	; 0x64
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	1aeb      	subs	r3, r5, r3
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	3332      	adds	r3, #50	; 0x32
 80045b8:	4a8e      	ldr	r2, [pc, #568]	; (80047f4 <UART_SetConfig+0x32c>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045c6:	441c      	add	r4, r3
 80045c8:	f7ff f9a6 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009a      	lsls	r2, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	fbb2 f5f3 	udiv	r5, r2, r3
 80045e2:	f7ff f999 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009a      	lsls	r2, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	4a7d      	ldr	r2, [pc, #500]	; (80047f4 <UART_SetConfig+0x32c>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2264      	movs	r2, #100	; 0x64
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	1aeb      	subs	r3, r5, r3
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	3332      	adds	r3, #50	; 0x32
 8004610:	4a78      	ldr	r2, [pc, #480]	; (80047f4 <UART_SetConfig+0x32c>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	f003 0207 	and.w	r2, r3, #7
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4422      	add	r2, r4
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	e154      	b.n	80048d0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004626:	f7ff f963 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800462a:	4602      	mov	r2, r0
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	4a6c      	ldr	r2, [pc, #432]	; (80047f4 <UART_SetConfig+0x32c>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	011c      	lsls	r4, r3, #4
 800464a:	f7ff f951 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800464e:	4602      	mov	r2, r0
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009a      	lsls	r2, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fbb2 f5f3 	udiv	r5, r2, r3
 8004664:	f7ff f944 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004668:	4602      	mov	r2, r0
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009a      	lsls	r2, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	4a5d      	ldr	r2, [pc, #372]	; (80047f4 <UART_SetConfig+0x32c>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2264      	movs	r2, #100	; 0x64
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	1aeb      	subs	r3, r5, r3
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	3332      	adds	r3, #50	; 0x32
 8004692:	4a58      	ldr	r2, [pc, #352]	; (80047f4 <UART_SetConfig+0x32c>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a0:	441c      	add	r4, r3
 80046a2:	f7ff f925 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80046bc:	f7ff f918 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	009a      	lsls	r2, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	4a47      	ldr	r2, [pc, #284]	; (80047f4 <UART_SetConfig+0x32c>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	2264      	movs	r2, #100	; 0x64
 80046e0:	fb02 f303 	mul.w	r3, r2, r3
 80046e4:	1aeb      	subs	r3, r5, r3
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	3332      	adds	r3, #50	; 0x32
 80046ea:	4a42      	ldr	r2, [pc, #264]	; (80047f4 <UART_SetConfig+0x32c>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f003 0207 	and.w	r2, r3, #7
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4422      	add	r2, r4
 80046fc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80046fe:	e0e7      	b.n	80048d0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a39      	ldr	r2, [pc, #228]	; (80047ec <UART_SetConfig+0x324>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <UART_SetConfig+0x24c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a38      	ldr	r2, [pc, #224]	; (80047f0 <UART_SetConfig+0x328>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d171      	bne.n	80047f8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004714:	f7ff f900 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004718:	4602      	mov	r2, r0
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009a      	lsls	r2, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <UART_SetConfig+0x32c>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	011c      	lsls	r4, r3, #4
 8004738:	f7ff f8ee 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 800473c:	4602      	mov	r2, r0
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009a      	lsls	r2, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004752:	f7ff f8e1 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004756:	4602      	mov	r2, r0
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009a      	lsls	r2, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <UART_SetConfig+0x32c>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	2264      	movs	r2, #100	; 0x64
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	1aeb      	subs	r3, r5, r3
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	3332      	adds	r3, #50	; 0x32
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <UART_SetConfig+0x32c>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478c:	441c      	add	r4, r3
 800478e:	f7ff f8c3 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004792:	4602      	mov	r2, r0
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80047a8:	f7ff f8b6 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009a      	lsls	r2, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <UART_SetConfig+0x32c>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	2264      	movs	r2, #100	; 0x64
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	1aeb      	subs	r3, r5, r3
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	3332      	adds	r3, #50	; 0x32
 80047d6:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <UART_SetConfig+0x32c>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	f003 020f 	and.w	r2, r3, #15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4422      	add	r2, r4
 80047e8:	609a      	str	r2, [r3, #8]
 80047ea:	e071      	b.n	80048d0 <UART_SetConfig+0x408>
 80047ec:	40011000 	.word	0x40011000
 80047f0:	40011400 	.word	0x40011400
 80047f4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80047f8:	f7ff f87a 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009a      	lsls	r2, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	4a31      	ldr	r2, [pc, #196]	; (80048d8 <UART_SetConfig+0x410>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	011c      	lsls	r4, r3, #4
 800481c:	f7ff f868 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004820:	4602      	mov	r2, r0
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	009a      	lsls	r2, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	fbb2 f5f3 	udiv	r5, r2, r3
 8004836:	f7ff f85b 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800483a:	4602      	mov	r2, r0
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <UART_SetConfig+0x410>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2264      	movs	r2, #100	; 0x64
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	1aeb      	subs	r3, r5, r3
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	3332      	adds	r3, #50	; 0x32
 8004864:	4a1c      	ldr	r2, [pc, #112]	; (80048d8 <UART_SetConfig+0x410>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004870:	441c      	add	r4, r3
 8004872:	f7ff f83d 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004876:	4602      	mov	r2, r0
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009a      	lsls	r2, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	fbb2 f5f3 	udiv	r5, r2, r3
 800488c:	f7ff f830 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004890:	4602      	mov	r2, r0
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009a      	lsls	r2, r3, #2
 800489a:	441a      	add	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <UART_SetConfig+0x410>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	2264      	movs	r2, #100	; 0x64
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	1aeb      	subs	r3, r5, r3
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	3332      	adds	r3, #50	; 0x32
 80048ba:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <UART_SetConfig+0x410>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	f003 020f 	and.w	r2, r3, #15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4422      	add	r2, r4
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	e7ff      	b.n	80048d0 <UART_SetConfig+0x408>
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bdb0      	pop	{r4, r5, r7, pc}
 80048d8:	51eb851f 	.word	0x51eb851f

080048dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048dc:	b084      	sub	sp, #16
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	f107 001c 	add.w	r0, r7, #28
 80048ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d122      	bne.n	800493a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800491c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f001 fa7c 	bl	8005e2c <USB_CoreReset>
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e01a      	b.n	8004970 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 fa70 	bl	8005e2c <USB_CoreReset>
 800494c:	4603      	mov	r3, r0
 800494e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
 8004962:	e005      	b.n	8004970 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	2b01      	cmp	r3, #1
 8004974:	d10b      	bne.n	800498e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f043 0206 	orr.w	r2, r3, #6
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800499a:	b004      	add	sp, #16
 800499c:	4770      	bx	lr
	...

080049a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d165      	bne.n	8004a80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4a41      	ldr	r2, [pc, #260]	; (8004abc <USB_SetTurnaroundTime+0x11c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d906      	bls.n	80049ca <USB_SetTurnaroundTime+0x2a>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4a40      	ldr	r2, [pc, #256]	; (8004ac0 <USB_SetTurnaroundTime+0x120>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d802      	bhi.n	80049ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049c4:	230f      	movs	r3, #15
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e062      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4a3c      	ldr	r2, [pc, #240]	; (8004ac0 <USB_SetTurnaroundTime+0x120>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d906      	bls.n	80049e0 <USB_SetTurnaroundTime+0x40>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4a3b      	ldr	r2, [pc, #236]	; (8004ac4 <USB_SetTurnaroundTime+0x124>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d802      	bhi.n	80049e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049da:	230e      	movs	r3, #14
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e057      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <USB_SetTurnaroundTime+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d906      	bls.n	80049f6 <USB_SetTurnaroundTime+0x56>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4a37      	ldr	r2, [pc, #220]	; (8004ac8 <USB_SetTurnaroundTime+0x128>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d802      	bhi.n	80049f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049f0:	230d      	movs	r3, #13
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e04c      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a33      	ldr	r2, [pc, #204]	; (8004ac8 <USB_SetTurnaroundTime+0x128>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d906      	bls.n	8004a0c <USB_SetTurnaroundTime+0x6c>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4a32      	ldr	r2, [pc, #200]	; (8004acc <USB_SetTurnaroundTime+0x12c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d802      	bhi.n	8004a0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a06:	230c      	movs	r3, #12
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e041      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <USB_SetTurnaroundTime+0x12c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d906      	bls.n	8004a22 <USB_SetTurnaroundTime+0x82>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4a2e      	ldr	r2, [pc, #184]	; (8004ad0 <USB_SetTurnaroundTime+0x130>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d802      	bhi.n	8004a22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a1c:	230b      	movs	r3, #11
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e036      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <USB_SetTurnaroundTime+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d906      	bls.n	8004a38 <USB_SetTurnaroundTime+0x98>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <USB_SetTurnaroundTime+0x134>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d802      	bhi.n	8004a38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a32:	230a      	movs	r3, #10
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e02b      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a26      	ldr	r2, [pc, #152]	; (8004ad4 <USB_SetTurnaroundTime+0x134>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d906      	bls.n	8004a4e <USB_SetTurnaroundTime+0xae>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <USB_SetTurnaroundTime+0x138>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d802      	bhi.n	8004a4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a48:	2309      	movs	r3, #9
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e020      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <USB_SetTurnaroundTime+0x138>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d906      	bls.n	8004a64 <USB_SetTurnaroundTime+0xc4>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4a20      	ldr	r2, [pc, #128]	; (8004adc <USB_SetTurnaroundTime+0x13c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d802      	bhi.n	8004a64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a5e:	2308      	movs	r3, #8
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e015      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <USB_SetTurnaroundTime+0x13c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d906      	bls.n	8004a7a <USB_SetTurnaroundTime+0xda>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <USB_SetTurnaroundTime+0x140>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d802      	bhi.n	8004a7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a74:	2307      	movs	r3, #7
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e00a      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a7a:	2306      	movs	r3, #6
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e007      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a86:	2309      	movs	r3, #9
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e001      	b.n	8004a90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a8c:	2309      	movs	r3, #9
 8004a8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	00d8acbf 	.word	0x00d8acbf
 8004ac0:	00e4e1bf 	.word	0x00e4e1bf
 8004ac4:	00f423ff 	.word	0x00f423ff
 8004ac8:	0106737f 	.word	0x0106737f
 8004acc:	011a499f 	.word	0x011a499f
 8004ad0:	01312cff 	.word	0x01312cff
 8004ad4:	014ca43f 	.word	0x014ca43f
 8004ad8:	016e35ff 	.word	0x016e35ff
 8004adc:	01a6ab1f 	.word	0x01a6ab1f
 8004ae0:	01e847ff 	.word	0x01e847ff

08004ae4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f043 0201 	orr.w	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	e00b      	b.n	8004b6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e001      	b.n	8004b6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e003      	b.n	8004b74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b6c:	2032      	movs	r0, #50	; 0x32
 8004b6e:	f7fb fd81 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e009      	b.n	8004bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3340      	adds	r3, #64	; 0x40
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3301      	adds	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0e      	cmp	r3, #14
 8004bb4:	d9f2      	bls.n	8004b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d112      	bne.n	8004be2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
 8004be0:	e00b      	b.n	8004bfa <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c14:	461a      	mov	r2, r3
 8004c16:	680b      	ldr	r3, [r1, #0]
 8004c18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10c      	bne.n	8004c3a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c26:	2100      	movs	r1, #0
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f961 	bl	8004ef0 <USB_SetDevSpeed>
 8004c2e:	e008      	b.n	8004c42 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c30:	2101      	movs	r1, #1
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f95c 	bl	8004ef0 <USB_SetDevSpeed>
 8004c38:	e003      	b.n	8004c42 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c3a:	2103      	movs	r1, #3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f957 	bl	8004ef0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c42:	2110      	movs	r1, #16
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f90b 	bl	8004e60 <USB_FlushTxFifo>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f929 	bl	8004eac <USB_FlushRxFifo>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	461a      	mov	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e043      	b.n	8004d16 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca4:	d118      	bne.n	8004cd8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	e013      	b.n	8004cea <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e008      	b.n	8004cea <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3301      	adds	r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d3b7      	bcc.n	8004c8e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e043      	b.n	8004dac <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3a:	d118      	bne.n	8004d6e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e013      	b.n	8004d80 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e008      	b.n	8004d80 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3301      	adds	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d3b7      	bcc.n	8004d24 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d111      	bne.n	8004df2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <USB_DevInit+0x2dc>)
 8004dd8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dec:	f043 0303 	orr.w	r3, r3, #3
 8004df0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004dfe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f043 0210 	orr.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <USB_DevInit+0x2e0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f043 0208 	orr.w	r2, r3, #8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3e:	f043 0304 	orr.w	r3, r3, #4
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e52:	b004      	add	sp, #16
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	00800100 	.word	0x00800100
 8004e5c:	803c3800 	.word	0x803c3800

08004e60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	019b      	lsls	r3, r3, #6
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <USB_FlushTxFifo+0x48>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d0f0      	beq.n	8004e7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	00030d40 	.word	0x00030d40

08004eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2210      	movs	r2, #16
 8004ebc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <USB_FlushRxFifo+0x40>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e006      	b.n	8004ede <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d0f0      	beq.n	8004ebe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	00030d40 	.word	0x00030d40

08004ef0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b087      	sub	sp, #28
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0306 	and.w	r3, r3, #6
 8004f3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f42:	2300      	movs	r3, #0
 8004f44:	75fb      	strb	r3, [r7, #23]
 8004f46:	e00a      	b.n	8004f5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d002      	beq.n	8004f54 <USB_GetDevSpeed+0x32>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d102      	bne.n	8004f5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f54:	2302      	movs	r3, #2
 8004f56:	75fb      	strb	r3, [r7, #23]
 8004f58:	e001      	b.n	8004f5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d13a      	bne.n	8004ffe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	2101      	movs	r1, #1
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	68f9      	ldr	r1, [r7, #12]
 8004fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d155      	bne.n	800506c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	78db      	ldrb	r3, [r3, #3]
 8004fda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fdc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	059b      	lsls	r3, r3, #22
 8004fe2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e036      	b.n	800506c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	2101      	movs	r1, #1
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501c:	4313      	orrs	r3, r2
 800501e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11a      	bne.n	800506c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	78db      	ldrb	r3, [r3, #3]
 8005050:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005052:	430b      	orrs	r3, r1
 8005054:	4313      	orrs	r3, r2
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d135      	bne.n	8005104 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	68f9      	ldr	r1, [r7, #12]
 80050b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b8:	4013      	ands	r3, r2
 80050ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	2101      	movs	r1, #1
 80050ce:	fa01 f303 	lsl.w	r3, r1, r3
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050dc:	4013      	ands	r3, r2
 80050de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	0159      	lsls	r1, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	440b      	add	r3, r1
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	4619      	mov	r1, r3
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <USB_DeactivateEndpoint+0x100>)
 80050fe:	4013      	ands	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
 8005102:	e034      	b.n	800516e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	2101      	movs	r1, #1
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	041b      	lsls	r3, r3, #16
 800511c:	43db      	mvns	r3, r3
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005124:	4013      	ands	r3, r2
 8005126:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	2101      	movs	r1, #1
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	43db      	mvns	r3, r3
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005148:	4013      	ands	r3, r2
 800514a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	0159      	lsls	r1, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	440b      	add	r3, r1
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	4619      	mov	r1, r3
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <USB_DeactivateEndpoint+0x104>)
 800516a:	4013      	ands	r3, r2
 800516c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	ec337800 	.word	0xec337800
 8005180:	eff37800 	.word	0xeff37800

08005184 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 815c 	bne.w	800545e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d132      	bne.n	8005214 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	0cdb      	lsrs	r3, r3, #19
 800520e:	04db      	lsls	r3, r3, #19
 8005210:	6113      	str	r3, [r2, #16]
 8005212:	e074      	b.n	80052fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	0cdb      	lsrs	r3, r3, #19
 8005230:	04db      	lsls	r3, r3, #19
 8005232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005252:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6959      	ldr	r1, [r3, #20]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	440b      	add	r3, r1
 8005270:	1e59      	subs	r1, r3, #1
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	fbb1 f3f3 	udiv	r3, r1, r3
 800527a:	04d9      	lsls	r1, r3, #19
 800527c:	4b9d      	ldr	r3, [pc, #628]	; (80054f4 <USB_EPStartXfer+0x370>)
 800527e:	400b      	ands	r3, r1
 8005280:	69b9      	ldr	r1, [r7, #24]
 8005282:	0148      	lsls	r0, r1, #5
 8005284:	69f9      	ldr	r1, [r7, #28]
 8005286:	4401      	add	r1, r0
 8005288:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	0148      	lsls	r0, r1, #5
 80052aa:	69f9      	ldr	r1, [r7, #28]
 80052ac:	4401      	add	r1, r0
 80052ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052b2:	4313      	orrs	r3, r2
 80052b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d11f      	bne.n	80052fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d14b      	bne.n	800539c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	461a      	mov	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	78db      	ldrb	r3, [r3, #3]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d128      	bne.n	800537a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d110      	bne.n	800535a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e00f      	b.n	800537a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005394:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e12f      	b.n	80055fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	78db      	ldrb	r3, [r3, #3]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d015      	beq.n	80053f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8117 	beq.w	80055fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	2101      	movs	r1, #1
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	69f9      	ldr	r1, [r7, #28]
 80053e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ea:	4313      	orrs	r3, r2
 80053ec:	634b      	str	r3, [r1, #52]	; 0x34
 80053ee:	e105      	b.n	80055fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d110      	bne.n	8005422 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e00f      	b.n	8005442 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005440:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68d9      	ldr	r1, [r3, #12]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	b298      	uxth	r0, r3
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4603      	mov	r3, r0
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fa2b 	bl	80058b2 <USB_WritePacket>
 800545c:	e0ce      	b.n	80055fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005478:	0cdb      	lsrs	r3, r3, #19
 800547a:	04db      	lsls	r3, r3, #19
 800547c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005498:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800549c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d126      	bne.n	80054f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	0148      	lsls	r0, r1, #5
 80054c4:	69f9      	ldr	r1, [r7, #28]
 80054c6:	4401      	add	r1, r0
 80054c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054cc:	4313      	orrs	r3, r2
 80054ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ee:	6113      	str	r3, [r2, #16]
 80054f0:	e036      	b.n	8005560 <USB_EPStartXfer+0x3dc>
 80054f2:	bf00      	nop
 80054f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4413      	add	r3, r2
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	8afb      	ldrh	r3, [r7, #22]
 800551e:	04d9      	lsls	r1, r3, #19
 8005520:	4b39      	ldr	r3, [pc, #228]	; (8005608 <USB_EPStartXfer+0x484>)
 8005522:	400b      	ands	r3, r1
 8005524:	69b9      	ldr	r1, [r7, #24]
 8005526:	0148      	lsls	r0, r1, #5
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	4401      	add	r1, r0
 800552c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005530:	4313      	orrs	r3, r2
 8005532:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	8af9      	ldrh	r1, [r7, #22]
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005550:	69b9      	ldr	r1, [r7, #24]
 8005552:	0148      	lsls	r0, r1, #5
 8005554:	69f9      	ldr	r1, [r7, #28]
 8005556:	4401      	add	r1, r0
 8005558:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800555c:	4313      	orrs	r3, r2
 800555e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d10d      	bne.n	8005582 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	460a      	mov	r2, r1
 8005580:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	78db      	ldrb	r3, [r3, #3]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d128      	bne.n	80055dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d110      	bne.n	80055bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e00f      	b.n	80055dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	1ff80000 	.word	0x1ff80000

0800560c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	f040 80cd 	bne.w	80057c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d132      	bne.n	800569c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005694:	0cdb      	lsrs	r3, r3, #19
 8005696:	04db      	lsls	r3, r3, #19
 8005698:	6113      	str	r3, [r2, #16]
 800569a:	e04e      	b.n	800573a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b6:	0cdb      	lsrs	r3, r3, #19
 80056b8:	04db      	lsls	r3, r3, #19
 80056ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	695a      	ldr	r2, [r3, #20]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d903      	bls.n	80056f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572a:	6939      	ldr	r1, [r7, #16]
 800572c:	0148      	lsls	r0, r1, #5
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	4401      	add	r1, r0
 8005732:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005736:	4313      	orrs	r3, r2
 8005738:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d11e      	bne.n	800577e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e092      	b.n	80058a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800579c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d07e      	beq.n	80058a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	2101      	movs	r1, #1
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c2:	4313      	orrs	r3, r2
 80057c4:	634b      	str	r3, [r1, #52]	; 0x34
 80057c6:	e06d      	b.n	80058a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e2:	0cdb      	lsrs	r3, r3, #19
 80057e4:	04db      	lsls	r3, r3, #19
 80057e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800583a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005852:	6939      	ldr	r1, [r7, #16]
 8005854:	0148      	lsls	r0, r1, #5
 8005856:	6979      	ldr	r1, [r7, #20]
 8005858:	4401      	add	r1, r0
 800585a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800585e:	4313      	orrs	r3, r2
 8005860:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10d      	bne.n	8005884 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68d9      	ldr	r1, [r3, #12]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	460a      	mov	r2, r1
 8005882:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b089      	sub	sp, #36	; 0x24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	4611      	mov	r1, r2
 80058be:	461a      	mov	r2, r3
 80058c0:	460b      	mov	r3, r1
 80058c2:	71fb      	strb	r3, [r7, #7]
 80058c4:	4613      	mov	r3, r2
 80058c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80058d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11a      	bne.n	800590e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058d8:	88bb      	ldrh	r3, [r7, #4]
 80058da:	3303      	adds	r3, #3
 80058dc:	089b      	lsrs	r3, r3, #2
 80058de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e00f      	b.n	8005906 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	031a      	lsls	r2, r3, #12
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f2:	461a      	mov	r2, r3
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3304      	adds	r3, #4
 80058fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	3301      	adds	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	429a      	cmp	r2, r3
 800590c:	d3eb      	bcc.n	80058e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3724      	adds	r7, #36	; 0x24
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	3303      	adds	r3, #3
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e00b      	b.n	8005958 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	601a      	str	r2, [r3, #0]
    pDest++;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3304      	adds	r3, #4
 8005950:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	3301      	adds	r3, #1
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	429a      	cmp	r2, r3
 800595e:	d3ef      	bcc.n	8005940 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005960:	69fb      	ldr	r3, [r7, #28]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3724      	adds	r7, #36	; 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d12c      	bne.n	80059e4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	db12      	blt.n	80059c2 <USB_EPSetStall+0x54>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059c0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e02b      	b.n	8005a3c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	db12      	blt.n	8005a1c <USB_EPSetStall+0xae>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00f      	beq.n	8005a1c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d128      	bne.n	8005ab8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	78db      	ldrb	r3, [r3, #3]
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d003      	beq.n	8005a96 <USB_EPClearStall+0x4c>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d138      	bne.n	8005b08 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e027      	b.n	8005b08 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ad6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	78db      	ldrb	r3, [r3, #3]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d003      	beq.n	8005ae8 <USB_EPClearStall+0x9e>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d10f      	bne.n	8005b08 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b38:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b50:	4313      	orrs	r3, r2
 8005b52:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7c:	f023 0302 	bic.w	r3, r3, #2
 8005b80:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005b82:	2003      	movs	r0, #3
 8005b84:	f7fa fd76 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bac:	f043 0302 	orr.w	r3, r3, #2
 8005bb0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005bb2:	2003      	movs	r0, #3
 8005bb4:	f7fa fd5e 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	0c1b      	lsrs	r3, r3, #16
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	b29b      	uxth	r3, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbc:	01db      	lsls	r3, r3, #7
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cda:	68bb      	ldr	r3, [r7, #8]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d22:	f023 0307 	bic.w	r3, r3, #7
 8005d26:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0306 	and.w	r3, r3, #6
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d109      	bne.n	8005d4c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	f043 0303 	orr.w	r3, r3, #3
 8005d4a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	333c      	adds	r3, #60	; 0x3c
 8005d86:	3304      	adds	r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <USB_EP0_OutStart+0xb8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d90a      	bls.n	8005daa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da4:	d101      	bne.n	8005daa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e037      	b.n	8005e1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	461a      	mov	r2, r3
 8005db2:	2300      	movs	r3, #0
 8005db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f043 0318 	orr.w	r3, r3, #24
 8005ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005df0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005df2:	7afb      	ldrb	r3, [r7, #11]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d10f      	bne.n	8005e18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	4f54300a 	.word	0x4f54300a

08005e2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <USB_CoreReset+0x64>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e01b      	b.n	8005e82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	daf2      	bge.n	8005e38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <USB_CoreReset+0x64>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e006      	b.n	8005e82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d0f0      	beq.n	8005e62 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	00030d40 	.word	0x00030d40

08005e94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	7c1b      	ldrb	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d115      	bne.n	8005ed8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	2181      	movs	r1, #129	; 0x81
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f00d faec 	bl	8013492 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f00d fae2 	bl	8013492 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005ed6:	e012      	b.n	8005efe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	2202      	movs	r2, #2
 8005edc:	2181      	movs	r1, #129	; 0x81
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f00d fad7 	bl	8013492 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005eea:	2340      	movs	r3, #64	; 0x40
 8005eec:	2202      	movs	r2, #2
 8005eee:	2101      	movs	r1, #1
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f00d face 	bl	8013492 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005efe:	2308      	movs	r3, #8
 8005f00:	2203      	movs	r2, #3
 8005f02:	2182      	movs	r1, #130	; 0x82
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f00d fac4 	bl	8013492 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005f10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f14:	f00d fd6c 	bl	80139f0 <malloc>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
 8005f30:	e026      	b.n	8005f80 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f38:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7c1b      	ldrb	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f66:	2101      	movs	r1, #1
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f00d fb83 	bl	8013674 <USBD_LL_PrepareReceive>
 8005f6e:	e007      	b.n	8005f80 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	2101      	movs	r1, #1
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f00d fb7a 	bl	8013674 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	460b      	mov	r3, r1
 8005f94:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f9a:	2181      	movs	r1, #129	; 0x81
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f00d fa9e 	bl	80134de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fa8:	2101      	movs	r1, #1
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f00d fa97 	bl	80134de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005fb8:	2182      	movs	r1, #130	; 0x82
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f00d fa8f 	bl	80134de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00e      	beq.n	8005fee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f00d fd0d 	bl	8013a00 <free>
    pdev->pClassData = NULL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006008:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800601e:	2b00      	cmp	r3, #0
 8006020:	d039      	beq.n	8006096 <USBD_CDC_Setup+0x9e>
 8006022:	2b20      	cmp	r3, #32
 8006024:	d17c      	bne.n	8006120 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	88db      	ldrh	r3, [r3, #6]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d029      	beq.n	8006082 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	b25b      	sxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	da11      	bge.n	800605c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006044:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	88d2      	ldrh	r2, [r2, #6]
 800604a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800604c:	6939      	ldr	r1, [r7, #16]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	88db      	ldrh	r3, [r3, #6]
 8006052:	461a      	mov	r2, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 f99b 	bl	8007390 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800605a:	e068      	b.n	800612e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	785a      	ldrb	r2, [r3, #1]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	88db      	ldrh	r3, [r3, #6]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006072:	6939      	ldr	r1, [r7, #16]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	88db      	ldrh	r3, [r3, #6]
 8006078:	461a      	mov	r2, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 f9b6 	bl	80073ec <USBD_CtlPrepareRx>
    break;
 8006080:	e055      	b.n	800612e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	7850      	ldrb	r0, [r2, #1]
 800608e:	2200      	movs	r2, #0
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	4798      	blx	r3
    break;
 8006094:	e04b      	b.n	800612e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	2b0a      	cmp	r3, #10
 800609c:	d017      	beq.n	80060ce <USBD_CDC_Setup+0xd6>
 800609e:	2b0b      	cmp	r3, #11
 80060a0:	d029      	beq.n	80060f6 <USBD_CDC_Setup+0xfe>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d133      	bne.n	800610e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d107      	bne.n	80060c0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	2202      	movs	r2, #2
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 f969 	bl	8007390 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060be:	e02e      	b.n	800611e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 f8f9 	bl	80072ba <USBD_CtlError>
			  ret = USBD_FAIL;
 80060c8:	2302      	movs	r3, #2
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	e027      	b.n	800611e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d107      	bne.n	80060e8 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80060d8:	f107 030f 	add.w	r3, r7, #15
 80060dc:	2201      	movs	r2, #1
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 f955 	bl	8007390 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060e6:	e01a      	b.n	800611e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 f8e5 	bl	80072ba <USBD_CtlError>
			  ret = USBD_FAIL;
 80060f0:	2302      	movs	r3, #2
 80060f2:	75fb      	strb	r3, [r7, #23]
      break;
 80060f4:	e013      	b.n	800611e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d00d      	beq.n	800611c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 f8d9 	bl	80072ba <USBD_CtlError>
			  ret = USBD_FAIL;
 8006108:	2302      	movs	r3, #2
 800610a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800610c:	e006      	b.n	800611c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 f8d2 	bl	80072ba <USBD_CtlError>
      ret = USBD_FAIL;
 8006116:	2302      	movs	r3, #2
 8006118:	75fb      	strb	r3, [r7, #23]
      break;
 800611a:	e000      	b.n	800611e <USBD_CDC_Setup+0x126>
      break;
 800611c:	bf00      	nop
    }
    break;
 800611e:	e006      	b.n	800612e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 f8c9 	bl	80072ba <USBD_CtlError>
    ret = USBD_FAIL;
 8006128:	2302      	movs	r3, #2
 800612a:	75fb      	strb	r3, [r7, #23]
    break;
 800612c:	bf00      	nop
  }

  return ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800614a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006152:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800615a:	2b00      	cmp	r3, #0
 800615c:	d03a      	beq.n	80061d4 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800615e:	78fa      	ldrb	r2, [r7, #3]
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	331c      	adds	r3, #28
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d029      	beq.n	80061c8 <USBD_CDC_DataIn+0x90>
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	331c      	adds	r3, #28
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	78f9      	ldrb	r1, [r7, #3]
 8006188:	68b8      	ldr	r0, [r7, #8]
 800618a:	460b      	mov	r3, r1
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	1a5b      	subs	r3, r3, r1
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4403      	add	r3, r0
 8006194:	3344      	adds	r3, #68	; 0x44
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	fbb2 f1f3 	udiv	r1, r2, r3
 800619c:	fb03 f301 	mul.w	r3, r3, r1
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d110      	bne.n	80061c8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061a6:	78fa      	ldrb	r2, [r7, #3]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	331c      	adds	r3, #28
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80061ba:	78f9      	ldrb	r1, [r7, #3]
 80061bc:	2300      	movs	r3, #0
 80061be:	2200      	movs	r2, #0
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f00d fa34 	bl	801362e <USBD_LL_Transmit>
 80061c6:	e003      	b.n	80061d0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e000      	b.n	80061d6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80061d4:	2302      	movs	r3, #2
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f00d fa5f 	bl	80136ba <USBD_LL_GetRxDataSize>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006222:	4611      	mov	r1, r2
 8006224:	4798      	blx	r3

    return USBD_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	e000      	b.n	800622c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800622a:	2302      	movs	r3, #2
  }
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006242:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800624a:	2b00      	cmp	r3, #0
 800624c:	d015      	beq.n	800627a <USBD_CDC_EP0_RxReady+0x46>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006254:	2bff      	cmp	r3, #255	; 0xff
 8006256:	d010      	beq.n	800627a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006266:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800626e:	b292      	uxth	r2, r2
 8006270:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	22ff      	movs	r2, #255	; 0xff
 8006276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2243      	movs	r2, #67	; 0x43
 8006290:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006292:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20000090 	.word	0x20000090

080062a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2243      	movs	r2, #67	; 0x43
 80062b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	2000004c 	.word	0x2000004c

080062c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2243      	movs	r2, #67	; 0x43
 80062d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	200000d4 	.word	0x200000d4

080062e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	220a      	movs	r2, #10
 80062f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80062f2:	4b03      	ldr	r3, [pc, #12]	; (8006300 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	20000008 	.word	0x20000008

08006304 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800630e:	2302      	movs	r3, #2
 8006310:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006346:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006376:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800639c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d017      	beq.n	80063d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7c1b      	ldrb	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ba:	2101      	movs	r1, #1
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f00d f959 	bl	8013674 <USBD_LL_PrepareReceive>
 80063c2:	e007      	b.n	80063d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ca:	2340      	movs	r3, #64	; 0x40
 80063cc:	2101      	movs	r1, #1
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f00d f950 	bl	8013674 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	e000      	b.n	80063da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80063d8:	2302      	movs	r3, #2
  }
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063f6:	2302      	movs	r3, #2
 80063f8:	e01a      	b.n	8006430 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	79fa      	ldrb	r2, [r7, #7]
 8006426:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f00c ffcb 	bl	80133c4 <USBD_LL_Init>

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	e001      	b.n	800645e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800645a:	2302      	movs	r3, #2
 800645c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f00c fff1 	bl	801345c <USBD_LL_Start>

  return USBD_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80064a6:	2302      	movs	r3, #2
 80064a8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	4611      	mov	r1, r2
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	4611      	mov	r1, r2
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fe95 	bl	8007240 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	2b01      	cmp	r3, #1
 8006538:	d00c      	beq.n	8006554 <USBD_LL_SetupStage+0x56>
 800653a:	2b01      	cmp	r3, #1
 800653c:	d302      	bcc.n	8006544 <USBD_LL_SetupStage+0x46>
 800653e:	2b02      	cmp	r3, #2
 8006540:	d010      	beq.n	8006564 <USBD_LL_SetupStage+0x66>
 8006542:	e017      	b.n	8006574 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa05 	bl	800695c <USBD_StdDevReq>
    break;
 8006552:	e01a      	b.n	800658a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa67 	bl	8006a30 <USBD_StdItfReq>
    break;
 8006562:	e012      	b.n	800658a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 faa5 	bl	8006abc <USBD_StdEPReq>
    break;
 8006572:	e00a      	b.n	800658a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800657a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800657e:	b2db      	uxtb	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f00c ffca 	bl	801351c <USBD_LL_StallEP>
    break;
 8006588:	bf00      	nop
  }

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	460b      	mov	r3, r1
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d14b      	bne.n	8006640 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80065ae:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d134      	bne.n	8006624 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d919      	bls.n	80065fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80065dc:	429a      	cmp	r2, r3
 80065de:	d203      	bcs.n	80065e8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	e002      	b.n	80065ee <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 ff18 	bl	8007428 <USBD_CtlContinueRx>
 80065f8:	e038      	b.n	800666c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800660c:	2b03      	cmp	r3, #3
 800660e:	d105      	bne.n	800661c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 ff15 	bl	800744c <USBD_CtlSendStatus>
 8006622:	e023      	b.n	800666c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800662a:	2b05      	cmp	r3, #5
 800662c:	d11e      	bne.n	800666c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006636:	2100      	movs	r1, #0
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f00c ff6f 	bl	801351c <USBD_LL_StallEP>
 800663e:	e015      	b.n	800666c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00d      	beq.n	8006668 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006652:	2b03      	cmp	r3, #3
 8006654:	d108      	bne.n	8006668 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	7afa      	ldrb	r2, [r7, #11]
 8006660:	4611      	mov	r1, r2
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	4798      	blx	r3
 8006666:	e001      	b.n	800666c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006668:	2302      	movs	r3, #2
 800666a:	e000      	b.n	800666e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	460b      	mov	r3, r1
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d17f      	bne.n	800678a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3314      	adds	r3, #20
 800668e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006696:	2b02      	cmp	r3, #2
 8006698:	d15c      	bne.n	8006754 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d915      	bls.n	80066d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fe82 	bl	80073c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80066c4:	2300      	movs	r3, #0
 80066c6:	2200      	movs	r2, #0
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f00c ffd2 	bl	8013674 <USBD_LL_PrepareReceive>
 80066d0:	e04e      	b.n	8006770 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	6912      	ldr	r2, [r2, #16]
 80066da:	fbb3 f1f2 	udiv	r1, r3, r2
 80066de:	fb02 f201 	mul.w	r2, r2, r1
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11c      	bne.n	8006722 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d316      	bcc.n	8006722 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80066fe:	429a      	cmp	r2, r3
 8006700:	d20f      	bcs.n	8006722 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006702:	2200      	movs	r2, #0
 8006704:	2100      	movs	r1, #0
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fe5e 	bl	80073c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006714:	2300      	movs	r3, #0
 8006716:	2200      	movs	r2, #0
 8006718:	2100      	movs	r1, #0
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f00c ffaa 	bl	8013674 <USBD_LL_PrepareReceive>
 8006720:	e026      	b.n	8006770 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006734:	2b03      	cmp	r3, #3
 8006736:	d105      	bne.n	8006744 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006744:	2180      	movs	r1, #128	; 0x80
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f00c fee8 	bl	801351c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fe90 	bl	8007472 <USBD_CtlReceiveStatus>
 8006752:	e00d      	b.n	8006770 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800675a:	2b04      	cmp	r3, #4
 800675c:	d004      	beq.n	8006768 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f00c fed6 	bl	801351c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006776:	2b01      	cmp	r3, #1
 8006778:	d11d      	bne.n	80067b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fe82 	bl	8006484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006788:	e015      	b.n	80067b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800679c:	2b03      	cmp	r3, #3
 800679e:	d108      	bne.n	80067b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	7afa      	ldrb	r2, [r7, #11]
 80067aa:	4611      	mov	r1, r2
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	4798      	blx	r3
 80067b0:	e001      	b.n	80067b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067b2:	2302      	movs	r3, #2
 80067b4:	e000      	b.n	80067b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067c8:	2340      	movs	r3, #64	; 0x40
 80067ca:	2200      	movs	r2, #0
 80067cc:	2100      	movs	r1, #0
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f00c fe5f 	bl	8013492 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	2200      	movs	r2, #0
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f00c fe51 	bl	8013492 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2240      	movs	r2, #64	; 0x40
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6852      	ldr	r2, [r2, #4]
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	4611      	mov	r1, r2
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
  }

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2204      	movs	r2, #4
 800687a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d10b      	bne.n	80068d8 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6852      	ldr	r2, [r2, #4]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	4611      	mov	r1, r2
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	4798      	blx	r3

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006972:	2b20      	cmp	r3, #32
 8006974:	d004      	beq.n	8006980 <USBD_StdDevReq+0x24>
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d002      	beq.n	8006980 <USBD_StdDevReq+0x24>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <USBD_StdDevReq+0x34>
 800697e:	e04c      	b.n	8006a1a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
    break;
 800698e:	e049      	b.n	8006a24 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b09      	cmp	r3, #9
 8006996:	d83a      	bhi.n	8006a0e <USBD_StdDevReq+0xb2>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <USBD_StdDevReq+0x44>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	08006a05 	.word	0x08006a05
 80069a8:	08006a0f 	.word	0x08006a0f
 80069ac:	080069fb 	.word	0x080069fb
 80069b0:	08006a0f 	.word	0x08006a0f
 80069b4:	080069d3 	.word	0x080069d3
 80069b8:	080069c9 	.word	0x080069c9
 80069bc:	08006a0f 	.word	0x08006a0f
 80069c0:	080069e7 	.word	0x080069e7
 80069c4:	080069dd 	.word	0x080069dd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9d2 	bl	8006d74 <USBD_GetDescriptor>
      break;
 80069d0:	e022      	b.n	8006a18 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fac7 	bl	8006f68 <USBD_SetAddress>
      break;
 80069da:	e01d      	b.n	8006a18 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb04 	bl	8006fec <USBD_SetConfig>
      break;
 80069e4:	e018      	b.n	8006a18 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb8d 	bl	8007108 <USBD_GetConfig>
      break;
 80069ee:	e013      	b.n	8006a18 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fbbc 	bl	8007170 <USBD_GetStatus>
      break;
 80069f8:	e00e      	b.n	8006a18 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fbea 	bl	80071d6 <USBD_SetFeature>
      break;
 8006a02:	e009      	b.n	8006a18 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fbf9 	bl	80071fe <USBD_ClrFeature>
      break;
 8006a0c:	e004      	b.n	8006a18 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fc52 	bl	80072ba <USBD_CtlError>
      break;
 8006a16:	bf00      	nop
    }
    break;
 8006a18:	e004      	b.n	8006a24 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc4c 	bl	80072ba <USBD_CtlError>
    break;
 8006a22:	bf00      	nop
  }

  return ret;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop

08006a30 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d003      	beq.n	8006a52 <USBD_StdItfReq+0x22>
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d001      	beq.n	8006a52 <USBD_StdItfReq+0x22>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d12a      	bne.n	8006aa8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d81d      	bhi.n	8006a9a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	889b      	ldrh	r3, [r3, #4]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d813      	bhi.n	8006a90 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d110      	bne.n	8006aa4 <USBD_StdItfReq+0x74>
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10d      	bne.n	8006aa4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fcdf 	bl	800744c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006a8e:	e009      	b.n	8006aa4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fc11 	bl	80072ba <USBD_CtlError>
      break;
 8006a98:	e004      	b.n	8006aa4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fc0c 	bl	80072ba <USBD_CtlError>
      break;
 8006aa2:	e000      	b.n	8006aa6 <USBD_StdItfReq+0x76>
      break;
 8006aa4:	bf00      	nop
    }
    break;
 8006aa6:	e004      	b.n	8006ab2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fc05 	bl	80072ba <USBD_CtlError>
    break;
 8006ab0:	bf00      	nop
  }

  return USBD_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	889b      	ldrh	r3, [r3, #4]
 8006ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d004      	beq.n	8006ae6 <USBD_StdEPReq+0x2a>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d002      	beq.n	8006ae6 <USBD_StdEPReq+0x2a>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <USBD_StdEPReq+0x3a>
 8006ae4:	e13b      	b.n	8006d5e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
    break;
 8006af4:	e138      	b.n	8006d68 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d10a      	bne.n	8006b18 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	e128      	b.n	8006d6a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d03e      	beq.n	8006b9e <USBD_StdEPReq+0xe2>
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d002      	beq.n	8006b2a <USBD_StdEPReq+0x6e>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d070      	beq.n	8006c0a <USBD_StdEPReq+0x14e>
 8006b28:	e113      	b.n	8006d52 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d002      	beq.n	8006b3a <USBD_StdEPReq+0x7e>
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d015      	beq.n	8006b64 <USBD_StdEPReq+0xa8>
 8006b38:	e02b      	b.n	8006b92 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <USBD_StdEPReq+0x9e>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d009      	beq.n	8006b5a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f00c fce6 	bl	801351c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006b50:	2180      	movs	r1, #128	; 0x80
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f00c fce2 	bl	801351c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b58:	e020      	b.n	8006b9c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbac 	bl	80072ba <USBD_CtlError>
        break;
 8006b62:	e01b      	b.n	8006b9c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	885b      	ldrh	r3, [r3, #2]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10e      	bne.n	8006b8a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <USBD_StdEPReq+0xce>
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d008      	beq.n	8006b8a <USBD_StdEPReq+0xce>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	88db      	ldrh	r3, [r3, #6]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f00c fcc9 	bl	801351c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc5e 	bl	800744c <USBD_CtlSendStatus>

        break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fb90 	bl	80072ba <USBD_CtlError>
        break;
 8006b9a:	bf00      	nop
      }
      break;
 8006b9c:	e0de      	b.n	8006d5c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d002      	beq.n	8006bae <USBD_StdEPReq+0xf2>
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d015      	beq.n	8006bd8 <USBD_StdEPReq+0x11c>
 8006bac:	e026      	b.n	8006bfc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <USBD_StdEPReq+0x112>
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d009      	beq.n	8006bce <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f00c fcac 	bl	801351c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f00c fca8 	bl	801351c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bcc:	e01c      	b.n	8006c08 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fb72 	bl	80072ba <USBD_CtlError>
        break;
 8006bd6:	e017      	b.n	8006c08 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d112      	bne.n	8006c06 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f00c fcb3 	bl	801355a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fc29 	bl	800744c <USBD_CtlSendStatus>
        }
        break;
 8006bfa:	e004      	b.n	8006c06 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb5b 	bl	80072ba <USBD_CtlError>
        break;
 8006c04:	e000      	b.n	8006c08 <USBD_StdEPReq+0x14c>
        break;
 8006c06:	bf00      	nop
      }
      break;
 8006c08:	e0a8      	b.n	8006d5c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d002      	beq.n	8006c1a <USBD_StdEPReq+0x15e>
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d031      	beq.n	8006c7c <USBD_StdEPReq+0x1c0>
 8006c18:	e095      	b.n	8006d46 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <USBD_StdEPReq+0x174>
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d004      	beq.n	8006c30 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fb46 	bl	80072ba <USBD_CtlError>
          break;
 8006c2e:	e08f      	b.n	8006d50 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da0b      	bge.n	8006c50 <USBD_StdEPReq+0x194>
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	3310      	adds	r3, #16
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	e00a      	b.n	8006c66 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2202      	movs	r2, #2
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fb8b 	bl	8007390 <USBD_CtlSendData>
          break;
 8006c7a:	e069      	b.n	8006d50 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	da11      	bge.n	8006ca8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	f003 020f 	and.w	r2, r3, #15
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	3318      	adds	r3, #24
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d117      	bne.n	8006cce <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb0a 	bl	80072ba <USBD_CtlError>
            break;
 8006ca6:	e053      	b.n	8006d50 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	f003 020f 	and.w	r2, r3, #15
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 faf7 	bl	80072ba <USBD_CtlError>
            break;
 8006ccc:	e040      	b.n	8006d50 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006cce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da0b      	bge.n	8006cee <USBD_StdEPReq+0x232>
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	3310      	adds	r3, #16
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	3304      	adds	r3, #4
 8006cec:	e00a      	b.n	8006d04 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <USBD_StdEPReq+0x256>
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2b80      	cmp	r3, #128	; 0x80
 8006d10:	d103      	bne.n	8006d1a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e00e      	b.n	8006d38 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f00c fc3a 	bl	8013598 <USBD_LL_IsStallEP>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e002      	b.n	8006d38 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb26 	bl	8007390 <USBD_CtlSendData>
          break;
 8006d44:	e004      	b.n	8006d50 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fab6 	bl	80072ba <USBD_CtlError>
        break;
 8006d4e:	bf00      	nop
      }
      break;
 8006d50:	e004      	b.n	8006d5c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fab0 	bl	80072ba <USBD_CtlError>
      break;
 8006d5a:	bf00      	nop
    }
    break;
 8006d5c:	e004      	b.n	8006d68 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 faaa 	bl	80072ba <USBD_CtlError>
    break;
 8006d66:	bf00      	nop
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	885b      	ldrh	r3, [r3, #2]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	2b06      	cmp	r3, #6
 8006d8a:	f200 80c9 	bhi.w	8006f20 <USBD_GetDescriptor+0x1ac>
 8006d8e:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <USBD_GetDescriptor+0x20>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006db1 	.word	0x08006db1
 8006d98:	08006dc9 	.word	0x08006dc9
 8006d9c:	08006e09 	.word	0x08006e09
 8006da0:	08006f21 	.word	0x08006f21
 8006da4:	08006f21 	.word	0x08006f21
 8006da8:	08006ecd 	.word	0x08006ecd
 8006dac:	08006ef3 	.word	0x08006ef3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	7c12      	ldrb	r2, [r2, #16]
 8006dbc:	f107 010a 	add.w	r1, r7, #10
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
    break;
 8006dc6:	e0b0      	b.n	8006f2a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7c1b      	ldrb	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10d      	bne.n	8006dec <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	f107 020a 	add.w	r2, r7, #10
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4798      	blx	r3
 8006de0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	2202      	movs	r2, #2
 8006de8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006dea:	e09e      	b.n	8006f2a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	f107 020a 	add.w	r2, r7, #10
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
 8006dfc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	2202      	movs	r2, #2
 8006e04:	701a      	strb	r2, [r3, #0]
    break;
 8006e06:	e090      	b.n	8006f2a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	885b      	ldrh	r3, [r3, #2]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d856      	bhi.n	8006ec0 <USBD_GetDescriptor+0x14c>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_GetDescriptor+0xa4>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e49 	.word	0x08006e49
 8006e20:	08006e61 	.word	0x08006e61
 8006e24:	08006e79 	.word	0x08006e79
 8006e28:	08006e91 	.word	0x08006e91
 8006e2c:	08006ea9 	.word	0x08006ea9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7c12      	ldrb	r2, [r2, #16]
 8006e3c:	f107 010a 	add.w	r1, r7, #10
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
      break;
 8006e46:	e040      	b.n	8006eca <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 010a 	add.w	r1, r7, #10
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
      break;
 8006e5e:	e034      	b.n	8006eca <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	7c12      	ldrb	r2, [r2, #16]
 8006e6c:	f107 010a 	add.w	r1, r7, #10
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	60f8      	str	r0, [r7, #12]
      break;
 8006e76:	e028      	b.n	8006eca <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7c12      	ldrb	r2, [r2, #16]
 8006e84:	f107 010a 	add.w	r1, r7, #10
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
      break;
 8006e8e:	e01c      	b.n	8006eca <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 010a 	add.w	r1, r7, #10
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
      break;
 8006ea6:	e010      	b.n	8006eca <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	7c12      	ldrb	r2, [r2, #16]
 8006eb4:	f107 010a 	add.w	r1, r7, #10
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4798      	blx	r3
 8006ebc:	60f8      	str	r0, [r7, #12]
      break;
 8006ebe:	e004      	b.n	8006eca <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f9f9 	bl	80072ba <USBD_CtlError>
      return;
 8006ec8:	e04b      	b.n	8006f62 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006eca:	e02e      	b.n	8006f2a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7c1b      	ldrb	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d109      	bne.n	8006ee8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006edc:	f107 020a 	add.w	r2, r7, #10
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
      break;
 8006ee6:	e020      	b.n	8006f2a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9e5 	bl	80072ba <USBD_CtlError>
      return;
 8006ef0:	e037      	b.n	8006f62 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	7c1b      	ldrb	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f107 020a 	add.w	r2, r7, #10
 8006f06:	4610      	mov	r0, r2
 8006f08:	4798      	blx	r3
 8006f0a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	2207      	movs	r2, #7
 8006f12:	701a      	strb	r2, [r3, #0]
      break;
 8006f14:	e009      	b.n	8006f2a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f9ce 	bl	80072ba <USBD_CtlError>
      return;
 8006f1e:	e020      	b.n	8006f62 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f9c9 	bl	80072ba <USBD_CtlError>
    return;
 8006f28:	e01b      	b.n	8006f62 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006f2a:	897b      	ldrh	r3, [r7, #10]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d011      	beq.n	8006f54 <USBD_GetDescriptor+0x1e0>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	88db      	ldrh	r3, [r3, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00d      	beq.n	8006f54 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	88da      	ldrh	r2, [r3, #6]
 8006f3c:	897b      	ldrh	r3, [r7, #10]
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	bf28      	it	cs
 8006f42:	4613      	movcs	r3, r2
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006f48:	897b      	ldrh	r3, [r7, #10]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68f9      	ldr	r1, [r7, #12]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fa1e 	bl	8007390 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	88db      	ldrh	r3, [r3, #6]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fa75 	bl	800744c <USBD_CtlSendStatus>
  }
}
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	889b      	ldrh	r3, [r3, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d130      	bne.n	8006fdc <USBD_SetAddress+0x74>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88db      	ldrh	r3, [r3, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d12c      	bne.n	8006fdc <USBD_SetAddress+0x74>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	885b      	ldrh	r3, [r3, #2]
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
 8006f88:	d828      	bhi.n	8006fdc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	885b      	ldrh	r3, [r3, #2]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d104      	bne.n	8006faa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f989 	bl	80072ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa8:	e01c      	b.n	8006fe4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	7bfa      	ldrb	r2, [r7, #15]
 8006fae:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f00c fb1a 	bl	80135f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fa45 	bl	800744c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd0:	e008      	b.n	8006fe4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fda:	e003      	b.n	8006fe4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f96b 	bl	80072ba <USBD_CtlError>
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	885b      	ldrh	r3, [r3, #2]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	4b41      	ldr	r3, [pc, #260]	; (8007104 <USBD_SetConfig+0x118>)
 8006ffe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007000:	4b40      	ldr	r3, [pc, #256]	; (8007104 <USBD_SetConfig+0x118>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d904      	bls.n	8007012 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f955 	bl	80072ba <USBD_CtlError>
 8007010:	e075      	b.n	80070fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007018:	2b02      	cmp	r3, #2
 800701a:	d002      	beq.n	8007022 <USBD_SetConfig+0x36>
 800701c:	2b03      	cmp	r3, #3
 800701e:	d023      	beq.n	8007068 <USBD_SetConfig+0x7c>
 8007020:	e062      	b.n	80070e8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007022:	4b38      	ldr	r3, [pc, #224]	; (8007104 <USBD_SetConfig+0x118>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01a      	beq.n	8007060 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800702a:	4b36      	ldr	r3, [pc, #216]	; (8007104 <USBD_SetConfig+0x118>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2203      	movs	r2, #3
 8007038:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800703c:	4b31      	ldr	r3, [pc, #196]	; (8007104 <USBD_SetConfig+0x118>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fa29 	bl	800649a <USBD_SetClassConfig>
 8007048:	4603      	mov	r3, r0
 800704a:	2b02      	cmp	r3, #2
 800704c:	d104      	bne.n	8007058 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f932 	bl	80072ba <USBD_CtlError>
          return;
 8007056:	e052      	b.n	80070fe <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f9f7 	bl	800744c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800705e:	e04e      	b.n	80070fe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f9f3 	bl	800744c <USBD_CtlSendStatus>
      break;
 8007066:	e04a      	b.n	80070fe <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007068:	4b26      	ldr	r3, [pc, #152]	; (8007104 <USBD_SetConfig+0x118>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d112      	bne.n	8007096 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007078:	4b22      	ldr	r3, [pc, #136]	; (8007104 <USBD_SetConfig+0x118>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007082:	4b20      	ldr	r3, [pc, #128]	; (8007104 <USBD_SetConfig+0x118>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff fa25 	bl	80064d8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f9dc 	bl	800744c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007094:	e033      	b.n	80070fe <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007096:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <USBD_SetConfig+0x118>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d01d      	beq.n	80070e0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fa13 	bl	80064d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070b2:	4b14      	ldr	r3, [pc, #80]	; (8007104 <USBD_SetConfig+0x118>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <USBD_SetConfig+0x118>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff f9e9 	bl	800649a <USBD_SetClassConfig>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d104      	bne.n	80070d8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8f2 	bl	80072ba <USBD_CtlError>
          return;
 80070d6:	e012      	b.n	80070fe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f9b7 	bl	800744c <USBD_CtlSendStatus>
      break;
 80070de:	e00e      	b.n	80070fe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9b3 	bl	800744c <USBD_CtlSendStatus>
      break;
 80070e6:	e00a      	b.n	80070fe <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8e5 	bl	80072ba <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <USBD_SetConfig+0x118>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff f9ee 	bl	80064d8 <USBD_ClrClassConfig>
      break;
 80070fc:	bf00      	nop
    }
  }
}
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000208 	.word	0x20000208

08007108 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	88db      	ldrh	r3, [r3, #6]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d004      	beq.n	8007124 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f8cc 	bl	80072ba <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007122:	e021      	b.n	8007168 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800712a:	2b01      	cmp	r3, #1
 800712c:	db17      	blt.n	800715e <USBD_GetConfig+0x56>
 800712e:	2b02      	cmp	r3, #2
 8007130:	dd02      	ble.n	8007138 <USBD_GetConfig+0x30>
 8007132:	2b03      	cmp	r3, #3
 8007134:	d00b      	beq.n	800714e <USBD_GetConfig+0x46>
 8007136:	e012      	b.n	800715e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3308      	adds	r3, #8
 8007142:	2201      	movs	r2, #1
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f922 	bl	8007390 <USBD_CtlSendData>
      break;
 800714c:	e00c      	b.n	8007168 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	2201      	movs	r2, #1
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f91a 	bl	8007390 <USBD_CtlSendData>
      break;
 800715c:	e004      	b.n	8007168 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f8aa 	bl	80072ba <USBD_CtlError>
      break;
 8007166:	bf00      	nop
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007180:	3b01      	subs	r3, #1
 8007182:	2b02      	cmp	r3, #2
 8007184:	d81e      	bhi.n	80071c4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	88db      	ldrh	r3, [r3, #6]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d004      	beq.n	8007198 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f892 	bl	80072ba <USBD_CtlError>
      break;
 8007196:	e01a      	b.n	80071ce <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f043 0202 	orr.w	r2, r3, #2
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	330c      	adds	r3, #12
 80071b8:	2202      	movs	r2, #2
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f8e7 	bl	8007390 <USBD_CtlSendData>
    break;
 80071c2:	e004      	b.n	80071ce <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f877 	bl	80072ba <USBD_CtlError>
    break;
 80071cc:	bf00      	nop
  }
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	885b      	ldrh	r3, [r3, #2]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d106      	bne.n	80071f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f92b 	bl	800744c <USBD_CtlSendStatus>
  }

}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800720e:	3b01      	subs	r3, #1
 8007210:	2b02      	cmp	r3, #2
 8007212:	d80b      	bhi.n	800722c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	885b      	ldrh	r3, [r3, #2]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d10c      	bne.n	8007236 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f911 	bl	800744c <USBD_CtlSendStatus>
    }
    break;
 800722a:	e004      	b.n	8007236 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f843 	bl	80072ba <USBD_CtlError>
    break;
 8007234:	e000      	b.n	8007238 <USBD_ClrFeature+0x3a>
    break;
 8007236:	bf00      	nop
  }
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781a      	ldrb	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	785a      	ldrb	r2, [r3, #1]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	3302      	adds	r3, #2
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b29a      	uxth	r2, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	3303      	adds	r3, #3
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	b29b      	uxth	r3, r3
 800726e:	4413      	add	r3, r2
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	3304      	adds	r3, #4
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b29a      	uxth	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	3305      	adds	r3, #5
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	b29b      	uxth	r3, r3
 800728a:	4413      	add	r3, r2
 800728c:	b29a      	uxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	3306      	adds	r3, #6
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b29a      	uxth	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	3307      	adds	r3, #7
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	80da      	strh	r2, [r3, #6]

}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80072c4:	2180      	movs	r1, #128	; 0x80
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f00c f928 	bl	801351c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f00c f924 	bl	801351c <USBD_LL_StallEP>
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d032      	beq.n	8007358 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f834 	bl	8007360 <USBD_GetLen>
 80072f8:	4603      	mov	r3, r0
 80072fa:	3301      	adds	r3, #1
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	75fa      	strb	r2, [r7, #23]
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4413      	add	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	7812      	ldrb	r2, [r2, #0]
 8007316:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	75fa      	strb	r2, [r7, #23]
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4413      	add	r3, r2
 8007324:	2203      	movs	r2, #3
 8007326:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007328:	e012      	b.n	8007350 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	60fa      	str	r2, [r7, #12]
 8007330:	7dfa      	ldrb	r2, [r7, #23]
 8007332:	1c51      	adds	r1, r2, #1
 8007334:	75f9      	strb	r1, [r7, #23]
 8007336:	4611      	mov	r1, r2
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	440a      	add	r2, r1
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	75fa      	strb	r2, [r7, #23]
 8007346:	461a      	mov	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4413      	add	r3, r2
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e8      	bne.n	800732a <USBD_GetString+0x4e>
    }
  }
}
 8007358:	bf00      	nop
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800736c:	e005      	b.n	800737a <USBD_GetLen+0x1a>
    {
        len++;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	3301      	adds	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3301      	adds	r3, #1
 8007378:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f5      	bne.n	800736e <USBD_GetLen+0xe>
    }

    return len;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80073ac:	88fa      	ldrh	r2, [r7, #6]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	2100      	movs	r1, #0
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f00c f938 	bl	801362e <USBD_LL_Transmit>

  return USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	2100      	movs	r1, #0
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f00c f926 	bl	801362e <USBD_LL_Transmit>

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2203      	movs	r2, #3
 80073fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	2100      	movs	r1, #0
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f00c f92b 	bl	8013674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	2100      	movs	r1, #0
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f00c f919 	bl	8013674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2204      	movs	r2, #4
 8007458:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800745c:	2300      	movs	r3, #0
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f00c f8e3 	bl	801362e <USBD_LL_Transmit>

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2205      	movs	r2, #5
 800747e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007482:	2300      	movs	r3, #0
 8007484:	2200      	movs	r2, #0
 8007486:	2100      	movs	r1, #0
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f00c f8f3 	bl	8013674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	ba5b      	rev16	r3, r3
 80074a6:	b29b      	uxth	r3, r3
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	061a      	lsls	r2, r3, #24
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	0e1b      	lsrs	r3, r3, #24
 80074d8:	4313      	orrs	r3, r2
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80074f0:	f000 f8a6 	bl	8007640 <mem_init>
  memp_init();
 80074f4:	f000 fb3a 	bl	8007b6c <memp_init>
  pbuf_init();
  netif_init();
 80074f8:	f000 fbf2 	bl	8007ce0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80074fc:	f005 ffac 	bl	800d458 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007500:	f001 fb4c 	bl	8008b9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8007504:	f005 fedc 	bl	800d2c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007518:	4b40      	ldr	r3, [pc, #256]	; (800761c <plug_holes+0x10c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	429a      	cmp	r2, r3
 8007520:	d206      	bcs.n	8007530 <plug_holes+0x20>
 8007522:	4b3f      	ldr	r3, [pc, #252]	; (8007620 <plug_holes+0x110>)
 8007524:	f240 125d 	movw	r2, #349	; 0x15d
 8007528:	493e      	ldr	r1, [pc, #248]	; (8007624 <plug_holes+0x114>)
 800752a:	483f      	ldr	r0, [pc, #252]	; (8007628 <plug_holes+0x118>)
 800752c:	f00c fb3a 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007530:	4b3e      	ldr	r3, [pc, #248]	; (800762c <plug_holes+0x11c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d306      	bcc.n	8007548 <plug_holes+0x38>
 800753a:	4b39      	ldr	r3, [pc, #228]	; (8007620 <plug_holes+0x110>)
 800753c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007540:	493b      	ldr	r1, [pc, #236]	; (8007630 <plug_holes+0x120>)
 8007542:	4839      	ldr	r0, [pc, #228]	; (8007628 <plug_holes+0x118>)
 8007544:	f00c fb2e 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <plug_holes+0x4e>
 8007550:	4b33      	ldr	r3, [pc, #204]	; (8007620 <plug_holes+0x110>)
 8007552:	f240 125f 	movw	r2, #351	; 0x15f
 8007556:	4937      	ldr	r1, [pc, #220]	; (8007634 <plug_holes+0x124>)
 8007558:	4833      	ldr	r0, [pc, #204]	; (8007628 <plug_holes+0x118>)
 800755a:	f00c fb23 	bl	8013ba4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007566:	d906      	bls.n	8007576 <plug_holes+0x66>
 8007568:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <plug_holes+0x110>)
 800756a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800756e:	4932      	ldr	r1, [pc, #200]	; (8007638 <plug_holes+0x128>)
 8007570:	482d      	ldr	r0, [pc, #180]	; (8007628 <plug_holes+0x118>)
 8007572:	f00c fb17 	bl	8013ba4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8007576:	4b29      	ldr	r3, [pc, #164]	; (800761c <plug_holes+0x10c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	8812      	ldrh	r2, [r2, #0]
 800757e:	4413      	add	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	429a      	cmp	r2, r3
 8007588:	d01f      	beq.n	80075ca <plug_holes+0xba>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11b      	bne.n	80075ca <plug_holes+0xba>
 8007592:	4b26      	ldr	r3, [pc, #152]	; (800762c <plug_holes+0x11c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	429a      	cmp	r2, r3
 800759a:	d016      	beq.n	80075ca <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800759c:	4b27      	ldr	r3, [pc, #156]	; (800763c <plug_holes+0x12c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d102      	bne.n	80075ac <plug_holes+0x9c>
      lfree = mem;
 80075a6:	4a25      	ldr	r2, [pc, #148]	; (800763c <plug_holes+0x12c>)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	881a      	ldrh	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a19      	ldr	r2, [pc, #100]	; (800761c <plug_holes+0x10c>)
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	1a99      	subs	r1, r3, r2
 80075bc:	4b17      	ldr	r3, [pc, #92]	; (800761c <plug_holes+0x10c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	8812      	ldrh	r2, [r2, #0]
 80075c4:	4413      	add	r3, r2
 80075c6:	b28a      	uxth	r2, r1
 80075c8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80075ca:	4b14      	ldr	r3, [pc, #80]	; (800761c <plug_holes+0x10c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	8852      	ldrh	r2, [r2, #2]
 80075d2:	4413      	add	r3, r2
 80075d4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d01a      	beq.n	8007614 <plug_holes+0x104>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <plug_holes+0x12c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d102      	bne.n	80075f6 <plug_holes+0xe6>
      lfree = pmem;
 80075f0:	4a12      	ldr	r2, [pc, #72]	; (800763c <plug_holes+0x12c>)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	881a      	ldrh	r2, [r3, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4a06      	ldr	r2, [pc, #24]	; (800761c <plug_holes+0x10c>)
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	1a99      	subs	r1, r3, r2
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <plug_holes+0x10c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	8812      	ldrh	r2, [r2, #0]
 800760e:	4413      	add	r3, r2
 8007610:	b28a      	uxth	r2, r1
 8007612:	805a      	strh	r2, [r3, #2]
  }
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	2000020c 	.word	0x2000020c
 8007620:	0801489c 	.word	0x0801489c
 8007624:	080148cc 	.word	0x080148cc
 8007628:	080148e4 	.word	0x080148e4
 800762c:	20000210 	.word	0x20000210
 8007630:	0801490c 	.word	0x0801490c
 8007634:	08014928 	.word	0x08014928
 8007638:	08014944 	.word	0x08014944
 800763c:	20000214 	.word	0x20000214

08007640 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007646:	4b19      	ldr	r3, [pc, #100]	; (80076ac <mem_init+0x6c>)
 8007648:	3303      	adds	r3, #3
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	461a      	mov	r2, r3
 8007650:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <mem_init+0x70>)
 8007652:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007654:	4b16      	ldr	r3, [pc, #88]	; (80076b0 <mem_init+0x70>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007660:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800766e:	4b10      	ldr	r3, [pc, #64]	; (80076b0 <mem_init+0x70>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8007676:	4a0f      	ldr	r2, [pc, #60]	; (80076b4 <mem_init+0x74>)
 8007678:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <mem_init+0x74>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007682:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <mem_init+0x74>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800768a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <mem_init+0x74>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007694:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <mem_init+0x70>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a07      	ldr	r2, [pc, #28]	; (80076b8 <mem_init+0x78>)
 800769c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	200003b0 	.word	0x200003b0
 80076b0:	2000020c 	.word	0x2000020c
 80076b4:	20000210 	.word	0x20000210
 80076b8:	20000214 	.word	0x20000214

080076bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d043      	beq.n	8007752 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <mem_free+0x26>
 80076d4:	4b22      	ldr	r3, [pc, #136]	; (8007760 <mem_free+0xa4>)
 80076d6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80076da:	4922      	ldr	r1, [pc, #136]	; (8007764 <mem_free+0xa8>)
 80076dc:	4822      	ldr	r0, [pc, #136]	; (8007768 <mem_free+0xac>)
 80076de:	f00c fa61 	bl	8013ba4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80076e2:	4b22      	ldr	r3, [pc, #136]	; (800776c <mem_free+0xb0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d304      	bcc.n	80076f6 <mem_free+0x3a>
 80076ec:	4b20      	ldr	r3, [pc, #128]	; (8007770 <mem_free+0xb4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d306      	bcc.n	8007704 <mem_free+0x48>
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <mem_free+0xa4>)
 80076f8:	f240 12af 	movw	r2, #431	; 0x1af
 80076fc:	491d      	ldr	r1, [pc, #116]	; (8007774 <mem_free+0xb8>)
 80076fe:	481a      	ldr	r0, [pc, #104]	; (8007768 <mem_free+0xac>)
 8007700:	f00c fa50 	bl	8013ba4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007704:	4b19      	ldr	r3, [pc, #100]	; (800776c <mem_free+0xb0>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	429a      	cmp	r2, r3
 800770c:	d323      	bcc.n	8007756 <mem_free+0x9a>
 800770e:	4b18      	ldr	r3, [pc, #96]	; (8007770 <mem_free+0xb4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d21e      	bcs.n	8007756 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3b08      	subs	r3, #8
 800771c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <mem_free+0x78>
 8007726:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <mem_free+0xa4>)
 8007728:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800772c:	4912      	ldr	r1, [pc, #72]	; (8007778 <mem_free+0xbc>)
 800772e:	480e      	ldr	r0, [pc, #56]	; (8007768 <mem_free+0xac>)
 8007730:	f00c fa38 	bl	8013ba4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800773a:	4b10      	ldr	r3, [pc, #64]	; (800777c <mem_free+0xc0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	d202      	bcs.n	800774a <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007744:	4a0d      	ldr	r2, [pc, #52]	; (800777c <mem_free+0xc0>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff fee0 	bl	8007510 <plug_holes>
 8007750:	e002      	b.n	8007758 <mem_free+0x9c>
    return;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <mem_free+0x9c>
    return;
 8007756:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	0801489c 	.word	0x0801489c
 8007764:	08014970 	.word	0x08014970
 8007768:	080148e4 	.word	0x080148e4
 800776c:	2000020c 	.word	0x2000020c
 8007770:	20000210 	.word	0x20000210
 8007774:	08014994 	.word	0x08014994
 8007778:	080149ac 	.word	0x080149ac
 800777c:	20000214 	.word	0x20000214

08007780 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800778c:	887b      	ldrh	r3, [r7, #2]
 800778e:	3303      	adds	r3, #3
 8007790:	b29b      	uxth	r3, r3
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8007798:	887b      	ldrh	r3, [r7, #2]
 800779a:	2b0b      	cmp	r3, #11
 800779c:	d801      	bhi.n	80077a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800779e:	230c      	movs	r3, #12
 80077a0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80077a2:	887b      	ldrh	r3, [r7, #2]
 80077a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80077a8:	d901      	bls.n	80077ae <mem_trim+0x2e>
    return NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e0b1      	b.n	8007912 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80077ae:	4b5b      	ldr	r3, [pc, #364]	; (800791c <mem_trim+0x19c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d304      	bcc.n	80077c2 <mem_trim+0x42>
 80077b8:	4b59      	ldr	r3, [pc, #356]	; (8007920 <mem_trim+0x1a0>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d306      	bcc.n	80077d0 <mem_trim+0x50>
 80077c2:	4b58      	ldr	r3, [pc, #352]	; (8007924 <mem_trim+0x1a4>)
 80077c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80077c8:	4957      	ldr	r1, [pc, #348]	; (8007928 <mem_trim+0x1a8>)
 80077ca:	4858      	ldr	r0, [pc, #352]	; (800792c <mem_trim+0x1ac>)
 80077cc:	f00c f9ea 	bl	8013ba4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80077d0:	4b52      	ldr	r3, [pc, #328]	; (800791c <mem_trim+0x19c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d304      	bcc.n	80077e4 <mem_trim+0x64>
 80077da:	4b51      	ldr	r3, [pc, #324]	; (8007920 <mem_trim+0x1a0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d301      	bcc.n	80077e8 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	e094      	b.n	8007912 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3b08      	subs	r3, #8
 80077ec:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	4a4a      	ldr	r2, [pc, #296]	; (800791c <mem_trim+0x19c>)
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	1a9b      	subs	r3, r3, r2
 80077f6:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	8a7b      	ldrh	r3, [r7, #18]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	b29b      	uxth	r3, r3
 8007802:	3b08      	subs	r3, #8
 8007804:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007806:	887a      	ldrh	r2, [r7, #2]
 8007808:	8a3b      	ldrh	r3, [r7, #16]
 800780a:	429a      	cmp	r2, r3
 800780c:	d906      	bls.n	800781c <mem_trim+0x9c>
 800780e:	4b45      	ldr	r3, [pc, #276]	; (8007924 <mem_trim+0x1a4>)
 8007810:	f240 2206 	movw	r2, #518	; 0x206
 8007814:	4946      	ldr	r1, [pc, #280]	; (8007930 <mem_trim+0x1b0>)
 8007816:	4845      	ldr	r0, [pc, #276]	; (800792c <mem_trim+0x1ac>)
 8007818:	f00c f9c4 	bl	8013ba4 <iprintf>
  if (newsize > size) {
 800781c:	887a      	ldrh	r2, [r7, #2]
 800781e:	8a3b      	ldrh	r3, [r7, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d901      	bls.n	8007828 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8007824:	2300      	movs	r3, #0
 8007826:	e074      	b.n	8007912 <mem_trim+0x192>
  }
  if (newsize == size) {
 8007828:	887a      	ldrh	r2, [r7, #2]
 800782a:	8a3b      	ldrh	r3, [r7, #16]
 800782c:	429a      	cmp	r2, r3
 800782e:	d101      	bne.n	8007834 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	e06e      	b.n	8007912 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007834:	4b39      	ldr	r3, [pc, #228]	; (800791c <mem_trim+0x19c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	8812      	ldrh	r2, [r2, #0]
 800783c:	4413      	add	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	791b      	ldrb	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d131      	bne.n	80078ac <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800784e:	8a7a      	ldrh	r2, [r7, #18]
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	4413      	add	r3, r2
 8007854:	b29b      	uxth	r3, r3
 8007856:	3308      	adds	r3, #8
 8007858:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800785a:	4b36      	ldr	r3, [pc, #216]	; (8007934 <mem_trim+0x1b4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	429a      	cmp	r2, r3
 8007862:	d105      	bne.n	8007870 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007864:	4b2d      	ldr	r3, [pc, #180]	; (800791c <mem_trim+0x19c>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	897b      	ldrh	r3, [r7, #10]
 800786a:	4413      	add	r3, r2
 800786c:	4a31      	ldr	r2, [pc, #196]	; (8007934 <mem_trim+0x1b4>)
 800786e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007870:	4b2a      	ldr	r3, [pc, #168]	; (800791c <mem_trim+0x19c>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	897b      	ldrh	r3, [r7, #10]
 8007876:	4413      	add	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	893a      	ldrh	r2, [r7, #8]
 8007884:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8a7a      	ldrh	r2, [r7, #18]
 800788a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	897a      	ldrh	r2, [r7, #10]
 8007890:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800789a:	d039      	beq.n	8007910 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800789c:	4b1f      	ldr	r3, [pc, #124]	; (800791c <mem_trim+0x19c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	8812      	ldrh	r2, [r2, #0]
 80078a4:	4413      	add	r3, r2
 80078a6:	897a      	ldrh	r2, [r7, #10]
 80078a8:	805a      	strh	r2, [r3, #2]
 80078aa:	e031      	b.n	8007910 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	f103 0214 	add.w	r2, r3, #20
 80078b2:	8a3b      	ldrh	r3, [r7, #16]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d82b      	bhi.n	8007910 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80078b8:	8a7a      	ldrh	r2, [r7, #18]
 80078ba:	887b      	ldrh	r3, [r7, #2]
 80078bc:	4413      	add	r3, r2
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3308      	adds	r3, #8
 80078c2:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80078c4:	4b15      	ldr	r3, [pc, #84]	; (800791c <mem_trim+0x19c>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	897b      	ldrh	r3, [r7, #10]
 80078ca:	4413      	add	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 80078ce:	4b19      	ldr	r3, [pc, #100]	; (8007934 <mem_trim+0x1b4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d202      	bcs.n	80078de <mem_trim+0x15e>
      lfree = mem2;
 80078d8:	4a16      	ldr	r2, [pc, #88]	; (8007934 <mem_trim+0x1b4>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	881a      	ldrh	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8a7a      	ldrh	r2, [r7, #18]
 80078f0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	897a      	ldrh	r2, [r7, #10]
 80078f6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007900:	d006      	beq.n	8007910 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007902:	4b06      	ldr	r3, [pc, #24]	; (800791c <mem_trim+0x19c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	8812      	ldrh	r2, [r2, #0]
 800790a:	4413      	add	r3, r2
 800790c:	897a      	ldrh	r2, [r7, #10]
 800790e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007910:	687b      	ldr	r3, [r7, #4]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	2000020c 	.word	0x2000020c
 8007920:	20000210 	.word	0x20000210
 8007924:	0801489c 	.word	0x0801489c
 8007928:	080149c0 	.word	0x080149c0
 800792c:	080148e4 	.word	0x080148e4
 8007930:	080149d8 	.word	0x080149d8
 8007934:	20000214 	.word	0x20000214

08007938 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <mem_malloc+0x14>
    return NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	e0c8      	b.n	8007ade <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	3303      	adds	r3, #3
 8007950:	b29b      	uxth	r3, r3
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	2b0b      	cmp	r3, #11
 800795c:	d801      	bhi.n	8007962 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800795e:	230c      	movs	r3, #12
 8007960:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007968:	d901      	bls.n	800796e <mem_malloc+0x36>
    return NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	e0b7      	b.n	8007ade <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800796e:	4b5e      	ldr	r3, [pc, #376]	; (8007ae8 <mem_malloc+0x1b0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	4b5d      	ldr	r3, [pc, #372]	; (8007aec <mem_malloc+0x1b4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	83fb      	strh	r3, [r7, #30]
 800797c:	e0a7      	b.n	8007ace <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800797e:	4b5b      	ldr	r3, [pc, #364]	; (8007aec <mem_malloc+0x1b4>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	8bfb      	ldrh	r3, [r7, #30]
 8007984:	4413      	add	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	791b      	ldrb	r3, [r3, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 8098 	bne.w	8007ac2 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	8bfb      	ldrh	r3, [r7, #30]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	f1a3 0208 	sub.w	r2, r3, #8
 80079a0:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80079a2:	429a      	cmp	r2, r3
 80079a4:	f0c0 808d 	bcc.w	8007ac2 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	8bfb      	ldrh	r3, [r7, #30]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f1a3 0208 	sub.w	r2, r3, #8
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	3314      	adds	r3, #20
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d327      	bcc.n	8007a0e <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80079be:	8bfa      	ldrh	r2, [r7, #30]
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	4413      	add	r3, r2
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3308      	adds	r3, #8
 80079c8:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80079ca:	4b48      	ldr	r3, [pc, #288]	; (8007aec <mem_malloc+0x1b4>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	8a7b      	ldrh	r3, [r7, #18]
 80079d0:	4413      	add	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	881a      	ldrh	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8bfa      	ldrh	r2, [r7, #30]
 80079e6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	8a7a      	ldrh	r2, [r7, #18]
 80079ec:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2201      	movs	r2, #1
 80079f2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079fc:	d00a      	beq.n	8007a14 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80079fe:	4b3b      	ldr	r3, [pc, #236]	; (8007aec <mem_malloc+0x1b4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	8812      	ldrh	r2, [r2, #0]
 8007a06:	4413      	add	r3, r2
 8007a08:	8a7a      	ldrh	r2, [r7, #18]
 8007a0a:	805a      	strh	r2, [r3, #2]
 8007a0c:	e002      	b.n	8007a14 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2201      	movs	r2, #1
 8007a12:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007a14:	4b34      	ldr	r3, [pc, #208]	; (8007ae8 <mem_malloc+0x1b0>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d127      	bne.n	8007a6e <mem_malloc+0x136>
          struct mem *cur = lfree;
 8007a1e:	4b32      	ldr	r3, [pc, #200]	; (8007ae8 <mem_malloc+0x1b0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007a24:	e005      	b.n	8007a32 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8007a26:	4b31      	ldr	r3, [pc, #196]	; (8007aec <mem_malloc+0x1b4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	8812      	ldrh	r2, [r2, #0]
 8007a2e:	4413      	add	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	791b      	ldrb	r3, [r3, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <mem_malloc+0x10c>
 8007a3a:	4b2d      	ldr	r3, [pc, #180]	; (8007af0 <mem_malloc+0x1b8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d1f0      	bne.n	8007a26 <mem_malloc+0xee>
          }
          lfree = cur;
 8007a44:	4a28      	ldr	r2, [pc, #160]	; (8007ae8 <mem_malloc+0x1b0>)
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007a4a:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <mem_malloc+0x1b0>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b28      	ldr	r3, [pc, #160]	; (8007af0 <mem_malloc+0x1b8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d00b      	beq.n	8007a6e <mem_malloc+0x136>
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <mem_malloc+0x1b0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	791b      	ldrb	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d006      	beq.n	8007a6e <mem_malloc+0x136>
 8007a60:	4b24      	ldr	r3, [pc, #144]	; (8007af4 <mem_malloc+0x1bc>)
 8007a62:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007a66:	4924      	ldr	r1, [pc, #144]	; (8007af8 <mem_malloc+0x1c0>)
 8007a68:	4824      	ldr	r0, [pc, #144]	; (8007afc <mem_malloc+0x1c4>)
 8007a6a:	f00c f89b 	bl	8013ba4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	4413      	add	r3, r2
 8007a74:	3308      	adds	r3, #8
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <mem_malloc+0x1b8>)
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d906      	bls.n	8007a8c <mem_malloc+0x154>
 8007a7e:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <mem_malloc+0x1bc>)
 8007a80:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007a84:	491e      	ldr	r1, [pc, #120]	; (8007b00 <mem_malloc+0x1c8>)
 8007a86:	481d      	ldr	r0, [pc, #116]	; (8007afc <mem_malloc+0x1c4>)
 8007a88:	f00c f88c 	bl	8013ba4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d006      	beq.n	8007aa4 <mem_malloc+0x16c>
 8007a96:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <mem_malloc+0x1bc>)
 8007a98:	f240 22d6 	movw	r2, #726	; 0x2d6
 8007a9c:	4919      	ldr	r1, [pc, #100]	; (8007b04 <mem_malloc+0x1cc>)
 8007a9e:	4817      	ldr	r0, [pc, #92]	; (8007afc <mem_malloc+0x1c4>)
 8007aa0:	f00c f880 	bl	8013ba4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d006      	beq.n	8007abc <mem_malloc+0x184>
 8007aae:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <mem_malloc+0x1bc>)
 8007ab0:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8007ab4:	4914      	ldr	r1, [pc, #80]	; (8007b08 <mem_malloc+0x1d0>)
 8007ab6:	4811      	ldr	r0, [pc, #68]	; (8007afc <mem_malloc+0x1c4>)
 8007ab8:	f00c f874 	bl	8013ba4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	e00d      	b.n	8007ade <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8007ac2:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <mem_malloc+0x1b4>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	8bfb      	ldrh	r3, [r7, #30]
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007ace:	8bfa      	ldrh	r2, [r7, #30]
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	f4ff af51 	bcc.w	800797e <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000214 	.word	0x20000214
 8007aec:	2000020c 	.word	0x2000020c
 8007af0:	20000210 	.word	0x20000210
 8007af4:	0801489c 	.word	0x0801489c
 8007af8:	080149f8 	.word	0x080149f8
 8007afc:	080148e4 	.word	0x080148e4
 8007b00:	08014a14 	.word	0x08014a14
 8007b04:	08014a44 	.word	0x08014a44
 8007b08:	08014a74 	.word	0x08014a74

08007b0c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	3303      	adds	r3, #3
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	e011      	b.n	8007b52 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4413      	add	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	461a      	mov	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	dbe7      	blt.n	8007b2e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007b5e:	bf00      	nop
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007b72:	2300      	movs	r3, #0
 8007b74:	80fb      	strh	r3, [r7, #6]
 8007b76:	e009      	b.n	8007b8c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	4a08      	ldr	r2, [pc, #32]	; (8007b9c <memp_init+0x30>)
 8007b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff ffc3 	bl	8007b0c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007b86:	88fb      	ldrh	r3, [r7, #6]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	80fb      	strh	r3, [r7, #6]
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d9f2      	bls.n	8007b78 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	08016afc 	.word	0x08016afc

08007ba0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d012      	beq.n	8007bdc <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d006      	beq.n	8007bd8 <do_memp_malloc_pool+0x38>
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <do_memp_malloc_pool+0x48>)
 8007bcc:	f240 1249 	movw	r2, #329	; 0x149
 8007bd0:	4906      	ldr	r1, [pc, #24]	; (8007bec <do_memp_malloc_pool+0x4c>)
 8007bd2:	4807      	ldr	r0, [pc, #28]	; (8007bf0 <do_memp_malloc_pool+0x50>)
 8007bd4:	f00b ffe6 	bl	8013ba4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	e000      	b.n	8007bde <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	08014a98 	.word	0x08014a98
 8007bec:	08014ac8 	.word	0x08014ac8
 8007bf0:	08014aec 	.word	0x08014aec

08007bf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d908      	bls.n	8007c16 <memp_malloc+0x22>
 8007c04:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <memp_malloc+0x3c>)
 8007c06:	f240 1287 	movw	r2, #391	; 0x187
 8007c0a:	490a      	ldr	r1, [pc, #40]	; (8007c34 <memp_malloc+0x40>)
 8007c0c:	480a      	ldr	r0, [pc, #40]	; (8007c38 <memp_malloc+0x44>)
 8007c0e:	f00b ffc9 	bl	8013ba4 <iprintf>
 8007c12:	2300      	movs	r3, #0
 8007c14:	e008      	b.n	8007c28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	4a08      	ldr	r2, [pc, #32]	; (8007c3c <memp_malloc+0x48>)
 8007c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff ffbe 	bl	8007ba0 <do_memp_malloc_pool>
 8007c24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007c26:	68fb      	ldr	r3, [r7, #12]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	08014a98 	.word	0x08014a98
 8007c34:	08014b28 	.word	0x08014b28
 8007c38:	08014aec 	.word	0x08014aec
 8007c3c:	08016afc 	.word	0x08016afc

08007c40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d006      	beq.n	8007c62 <do_memp_free_pool+0x22>
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <do_memp_free_pool+0x40>)
 8007c56:	f240 129d 	movw	r2, #413	; 0x19d
 8007c5a:	490a      	ldr	r1, [pc, #40]	; (8007c84 <do_memp_free_pool+0x44>)
 8007c5c:	480a      	ldr	r0, [pc, #40]	; (8007c88 <do_memp_free_pool+0x48>)
 8007c5e:	f00b ffa1 	bl	8013ba4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	08014a98 	.word	0x08014a98
 8007c84:	08014b48 	.word	0x08014b48
 8007c88:	08014aec 	.word	0x08014aec

08007c8c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d907      	bls.n	8007cae <memp_free+0x22>
 8007c9e:	4b0c      	ldr	r3, [pc, #48]	; (8007cd0 <memp_free+0x44>)
 8007ca0:	f240 12db 	movw	r2, #475	; 0x1db
 8007ca4:	490b      	ldr	r1, [pc, #44]	; (8007cd4 <memp_free+0x48>)
 8007ca6:	480c      	ldr	r0, [pc, #48]	; (8007cd8 <memp_free+0x4c>)
 8007ca8:	f00b ff7c 	bl	8013ba4 <iprintf>
 8007cac:	e00c      	b.n	8007cc8 <memp_free+0x3c>

  if (mem == NULL) {
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <memp_free+0x50>)
 8007cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff ffbe 	bl	8007c40 <do_memp_free_pool>
 8007cc4:	e000      	b.n	8007cc8 <memp_free+0x3c>
    return;
 8007cc6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	08014a98 	.word	0x08014a98
 8007cd4:	08014b68 	.word	0x08014b68
 8007cd8:	08014aec 	.word	0x08014aec
 8007cdc:	08016afc 	.word	0x08016afc

08007ce0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <netif_add+0x20>
 8007d04:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <netif_add+0xa4>)
 8007d06:	22fb      	movs	r2, #251	; 0xfb
 8007d08:	4923      	ldr	r1, [pc, #140]	; (8007d98 <netif_add+0xa8>)
 8007d0a:	4824      	ldr	r0, [pc, #144]	; (8007d9c <netif_add+0xac>)
 8007d0c:	f00b ff4a 	bl	8013ba4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3320      	adds	r3, #32
 8007d2e:	2204      	movs	r2, #4
 8007d30:	2100      	movs	r1, #0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f00b fe86 	bl	8013a44 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8007d46:	4b16      	ldr	r3, [pc, #88]	; (8007da0 <netif_add+0xb0>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	b2d1      	uxtb	r1, r2
 8007d4e:	4a14      	ldr	r2, [pc, #80]	; (8007da0 <netif_add+0xb0>)
 8007d50:	7011      	strb	r1, [r2, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6a3a      	ldr	r2, [r7, #32]
 8007d5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f81f 	bl	8007da8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	4798      	blx	r3
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <netif_add+0x8a>
    return NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e007      	b.n	8007d8a <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <netif_add+0xb4>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007d82:	4a08      	ldr	r2, [pc, #32]	; (8007da4 <netif_add+0xb4>)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8007d88:	68fb      	ldr	r3, [r7, #12]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	08014b84 	.word	0x08014b84
 8007d98:	08014bb8 	.word	0x08014bb8
 8007d9c:	08014bd0 	.word	0x08014bd0
 8007da0:	2000023c 	.word	0x2000023c
 8007da4:	200038d8 	.word	0x200038d8

08007da8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <netif_set_addr+0x1c>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10c      	bne.n	8007dde <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f81a 	bl	8007e00 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f862 	bl	8007e98 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f84a 	bl	8007e70 <netif_set_gw>
 8007ddc:	e00b      	b.n	8007df6 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f859 	bl	8007e98 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f841 	bl	8007e70 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f805 	bl	8007e00 <netif_set_ipaddr>
  }
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <netif_set_ipaddr+0x18>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	e002      	b.n	8007e1e <netif_set_ipaddr+0x1e>
 8007e18:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <netif_set_ipaddr+0x6c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3304      	adds	r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d01c      	beq.n	8007e64 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	f107 020c 	add.w	r2, r7, #12
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 f83f 	bl	8009eb8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	f107 020c 	add.w	r2, r7, #12
 8007e42:	4611      	mov	r1, r2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f005 fe63 	bl	800db10 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <netif_set_ipaddr+0x56>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	e000      	b.n	8007e58 <netif_set_ipaddr+0x58>
 8007e56:	2300      	movs	r3, #0
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f861 	bl	8007f26 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	08016b70 	.word	0x08016b70

08007e70 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <netif_set_gw+0x16>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	e000      	b.n	8007e88 <netif_set_gw+0x18>
 8007e86:	2300      	movs	r3, #0
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <netif_set_netmask+0x16>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	e000      	b.n	8007eb0 <netif_set_netmask+0x18>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007ec8:	4a04      	ldr	r2, [pc, #16]	; (8007edc <netif_set_default+0x1c>)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	200038dc 	.word	0x200038dc

08007ee0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d113      	bne.n	8007f1e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007efc:	f043 0301 	orr.w	r3, r3, #1
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007f16:	2103      	movs	r1, #3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f804 	bl	8007f26 <netif_issue_reports>
    }
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d011      	beq.n	8007f60 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f4c:	f003 0308 	and.w	r3, r3, #8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f008 fbc6 	bl	80106ec <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d012      	beq.n	8007fa4 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f007 ff66 	bl	800fe70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007fb0:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <pbuf_pool_is_empty+0x14>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	200038e0 	.word	0x200038e0

08007fc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	71fb      	strb	r3, [r7, #7]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	80bb      	strh	r3, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d81c      	bhi.n	8008016 <pbuf_alloc+0x52>
 8007fdc:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <pbuf_alloc+0x20>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	08007ff9 	.word	0x08007ff9
 8007fe8:	08007fff 	.word	0x08007fff
 8007fec:	08008005 	.word	0x08008005
 8007ff0:	0800800b 	.word	0x0800800b
 8007ff4:	08008011 	.word	0x08008011
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007ff8:	2336      	movs	r3, #54	; 0x36
 8007ffa:	82fb      	strh	r3, [r7, #22]
    break;
 8007ffc:	e014      	b.n	8008028 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007ffe:	2322      	movs	r3, #34	; 0x22
 8008000:	82fb      	strh	r3, [r7, #22]
    break;
 8008002:	e011      	b.n	8008028 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008004:	230e      	movs	r3, #14
 8008006:	82fb      	strh	r3, [r7, #22]
    break;
 8008008:	e00e      	b.n	8008028 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800800a:	2300      	movs	r3, #0
 800800c:	82fb      	strh	r3, [r7, #22]
    break;
 800800e:	e00b      	b.n	8008028 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	82fb      	strh	r3, [r7, #22]
    break;
 8008014:	e008      	b.n	8008028 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008016:	4ba5      	ldr	r3, [pc, #660]	; (80082ac <pbuf_alloc+0x2e8>)
 8008018:	f44f 728b 	mov.w	r2, #278	; 0x116
 800801c:	49a4      	ldr	r1, [pc, #656]	; (80082b0 <pbuf_alloc+0x2ec>)
 800801e:	48a5      	ldr	r0, [pc, #660]	; (80082b4 <pbuf_alloc+0x2f0>)
 8008020:	f00b fdc0 	bl	8013ba4 <iprintf>
    return NULL;
 8008024:	2300      	movs	r3, #0
 8008026:	e15d      	b.n	80082e4 <pbuf_alloc+0x320>
  }

  switch (type) {
 8008028:	79bb      	ldrb	r3, [r7, #6]
 800802a:	2b03      	cmp	r3, #3
 800802c:	f200 8134 	bhi.w	8008298 <pbuf_alloc+0x2d4>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <pbuf_alloc+0x74>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	080081d9 	.word	0x080081d9
 800803c:	08008265 	.word	0x08008265
 8008040:	08008265 	.word	0x08008265
 8008044:	08008049 	.word	0x08008049
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008048:	2008      	movs	r0, #8
 800804a:	f7ff fdd3 	bl	8007bf4 <memp_malloc>
 800804e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8008056:	f7ff ffa9 	bl	8007fac <pbuf_pool_is_empty>
      return NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	e142      	b.n	80082e4 <pbuf_alloc+0x320>
    }
    p->type = type;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	79ba      	ldrb	r2, [r7, #6]
 8008062:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800806a:	8afb      	ldrh	r3, [r7, #22]
 800806c:	3310      	adds	r3, #16
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	3303      	adds	r3, #3
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	461a      	mov	r2, r3
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d006      	beq.n	8008098 <pbuf_alloc+0xd4>
 800808a:	4b88      	ldr	r3, [pc, #544]	; (80082ac <pbuf_alloc+0x2e8>)
 800808c:	f240 1229 	movw	r2, #297	; 0x129
 8008090:	4989      	ldr	r1, [pc, #548]	; (80082b8 <pbuf_alloc+0x2f4>)
 8008092:	4888      	ldr	r0, [pc, #544]	; (80082b4 <pbuf_alloc+0x2f0>)
 8008094:	f00b fd86 	bl	8013ba4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	88ba      	ldrh	r2, [r7, #4]
 800809c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800809e:	8afb      	ldrh	r3, [r7, #22]
 80080a0:	3303      	adds	r3, #3
 80080a2:	f023 0303 	bic.w	r3, r3, #3
 80080a6:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80080aa:	88bb      	ldrh	r3, [r7, #4]
 80080ac:	4293      	cmp	r3, r2
 80080ae:	bf28      	it	cs
 80080b0:	4613      	movcs	r3, r2
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	8952      	ldrh	r2, [r2, #10]
 80080c0:	441a      	add	r2, r3
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d906      	bls.n	80080da <pbuf_alloc+0x116>
 80080cc:	4b77      	ldr	r3, [pc, #476]	; (80082ac <pbuf_alloc+0x2e8>)
 80080ce:	f44f 7298 	mov.w	r2, #304	; 0x130
 80080d2:	497a      	ldr	r1, [pc, #488]	; (80082bc <pbuf_alloc+0x2f8>)
 80080d4:	4877      	ldr	r0, [pc, #476]	; (80082b4 <pbuf_alloc+0x2f0>)
 80080d6:	f00b fd65 	bl	8013ba4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80080da:	8afb      	ldrh	r3, [r7, #22]
 80080dc:	3303      	adds	r3, #3
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80080e6:	d106      	bne.n	80080f6 <pbuf_alloc+0x132>
 80080e8:	4b70      	ldr	r3, [pc, #448]	; (80082ac <pbuf_alloc+0x2e8>)
 80080ea:	f44f 7299 	mov.w	r2, #306	; 0x132
 80080ee:	4974      	ldr	r1, [pc, #464]	; (80082c0 <pbuf_alloc+0x2fc>)
 80080f0:	4870      	ldr	r0, [pc, #448]	; (80082b4 <pbuf_alloc+0x2f0>)
 80080f2:	f00b fd57 	bl	8013ba4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	2201      	movs	r2, #1
 80080fa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8008100:	88bb      	ldrh	r3, [r7, #4]
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	8952      	ldrh	r2, [r2, #10]
 8008106:	1a9b      	subs	r3, r3, r2
 8008108:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800810a:	e061      	b.n	80081d0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800810c:	2008      	movs	r0, #8
 800810e:	f7ff fd71 	bl	8007bf4 <memp_malloc>
 8008112:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800811a:	f7ff ff47 	bl	8007fac <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800811e:	69f8      	ldr	r0, [r7, #28]
 8008120:	f000 fac2 	bl	80086a8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	e0dd      	b.n	80082e4 <pbuf_alloc+0x320>
      }
      q->type = type;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	79ba      	ldrb	r2, [r7, #6]
 800812c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008146:	4293      	cmp	r3, r2
 8008148:	dd06      	ble.n	8008158 <pbuf_alloc+0x194>
 800814a:	4b58      	ldr	r3, [pc, #352]	; (80082ac <pbuf_alloc+0x2e8>)
 800814c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008150:	495c      	ldr	r1, [pc, #368]	; (80082c4 <pbuf_alloc+0x300>)
 8008152:	4858      	ldr	r0, [pc, #352]	; (80082b4 <pbuf_alloc+0x2f0>)
 8008154:	f00b fd26 	bl	8013ba4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008168:	bf28      	it	cs
 800816a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f103 0210 	add.w	r2, r3, #16
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d006      	beq.n	8008198 <pbuf_alloc+0x1d4>
 800818a:	4b48      	ldr	r3, [pc, #288]	; (80082ac <pbuf_alloc+0x2e8>)
 800818c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8008190:	494d      	ldr	r1, [pc, #308]	; (80082c8 <pbuf_alloc+0x304>)
 8008192:	4848      	ldr	r0, [pc, #288]	; (80082b4 <pbuf_alloc+0x2f0>)
 8008194:	f00b fd06 	bl	8013ba4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	8952      	ldrh	r2, [r2, #10]
 80081a0:	441a      	add	r2, r3
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d906      	bls.n	80081ba <pbuf_alloc+0x1f6>
 80081ac:	4b3f      	ldr	r3, [pc, #252]	; (80082ac <pbuf_alloc+0x2e8>)
 80081ae:	f240 1255 	movw	r2, #341	; 0x155
 80081b2:	4942      	ldr	r1, [pc, #264]	; (80082bc <pbuf_alloc+0x2f8>)
 80081b4:	483f      	ldr	r0, [pc, #252]	; (80082b4 <pbuf_alloc+0x2f0>)
 80081b6:	f00b fcf5 	bl	8013ba4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	895b      	ldrh	r3, [r3, #10]
 80081c4:	461a      	mov	r2, r3
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1a9b      	subs	r3, r3, r2
 80081ca:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dc9a      	bgt.n	800810c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80081d6:	e07e      	b.n	80082d6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80081d8:	8afb      	ldrh	r3, [r7, #22]
 80081da:	3313      	adds	r3, #19
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	88bb      	ldrh	r3, [r7, #4]
 80081e6:	3303      	adds	r3, #3
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	4413      	add	r3, r2
 80081f2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80081f4:	897a      	ldrh	r2, [r7, #10]
 80081f6:	88bb      	ldrh	r3, [r7, #4]
 80081f8:	3303      	adds	r3, #3
 80081fa:	f023 0303 	bic.w	r3, r3, #3
 80081fe:	429a      	cmp	r2, r3
 8008200:	d201      	bcs.n	8008206 <pbuf_alloc+0x242>
        return NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	e06e      	b.n	80082e4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008206:	897b      	ldrh	r3, [r7, #10]
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff fb95 	bl	8007938 <mem_malloc>
 800820e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <pbuf_alloc+0x256>
      return NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	e064      	b.n	80082e4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800821a:	8afb      	ldrh	r3, [r7, #22]
 800821c:	3310      	adds	r3, #16
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	3303      	adds	r3, #3
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	461a      	mov	r2, r3
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	88ba      	ldrh	r2, [r7, #4]
 8008232:	811a      	strh	r2, [r3, #8]
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	891a      	ldrh	r2, [r3, #8]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	79ba      	ldrb	r2, [r7, #6]
 8008246:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f003 0303 	and.w	r3, r3, #3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d03f      	beq.n	80082d4 <pbuf_alloc+0x310>
 8008254:	4b15      	ldr	r3, [pc, #84]	; (80082ac <pbuf_alloc+0x2e8>)
 8008256:	f240 1277 	movw	r2, #375	; 0x177
 800825a:	491c      	ldr	r1, [pc, #112]	; (80082cc <pbuf_alloc+0x308>)
 800825c:	4815      	ldr	r0, [pc, #84]	; (80082b4 <pbuf_alloc+0x2f0>)
 800825e:	f00b fca1 	bl	8013ba4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8008262:	e037      	b.n	80082d4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008264:	2007      	movs	r0, #7
 8008266:	f7ff fcc5 	bl	8007bf4 <memp_malloc>
 800826a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	e036      	b.n	80082e4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2200      	movs	r2, #0
 800827a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	88ba      	ldrh	r2, [r7, #4]
 8008280:	811a      	strh	r2, [r3, #8]
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	891a      	ldrh	r2, [r3, #8]
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	79ba      	ldrb	r2, [r7, #6]
 8008294:	731a      	strb	r2, [r3, #12]
    break;
 8008296:	e01e      	b.n	80082d6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <pbuf_alloc+0x2e8>)
 800829a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800829e:	490c      	ldr	r1, [pc, #48]	; (80082d0 <pbuf_alloc+0x30c>)
 80082a0:	4804      	ldr	r0, [pc, #16]	; (80082b4 <pbuf_alloc+0x2f0>)
 80082a2:	f00b fc7f 	bl	8013ba4 <iprintf>
    return NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e01c      	b.n	80082e4 <pbuf_alloc+0x320>
 80082aa:	bf00      	nop
 80082ac:	08014bf8 	.word	0x08014bf8
 80082b0:	08014c28 	.word	0x08014c28
 80082b4:	08014c44 	.word	0x08014c44
 80082b8:	08014c6c 	.word	0x08014c6c
 80082bc:	08014c9c 	.word	0x08014c9c
 80082c0:	08014cd0 	.word	0x08014cd0
 80082c4:	08014d04 	.word	0x08014d04
 80082c8:	08014d18 	.word	0x08014d18
 80082cc:	08014d48 	.word	0x08014d48
 80082d0:	08014d74 	.word	0x08014d74
    break;
 80082d4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	2201      	movs	r2, #1
 80082da:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	2200      	movs	r2, #0
 80082e0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80082e2:	69fb      	ldr	r3, [r7, #28]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	4603      	mov	r3, r0
 80082f6:	71fb      	strb	r3, [r7, #7]
 80082f8:	460b      	mov	r3, r1
 80082fa:	80bb      	strh	r3, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	2b04      	cmp	r3, #4
 8008304:	d81b      	bhi.n	800833e <pbuf_alloced_custom+0x52>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <pbuf_alloced_custom+0x20>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008321 	.word	0x08008321
 8008310:	08008327 	.word	0x08008327
 8008314:	0800832d 	.word	0x0800832d
 8008318:	08008333 	.word	0x08008333
 800831c:	08008339 	.word	0x08008339
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008320:	2336      	movs	r3, #54	; 0x36
 8008322:	81fb      	strh	r3, [r7, #14]
    break;
 8008324:	e014      	b.n	8008350 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008326:	2322      	movs	r3, #34	; 0x22
 8008328:	81fb      	strh	r3, [r7, #14]
    break;
 800832a:	e011      	b.n	8008350 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800832c:	230e      	movs	r3, #14
 800832e:	81fb      	strh	r3, [r7, #14]
    break;
 8008330:	e00e      	b.n	8008350 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008332:	2300      	movs	r3, #0
 8008334:	81fb      	strh	r3, [r7, #14]
    break;
 8008336:	e00b      	b.n	8008350 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	81fb      	strh	r3, [r7, #14]
    break;
 800833c:	e008      	b.n	8008350 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800833e:	4b1d      	ldr	r3, [pc, #116]	; (80083b4 <pbuf_alloced_custom+0xc8>)
 8008340:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008344:	491c      	ldr	r1, [pc, #112]	; (80083b8 <pbuf_alloced_custom+0xcc>)
 8008346:	481d      	ldr	r0, [pc, #116]	; (80083bc <pbuf_alloced_custom+0xd0>)
 8008348:	f00b fc2c 	bl	8013ba4 <iprintf>
    return NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	e02d      	b.n	80083ac <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	3303      	adds	r3, #3
 8008354:	f023 0203 	bic.w	r2, r3, #3
 8008358:	88bb      	ldrh	r3, [r7, #4]
 800835a:	441a      	add	r2, r3
 800835c:	8bbb      	ldrh	r3, [r7, #28]
 800835e:	429a      	cmp	r2, r3
 8008360:	d901      	bls.n	8008366 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	e022      	b.n	80083ac <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d008      	beq.n	8008384 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008372:	89fb      	ldrh	r3, [r7, #14]
 8008374:	3303      	adds	r3, #3
 8008376:	f023 0303 	bic.w	r3, r3, #3
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	441a      	add	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	605a      	str	r2, [r3, #4]
 8008382:	e002      	b.n	800838a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2202      	movs	r2, #2
 800838e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88ba      	ldrh	r2, [r7, #4]
 8008394:	811a      	strh	r2, [r3, #8]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	891a      	ldrh	r2, [r3, #8]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	79ba      	ldrb	r2, [r7, #6]
 80083a2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2201      	movs	r2, #1
 80083a8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80083aa:	683b      	ldr	r3, [r7, #0]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	08014bf8 	.word	0x08014bf8
 80083b8:	08014d90 	.word	0x08014d90
 80083bc:	08014c44 	.word	0x08014c44

080083c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <pbuf_realloc+0x20>
 80083d2:	4b4b      	ldr	r3, [pc, #300]	; (8008500 <pbuf_realloc+0x140>)
 80083d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80083d8:	494a      	ldr	r1, [pc, #296]	; (8008504 <pbuf_realloc+0x144>)
 80083da:	484b      	ldr	r0, [pc, #300]	; (8008508 <pbuf_realloc+0x148>)
 80083dc:	f00b fbe2 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	7b1b      	ldrb	r3, [r3, #12]
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d012      	beq.n	800840e <pbuf_realloc+0x4e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7b1b      	ldrb	r3, [r3, #12]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d00e      	beq.n	800840e <pbuf_realloc+0x4e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	7b1b      	ldrb	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <pbuf_realloc+0x4e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	7b1b      	ldrb	r3, [r3, #12]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d006      	beq.n	800840e <pbuf_realloc+0x4e>
 8008400:	4b3f      	ldr	r3, [pc, #252]	; (8008500 <pbuf_realloc+0x140>)
 8008402:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008406:	4941      	ldr	r1, [pc, #260]	; (800850c <pbuf_realloc+0x14c>)
 8008408:	483f      	ldr	r0, [pc, #252]	; (8008508 <pbuf_realloc+0x148>)
 800840a:	f00b fbcb 	bl	8013ba4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	891b      	ldrh	r3, [r3, #8]
 8008412:	887a      	ldrh	r2, [r7, #2]
 8008414:	429a      	cmp	r2, r3
 8008416:	d26f      	bcs.n	80084f8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8008418:	887b      	ldrh	r3, [r7, #2]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	8912      	ldrh	r2, [r2, #8]
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008422:	887b      	ldrh	r3, [r7, #2]
 8008424:	827b      	strh	r3, [r7, #18]
  q = p;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800842a:	e025      	b.n	8008478 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	895b      	ldrh	r3, [r3, #10]
 8008430:	8a7a      	ldrh	r2, [r7, #18]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800843c:	4293      	cmp	r3, r2
 800843e:	dd06      	ble.n	800844e <pbuf_realloc+0x8e>
 8008440:	4b2f      	ldr	r3, [pc, #188]	; (8008500 <pbuf_realloc+0x140>)
 8008442:	f240 220b 	movw	r2, #523	; 0x20b
 8008446:	4932      	ldr	r1, [pc, #200]	; (8008510 <pbuf_realloc+0x150>)
 8008448:	482f      	ldr	r0, [pc, #188]	; (8008508 <pbuf_realloc+0x148>)
 800844a:	f00b fbab 	bl	8013ba4 <iprintf>
    q->tot_len += (u16_t)grow;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	891a      	ldrh	r2, [r3, #8]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	b29b      	uxth	r3, r3
 8008456:	4413      	add	r3, r2
 8008458:	b29a      	uxth	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <pbuf_realloc+0xb8>
 800846a:	4b25      	ldr	r3, [pc, #148]	; (8008500 <pbuf_realloc+0x140>)
 800846c:	f240 220f 	movw	r2, #527	; 0x20f
 8008470:	4928      	ldr	r1, [pc, #160]	; (8008514 <pbuf_realloc+0x154>)
 8008472:	4825      	ldr	r0, [pc, #148]	; (8008508 <pbuf_realloc+0x148>)
 8008474:	f00b fb96 	bl	8013ba4 <iprintf>
  while (rem_len > q->len) {
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	895b      	ldrh	r3, [r3, #10]
 800847c:	8a7a      	ldrh	r2, [r7, #18]
 800847e:	429a      	cmp	r2, r3
 8008480:	d8d4      	bhi.n	800842c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	7b1b      	ldrb	r3, [r3, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d122      	bne.n	80084d0 <pbuf_realloc+0x110>
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	895b      	ldrh	r3, [r3, #10]
 800848e:	8a7a      	ldrh	r2, [r7, #18]
 8008490:	429a      	cmp	r2, r3
 8008492:	d01d      	beq.n	80084d0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	7b5b      	ldrb	r3, [r3, #13]
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d117      	bne.n	80084d0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	461a      	mov	r2, r3
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	8a7b      	ldrh	r3, [r7, #18]
 80084ae:	4413      	add	r3, r2
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6978      	ldr	r0, [r7, #20]
 80084b6:	f7ff f963 	bl	8007780 <mem_trim>
 80084ba:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <pbuf_realloc+0x110>
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <pbuf_realloc+0x140>)
 80084c4:	f240 221d 	movw	r2, #541	; 0x21d
 80084c8:	4913      	ldr	r1, [pc, #76]	; (8008518 <pbuf_realloc+0x158>)
 80084ca:	480f      	ldr	r0, [pc, #60]	; (8008508 <pbuf_realloc+0x148>)
 80084cc:	f00b fb6a 	bl	8013ba4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	8a7a      	ldrh	r2, [r7, #18]
 80084d4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	895a      	ldrh	r2, [r3, #10]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d004      	beq.n	80084f0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f8dc 	bl	80086a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	e000      	b.n	80084fa <pbuf_realloc+0x13a>
    return;
 80084f8:	bf00      	nop

}
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	08014bf8 	.word	0x08014bf8
 8008504:	08014db4 	.word	0x08014db4
 8008508:	08014c44 	.word	0x08014c44
 800850c:	08014dcc 	.word	0x08014dcc
 8008510:	08014de8 	.word	0x08014de8
 8008514:	08014dfc 	.word	0x08014dfc
 8008518:	08014e14 	.word	0x08014e14

0800851c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	807b      	strh	r3, [r7, #2]
 8008528:	4613      	mov	r3, r2
 800852a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <pbuf_header_impl+0x24>
 8008532:	4b46      	ldr	r3, [pc, #280]	; (800864c <pbuf_header_impl+0x130>)
 8008534:	f240 223f 	movw	r2, #575	; 0x23f
 8008538:	4945      	ldr	r1, [pc, #276]	; (8008650 <pbuf_header_impl+0x134>)
 800853a:	4846      	ldr	r0, [pc, #280]	; (8008654 <pbuf_header_impl+0x138>)
 800853c:	f00b fb32 	bl	8013ba4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8008540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <pbuf_header_impl+0x32>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <pbuf_header_impl+0x36>
    return 0;
 800854e:	2300      	movs	r3, #0
 8008550:	e078      	b.n	8008644 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8008552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008556:	2b00      	cmp	r3, #0
 8008558:	da10      	bge.n	800857c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800855a:	887b      	ldrh	r3, [r7, #2]
 800855c:	425b      	negs	r3, r3
 800855e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	895b      	ldrh	r3, [r3, #10]
 8008564:	89fa      	ldrh	r2, [r7, #14]
 8008566:	429a      	cmp	r2, r3
 8008568:	d90a      	bls.n	8008580 <pbuf_header_impl+0x64>
 800856a:	4b38      	ldr	r3, [pc, #224]	; (800864c <pbuf_header_impl+0x130>)
 800856c:	f240 2247 	movw	r2, #583	; 0x247
 8008570:	4939      	ldr	r1, [pc, #228]	; (8008658 <pbuf_header_impl+0x13c>)
 8008572:	4838      	ldr	r0, [pc, #224]	; (8008654 <pbuf_header_impl+0x138>)
 8008574:	f00b fb16 	bl	8013ba4 <iprintf>
 8008578:	2301      	movs	r3, #1
 800857a:	e063      	b.n	8008644 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800857c:	887b      	ldrh	r3, [r7, #2]
 800857e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7b1b      	ldrb	r3, [r3, #12]
 8008584:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800858c:	89bb      	ldrh	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <pbuf_header_impl+0x7c>
 8008592:	89bb      	ldrh	r3, [r7, #12]
 8008594:	2b03      	cmp	r3, #3
 8008596:	d112      	bne.n	80085be <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085a0:	425b      	negs	r3, r3
 80085a2:	441a      	add	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3310      	adds	r3, #16
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d238      	bcs.n	8008626 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e042      	b.n	8008644 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80085be:	89bb      	ldrh	r3, [r7, #12]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d002      	beq.n	80085ca <pbuf_header_impl+0xae>
 80085c4:	89bb      	ldrh	r3, [r7, #12]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d124      	bne.n	8008614 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80085ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	da0d      	bge.n	80085ee <pbuf_header_impl+0xd2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	895b      	ldrh	r3, [r3, #10]
 80085d6:	89fa      	ldrh	r2, [r7, #14]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d808      	bhi.n	80085ee <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085e4:	425b      	negs	r3, r3
 80085e6:	441a      	add	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
 80085ec:	e011      	b.n	8008612 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80085ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dd0b      	ble.n	800860e <pbuf_header_impl+0xf2>
 80085f6:	787b      	ldrb	r3, [r7, #1]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008604:	425b      	negs	r3, r3
 8008606:	441a      	add	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	605a      	str	r2, [r3, #4]
 800860c:	e001      	b.n	8008612 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800860e:	2301      	movs	r3, #1
 8008610:	e018      	b.n	8008644 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008612:	e008      	b.n	8008626 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <pbuf_header_impl+0x130>)
 8008616:	f240 2277 	movw	r2, #631	; 0x277
 800861a:	4910      	ldr	r1, [pc, #64]	; (800865c <pbuf_header_impl+0x140>)
 800861c:	480d      	ldr	r0, [pc, #52]	; (8008654 <pbuf_header_impl+0x138>)
 800861e:	f00b fac1 	bl	8013ba4 <iprintf>
    return 1;
 8008622:	2301      	movs	r3, #1
 8008624:	e00e      	b.n	8008644 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	895a      	ldrh	r2, [r3, #10]
 800862a:	887b      	ldrh	r3, [r7, #2]
 800862c:	4413      	add	r3, r2
 800862e:	b29a      	uxth	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	891a      	ldrh	r2, [r3, #8]
 8008638:	887b      	ldrh	r3, [r7, #2]
 800863a:	4413      	add	r3, r2
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	08014bf8 	.word	0x08014bf8
 8008650:	08014e30 	.word	0x08014e30
 8008654:	08014c44 	.word	0x08014c44
 8008658:	08014e3c 	.word	0x08014e3c
 800865c:	08014e5c 	.word	0x08014e5c

08008660 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800866c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008670:	2200      	movs	r2, #0
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff ff51 	bl	800851c <pbuf_header_impl>
 800867a:	4603      	mov	r3, r0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8008690:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008694:	2201      	movs	r2, #1
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff ff3f 	bl	800851c <pbuf_header_impl>
 800869e:	4603      	mov	r3, r0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10b      	bne.n	80086ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <pbuf_free+0x22>
 80086bc:	4b3e      	ldr	r3, [pc, #248]	; (80087b8 <pbuf_free+0x110>)
 80086be:	f240 22d2 	movw	r2, #722	; 0x2d2
 80086c2:	493e      	ldr	r1, [pc, #248]	; (80087bc <pbuf_free+0x114>)
 80086c4:	483e      	ldr	r0, [pc, #248]	; (80087c0 <pbuf_free+0x118>)
 80086c6:	f00b fa6d 	bl	8013ba4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e070      	b.n	80087b0 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7b1b      	ldrb	r3, [r3, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d012      	beq.n	80086fc <pbuf_free+0x54>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	7b1b      	ldrb	r3, [r3, #12]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d00e      	beq.n	80086fc <pbuf_free+0x54>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	7b1b      	ldrb	r3, [r3, #12]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d00a      	beq.n	80086fc <pbuf_free+0x54>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7b1b      	ldrb	r3, [r3, #12]
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d006      	beq.n	80086fc <pbuf_free+0x54>
 80086ee:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <pbuf_free+0x110>)
 80086f0:	f240 22de 	movw	r2, #734	; 0x2de
 80086f4:	4933      	ldr	r1, [pc, #204]	; (80087c4 <pbuf_free+0x11c>)
 80086f6:	4832      	ldr	r0, [pc, #200]	; (80087c0 <pbuf_free+0x118>)
 80086f8:	f00b fa54 	bl	8013ba4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008700:	e052      	b.n	80087a8 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	89db      	ldrh	r3, [r3, #14]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <pbuf_free+0x70>
 800870a:	4b2b      	ldr	r3, [pc, #172]	; (80087b8 <pbuf_free+0x110>)
 800870c:	f240 22eb 	movw	r2, #747	; 0x2eb
 8008710:	492d      	ldr	r1, [pc, #180]	; (80087c8 <pbuf_free+0x120>)
 8008712:	482b      	ldr	r0, [pc, #172]	; (80087c0 <pbuf_free+0x118>)
 8008714:	f00b fa46 	bl	8013ba4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	89db      	ldrh	r3, [r3, #14]
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	81da      	strh	r2, [r3, #14]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	89db      	ldrh	r3, [r3, #14]
 8008728:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800872a:	8abb      	ldrh	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d139      	bne.n	80087a4 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7b1b      	ldrb	r3, [r3, #12]
 800873a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7b5b      	ldrb	r3, [r3, #13]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d011      	beq.n	800876c <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <pbuf_free+0xba>
 8008754:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <pbuf_free+0x110>)
 8008756:	f240 22f9 	movw	r2, #761	; 0x2f9
 800875a:	491c      	ldr	r1, [pc, #112]	; (80087cc <pbuf_free+0x124>)
 800875c:	4818      	ldr	r0, [pc, #96]	; (80087c0 <pbuf_free+0x118>)
 800875e:	f00b fa21 	bl	8013ba4 <iprintf>
        pc->custom_free_function(p);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	4798      	blx	r3
 800876a:	e015      	b.n	8008798 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d104      	bne.n	800877c <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	2008      	movs	r0, #8
 8008776:	f7ff fa89 	bl	8007c8c <memp_free>
 800877a:	e00d      	b.n	8008798 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800877c:	89fb      	ldrh	r3, [r7, #14]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d002      	beq.n	8008788 <pbuf_free+0xe0>
 8008782:	89fb      	ldrh	r3, [r7, #14]
 8008784:	2b02      	cmp	r3, #2
 8008786:	d104      	bne.n	8008792 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8008788:	6879      	ldr	r1, [r7, #4]
 800878a:	2007      	movs	r0, #7
 800878c:	f7ff fa7e 	bl	8007c8c <memp_free>
 8008790:	e002      	b.n	8008798 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fe ff92 	bl	80076bc <mem_free>
        }
      }
      count++;
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	3301      	adds	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	607b      	str	r3, [r7, #4]
 80087a2:	e001      	b.n	80087a8 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1a9      	bne.n	8008702 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	08014bf8 	.word	0x08014bf8
 80087bc:	08014e30 	.word	0x08014e30
 80087c0:	08014c44 	.word	0x08014c44
 80087c4:	08014e6c 	.word	0x08014e6c
 80087c8:	08014e84 	.word	0x08014e84
 80087cc:	08014e9c 	.word	0x08014e9c

080087d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80087dc:	e005      	b.n	80087ea <pbuf_clen+0x1a>
    ++len;
 80087de:	89fb      	ldrh	r3, [r7, #14]
 80087e0:	3301      	adds	r3, #1
 80087e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f6      	bne.n	80087de <pbuf_clen+0xe>
  }
  return len;
 80087f0:	89fb      	ldrh	r3, [r7, #14]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	89db      	ldrh	r3, [r3, #14]
 8008812:	3301      	adds	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	89db      	ldrh	r3, [r3, #14]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d106      	bne.n	8008830 <pbuf_ref+0x30>
 8008822:	4b05      	ldr	r3, [pc, #20]	; (8008838 <pbuf_ref+0x38>)
 8008824:	f240 3239 	movw	r2, #825	; 0x339
 8008828:	4904      	ldr	r1, [pc, #16]	; (800883c <pbuf_ref+0x3c>)
 800882a:	4805      	ldr	r0, [pc, #20]	; (8008840 <pbuf_ref+0x40>)
 800882c:	f00b f9ba 	bl	8013ba4 <iprintf>
  }
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	08014bf8 	.word	0x08014bf8
 800883c:	08014ec0 	.word	0x08014ec0
 8008840:	08014c44 	.word	0x08014c44

08008844 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <pbuf_cat+0x16>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d107      	bne.n	800886a <pbuf_cat+0x26>
 800885a:	4b20      	ldr	r3, [pc, #128]	; (80088dc <pbuf_cat+0x98>)
 800885c:	f240 324d 	movw	r2, #845	; 0x34d
 8008860:	491f      	ldr	r1, [pc, #124]	; (80088e0 <pbuf_cat+0x9c>)
 8008862:	4820      	ldr	r0, [pc, #128]	; (80088e4 <pbuf_cat+0xa0>)
 8008864:	f00b f99e 	bl	8013ba4 <iprintf>
 8008868:	e034      	b.n	80088d4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	e00a      	b.n	8008886 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	891a      	ldrh	r2, [r3, #8]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	891b      	ldrh	r3, [r3, #8]
 8008878:	4413      	add	r3, r2
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1f0      	bne.n	8008870 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	891a      	ldrh	r2, [r3, #8]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	895b      	ldrh	r3, [r3, #10]
 8008896:	429a      	cmp	r2, r3
 8008898:	d006      	beq.n	80088a8 <pbuf_cat+0x64>
 800889a:	4b10      	ldr	r3, [pc, #64]	; (80088dc <pbuf_cat+0x98>)
 800889c:	f240 3255 	movw	r2, #853	; 0x355
 80088a0:	4911      	ldr	r1, [pc, #68]	; (80088e8 <pbuf_cat+0xa4>)
 80088a2:	4810      	ldr	r0, [pc, #64]	; (80088e4 <pbuf_cat+0xa0>)
 80088a4:	f00b f97e 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d006      	beq.n	80088be <pbuf_cat+0x7a>
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <pbuf_cat+0x98>)
 80088b2:	f240 3256 	movw	r2, #854	; 0x356
 80088b6:	490d      	ldr	r1, [pc, #52]	; (80088ec <pbuf_cat+0xa8>)
 80088b8:	480a      	ldr	r0, [pc, #40]	; (80088e4 <pbuf_cat+0xa0>)
 80088ba:	f00b f973 	bl	8013ba4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	891a      	ldrh	r2, [r3, #8]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	891b      	ldrh	r3, [r3, #8]
 80088c6:	4413      	add	r3, r2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	08014bf8 	.word	0x08014bf8
 80088e0:	08014ed4 	.word	0x08014ed4
 80088e4:	08014c44 	.word	0x08014c44
 80088e8:	08014f0c 	.word	0x08014f0c
 80088ec:	08014f3c 	.word	0x08014f3c

080088f0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff ffa1 	bl	8008844 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008902:	6838      	ldr	r0, [r7, #0]
 8008904:	f7ff ff7c 	bl	8008800 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800891a:	2300      	movs	r3, #0
 800891c:	81fb      	strh	r3, [r7, #14]
 800891e:	2300      	movs	r3, #0
 8008920:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <pbuf_copy+0x2a>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <pbuf_copy+0x2a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	891a      	ldrh	r2, [r3, #8]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	891b      	ldrh	r3, [r3, #8]
 8008936:	429a      	cmp	r2, r3
 8008938:	d209      	bcs.n	800894e <pbuf_copy+0x3e>
 800893a:	4b54      	ldr	r3, [pc, #336]	; (8008a8c <pbuf_copy+0x17c>)
 800893c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008940:	4953      	ldr	r1, [pc, #332]	; (8008a90 <pbuf_copy+0x180>)
 8008942:	4854      	ldr	r0, [pc, #336]	; (8008a94 <pbuf_copy+0x184>)
 8008944:	f00b f92e 	bl	8013ba4 <iprintf>
 8008948:	f06f 030f 	mvn.w	r3, #15
 800894c:	e099      	b.n	8008a82 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	895b      	ldrh	r3, [r3, #10]
 8008952:	461a      	mov	r2, r3
 8008954:	89fb      	ldrh	r3, [r7, #14]
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	895b      	ldrh	r3, [r3, #10]
 800895c:	4619      	mov	r1, r3
 800895e:	89bb      	ldrh	r3, [r7, #12]
 8008960:	1acb      	subs	r3, r1, r3
 8008962:	429a      	cmp	r2, r3
 8008964:	db05      	blt.n	8008972 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	895a      	ldrh	r2, [r3, #10]
 800896a:	89bb      	ldrh	r3, [r7, #12]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	817b      	strh	r3, [r7, #10]
 8008970:	e004      	b.n	800897c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	895a      	ldrh	r2, [r3, #10]
 8008976:	89fb      	ldrh	r3, [r7, #14]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	89fb      	ldrh	r3, [r7, #14]
 8008982:	18d0      	adds	r0, r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	89bb      	ldrh	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	897a      	ldrh	r2, [r7, #10]
 800898e:	4619      	mov	r1, r3
 8008990:	f00b f84d 	bl	8013a2e <memcpy>
    offset_to += len;
 8008994:	89fa      	ldrh	r2, [r7, #14]
 8008996:	897b      	ldrh	r3, [r7, #10]
 8008998:	4413      	add	r3, r2
 800899a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800899c:	89ba      	ldrh	r2, [r7, #12]
 800899e:	897b      	ldrh	r3, [r7, #10]
 80089a0:	4413      	add	r3, r2
 80089a2:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	895b      	ldrh	r3, [r3, #10]
 80089a8:	89fa      	ldrh	r2, [r7, #14]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d906      	bls.n	80089bc <pbuf_copy+0xac>
 80089ae:	4b37      	ldr	r3, [pc, #220]	; (8008a8c <pbuf_copy+0x17c>)
 80089b0:	f240 32cd 	movw	r2, #973	; 0x3cd
 80089b4:	4938      	ldr	r1, [pc, #224]	; (8008a98 <pbuf_copy+0x188>)
 80089b6:	4837      	ldr	r0, [pc, #220]	; (8008a94 <pbuf_copy+0x184>)
 80089b8:	f00b f8f4 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	895b      	ldrh	r3, [r3, #10]
 80089c0:	89ba      	ldrh	r2, [r7, #12]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d906      	bls.n	80089d4 <pbuf_copy+0xc4>
 80089c6:	4b31      	ldr	r3, [pc, #196]	; (8008a8c <pbuf_copy+0x17c>)
 80089c8:	f240 32ce 	movw	r2, #974	; 0x3ce
 80089cc:	4933      	ldr	r1, [pc, #204]	; (8008a9c <pbuf_copy+0x18c>)
 80089ce:	4831      	ldr	r0, [pc, #196]	; (8008a94 <pbuf_copy+0x184>)
 80089d0:	f00b f8e8 	bl	8013ba4 <iprintf>
    if (offset_from >= p_from->len) {
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	895b      	ldrh	r3, [r3, #10]
 80089d8:	89ba      	ldrh	r2, [r7, #12]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d304      	bcc.n	80089e8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	895b      	ldrh	r3, [r3, #10]
 80089ec:	89fa      	ldrh	r2, [r7, #14]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d114      	bne.n	8008a1c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10c      	bne.n	8008a1c <pbuf_copy+0x10c>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d009      	beq.n	8008a1c <pbuf_copy+0x10c>
 8008a08:	4b20      	ldr	r3, [pc, #128]	; (8008a8c <pbuf_copy+0x17c>)
 8008a0a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008a0e:	4924      	ldr	r1, [pc, #144]	; (8008aa0 <pbuf_copy+0x190>)
 8008a10:	4820      	ldr	r0, [pc, #128]	; (8008a94 <pbuf_copy+0x184>)
 8008a12:	f00b f8c7 	bl	8013ba4 <iprintf>
 8008a16:	f06f 030f 	mvn.w	r3, #15
 8008a1a:	e032      	b.n	8008a82 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d013      	beq.n	8008a4a <pbuf_copy+0x13a>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	895a      	ldrh	r2, [r3, #10]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	891b      	ldrh	r3, [r3, #8]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d10d      	bne.n	8008a4a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <pbuf_copy+0x13a>
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <pbuf_copy+0x17c>)
 8008a38:	f240 32de 	movw	r2, #990	; 0x3de
 8008a3c:	4919      	ldr	r1, [pc, #100]	; (8008aa4 <pbuf_copy+0x194>)
 8008a3e:	4815      	ldr	r0, [pc, #84]	; (8008a94 <pbuf_copy+0x184>)
 8008a40:	f00b f8b0 	bl	8013ba4 <iprintf>
 8008a44:	f06f 0305 	mvn.w	r3, #5
 8008a48:	e01b      	b.n	8008a82 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d013      	beq.n	8008a78 <pbuf_copy+0x168>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	895a      	ldrh	r2, [r3, #10]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	891b      	ldrh	r3, [r3, #8]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d10d      	bne.n	8008a78 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <pbuf_copy+0x168>
 8008a64:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <pbuf_copy+0x17c>)
 8008a66:	f240 32e3 	movw	r2, #995	; 0x3e3
 8008a6a:	490e      	ldr	r1, [pc, #56]	; (8008aa4 <pbuf_copy+0x194>)
 8008a6c:	4809      	ldr	r0, [pc, #36]	; (8008a94 <pbuf_copy+0x184>)
 8008a6e:	f00b f899 	bl	8013ba4 <iprintf>
 8008a72:	f06f 0305 	mvn.w	r3, #5
 8008a76:	e004      	b.n	8008a82 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f47f af67 	bne.w	800894e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08014bf8 	.word	0x08014bf8
 8008a90:	08014f88 	.word	0x08014f88
 8008a94:	08014c44 	.word	0x08014c44
 8008a98:	08014fb8 	.word	0x08014fb8
 8008a9c:	08014fd0 	.word	0x08014fd0
 8008aa0:	08014fec 	.word	0x08014fec
 8008aa4:	08014ffc 	.word	0x08014ffc

08008aa8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	80fb      	strh	r3, [r7, #6]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d108      	bne.n	8008ada <pbuf_copy_partial+0x32>
 8008ac8:	4b30      	ldr	r3, [pc, #192]	; (8008b8c <pbuf_copy_partial+0xe4>)
 8008aca:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008ace:	4930      	ldr	r1, [pc, #192]	; (8008b90 <pbuf_copy_partial+0xe8>)
 8008ad0:	4830      	ldr	r0, [pc, #192]	; (8008b94 <pbuf_copy_partial+0xec>)
 8008ad2:	f00b f867 	bl	8013ba4 <iprintf>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e054      	b.n	8008b84 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d108      	bne.n	8008af2 <pbuf_copy_partial+0x4a>
 8008ae0:	4b2a      	ldr	r3, [pc, #168]	; (8008b8c <pbuf_copy_partial+0xe4>)
 8008ae2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008ae6:	492c      	ldr	r1, [pc, #176]	; (8008b98 <pbuf_copy_partial+0xf0>)
 8008ae8:	482a      	ldr	r0, [pc, #168]	; (8008b94 <pbuf_copy_partial+0xec>)
 8008aea:	f00b f85b 	bl	8013ba4 <iprintf>
 8008aee:	2300      	movs	r3, #0
 8008af0:	e048      	b.n	8008b84 <pbuf_copy_partial+0xdc>

  left = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <pbuf_copy_partial+0x5a>
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <pbuf_copy_partial+0x5e>
    return 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	e03e      	b.n	8008b84 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	e034      	b.n	8008b76 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8008b0c:	88bb      	ldrh	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <pbuf_copy_partial+0x80>
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	895b      	ldrh	r3, [r3, #10]
 8008b16:	88ba      	ldrh	r2, [r7, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d305      	bcc.n	8008b28 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	895b      	ldrh	r3, [r3, #10]
 8008b20:	88ba      	ldrh	r2, [r7, #4]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	80bb      	strh	r3, [r7, #4]
 8008b26:	e023      	b.n	8008b70 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	895a      	ldrh	r2, [r3, #10]
 8008b2c:	88bb      	ldrh	r3, [r7, #4]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008b32:	8b3a      	ldrh	r2, [r7, #24]
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d901      	bls.n	8008b3e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008b3e:	8b7b      	ldrh	r3, [r7, #26]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	18d0      	adds	r0, r2, r3
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	88bb      	ldrh	r3, [r7, #4]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	8b3a      	ldrh	r2, [r7, #24]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f00a ff6d 	bl	8013a2e <memcpy>
      copied_total += buf_copy_len;
 8008b54:	8afa      	ldrh	r2, [r7, #22]
 8008b56:	8b3b      	ldrh	r3, [r7, #24]
 8008b58:	4413      	add	r3, r2
 8008b5a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8008b5c:	8b7a      	ldrh	r2, [r7, #26]
 8008b5e:	8b3b      	ldrh	r3, [r7, #24]
 8008b60:	4413      	add	r3, r2
 8008b62:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8008b64:	88fa      	ldrh	r2, [r7, #6]
 8008b66:	8b3b      	ldrh	r3, [r7, #24]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <pbuf_copy_partial+0xda>
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1c4      	bne.n	8008b0c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8008b82:	8afb      	ldrh	r3, [r7, #22]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	08014bf8 	.word	0x08014bf8
 8008b90:	08015028 	.word	0x08015028
 8008b94:	08014c44 	.word	0x08014c44
 8008b98:	08015048 	.word	0x08015048

08008b9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008ba0:	bf00      	nop
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008bb0:	f000 fdf0 	bl	8009794 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <tcp_tmr+0x28>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <tcp_tmr+0x28>)
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <tcp_tmr+0x28>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008bcc:	f000 fb22 	bl	8009214 <tcp_slowtmr>
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	2000023d 	.word	0x2000023d

08008bd8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e00a      	b.n	8008bfe <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d102      	bne.n	8008bf8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1f1      	bne.n	8008be8 <tcp_remove_listener+0x10>
      }
   }
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d105      	bne.n	8008c2a <tcp_listen_closed+0x1a>
 8008c1e:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <tcp_listen_closed+0x5c>)
 8008c20:	22c0      	movs	r2, #192	; 0xc0
 8008c22:	4913      	ldr	r1, [pc, #76]	; (8008c70 <tcp_listen_closed+0x60>)
 8008c24:	4813      	ldr	r0, [pc, #76]	; (8008c74 <tcp_listen_closed+0x64>)
 8008c26:	f00a ffbd 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7d1b      	ldrb	r3, [r3, #20]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d005      	beq.n	8008c3e <tcp_listen_closed+0x2e>
 8008c32:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <tcp_listen_closed+0x5c>)
 8008c34:	22c1      	movs	r2, #193	; 0xc1
 8008c36:	4910      	ldr	r1, [pc, #64]	; (8008c78 <tcp_listen_closed+0x68>)
 8008c38:	480e      	ldr	r0, [pc, #56]	; (8008c74 <tcp_listen_closed+0x64>)
 8008c3a:	f00a ffb3 	bl	8013ba4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c3e:	2301      	movs	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	e00b      	b.n	8008c5c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008c44:	4a0d      	ldr	r2, [pc, #52]	; (8008c7c <tcp_listen_closed+0x6c>)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff ffc1 	bl	8008bd8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d9f0      	bls.n	8008c44 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008c62:	bf00      	nop
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	0801517c 	.word	0x0801517c
 8008c70:	080151ac 	.word	0x080151ac
 8008c74:	080151b8 	.word	0x080151b8
 8008c78:	080151e0 	.word	0x080151e0
 8008c7c:	08016b38 	.word	0x08016b38

08008c80 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008c80:	b5b0      	push	{r4, r5, r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d075      	beq.n	8008d7e <tcp_close_shutdown+0xfe>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7d1b      	ldrb	r3, [r3, #20]
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d003      	beq.n	8008ca2 <tcp_close_shutdown+0x22>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	7d1b      	ldrb	r3, [r3, #20]
 8008c9e:	2b07      	cmp	r3, #7
 8008ca0:	d16d      	bne.n	8008d7e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d104      	bne.n	8008cb4 <tcp_close_shutdown+0x34>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008cb2:	d064      	beq.n	8008d7e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7e9b      	ldrb	r3, [r3, #26]
 8008cb8:	f003 0310 	and.w	r3, r3, #16
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d106      	bne.n	8008cce <tcp_close_shutdown+0x4e>
 8008cc0:	4b59      	ldr	r3, [pc, #356]	; (8008e28 <tcp_close_shutdown+0x1a8>)
 8008cc2:	f240 120f 	movw	r2, #271	; 0x10f
 8008cc6:	4959      	ldr	r1, [pc, #356]	; (8008e2c <tcp_close_shutdown+0x1ac>)
 8008cc8:	4859      	ldr	r0, [pc, #356]	; (8008e30 <tcp_close_shutdown+0x1b0>)
 8008cca:	f00a ff6b 	bl	8013ba4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008cd6:	687c      	ldr	r4, [r7, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	1d1d      	adds	r5, r3, #4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	8adb      	ldrh	r3, [r3, #22]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	8b12      	ldrh	r2, [r2, #24]
 8008ce4:	9201      	str	r2, [sp, #4]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	462b      	mov	r3, r5
 8008cea:	4622      	mov	r2, r4
 8008cec:	f004 f862 	bl	800cdb4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 ffc5 	bl	8009c80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008cf6:	4b4f      	ldr	r3, [pc, #316]	; (8008e34 <tcp_close_shutdown+0x1b4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d105      	bne.n	8008d0c <tcp_close_shutdown+0x8c>
 8008d00:	4b4c      	ldr	r3, [pc, #304]	; (8008e34 <tcp_close_shutdown+0x1b4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	4a4b      	ldr	r2, [pc, #300]	; (8008e34 <tcp_close_shutdown+0x1b4>)
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	e013      	b.n	8008d34 <tcp_close_shutdown+0xb4>
 8008d0c:	4b49      	ldr	r3, [pc, #292]	; (8008e34 <tcp_close_shutdown+0x1b4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	e00c      	b.n	8008d2e <tcp_close_shutdown+0xae>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d104      	bne.n	8008d28 <tcp_close_shutdown+0xa8>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	60da      	str	r2, [r3, #12]
 8008d26:	e005      	b.n	8008d34 <tcp_close_shutdown+0xb4>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	60fb      	str	r3, [r7, #12]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1ef      	bne.n	8008d14 <tcp_close_shutdown+0x94>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	60da      	str	r2, [r3, #12]
 8008d3a:	4b3f      	ldr	r3, [pc, #252]	; (8008e38 <tcp_close_shutdown+0x1b8>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	7d1b      	ldrb	r3, [r3, #20]
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d10c      	bne.n	8008d62 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008d4e:	4b3b      	ldr	r3, [pc, #236]	; (8008e3c <tcp_close_shutdown+0x1bc>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]
 8008d56:	4a39      	ldr	r2, [pc, #228]	; (8008e3c <tcp_close_shutdown+0x1bc>)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	f004 fa7a 	bl	800d254 <tcp_timer_needed>
 8008d60:	e00b      	b.n	8008d7a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8008d62:	4b37      	ldr	r3, [pc, #220]	; (8008e40 <tcp_close_shutdown+0x1c0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d102      	bne.n	8008d72 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8008d6c:	f003 faec 	bl	800c348 <tcp_trigger_input_pcb_close>
 8008d70:	e003      	b.n	8008d7a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	2001      	movs	r0, #1
 8008d76:	f7fe ff89 	bl	8007c8c <memp_free>
        }
      }
      return ERR_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e050      	b.n	8008e20 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7d1b      	ldrb	r3, [r3, #20]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d02e      	beq.n	8008de4 <tcp_close_shutdown+0x164>
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d038      	beq.n	8008dfc <tcp_close_shutdown+0x17c>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d142      	bne.n	8008e14 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8adb      	ldrh	r3, [r3, #22]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d021      	beq.n	8008dda <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d96:	4b2b      	ldr	r3, [pc, #172]	; (8008e44 <tcp_close_shutdown+0x1c4>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d105      	bne.n	8008dac <tcp_close_shutdown+0x12c>
 8008da0:	4b28      	ldr	r3, [pc, #160]	; (8008e44 <tcp_close_shutdown+0x1c4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	4a27      	ldr	r2, [pc, #156]	; (8008e44 <tcp_close_shutdown+0x1c4>)
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e013      	b.n	8008dd4 <tcp_close_shutdown+0x154>
 8008dac:	4b25      	ldr	r3, [pc, #148]	; (8008e44 <tcp_close_shutdown+0x1c4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	60bb      	str	r3, [r7, #8]
 8008db2:	e00c      	b.n	8008dce <tcp_close_shutdown+0x14e>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d104      	bne.n	8008dc8 <tcp_close_shutdown+0x148>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	60da      	str	r2, [r3, #12]
 8008dc6:	e005      	b.n	8008dd4 <tcp_close_shutdown+0x154>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	60bb      	str	r3, [r7, #8]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1ef      	bne.n	8008db4 <tcp_close_shutdown+0x134>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	2001      	movs	r0, #1
 8008dde:	f7fe ff55 	bl	8007c8c <memp_free>
    break;
 8008de2:	e01c      	b.n	8008e1e <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff13 	bl	8008c10 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4816      	ldr	r0, [pc, #88]	; (8008e48 <tcp_close_shutdown+0x1c8>)
 8008dee:	f000 ff89 	bl	8009d04 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	2002      	movs	r0, #2
 8008df6:	f7fe ff49 	bl	8007c8c <memp_free>
    break;
 8008dfa:	e010      	b.n	8008e1e <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	480d      	ldr	r0, [pc, #52]	; (8008e34 <tcp_close_shutdown+0x1b4>)
 8008e00:	f000 ff80 	bl	8009d04 <tcp_pcb_remove>
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <tcp_close_shutdown+0x1b8>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	f7fe ff3d 	bl	8007c8c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8008e12:	e004      	b.n	8008e1e <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f819 	bl	8008e4c <tcp_close_shutdown_fin>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	e000      	b.n	8008e20 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bdb0      	pop	{r4, r5, r7, pc}
 8008e28:	0801517c 	.word	0x0801517c
 8008e2c:	080151f8 	.word	0x080151f8
 8008e30:	080151b8 	.word	0x080151b8
 8008e34:	200038e8 	.word	0x200038e8
 8008e38:	200038e4 	.word	0x200038e4
 8008e3c:	200038f8 	.word	0x200038f8
 8008e40:	200038fc 	.word	0x200038fc
 8008e44:	200038f4 	.word	0x200038f4
 8008e48:	200038f0 	.word	0x200038f0

08008e4c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <tcp_close_shutdown_fin+0x1c>
 8008e5a:	4b2c      	ldr	r3, [pc, #176]	; (8008f0c <tcp_close_shutdown_fin+0xc0>)
 8008e5c:	f240 124d 	movw	r2, #333	; 0x14d
 8008e60:	492b      	ldr	r1, [pc, #172]	; (8008f10 <tcp_close_shutdown_fin+0xc4>)
 8008e62:	482c      	ldr	r0, [pc, #176]	; (8008f14 <tcp_close_shutdown_fin+0xc8>)
 8008e64:	f00a fe9e 	bl	8013ba4 <iprintf>

  switch (pcb->state) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7d1b      	ldrb	r3, [r3, #20]
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	d010      	beq.n	8008e92 <tcp_close_shutdown_fin+0x46>
 8008e70:	2b07      	cmp	r3, #7
 8008e72:	d01b      	beq.n	8008eac <tcp_close_shutdown_fin+0x60>
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d126      	bne.n	8008ec6 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f003 faf1 	bl	800c460 <tcp_send_fin>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d11f      	bne.n	8008eca <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008e90:	e01b      	b.n	8008eca <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f003 fae4 	bl	800c460 <tcp_send_fin>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d114      	bne.n	8008ece <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2205      	movs	r2, #5
 8008ea8:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008eaa:	e010      	b.n	8008ece <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f003 fad7 	bl	800c460 <tcp_send_fin>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2209      	movs	r2, #9
 8008ec2:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008ec4:	e005      	b.n	8008ed2 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e01c      	b.n	8008f04 <tcp_close_shutdown_fin+0xb8>
    break;
 8008eca:	bf00      	nop
 8008ecc:	e002      	b.n	8008ed4 <tcp_close_shutdown_fin+0x88>
    break;
 8008ece:	bf00      	nop
 8008ed0:	e000      	b.n	8008ed4 <tcp_close_shutdown_fin+0x88>
    break;
 8008ed2:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f003 fcdf 	bl	800c8a0 <tcp_output>
 8008ee2:	e00d      	b.n	8008f00 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8008ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eec:	d108      	bne.n	8008f00 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	7e9b      	ldrb	r3, [r3, #26]
 8008ef2:	f043 0308 	orr.w	r3, r3, #8
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	e001      	b.n	8008f04 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8008f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	0801517c 	.word	0x0801517c
 8008f10:	080151ac 	.word	0x080151ac
 8008f14:	080151b8 	.word	0x080151b8

08008f18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	7d1b      	ldrb	r3, [r3, #20]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d006      	beq.n	8008f36 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7e9b      	ldrb	r3, [r3, #26]
 8008f2c:	f043 0310 	orr.w	r3, r3, #16
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008f36:	2101      	movs	r1, #1
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fea1 	bl	8008c80 <tcp_close_shutdown>
 8008f3e:	4603      	mov	r3, r0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08c      	sub	sp, #48	; 0x30
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7d1b      	ldrb	r3, [r3, #20]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d106      	bne.n	8008f68 <tcp_abandon+0x20>
 8008f5a:	4b4d      	ldr	r3, [pc, #308]	; (8009090 <tcp_abandon+0x148>)
 8008f5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008f60:	494c      	ldr	r1, [pc, #304]	; (8009094 <tcp_abandon+0x14c>)
 8008f62:	484d      	ldr	r0, [pc, #308]	; (8009098 <tcp_abandon+0x150>)
 8008f64:	f00a fe1e 	bl	8013ba4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7d1b      	ldrb	r3, [r3, #20]
 8008f6c:	2b0a      	cmp	r3, #10
 8008f6e:	d108      	bne.n	8008f82 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	484a      	ldr	r0, [pc, #296]	; (800909c <tcp_abandon+0x154>)
 8008f74:	f000 fec6 	bl	8009d04 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	f7fe fe86 	bl	8007c8c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8008f80:	e081      	b.n	8009086 <tcp_abandon+0x13e>
    int send_rst = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f9c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d126      	bne.n	8008ffa <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8adb      	ldrh	r3, [r3, #22]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d02e      	beq.n	8009012 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008fb4:	4b3a      	ldr	r3, [pc, #232]	; (80090a0 <tcp_abandon+0x158>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d105      	bne.n	8008fca <tcp_abandon+0x82>
 8008fbe:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <tcp_abandon+0x158>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4a36      	ldr	r2, [pc, #216]	; (80090a0 <tcp_abandon+0x158>)
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	e013      	b.n	8008ff2 <tcp_abandon+0xaa>
 8008fca:	4b35      	ldr	r3, [pc, #212]	; (80090a0 <tcp_abandon+0x158>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e00c      	b.n	8008fec <tcp_abandon+0xa4>
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d104      	bne.n	8008fe6 <tcp_abandon+0x9e>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	60da      	str	r2, [r3, #12]
 8008fe4:	e005      	b.n	8008ff2 <tcp_abandon+0xaa>
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1ef      	bne.n	8008fd2 <tcp_abandon+0x8a>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	60da      	str	r2, [r3, #12]
 8008ff8:	e00b      	b.n	8009012 <tcp_abandon+0xca>
      send_rst = reset;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8adb      	ldrh	r3, [r3, #22]
 8009002:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4827      	ldr	r0, [pc, #156]	; (80090a4 <tcp_abandon+0x15c>)
 8009008:	f000 fe7c 	bl	8009d04 <tcp_pcb_remove>
 800900c:	4b26      	ldr	r3, [pc, #152]	; (80090a8 <tcp_abandon+0x160>)
 800900e:	2201      	movs	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fc85 	bl	800992e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009028:	2b00      	cmp	r3, #0
 800902a:	d004      	beq.n	8009036 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fc7c 	bl	800992e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903a:	2b00      	cmp	r3, #0
 800903c:	d004      	beq.n	8009048 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fc73 	bl	800992e <tcp_segs_free>
    if (send_rst) {
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00c      	beq.n	8009068 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	1d19      	adds	r1, r3, #4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	8b1b      	ldrh	r3, [r3, #24]
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	460b      	mov	r3, r1
 8009060:	6979      	ldr	r1, [r7, #20]
 8009062:	69b8      	ldr	r0, [r7, #24]
 8009064:	f003 fea6 	bl	800cdb4 <tcp_rst>
    last_state = pcb->state;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7d1b      	ldrb	r3, [r3, #20]
 800906c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	2001      	movs	r0, #1
 8009072:	f7fe fe0b 	bl	8007c8c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d004      	beq.n	8009086 <tcp_abandon+0x13e>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f06f 010c 	mvn.w	r1, #12
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	4798      	blx	r3
}
 8009086:	bf00      	nop
 8009088:	3728      	adds	r7, #40	; 0x28
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	0801517c 	.word	0x0801517c
 8009094:	08015214 	.word	0x08015214
 8009098:	080151b8 	.word	0x080151b8
 800909c:	200038f8 	.word	0x200038f8
 80090a0:	200038f4 	.word	0x200038f4
 80090a4:	200038e8 	.word	0x200038e8
 80090a8:	200038e4 	.word	0x200038e4

080090ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80090b4:	2101      	movs	r1, #1
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff ff46 	bl	8008f48 <tcp_abandon>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80090d4:	4413      	add	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80090e0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80090e4:	bf28      	it	cs
 80090e6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80090ea:	b292      	uxth	r2, r2
 80090ec:	4413      	add	r3, r2
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	db08      	blt.n	8009108 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	e020      	b.n	800914a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd03      	ble.n	800911e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800911c:	e014      	b.n	8009148 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009130:	d306      	bcc.n	8009140 <tcp_update_rcv_ann_wnd+0x7c>
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <tcp_update_rcv_ann_wnd+0x90>)
 8009134:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009138:	4907      	ldr	r1, [pc, #28]	; (8009158 <tcp_update_rcv_ann_wnd+0x94>)
 800913a:	4808      	ldr	r0, [pc, #32]	; (800915c <tcp_update_rcv_ann_wnd+0x98>)
 800913c:	f00a fd32 	bl	8013ba4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	b29a      	uxth	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009148:	2300      	movs	r3, #0
  }
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	0801517c 	.word	0x0801517c
 8009158:	08015294 	.word	0x08015294
 800915c:	080151b8 	.word	0x080151b8

08009160 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7d1b      	ldrb	r3, [r3, #20]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d106      	bne.n	8009182 <tcp_recved+0x22>
 8009174:	4b23      	ldr	r3, [pc, #140]	; (8009204 <tcp_recved+0xa4>)
 8009176:	f44f 7248 	mov.w	r2, #800	; 0x320
 800917a:	4923      	ldr	r1, [pc, #140]	; (8009208 <tcp_recved+0xa8>)
 800917c:	4823      	ldr	r0, [pc, #140]	; (800920c <tcp_recved+0xac>)
 800917e:	f00a fd11 	bl	8013ba4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009186:	887b      	ldrh	r3, [r7, #2]
 8009188:	4413      	add	r3, r2
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009194:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009198:	d904      	bls.n	80091a4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80091a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80091a2:	e017      	b.n	80091d4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d113      	bne.n	80091d4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	7d1b      	ldrb	r3, [r3, #20]
 80091b0:	2b07      	cmp	r3, #7
 80091b2:	d003      	beq.n	80091bc <tcp_recved+0x5c>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	2b09      	cmp	r3, #9
 80091ba:	d104      	bne.n	80091c6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80091c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80091c4:	e006      	b.n	80091d4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <tcp_recved+0xa4>)
 80091c8:	f240 322d 	movw	r2, #813	; 0x32d
 80091cc:	4910      	ldr	r1, [pc, #64]	; (8009210 <tcp_recved+0xb0>)
 80091ce:	480f      	ldr	r0, [pc, #60]	; (800920c <tcp_recved+0xac>)
 80091d0:	f00a fce8 	bl	8013ba4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7ff ff75 	bl	80090c4 <tcp_update_rcv_ann_wnd>
 80091da:	4603      	mov	r3, r0
 80091dc:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80091e4:	db09      	blt.n	80091fa <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7e9b      	ldrb	r3, [r3, #26]
 80091ea:	f043 0302 	orr.w	r3, r3, #2
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f003 fb53 	bl	800c8a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	0801517c 	.word	0x0801517c
 8009208:	080152b0 	.word	0x080152b0
 800920c:	080151b8 	.word	0x080151b8
 8009210:	080152d8 	.word	0x080152d8

08009214 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009214:	b5b0      	push	{r4, r5, r7, lr}
 8009216:	b08c      	sub	sp, #48	; 0x30
 8009218:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800921e:	4b97      	ldr	r3, [pc, #604]	; (800947c <tcp_slowtmr+0x268>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	4a95      	ldr	r2, [pc, #596]	; (800947c <tcp_slowtmr+0x268>)
 8009226:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009228:	4b95      	ldr	r3, [pc, #596]	; (8009480 <tcp_slowtmr+0x26c>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	4b93      	ldr	r3, [pc, #588]	; (8009480 <tcp_slowtmr+0x26c>)
 8009232:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009234:	2300      	movs	r3, #0
 8009236:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8009238:	4b92      	ldr	r3, [pc, #584]	; (8009484 <tcp_slowtmr+0x270>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800923e:	e227      	b.n	8009690 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	7d1b      	ldrb	r3, [r3, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <tcp_slowtmr+0x42>
 8009248:	4b8f      	ldr	r3, [pc, #572]	; (8009488 <tcp_slowtmr+0x274>)
 800924a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800924e:	498f      	ldr	r1, [pc, #572]	; (800948c <tcp_slowtmr+0x278>)
 8009250:	488f      	ldr	r0, [pc, #572]	; (8009490 <tcp_slowtmr+0x27c>)
 8009252:	f00a fca7 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	7d1b      	ldrb	r3, [r3, #20]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d106      	bne.n	800926c <tcp_slowtmr+0x58>
 800925e:	4b8a      	ldr	r3, [pc, #552]	; (8009488 <tcp_slowtmr+0x274>)
 8009260:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009264:	498b      	ldr	r1, [pc, #556]	; (8009494 <tcp_slowtmr+0x280>)
 8009266:	488a      	ldr	r0, [pc, #552]	; (8009490 <tcp_slowtmr+0x27c>)
 8009268:	f00a fc9c 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	7d1b      	ldrb	r3, [r3, #20]
 8009270:	2b0a      	cmp	r3, #10
 8009272:	d106      	bne.n	8009282 <tcp_slowtmr+0x6e>
 8009274:	4b84      	ldr	r3, [pc, #528]	; (8009488 <tcp_slowtmr+0x274>)
 8009276:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800927a:	4987      	ldr	r1, [pc, #540]	; (8009498 <tcp_slowtmr+0x284>)
 800927c:	4884      	ldr	r0, [pc, #528]	; (8009490 <tcp_slowtmr+0x27c>)
 800927e:	f00a fc91 	bl	8013ba4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	7f5a      	ldrb	r2, [r3, #29]
 8009286:	4b7e      	ldr	r3, [pc, #504]	; (8009480 <tcp_slowtmr+0x26c>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d103      	bne.n	8009296 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009294:	e1fc      	b.n	8009690 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009296:	4b7a      	ldr	r3, [pc, #488]	; (8009480 <tcp_slowtmr+0x26c>)
 8009298:	781a      	ldrb	r2, [r3, #0]
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	7d1b      	ldrb	r3, [r3, #20]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d108      	bne.n	80092c0 <tcp_slowtmr+0xac>
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092b4:	2b05      	cmp	r3, #5
 80092b6:	d903      	bls.n	80092c0 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80092b8:	7ffb      	ldrb	r3, [r7, #31]
 80092ba:	3301      	adds	r3, #1
 80092bc:	77fb      	strb	r3, [r7, #31]
 80092be:	e0a2      	b.n	8009406 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092c6:	2b0b      	cmp	r3, #11
 80092c8:	d903      	bls.n	80092d2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80092ca:	7ffb      	ldrb	r3, [r7, #31]
 80092cc:	3301      	adds	r3, #1
 80092ce:	77fb      	strb	r3, [r7, #31]
 80092d0:	e099      	b.n	8009406 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d032      	beq.n	8009342 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80092e2:	3b01      	subs	r3, #1
 80092e4:	4a6d      	ldr	r2, [pc, #436]	; (800949c <tcp_slowtmr+0x288>)
 80092e6:	5cd3      	ldrb	r3, [r2, r3]
 80092e8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80092f0:	7cfa      	ldrb	r2, [r7, #19]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d907      	bls.n	8009306 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80092fc:	3301      	adds	r3, #1
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800930c:	7cfa      	ldrb	r2, [r7, #19]
 800930e:	429a      	cmp	r2, r3
 8009310:	d879      	bhi.n	8009406 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8009312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009314:	f003 fede 	bl	800d0d4 <tcp_zero_window_probe>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d173      	bne.n	8009406 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800932c:	2b06      	cmp	r3, #6
 800932e:	d86a      	bhi.n	8009406 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009336:	3301      	adds	r3, #1
 8009338:	b2da      	uxtb	r2, r3
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009340:	e061      	b.n	8009406 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009348:	2b00      	cmp	r3, #0
 800934a:	db08      	blt.n	800935e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009352:	b29b      	uxth	r3, r3
 8009354:	3301      	adds	r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	b21a      	sxth	r2, r3
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d04f      	beq.n	8009406 <tcp_slowtmr+0x1f2>
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009372:	429a      	cmp	r2, r3
 8009374:	db47      	blt.n	8009406 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	7d1b      	ldrb	r3, [r3, #20]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d018      	beq.n	80093b0 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009384:	2b0c      	cmp	r3, #12
 8009386:	bf28      	it	cs
 8009388:	230c      	movcs	r3, #12
 800938a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009392:	10db      	asrs	r3, r3, #3
 8009394:	b21b      	sxth	r3, r3
 8009396:	461a      	mov	r2, r3
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800939e:	4413      	add	r3, r2
 80093a0:	7dfa      	ldrb	r2, [r7, #23]
 80093a2:	493f      	ldr	r1, [pc, #252]	; (80094a0 <tcp_slowtmr+0x28c>)
 80093a4:	5c8a      	ldrb	r2, [r1, r2]
 80093a6:	4093      	lsls	r3, r2
 80093a8:	b21a      	sxth	r2, r3
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	2200      	movs	r2, #0
 80093b4:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80093c2:	4293      	cmp	r3, r2
 80093c4:	bf28      	it	cs
 80093c6:	4613      	movcs	r3, r2
 80093c8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80093ca:	8abb      	ldrh	r3, [r7, #20]
 80093cc:	085b      	lsrs	r3, r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d206      	bcs.n	80093f6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8009400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009402:	f003 fd4d 	bl	800cea0 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	7d1b      	ldrb	r3, [r3, #20]
 800940a:	2b06      	cmp	r3, #6
 800940c:	d10f      	bne.n	800942e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	7e9b      	ldrb	r3, [r3, #26]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b00      	cmp	r3, #0
 8009418:	d009      	beq.n	800942e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800941a:	4b18      	ldr	r3, [pc, #96]	; (800947c <tcp_slowtmr+0x268>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	2b28      	cmp	r3, #40	; 0x28
 8009426:	d902      	bls.n	800942e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009428:	7ffb      	ldrb	r3, [r7, #31]
 800942a:	3301      	adds	r3, #1
 800942c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	7a1b      	ldrb	r3, [r3, #8]
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d05d      	beq.n	80094f6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800943e:	2b04      	cmp	r3, #4
 8009440:	d003      	beq.n	800944a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8009446:	2b07      	cmp	r3, #7
 8009448:	d155      	bne.n	80094f6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800944a:	4b0c      	ldr	r3, [pc, #48]	; (800947c <tcp_slowtmr+0x268>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800945a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800945e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009462:	4910      	ldr	r1, [pc, #64]	; (80094a4 <tcp_slowtmr+0x290>)
 8009464:	fba1 1303 	umull	r1, r3, r1, r3
 8009468:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800946a:	429a      	cmp	r2, r3
 800946c:	d91c      	bls.n	80094a8 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800946e:	7ffb      	ldrb	r3, [r7, #31]
 8009470:	3301      	adds	r3, #1
 8009472:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8009474:	7fbb      	ldrb	r3, [r7, #30]
 8009476:	3301      	adds	r3, #1
 8009478:	77bb      	strb	r3, [r7, #30]
 800947a:	e03c      	b.n	80094f6 <tcp_slowtmr+0x2e2>
 800947c:	200038ec 	.word	0x200038ec
 8009480:	2000023e 	.word	0x2000023e
 8009484:	200038e8 	.word	0x200038e8
 8009488:	0801517c 	.word	0x0801517c
 800948c:	0801532c 	.word	0x0801532c
 8009490:	080151b8 	.word	0x080151b8
 8009494:	08015358 	.word	0x08015358
 8009498:	08015384 	.word	0x08015384
 800949c:	08016b30 	.word	0x08016b30
 80094a0:	08016b20 	.word	0x08016b20
 80094a4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094a8:	4b97      	ldr	r3, [pc, #604]	; (8009708 <tcp_slowtmr+0x4f4>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80094be:	4618      	mov	r0, r3
 80094c0:	4b92      	ldr	r3, [pc, #584]	; (800970c <tcp_slowtmr+0x4f8>)
 80094c2:	fb03 f300 	mul.w	r3, r3, r0
 80094c6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80094c8:	4991      	ldr	r1, [pc, #580]	; (8009710 <tcp_slowtmr+0x4fc>)
 80094ca:	fba1 1303 	umull	r1, r3, r1, r3
 80094ce:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d910      	bls.n	80094f6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80094d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094d6:	f003 fdc0 	bl	800d05a <tcp_keepalive>
 80094da:	4603      	mov	r3, r0
 80094dc:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80094de:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d107      	bne.n	80094f6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80094ec:	3301      	adds	r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d016      	beq.n	800952c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80094fe:	4b82      	ldr	r3, [pc, #520]	; (8009708 <tcp_slowtmr+0x4f4>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	1ad2      	subs	r2, r2, r3
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800950e:	4619      	mov	r1, r3
 8009510:	460b      	mov	r3, r1
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	440b      	add	r3, r1
 8009516:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009518:	429a      	cmp	r2, r3
 800951a:	d307      	bcc.n	800952c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fa04 	bl	800992e <tcp_segs_free>
      pcb->ooseq = NULL;
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	2200      	movs	r2, #0
 800952a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	7d1b      	ldrb	r3, [r3, #20]
 8009530:	2b03      	cmp	r3, #3
 8009532:	d109      	bne.n	8009548 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009534:	4b74      	ldr	r3, [pc, #464]	; (8009708 <tcp_slowtmr+0x4f4>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b28      	cmp	r3, #40	; 0x28
 8009540:	d902      	bls.n	8009548 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009542:	7ffb      	ldrb	r3, [r7, #31]
 8009544:	3301      	adds	r3, #1
 8009546:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	7d1b      	ldrb	r3, [r3, #20]
 800954c:	2b09      	cmp	r3, #9
 800954e:	d109      	bne.n	8009564 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009550:	4b6d      	ldr	r3, [pc, #436]	; (8009708 <tcp_slowtmr+0x4f4>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2bf0      	cmp	r3, #240	; 0xf0
 800955c:	d902      	bls.n	8009564 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800955e:	7ffb      	ldrb	r3, [r7, #31]
 8009560:	3301      	adds	r3, #1
 8009562:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009564:	7ffb      	ldrb	r3, [r7, #31]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d05d      	beq.n	8009626 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009570:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009574:	f000 fb84 	bl	8009c80 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d010      	beq.n	80095a0 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800957e:	4b65      	ldr	r3, [pc, #404]	; (8009714 <tcp_slowtmr+0x500>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009584:	429a      	cmp	r2, r3
 8009586:	d106      	bne.n	8009596 <tcp_slowtmr+0x382>
 8009588:	4b63      	ldr	r3, [pc, #396]	; (8009718 <tcp_slowtmr+0x504>)
 800958a:	f240 4289 	movw	r2, #1161	; 0x489
 800958e:	4963      	ldr	r1, [pc, #396]	; (800971c <tcp_slowtmr+0x508>)
 8009590:	4863      	ldr	r0, [pc, #396]	; (8009720 <tcp_slowtmr+0x50c>)
 8009592:	f00a fb07 	bl	8013ba4 <iprintf>
        prev->next = pcb->next;
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	60da      	str	r2, [r3, #12]
 800959e:	e00f      	b.n	80095c0 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80095a0:	4b5c      	ldr	r3, [pc, #368]	; (8009714 <tcp_slowtmr+0x500>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d006      	beq.n	80095b8 <tcp_slowtmr+0x3a4>
 80095aa:	4b5b      	ldr	r3, [pc, #364]	; (8009718 <tcp_slowtmr+0x504>)
 80095ac:	f240 428d 	movw	r2, #1165	; 0x48d
 80095b0:	495c      	ldr	r1, [pc, #368]	; (8009724 <tcp_slowtmr+0x510>)
 80095b2:	485b      	ldr	r0, [pc, #364]	; (8009720 <tcp_slowtmr+0x50c>)
 80095b4:	f00a faf6 	bl	8013ba4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	4a55      	ldr	r2, [pc, #340]	; (8009714 <tcp_slowtmr+0x500>)
 80095be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80095c0:	7fbb      	ldrb	r3, [r7, #30]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d010      	beq.n	80095e8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80095ce:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	1d1d      	adds	r5, r3, #4
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	8adb      	ldrh	r3, [r3, #22]
 80095d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095da:	8b12      	ldrh	r2, [r2, #24]
 80095dc:	9201      	str	r2, [sp, #4]
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	462b      	mov	r3, r5
 80095e2:	4622      	mov	r2, r4
 80095e4:	f003 fbe6 	bl	800cdb4 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	7d1b      	ldrb	r3, [r3, #20]
 80095f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	2001      	movs	r0, #1
 8009602:	f7fe fb43 	bl	8007c8c <memp_free>

      tcp_active_pcbs_changed = 0;
 8009606:	4b48      	ldr	r3, [pc, #288]	; (8009728 <tcp_slowtmr+0x514>)
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <tcp_slowtmr+0x408>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f06f 010c 	mvn.w	r1, #12
 8009618:	68b8      	ldr	r0, [r7, #8]
 800961a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800961c:	4b42      	ldr	r3, [pc, #264]	; (8009728 <tcp_slowtmr+0x514>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d035      	beq.n	8009690 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8009624:	e606      	b.n	8009234 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	7edb      	ldrb	r3, [r3, #27]
 8009634:	3301      	adds	r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	7eda      	ldrb	r2, [r3, #27]
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	7f1b      	ldrb	r3, [r3, #28]
 8009644:	429a      	cmp	r2, r3
 8009646:	d323      	bcc.n	8009690 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	2200      	movs	r2, #0
 800964c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800964e:	4b36      	ldr	r3, [pc, #216]	; (8009728 <tcp_slowtmr+0x514>)
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <tcp_slowtmr+0x460>
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009664:	6a3a      	ldr	r2, [r7, #32]
 8009666:	6912      	ldr	r2, [r2, #16]
 8009668:	6a39      	ldr	r1, [r7, #32]
 800966a:	4610      	mov	r0, r2
 800966c:	4798      	blx	r3
 800966e:	4603      	mov	r3, r0
 8009670:	777b      	strb	r3, [r7, #29]
 8009672:	e001      	b.n	8009678 <tcp_slowtmr+0x464>
 8009674:	2300      	movs	r3, #0
 8009676:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8009678:	4b2b      	ldr	r3, [pc, #172]	; (8009728 <tcp_slowtmr+0x514>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d000      	beq.n	8009682 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8009680:	e5d8      	b.n	8009234 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009682:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800968a:	6a38      	ldr	r0, [r7, #32]
 800968c:	f003 f908 	bl	800c8a0 <tcp_output>
  while (pcb != NULL) {
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	2b00      	cmp	r3, #0
 8009694:	f47f add4 	bne.w	8009240 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800969c:	4b23      	ldr	r3, [pc, #140]	; (800972c <tcp_slowtmr+0x518>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80096a2:	e068      	b.n	8009776 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
 80096a8:	2b0a      	cmp	r3, #10
 80096aa:	d006      	beq.n	80096ba <tcp_slowtmr+0x4a6>
 80096ac:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <tcp_slowtmr+0x504>)
 80096ae:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80096b2:	491f      	ldr	r1, [pc, #124]	; (8009730 <tcp_slowtmr+0x51c>)
 80096b4:	481a      	ldr	r0, [pc, #104]	; (8009720 <tcp_slowtmr+0x50c>)
 80096b6:	f00a fa75 	bl	8013ba4 <iprintf>
    pcb_remove = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <tcp_slowtmr+0x4f4>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2bf0      	cmp	r3, #240	; 0xf0
 80096ca:	d902      	bls.n	80096d2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80096cc:	7ffb      	ldrb	r3, [r7, #31]
 80096ce:	3301      	adds	r3, #1
 80096d0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80096d2:	7ffb      	ldrb	r3, [r7, #31]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d049      	beq.n	800976c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80096d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096da:	f000 fad1 	bl	8009c80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d029      	beq.n	8009738 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80096e4:	4b11      	ldr	r3, [pc, #68]	; (800972c <tcp_slowtmr+0x518>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d106      	bne.n	80096fc <tcp_slowtmr+0x4e8>
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <tcp_slowtmr+0x504>)
 80096f0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80096f4:	490f      	ldr	r1, [pc, #60]	; (8009734 <tcp_slowtmr+0x520>)
 80096f6:	480a      	ldr	r0, [pc, #40]	; (8009720 <tcp_slowtmr+0x50c>)
 80096f8:	f00a fa54 	bl	8013ba4 <iprintf>
        prev->next = pcb->next;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	60da      	str	r2, [r3, #12]
 8009704:	e028      	b.n	8009758 <tcp_slowtmr+0x544>
 8009706:	bf00      	nop
 8009708:	200038ec 	.word	0x200038ec
 800970c:	000124f8 	.word	0x000124f8
 8009710:	10624dd3 	.word	0x10624dd3
 8009714:	200038e8 	.word	0x200038e8
 8009718:	0801517c 	.word	0x0801517c
 800971c:	080153b4 	.word	0x080153b4
 8009720:	080151b8 	.word	0x080151b8
 8009724:	080153e0 	.word	0x080153e0
 8009728:	200038e4 	.word	0x200038e4
 800972c:	200038f8 	.word	0x200038f8
 8009730:	0801540c 	.word	0x0801540c
 8009734:	0801543c 	.word	0x0801543c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009738:	4b12      	ldr	r3, [pc, #72]	; (8009784 <tcp_slowtmr+0x570>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973e:	429a      	cmp	r2, r3
 8009740:	d006      	beq.n	8009750 <tcp_slowtmr+0x53c>
 8009742:	4b11      	ldr	r3, [pc, #68]	; (8009788 <tcp_slowtmr+0x574>)
 8009744:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8009748:	4910      	ldr	r1, [pc, #64]	; (800978c <tcp_slowtmr+0x578>)
 800974a:	4811      	ldr	r0, [pc, #68]	; (8009790 <tcp_slowtmr+0x57c>)
 800974c:	f00a fa2a 	bl	8013ba4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	4a0b      	ldr	r2, [pc, #44]	; (8009784 <tcp_slowtmr+0x570>)
 8009756:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8009762:	69b9      	ldr	r1, [r7, #24]
 8009764:	2001      	movs	r0, #1
 8009766:	f7fe fa91 	bl	8007c8c <memp_free>
 800976a:	e004      	b.n	8009776 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	2b00      	cmp	r3, #0
 800977a:	d193      	bne.n	80096a4 <tcp_slowtmr+0x490>
    }
  }
}
 800977c:	bf00      	nop
 800977e:	3728      	adds	r7, #40	; 0x28
 8009780:	46bd      	mov	sp, r7
 8009782:	bdb0      	pop	{r4, r5, r7, pc}
 8009784:	200038f8 	.word	0x200038f8
 8009788:	0801517c 	.word	0x0801517c
 800978c:	08015464 	.word	0x08015464
 8009790:	080151b8 	.word	0x080151b8

08009794 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800979a:	4b2d      	ldr	r3, [pc, #180]	; (8009850 <tcp_fasttmr+0xbc>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	3301      	adds	r3, #1
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	4b2b      	ldr	r3, [pc, #172]	; (8009850 <tcp_fasttmr+0xbc>)
 80097a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80097a6:	4b2b      	ldr	r3, [pc, #172]	; (8009854 <tcp_fasttmr+0xc0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80097ac:	e048      	b.n	8009840 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	7f5a      	ldrb	r2, [r3, #29]
 80097b2:	4b27      	ldr	r3, [pc, #156]	; (8009850 <tcp_fasttmr+0xbc>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d03f      	beq.n	800983a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80097ba:	4b25      	ldr	r3, [pc, #148]	; (8009850 <tcp_fasttmr+0xbc>)
 80097bc:	781a      	ldrb	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	7e9b      	ldrb	r3, [r3, #26]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d010      	beq.n	80097f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7e9b      	ldrb	r3, [r3, #26]
 80097d2:	f043 0302 	orr.w	r3, r3, #2
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f003 f85f 	bl	800c8a0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	7e9b      	ldrb	r3, [r3, #26]
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	7e9b      	ldrb	r3, [r3, #26]
 80097f4:	f003 0308 	and.w	r3, r3, #8
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	7e9b      	ldrb	r3, [r3, #26]
 8009800:	f023 0308 	bic.w	r3, r3, #8
 8009804:	b2da      	uxtb	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff fb1e 	bl	8008e4c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00a      	beq.n	8009834 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800981e:	4b0e      	ldr	r3, [pc, #56]	; (8009858 <tcp_fasttmr+0xc4>)
 8009820:	2200      	movs	r2, #0
 8009822:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f819 	bl	800985c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800982a:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <tcp_fasttmr+0xc4>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d000      	beq.n	8009834 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009832:	e7b8      	b.n	80097a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	607b      	str	r3, [r7, #4]
 8009838:	e002      	b.n	8009840 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1b3      	bne.n	80097ae <tcp_fasttmr+0x1a>
    }
  }
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	2000023e 	.word	0x2000023e
 8009854:	200038e8 	.word	0x200038e8
 8009858:	200038e4 	.word	0x200038e4

0800985c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009868:	7b5b      	ldrb	r3, [r3, #13]
 800986a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009870:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00b      	beq.n	800989a <tcp_process_refused_data+0x3e>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6918      	ldr	r0, [r3, #16]
 800988c:	2300      	movs	r3, #0
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	47a0      	blx	r4
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]
 8009898:	e007      	b.n	80098aa <tcp_process_refused_data+0x4e>
 800989a:	2300      	movs	r3, #0
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	2000      	movs	r0, #0
 80098a2:	f000 f88c 	bl	80099be <tcp_recv_null>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80098aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d12a      	bne.n	8009908 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d033      	beq.n	8009924 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80098c4:	d005      	beq.n	80098d2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ca:	3301      	adds	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <tcp_process_refused_data+0x98>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6918      	ldr	r0, [r3, #16]
 80098e6:	2300      	movs	r3, #0
 80098e8:	2200      	movs	r2, #0
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	47a0      	blx	r4
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]
 80098f2:	e001      	b.n	80098f8 <tcp_process_refused_data+0x9c>
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80098f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098fc:	f113 0f0d 	cmn.w	r3, #13
 8009900:	d110      	bne.n	8009924 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8009902:	f06f 030c 	mvn.w	r3, #12
 8009906:	e00e      	b.n	8009926 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8009908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800990c:	f113 0f0d 	cmn.w	r3, #13
 8009910:	d102      	bne.n	8009918 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009912:	f06f 030c 	mvn.w	r3, #12
 8009916:	e006      	b.n	8009926 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800991e:	f06f 0304 	mvn.w	r3, #4
 8009922:	e000      	b.n	8009926 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	bd90      	pop	{r4, r7, pc}

0800992e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009936:	e007      	b.n	8009948 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f809 	bl	8009956 <tcp_seg_free>
    seg = next;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1f4      	bne.n	8009938 <tcp_segs_free+0xa>
  }
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00c      	beq.n	800997e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fe99 	bl	80086a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	2003      	movs	r0, #3
 800997a:	f7fe f987 	bl	8007c8c <memp_free>
  }
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800998e:	2003      	movs	r0, #3
 8009990:	f7fe f930 	bl	8007bf4 <memp_malloc>
 8009994:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <tcp_seg_copy+0x1a>
    return NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	e00a      	b.n	80099b6 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80099a0:	2210      	movs	r2, #16
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f00a f842 	bl	8013a2e <memcpy>
  pbuf_ref(cseg->p);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe ff26 	bl	8008800 <pbuf_ref>
  return cseg;
 80099b4:	68fb      	ldr	r3, [r7, #12]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	60f8      	str	r0, [r7, #12]
 80099c6:	60b9      	str	r1, [r7, #8]
 80099c8:	607a      	str	r2, [r7, #4]
 80099ca:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	891b      	ldrh	r3, [r3, #8]
 80099d6:	4619      	mov	r1, r3
 80099d8:	68b8      	ldr	r0, [r7, #8]
 80099da:	f7ff fbc1 	bl	8009160 <tcp_recved>
    pbuf_free(p);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7fe fe62 	bl	80086a8 <pbuf_free>
 80099e4:	e008      	b.n	80099f8 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80099e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d104      	bne.n	80099f8 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80099ee:	68b8      	ldr	r0, [r7, #8]
 80099f0:	f7ff fa92 	bl	8008f18 <tcp_close>
 80099f4:	4603      	mov	r3, r0
 80099f6:	e000      	b.n	80099fa <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	db01      	blt.n	8009a1a <tcp_kill_prio+0x16>
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	e000      	b.n	8009a1c <tcp_kill_prio+0x18>
 8009a1a:	237f      	movs	r3, #127	; 0x7f
 8009a1c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a26:	4b16      	ldr	r3, [pc, #88]	; (8009a80 <tcp_kill_prio+0x7c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	e01a      	b.n	8009a64 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	7d5b      	ldrb	r3, [r3, #21]
 8009a32:	7afa      	ldrb	r2, [r7, #11]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d312      	bcc.n	8009a5e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009a38:	4b12      	ldr	r3, [pc, #72]	; (8009a84 <tcp_kill_prio+0x80>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d80a      	bhi.n	8009a5e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8009a48:	4b0e      	ldr	r3, [pc, #56]	; (8009a84 <tcp_kill_prio+0x80>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	7d5b      	ldrb	r3, [r3, #21]
 8009a5c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e1      	bne.n	8009a2e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009a70:	6938      	ldr	r0, [r7, #16]
 8009a72:	f7ff fb1b 	bl	80090ac <tcp_abort>
  }
}
 8009a76:	bf00      	nop
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	200038e8 	.word	0x200038e8
 8009a84:	200038ec 	.word	0x200038ec

08009a88 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d009      	beq.n	8009aac <tcp_kill_state+0x24>
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	2b09      	cmp	r3, #9
 8009a9c:	d006      	beq.n	8009aac <tcp_kill_state+0x24>
 8009a9e:	4b1a      	ldr	r3, [pc, #104]	; (8009b08 <tcp_kill_state+0x80>)
 8009aa0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009aa4:	4919      	ldr	r1, [pc, #100]	; (8009b0c <tcp_kill_state+0x84>)
 8009aa6:	481a      	ldr	r0, [pc, #104]	; (8009b10 <tcp_kill_state+0x88>)
 8009aa8:	f00a f87c 	bl	8013ba4 <iprintf>

  inactivity = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ab4:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <tcp_kill_state+0x8c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	617b      	str	r3, [r7, #20]
 8009aba:	e017      	b.n	8009aec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	7d1b      	ldrb	r3, [r3, #20]
 8009ac0:	79fa      	ldrb	r2, [r7, #7]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d10f      	bne.n	8009ae6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ac6:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <tcp_kill_state+0x90>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d807      	bhi.n	8009ae6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009ad6:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <tcp_kill_state+0x90>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e4      	bne.n	8009abc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009af8:	2100      	movs	r1, #0
 8009afa:	6938      	ldr	r0, [r7, #16]
 8009afc:	f7ff fa24 	bl	8008f48 <tcp_abandon>
  }
}
 8009b00:	bf00      	nop
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	0801517c 	.word	0x0801517c
 8009b0c:	0801548c 	.word	0x0801548c
 8009b10:	080151b8 	.word	0x080151b8
 8009b14:	200038e8 	.word	0x200038e8
 8009b18:	200038ec 	.word	0x200038ec

08009b1c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b2a:	4b12      	ldr	r3, [pc, #72]	; (8009b74 <tcp_kill_timewait+0x58>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	e012      	b.n	8009b58 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b32:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <tcp_kill_timewait+0x5c>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d807      	bhi.n	8009b52 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009b42:	4b0d      	ldr	r3, [pc, #52]	; (8009b78 <tcp_kill_timewait+0x5c>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e9      	bne.n	8009b32 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f7ff faa1 	bl	80090ac <tcp_abort>
  }
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200038f8 	.word	0x200038f8
 8009b78:	200038ec 	.word	0x200038ec

08009b7c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b86:	2001      	movs	r0, #1
 8009b88:	f7fe f834 	bl	8007bf4 <memp_malloc>
 8009b8c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d124      	bne.n	8009bde <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009b94:	f7ff ffc2 	bl	8009b1c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b98:	2001      	movs	r0, #1
 8009b9a:	f7fe f82b 	bl	8007bf4 <memp_malloc>
 8009b9e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d11b      	bne.n	8009bde <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009ba6:	2009      	movs	r0, #9
 8009ba8:	f7ff ff6e 	bl	8009a88 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009bac:	2001      	movs	r0, #1
 8009bae:	f7fe f821 	bl	8007bf4 <memp_malloc>
 8009bb2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d111      	bne.n	8009bde <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009bba:	2008      	movs	r0, #8
 8009bbc:	f7ff ff64 	bl	8009a88 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	f7fe f817 	bl	8007bf4 <memp_malloc>
 8009bc6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d107      	bne.n	8009bde <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff ff17 	bl	8009a04 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	f7fe f80c 	bl	8007bf4 <memp_malloc>
 8009bdc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d03f      	beq.n	8009c64 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009be4:	2298      	movs	r2, #152	; 0x98
 8009be6:	2100      	movs	r1, #0
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f009 ff2b 	bl	8013a44 <memset>
    pcb->prio = prio;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	79fa      	ldrb	r2, [r7, #7]
 8009bf2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009bfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009c04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	22ff      	movs	r2, #255	; 0xff
 8009c12:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009c1a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2206      	movs	r2, #6
 8009c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2206      	movs	r2, #6
 8009c28:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c30:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <tcp_alloc+0xf4>)
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009c42:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <tcp_alloc+0xf8>)
 8009c44:	781a      	ldrb	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009c50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4a08      	ldr	r2, [pc, #32]	; (8009c78 <tcp_alloc+0xfc>)
 8009c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4a07      	ldr	r2, [pc, #28]	; (8009c7c <tcp_alloc+0x100>)
 8009c60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009c64:	68fb      	ldr	r3, [r7, #12]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200038ec 	.word	0x200038ec
 8009c74:	2000023e 	.word	0x2000023e
 8009c78:	080099bf 	.word	0x080099bf
 8009c7c:	006ddd00 	.word	0x006ddd00

08009c80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7d1b      	ldrb	r3, [r3, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d034      	beq.n	8009cfa <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009c94:	2b0a      	cmp	r3, #10
 8009c96:	d030      	beq.n	8009cfa <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d02c      	beq.n	8009cfa <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d007      	beq.n	8009cb8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fcfb 	bl	80086a8 <pbuf_free>
      pcb->refused_data = NULL;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fe36 	bl	800992e <tcp_segs_free>
    pcb->ooseq = NULL;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff fe2a 	bl	800992e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff fe25 	bl	800992e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	669a      	str	r2, [r3, #104]	; 0x68
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d105      	bne.n	8009d24 <tcp_pcb_remove+0x20>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	e013      	b.n	8009d4c <tcp_pcb_remove+0x48>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	60fb      	str	r3, [r7, #12]
 8009d2a:	e00c      	b.n	8009d46 <tcp_pcb_remove+0x42>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d104      	bne.n	8009d40 <tcp_pcb_remove+0x3c>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	60da      	str	r2, [r3, #12]
 8009d3e:	e005      	b.n	8009d4c <tcp_pcb_remove+0x48>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1ef      	bne.n	8009d2c <tcp_pcb_remove+0x28>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009d52:	6838      	ldr	r0, [r7, #0]
 8009d54:	f7ff ff94 	bl	8009c80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	7d1b      	ldrb	r3, [r3, #20]
 8009d5c:	2b0a      	cmp	r3, #10
 8009d5e:	d013      	beq.n	8009d88 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d00f      	beq.n	8009d88 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	7e9b      	ldrb	r3, [r3, #26]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d009      	beq.n	8009d88 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	7e9b      	ldrb	r3, [r3, #26]
 8009d78:	f043 0302 	orr.w	r3, r3, #2
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009d82:	6838      	ldr	r0, [r7, #0]
 8009d84:	f002 fd8c 	bl	800c8a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	7d1b      	ldrb	r3, [r3, #20]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d020      	beq.n	8009dd2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d006      	beq.n	8009da6 <tcp_pcb_remove+0xa2>
 8009d98:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <tcp_pcb_remove+0xe4>)
 8009d9a:	f240 7253 	movw	r2, #1875	; 0x753
 8009d9e:	4913      	ldr	r1, [pc, #76]	; (8009dec <tcp_pcb_remove+0xe8>)
 8009da0:	4813      	ldr	r0, [pc, #76]	; (8009df0 <tcp_pcb_remove+0xec>)
 8009da2:	f009 feff 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d006      	beq.n	8009dbc <tcp_pcb_remove+0xb8>
 8009dae:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <tcp_pcb_remove+0xe4>)
 8009db0:	f240 7254 	movw	r2, #1876	; 0x754
 8009db4:	490f      	ldr	r1, [pc, #60]	; (8009df4 <tcp_pcb_remove+0xf0>)
 8009db6:	480e      	ldr	r0, [pc, #56]	; (8009df0 <tcp_pcb_remove+0xec>)
 8009db8:	f009 fef4 	bl	8013ba4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d006      	beq.n	8009dd2 <tcp_pcb_remove+0xce>
 8009dc4:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <tcp_pcb_remove+0xe4>)
 8009dc6:	f240 7256 	movw	r2, #1878	; 0x756
 8009dca:	490b      	ldr	r1, [pc, #44]	; (8009df8 <tcp_pcb_remove+0xf4>)
 8009dcc:	4808      	ldr	r0, [pc, #32]	; (8009df0 <tcp_pcb_remove+0xec>)
 8009dce:	f009 fee9 	bl	8013ba4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	0801517c 	.word	0x0801517c
 8009dec:	08015534 	.word	0x08015534
 8009df0:	080151b8 	.word	0x080151b8
 8009df4:	0801554c 	.word	0x0801554c
 8009df8:	08015568 	.word	0x08015568

08009dfc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009e04:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <tcp_next_iss+0x28>)
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <tcp_next_iss+0x2c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	4a05      	ldr	r2, [pc, #20]	; (8009e24 <tcp_next_iss+0x28>)
 8009e10:	6013      	str	r3, [r2, #0]
  return iss;
 8009e12:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <tcp_next_iss+0x28>)
 8009e14:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000118 	.word	0x20000118
 8009e28:	200038ec 	.word	0x200038ec

08009e2c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	6039      	str	r1, [r7, #0]
 8009e36:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8009e38:	6838      	ldr	r0, [r7, #0]
 8009e3a:	f006 fdf7 	bl	8010a2c <ip4_route>
 8009e3e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8009e46:	88fb      	ldrh	r3, [r7, #6]
 8009e48:	e010      	b.n	8009e6c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e4e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009e50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d008      	beq.n	8009e6a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8009e58:	897b      	ldrh	r3, [r7, #10]
 8009e5a:	3b28      	subs	r3, #40	; 0x28
 8009e5c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009e5e:	893a      	ldrh	r2, [r7, #8]
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	4293      	cmp	r3, r2
 8009e64:	bf28      	it	cs
 8009e66:	4613      	movcs	r3, r2
 8009e68:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8009e6a:	88fb      	ldrh	r3, [r7, #6]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009e82:	e011      	b.n	8009ea8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d108      	bne.n	8009ea2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7ff f908 	bl	80090ac <tcp_abort>
      pcb = next;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	e002      	b.n	8009ea8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1ea      	bne.n	8009e84 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d02c      	beq.n	8009f22 <tcp_netif_ip_addr_changed+0x6a>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d028      	beq.n	8009f22 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009ed0:	4b16      	ldr	r3, [pc, #88]	; (8009f2c <tcp_netif_ip_addr_changed+0x74>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff ffcc 	bl	8009e74 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009edc:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <tcp_netif_ip_addr_changed+0x78>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff ffc6 	bl	8009e74 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d019      	beq.n	8009f22 <tcp_netif_ip_addr_changed+0x6a>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d015      	beq.n	8009f22 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009ef6:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <tcp_netif_ip_addr_changed+0x7c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	e00e      	b.n	8009f1c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d103      	bne.n	8009f18 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1ed      	bne.n	8009efe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	200038e8 	.word	0x200038e8
 8009f30:	200038f4 	.word	0x200038f4
 8009f34:	200038f0 	.word	0x200038f0

08009f38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009f38:	b590      	push	{r4, r7, lr}
 8009f3a:	b08b      	sub	sp, #44	; 0x2c
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	4a82      	ldr	r2, [pc, #520]	; (800a150 <tcp_input+0x218>)
 8009f48:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	895b      	ldrh	r3, [r3, #10]
 8009f4e:	2b13      	cmp	r3, #19
 8009f50:	f240 838a 	bls.w	800a668 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f54:	4b7f      	ldr	r3, [pc, #508]	; (800a154 <tcp_input+0x21c>)
 8009f56:	695a      	ldr	r2, [r3, #20]
 8009f58:	4b7e      	ldr	r3, [pc, #504]	; (800a154 <tcp_input+0x21c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	f006 fffc 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f040 8380 	bne.w	800a66c <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009f6c:	4b79      	ldr	r3, [pc, #484]	; (800a154 <tcp_input+0x21c>)
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f74:	2be0      	cmp	r3, #224	; 0xe0
 8009f76:	f000 8379 	beq.w	800a66c <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8009f7a:	4b75      	ldr	r3, [pc, #468]	; (800a150 <tcp_input+0x218>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	899b      	ldrh	r3, [r3, #12]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fd fa88 	bl	8007498 <lwip_htons>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	0b1b      	lsrs	r3, r3, #12
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009f94:	7cbb      	ldrb	r3, [r7, #18]
 8009f96:	2b13      	cmp	r3, #19
 8009f98:	f240 8368 	bls.w	800a66c <tcp_input+0x734>
 8009f9c:	7cbb      	ldrb	r3, [r7, #18]
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	891b      	ldrh	r3, [r3, #8]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	f200 8361 	bhi.w	800a66c <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009faa:	7cbb      	ldrb	r3, [r7, #18]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	3b14      	subs	r3, #20
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	4b69      	ldr	r3, [pc, #420]	; (800a158 <tcp_input+0x220>)
 8009fb4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009fb6:	4b69      	ldr	r3, [pc, #420]	; (800a15c <tcp_input+0x224>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	895a      	ldrh	r2, [r3, #10]
 8009fc0:	7cbb      	ldrb	r3, [r7, #18]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d30d      	bcc.n	8009fe4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009fc8:	4b63      	ldr	r3, [pc, #396]	; (800a158 <tcp_input+0x220>)
 8009fca:	881a      	ldrh	r2, [r3, #0]
 8009fcc:	4b64      	ldr	r3, [pc, #400]	; (800a160 <tcp_input+0x228>)
 8009fce:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009fd0:	7cbb      	ldrb	r3, [r7, #18]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	425b      	negs	r3, r3
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	b21b      	sxth	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7fe fb3f 	bl	8008660 <pbuf_header>
 8009fe2:	e055      	b.n	800a090 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d105      	bne.n	8009ff8 <tcp_input+0xc0>
 8009fec:	4b5d      	ldr	r3, [pc, #372]	; (800a164 <tcp_input+0x22c>)
 8009fee:	22b2      	movs	r2, #178	; 0xb2
 8009ff0:	495d      	ldr	r1, [pc, #372]	; (800a168 <tcp_input+0x230>)
 8009ff2:	485e      	ldr	r0, [pc, #376]	; (800a16c <tcp_input+0x234>)
 8009ff4:	f009 fdd6 	bl	8013ba4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8009ff8:	f06f 0113 	mvn.w	r1, #19
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7fe fb2f 	bl	8008660 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	895a      	ldrh	r2, [r3, #10]
 800a006:	4b56      	ldr	r3, [pc, #344]	; (800a160 <tcp_input+0x228>)
 800a008:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800a00a:	4b53      	ldr	r3, [pc, #332]	; (800a158 <tcp_input+0x220>)
 800a00c:	881a      	ldrh	r2, [r3, #0]
 800a00e:	4b54      	ldr	r3, [pc, #336]	; (800a160 <tcp_input+0x228>)
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800a016:	4b52      	ldr	r3, [pc, #328]	; (800a160 <tcp_input+0x228>)
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	425b      	negs	r3, r3
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	b21b      	sxth	r3, r3
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7fe fb1c 	bl	8008660 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	895b      	ldrh	r3, [r3, #10]
 800a02e:	8a3a      	ldrh	r2, [r7, #16]
 800a030:	429a      	cmp	r2, r3
 800a032:	f200 831d 	bhi.w	800a670 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4a47      	ldr	r2, [pc, #284]	; (800a15c <tcp_input+0x224>)
 800a03e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	8a3b      	ldrh	r3, [r7, #16]
 800a046:	425b      	negs	r3, r3
 800a048:	b29b      	uxth	r3, r3
 800a04a:	b21b      	sxth	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f7fe fb06 	bl	8008660 <pbuf_header>
    p->tot_len -= opt2len;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	891a      	ldrh	r2, [r3, #8]
 800a058:	8a3b      	ldrh	r3, [r7, #16]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	895b      	ldrh	r3, [r3, #10]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <tcp_input+0x13e>
 800a06a:	4b3e      	ldr	r3, [pc, #248]	; (800a164 <tcp_input+0x22c>)
 800a06c:	22cf      	movs	r2, #207	; 0xcf
 800a06e:	4940      	ldr	r1, [pc, #256]	; (800a170 <tcp_input+0x238>)
 800a070:	483e      	ldr	r0, [pc, #248]	; (800a16c <tcp_input+0x234>)
 800a072:	f009 fd97 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	891a      	ldrh	r2, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	891b      	ldrh	r3, [r3, #8]
 800a080:	429a      	cmp	r2, r3
 800a082:	d005      	beq.n	800a090 <tcp_input+0x158>
 800a084:	4b37      	ldr	r3, [pc, #220]	; (800a164 <tcp_input+0x22c>)
 800a086:	22d0      	movs	r2, #208	; 0xd0
 800a088:	493a      	ldr	r1, [pc, #232]	; (800a174 <tcp_input+0x23c>)
 800a08a:	4838      	ldr	r0, [pc, #224]	; (800a16c <tcp_input+0x234>)
 800a08c:	f009 fd8a 	bl	8013ba4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a090:	4b2f      	ldr	r3, [pc, #188]	; (800a150 <tcp_input+0x218>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	b29a      	uxth	r2, r3
 800a098:	4b2d      	ldr	r3, [pc, #180]	; (800a150 <tcp_input+0x218>)
 800a09a:	681c      	ldr	r4, [r3, #0]
 800a09c:	4610      	mov	r0, r2
 800a09e:	f7fd f9fb 	bl	8007498 <lwip_htons>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a0a6:	4b2a      	ldr	r3, [pc, #168]	; (800a150 <tcp_input+0x218>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	885b      	ldrh	r3, [r3, #2]
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	4b28      	ldr	r3, [pc, #160]	; (800a150 <tcp_input+0x218>)
 800a0b0:	681c      	ldr	r4, [r3, #0]
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7fd f9f0 	bl	8007498 <lwip_htons>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a0bc:	4b24      	ldr	r3, [pc, #144]	; (800a150 <tcp_input+0x218>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	4b23      	ldr	r3, [pc, #140]	; (800a150 <tcp_input+0x218>)
 800a0c4:	681c      	ldr	r4, [r3, #0]
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	f7fd f9f4 	bl	80074b4 <lwip_htonl>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	6063      	str	r3, [r4, #4]
 800a0d0:	6863      	ldr	r3, [r4, #4]
 800a0d2:	4a29      	ldr	r2, [pc, #164]	; (800a178 <tcp_input+0x240>)
 800a0d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a0d6:	4b1e      	ldr	r3, [pc, #120]	; (800a150 <tcp_input+0x218>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	4b1c      	ldr	r3, [pc, #112]	; (800a150 <tcp_input+0x218>)
 800a0de:	681c      	ldr	r4, [r3, #0]
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7fd f9e7 	bl	80074b4 <lwip_htonl>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	60a3      	str	r3, [r4, #8]
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	4a23      	ldr	r2, [pc, #140]	; (800a17c <tcp_input+0x244>)
 800a0ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a0f0:	4b17      	ldr	r3, [pc, #92]	; (800a150 <tcp_input+0x218>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	89db      	ldrh	r3, [r3, #14]
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	4b15      	ldr	r3, [pc, #84]	; (800a150 <tcp_input+0x218>)
 800a0fa:	681c      	ldr	r4, [r3, #0]
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	f7fd f9cb 	bl	8007498 <lwip_htons>
 800a102:	4603      	mov	r3, r0
 800a104:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a106:	4b12      	ldr	r3, [pc, #72]	; (800a150 <tcp_input+0x218>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	899b      	ldrh	r3, [r3, #12]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd f9c2 	bl	8007498 <lwip_htons>
 800a114:	4603      	mov	r3, r0
 800a116:	b2db      	uxtb	r3, r3
 800a118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	4b18      	ldr	r3, [pc, #96]	; (800a180 <tcp_input+0x248>)
 800a120:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	891a      	ldrh	r2, [r3, #8]
 800a126:	4b16      	ldr	r3, [pc, #88]	; (800a180 <tcp_input+0x248>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	f003 0303 	and.w	r3, r3, #3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bf14      	ite	ne
 800a132:	2301      	movne	r3, #1
 800a134:	2300      	moveq	r3, #0
 800a136:	b2db      	uxtb	r3, r3
 800a138:	b29b      	uxth	r3, r3
 800a13a:	4413      	add	r3, r2
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	4b11      	ldr	r3, [pc, #68]	; (800a184 <tcp_input+0x24c>)
 800a140:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a146:	4b10      	ldr	r3, [pc, #64]	; (800a188 <tcp_input+0x250>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	61fb      	str	r3, [r7, #28]
 800a14c:	e082      	b.n	800a254 <tcp_input+0x31c>
 800a14e:	bf00      	nop
 800a150:	20000250 	.word	0x20000250
 800a154:	20000398 	.word	0x20000398
 800a158:	20000254 	.word	0x20000254
 800a15c:	20000258 	.word	0x20000258
 800a160:	20000256 	.word	0x20000256
 800a164:	08015580 	.word	0x08015580
 800a168:	080155b4 	.word	0x080155b4
 800a16c:	080155c4 	.word	0x080155c4
 800a170:	080155ec 	.word	0x080155ec
 800a174:	080155f8 	.word	0x080155f8
 800a178:	20000260 	.word	0x20000260
 800a17c:	20000264 	.word	0x20000264
 800a180:	2000026c 	.word	0x2000026c
 800a184:	2000026a 	.word	0x2000026a
 800a188:	200038e8 	.word	0x200038e8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	7d1b      	ldrb	r3, [r3, #20]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <tcp_input+0x268>
 800a194:	4b8f      	ldr	r3, [pc, #572]	; (800a3d4 <tcp_input+0x49c>)
 800a196:	22e2      	movs	r2, #226	; 0xe2
 800a198:	498f      	ldr	r1, [pc, #572]	; (800a3d8 <tcp_input+0x4a0>)
 800a19a:	4890      	ldr	r0, [pc, #576]	; (800a3dc <tcp_input+0x4a4>)
 800a19c:	f009 fd02 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	7d1b      	ldrb	r3, [r3, #20]
 800a1a4:	2b0a      	cmp	r3, #10
 800a1a6:	d105      	bne.n	800a1b4 <tcp_input+0x27c>
 800a1a8:	4b8a      	ldr	r3, [pc, #552]	; (800a3d4 <tcp_input+0x49c>)
 800a1aa:	22e3      	movs	r2, #227	; 0xe3
 800a1ac:	498c      	ldr	r1, [pc, #560]	; (800a3e0 <tcp_input+0x4a8>)
 800a1ae:	488b      	ldr	r0, [pc, #556]	; (800a3dc <tcp_input+0x4a4>)
 800a1b0:	f009 fcf8 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	7d1b      	ldrb	r3, [r3, #20]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d105      	bne.n	800a1c8 <tcp_input+0x290>
 800a1bc:	4b85      	ldr	r3, [pc, #532]	; (800a3d4 <tcp_input+0x49c>)
 800a1be:	22e4      	movs	r2, #228	; 0xe4
 800a1c0:	4988      	ldr	r1, [pc, #544]	; (800a3e4 <tcp_input+0x4ac>)
 800a1c2:	4886      	ldr	r0, [pc, #536]	; (800a3dc <tcp_input+0x4a4>)
 800a1c4:	f009 fcee 	bl	8013ba4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	8b1a      	ldrh	r2, [r3, #24]
 800a1cc:	4b86      	ldr	r3, [pc, #536]	; (800a3e8 <tcp_input+0x4b0>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d138      	bne.n	800a24a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	8ada      	ldrh	r2, [r3, #22]
 800a1dc:	4b82      	ldr	r3, [pc, #520]	; (800a3e8 <tcp_input+0x4b0>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	885b      	ldrh	r3, [r3, #2]
 800a1e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d130      	bne.n	800a24a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4b7f      	ldr	r3, [pc, #508]	; (800a3ec <tcp_input+0x4b4>)
 800a1ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d12a      	bne.n	800a24a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	4b7c      	ldr	r3, [pc, #496]	; (800a3ec <tcp_input+0x4b4>)
 800a1fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d124      	bne.n	800a24a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	429a      	cmp	r2, r3
 800a208:	d105      	bne.n	800a216 <tcp_input+0x2de>
 800a20a:	4b72      	ldr	r3, [pc, #456]	; (800a3d4 <tcp_input+0x49c>)
 800a20c:	22ec      	movs	r2, #236	; 0xec
 800a20e:	4978      	ldr	r1, [pc, #480]	; (800a3f0 <tcp_input+0x4b8>)
 800a210:	4872      	ldr	r0, [pc, #456]	; (800a3dc <tcp_input+0x4a4>)
 800a212:	f009 fcc7 	bl	8013ba4 <iprintf>
      if (prev != NULL) {
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00a      	beq.n	800a232 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	68da      	ldr	r2, [r3, #12]
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a224:	4b73      	ldr	r3, [pc, #460]	; (800a3f4 <tcp_input+0x4bc>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a22c:	4a71      	ldr	r2, [pc, #452]	; (800a3f4 <tcp_input+0x4bc>)
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d10f      	bne.n	800a25c <tcp_input+0x324>
 800a23c:	4b65      	ldr	r3, [pc, #404]	; (800a3d4 <tcp_input+0x49c>)
 800a23e:	22f4      	movs	r2, #244	; 0xf4
 800a240:	496d      	ldr	r1, [pc, #436]	; (800a3f8 <tcp_input+0x4c0>)
 800a242:	4866      	ldr	r0, [pc, #408]	; (800a3dc <tcp_input+0x4a4>)
 800a244:	f009 fcae 	bl	8013ba4 <iprintf>
      break;
 800a248:	e008      	b.n	800a25c <tcp_input+0x324>
    }
    prev = pcb;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	61fb      	str	r3, [r7, #28]
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d198      	bne.n	800a18c <tcp_input+0x254>
 800a25a:	e000      	b.n	800a25e <tcp_input+0x326>
      break;
 800a25c:	bf00      	nop
  }

  if (pcb == NULL) {
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d173      	bne.n	800a34c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a264:	4b65      	ldr	r3, [pc, #404]	; (800a3fc <tcp_input+0x4c4>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	61fb      	str	r3, [r7, #28]
 800a26a:	e02f      	b.n	800a2cc <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	7d1b      	ldrb	r3, [r3, #20]
 800a270:	2b0a      	cmp	r3, #10
 800a272:	d005      	beq.n	800a280 <tcp_input+0x348>
 800a274:	4b57      	ldr	r3, [pc, #348]	; (800a3d4 <tcp_input+0x49c>)
 800a276:	22fe      	movs	r2, #254	; 0xfe
 800a278:	4961      	ldr	r1, [pc, #388]	; (800a400 <tcp_input+0x4c8>)
 800a27a:	4858      	ldr	r0, [pc, #352]	; (800a3dc <tcp_input+0x4a4>)
 800a27c:	f009 fc92 	bl	8013ba4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	8b1a      	ldrh	r2, [r3, #24]
 800a284:	4b58      	ldr	r3, [pc, #352]	; (800a3e8 <tcp_input+0x4b0>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d11a      	bne.n	800a2c6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	8ada      	ldrh	r2, [r3, #22]
 800a294:	4b54      	ldr	r3, [pc, #336]	; (800a3e8 <tcp_input+0x4b0>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	885b      	ldrh	r3, [r3, #2]
 800a29a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d112      	bne.n	800a2c6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	4b51      	ldr	r3, [pc, #324]	; (800a3ec <tcp_input+0x4b4>)
 800a2a6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d10c      	bne.n	800a2c6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	4b4e      	ldr	r3, [pc, #312]	; (800a3ec <tcp_input+0x4b4>)
 800a2b2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d106      	bne.n	800a2c6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800a2b8:	69f8      	ldr	r0, [r7, #28]
 800a2ba:	f000 fb15 	bl	800a8e8 <tcp_timewait_input>
        pbuf_free(p);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7fe f9f2 	bl	80086a8 <pbuf_free>
        return;
 800a2c4:	e1da      	b.n	800a67c <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	61fb      	str	r3, [r7, #28]
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1cc      	bne.n	800a26c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2d6:	4b4b      	ldr	r3, [pc, #300]	; (800a404 <tcp_input+0x4cc>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	e019      	b.n	800a312 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	8ada      	ldrh	r2, [r3, #22]
 800a2e2:	4b41      	ldr	r3, [pc, #260]	; (800a3e8 <tcp_input+0x4b0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	885b      	ldrh	r3, [r3, #2]
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d10c      	bne.n	800a308 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b3e      	ldr	r3, [pc, #248]	; (800a3ec <tcp_input+0x4b4>)
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d00f      	beq.n	800a31a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00d      	beq.n	800a31c <tcp_input+0x3e4>
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d009      	beq.n	800a31c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e2      	bne.n	800a2de <tcp_input+0x3a6>
 800a318:	e000      	b.n	800a31c <tcp_input+0x3e4>
            break;
 800a31a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d014      	beq.n	800a34c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00a      	beq.n	800a33e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	68da      	ldr	r2, [r3, #12]
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a330:	4b34      	ldr	r3, [pc, #208]	; (800a404 <tcp_input+0x4cc>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a338:	4a32      	ldr	r2, [pc, #200]	; (800a404 <tcp_input+0x4cc>)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800a33e:	6978      	ldr	r0, [r7, #20]
 800a340:	f000 f9f0 	bl	800a724 <tcp_listen_input>
      pbuf_free(p);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7fe f9af 	bl	80086a8 <pbuf_free>
      return;
 800a34a:	e197      	b.n	800a67c <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 8164 	beq.w	800a61c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a354:	4b2c      	ldr	r3, [pc, #176]	; (800a408 <tcp_input+0x4d0>)
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	891a      	ldrh	r2, [r3, #8]
 800a35e:	4b2a      	ldr	r3, [pc, #168]	; (800a408 <tcp_input+0x4d0>)
 800a360:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a362:	4a29      	ldr	r2, [pc, #164]	; (800a408 <tcp_input+0x4d0>)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a368:	4b1f      	ldr	r3, [pc, #124]	; (800a3e8 <tcp_input+0x4b0>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a26      	ldr	r2, [pc, #152]	; (800a408 <tcp_input+0x4d0>)
 800a36e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a370:	4b26      	ldr	r3, [pc, #152]	; (800a40c <tcp_input+0x4d4>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a376:	4b26      	ldr	r3, [pc, #152]	; (800a410 <tcp_input+0x4d8>)
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a37c:	4b25      	ldr	r3, [pc, #148]	; (800a414 <tcp_input+0x4dc>)
 800a37e:	2200      	movs	r2, #0
 800a380:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a382:	4b25      	ldr	r3, [pc, #148]	; (800a418 <tcp_input+0x4e0>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	f003 0308 	and.w	r3, r3, #8
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d006      	beq.n	800a39c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	7b5b      	ldrb	r3, [r3, #13]
 800a392:	f043 0301 	orr.w	r3, r3, #1
 800a396:	b2da      	uxtb	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d03d      	beq.n	800a420 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3a4:	69f8      	ldr	r0, [r7, #28]
 800a3a6:	f7ff fa59 	bl	800985c <tcp_process_refused_data>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f113 0f0d 	cmn.w	r3, #13
 800a3b0:	d007      	beq.n	800a3c2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d032      	beq.n	800a420 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3ba:	4b18      	ldr	r3, [pc, #96]	; (800a41c <tcp_input+0x4e4>)
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d02e      	beq.n	800a420 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f040 8108 	bne.w	800a5dc <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a3cc:	69f8      	ldr	r0, [r7, #28]
 800a3ce:	f002 fa0b 	bl	800c7e8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a3d2:	e103      	b.n	800a5dc <tcp_input+0x6a4>
 800a3d4:	08015580 	.word	0x08015580
 800a3d8:	08015618 	.word	0x08015618
 800a3dc:	080155c4 	.word	0x080155c4
 800a3e0:	08015640 	.word	0x08015640
 800a3e4:	0801566c 	.word	0x0801566c
 800a3e8:	20000250 	.word	0x20000250
 800a3ec:	20000398 	.word	0x20000398
 800a3f0:	08015694 	.word	0x08015694
 800a3f4:	200038e8 	.word	0x200038e8
 800a3f8:	080156c0 	.word	0x080156c0
 800a3fc:	200038f8 	.word	0x200038f8
 800a400:	080156ec 	.word	0x080156ec
 800a404:	200038f0 	.word	0x200038f0
 800a408:	20000240 	.word	0x20000240
 800a40c:	20000270 	.word	0x20000270
 800a410:	2000026d 	.word	0x2000026d
 800a414:	20000268 	.word	0x20000268
 800a418:	2000026c 	.word	0x2000026c
 800a41c:	2000026a 	.word	0x2000026a
      }
    }
    tcp_input_pcb = pcb;
 800a420:	4a98      	ldr	r2, [pc, #608]	; (800a684 <tcp_input+0x74c>)
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a426:	69f8      	ldr	r0, [r7, #28]
 800a428:	f000 fac6 	bl	800a9b8 <tcp_process>
 800a42c:	4603      	mov	r3, r0
 800a42e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a434:	f113 0f0d 	cmn.w	r3, #13
 800a438:	f000 80d2 	beq.w	800a5e0 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800a43c:	4b92      	ldr	r3, [pc, #584]	; (800a688 <tcp_input+0x750>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 0308 	and.w	r3, r3, #8
 800a444:	2b00      	cmp	r3, #0
 800a446:	d016      	beq.n	800a476 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d008      	beq.n	800a464 <tcp_input+0x52c>
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a458:	69fa      	ldr	r2, [r7, #28]
 800a45a:	6912      	ldr	r2, [r2, #16]
 800a45c:	f06f 010d 	mvn.w	r1, #13
 800a460:	4610      	mov	r0, r2
 800a462:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a464:	69f9      	ldr	r1, [r7, #28]
 800a466:	4889      	ldr	r0, [pc, #548]	; (800a68c <tcp_input+0x754>)
 800a468:	f7ff fc4c 	bl	8009d04 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	2001      	movs	r0, #1
 800a470:	f7fd fc0c 	bl	8007c8c <memp_free>
 800a474:	e0bf      	b.n	800a5f6 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a47a:	4b85      	ldr	r3, [pc, #532]	; (800a690 <tcp_input+0x758>)
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01b      	beq.n	800a4ba <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a482:	4b83      	ldr	r3, [pc, #524]	; (800a690 <tcp_input+0x758>)
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d009      	beq.n	800a4a4 <tcp_input+0x56c>
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	6910      	ldr	r0, [r2, #16]
 800a498:	89fa      	ldrh	r2, [r7, #14]
 800a49a:	69f9      	ldr	r1, [r7, #28]
 800a49c:	4798      	blx	r3
 800a49e:	4603      	mov	r3, r0
 800a4a0:	74fb      	strb	r3, [r7, #19]
 800a4a2:	e001      	b.n	800a4a8 <tcp_input+0x570>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a4a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4ac:	f113 0f0d 	cmn.w	r3, #13
 800a4b0:	f000 8098 	beq.w	800a5e4 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a4b4:	4b76      	ldr	r3, [pc, #472]	; (800a690 <tcp_input+0x758>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a4ba:	69f8      	ldr	r0, [r7, #28]
 800a4bc:	f000 f900 	bl	800a6c0 <tcp_input_delayed_close>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f040 8090 	bne.w	800a5e8 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a4c8:	4b72      	ldr	r3, [pc, #456]	; (800a694 <tcp_input+0x75c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d041      	beq.n	800a554 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d006      	beq.n	800a4e6 <tcp_input+0x5ae>
 800a4d8:	4b6f      	ldr	r3, [pc, #444]	; (800a698 <tcp_input+0x760>)
 800a4da:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800a4de:	496f      	ldr	r1, [pc, #444]	; (800a69c <tcp_input+0x764>)
 800a4e0:	486f      	ldr	r0, [pc, #444]	; (800a6a0 <tcp_input+0x768>)
 800a4e2:	f009 fb5f 	bl	8013ba4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	7e9b      	ldrb	r3, [r3, #26]
 800a4ea:	f003 0310 	and.w	r3, r3, #16
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d008      	beq.n	800a504 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a4f2:	4b68      	ldr	r3, [pc, #416]	; (800a694 <tcp_input+0x75c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe f8d6 	bl	80086a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a4fc:	69f8      	ldr	r0, [r7, #28]
 800a4fe:	f7fe fdd5 	bl	80090ac <tcp_abort>
            goto aborted;
 800a502:	e078      	b.n	800a5f6 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00c      	beq.n	800a528 <tcp_input+0x5f0>
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	6918      	ldr	r0, [r3, #16]
 800a518:	4b5e      	ldr	r3, [pc, #376]	; (800a694 <tcp_input+0x75c>)
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	2300      	movs	r3, #0
 800a51e:	69f9      	ldr	r1, [r7, #28]
 800a520:	47a0      	blx	r4
 800a522:	4603      	mov	r3, r0
 800a524:	74fb      	strb	r3, [r7, #19]
 800a526:	e008      	b.n	800a53a <tcp_input+0x602>
 800a528:	4b5a      	ldr	r3, [pc, #360]	; (800a694 <tcp_input+0x75c>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	2300      	movs	r3, #0
 800a52e:	69f9      	ldr	r1, [r7, #28]
 800a530:	2000      	movs	r0, #0
 800a532:	f7ff fa44 	bl	80099be <tcp_recv_null>
 800a536:	4603      	mov	r3, r0
 800a538:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a53a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a53e:	f113 0f0d 	cmn.w	r3, #13
 800a542:	d053      	beq.n	800a5ec <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a544:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a54c:	4b51      	ldr	r3, [pc, #324]	; (800a694 <tcp_input+0x75c>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a554:	4b4c      	ldr	r3, [pc, #304]	; (800a688 <tcp_input+0x750>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f003 0320 	and.w	r3, r3, #32
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d030      	beq.n	800a5c2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a564:	2b00      	cmp	r3, #0
 800a566:	d009      	beq.n	800a57c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a56c:	7b5a      	ldrb	r2, [r3, #13]
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a572:	f042 0220 	orr.w	r2, r2, #32
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	735a      	strb	r2, [r3, #13]
 800a57a:	e022      	b.n	800a5c2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a580:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a584:	d005      	beq.n	800a592 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a58a:	3301      	adds	r3, #1
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <tcp_input+0x67c>
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	6918      	ldr	r0, [r3, #16]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	69f9      	ldr	r1, [r7, #28]
 800a5ac:	47a0      	blx	r4
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	74fb      	strb	r3, [r7, #19]
 800a5b2:	e001      	b.n	800a5b8 <tcp_input+0x680>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a5b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5bc:	f113 0f0d 	cmn.w	r3, #13
 800a5c0:	d016      	beq.n	800a5f0 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a5c2:	4b30      	ldr	r3, [pc, #192]	; (800a684 <tcp_input+0x74c>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a5c8:	69f8      	ldr	r0, [r7, #28]
 800a5ca:	f000 f879 	bl	800a6c0 <tcp_input_delayed_close>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10f      	bne.n	800a5f4 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a5d4:	69f8      	ldr	r0, [r7, #28]
 800a5d6:	f002 f963 	bl	800c8a0 <tcp_output>
 800a5da:	e00c      	b.n	800a5f6 <tcp_input+0x6be>
        goto aborted;
 800a5dc:	bf00      	nop
 800a5de:	e00a      	b.n	800a5f6 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a5e0:	bf00      	nop
 800a5e2:	e008      	b.n	800a5f6 <tcp_input+0x6be>
              goto aborted;
 800a5e4:	bf00      	nop
 800a5e6:	e006      	b.n	800a5f6 <tcp_input+0x6be>
          goto aborted;
 800a5e8:	bf00      	nop
 800a5ea:	e004      	b.n	800a5f6 <tcp_input+0x6be>
            goto aborted;
 800a5ec:	bf00      	nop
 800a5ee:	e002      	b.n	800a5f6 <tcp_input+0x6be>
              goto aborted;
 800a5f0:	bf00      	nop
 800a5f2:	e000      	b.n	800a5f6 <tcp_input+0x6be>
          goto aborted;
 800a5f4:	bf00      	nop
    tcp_input_pcb = NULL;
 800a5f6:	4b23      	ldr	r3, [pc, #140]	; (800a684 <tcp_input+0x74c>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a5fc:	4b25      	ldr	r3, [pc, #148]	; (800a694 <tcp_input+0x75c>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800a602:	4b28      	ldr	r3, [pc, #160]	; (800a6a4 <tcp_input+0x76c>)
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d037      	beq.n	800a67a <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800a60a:	4b26      	ldr	r3, [pc, #152]	; (800a6a4 <tcp_input+0x76c>)
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe f84a 	bl	80086a8 <pbuf_free>
      inseg.p = NULL;
 800a614:	4b23      	ldr	r3, [pc, #140]	; (800a6a4 <tcp_input+0x76c>)
 800a616:	2200      	movs	r2, #0
 800a618:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a61a:	e02e      	b.n	800a67a <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a61c:	4b22      	ldr	r3, [pc, #136]	; (800a6a8 <tcp_input+0x770>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	899b      	ldrh	r3, [r3, #12]
 800a622:	b29b      	uxth	r3, r3
 800a624:	4618      	mov	r0, r3
 800a626:	f7fc ff37 	bl	8007498 <lwip_htons>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d115      	bne.n	800a660 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a634:	4b1d      	ldr	r3, [pc, #116]	; (800a6ac <tcp_input+0x774>)
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	4b1d      	ldr	r3, [pc, #116]	; (800a6b0 <tcp_input+0x778>)
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	461a      	mov	r2, r3
 800a63e:	4b1d      	ldr	r3, [pc, #116]	; (800a6b4 <tcp_input+0x77c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a644:	4b18      	ldr	r3, [pc, #96]	; (800a6a8 <tcp_input+0x770>)
 800a646:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a648:	885b      	ldrh	r3, [r3, #2]
 800a64a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a64c:	4a16      	ldr	r2, [pc, #88]	; (800a6a8 <tcp_input+0x770>)
 800a64e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a650:	8812      	ldrh	r2, [r2, #0]
 800a652:	b292      	uxth	r2, r2
 800a654:	9201      	str	r2, [sp, #4]
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	4b17      	ldr	r3, [pc, #92]	; (800a6b8 <tcp_input+0x780>)
 800a65a:	4a18      	ldr	r2, [pc, #96]	; (800a6bc <tcp_input+0x784>)
 800a65c:	f002 fbaa 	bl	800cdb4 <tcp_rst>
    pbuf_free(p);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7fe f821 	bl	80086a8 <pbuf_free>
  return;
 800a666:	e008      	b.n	800a67a <tcp_input+0x742>
    goto dropped;
 800a668:	bf00      	nop
 800a66a:	e002      	b.n	800a672 <tcp_input+0x73a>
dropped:
 800a66c:	bf00      	nop
 800a66e:	e000      	b.n	800a672 <tcp_input+0x73a>
      goto dropped;
 800a670:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7fe f818 	bl	80086a8 <pbuf_free>
 800a678:	e000      	b.n	800a67c <tcp_input+0x744>
  return;
 800a67a:	bf00      	nop
}
 800a67c:	3724      	adds	r7, #36	; 0x24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd90      	pop	{r4, r7, pc}
 800a682:	bf00      	nop
 800a684:	200038fc 	.word	0x200038fc
 800a688:	2000026d 	.word	0x2000026d
 800a68c:	200038e8 	.word	0x200038e8
 800a690:	20000268 	.word	0x20000268
 800a694:	20000270 	.word	0x20000270
 800a698:	08015580 	.word	0x08015580
 800a69c:	0801571c 	.word	0x0801571c
 800a6a0:	080155c4 	.word	0x080155c4
 800a6a4:	20000240 	.word	0x20000240
 800a6a8:	20000250 	.word	0x20000250
 800a6ac:	20000264 	.word	0x20000264
 800a6b0:	2000026a 	.word	0x2000026a
 800a6b4:	20000260 	.word	0x20000260
 800a6b8:	200003a8 	.word	0x200003a8
 800a6bc:	200003ac 	.word	0x200003ac

0800a6c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800a6c8:	4b14      	ldr	r3, [pc, #80]	; (800a71c <tcp_input_delayed_close+0x5c>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 0310 	and.w	r3, r3, #16
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01d      	beq.n	800a710 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7e9b      	ldrb	r3, [r3, #26]
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10d      	bne.n	800a6fc <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d008      	beq.n	800a6fc <tcp_input_delayed_close+0x3c>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	6912      	ldr	r2, [r2, #16]
 800a6f4:	f06f 010e 	mvn.w	r1, #14
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4808      	ldr	r0, [pc, #32]	; (800a720 <tcp_input_delayed_close+0x60>)
 800a700:	f7ff fb00 	bl	8009d04 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	2001      	movs	r0, #1
 800a708:	f7fd fac0 	bl	8007c8c <memp_free>
    return 1;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e000      	b.n	800a712 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	2000026d 	.word	0x2000026d
 800a720:	200038e8 	.word	0x200038e8

0800a724 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af02      	add	r7, sp, #8
 800a72a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a72c:	4b64      	ldr	r3, [pc, #400]	; (800a8c0 <tcp_listen_input+0x19c>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b00      	cmp	r3, #0
 800a736:	f040 80bc 	bne.w	800a8b2 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a73a:	4b61      	ldr	r3, [pc, #388]	; (800a8c0 <tcp_listen_input+0x19c>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	2b00      	cmp	r3, #0
 800a744:	d016      	beq.n	800a774 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a746:	4b5f      	ldr	r3, [pc, #380]	; (800a8c4 <tcp_listen_input+0x1a0>)
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	4b5f      	ldr	r3, [pc, #380]	; (800a8c8 <tcp_listen_input+0x1a4>)
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	4b5e      	ldr	r3, [pc, #376]	; (800a8cc <tcp_listen_input+0x1a8>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a756:	4b5e      	ldr	r3, [pc, #376]	; (800a8d0 <tcp_listen_input+0x1ac>)
 800a758:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a75a:	885b      	ldrh	r3, [r3, #2]
 800a75c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a75e:	4a5c      	ldr	r2, [pc, #368]	; (800a8d0 <tcp_listen_input+0x1ac>)
 800a760:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a762:	8812      	ldrh	r2, [r2, #0]
 800a764:	b292      	uxth	r2, r2
 800a766:	9201      	str	r2, [sp, #4]
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	4b5a      	ldr	r3, [pc, #360]	; (800a8d4 <tcp_listen_input+0x1b0>)
 800a76c:	4a5a      	ldr	r2, [pc, #360]	; (800a8d8 <tcp_listen_input+0x1b4>)
 800a76e:	f002 fb21 	bl	800cdb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a772:	e0a0      	b.n	800a8b6 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800a774:	4b52      	ldr	r3, [pc, #328]	; (800a8c0 <tcp_listen_input+0x19c>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 809a 	beq.w	800a8b6 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	7d5b      	ldrb	r3, [r3, #21]
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff f9f8 	bl	8009b7c <tcp_alloc>
 800a78c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d111      	bne.n	800a7b8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <tcp_listen_input+0x8e>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	6910      	ldr	r0, [r2, #16]
 800a7a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4798      	blx	r3
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]
      return;
 800a7b0:	e082      	b.n	800a8b8 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a7b2:	23f0      	movs	r3, #240	; 0xf0
 800a7b4:	73bb      	strb	r3, [r7, #14]
      return;
 800a7b6:	e07f      	b.n	800a8b8 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a7b8:	4b48      	ldr	r3, [pc, #288]	; (800a8dc <tcp_listen_input+0x1b8>)
 800a7ba:	695a      	ldr	r2, [r3, #20]
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a7c0:	4b46      	ldr	r3, [pc, #280]	; (800a8dc <tcp_listen_input+0x1b8>)
 800a7c2:	691a      	ldr	r2, [r3, #16]
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	8ada      	ldrh	r2, [r3, #22]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a7d0:	4b3f      	ldr	r3, [pc, #252]	; (800a8d0 <tcp_listen_input+0x1ac>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2203      	movs	r2, #3
 800a7e0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a7e2:	4b3a      	ldr	r3, [pc, #232]	; (800a8cc <tcp_listen_input+0x1a8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a7f4:	6978      	ldr	r0, [r7, #20]
 800a7f6:	f7ff fb01 	bl	8009dfc <tcp_next_iss>
 800a7fa:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a814:	4b2d      	ldr	r3, [pc, #180]	; (800a8cc <tcp_listen_input+0x1a8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	1e5a      	subs	r2, r3, #1
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	7a1b      	ldrb	r3, [r3, #8]
 800a830:	f003 030c 	and.w	r3, r3, #12
 800a834:	b2da      	uxtb	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a83a:	4b29      	ldr	r3, [pc, #164]	; (800a8e0 <tcp_listen_input+0x1bc>)
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	60da      	str	r2, [r3, #12]
 800a842:	4a27      	ldr	r2, [pc, #156]	; (800a8e0 <tcp_listen_input+0x1bc>)
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	f002 fd04 	bl	800d254 <tcp_timer_needed>
 800a84c:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <tcp_listen_input+0x1c0>)
 800a84e:	2201      	movs	r2, #1
 800a850:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a852:	6978      	ldr	r0, [r7, #20]
 800a854:	f001 fd14 	bl	800c280 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a858:	4b1d      	ldr	r3, [pc, #116]	; (800a8d0 <tcp_listen_input+0x1ac>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	89db      	ldrh	r3, [r3, #14]
 800a85e:	b29a      	uxth	r2, r3
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	3304      	adds	r3, #4
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7ff fad5 	bl	8009e2c <tcp_eff_send_mss_impl>
 800a882:	4603      	mov	r3, r0
 800a884:	461a      	mov	r2, r3
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a88a:	2112      	movs	r1, #18
 800a88c:	6978      	ldr	r0, [r7, #20]
 800a88e:	f001 feaf 	bl	800c5f0 <tcp_enqueue_flags>
 800a892:	4603      	mov	r3, r0
 800a894:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d004      	beq.n	800a8a8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800a89e:	2100      	movs	r1, #0
 800a8a0:	6978      	ldr	r0, [r7, #20]
 800a8a2:	f7fe fb51 	bl	8008f48 <tcp_abandon>
      return;
 800a8a6:	e007      	b.n	800a8b8 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800a8a8:	6978      	ldr	r0, [r7, #20]
 800a8aa:	f001 fff9 	bl	800c8a0 <tcp_output>
  return;
 800a8ae:	bf00      	nop
 800a8b0:	e001      	b.n	800a8b6 <tcp_listen_input+0x192>
    return;
 800a8b2:	bf00      	nop
 800a8b4:	e000      	b.n	800a8b8 <tcp_listen_input+0x194>
  return;
 800a8b6:	bf00      	nop
}
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	2000026c 	.word	0x2000026c
 800a8c4:	20000264 	.word	0x20000264
 800a8c8:	2000026a 	.word	0x2000026a
 800a8cc:	20000260 	.word	0x20000260
 800a8d0:	20000250 	.word	0x20000250
 800a8d4:	200003a8 	.word	0x200003a8
 800a8d8:	200003ac 	.word	0x200003ac
 800a8dc:	20000398 	.word	0x20000398
 800a8e0:	200038e8 	.word	0x200038e8
 800a8e4:	200038e4 	.word	0x200038e4

0800a8e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a8f0:	4b29      	ldr	r3, [pc, #164]	; (800a998 <tcp_timewait_input+0xb0>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d147      	bne.n	800a98c <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a8fc:	4b26      	ldr	r3, [pc, #152]	; (800a998 <tcp_timewait_input+0xb0>)
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d027      	beq.n	800a958 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a908:	4b24      	ldr	r3, [pc, #144]	; (800a99c <tcp_timewait_input+0xb4>)
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	db2a      	blt.n	800a96c <tcp_timewait_input+0x84>
 800a916:	4b21      	ldr	r3, [pc, #132]	; (800a99c <tcp_timewait_input+0xb4>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a922:	440b      	add	r3, r1
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	dc20      	bgt.n	800a96c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a92a:	4b1d      	ldr	r3, [pc, #116]	; (800a9a0 <tcp_timewait_input+0xb8>)
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	4b1d      	ldr	r3, [pc, #116]	; (800a9a4 <tcp_timewait_input+0xbc>)
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	4b19      	ldr	r3, [pc, #100]	; (800a99c <tcp_timewait_input+0xb4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a93a:	4b1b      	ldr	r3, [pc, #108]	; (800a9a8 <tcp_timewait_input+0xc0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a93e:	885b      	ldrh	r3, [r3, #2]
 800a940:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a942:	4a19      	ldr	r2, [pc, #100]	; (800a9a8 <tcp_timewait_input+0xc0>)
 800a944:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a946:	8812      	ldrh	r2, [r2, #0]
 800a948:	b292      	uxth	r2, r2
 800a94a:	9201      	str	r2, [sp, #4]
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4b17      	ldr	r3, [pc, #92]	; (800a9ac <tcp_timewait_input+0xc4>)
 800a950:	4a17      	ldr	r2, [pc, #92]	; (800a9b0 <tcp_timewait_input+0xc8>)
 800a952:	f002 fa2f 	bl	800cdb4 <tcp_rst>
      return;
 800a956:	e01c      	b.n	800a992 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800a958:	4b0f      	ldr	r3, [pc, #60]	; (800a998 <tcp_timewait_input+0xb0>)
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a964:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <tcp_timewait_input+0xcc>)
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a96c:	4b0d      	ldr	r3, [pc, #52]	; (800a9a4 <tcp_timewait_input+0xbc>)
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00d      	beq.n	800a990 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	7e9b      	ldrb	r3, [r3, #26]
 800a978:	f043 0302 	orr.w	r3, r3, #2
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 ff8c 	bl	800c8a0 <tcp_output>
  }
  return;
 800a988:	bf00      	nop
 800a98a:	e001      	b.n	800a990 <tcp_timewait_input+0xa8>
    return;
 800a98c:	bf00      	nop
 800a98e:	e000      	b.n	800a992 <tcp_timewait_input+0xaa>
  return;
 800a990:	bf00      	nop
}
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	2000026c 	.word	0x2000026c
 800a99c:	20000260 	.word	0x20000260
 800a9a0:	20000264 	.word	0x20000264
 800a9a4:	2000026a 	.word	0x2000026a
 800a9a8:	20000250 	.word	0x20000250
 800a9ac:	200003a8 	.word	0x200003a8
 800a9b0:	200003ac 	.word	0x200003ac
 800a9b4:	200038ec 	.word	0x200038ec

0800a9b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08a      	sub	sp, #40	; 0x28
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a9c8:	4ba4      	ldr	r3, [pc, #656]	; (800ac5c <tcp_process+0x2a4>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 0304 	and.w	r3, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d04e      	beq.n	800aa72 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	7d1b      	ldrb	r3, [r3, #20]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d108      	bne.n	800a9ee <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9e0:	4b9f      	ldr	r3, [pc, #636]	; (800ac60 <tcp_process+0x2a8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d123      	bne.n	800aa30 <tcp_process+0x78>
        acceptable = 1;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	76fb      	strb	r3, [r7, #27]
 800a9ec:	e020      	b.n	800aa30 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9f2:	4b9c      	ldr	r3, [pc, #624]	; (800ac64 <tcp_process+0x2ac>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d102      	bne.n	800aa00 <tcp_process+0x48>
        acceptable = 1;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	76fb      	strb	r3, [r7, #27]
 800a9fe:	e017      	b.n	800aa30 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aa00:	4b98      	ldr	r3, [pc, #608]	; (800ac64 <tcp_process+0x2ac>)
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	db10      	blt.n	800aa30 <tcp_process+0x78>
 800aa0e:	4b95      	ldr	r3, [pc, #596]	; (800ac64 <tcp_process+0x2ac>)
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa1a:	440b      	add	r3, r1
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dc06      	bgt.n	800aa30 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	7e9b      	ldrb	r3, [r3, #26]
 800aa26:	f043 0302 	orr.w	r3, r3, #2
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aa30:	7efb      	ldrb	r3, [r7, #27]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d01b      	beq.n	800aa6e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	7d1b      	ldrb	r3, [r3, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d106      	bne.n	800aa4c <tcp_process+0x94>
 800aa3e:	4b8a      	ldr	r3, [pc, #552]	; (800ac68 <tcp_process+0x2b0>)
 800aa40:	f240 22e7 	movw	r2, #743	; 0x2e7
 800aa44:	4989      	ldr	r1, [pc, #548]	; (800ac6c <tcp_process+0x2b4>)
 800aa46:	488a      	ldr	r0, [pc, #552]	; (800ac70 <tcp_process+0x2b8>)
 800aa48:	f009 f8ac 	bl	8013ba4 <iprintf>
      recv_flags |= TF_RESET;
 800aa4c:	4b89      	ldr	r3, [pc, #548]	; (800ac74 <tcp_process+0x2bc>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f043 0308 	orr.w	r3, r3, #8
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	4b87      	ldr	r3, [pc, #540]	; (800ac74 <tcp_process+0x2bc>)
 800aa58:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7e9b      	ldrb	r3, [r3, #26]
 800aa5e:	f023 0301 	bic.w	r3, r3, #1
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800aa68:	f06f 030d 	mvn.w	r3, #13
 800aa6c:	e34d      	b.n	800b10a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e34b      	b.n	800b10a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aa72:	4b7a      	ldr	r3, [pc, #488]	; (800ac5c <tcp_process+0x2a4>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <tcp_process+0xe8>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	7d1b      	ldrb	r3, [r3, #20]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d00c      	beq.n	800aaa0 <tcp_process+0xe8>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	7d1b      	ldrb	r3, [r3, #20]
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d008      	beq.n	800aaa0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7e9b      	ldrb	r3, [r3, #26]
 800aa92:	f043 0302 	orr.w	r3, r3, #2
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e334      	b.n	800b10a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7e9b      	ldrb	r3, [r3, #26]
 800aaa4:	f003 0310 	and.w	r3, r3, #16
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d103      	bne.n	800aab4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800aaac:	4b72      	ldr	r3, [pc, #456]	; (800ac78 <tcp_process+0x2c0>)
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 fbdf 	bl	800c280 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7d1b      	ldrb	r3, [r3, #20]
 800aac6:	3b02      	subs	r3, #2
 800aac8:	2b07      	cmp	r3, #7
 800aaca:	f200 830e 	bhi.w	800b0ea <tcp_process+0x732>
 800aace:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <tcp_process+0x11c>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800aaf5 	.word	0x0800aaf5
 800aad8:	0800aced 	.word	0x0800aced
 800aadc:	0800ae45 	.word	0x0800ae45
 800aae0:	0800ae6f 	.word	0x0800ae6f
 800aae4:	0800af99 	.word	0x0800af99
 800aae8:	0800ae45 	.word	0x0800ae45
 800aaec:	0800b025 	.word	0x0800b025
 800aaf0:	0800b0b5 	.word	0x0800b0b5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aaf4:	4b59      	ldr	r3, [pc, #356]	; (800ac5c <tcp_process+0x2a4>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	f003 0310 	and.w	r3, r3, #16
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80cb 	beq.w	800ac98 <tcp_process+0x2e0>
 800ab02:	4b56      	ldr	r3, [pc, #344]	; (800ac5c <tcp_process+0x2a4>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 80c4 	beq.w	800ac98 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	4b52      	ldr	r3, [pc, #328]	; (800ac60 <tcp_process+0x2a8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	f040 80bc 	bne.w	800ac98 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800ab20:	4b50      	ldr	r3, [pc, #320]	; (800ac64 <tcp_process+0x2ac>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800ab32:	4b4b      	ldr	r3, [pc, #300]	; (800ac60 <tcp_process+0x2a8>)
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ab3a:	4b50      	ldr	r3, [pc, #320]	; (800ac7c <tcp_process+0x2c4>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	89db      	ldrh	r3, [r3, #14]
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ab54:	4b43      	ldr	r3, [pc, #268]	; (800ac64 <tcp_process+0x2ac>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	1e5a      	subs	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2204      	movs	r2, #4
 800ab62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f7ff f95c 	bl	8009e2c <tcp_eff_send_mss_impl>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	f241 121c 	movw	r2, #4380	; 0x111c
 800ab86:	429a      	cmp	r2, r3
 800ab88:	bf38      	it	cc
 800ab8a:	461a      	movcc	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4293      	cmp	r3, r2
 800ab94:	bf28      	it	cs
 800ab96:	4613      	movcs	r3, r2
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <tcp_process+0x200>
 800abaa:	4b2f      	ldr	r3, [pc, #188]	; (800ac68 <tcp_process+0x2b0>)
 800abac:	f240 321a 	movw	r2, #794	; 0x31a
 800abb0:	4933      	ldr	r1, [pc, #204]	; (800ac80 <tcp_process+0x2c8>)
 800abb2:	482f      	ldr	r0, [pc, #188]	; (800ac70 <tcp_process+0x2b8>)
 800abb4:	f008 fff6 	bl	8013ba4 <iprintf>
      --pcb->snd_queuelen;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abcc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d111      	bne.n	800abf8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abd8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <tcp_process+0x236>
 800abe0:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <tcp_process+0x2b0>)
 800abe2:	f240 3222 	movw	r2, #802	; 0x322
 800abe6:	4927      	ldr	r1, [pc, #156]	; (800ac84 <tcp_process+0x2cc>)
 800abe8:	4821      	ldr	r0, [pc, #132]	; (800ac70 <tcp_process+0x2b8>)
 800abea:	f008 ffdb 	bl	8013ba4 <iprintf>
        pcb->unsent = rseg->next;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	669a      	str	r2, [r3, #104]	; 0x68
 800abf6:	e003      	b.n	800ac00 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800ac00:	69f8      	ldr	r0, [r7, #28]
 800ac02:	f7fe fea8 	bl	8009956 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d104      	bne.n	800ac18 <tcp_process+0x260>
        pcb->rtime = -1;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac14:	861a      	strh	r2, [r3, #48]	; 0x30
 800ac16:	e006      	b.n	800ac26 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <tcp_process+0x28e>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6910      	ldr	r0, [r2, #16]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	4798      	blx	r3
 800ac40:	4603      	mov	r3, r0
 800ac42:	76bb      	strb	r3, [r7, #26]
 800ac44:	e001      	b.n	800ac4a <tcp_process+0x292>
 800ac46:	2300      	movs	r3, #0
 800ac48:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800ac4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ac4e:	f113 0f0d 	cmn.w	r3, #13
 800ac52:	d119      	bne.n	800ac88 <tcp_process+0x2d0>
        return ERR_ABRT;
 800ac54:	f06f 030c 	mvn.w	r3, #12
 800ac58:	e257      	b.n	800b10a <tcp_process+0x752>
 800ac5a:	bf00      	nop
 800ac5c:	2000026c 	.word	0x2000026c
 800ac60:	20000264 	.word	0x20000264
 800ac64:	20000260 	.word	0x20000260
 800ac68:	08015580 	.word	0x08015580
 800ac6c:	08015738 	.word	0x08015738
 800ac70:	080155c4 	.word	0x080155c4
 800ac74:	2000026d 	.word	0x2000026d
 800ac78:	200038ec 	.word	0x200038ec
 800ac7c:	20000250 	.word	0x20000250
 800ac80:	08015758 	.word	0x08015758
 800ac84:	08015770 	.word	0x08015770
      }
      tcp_ack_now(pcb);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7e9b      	ldrb	r3, [r3, #26]
 800ac8c:	f043 0302 	orr.w	r3, r3, #2
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800ac96:	e22a      	b.n	800b0ee <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800ac98:	4b9f      	ldr	r3, [pc, #636]	; (800af18 <tcp_process+0x560>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f003 0310 	and.w	r3, r3, #16
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8224 	beq.w	800b0ee <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800aca6:	4b9d      	ldr	r3, [pc, #628]	; (800af1c <tcp_process+0x564>)
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	4b9d      	ldr	r3, [pc, #628]	; (800af20 <tcp_process+0x568>)
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	4b9c      	ldr	r3, [pc, #624]	; (800af24 <tcp_process+0x56c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acb6:	4b9c      	ldr	r3, [pc, #624]	; (800af28 <tcp_process+0x570>)
 800acb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800acba:	885b      	ldrh	r3, [r3, #2]
 800acbc:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acbe:	4a9a      	ldr	r2, [pc, #616]	; (800af28 <tcp_process+0x570>)
 800acc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800acc2:	8812      	ldrh	r2, [r2, #0]
 800acc4:	b292      	uxth	r2, r2
 800acc6:	9201      	str	r2, [sp, #4]
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	4b98      	ldr	r3, [pc, #608]	; (800af2c <tcp_process+0x574>)
 800accc:	4a98      	ldr	r2, [pc, #608]	; (800af30 <tcp_process+0x578>)
 800acce:	f002 f871 	bl	800cdb4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800acd8:	2b05      	cmp	r3, #5
 800acda:	f200 8208 	bhi.w	800b0ee <tcp_process+0x736>
        pcb->rtime = 0;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f002 f8db 	bl	800cea0 <tcp_rexmit_rto>
    break;
 800acea:	e200      	b.n	800b0ee <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800acec:	4b8a      	ldr	r3, [pc, #552]	; (800af18 <tcp_process+0x560>)
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	f003 0310 	and.w	r3, r3, #16
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8091 	beq.w	800ae1c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800acfa:	4b88      	ldr	r3, [pc, #544]	; (800af1c <tcp_process+0x564>)
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	3b01      	subs	r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	db71      	blt.n	800adee <tcp_process+0x436>
 800ad0a:	4b84      	ldr	r3, [pc, #528]	; (800af1c <tcp_process+0x564>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	dc6a      	bgt.n	800adee <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2204      	movs	r2, #4
 800ad1c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00b      	beq.n	800ad3e <tcp_process+0x386>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d106      	bne.n	800ad3e <tcp_process+0x386>
 800ad30:	4b80      	ldr	r3, [pc, #512]	; (800af34 <tcp_process+0x57c>)
 800ad32:	f240 3251 	movw	r2, #849	; 0x351
 800ad36:	4980      	ldr	r1, [pc, #512]	; (800af38 <tcp_process+0x580>)
 800ad38:	4880      	ldr	r0, [pc, #512]	; (800af3c <tcp_process+0x584>)
 800ad3a:	f008 ff33 	bl	8013ba4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800ad46:	23fa      	movs	r3, #250	; 0xfa
 800ad48:	76bb      	strb	r3, [r7, #26]
 800ad4a:	e011      	b.n	800ad70 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <tcp_process+0x3b4>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6910      	ldr	r0, [r2, #16]
 800ad60:	2200      	movs	r2, #0
 800ad62:	6879      	ldr	r1, [r7, #4]
 800ad64:	4798      	blx	r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	76bb      	strb	r3, [r7, #26]
 800ad6a:	e001      	b.n	800ad70 <tcp_process+0x3b8>
 800ad6c:	23f0      	movs	r3, #240	; 0xf0
 800ad6e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800ad70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800ad78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad7c:	f113 0f0d 	cmn.w	r3, #13
 800ad80:	d002      	beq.n	800ad88 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7fe f992 	bl	80090ac <tcp_abort>
          }
          return ERR_ABRT;
 800ad88:	f06f 030c 	mvn.w	r3, #12
 800ad8c:	e1bd      	b.n	800b10a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fa42 	bl	800b218 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800ad94:	4b6a      	ldr	r3, [pc, #424]	; (800af40 <tcp_process+0x588>)
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <tcp_process+0x3f0>
          recv_acked--;
 800ad9c:	4b68      	ldr	r3, [pc, #416]	; (800af40 <tcp_process+0x588>)
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	4b66      	ldr	r3, [pc, #408]	; (800af40 <tcp_process+0x588>)
 800ada6:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	f241 121c 	movw	r2, #4380	; 0x111c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	bf38      	it	cc
 800adb6:	461a      	movcc	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4293      	cmp	r3, r2
 800adc0:	bf28      	it	cs
 800adc2:	4613      	movcs	r3, r2
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800adcc:	4b5d      	ldr	r3, [pc, #372]	; (800af44 <tcp_process+0x58c>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	f003 0320 	and.w	r3, r3, #32
 800add4:	2b00      	cmp	r3, #0
 800add6:	d034      	beq.n	800ae42 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7e9b      	ldrb	r3, [r3, #26]
 800addc:	f043 0302 	orr.w	r3, r3, #2
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2207      	movs	r2, #7
 800adea:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800adec:	e029      	b.n	800ae42 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800adee:	4b4b      	ldr	r3, [pc, #300]	; (800af1c <tcp_process+0x564>)
 800adf0:	6818      	ldr	r0, [r3, #0]
 800adf2:	4b4b      	ldr	r3, [pc, #300]	; (800af20 <tcp_process+0x568>)
 800adf4:	881b      	ldrh	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	4b4a      	ldr	r3, [pc, #296]	; (800af24 <tcp_process+0x56c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adfe:	4b4a      	ldr	r3, [pc, #296]	; (800af28 <tcp_process+0x570>)
 800ae00:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae02:	885b      	ldrh	r3, [r3, #2]
 800ae04:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae06:	4a48      	ldr	r2, [pc, #288]	; (800af28 <tcp_process+0x570>)
 800ae08:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae0a:	8812      	ldrh	r2, [r2, #0]
 800ae0c:	b292      	uxth	r2, r2
 800ae0e:	9201      	str	r2, [sp, #4]
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	4b46      	ldr	r3, [pc, #280]	; (800af2c <tcp_process+0x574>)
 800ae14:	4a46      	ldr	r2, [pc, #280]	; (800af30 <tcp_process+0x578>)
 800ae16:	f001 ffcd 	bl	800cdb4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ae1a:	e16a      	b.n	800b0f2 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ae1c:	4b3e      	ldr	r3, [pc, #248]	; (800af18 <tcp_process+0x560>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 8164 	beq.w	800b0f2 <tcp_process+0x73a>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	1e5a      	subs	r2, r3, #1
 800ae30:	4b3c      	ldr	r3, [pc, #240]	; (800af24 <tcp_process+0x56c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	f040 815c 	bne.w	800b0f2 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f002 f866 	bl	800cf0c <tcp_rexmit>
    break;
 800ae40:	e157      	b.n	800b0f2 <tcp_process+0x73a>
 800ae42:	e156      	b.n	800b0f2 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f9e7 	bl	800b218 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ae4a:	4b3e      	ldr	r3, [pc, #248]	; (800af44 <tcp_process+0x58c>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	f003 0320 	and.w	r3, r3, #32
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 814f 	beq.w	800b0f6 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7e9b      	ldrb	r3, [r3, #26]
 800ae5c:	f043 0302 	orr.w	r3, r3, #2
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2207      	movs	r2, #7
 800ae6a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ae6c:	e143      	b.n	800b0f6 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f9d2 	bl	800b218 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ae74:	4b33      	ldr	r3, [pc, #204]	; (800af44 <tcp_process+0x58c>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	f003 0320 	and.w	r3, r3, #32
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d074      	beq.n	800af6a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae80:	4b25      	ldr	r3, [pc, #148]	; (800af18 <tcp_process+0x560>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d063      	beq.n	800af54 <tcp_process+0x59c>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae90:	4b22      	ldr	r3, [pc, #136]	; (800af1c <tcp_process+0x564>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d15d      	bne.n	800af54 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d159      	bne.n	800af54 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	7e9b      	ldrb	r3, [r3, #26]
 800aea4:	f043 0302 	orr.w	r3, r3, #2
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7fe fee6 	bl	8009c80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aeb4:	4b24      	ldr	r3, [pc, #144]	; (800af48 <tcp_process+0x590>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d105      	bne.n	800aeca <tcp_process+0x512>
 800aebe:	4b22      	ldr	r3, [pc, #136]	; (800af48 <tcp_process+0x590>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	4a20      	ldr	r2, [pc, #128]	; (800af48 <tcp_process+0x590>)
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	e013      	b.n	800aef2 <tcp_process+0x53a>
 800aeca:	4b1f      	ldr	r3, [pc, #124]	; (800af48 <tcp_process+0x590>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e00c      	b.n	800aeec <tcp_process+0x534>
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d104      	bne.n	800aee6 <tcp_process+0x52e>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	60da      	str	r2, [r3, #12]
 800aee4:	e005      	b.n	800aef2 <tcp_process+0x53a>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	617b      	str	r3, [r7, #20]
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1ef      	bne.n	800aed2 <tcp_process+0x51a>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	60da      	str	r2, [r3, #12]
 800aef8:	4b14      	ldr	r3, [pc, #80]	; (800af4c <tcp_process+0x594>)
 800aefa:	2201      	movs	r2, #1
 800aefc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	220a      	movs	r2, #10
 800af02:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800af04:	4b12      	ldr	r3, [pc, #72]	; (800af50 <tcp_process+0x598>)
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	60da      	str	r2, [r3, #12]
 800af0c:	4a10      	ldr	r2, [pc, #64]	; (800af50 <tcp_process+0x598>)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	f002 f99f 	bl	800d254 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800af16:	e0f0      	b.n	800b0fa <tcp_process+0x742>
 800af18:	2000026c 	.word	0x2000026c
 800af1c:	20000264 	.word	0x20000264
 800af20:	2000026a 	.word	0x2000026a
 800af24:	20000260 	.word	0x20000260
 800af28:	20000250 	.word	0x20000250
 800af2c:	200003a8 	.word	0x200003a8
 800af30:	200003ac 	.word	0x200003ac
 800af34:	08015580 	.word	0x08015580
 800af38:	08015784 	.word	0x08015784
 800af3c:	080155c4 	.word	0x080155c4
 800af40:	20000268 	.word	0x20000268
 800af44:	2000026d 	.word	0x2000026d
 800af48:	200038e8 	.word	0x200038e8
 800af4c:	200038e4 	.word	0x200038e4
 800af50:	200038f8 	.word	0x200038f8
        tcp_ack_now(pcb);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7e9b      	ldrb	r3, [r3, #26]
 800af58:	f043 0302 	orr.w	r3, r3, #2
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2208      	movs	r2, #8
 800af66:	751a      	strb	r2, [r3, #20]
    break;
 800af68:	e0c7      	b.n	800b0fa <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af6a:	4b6a      	ldr	r3, [pc, #424]	; (800b114 <tcp_process+0x75c>)
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	f003 0310 	and.w	r3, r3, #16
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 80c1 	beq.w	800b0fa <tcp_process+0x742>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af7c:	4b66      	ldr	r3, [pc, #408]	; (800b118 <tcp_process+0x760>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	f040 80ba 	bne.w	800b0fa <tcp_process+0x742>
               pcb->unsent == NULL) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f040 80b5 	bne.w	800b0fa <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2206      	movs	r2, #6
 800af94:	751a      	strb	r2, [r3, #20]
    break;
 800af96:	e0b0      	b.n	800b0fa <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f93d 	bl	800b218 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800af9e:	4b5f      	ldr	r3, [pc, #380]	; (800b11c <tcp_process+0x764>)
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80a9 	beq.w	800b0fe <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7e9b      	ldrb	r3, [r3, #26]
 800afb0:	f043 0302 	orr.w	r3, r3, #2
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7fe fe60 	bl	8009c80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800afc0:	4b57      	ldr	r3, [pc, #348]	; (800b120 <tcp_process+0x768>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d105      	bne.n	800afd6 <tcp_process+0x61e>
 800afca:	4b55      	ldr	r3, [pc, #340]	; (800b120 <tcp_process+0x768>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	4a53      	ldr	r2, [pc, #332]	; (800b120 <tcp_process+0x768>)
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	e013      	b.n	800affe <tcp_process+0x646>
 800afd6:	4b52      	ldr	r3, [pc, #328]	; (800b120 <tcp_process+0x768>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	613b      	str	r3, [r7, #16]
 800afdc:	e00c      	b.n	800aff8 <tcp_process+0x640>
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d104      	bne.n	800aff2 <tcp_process+0x63a>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68da      	ldr	r2, [r3, #12]
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	60da      	str	r2, [r3, #12]
 800aff0:	e005      	b.n	800affe <tcp_process+0x646>
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1ef      	bne.n	800afde <tcp_process+0x626>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	60da      	str	r2, [r3, #12]
 800b004:	4b47      	ldr	r3, [pc, #284]	; (800b124 <tcp_process+0x76c>)
 800b006:	2201      	movs	r2, #1
 800b008:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	220a      	movs	r2, #10
 800b00e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b010:	4b45      	ldr	r3, [pc, #276]	; (800b128 <tcp_process+0x770>)
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60da      	str	r2, [r3, #12]
 800b018:	4a43      	ldr	r2, [pc, #268]	; (800b128 <tcp_process+0x770>)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	f002 f919 	bl	800d254 <tcp_timer_needed>
    }
    break;
 800b022:	e06c      	b.n	800b0fe <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f8f7 	bl	800b218 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b02a:	4b3a      	ldr	r3, [pc, #232]	; (800b114 <tcp_process+0x75c>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 0310 	and.w	r3, r3, #16
 800b032:	2b00      	cmp	r3, #0
 800b034:	d065      	beq.n	800b102 <tcp_process+0x74a>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b03a:	4b37      	ldr	r3, [pc, #220]	; (800b118 <tcp_process+0x760>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d15f      	bne.n	800b102 <tcp_process+0x74a>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b046:	2b00      	cmp	r3, #0
 800b048:	d15b      	bne.n	800b102 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7fe fe18 	bl	8009c80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b050:	4b33      	ldr	r3, [pc, #204]	; (800b120 <tcp_process+0x768>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d105      	bne.n	800b066 <tcp_process+0x6ae>
 800b05a:	4b31      	ldr	r3, [pc, #196]	; (800b120 <tcp_process+0x768>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	4a2f      	ldr	r2, [pc, #188]	; (800b120 <tcp_process+0x768>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	e013      	b.n	800b08e <tcp_process+0x6d6>
 800b066:	4b2e      	ldr	r3, [pc, #184]	; (800b120 <tcp_process+0x768>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	e00c      	b.n	800b088 <tcp_process+0x6d0>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d104      	bne.n	800b082 <tcp_process+0x6ca>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68da      	ldr	r2, [r3, #12]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	60da      	str	r2, [r3, #12]
 800b080:	e005      	b.n	800b08e <tcp_process+0x6d6>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1ef      	bne.n	800b06e <tcp_process+0x6b6>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	60da      	str	r2, [r3, #12]
 800b094:	4b23      	ldr	r3, [pc, #140]	; (800b124 <tcp_process+0x76c>)
 800b096:	2201      	movs	r2, #1
 800b098:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	220a      	movs	r2, #10
 800b09e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b0a0:	4b21      	ldr	r3, [pc, #132]	; (800b128 <tcp_process+0x770>)
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	60da      	str	r2, [r3, #12]
 800b0a8:	4a1f      	ldr	r2, [pc, #124]	; (800b128 <tcp_process+0x770>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	f002 f8d1 	bl	800d254 <tcp_timer_needed>
    }
    break;
 800b0b2:	e026      	b.n	800b102 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f8af 	bl	800b218 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b0ba:	4b16      	ldr	r3, [pc, #88]	; (800b114 <tcp_process+0x75c>)
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	f003 0310 	and.w	r3, r3, #16
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d01f      	beq.n	800b106 <tcp_process+0x74e>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0ca:	4b13      	ldr	r3, [pc, #76]	; (800b118 <tcp_process+0x760>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d119      	bne.n	800b106 <tcp_process+0x74e>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d115      	bne.n	800b106 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800b0da:	4b10      	ldr	r3, [pc, #64]	; (800b11c <tcp_process+0x764>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	f043 0310 	orr.w	r3, r3, #16
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	4b0d      	ldr	r3, [pc, #52]	; (800b11c <tcp_process+0x764>)
 800b0e6:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b0e8:	e00d      	b.n	800b106 <tcp_process+0x74e>
  default:
    break;
 800b0ea:	bf00      	nop
 800b0ec:	e00c      	b.n	800b108 <tcp_process+0x750>
    break;
 800b0ee:	bf00      	nop
 800b0f0:	e00a      	b.n	800b108 <tcp_process+0x750>
    break;
 800b0f2:	bf00      	nop
 800b0f4:	e008      	b.n	800b108 <tcp_process+0x750>
    break;
 800b0f6:	bf00      	nop
 800b0f8:	e006      	b.n	800b108 <tcp_process+0x750>
    break;
 800b0fa:	bf00      	nop
 800b0fc:	e004      	b.n	800b108 <tcp_process+0x750>
    break;
 800b0fe:	bf00      	nop
 800b100:	e002      	b.n	800b108 <tcp_process+0x750>
    break;
 800b102:	bf00      	nop
 800b104:	e000      	b.n	800b108 <tcp_process+0x750>
    break;
 800b106:	bf00      	nop
  }
  return ERR_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	2000026c 	.word	0x2000026c
 800b118:	20000264 	.word	0x20000264
 800b11c:	2000026d 	.word	0x2000026d
 800b120:	200038e8 	.word	0x200038e8
 800b124:	200038e4 	.word	0x200038e4
 800b128:	200038f8 	.word	0x200038f8

0800b12c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	899b      	ldrh	r3, [r3, #12]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fc f9aa 	bl	8007498 <lwip_htons>
 800b144:	4603      	mov	r3, r0
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d027      	beq.n	800b19e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b14e:	6838      	ldr	r0, [r7, #0]
 800b150:	f7fe fbed 	bl	800992e <tcp_segs_free>
    next = NULL;
 800b154:	2300      	movs	r3, #0
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	e055      	b.n	800b206 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	899b      	ldrh	r3, [r3, #12]
 800b160:	b29b      	uxth	r3, r3
 800b162:	4618      	mov	r0, r3
 800b164:	f7fc f998 	bl	8007498 <lwip_htons>
 800b168:	4603      	mov	r3, r0
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00d      	beq.n	800b18e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	899b      	ldrh	r3, [r3, #12]
 800b178:	b29c      	uxth	r4, r3
 800b17a:	2001      	movs	r0, #1
 800b17c:	f7fc f98c 	bl	8007498 <lwip_htons>
 800b180:	4603      	mov	r3, r0
 800b182:	461a      	mov	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	4322      	orrs	r2, r4
 800b18a:	b292      	uxth	r2, r2
 800b18c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7fe fbdc 	bl	8009956 <tcp_seg_free>
    while (next &&
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00e      	beq.n	800b1c2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	891b      	ldrh	r3, [r3, #8]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b1a      	ldr	r3, [pc, #104]	; (800b214 <tcp_oos_insert_segment+0xe8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	441a      	add	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	8909      	ldrh	r1, [r1, #8]
 800b1ba:	440b      	add	r3, r1
 800b1bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dacb      	bge.n	800b15a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01e      	beq.n	800b206 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	891b      	ldrh	r3, [r3, #8]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	4b11      	ldr	r3, [pc, #68]	; (800b214 <tcp_oos_insert_segment+0xe8>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	441a      	add	r2, r3
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	dd12      	ble.n	800b206 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <tcp_oos_insert_segment+0xe8>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	891b      	ldrh	r3, [r3, #8]
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f7fd f8dd 	bl	80083c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]
}
 800b20c:	bf00      	nop
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	bd90      	pop	{r4, r7, pc}
 800b214:	20000260 	.word	0x20000260

0800b218 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b21a:	b08d      	sub	sp, #52	; 0x34
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	7d1b      	ldrb	r3, [r3, #20]
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d806      	bhi.n	800b23a <tcp_receive+0x22>
 800b22c:	4ba6      	ldr	r3, [pc, #664]	; (800b4c8 <tcp_receive+0x2b0>)
 800b22e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b232:	49a6      	ldr	r1, [pc, #664]	; (800b4cc <tcp_receive+0x2b4>)
 800b234:	48a6      	ldr	r0, [pc, #664]	; (800b4d0 <tcp_receive+0x2b8>)
 800b236:	f008 fcb5 	bl	8013ba4 <iprintf>

  if (flags & TCP_ACK) {
 800b23a:	4ba6      	ldr	r3, [pc, #664]	; (800b4d4 <tcp_receive+0x2bc>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 0310 	and.w	r3, r3, #16
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 82bf 	beq.w	800b7c6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b254:	4413      	add	r3, r2
 800b256:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b25c:	4b9e      	ldr	r3, [pc, #632]	; (800b4d8 <tcp_receive+0x2c0>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	db1b      	blt.n	800b29e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b26a:	4b9b      	ldr	r3, [pc, #620]	; (800b4d8 <tcp_receive+0x2c0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b26e:	429a      	cmp	r2, r3
 800b270:	d106      	bne.n	800b280 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b276:	4b99      	ldr	r3, [pc, #612]	; (800b4dc <tcp_receive+0x2c4>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	db0e      	blt.n	800b29e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b284:	4b95      	ldr	r3, [pc, #596]	; (800b4dc <tcp_receive+0x2c4>)
 800b286:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b288:	429a      	cmp	r2, r3
 800b28a:	d141      	bne.n	800b310 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b28c:	4b94      	ldr	r3, [pc, #592]	; (800b4e0 <tcp_receive+0x2c8>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	89db      	ldrh	r3, [r3, #14]
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d938      	bls.n	800b310 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b29e:	4b90      	ldr	r3, [pc, #576]	; (800b4e0 <tcp_receive+0x2c8>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	89db      	ldrh	r3, [r3, #14]
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d205      	bcs.n	800b2c8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800b2c8:	4b83      	ldr	r3, [pc, #524]	; (800b4d8 <tcp_receive+0x2c0>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800b2d0:	4b82      	ldr	r3, [pc, #520]	; (800b4dc <tcp_receive+0x2c4>)
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10d      	bne.n	800b2fe <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d111      	bne.n	800b310 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b2fc:	e008      	b.n	800b310 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b310:	4b72      	ldr	r3, [pc, #456]	; (800b4dc <tcp_receive+0x2c4>)
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dc53      	bgt.n	800b3c6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800b31e:	4b71      	ldr	r3, [pc, #452]	; (800b4e4 <tcp_receive+0x2cc>)
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d146      	bne.n	800b3b4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800b330:	4413      	add	r3, r2
 800b332:	697a      	ldr	r2, [r7, #20]
 800b334:	429a      	cmp	r2, r3
 800b336:	d13d      	bne.n	800b3b4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b33e:	2b00      	cmp	r3, #0
 800b340:	db38      	blt.n	800b3b4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b346:	4b65      	ldr	r3, [pc, #404]	; (800b4dc <tcp_receive+0x2c4>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d132      	bne.n	800b3b4 <tcp_receive+0x19c>
              found_dupack = 1;
 800b34e:	2301      	movs	r3, #1
 800b350:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b358:	2bff      	cmp	r3, #255	; 0xff
 800b35a:	d007      	beq.n	800b36c <tcp_receive+0x154>
                ++pcb->dupacks;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b362:	3301      	adds	r3, #1
 800b364:	b2da      	uxtb	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b372:	2b03      	cmp	r3, #3
 800b374:	d916      	bls.n	800b3a4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b380:	4413      	add	r3, r2
 800b382:	b29a      	uxth	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d912      	bls.n	800b3b4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b398:	4413      	add	r3, r2
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b3a2:	e007      	b.n	800b3b4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d102      	bne.n	800b3b4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 fdfc 	bl	800cfac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 8169 	bne.w	800b68e <tcp_receive+0x476>
        pcb->dupacks = 0;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3c4:	e163      	b.n	800b68e <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b3c6:	4b45      	ldr	r3, [pc, #276]	; (800b4dc <tcp_receive+0x2c4>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f2c0 8107 	blt.w	800b5e6 <tcp_receive+0x3ce>
 800b3d8:	4b40      	ldr	r3, [pc, #256]	; (800b4dc <tcp_receive+0x2c4>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f300 80ff 	bgt.w	800b5e6 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	7e9b      	ldrb	r3, [r3, #26]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00c      	beq.n	800b40e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7e9b      	ldrb	r3, [r3, #26]
 800b3f8:	f023 0304 	bic.w	r3, r3, #4
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b41c:	10db      	asrs	r3, r3, #3
 800b41e:	b21b      	sxth	r3, r3
 800b420:	b29a      	uxth	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b428:	b29b      	uxth	r3, r3
 800b42a:	4413      	add	r3, r2
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	b21a      	sxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b43e:	4b27      	ldr	r3, [pc, #156]	; (800b4dc <tcp_receive+0x2c4>)
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	7d1b      	ldrb	r3, [r3, #20]
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	f240 8094 	bls.w	800b578 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d216      	bcs.n	800b48e <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b46a:	4413      	add	r3, r2
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b474:	429a      	cmp	r2, r3
 800b476:	d97f      	bls.n	800b578 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b482:	4413      	add	r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b48c:	e074      	b.n	800b578 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b498:	4619      	mov	r1, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b49e:	fb03 f301 	mul.w	r3, r3, r1
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800b4a8:	fb93 f3f1 	sdiv	r3, r3, r1
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	4413      	add	r3, r2
 800b4b0:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4b8:	8a7a      	ldrh	r2, [r7, #18]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d95c      	bls.n	800b578 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	8a7a      	ldrh	r2, [r7, #18]
 800b4c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800b4c6:	e057      	b.n	800b578 <tcp_receive+0x360>
 800b4c8:	08015580 	.word	0x08015580
 800b4cc:	080157a4 	.word	0x080157a4
 800b4d0:	080155c4 	.word	0x080155c4
 800b4d4:	2000026c 	.word	0x2000026c
 800b4d8:	20000260 	.word	0x20000260
 800b4dc:	20000264 	.word	0x20000264
 800b4e0:	20000250 	.word	0x20000250
 800b4e4:	2000026a 	.word	0x2000026a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	4618      	mov	r0, r3
 800b504:	f7fd f964 	bl	80087d0 <pbuf_clen>
 800b508:	4603      	mov	r3, r0
 800b50a:	429c      	cmp	r4, r3
 800b50c:	d206      	bcs.n	800b51c <tcp_receive+0x304>
 800b50e:	4b70      	ldr	r3, [pc, #448]	; (800b6d0 <tcp_receive+0x4b8>)
 800b510:	f240 429e 	movw	r2, #1182	; 0x49e
 800b514:	496f      	ldr	r1, [pc, #444]	; (800b6d4 <tcp_receive+0x4bc>)
 800b516:	4870      	ldr	r0, [pc, #448]	; (800b6d8 <tcp_receive+0x4c0>)
 800b518:	f008 fb44 	bl	8013ba4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	4618      	mov	r0, r3
 800b522:	f7fd f955 	bl	80087d0 <pbuf_clen>
 800b526:	4603      	mov	r3, r0
 800b528:	461a      	mov	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b530:	1a9b      	subs	r3, r3, r2
 800b532:	b29a      	uxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	891a      	ldrh	r2, [r3, #8]
 800b53e:	4b67      	ldr	r3, [pc, #412]	; (800b6dc <tcp_receive+0x4c4>)
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	4413      	add	r3, r2
 800b544:	b29a      	uxth	r2, r3
 800b546:	4b65      	ldr	r3, [pc, #404]	; (800b6dc <tcp_receive+0x4c4>)
 800b548:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800b54a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b54c:	f7fe fa03 	bl	8009956 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00e      	beq.n	800b578 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <tcp_receive+0x360>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <tcp_receive+0x360>
 800b56a:	4b59      	ldr	r3, [pc, #356]	; (800b6d0 <tcp_receive+0x4b8>)
 800b56c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800b570:	495b      	ldr	r1, [pc, #364]	; (800b6e0 <tcp_receive+0x4c8>)
 800b572:	4859      	ldr	r0, [pc, #356]	; (800b6d8 <tcp_receive+0x4c0>)
 800b574:	f008 fb16 	bl	8013ba4 <iprintf>
      while (pcb->unacked != NULL &&
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d022      	beq.n	800b5c6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fb ff93 	bl	80074b4 <lwip_htonl>
 800b58e:	4604      	mov	r4, r0
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b594:	891b      	ldrh	r3, [r3, #8]
 800b596:	461d      	mov	r5, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	899b      	ldrh	r3, [r3, #12]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fb ff78 	bl	8007498 <lwip_htons>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f003 0303 	and.w	r3, r3, #3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <tcp_receive+0x39e>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e000      	b.n	800b5b8 <tcp_receive+0x3a0>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	442b      	add	r3, r5
 800b5ba:	18e2      	adds	r2, r4, r3
 800b5bc:	4b49      	ldr	r3, [pc, #292]	; (800b6e4 <tcp_receive+0x4cc>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	dd90      	ble.n	800b4e8 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d104      	bne.n	800b5d8 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5d4:	861a      	strh	r2, [r3, #48]	; 0x30
 800b5d6:	e002      	b.n	800b5de <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	76da      	strb	r2, [r3, #27]
 800b5e4:	e002      	b.n	800b5ec <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f001 f8fe 	bl	800c7e8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800b5ec:	e04f      	b.n	800b68e <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b602:	2b00      	cmp	r3, #0
 800b604:	d103      	bne.n	800b60e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fd f8d9 	bl	80087d0 <pbuf_clen>
 800b61e:	4603      	mov	r3, r0
 800b620:	429c      	cmp	r4, r3
 800b622:	d206      	bcs.n	800b632 <tcp_receive+0x41a>
 800b624:	4b2a      	ldr	r3, [pc, #168]	; (800b6d0 <tcp_receive+0x4b8>)
 800b626:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b62a:	492a      	ldr	r1, [pc, #168]	; (800b6d4 <tcp_receive+0x4bc>)
 800b62c:	482a      	ldr	r0, [pc, #168]	; (800b6d8 <tcp_receive+0x4c0>)
 800b62e:	f008 fab9 	bl	8013ba4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	4618      	mov	r0, r3
 800b638:	f7fd f8ca 	bl	80087d0 <pbuf_clen>
 800b63c:	4603      	mov	r3, r0
 800b63e:	461a      	mov	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b646:	1a9b      	subs	r3, r3, r2
 800b648:	b29a      	uxth	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	891a      	ldrh	r2, [r3, #8]
 800b654:	4b21      	ldr	r3, [pc, #132]	; (800b6dc <tcp_receive+0x4c4>)
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	4413      	add	r3, r2
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	4b1f      	ldr	r3, [pc, #124]	; (800b6dc <tcp_receive+0x4c4>)
 800b65e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800b660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b662:	f7fe f978 	bl	8009956 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00e      	beq.n	800b68e <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10a      	bne.n	800b68e <tcp_receive+0x476>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d106      	bne.n	800b68e <tcp_receive+0x476>
 800b680:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <tcp_receive+0x4b8>)
 800b682:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800b686:	4916      	ldr	r1, [pc, #88]	; (800b6e0 <tcp_receive+0x4c8>)
 800b688:	4813      	ldr	r0, [pc, #76]	; (800b6d8 <tcp_receive+0x4c0>)
 800b68a:	f008 fa8b 	bl	8013ba4 <iprintf>
    while (pcb->unsent != NULL &&
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b692:	2b00      	cmp	r3, #0
 800b694:	d036      	beq.n	800b704 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b696:	4b13      	ldr	r3, [pc, #76]	; (800b6e4 <tcp_receive+0x4cc>)
 800b698:	681c      	ldr	r4, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fb ff06 	bl	80074b4 <lwip_htonl>
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ae:	891b      	ldrh	r3, [r3, #8]
 800b6b0:	461e      	mov	r6, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	899b      	ldrh	r3, [r3, #12]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fb feeb 	bl	8007498 <lwip_htons>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f003 0303 	and.w	r3, r3, #3
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00d      	beq.n	800b6e8 <tcp_receive+0x4d0>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e00c      	b.n	800b6ea <tcp_receive+0x4d2>
 800b6d0:	08015580 	.word	0x08015580
 800b6d4:	080157c0 	.word	0x080157c0
 800b6d8:	080155c4 	.word	0x080155c4
 800b6dc:	20000268 	.word	0x20000268
 800b6e0:	080157e8 	.word	0x080157e8
 800b6e4:	20000264 	.word	0x20000264
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4433      	add	r3, r6
 800b6ec:	442b      	add	r3, r5
 800b6ee:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	db07      	blt.n	800b704 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b6f4:	4b8d      	ldr	r3, [pc, #564]	; (800b92c <tcp_receive+0x714>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f77f af75 	ble.w	800b5ee <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b70a:	4b89      	ldr	r3, [pc, #548]	; (800b930 <tcp_receive+0x718>)
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	4413      	add	r3, r2
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d052      	beq.n	800b7c6 <tcp_receive+0x5ae>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b724:	4b81      	ldr	r3, [pc, #516]	; (800b92c <tcp_receive+0x714>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	da4b      	bge.n	800b7c6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b72e:	4b81      	ldr	r3, [pc, #516]	; (800b934 <tcp_receive+0x71c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	b29a      	uxth	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b738:	b29b      	uxth	r3, r3
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800b740:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b748:	10db      	asrs	r3, r3, #3
 800b74a:	b21b      	sxth	r3, r3
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	b29b      	uxth	r3, r3
 800b752:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b75e:	4413      	add	r3, r2
 800b760:	b29b      	uxth	r3, r3
 800b762:	b21a      	sxth	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b768:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	da03      	bge.n	800b778 <tcp_receive+0x560>
        m = -m;
 800b770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b772:	425b      	negs	r3, r3
 800b774:	b29b      	uxth	r3, r3
 800b776:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800b778:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b780:	109b      	asrs	r3, r3, #2
 800b782:	b21b      	sxth	r3, r3
 800b784:	b29b      	uxth	r3, r3
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	b29b      	uxth	r3, r3
 800b78a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b792:	b29a      	uxth	r2, r3
 800b794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b796:	4413      	add	r3, r2
 800b798:	b29b      	uxth	r3, r3
 800b79a:	b21a      	sxth	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b7a6:	10db      	asrs	r3, r3, #3
 800b7a8:	b21b      	sxth	r3, r3
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	b21a      	sxth	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b7c6:	4b5c      	ldr	r3, [pc, #368]	; (800b938 <tcp_receive+0x720>)
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 84f1 	beq.w	800c1b2 <tcp_receive+0xf9a>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	7d1b      	ldrb	r3, [r3, #20]
 800b7d4:	2b06      	cmp	r3, #6
 800b7d6:	f200 84ec 	bhi.w	800c1b2 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7de:	4b57      	ldr	r3, [pc, #348]	; (800b93c <tcp_receive+0x724>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f2c0 80b8 	blt.w	800b95c <tcp_receive+0x744>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7f0:	4b51      	ldr	r3, [pc, #324]	; (800b938 <tcp_receive+0x720>)
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	4b51      	ldr	r3, [pc, #324]	; (800b93c <tcp_receive+0x724>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	440b      	add	r3, r1
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	3301      	adds	r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	f300 80ab 	bgt.w	800b95c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b806:	4b4e      	ldr	r3, [pc, #312]	; (800b940 <tcp_receive+0x728>)
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b810:	4b4a      	ldr	r3, [pc, #296]	; (800b93c <tcp_receive+0x724>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b818:	4b49      	ldr	r3, [pc, #292]	; (800b940 <tcp_receive+0x728>)
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <tcp_receive+0x616>
 800b820:	4b48      	ldr	r3, [pc, #288]	; (800b944 <tcp_receive+0x72c>)
 800b822:	f240 523c 	movw	r2, #1340	; 0x53c
 800b826:	4948      	ldr	r1, [pc, #288]	; (800b948 <tcp_receive+0x730>)
 800b828:	4848      	ldr	r0, [pc, #288]	; (800b94c <tcp_receive+0x734>)
 800b82a:	f008 f9bb 	bl	8013ba4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b834:	4293      	cmp	r3, r2
 800b836:	dd06      	ble.n	800b846 <tcp_receive+0x62e>
 800b838:	4b42      	ldr	r3, [pc, #264]	; (800b944 <tcp_receive+0x72c>)
 800b83a:	f240 523d 	movw	r2, #1341	; 0x53d
 800b83e:	4944      	ldr	r1, [pc, #272]	; (800b950 <tcp_receive+0x738>)
 800b840:	4842      	ldr	r0, [pc, #264]	; (800b94c <tcp_receive+0x734>)
 800b842:	f008 f9af 	bl	8013ba4 <iprintf>
      if (inseg.p->len < off) {
 800b846:	4b3e      	ldr	r3, [pc, #248]	; (800b940 <tcp_receive+0x728>)
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	895b      	ldrh	r3, [r3, #10]
 800b84c:	461a      	mov	r2, r3
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	4293      	cmp	r3, r2
 800b852:	dd3e      	ble.n	800b8d2 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b854:	4b3a      	ldr	r3, [pc, #232]	; (800b940 <tcp_receive+0x728>)
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	891b      	ldrh	r3, [r3, #8]
 800b85a:	461a      	mov	r2, r3
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	4293      	cmp	r3, r2
 800b860:	dd06      	ble.n	800b870 <tcp_receive+0x658>
 800b862:	4b38      	ldr	r3, [pc, #224]	; (800b944 <tcp_receive+0x72c>)
 800b864:	f240 523f 	movw	r2, #1343	; 0x53f
 800b868:	493a      	ldr	r1, [pc, #232]	; (800b954 <tcp_receive+0x73c>)
 800b86a:	4838      	ldr	r0, [pc, #224]	; (800b94c <tcp_receive+0x734>)
 800b86c:	f008 f99a 	bl	8013ba4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b870:	4b33      	ldr	r3, [pc, #204]	; (800b940 <tcp_receive+0x728>)
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	891a      	ldrh	r2, [r3, #8]
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	b29b      	uxth	r3, r3
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800b87e:	e00e      	b.n	800b89e <tcp_receive+0x686>
          off -= p->len;
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	895b      	ldrh	r3, [r3, #10]
 800b884:	461a      	mov	r2, r3
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	1a9b      	subs	r3, r3, r2
 800b88a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	8a3a      	ldrh	r2, [r7, #16]
 800b890:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	2200      	movs	r2, #0
 800b896:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	895b      	ldrh	r3, [r3, #10]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	dcea      	bgt.n	800b880 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	425b      	negs	r3, r3
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	b21b      	sxth	r3, r3
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	69b8      	ldr	r0, [r7, #24]
 800b8b8:	f7fc fed2 	bl	8008660 <pbuf_header>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d01c      	beq.n	800b8fc <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b8c2:	4b20      	ldr	r3, [pc, #128]	; (800b944 <tcp_receive+0x72c>)
 800b8c4:	f240 524c 	movw	r2, #1356	; 0x54c
 800b8c8:	4923      	ldr	r1, [pc, #140]	; (800b958 <tcp_receive+0x740>)
 800b8ca:	4820      	ldr	r0, [pc, #128]	; (800b94c <tcp_receive+0x734>)
 800b8cc:	f008 f96a 	bl	8013ba4 <iprintf>
 800b8d0:	e014      	b.n	800b8fc <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <tcp_receive+0x728>)
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d8:	b292      	uxth	r2, r2
 800b8da:	4252      	negs	r2, r2
 800b8dc:	b292      	uxth	r2, r2
 800b8de:	b212      	sxth	r2, r2
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fc febc 	bl	8008660 <pbuf_header>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d006      	beq.n	800b8fc <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b8ee:	4b15      	ldr	r3, [pc, #84]	; (800b944 <tcp_receive+0x72c>)
 800b8f0:	f240 5251 	movw	r2, #1361	; 0x551
 800b8f4:	4918      	ldr	r1, [pc, #96]	; (800b958 <tcp_receive+0x740>)
 800b8f6:	4815      	ldr	r0, [pc, #84]	; (800b94c <tcp_receive+0x734>)
 800b8f8:	f008 f954 	bl	8013ba4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b8fc:	4b10      	ldr	r3, [pc, #64]	; (800b940 <tcp_receive+0x728>)
 800b8fe:	891a      	ldrh	r2, [r3, #8]
 800b900:	4b0e      	ldr	r3, [pc, #56]	; (800b93c <tcp_receive+0x724>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	b299      	uxth	r1, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	1acb      	subs	r3, r1, r3
 800b90e:	b29b      	uxth	r3, r3
 800b910:	4413      	add	r3, r2
 800b912:	b29a      	uxth	r2, r3
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <tcp_receive+0x728>)
 800b916:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	4a07      	ldr	r2, [pc, #28]	; (800b93c <tcp_receive+0x724>)
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <tcp_receive+0x728>)
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	4a05      	ldr	r2, [pc, #20]	; (800b93c <tcp_receive+0x724>)
 800b926:	6812      	ldr	r2, [r2, #0]
 800b928:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b92a:	e025      	b.n	800b978 <tcp_receive+0x760>
 800b92c:	20000264 	.word	0x20000264
 800b930:	20000268 	.word	0x20000268
 800b934:	200038ec 	.word	0x200038ec
 800b938:	2000026a 	.word	0x2000026a
 800b93c:	20000260 	.word	0x20000260
 800b940:	20000240 	.word	0x20000240
 800b944:	08015580 	.word	0x08015580
 800b948:	08015808 	.word	0x08015808
 800b94c:	080155c4 	.word	0x080155c4
 800b950:	08015818 	.word	0x08015818
 800b954:	08015828 	.word	0x08015828
 800b958:	08015838 	.word	0x08015838
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b95c:	4b87      	ldr	r3, [pc, #540]	; (800bb7c <tcp_receive+0x964>)
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	da06      	bge.n	800b978 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	7e9b      	ldrb	r3, [r3, #26]
 800b96e:	f043 0302 	orr.w	r3, r3, #2
 800b972:	b2da      	uxtb	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b978:	4b80      	ldr	r3, [pc, #512]	; (800bb7c <tcp_receive+0x964>)
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	f2c0 8410 	blt.w	800c1a8 <tcp_receive+0xf90>
 800b988:	4b7c      	ldr	r3, [pc, #496]	; (800bb7c <tcp_receive+0x964>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	6879      	ldr	r1, [r7, #4]
 800b992:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b994:	440b      	add	r3, r1
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	3301      	adds	r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f300 8404 	bgt.w	800c1a8 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9a4:	4b75      	ldr	r3, [pc, #468]	; (800bb7c <tcp_receive+0x964>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	f040 8287 	bne.w	800bebc <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b9ae:	4b74      	ldr	r3, [pc, #464]	; (800bb80 <tcp_receive+0x968>)
 800b9b0:	891c      	ldrh	r4, [r3, #8]
 800b9b2:	4b73      	ldr	r3, [pc, #460]	; (800bb80 <tcp_receive+0x968>)
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	899b      	ldrh	r3, [r3, #12]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fb fd6c 	bl	8007498 <lwip_htons>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <tcp_receive+0x7b6>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <tcp_receive+0x7b8>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	4423      	add	r3, r4
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	4b6b      	ldr	r3, [pc, #428]	; (800bb84 <tcp_receive+0x96c>)
 800b9d6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9dc:	4b69      	ldr	r3, [pc, #420]	; (800bb84 <tcp_receive+0x96c>)
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d26e      	bcs.n	800bac2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b9e4:	4b66      	ldr	r3, [pc, #408]	; (800bb80 <tcp_receive+0x968>)
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	899b      	ldrh	r3, [r3, #12]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fb fd53 	bl	8007498 <lwip_htons>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d01b      	beq.n	800ba34 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b9fc:	4b60      	ldr	r3, [pc, #384]	; (800bb80 <tcp_receive+0x968>)
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	899b      	ldrh	r3, [r3, #12]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba08:	b29c      	uxth	r4, r3
 800ba0a:	4b5d      	ldr	r3, [pc, #372]	; (800bb80 <tcp_receive+0x968>)
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	899b      	ldrh	r3, [r3, #12]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fb fd40 	bl	8007498 <lwip_htons>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fb fd39 	bl	8007498 <lwip_htons>
 800ba26:	4603      	mov	r3, r0
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4b55      	ldr	r3, [pc, #340]	; (800bb80 <tcp_receive+0x968>)
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	4322      	orrs	r2, r4
 800ba30:	b292      	uxth	r2, r2
 800ba32:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba38:	4b51      	ldr	r3, [pc, #324]	; (800bb80 <tcp_receive+0x968>)
 800ba3a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ba3c:	4b50      	ldr	r3, [pc, #320]	; (800bb80 <tcp_receive+0x968>)
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	899b      	ldrh	r3, [r3, #12]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fb fd27 	bl	8007498 <lwip_htons>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <tcp_receive+0x848>
            inseg.len -= 1;
 800ba54:	4b4a      	ldr	r3, [pc, #296]	; (800bb80 <tcp_receive+0x968>)
 800ba56:	891b      	ldrh	r3, [r3, #8]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	4b48      	ldr	r3, [pc, #288]	; (800bb80 <tcp_receive+0x968>)
 800ba5e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ba60:	4b47      	ldr	r3, [pc, #284]	; (800bb80 <tcp_receive+0x968>)
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	4b46      	ldr	r3, [pc, #280]	; (800bb80 <tcp_receive+0x968>)
 800ba66:	891b      	ldrh	r3, [r3, #8]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	f7fc fca8 	bl	80083c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ba70:	4b43      	ldr	r3, [pc, #268]	; (800bb80 <tcp_receive+0x968>)
 800ba72:	891c      	ldrh	r4, [r3, #8]
 800ba74:	4b42      	ldr	r3, [pc, #264]	; (800bb80 <tcp_receive+0x968>)
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	899b      	ldrh	r3, [r3, #12]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fb fd0b 	bl	8007498 <lwip_htons>
 800ba82:	4603      	mov	r3, r0
 800ba84:	f003 0303 	and.w	r3, r3, #3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <tcp_receive+0x878>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e000      	b.n	800ba92 <tcp_receive+0x87a>
 800ba90:	2300      	movs	r3, #0
 800ba92:	4423      	add	r3, r4
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	4b3b      	ldr	r3, [pc, #236]	; (800bb84 <tcp_receive+0x96c>)
 800ba98:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ba9a:	4b3a      	ldr	r3, [pc, #232]	; (800bb84 <tcp_receive+0x96c>)
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4b36      	ldr	r3, [pc, #216]	; (800bb7c <tcp_receive+0x964>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	441a      	add	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800baae:	440b      	add	r3, r1
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d006      	beq.n	800bac2 <tcp_receive+0x8aa>
 800bab4:	4b34      	ldr	r3, [pc, #208]	; (800bb88 <tcp_receive+0x970>)
 800bab6:	f240 527f 	movw	r2, #1407	; 0x57f
 800baba:	4934      	ldr	r1, [pc, #208]	; (800bb8c <tcp_receive+0x974>)
 800babc:	4834      	ldr	r0, [pc, #208]	; (800bb90 <tcp_receive+0x978>)
 800babe:	f008 f871 	bl	8013ba4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 80e1 	beq.w	800bc8e <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bacc:	4b2c      	ldr	r3, [pc, #176]	; (800bb80 <tcp_receive+0x968>)
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	899b      	ldrh	r3, [r3, #12]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fb fcdf 	bl	8007498 <lwip_htons>
 800bada:	4603      	mov	r3, r0
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d010      	beq.n	800bb06 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bae4:	e00a      	b.n	800bafc <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baea:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800baf6:	68b8      	ldr	r0, [r7, #8]
 800baf8:	f7fd ff2d 	bl	8009956 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1f0      	bne.n	800bae6 <tcp_receive+0x8ce>
 800bb04:	e0c3      	b.n	800bc8e <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bb0c:	e04f      	b.n	800bbae <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	899b      	ldrh	r3, [r3, #12]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fb fcbe 	bl	8007498 <lwip_htons>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d03b      	beq.n	800bb9e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bb26:	4b16      	ldr	r3, [pc, #88]	; (800bb80 <tcp_receive+0x968>)
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	899b      	ldrh	r3, [r3, #12]
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fb fcb2 	bl	8007498 <lwip_htons>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d12f      	bne.n	800bb9e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bb3e:	4b10      	ldr	r3, [pc, #64]	; (800bb80 <tcp_receive+0x968>)
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	899b      	ldrh	r3, [r3, #12]
 800bb44:	b29c      	uxth	r4, r3
 800bb46:	2001      	movs	r0, #1
 800bb48:	f7fb fca6 	bl	8007498 <lwip_htons>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4b0b      	ldr	r3, [pc, #44]	; (800bb80 <tcp_receive+0x968>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	4322      	orrs	r2, r4
 800bb56:	b292      	uxth	r2, r2
 800bb58:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bb5a:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <tcp_receive+0x968>)
 800bb5c:	891c      	ldrh	r4, [r3, #8]
 800bb5e:	4b08      	ldr	r3, [pc, #32]	; (800bb80 <tcp_receive+0x968>)
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	899b      	ldrh	r3, [r3, #12]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fb fc96 	bl	8007498 <lwip_htons>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f003 0303 	and.w	r3, r3, #3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00e      	beq.n	800bb94 <tcp_receive+0x97c>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e00d      	b.n	800bb96 <tcp_receive+0x97e>
 800bb7a:	bf00      	nop
 800bb7c:	20000260 	.word	0x20000260
 800bb80:	20000240 	.word	0x20000240
 800bb84:	2000026a 	.word	0x2000026a
 800bb88:	08015580 	.word	0x08015580
 800bb8c:	0801584c 	.word	0x0801584c
 800bb90:	080155c4 	.word	0x080155c4
 800bb94:	2300      	movs	r3, #0
 800bb96:	4423      	add	r3, r4
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	4b95      	ldr	r3, [pc, #596]	; (800bdf0 <tcp_receive+0xbd8>)
 800bb9c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba0:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800bba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbaa:	f7fd fed4 	bl	8009956 <tcp_seg_free>
            while (next &&
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00e      	beq.n	800bbd2 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bbb4:	4b8e      	ldr	r3, [pc, #568]	; (800bdf0 <tcp_receive+0xbd8>)
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	4b8e      	ldr	r3, [pc, #568]	; (800bdf4 <tcp_receive+0xbdc>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	441a      	add	r2, r3
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbc8:	8909      	ldrh	r1, [r1, #8]
 800bbca:	440b      	add	r3, r1
 800bbcc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da9d      	bge.n	800bb0e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d057      	beq.n	800bc88 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800bbd8:	4b85      	ldr	r3, [pc, #532]	; (800bdf0 <tcp_receive+0xbd8>)
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	4b85      	ldr	r3, [pc, #532]	; (800bdf4 <tcp_receive+0xbdc>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	441a      	add	r2, r3
 800bbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dd4b      	ble.n	800bc88 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	4b7e      	ldr	r3, [pc, #504]	; (800bdf4 <tcp_receive+0xbdc>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	4b7d      	ldr	r3, [pc, #500]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc04:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bc06:	4b7c      	ldr	r3, [pc, #496]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	899b      	ldrh	r3, [r3, #12]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fb fc42 	bl	8007498 <lwip_htons>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f003 0302 	and.w	r3, r3, #2
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d005      	beq.n	800bc2a <tcp_receive+0xa12>
                inseg.len -= 1;
 800bc1e:	4b76      	ldr	r3, [pc, #472]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc20:	891b      	ldrh	r3, [r3, #8]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	4b74      	ldr	r3, [pc, #464]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc28:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bc2a:	4b73      	ldr	r3, [pc, #460]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	4b72      	ldr	r3, [pc, #456]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc30:	891b      	ldrh	r3, [r3, #8]
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7fc fbc3 	bl	80083c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bc3a:	4b6f      	ldr	r3, [pc, #444]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc3c:	891c      	ldrh	r4, [r3, #8]
 800bc3e:	4b6e      	ldr	r3, [pc, #440]	; (800bdf8 <tcp_receive+0xbe0>)
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	899b      	ldrh	r3, [r3, #12]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fb fc26 	bl	8007498 <lwip_htons>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <tcp_receive+0xa42>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e000      	b.n	800bc5c <tcp_receive+0xa44>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4423      	add	r3, r4
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	4b63      	ldr	r3, [pc, #396]	; (800bdf0 <tcp_receive+0xbd8>)
 800bc62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bc64:	4b62      	ldr	r3, [pc, #392]	; (800bdf0 <tcp_receive+0xbd8>)
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	461a      	mov	r2, r3
 800bc6a:	4b62      	ldr	r3, [pc, #392]	; (800bdf4 <tcp_receive+0xbdc>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	441a      	add	r2, r3
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d006      	beq.n	800bc88 <tcp_receive+0xa70>
 800bc7a:	4b60      	ldr	r3, [pc, #384]	; (800bdfc <tcp_receive+0xbe4>)
 800bc7c:	f240 52af 	movw	r2, #1455	; 0x5af
 800bc80:	495f      	ldr	r1, [pc, #380]	; (800be00 <tcp_receive+0xbe8>)
 800bc82:	4860      	ldr	r0, [pc, #384]	; (800be04 <tcp_receive+0xbec>)
 800bc84:	f007 ff8e 	bl	8013ba4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc8c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bc8e:	4b58      	ldr	r3, [pc, #352]	; (800bdf0 <tcp_receive+0xbd8>)
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	4b57      	ldr	r3, [pc, #348]	; (800bdf4 <tcp_receive+0xbdc>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	441a      	add	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bca2:	4b53      	ldr	r3, [pc, #332]	; (800bdf0 <tcp_receive+0xbd8>)
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d206      	bcs.n	800bcb8 <tcp_receive+0xaa0>
 800bcaa:	4b54      	ldr	r3, [pc, #336]	; (800bdfc <tcp_receive+0xbe4>)
 800bcac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bcb0:	4955      	ldr	r1, [pc, #340]	; (800be08 <tcp_receive+0xbf0>)
 800bcb2:	4854      	ldr	r0, [pc, #336]	; (800be04 <tcp_receive+0xbec>)
 800bcb4:	f007 ff76 	bl	8013ba4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bcbc:	4b4c      	ldr	r3, [pc, #304]	; (800bdf0 <tcp_receive+0xbd8>)
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7fd f9fb 	bl	80090c4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bcce:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <tcp_receive+0xbe0>)
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	891b      	ldrh	r3, [r3, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d006      	beq.n	800bce6 <tcp_receive+0xace>
          recv_data = inseg.p;
 800bcd8:	4b47      	ldr	r3, [pc, #284]	; (800bdf8 <tcp_receive+0xbe0>)
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	4a4b      	ldr	r2, [pc, #300]	; (800be0c <tcp_receive+0xbf4>)
 800bcde:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bce0:	4b45      	ldr	r3, [pc, #276]	; (800bdf8 <tcp_receive+0xbe0>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bce6:	4b44      	ldr	r3, [pc, #272]	; (800bdf8 <tcp_receive+0xbe0>)
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	899b      	ldrh	r3, [r3, #12]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fb fbd2 	bl	8007498 <lwip_htons>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 80b4 	beq.w	800be68 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bd00:	4b43      	ldr	r3, [pc, #268]	; (800be10 <tcp_receive+0xbf8>)
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f043 0320 	orr.w	r3, r3, #32
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	4b41      	ldr	r3, [pc, #260]	; (800be10 <tcp_receive+0xbf8>)
 800bd0c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bd0e:	e0ab      	b.n	800be68 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd14:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	4a35      	ldr	r2, [pc, #212]	; (800bdf4 <tcp_receive+0xbdc>)
 800bd20:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	891b      	ldrh	r3, [r3, #8]
 800bd26:	461c      	mov	r4, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	899b      	ldrh	r3, [r3, #12]
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fb fbb1 	bl	8007498 <lwip_htons>
 800bd36:	4603      	mov	r3, r0
 800bd38:	f003 0303 	and.w	r3, r3, #3
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <tcp_receive+0xb2c>
 800bd40:	2301      	movs	r3, #1
 800bd42:	e000      	b.n	800bd46 <tcp_receive+0xb2e>
 800bd44:	2300      	movs	r3, #0
 800bd46:	191a      	adds	r2, r3, r4
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	441a      	add	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd56:	461c      	mov	r4, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	891b      	ldrh	r3, [r3, #8]
 800bd5c:	461d      	mov	r5, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	899b      	ldrh	r3, [r3, #12]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fb fb96 	bl	8007498 <lwip_htons>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	f003 0303 	and.w	r3, r3, #3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <tcp_receive+0xb62>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e000      	b.n	800bd7c <tcp_receive+0xb64>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	442b      	add	r3, r5
 800bd7e:	429c      	cmp	r4, r3
 800bd80:	d206      	bcs.n	800bd90 <tcp_receive+0xb78>
 800bd82:	4b1e      	ldr	r3, [pc, #120]	; (800bdfc <tcp_receive+0xbe4>)
 800bd84:	f240 52de 	movw	r2, #1502	; 0x5de
 800bd88:	4922      	ldr	r1, [pc, #136]	; (800be14 <tcp_receive+0xbfc>)
 800bd8a:	481e      	ldr	r0, [pc, #120]	; (800be04 <tcp_receive+0xbec>)
 800bd8c:	f007 ff0a 	bl	8013ba4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	891b      	ldrh	r3, [r3, #8]
 800bd94:	461c      	mov	r4, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	899b      	ldrh	r3, [r3, #12]
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fb fb7a 	bl	8007498 <lwip_htons>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f003 0303 	and.w	r3, r3, #3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <tcp_receive+0xb9a>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <tcp_receive+0xb9c>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	1919      	adds	r1, r3, r4
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdba:	b28b      	uxth	r3, r1
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7fd f97d 	bl	80090c4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	891b      	ldrh	r3, [r3, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d028      	beq.n	800be26 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bdd4:	4b0d      	ldr	r3, [pc, #52]	; (800be0c <tcp_receive+0xbf4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01d      	beq.n	800be18 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800bddc:	4b0b      	ldr	r3, [pc, #44]	; (800be0c <tcp_receive+0xbf4>)
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	4619      	mov	r1, r3
 800bde6:	4610      	mov	r0, r2
 800bde8:	f7fc fd2c 	bl	8008844 <pbuf_cat>
 800bdec:	e018      	b.n	800be20 <tcp_receive+0xc08>
 800bdee:	bf00      	nop
 800bdf0:	2000026a 	.word	0x2000026a
 800bdf4:	20000260 	.word	0x20000260
 800bdf8:	20000240 	.word	0x20000240
 800bdfc:	08015580 	.word	0x08015580
 800be00:	08015884 	.word	0x08015884
 800be04:	080155c4 	.word	0x080155c4
 800be08:	080158c0 	.word	0x080158c0
 800be0c:	20000270 	.word	0x20000270
 800be10:	2000026d 	.word	0x2000026d
 800be14:	080158e0 	.word	0x080158e0
            } else {
              recv_data = cseg->p;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	4a71      	ldr	r2, [pc, #452]	; (800bfe4 <tcp_receive+0xdcc>)
 800be1e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	899b      	ldrh	r3, [r3, #12]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fb fb32 	bl	8007498 <lwip_htons>
 800be34:	4603      	mov	r3, r0
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00d      	beq.n	800be5a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800be3e:	4b6a      	ldr	r3, [pc, #424]	; (800bfe8 <tcp_receive+0xdd0>)
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	f043 0320 	orr.w	r3, r3, #32
 800be46:	b2da      	uxtb	r2, r3
 800be48:	4b67      	ldr	r3, [pc, #412]	; (800bfe8 <tcp_receive+0xdd0>)
 800be4a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	7d1b      	ldrb	r3, [r3, #20]
 800be50:	2b04      	cmp	r3, #4
 800be52:	d102      	bne.n	800be5a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2207      	movs	r2, #7
 800be58:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f7fd fd77 	bl	8009956 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d008      	beq.n	800be82 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800be7c:	429a      	cmp	r2, r3
 800be7e:	f43f af47 	beq.w	800bd10 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7e9b      	ldrb	r3, [r3, #26]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00e      	beq.n	800beac <tcp_receive+0xc94>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	7e9b      	ldrb	r3, [r3, #26]
 800be92:	f023 0301 	bic.w	r3, r3, #1
 800be96:	b2da      	uxtb	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	769a      	strb	r2, [r3, #26]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	7e9b      	ldrb	r3, [r3, #26]
 800bea0:	f043 0302 	orr.w	r3, r3, #2
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800beaa:	e181      	b.n	800c1b0 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	7e9b      	ldrb	r3, [r3, #26]
 800beb0:	f043 0301 	orr.w	r3, r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800beba:	e179      	b.n	800c1b0 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fc93 	bl	800c7e8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800beca:	4848      	ldr	r0, [pc, #288]	; (800bfec <tcp_receive+0xdd4>)
 800becc:	f7fd fd5b 	bl	8009986 <tcp_seg_copy>
 800bed0:	4602      	mov	r2, r0
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800bed6:	e16b      	b.n	800c1b0 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800bed8:	2300      	movs	r3, #0
 800beda:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bee2:	e150      	b.n	800c186 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	4b41      	ldr	r3, [pc, #260]	; (800bff0 <tcp_receive+0xdd8>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d11d      	bne.n	800bf2e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bef2:	4b3e      	ldr	r3, [pc, #248]	; (800bfec <tcp_receive+0xdd4>)
 800bef4:	891a      	ldrh	r2, [r3, #8]
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	891b      	ldrh	r3, [r3, #8]
 800befa:	429a      	cmp	r2, r3
 800befc:	f240 8148 	bls.w	800c190 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800bf00:	483a      	ldr	r0, [pc, #232]	; (800bfec <tcp_receive+0xdd4>)
 800bf02:	f7fd fd40 	bl	8009986 <tcp_seg_copy>
 800bf06:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 8142 	beq.w	800c194 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <tcp_receive+0xd06>
                    prev->next = cseg;
 800bf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	601a      	str	r2, [r3, #0]
 800bf1c:	e002      	b.n	800bf24 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bf24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f7ff f900 	bl	800b12c <tcp_oos_insert_segment>
                }
                break;
 800bf2c:	e132      	b.n	800c194 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d117      	bne.n	800bf64 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bf34:	4b2e      	ldr	r3, [pc, #184]	; (800bff0 <tcp_receive+0xdd8>)
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	da57      	bge.n	800bff4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800bf44:	4829      	ldr	r0, [pc, #164]	; (800bfec <tcp_receive+0xdd4>)
 800bf46:	f7fd fd1e 	bl	8009986 <tcp_seg_copy>
 800bf4a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 8122 	beq.w	800c198 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800bf5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f7ff f8e5 	bl	800b12c <tcp_oos_insert_segment>
                  }
                  break;
 800bf62:	e119      	b.n	800c198 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800bf64:	4b22      	ldr	r3, [pc, #136]	; (800bff0 <tcp_receive+0xdd8>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	3b01      	subs	r3, #1
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	db3e      	blt.n	800bff4 <tcp_receive+0xddc>
 800bf76:	4b1e      	ldr	r3, [pc, #120]	; (800bff0 <tcp_receive+0xdd8>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	3301      	adds	r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dc35      	bgt.n	800bff4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800bf88:	4818      	ldr	r0, [pc, #96]	; (800bfec <tcp_receive+0xdd4>)
 800bf8a:	f7fd fcfc 	bl	8009986 <tcp_seg_copy>
 800bf8e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 8102 	beq.w	800c19c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfa0:	8912      	ldrh	r2, [r2, #8]
 800bfa2:	441a      	add	r2, r3
 800bfa4:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <tcp_receive+0xdd8>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	dd12      	ble.n	800bfd4 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bfae:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <tcp_receive+0xdd8>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfca:	891b      	ldrh	r3, [r3, #8]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f7fc f9f6 	bl	80083c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bfda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7ff f8a5 	bl	800b12c <tcp_oos_insert_segment>
                  }
                  break;
 800bfe2:	e0db      	b.n	800c19c <tcp_receive+0xf84>
 800bfe4:	20000270 	.word	0x20000270
 800bfe8:	2000026d 	.word	0x2000026d
 800bfec:	20000240 	.word	0x20000240
 800bff0:	20000260 	.word	0x20000260
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f040 80bf 	bne.w	800c17c <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bffe:	4b7c      	ldr	r3, [pc, #496]	; (800c1f0 <tcp_receive+0xfd8>)
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f340 80b6 	ble.w	800c17c <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	899b      	ldrh	r3, [r3, #12]
 800c016:	b29b      	uxth	r3, r3
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fb fa3d 	bl	8007498 <lwip_htons>
 800c01e:	4603      	mov	r3, r0
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	f040 80bb 	bne.w	800c1a0 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c02a:	4872      	ldr	r0, [pc, #456]	; (800c1f4 <tcp_receive+0xfdc>)
 800c02c:	f7fd fcab 	bl	8009986 <tcp_seg_copy>
 800c030:	4602      	mov	r2, r0
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 80b2 	beq.w	800c1a4 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c048:	8912      	ldrh	r2, [r2, #8]
 800c04a:	441a      	add	r2, r3
 800c04c:	4b68      	ldr	r3, [pc, #416]	; (800c1f0 <tcp_receive+0xfd8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	dd12      	ble.n	800c07c <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c056:	4b66      	ldr	r3, [pc, #408]	; (800c1f0 <tcp_receive+0xfd8>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	b29b      	uxth	r3, r3
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	b29a      	uxth	r2, r3
 800c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	685a      	ldr	r2, [r3, #4]
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	891b      	ldrh	r3, [r3, #8]
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f7fc f9a2 	bl	80083c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c07c:	4b5e      	ldr	r3, [pc, #376]	; (800c1f8 <tcp_receive+0xfe0>)
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	461a      	mov	r2, r3
 800c082:	4b5b      	ldr	r3, [pc, #364]	; (800c1f0 <tcp_receive+0xfd8>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	441a      	add	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c090:	440b      	add	r3, r1
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	f340 8085 	ble.w	800c1a4 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	899b      	ldrh	r3, [r3, #12]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fb f9f7 	bl	8007498 <lwip_htons>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01e      	beq.n	800c0f2 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	899b      	ldrh	r3, [r3, #12]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c0c2:	b29c      	uxth	r4, r3
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	899b      	ldrh	r3, [r3, #12]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fb f9e2 	bl	8007498 <lwip_htons>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fb f9db 	bl	8007498 <lwip_htons>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	4322      	orrs	r2, r4
 800c0ee:	b292      	uxth	r2, r2
 800c0f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0fc:	4413      	add	r3, r2
 800c0fe:	b299      	uxth	r1, r3
 800c100:	4b3b      	ldr	r3, [pc, #236]	; (800c1f0 <tcp_receive+0xfd8>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	b29a      	uxth	r2, r3
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	1a8a      	subs	r2, r1, r2
 800c10c:	b292      	uxth	r2, r2
 800c10e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	891b      	ldrh	r3, [r3, #8]
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f7fc f94e 	bl	80083c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	891c      	ldrh	r4, [r3, #8]
 800c12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	899b      	ldrh	r3, [r3, #12]
 800c132:	b29b      	uxth	r3, r3
 800c134:	4618      	mov	r0, r3
 800c136:	f7fb f9af 	bl	8007498 <lwip_htons>
 800c13a:	4603      	mov	r3, r0
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <tcp_receive+0xf30>
 800c144:	2301      	movs	r3, #1
 800c146:	e000      	b.n	800c14a <tcp_receive+0xf32>
 800c148:	2300      	movs	r3, #0
 800c14a:	4423      	add	r3, r4
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	4b2a      	ldr	r3, [pc, #168]	; (800c1f8 <tcp_receive+0xfe0>)
 800c150:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c152:	4b29      	ldr	r3, [pc, #164]	; (800c1f8 <tcp_receive+0xfe0>)
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	4b25      	ldr	r3, [pc, #148]	; (800c1f0 <tcp_receive+0xfd8>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	441a      	add	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c162:	6879      	ldr	r1, [r7, #4]
 800c164:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c166:	440b      	add	r3, r1
 800c168:	429a      	cmp	r2, r3
 800c16a:	d01b      	beq.n	800c1a4 <tcp_receive+0xf8c>
 800c16c:	4b23      	ldr	r3, [pc, #140]	; (800c1fc <tcp_receive+0xfe4>)
 800c16e:	f240 627b 	movw	r2, #1659	; 0x67b
 800c172:	4923      	ldr	r1, [pc, #140]	; (800c200 <tcp_receive+0xfe8>)
 800c174:	4823      	ldr	r0, [pc, #140]	; (800c204 <tcp_receive+0xfec>)
 800c176:	f007 fd15 	bl	8013ba4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c17a:	e013      	b.n	800c1a4 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f47f aeab 	bne.w	800bee4 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800c18e:	e00f      	b.n	800c1b0 <tcp_receive+0xf98>
                break;
 800c190:	bf00      	nop
 800c192:	e00d      	b.n	800c1b0 <tcp_receive+0xf98>
                break;
 800c194:	bf00      	nop
 800c196:	e00b      	b.n	800c1b0 <tcp_receive+0xf98>
                  break;
 800c198:	bf00      	nop
 800c19a:	e009      	b.n	800c1b0 <tcp_receive+0xf98>
                  break;
 800c19c:	bf00      	nop
 800c19e:	e007      	b.n	800c1b0 <tcp_receive+0xf98>
                  break;
 800c1a0:	bf00      	nop
 800c1a2:	e005      	b.n	800c1b0 <tcp_receive+0xf98>
                break;
 800c1a4:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800c1a6:	e003      	b.n	800c1b0 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fb1d 	bl	800c7e8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c1ae:	e01a      	b.n	800c1e6 <tcp_receive+0xfce>
 800c1b0:	e019      	b.n	800c1e6 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c1b2:	4b0f      	ldr	r3, [pc, #60]	; (800c1f0 <tcp_receive+0xfd8>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	db0a      	blt.n	800c1d6 <tcp_receive+0xfbe>
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <tcp_receive+0xfd8>)
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c8:	6879      	ldr	r1, [r7, #4]
 800c1ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1cc:	440b      	add	r3, r1
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dd07      	ble.n	800c1e6 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	7e9b      	ldrb	r3, [r3, #26]
 800c1da:	f043 0302 	orr.w	r3, r3, #2
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800c1e4:	e7ff      	b.n	800c1e6 <tcp_receive+0xfce>
 800c1e6:	bf00      	nop
 800c1e8:	3734      	adds	r7, #52	; 0x34
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000260 	.word	0x20000260
 800c1f4:	20000240 	.word	0x20000240
 800c1f8:	2000026a 	.word	0x2000026a
 800c1fc:	08015580 	.word	0x08015580
 800c200:	0801584c 	.word	0x0801584c
 800c204:	080155c4 	.word	0x080155c4

0800c208 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c20e:	4b18      	ldr	r3, [pc, #96]	; (800c270 <tcp_getoptbyte+0x68>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d005      	beq.n	800c222 <tcp_getoptbyte+0x1a>
 800c216:	4b17      	ldr	r3, [pc, #92]	; (800c274 <tcp_getoptbyte+0x6c>)
 800c218:	881a      	ldrh	r2, [r3, #0]
 800c21a:	4b17      	ldr	r3, [pc, #92]	; (800c278 <tcp_getoptbyte+0x70>)
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d20e      	bcs.n	800c240 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800c222:	4b16      	ldr	r3, [pc, #88]	; (800c27c <tcp_getoptbyte+0x74>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3314      	adds	r3, #20
 800c228:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800c22a:	4b12      	ldr	r3, [pc, #72]	; (800c274 <tcp_getoptbyte+0x6c>)
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	b291      	uxth	r1, r2
 800c232:	4a10      	ldr	r2, [pc, #64]	; (800c274 <tcp_getoptbyte+0x6c>)
 800c234:	8011      	strh	r1, [r2, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	4413      	add	r3, r2
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	e010      	b.n	800c262 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c240:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <tcp_getoptbyte+0x6c>)
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	b291      	uxth	r1, r2
 800c248:	4a0a      	ldr	r2, [pc, #40]	; (800c274 <tcp_getoptbyte+0x6c>)
 800c24a:	8011      	strh	r1, [r2, #0]
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <tcp_getoptbyte+0x70>)
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	b2db      	uxtb	r3, r3
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <tcp_getoptbyte+0x68>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	4413      	add	r3, r2
 800c260:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c262:	4618      	mov	r0, r3
 800c264:	370c      	adds	r7, #12
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000258 	.word	0x20000258
 800c274:	2000025c 	.word	0x2000025c
 800c278:	20000256 	.word	0x20000256
 800c27c:	20000250 	.word	0x20000250

0800c280 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c288:	4b2d      	ldr	r3, [pc, #180]	; (800c340 <tcp_parseopt+0xc0>)
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d053      	beq.n	800c338 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c290:	4b2c      	ldr	r3, [pc, #176]	; (800c344 <tcp_parseopt+0xc4>)
 800c292:	2200      	movs	r2, #0
 800c294:	801a      	strh	r2, [r3, #0]
 800c296:	e043      	b.n	800c320 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800c298:	f7ff ffb6 	bl	800c208 <tcp_getoptbyte>
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d03c      	beq.n	800c320 <tcp_parseopt+0xa0>
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d002      	beq.n	800c2b0 <tcp_parseopt+0x30>
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d03f      	beq.n	800c32e <tcp_parseopt+0xae>
 800c2ae:	e026      	b.n	800c2fe <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c2b0:	f7ff ffaa 	bl	800c208 <tcp_getoptbyte>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d13b      	bne.n	800c332 <tcp_parseopt+0xb2>
 800c2ba:	4b22      	ldr	r3, [pc, #136]	; (800c344 <tcp_parseopt+0xc4>)
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	3302      	adds	r3, #2
 800c2c0:	4a1f      	ldr	r2, [pc, #124]	; (800c340 <tcp_parseopt+0xc0>)
 800c2c2:	8812      	ldrh	r2, [r2, #0]
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	dc34      	bgt.n	800c332 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800c2c8:	f7ff ff9e 	bl	800c208 <tcp_getoptbyte>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	021b      	lsls	r3, r3, #8
 800c2d2:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800c2d4:	f7ff ff98 	bl	800c208 <tcp_getoptbyte>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	89bb      	ldrh	r3, [r7, #12]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c2e2:	89bb      	ldrh	r3, [r7, #12]
 800c2e4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c2e8:	d804      	bhi.n	800c2f4 <tcp_parseopt+0x74>
 800c2ea:	89bb      	ldrh	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <tcp_parseopt+0x74>
 800c2f0:	89ba      	ldrh	r2, [r7, #12]
 800c2f2:	e001      	b.n	800c2f8 <tcp_parseopt+0x78>
 800c2f4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800c2fc:	e010      	b.n	800c320 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800c2fe:	f7ff ff83 	bl	800c208 <tcp_getoptbyte>
 800c302:	4603      	mov	r3, r0
 800c304:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800c306:	7afb      	ldrb	r3, [r7, #11]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d914      	bls.n	800c336 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800c30c:	7afb      	ldrb	r3, [r7, #11]
 800c30e:	b29a      	uxth	r2, r3
 800c310:	4b0c      	ldr	r3, [pc, #48]	; (800c344 <tcp_parseopt+0xc4>)
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	4413      	add	r3, r2
 800c316:	b29b      	uxth	r3, r3
 800c318:	3b02      	subs	r3, #2
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	4b09      	ldr	r3, [pc, #36]	; (800c344 <tcp_parseopt+0xc4>)
 800c31e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c320:	4b08      	ldr	r3, [pc, #32]	; (800c344 <tcp_parseopt+0xc4>)
 800c322:	881a      	ldrh	r2, [r3, #0]
 800c324:	4b06      	ldr	r3, [pc, #24]	; (800c340 <tcp_parseopt+0xc0>)
 800c326:	881b      	ldrh	r3, [r3, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d3b5      	bcc.n	800c298 <tcp_parseopt+0x18>
 800c32c:	e004      	b.n	800c338 <tcp_parseopt+0xb8>
        return;
 800c32e:	bf00      	nop
 800c330:	e002      	b.n	800c338 <tcp_parseopt+0xb8>
          return;
 800c332:	bf00      	nop
 800c334:	e000      	b.n	800c338 <tcp_parseopt+0xb8>
          return;
 800c336:	bf00      	nop
      }
    }
  }
}
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	20000254 	.word	0x20000254
 800c344:	2000025c 	.word	0x2000025c

0800c348 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c348:	b480      	push	{r7}
 800c34a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c34c:	4b05      	ldr	r3, [pc, #20]	; (800c364 <tcp_trigger_input_pcb_close+0x1c>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	f043 0310 	orr.w	r3, r3, #16
 800c354:	b2da      	uxtb	r2, r3
 800c356:	4b03      	ldr	r3, [pc, #12]	; (800c364 <tcp_trigger_input_pcb_close+0x1c>)
 800c358:	701a      	strb	r2, [r3, #0]
}
 800c35a:	bf00      	nop
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	2000026d 	.word	0x2000026d

0800c368 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	607b      	str	r3, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	817b      	strh	r3, [r7, #10]
 800c376:	4613      	mov	r3, r2
 800c378:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c37a:	897a      	ldrh	r2, [r7, #10]
 800c37c:	893b      	ldrh	r3, [r7, #8]
 800c37e:	4413      	add	r3, r2
 800c380:	b29b      	uxth	r3, r3
 800c382:	3314      	adds	r3, #20
 800c384:	b29b      	uxth	r3, r3
 800c386:	2200      	movs	r2, #0
 800c388:	4619      	mov	r1, r3
 800c38a:	2001      	movs	r0, #1
 800c38c:	f7fb fe1a 	bl	8007fc4 <pbuf_alloc>
 800c390:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d057      	beq.n	800c448 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	895b      	ldrh	r3, [r3, #10]
 800c39c:	461a      	mov	r2, r3
 800c39e:	897b      	ldrh	r3, [r7, #10]
 800c3a0:	3314      	adds	r3, #20
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	da05      	bge.n	800c3b2 <tcp_output_alloc_header+0x4a>
 800c3a6:	4b2b      	ldr	r3, [pc, #172]	; (800c454 <tcp_output_alloc_header+0xec>)
 800c3a8:	2273      	movs	r2, #115	; 0x73
 800c3aa:	492b      	ldr	r1, [pc, #172]	; (800c458 <tcp_output_alloc_header+0xf0>)
 800c3ac:	482b      	ldr	r0, [pc, #172]	; (800c45c <tcp_output_alloc_header+0xf4>)
 800c3ae:	f007 fbf9 	bl	8013ba4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	8adb      	ldrh	r3, [r3, #22]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fb f86b 	bl	8007498 <lwip_htons>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	8b1b      	ldrh	r3, [r3, #24]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fb f862 	bl	8007498 <lwip_htons>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fb f864 	bl	80074b4 <lwip_htonl>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800c3f2:	897b      	ldrh	r3, [r7, #10]
 800c3f4:	089b      	lsrs	r3, r3, #2
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	3305      	adds	r3, #5
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	031b      	lsls	r3, r3, #12
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	f043 0310 	orr.w	r3, r3, #16
 800c404:	b29b      	uxth	r3, r3
 800c406:	4618      	mov	r0, r3
 800c408:	f7fb f846 	bl	8007498 <lwip_htons>
 800c40c:	4603      	mov	r3, r0
 800c40e:	461a      	mov	r2, r3
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fb f83d 	bl	8007498 <lwip_htons>
 800c41e:	4603      	mov	r3, r0
 800c420:	461a      	mov	r2, r3
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	2200      	movs	r2, #0
 800c42a:	741a      	strb	r2, [r3, #16]
 800c42c:	2200      	movs	r2, #0
 800c42e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2200      	movs	r2, #0
 800c434:	749a      	strb	r2, [r3, #18]
 800c436:	2200      	movs	r2, #0
 800c438:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c442:	441a      	add	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c448:	697b      	ldr	r3, [r7, #20]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	08015908 	.word	0x08015908
 800c458:	0801593c 	.word	0x0801593c
 800c45c:	0801596c 	.word	0x0801596c

0800c460 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c460:	b590      	push	{r4, r7, lr}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d02d      	beq.n	800c4cc <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c474:	60fb      	str	r3, [r7, #12]
 800c476:	e002      	b.n	800c47e <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1f8      	bne.n	800c478 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	899b      	ldrh	r3, [r3, #12]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fb f802 	bl	8007498 <lwip_htons>
 800c494:	4603      	mov	r3, r0
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d116      	bne.n	800c4cc <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	899b      	ldrh	r3, [r3, #12]
 800c4a4:	b29c      	uxth	r4, r3
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	f7fa fff6 	bl	8007498 <lwip_htons>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	4322      	orrs	r2, r4
 800c4b6:	b292      	uxth	r2, r2
 800c4b8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	7e9b      	ldrb	r3, [r3, #26]
 800c4be:	f043 0320 	orr.w	r3, r3, #32
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	e004      	b.n	800c4d6 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f88e 	bl	800c5f0 <tcp_enqueue_flags>
 800c4d4:	4603      	mov	r3, r0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd90      	pop	{r4, r7, pc}
	...

0800c4e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800c4e0:	b590      	push	{r4, r7, lr}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	603b      	str	r3, [r7, #0]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c4f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c4fe:	2003      	movs	r0, #3
 800c500:	f7fb fb78 	bl	8007bf4 <memp_malloc>
 800c504:	6138      	str	r0, [r7, #16]
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d104      	bne.n	800c516 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c50c:	68b8      	ldr	r0, [r7, #8]
 800c50e:	f7fc f8cb 	bl	80086a8 <pbuf_free>
    return NULL;
 800c512:	2300      	movs	r3, #0
 800c514:	e061      	b.n	800c5da <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c51c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2200      	movs	r2, #0
 800c522:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	891a      	ldrh	r2, [r3, #8]
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	b29b      	uxth	r3, r3
 800c532:	429a      	cmp	r2, r3
 800c534:	d205      	bcs.n	800c542 <tcp_create_segment+0x62>
 800c536:	4b2b      	ldr	r3, [pc, #172]	; (800c5e4 <tcp_create_segment+0x104>)
 800c538:	22ba      	movs	r2, #186	; 0xba
 800c53a:	492b      	ldr	r1, [pc, #172]	; (800c5e8 <tcp_create_segment+0x108>)
 800c53c:	482b      	ldr	r0, [pc, #172]	; (800c5ec <tcp_create_segment+0x10c>)
 800c53e:	f007 fb31 	bl	8013ba4 <iprintf>
  seg->len = p->tot_len - optlen;
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	891a      	ldrh	r2, [r3, #8]
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800c552:	2114      	movs	r1, #20
 800c554:	68b8      	ldr	r0, [r7, #8]
 800c556:	f7fc f883 	bl	8008660 <pbuf_header>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c560:	6938      	ldr	r0, [r7, #16]
 800c562:	f7fd f9f8 	bl	8009956 <tcp_seg_free>
    return NULL;
 800c566:	2300      	movs	r3, #0
 800c568:	e037      	b.n	800c5da <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	8ada      	ldrh	r2, [r3, #22]
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	68dc      	ldr	r4, [r3, #12]
 800c57c:	4610      	mov	r0, r2
 800c57e:	f7fa ff8b 	bl	8007498 <lwip_htons>
 800c582:	4603      	mov	r3, r0
 800c584:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	8b1a      	ldrh	r2, [r3, #24]
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	68dc      	ldr	r4, [r3, #12]
 800c58e:	4610      	mov	r0, r2
 800c590:	f7fa ff82 	bl	8007498 <lwip_htons>
 800c594:	4603      	mov	r3, r0
 800c596:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	68dc      	ldr	r4, [r3, #12]
 800c59c:	6838      	ldr	r0, [r7, #0]
 800c59e:	f7fa ff89 	bl	80074b4 <lwip_htonl>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	089b      	lsrs	r3, r3, #2
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	3305      	adds	r3, #5
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	031b      	lsls	r3, r3, #12
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	68dc      	ldr	r4, [r3, #12]
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	f7fa ff68 	bl	8007498 <lwip_htons>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	749a      	strb	r2, [r3, #18]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	74da      	strb	r2, [r3, #19]
  return seg;
 800c5d8:	693b      	ldr	r3, [r7, #16]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd90      	pop	{r4, r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	08015908 	.word	0x08015908
 800c5e8:	08015994 	.word	0x08015994
 800c5ec:	0801596c 	.word	0x0801596c

0800c5f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08a      	sub	sp, #40	; 0x28
 800c5f4:	af02      	add	r7, sp, #8
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c604:	78fb      	ldrb	r3, [r7, #3]
 800c606:	f003 0303 	and.w	r3, r3, #3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d106      	bne.n	800c61c <tcp_enqueue_flags+0x2c>
 800c60e:	4b6f      	ldr	r3, [pc, #444]	; (800c7cc <tcp_enqueue_flags+0x1dc>)
 800c610:	f240 321b 	movw	r2, #795	; 0x31b
 800c614:	496e      	ldr	r1, [pc, #440]	; (800c7d0 <tcp_enqueue_flags+0x1e0>)
 800c616:	486f      	ldr	r0, [pc, #444]	; (800c7d4 <tcp_enqueue_flags+0x1e4>)
 800c618:	f007 fac4 	bl	8013ba4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c622:	2b08      	cmp	r3, #8
 800c624:	d806      	bhi.n	800c634 <tcp_enqueue_flags+0x44>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c62c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c630:	4293      	cmp	r3, r2
 800c632:	d90e      	bls.n	800c652 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d109      	bne.n	800c652 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	7e9b      	ldrb	r3, [r3, #26]
 800c642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c646:	b2da      	uxtb	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c650:	e0b7      	b.n	800c7c2 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800c652:	78fb      	ldrb	r3, [r7, #3]
 800c654:	f003 0302 	and.w	r3, r3, #2
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800c65c:	2301      	movs	r3, #1
 800c65e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c660:	7ffb      	ldrb	r3, [r7, #31]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	b2db      	uxtb	r3, r3
 800c666:	f003 0304 	and.w	r3, r3, #4
 800c66a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	2200      	movs	r2, #0
 800c672:	4619      	mov	r1, r3
 800c674:	2000      	movs	r0, #0
 800c676:	f7fb fca5 	bl	8007fc4 <pbuf_alloc>
 800c67a:	6138      	str	r0, [r7, #16]
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d109      	bne.n	800c696 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7e9b      	ldrb	r3, [r3, #26]
 800c686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c694:	e095      	b.n	800c7c2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	895a      	ldrh	r2, [r3, #10]
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d206      	bcs.n	800c6b0 <tcp_enqueue_flags+0xc0>
 800c6a2:	4b4a      	ldr	r3, [pc, #296]	; (800c7cc <tcp_enqueue_flags+0x1dc>)
 800c6a4:	f240 3241 	movw	r2, #833	; 0x341
 800c6a8:	494b      	ldr	r1, [pc, #300]	; (800c7d8 <tcp_enqueue_flags+0x1e8>)
 800c6aa:	484a      	ldr	r0, [pc, #296]	; (800c7d4 <tcp_enqueue_flags+0x1e4>)
 800c6ac:	f007 fa7a 	bl	8013ba4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800c6b4:	78fa      	ldrb	r2, [r7, #3]
 800c6b6:	7ffb      	ldrb	r3, [r7, #31]
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	6939      	ldr	r1, [r7, #16]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff ff0e 	bl	800c4e0 <tcp_create_segment>
 800c6c4:	60f8      	str	r0, [r7, #12]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	7e9b      	ldrb	r3, [r3, #26]
 800c6d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c6da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6de:	e070      	b.n	800c7c2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f003 0303 	and.w	r3, r3, #3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d006      	beq.n	800c6fa <tcp_enqueue_flags+0x10a>
 800c6ec:	4b37      	ldr	r3, [pc, #220]	; (800c7cc <tcp_enqueue_flags+0x1dc>)
 800c6ee:	f240 3249 	movw	r2, #841	; 0x349
 800c6f2:	493a      	ldr	r1, [pc, #232]	; (800c7dc <tcp_enqueue_flags+0x1ec>)
 800c6f4:	4837      	ldr	r0, [pc, #220]	; (800c7d4 <tcp_enqueue_flags+0x1e4>)
 800c6f6:	f007 fa55 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	891b      	ldrh	r3, [r3, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d006      	beq.n	800c710 <tcp_enqueue_flags+0x120>
 800c702:	4b32      	ldr	r3, [pc, #200]	; (800c7cc <tcp_enqueue_flags+0x1dc>)
 800c704:	f240 324a 	movw	r2, #842	; 0x34a
 800c708:	4935      	ldr	r1, [pc, #212]	; (800c7e0 <tcp_enqueue_flags+0x1f0>)
 800c70a:	4832      	ldr	r0, [pc, #200]	; (800c7d4 <tcp_enqueue_flags+0x1e4>)
 800c70c:	f007 fa4a 	bl	8013ba4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c714:	2b00      	cmp	r3, #0
 800c716:	d103      	bne.n	800c720 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	669a      	str	r2, [r3, #104]	; 0x68
 800c71e:	e00d      	b.n	800c73c <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c724:	61bb      	str	r3, [r7, #24]
 800c726:	e002      	b.n	800c72e <tcp_enqueue_flags+0x13e>
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	61bb      	str	r3, [r7, #24]
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1f8      	bne.n	800c728 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c744:	78fb      	ldrb	r3, [r7, #3]
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d104      	bne.n	800c758 <tcp_enqueue_flags+0x168>
 800c74e:	78fb      	ldrb	r3, [r7, #3]
 800c750:	f003 0301 	and.w	r3, r3, #1
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c75c:	1c5a      	adds	r2, r3, #1
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c762:	78fb      	ldrb	r3, [r7, #3]
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d006      	beq.n	800c77a <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7e9b      	ldrb	r3, [r3, #26]
 800c770:	f043 0320 	orr.w	r3, r3, #32
 800c774:	b2da      	uxtb	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fc f826 	bl	80087d0 <pbuf_clen>
 800c784:	4603      	mov	r3, r0
 800c786:	461a      	mov	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c78e:	4413      	add	r3, r2
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00e      	beq.n	800c7c0 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10a      	bne.n	800c7c0 <tcp_enqueue_flags+0x1d0>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d106      	bne.n	800c7c0 <tcp_enqueue_flags+0x1d0>
 800c7b2:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <tcp_enqueue_flags+0x1dc>)
 800c7b4:	f240 326d 	movw	r2, #877	; 0x36d
 800c7b8:	490a      	ldr	r1, [pc, #40]	; (800c7e4 <tcp_enqueue_flags+0x1f4>)
 800c7ba:	4806      	ldr	r0, [pc, #24]	; (800c7d4 <tcp_enqueue_flags+0x1e4>)
 800c7bc:	f007 f9f2 	bl	8013ba4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	08015908 	.word	0x08015908
 800c7d0:	08015c0c 	.word	0x08015c0c
 800c7d4:	0801596c 	.word	0x0801596c
 800c7d8:	08015c64 	.word	0x08015c64
 800c7dc:	08015ca0 	.word	0x08015ca0
 800c7e0:	08015cb8 	.word	0x08015cb8
 800c7e4:	08015ce4 	.word	0x08015ce4

0800c7e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c7e8:	b590      	push	{r4, r7, lr}
 800c7ea:	b08b      	sub	sp, #44	; 0x2c
 800c7ec:	af04      	add	r7, sp, #16
 800c7ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c7f4:	7dbb      	ldrb	r3, [r7, #22]
 800c7f6:	b29c      	uxth	r4, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fa fe59 	bl	80074b4 <lwip_htonl>
 800c802:	4603      	mov	r3, r0
 800c804:	2200      	movs	r2, #0
 800c806:	4621      	mov	r1, r4
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff fdad 	bl	800c368 <tcp_output_alloc_header>
 800c80e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d109      	bne.n	800c82a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7e9b      	ldrb	r3, [r3, #26]
 800c81a:	f043 0303 	orr.w	r3, r3, #3
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c824:	f06f 0301 	mvn.w	r3, #1
 800c828:	e036      	b.n	800c898 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3304      	adds	r3, #4
 800c82e:	4618      	mov	r0, r3
 800c830:	f004 f8fc 	bl	8010a2c <ip4_route>
 800c834:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d102      	bne.n	800c842 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800c83c:	23fc      	movs	r3, #252	; 0xfc
 800c83e:	75fb      	strb	r3, [r7, #23]
 800c840:	e012      	b.n	800c868 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800c842:	6879      	ldr	r1, [r7, #4]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	1d18      	adds	r0, r3, #4
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7a9c      	ldrb	r4, [r3, #10]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	7a5b      	ldrb	r3, [r3, #9]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	9202      	str	r2, [sp, #8]
 800c854:	2206      	movs	r2, #6
 800c856:	9201      	str	r2, [sp, #4]
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	4623      	mov	r3, r4
 800c85c:	4602      	mov	r2, r0
 800c85e:	6938      	ldr	r0, [r7, #16]
 800c860:	f004 faaa 	bl	8010db8 <ip4_output_if>
 800c864:	4603      	mov	r3, r0
 800c866:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c868:	6938      	ldr	r0, [r7, #16]
 800c86a:	f7fb ff1d 	bl	80086a8 <pbuf_free>

  if (err != ERR_OK) {
 800c86e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d007      	beq.n	800c886 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7e9b      	ldrb	r3, [r3, #26]
 800c87a:	f043 0303 	orr.w	r3, r3, #3
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	769a      	strb	r2, [r3, #26]
 800c884:	e006      	b.n	800c894 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	7e9b      	ldrb	r3, [r3, #26]
 800c88a:	f023 0303 	bic.w	r3, r3, #3
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800c894:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	371c      	adds	r7, #28
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd90      	pop	{r4, r7, pc}

0800c8a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c8a0:	b5b0      	push	{r4, r5, r7, lr}
 800c8a2:	b08a      	sub	sp, #40	; 0x28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	7d1b      	ldrb	r3, [r3, #20]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d106      	bne.n	800c8be <tcp_output+0x1e>
 800c8b0:	4b9b      	ldr	r3, [pc, #620]	; (800cb20 <tcp_output+0x280>)
 800c8b2:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800c8b6:	499b      	ldr	r1, [pc, #620]	; (800cb24 <tcp_output+0x284>)
 800c8b8:	489b      	ldr	r0, [pc, #620]	; (800cb28 <tcp_output+0x288>)
 800c8ba:	f007 f973 	bl	8013ba4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c8be:	4b9b      	ldr	r3, [pc, #620]	; (800cb2c <tcp_output+0x28c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d101      	bne.n	800c8cc <tcp_output+0x2c>
    return ERR_OK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e1cf      	b.n	800cc6c <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d203      	bcs.n	800c8e4 <tcp_output+0x44>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8e2:	e002      	b.n	800c8ea <tcp_output+0x4a>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8ea:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	7e9b      	ldrb	r3, [r3, #26]
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d017      	beq.n	800c92e <tcp_output+0x8e>
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00f      	beq.n	800c924 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fa fdd2 	bl	80074b4 <lwip_htonl>
 800c910:	4602      	mov	r2, r0
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91a:	8912      	ldrh	r2, [r2, #8]
 800c91c:	4413      	add	r3, r2
     (seg == NULL ||
 800c91e:	69ba      	ldr	r2, [r7, #24]
 800c920:	429a      	cmp	r2, r3
 800c922:	d204      	bcs.n	800c92e <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff ff5f 	bl	800c7e8 <tcp_send_empty_ack>
 800c92a:	4603      	mov	r3, r0
 800c92c:	e19e      	b.n	800cc6c <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c932:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c934:	6a3b      	ldr	r3, [r7, #32]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800c93a:	e002      	b.n	800c942 <tcp_output+0xa2>
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	623b      	str	r3, [r7, #32]
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1f8      	bne.n	800c93c <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3304      	adds	r3, #4
 800c94e:	4618      	mov	r0, r3
 800c950:	f004 f86c 	bl	8010a2c <ip4_route>
 800c954:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <tcp_output+0xc2>
    return ERR_RTE;
 800c95c:	f06f 0303 	mvn.w	r3, #3
 800c960:	e184      	b.n	800cc6c <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <tcp_output+0xd0>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d111      	bne.n	800c994 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d002      	beq.n	800c97c <tcp_output+0xdc>
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	3304      	adds	r3, #4
 800c97a:	e000      	b.n	800c97e <tcp_output+0xde>
 800c97c:	2300      	movs	r3, #0
 800c97e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d102      	bne.n	800c98c <tcp_output+0xec>
      return ERR_RTE;
 800c986:	f06f 0303 	mvn.w	r3, #3
 800c98a:	e16f      	b.n	800cc6c <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 813e 	beq.w	800cc18 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fa fd86 	bl	80074b4 <lwip_htonl>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b2:	8912      	ldrh	r2, [r2, #8]
 800c9b4:	4413      	add	r3, r2
  if (seg != NULL &&
 800c9b6:	69ba      	ldr	r2, [r7, #24]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	f080 812d 	bcs.w	800cc18 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f000 8129 	beq.w	800cc18 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	f040 8121 	bne.w	800cc18 <tcp_output+0x378>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f040 811c 	bne.w	800cc18 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f040 812b 	bne.w	800cc42 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800c9fc:	e121      	b.n	800cc42 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	899b      	ldrh	r3, [r3, #12]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fa fd46 	bl	8007498 <lwip_htons>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	f003 0304 	and.w	r3, r3, #4
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d006      	beq.n	800ca24 <tcp_output+0x184>
 800ca16:	4b42      	ldr	r3, [pc, #264]	; (800cb20 <tcp_output+0x280>)
 800ca18:	f240 4246 	movw	r2, #1094	; 0x446
 800ca1c:	4944      	ldr	r1, [pc, #272]	; (800cb30 <tcp_output+0x290>)
 800ca1e:	4842      	ldr	r0, [pc, #264]	; (800cb28 <tcp_output+0x288>)
 800ca20:	f007 f8c0 	bl	8013ba4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d01f      	beq.n	800ca6c <tcp_output+0x1cc>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7e9b      	ldrb	r3, [r3, #26]
 800ca30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d119      	bne.n	800ca6c <tcp_output+0x1cc>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00b      	beq.n	800ca58 <tcp_output+0x1b8>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d110      	bne.n	800ca6c <tcp_output+0x1cc>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca4e:	891a      	ldrh	r2, [r3, #8]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d209      	bcs.n	800ca6c <tcp_output+0x1cc>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d004      	beq.n	800ca6c <tcp_output+0x1cc>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca68:	2b08      	cmp	r3, #8
 800ca6a:	d901      	bls.n	800ca70 <tcp_output+0x1d0>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e000      	b.n	800ca72 <tcp_output+0x1d2>
 800ca70:	2300      	movs	r3, #0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	7e9b      	ldrb	r3, [r3, #26]
 800ca7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 80e1 	beq.w	800cc46 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	7d1b      	ldrb	r3, [r3, #20]
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	d00d      	beq.n	800caa8 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	899b      	ldrh	r3, [r3, #12]
 800ca92:	b29c      	uxth	r4, r3
 800ca94:	2010      	movs	r0, #16
 800ca96:	f7fa fcff 	bl	8007498 <lwip_htons>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	4322      	orrs	r2, r4
 800caa4:	b292      	uxth	r2, r2
 800caa6:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800caa8:	697a      	ldr	r2, [r7, #20]
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caae:	f000 f8e1 	bl	800cc74 <tcp_output_segment>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d009      	beq.n	800cad2 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7e9b      	ldrb	r3, [r3, #26]
 800cac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	769a      	strb	r2, [r3, #26]
      return err;
 800cacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cad0:	e0cc      	b.n	800cc6c <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7d1b      	ldrb	r3, [r3, #20]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d006      	beq.n	800caf0 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7e9b      	ldrb	r3, [r3, #26]
 800cae6:	f023 0303 	bic.w	r3, r3, #3
 800caea:	b2da      	uxtb	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800caf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fa fcdc 	bl	80074b4 <lwip_htonl>
 800cafc:	4604      	mov	r4, r0
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	891b      	ldrh	r3, [r3, #8]
 800cb02:	461d      	mov	r5, r3
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	899b      	ldrh	r3, [r3, #12]
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fa fcc3 	bl	8007498 <lwip_htons>
 800cb12:	4603      	mov	r3, r0
 800cb14:	f003 0303 	and.w	r3, r3, #3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00b      	beq.n	800cb34 <tcp_output+0x294>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e00a      	b.n	800cb36 <tcp_output+0x296>
 800cb20:	08015908 	.word	0x08015908
 800cb24:	08015d0c 	.word	0x08015d0c
 800cb28:	0801596c 	.word	0x0801596c
 800cb2c:	200038fc 	.word	0x200038fc
 800cb30:	08015d34 	.word	0x08015d34
 800cb34:	2300      	movs	r3, #0
 800cb36:	442b      	add	r3, r5
 800cb38:	4423      	add	r3, r4
 800cb3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	da02      	bge.n	800cb4e <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	891b      	ldrh	r3, [r3, #8]
 800cb52:	461c      	mov	r4, r3
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	899b      	ldrh	r3, [r3, #12]
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fa fc9b 	bl	8007498 <lwip_htons>
 800cb62:	4603      	mov	r3, r0
 800cb64:	f003 0303 	and.w	r3, r3, #3
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <tcp_output+0x2d0>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e000      	b.n	800cb72 <tcp_output+0x2d2>
 800cb70:	2300      	movs	r3, #0
 800cb72:	4423      	add	r3, r4
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d049      	beq.n	800cc0c <tcp_output+0x36c>
      seg->next = NULL;
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d105      	bne.n	800cb92 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	623b      	str	r3, [r7, #32]
 800cb90:	e03f      	b.n	800cc12 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fa fc8b 	bl	80074b4 <lwip_htonl>
 800cb9e:	4604      	mov	r4, r0
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fa fc84 	bl	80074b4 <lwip_htonl>
 800cbac:	4603      	mov	r3, r0
 800cbae:	1ae3      	subs	r3, r4, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	da24      	bge.n	800cbfe <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	336c      	adds	r3, #108	; 0x6c
 800cbb8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cbba:	e002      	b.n	800cbc2 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d011      	beq.n	800cbee <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fa fc6e 	bl	80074b4 <lwip_htonl>
 800cbd8:	4604      	mov	r4, r0
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fa fc67 	bl	80074b4 <lwip_htonl>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	dbe6      	blt.n	800cbbc <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	e009      	b.n	800cc12 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cbfe:	6a3b      	ldr	r3, [r7, #32]
 800cc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc02:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	623b      	str	r3, [r7, #32]
 800cc0a:	e002      	b.n	800cc12 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cc0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc0e:	f7fc fea2 	bl	8009956 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc16:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d015      	beq.n	800cc4a <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fa fc45 	bl	80074b4 <lwip_htonl>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc34:	8912      	ldrh	r2, [r2, #8]
 800cc36:	4413      	add	r3, r2
  while (seg != NULL &&
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	f4bf aedf 	bcs.w	800c9fe <tcp_output+0x15e>
  }
output_done:
 800cc40:	e003      	b.n	800cc4a <tcp_output+0x3aa>
    goto output_done;
 800cc42:	bf00      	nop
 800cc44:	e002      	b.n	800cc4c <tcp_output+0x3ac>
      break;
 800cc46:	bf00      	nop
 800cc48:	e000      	b.n	800cc4c <tcp_output+0x3ac>
output_done:
 800cc4a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d103      	bne.n	800cc5c <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	7e9b      	ldrb	r3, [r3, #26]
 800cc60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3728      	adds	r7, #40	; 0x28
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bdb0      	pop	{r4, r5, r7, pc}

0800cc74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cc74:	b5b0      	push	{r4, r5, r7, lr}
 800cc76:	b08c      	sub	sp, #48	; 0x30
 800cc78:	af04      	add	r7, sp, #16
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	89db      	ldrh	r3, [r3, #14]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d001      	beq.n	800cc8e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	e08b      	b.n	800cda6 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	68dc      	ldr	r4, [r3, #12]
 800cc96:	4610      	mov	r0, r2
 800cc98:	f7fa fc0c 	bl	80074b4 <lwip_htonl>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	68dc      	ldr	r4, [r3, #12]
 800cca8:	4610      	mov	r0, r2
 800ccaa:	f7fa fbf5 	bl	8007498 <lwip_htons>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ccba:	441a      	add	r2, r3
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	3314      	adds	r3, #20
 800ccc6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	7a9b      	ldrb	r3, [r3, #10]
 800cccc:	f003 0301 	and.w	r3, r3, #1
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d014      	beq.n	800ccfe <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	4619      	mov	r1, r3
 800ccda:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ccde:	f7fd f8a5 	bl	8009e2c <tcp_eff_send_mss_impl>
 800cce2:	4603      	mov	r3, r0
 800cce4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cce6:	8b7b      	ldrh	r3, [r7, #26]
 800cce8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fa fbe1 	bl	80074b4 <lwip_htonl>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	da02      	bge.n	800cd0e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10c      	bne.n	800cd30 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800cd16:	4b26      	ldr	r3, [pc, #152]	; (800cdb0 <tcp_output_segment+0x13c>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fa fbc5 	bl	80074b4 <lwip_htonl>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	461a      	mov	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	8959      	ldrh	r1, [r3, #10]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	8b3a      	ldrh	r2, [r7, #24]
 800cd4c:	1a8a      	subs	r2, r1, r2
 800cd4e:	b292      	uxth	r2, r2
 800cd50:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	8919      	ldrh	r1, [r3, #8]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	8b3a      	ldrh	r2, [r7, #24]
 800cd5e:	1a8a      	subs	r2, r1, r2
 800cd60:	b292      	uxth	r2, r2
 800cd62:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	68d2      	ldr	r2, [r2, #12]
 800cd6c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	741a      	strb	r2, [r3, #16]
 800cd76:	2200      	movs	r2, #0
 800cd78:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6858      	ldr	r0, [r3, #4]
 800cd7e:	68b9      	ldr	r1, [r7, #8]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	1d1c      	adds	r4, r3, #4
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	7a9d      	ldrb	r5, [r3, #10]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	7a5b      	ldrb	r3, [r3, #9]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	9202      	str	r2, [sp, #8]
 800cd90:	2206      	movs	r2, #6
 800cd92:	9201      	str	r2, [sp, #4]
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	462b      	mov	r3, r5
 800cd98:	4622      	mov	r2, r4
 800cd9a:	f004 f80d 	bl	8010db8 <ip4_output_if>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800cda2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3720      	adds	r7, #32
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bdb0      	pop	{r4, r5, r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	200038ec 	.word	0x200038ec

0800cdb4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b08c      	sub	sp, #48	; 0x30
 800cdb8:	af04      	add	r7, sp, #16
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2114      	movs	r1, #20
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	f7fb f8fc 	bl	8007fc4 <pbuf_alloc>
 800cdcc:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d05b      	beq.n	800ce8c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	895b      	ldrh	r3, [r3, #10]
 800cdd8:	2b13      	cmp	r3, #19
 800cdda:	d806      	bhi.n	800cdea <tcp_rst+0x36>
 800cddc:	4b2d      	ldr	r3, [pc, #180]	; (800ce94 <tcp_rst+0xe0>)
 800cdde:	f240 524d 	movw	r2, #1357	; 0x54d
 800cde2:	492d      	ldr	r1, [pc, #180]	; (800ce98 <tcp_rst+0xe4>)
 800cde4:	482d      	ldr	r0, [pc, #180]	; (800ce9c <tcp_rst+0xe8>)
 800cde6:	f006 fedd 	bl	8013ba4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800cdf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fa fb50 	bl	8007498 <lwip_htons>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800ce00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fa fb48 	bl	8007498 <lwip_htons>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7fa fb4f 	bl	80074b4 <lwip_htonl>
 800ce16:	4602      	mov	r2, r0
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800ce1c:	68b8      	ldr	r0, [r7, #8]
 800ce1e:	f7fa fb49 	bl	80074b4 <lwip_htonl>
 800ce22:	4602      	mov	r2, r0
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ce28:	f245 0014 	movw	r0, #20500	; 0x5014
 800ce2c:	f7fa fb34 	bl	8007498 <lwip_htons>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461a      	mov	r2, r3
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f042 0208 	orr.w	r2, r2, #8
 800ce40:	739a      	strb	r2, [r3, #14]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ce48:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	741a      	strb	r2, [r3, #16]
 800ce50:	2200      	movs	r2, #0
 800ce52:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	2200      	movs	r2, #0
 800ce58:	749a      	strb	r2, [r3, #18]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800ce5e:	6838      	ldr	r0, [r7, #0]
 800ce60:	f003 fde4 	bl	8010a2c <ip4_route>
 800ce64:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00b      	beq.n	800ce84 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	9302      	str	r3, [sp, #8]
 800ce70:	2306      	movs	r3, #6
 800ce72:	9301      	str	r3, [sp, #4]
 800ce74:	2300      	movs	r3, #0
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	23ff      	movs	r3, #255	; 0xff
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	6879      	ldr	r1, [r7, #4]
 800ce7e:	69f8      	ldr	r0, [r7, #28]
 800ce80:	f003 ff9a 	bl	8010db8 <ip4_output_if>
  }
  pbuf_free(p);
 800ce84:	69f8      	ldr	r0, [r7, #28]
 800ce86:	f7fb fc0f 	bl	80086a8 <pbuf_free>
 800ce8a:	e000      	b.n	800ce8e <tcp_rst+0xda>
    return;
 800ce8c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ce8e:	3720      	adds	r7, #32
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	08015908 	.word	0x08015908
 800ce98:	0801593c 	.word	0x0801593c
 800ce9c:	0801596c 	.word	0x0801596c

0800cea0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d029      	beq.n	800cf04 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceb4:	60fb      	str	r3, [r7, #12]
 800ceb6:	e002      	b.n	800cebe <tcp_rexmit_rto+0x1e>
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	60fb      	str	r3, [r7, #12]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1f8      	bne.n	800ceb8 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cee2:	2bff      	cmp	r3, #255	; 0xff
 800cee4:	d007      	beq.n	800cef6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ceec:	3301      	adds	r3, #1
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff fccf 	bl	800c8a0 <tcp_output>
 800cf02:	e000      	b.n	800cf06 <tcp_rexmit_rto+0x66>
    return;
 800cf04:	bf00      	nop
}
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cf0c:	b590      	push	{r4, r7, lr}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d043      	beq.n	800cfa4 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf20:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3368      	adds	r3, #104	; 0x68
 800cf2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf30:	e002      	b.n	800cf38 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d011      	beq.n	800cf64 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fa fab3 	bl	80074b4 <lwip_htonl>
 800cf4e:	4604      	mov	r4, r0
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fa faac 	bl	80074b4 <lwip_htonl>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dbe6      	blt.n	800cf32 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d103      	bne.n	800cf82 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf88:	2bff      	cmp	r3, #255	; 0xff
 800cf8a:	d007      	beq.n	800cf9c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf92:	3301      	adds	r3, #1
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	635a      	str	r2, [r3, #52]	; 0x34
 800cfa2:	e000      	b.n	800cfa6 <tcp_rexmit+0x9a>
    return;
 800cfa4:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd90      	pop	{r4, r7, pc}

0800cfac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d04a      	beq.n	800d052 <tcp_rexmit_fast+0xa6>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7e9b      	ldrb	r3, [r3, #26]
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d144      	bne.n	800d052 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7ff ff9f 	bl	800cf0c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d207      	bcs.n	800cfee <tcp_rexmit_fast+0x42>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cfe4:	0fda      	lsrs	r2, r3, #31
 800cfe6:	4413      	add	r3, r2
 800cfe8:	105b      	asrs	r3, r3, #1
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	e006      	b.n	800cffc <tcp_rexmit_fast+0x50>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cff4:	0fda      	lsrs	r2, r3, #31
 800cff6:	4413      	add	r3, r2
 800cff8:	105b      	asrs	r3, r3, #1
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d008:	461a      	mov	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	429a      	cmp	r2, r3
 800d012:	d206      	bcs.n	800d022 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d02c:	4619      	mov	r1, r3
 800d02e:	0049      	lsls	r1, r1, #1
 800d030:	440b      	add	r3, r1
 800d032:	b29b      	uxth	r3, r3
 800d034:	4413      	add	r3, r2
 800d036:	b29a      	uxth	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	7e9b      	ldrb	r3, [r3, #26]
 800d042:	f043 0304 	orr.w	r3, r3, #4
 800d046:	b2da      	uxtb	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800d052:	bf00      	nop
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b08a      	sub	sp, #40	; 0x28
 800d05e:	af04      	add	r7, sp, #16
 800d060:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d066:	3b01      	subs	r3, #1
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fa fa23 	bl	80074b4 <lwip_htonl>
 800d06e:	4603      	mov	r3, r0
 800d070:	2200      	movs	r2, #0
 800d072:	2100      	movs	r1, #0
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff f977 	bl	800c368 <tcp_output_alloc_header>
 800d07a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d102      	bne.n	800d088 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d086:	e021      	b.n	800d0cc <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	3304      	adds	r3, #4
 800d08c:	4618      	mov	r0, r3
 800d08e:	f003 fccd 	bl	8010a2c <ip4_route>
 800d092:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d102      	bne.n	800d0a0 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800d09a:	23fc      	movs	r3, #252	; 0xfc
 800d09c:	75fb      	strb	r3, [r7, #23]
 800d09e:	e010      	b.n	800d0c2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800d0a0:	6879      	ldr	r1, [r7, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	1d1a      	adds	r2, r3, #4
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	7a98      	ldrb	r0, [r3, #10]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	9302      	str	r3, [sp, #8]
 800d0ae:	2306      	movs	r3, #6
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	6938      	ldr	r0, [r7, #16]
 800d0ba:	f003 fe7d 	bl	8010db8 <ip4_output_if>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d0c2:	6938      	ldr	r0, [r7, #16]
 800d0c4:	f7fb faf0 	bl	80086a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d0c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d0d4:	b590      	push	{r4, r7, lr}
 800d0d6:	b08f      	sub	sp, #60	; 0x3c
 800d0d8:	af04      	add	r7, sp, #16
 800d0da:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0e0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800d0e2:	6a3b      	ldr	r3, [r7, #32]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d102      	bne.n	800d0ee <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0ec:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e085      	b.n	800d204 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	899b      	ldrh	r3, [r3, #12]
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	4618      	mov	r0, r3
 800d102:	f7fa f9c9 	bl	8007498 <lwip_htons>
 800d106:	4603      	mov	r3, r0
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d005      	beq.n	800d11c <tcp_zero_window_probe+0x48>
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	891b      	ldrh	r3, [r3, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <tcp_zero_window_probe+0x48>
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <tcp_zero_window_probe+0x4a>
 800d11c:	2300      	movs	r3, #0
 800d11e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d120:	7ffb      	ldrb	r3, [r7, #31]
 800d122:	2b00      	cmp	r3, #0
 800d124:	bf0c      	ite	eq
 800d126:	2301      	moveq	r3, #1
 800d128:	2300      	movne	r3, #0
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	8bba      	ldrh	r2, [r7, #28]
 800d136:	2100      	movs	r1, #0
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7ff f915 	bl	800c368 <tcp_output_alloc_header>
 800d13e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d102      	bne.n	800d14c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d14a:	e05b      	b.n	800d204 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d152:	7ffb      	ldrb	r3, [r7, #31]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00e      	beq.n	800d176 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	899b      	ldrh	r3, [r3, #12]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d162:	b29c      	uxth	r4, r3
 800d164:	2011      	movs	r0, #17
 800d166:	f7fa f997 	bl	8007498 <lwip_htons>
 800d16a:	4603      	mov	r3, r0
 800d16c:	4323      	orrs	r3, r4
 800d16e:	b29a      	uxth	r2, r3
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	819a      	strh	r2, [r3, #12]
 800d174:	e010      	b.n	800d198 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	3314      	adds	r3, #20
 800d17c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	6858      	ldr	r0, [r3, #4]
 800d182:	6a3b      	ldr	r3, [r7, #32]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	891a      	ldrh	r2, [r3, #8]
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	891b      	ldrh	r3, [r3, #8]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	b29b      	uxth	r3, r3
 800d190:	2201      	movs	r2, #1
 800d192:	6939      	ldr	r1, [r7, #16]
 800d194:	f7fb fc88 	bl	8008aa8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fa f988 	bl	80074b4 <lwip_htonl>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	da02      	bge.n	800d1bc <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	3304      	adds	r3, #4
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f003 fc33 	bl	8010a2c <ip4_route>
 800d1c6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d103      	bne.n	800d1d6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800d1ce:	23fc      	movs	r3, #252	; 0xfc
 800d1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1d4:	e011      	b.n	800d1fa <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d1d6:	6879      	ldr	r1, [r7, #4]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	1d1a      	adds	r2, r3, #4
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	7a98      	ldrb	r0, [r3, #10]
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	9302      	str	r3, [sp, #8]
 800d1e4:	2306      	movs	r3, #6
 800d1e6:	9301      	str	r3, [sp, #4]
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	69b8      	ldr	r0, [r7, #24]
 800d1f0:	f003 fde2 	bl	8010db8 <ip4_output_if>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800d1fa:	69b8      	ldr	r0, [r7, #24]
 800d1fc:	f7fb fa54 	bl	80086a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d200:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d204:	4618      	mov	r0, r3
 800d206:	372c      	adds	r7, #44	; 0x2c
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd90      	pop	{r4, r7, pc}

0800d20c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d214:	f7fb fcca 	bl	8008bac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d218:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <tcpip_tcp_timer+0x38>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d103      	bne.n	800d228 <tcpip_tcp_timer+0x1c>
 800d220:	4b09      	ldr	r3, [pc, #36]	; (800d248 <tcpip_tcp_timer+0x3c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d005      	beq.n	800d234 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d228:	2200      	movs	r2, #0
 800d22a:	4908      	ldr	r1, [pc, #32]	; (800d24c <tcpip_tcp_timer+0x40>)
 800d22c:	20fa      	movs	r0, #250	; 0xfa
 800d22e:	f000 f86f 	bl	800d310 <sys_timeout>
 800d232:	e002      	b.n	800d23a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d234:	4b06      	ldr	r3, [pc, #24]	; (800d250 <tcpip_tcp_timer+0x44>)
 800d236:	2200      	movs	r2, #0
 800d238:	601a      	str	r2, [r3, #0]
  }
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	200038e8 	.word	0x200038e8
 800d248:	200038f8 	.word	0x200038f8
 800d24c:	0800d20d 	.word	0x0800d20d
 800d250:	2000027c 	.word	0x2000027c

0800d254 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <tcp_timer_needed+0x30>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10f      	bne.n	800d280 <tcp_timer_needed+0x2c>
 800d260:	4b09      	ldr	r3, [pc, #36]	; (800d288 <tcp_timer_needed+0x34>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d103      	bne.n	800d270 <tcp_timer_needed+0x1c>
 800d268:	4b08      	ldr	r3, [pc, #32]	; (800d28c <tcp_timer_needed+0x38>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d007      	beq.n	800d280 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d270:	4b04      	ldr	r3, [pc, #16]	; (800d284 <tcp_timer_needed+0x30>)
 800d272:	2201      	movs	r2, #1
 800d274:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d276:	2200      	movs	r2, #0
 800d278:	4905      	ldr	r1, [pc, #20]	; (800d290 <tcp_timer_needed+0x3c>)
 800d27a:	20fa      	movs	r0, #250	; 0xfa
 800d27c:	f000 f848 	bl	800d310 <sys_timeout>
  }
}
 800d280:	bf00      	nop
 800d282:	bd80      	pop	{r7, pc}
 800d284:	2000027c 	.word	0x2000027c
 800d288:	200038e8 	.word	0x200038e8
 800d28c:	200038f8 	.word	0x200038f8
 800d290:	0800d20d 	.word	0x0800d20d

0800d294 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	4903      	ldr	r1, [pc, #12]	; (800d2bc <cyclic_timer+0x28>)
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 f82e 	bl	800d310 <sys_timeout>
}
 800d2b4:	bf00      	nop
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	0800d295 	.word	0x0800d295

0800d2c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	607b      	str	r3, [r7, #4]
 800d2ca:	e00e      	b.n	800d2ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800d2cc:	4a0d      	ldr	r2, [pc, #52]	; (800d304 <sys_timeouts_init+0x44>)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	4a0a      	ldr	r2, [pc, #40]	; (800d304 <sys_timeouts_init+0x44>)
 800d2da:	4413      	add	r3, r2
 800d2dc:	461a      	mov	r2, r3
 800d2de:	490a      	ldr	r1, [pc, #40]	; (800d308 <sys_timeouts_init+0x48>)
 800d2e0:	f000 f816 	bl	800d310 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	607b      	str	r3, [r7, #4]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b04      	cmp	r3, #4
 800d2ee:	d9ed      	bls.n	800d2cc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800d2f0:	f004 ff56 	bl	80121a0 <sys_now>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	4b05      	ldr	r3, [pc, #20]	; (800d30c <sys_timeouts_init+0x4c>)
 800d2f8:	601a      	str	r2, [r3, #0]
}
 800d2fa:	bf00      	nop
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	08016b48 	.word	0x08016b48
 800d308:	0800d295 	.word	0x0800d295
 800d30c:	20000278 	.word	0x20000278

0800d310 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b088      	sub	sp, #32
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d31c:	2006      	movs	r0, #6
 800d31e:	f7fa fc69 	bl	8007bf4 <memp_malloc>
 800d322:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10a      	bne.n	800d340 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f040 8084 	bne.w	800d43a <sys_timeout+0x12a>
 800d332:	4b44      	ldr	r3, [pc, #272]	; (800d444 <sys_timeout+0x134>)
 800d334:	22d4      	movs	r2, #212	; 0xd4
 800d336:	4944      	ldr	r1, [pc, #272]	; (800d448 <sys_timeout+0x138>)
 800d338:	4844      	ldr	r0, [pc, #272]	; (800d44c <sys_timeout+0x13c>)
 800d33a:	f006 fc33 	bl	8013ba4 <iprintf>
    return;
 800d33e:	e07c      	b.n	800d43a <sys_timeout+0x12a>
  }

  now = sys_now();
 800d340:	f004 ff2e 	bl	80121a0 <sys_now>
 800d344:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800d346:	4b42      	ldr	r3, [pc, #264]	; (800d450 <sys_timeout+0x140>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d105      	bne.n	800d35a <sys_timeout+0x4a>
    diff = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800d352:	4a40      	ldr	r2, [pc, #256]	; (800d454 <sys_timeout+0x144>)
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	e004      	b.n	800d364 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800d35a:	4b3e      	ldr	r3, [pc, #248]	; (800d454 <sys_timeout+0x144>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	2200      	movs	r2, #0
 800d368:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	441a      	add	r2, r3
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d380:	4b33      	ldr	r3, [pc, #204]	; (800d450 <sys_timeout+0x140>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d103      	bne.n	800d390 <sys_timeout+0x80>
    next_timeout = timeout;
 800d388:	4a31      	ldr	r2, [pc, #196]	; (800d450 <sys_timeout+0x140>)
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	6013      	str	r3, [r2, #0]
    return;
 800d38e:	e055      	b.n	800d43c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800d390:	4b2f      	ldr	r3, [pc, #188]	; (800d450 <sys_timeout+0x140>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d20f      	bcs.n	800d3bc <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800d39c:	4b2c      	ldr	r3, [pc, #176]	; (800d450 <sys_timeout+0x140>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6859      	ldr	r1, [r3, #4]
 800d3a2:	4b2b      	ldr	r3, [pc, #172]	; (800d450 <sys_timeout+0x140>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	1a8a      	subs	r2, r1, r2
 800d3aa:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800d3ac:	4b28      	ldr	r3, [pc, #160]	; (800d450 <sys_timeout+0x140>)
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d3b4:	4a26      	ldr	r2, [pc, #152]	; (800d450 <sys_timeout+0x140>)
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	e03f      	b.n	800d43c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d3bc:	4b24      	ldr	r3, [pc, #144]	; (800d450 <sys_timeout+0x140>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	61fb      	str	r3, [r7, #28]
 800d3c2:	e036      	b.n	800d432 <sys_timeout+0x122>
      timeout->time -= t->time;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	685a      	ldr	r2, [r3, #4]
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	1ad2      	subs	r2, r2, r3
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d006      	beq.n	800d3e8 <sys_timeout+0xd8>
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d921      	bls.n	800d42c <sys_timeout+0x11c>
        if (t->next != NULL) {
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d009      	beq.n	800d404 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6859      	ldr	r1, [r3, #4]
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	1a8a      	subs	r2, r1, r2
 800d400:	605a      	str	r2, [r3, #4]
 800d402:	e00b      	b.n	800d41c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d206      	bcs.n	800d41c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800d40e:	4b10      	ldr	r3, [pc, #64]	; (800d450 <sys_timeout+0x140>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	685a      	ldr	r2, [r3, #4]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	441a      	add	r2, r3
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	697a      	ldr	r2, [r7, #20]
 800d428:	601a      	str	r2, [r3, #0]
        break;
 800d42a:	e007      	b.n	800d43c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	61fb      	str	r3, [r7, #28]
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1c5      	bne.n	800d3c4 <sys_timeout+0xb4>
 800d438:	e000      	b.n	800d43c <sys_timeout+0x12c>
    return;
 800d43a:	bf00      	nop
      }
    }
  }
}
 800d43c:	3720      	adds	r7, #32
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	08015d4c 	.word	0x08015d4c
 800d448:	08015d80 	.word	0x08015d80
 800d44c:	08015dc0 	.word	0x08015dc0
 800d450:	20000274 	.word	0x20000274
 800d454:	20000278 	.word	0x20000278

0800d458 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d458:	b480      	push	{r7}
 800d45a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d45c:	bf00      	nop
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
	...

0800d468 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d472:	4b17      	ldr	r3, [pc, #92]	; (800d4d0 <udp_new_port+0x68>)
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	1c5a      	adds	r2, r3, #1
 800d478:	b291      	uxth	r1, r2
 800d47a:	4a15      	ldr	r2, [pc, #84]	; (800d4d0 <udp_new_port+0x68>)
 800d47c:	8011      	strh	r1, [r2, #0]
 800d47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d482:	4293      	cmp	r3, r2
 800d484:	d103      	bne.n	800d48e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d486:	4b12      	ldr	r3, [pc, #72]	; (800d4d0 <udp_new_port+0x68>)
 800d488:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d48c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d48e:	4b11      	ldr	r3, [pc, #68]	; (800d4d4 <udp_new_port+0x6c>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	603b      	str	r3, [r7, #0]
 800d494:	e011      	b.n	800d4ba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	8a5a      	ldrh	r2, [r3, #18]
 800d49a:	4b0d      	ldr	r3, [pc, #52]	; (800d4d0 <udp_new_port+0x68>)
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d108      	bne.n	800d4b4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d4a2:	88fb      	ldrh	r3, [r7, #6]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	80fb      	strh	r3, [r7, #6]
 800d4a8:	88fb      	ldrh	r3, [r7, #6]
 800d4aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4ae:	d3e0      	bcc.n	800d472 <udp_new_port+0xa>
        return 0;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	e007      	b.n	800d4c4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	603b      	str	r3, [r7, #0]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1ea      	bne.n	800d496 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d4c0:	4b03      	ldr	r3, [pc, #12]	; (800d4d0 <udp_new_port+0x68>)
 800d4c2:	881b      	ldrh	r3, [r3, #0]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	2000011c 	.word	0x2000011c
 800d4d4:	20003900 	.word	0x20003900

0800d4d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d4e6:	79fb      	ldrb	r3, [r7, #7]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d018      	beq.n	800d51e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d013      	beq.n	800d51a <udp_input_local_match+0x42>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00f      	beq.n	800d51a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d4fa:	4b14      	ldr	r3, [pc, #80]	; (800d54c <udp_input_local_match+0x74>)
 800d4fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d502:	d00a      	beq.n	800d51a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	4b10      	ldr	r3, [pc, #64]	; (800d54c <udp_input_local_match+0x74>)
 800d50a:	695b      	ldr	r3, [r3, #20]
 800d50c:	405a      	eors	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	3308      	adds	r3, #8
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d516:	2b00      	cmp	r3, #0
 800d518:	d110      	bne.n	800d53c <udp_input_local_match+0x64>
          return 1;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e00f      	b.n	800d53e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d009      	beq.n	800d538 <udp_input_local_match+0x60>
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d005      	beq.n	800d538 <udp_input_local_match+0x60>
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	4b06      	ldr	r3, [pc, #24]	; (800d54c <udp_input_local_match+0x74>)
 800d532:	695b      	ldr	r3, [r3, #20]
 800d534:	429a      	cmp	r2, r3
 800d536:	d101      	bne.n	800d53c <udp_input_local_match+0x64>
      return 1;
 800d538:	2301      	movs	r3, #1
 800d53a:	e000      	b.n	800d53e <udp_input_local_match+0x66>
    }
  }

  return 0;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	20000398 	.word	0x20000398

0800d550 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b08d      	sub	sp, #52	; 0x34
 800d554:	af02      	add	r7, sp, #8
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	895b      	ldrh	r3, [r3, #10]
 800d562:	2b07      	cmp	r3, #7
 800d564:	d803      	bhi.n	800d56e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7fb f89e 	bl	80086a8 <pbuf_free>
    goto end;
 800d56c:	e0c6      	b.n	800d6fc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d574:	4b63      	ldr	r3, [pc, #396]	; (800d704 <udp_input+0x1b4>)
 800d576:	695a      	ldr	r2, [r3, #20]
 800d578:	4b62      	ldr	r3, [pc, #392]	; (800d704 <udp_input+0x1b4>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f003 fcec 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 800d584:	4603      	mov	r3, r0
 800d586:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	4618      	mov	r0, r3
 800d590:	f7f9 ff82 	bl	8007498 <lwip_htons>
 800d594:	4603      	mov	r3, r0
 800d596:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	885b      	ldrh	r3, [r3, #2]
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7f9 ff7a 	bl	8007498 <lwip_htons>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5b4:	4b54      	ldr	r3, [pc, #336]	; (800d708 <udp_input+0x1b8>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d5ba:	e03b      	b.n	800d634 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5be:	8a5b      	ldrh	r3, [r3, #18]
 800d5c0:	89fa      	ldrh	r2, [r7, #14]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d131      	bne.n	800d62a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d5c6:	7cfb      	ldrb	r3, [r7, #19]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	6839      	ldr	r1, [r7, #0]
 800d5cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5ce:	f7ff ff83 	bl	800d4d8 <udp_input_local_match>
 800d5d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d028      	beq.n	800d62a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	7c1b      	ldrb	r3, [r3, #16]
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d104      	bne.n	800d5ee <udp_input+0x9e>
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	8a9b      	ldrh	r3, [r3, #20]
 800d5f2:	8a3a      	ldrh	r2, [r7, #16]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d118      	bne.n	800d62a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fa:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d005      	beq.n	800d60c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	4b3f      	ldr	r3, [pc, #252]	; (800d704 <udp_input+0x1b4>)
 800d606:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d608:	429a      	cmp	r2, r3
 800d60a:	d10e      	bne.n	800d62a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d014      	beq.n	800d63c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d614:	68da      	ldr	r2, [r3, #12]
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d61a:	4b3b      	ldr	r3, [pc, #236]	; (800d708 <udp_input+0x1b8>)
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d622:	4a39      	ldr	r2, [pc, #228]	; (800d708 <udp_input+0x1b8>)
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d628:	e008      	b.n	800d63c <udp_input+0xec>
      }
    }

    prev = pcb;
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	627b      	str	r3, [r7, #36]	; 0x24
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1c0      	bne.n	800d5bc <udp_input+0x6c>
 800d63a:	e000      	b.n	800d63e <udp_input+0xee>
        break;
 800d63c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <udp_input+0xf8>
    pcb = uncon_pcb;
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d002      	beq.n	800d654 <udp_input+0x104>
    for_us = 1;
 800d64e:	2301      	movs	r3, #1
 800d650:	76fb      	strb	r3, [r7, #27]
 800d652:	e00a      	b.n	800d66a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	3304      	adds	r3, #4
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	4b2a      	ldr	r3, [pc, #168]	; (800d704 <udp_input+0x1b4>)
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	429a      	cmp	r2, r3
 800d660:	bf0c      	ite	eq
 800d662:	2301      	moveq	r3, #1
 800d664:	2300      	movne	r3, #0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d66a:	7efb      	ldrb	r3, [r7, #27]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d042      	beq.n	800d6f6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800d670:	f06f 0107 	mvn.w	r1, #7
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7fa fff3 	bl	8008660 <pbuf_header>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00a      	beq.n	800d696 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800d680:	4b22      	ldr	r3, [pc, #136]	; (800d70c <udp_input+0x1bc>)
 800d682:	f240 1255 	movw	r2, #341	; 0x155
 800d686:	4922      	ldr	r1, [pc, #136]	; (800d710 <udp_input+0x1c0>)
 800d688:	4822      	ldr	r0, [pc, #136]	; (800d714 <udp_input+0x1c4>)
 800d68a:	f006 fa8b 	bl	8013ba4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7fb f80a 	bl	80086a8 <pbuf_free>
      goto end;
 800d694:	e032      	b.n	800d6fc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800d696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d012      	beq.n	800d6c2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00a      	beq.n	800d6ba <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	699c      	ldr	r4, [r3, #24]
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	69d8      	ldr	r0, [r3, #28]
 800d6ac:	8a3b      	ldrh	r3, [r7, #16]
 800d6ae:	9300      	str	r3, [sp, #0]
 800d6b0:	4b19      	ldr	r3, [pc, #100]	; (800d718 <udp_input+0x1c8>)
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d6b8:	e021      	b.n	800d6fe <udp_input+0x1ae>
        pbuf_free(p);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f7fa fff4 	bl	80086a8 <pbuf_free>
        goto end;
 800d6c0:	e01c      	b.n	800d6fc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d6c2:	7cfb      	ldrb	r3, [r7, #19]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d112      	bne.n	800d6ee <udp_input+0x19e>
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	; (800d704 <udp_input+0x1b4>)
 800d6ca:	695b      	ldr	r3, [r3, #20]
 800d6cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6d0:	2be0      	cmp	r3, #224	; 0xe0
 800d6d2:	d00c      	beq.n	800d6ee <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d6d4:	4b0b      	ldr	r3, [pc, #44]	; (800d704 <udp_input+0x1b4>)
 800d6d6:	899b      	ldrh	r3, [r3, #12]
 800d6d8:	3308      	adds	r3, #8
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	b21b      	sxth	r3, r3
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7fa ffcf 	bl	8008684 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d6e6:	2103      	movs	r1, #3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f003 f917 	bl	801091c <icmp_dest_unreach>
      pbuf_free(p);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7fa ffda 	bl	80086a8 <pbuf_free>
  return;
 800d6f4:	e003      	b.n	800d6fe <udp_input+0x1ae>
    pbuf_free(p);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7fa ffd6 	bl	80086a8 <pbuf_free>
  return;
 800d6fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d6fe:	372c      	adds	r7, #44	; 0x2c
 800d700:	46bd      	mov	sp, r7
 800d702:	bd90      	pop	{r4, r7, pc}
 800d704:	20000398 	.word	0x20000398
 800d708:	20003900 	.word	0x20003900
 800d70c:	08015de8 	.word	0x08015de8
 800d710:	08015e18 	.word	0x08015e18
 800d714:	08015e2c 	.word	0x08015e2c
 800d718:	200003a8 	.word	0x200003a8

0800d71c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af02      	add	r7, sp, #8
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <udp_sendto_if+0x1a>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d102      	bne.n	800d73c <udp_sendto_if+0x20>
    return ERR_VAL;
 800d736:	f06f 0305 	mvn.w	r3, #5
 800d73a:	e028      	b.n	800d78e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <udp_sendto_if+0x3a>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d005      	beq.n	800d756 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d752:	2be0      	cmp	r3, #224	; 0xe0
 800d754:	d103      	bne.n	800d75e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	3304      	adds	r3, #4
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	e00b      	b.n	800d776 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	3304      	adds	r3, #4
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d002      	beq.n	800d772 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800d76c:	f06f 0303 	mvn.w	r3, #3
 800d770:	e00d      	b.n	800d78e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d776:	887a      	ldrh	r2, [r7, #2]
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	9301      	str	r3, [sp, #4]
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	4613      	mov	r3, r2
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	68b9      	ldr	r1, [r7, #8]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f806 	bl	800d798 <udp_sendto_if_src>
 800d78c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
	...

0800d798 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b08c      	sub	sp, #48	; 0x30
 800d79c:	af04      	add	r7, sp, #16
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
 800d7a4:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <udp_sendto_if_src+0x1a>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d102      	bne.n	800d7b8 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800d7b2:	f06f 0305 	mvn.w	r3, #5
 800d7b6:	e07e      	b.n	800d8b6 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	8a5b      	ldrh	r3, [r3, #18]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10f      	bne.n	800d7e0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d7c0:	68f9      	ldr	r1, [r7, #12]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	8a5b      	ldrh	r3, [r3, #18]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f000 f87f 	bl	800d8cc <udp_bind>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d7d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d7da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d7de:	e06a      	b.n	800d8b6 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800d7e0:	2108      	movs	r1, #8
 800d7e2:	68b8      	ldr	r0, [r7, #8]
 800d7e4:	f7fa ff3c 	bl	8008660 <pbuf_header>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d014      	beq.n	800d818 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2108      	movs	r1, #8
 800d7f2:	2001      	movs	r0, #1
 800d7f4:	f7fa fbe6 	bl	8007fc4 <pbuf_alloc>
 800d7f8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d102      	bne.n	800d806 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d804:	e057      	b.n	800d8b6 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	891b      	ldrh	r3, [r3, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d006      	beq.n	800d81c <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	69f8      	ldr	r0, [r7, #28]
 800d812:	f7fb f86d 	bl	80088f0 <pbuf_chain>
 800d816:	e001      	b.n	800d81c <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	895b      	ldrh	r3, [r3, #10]
 800d820:	2b07      	cmp	r3, #7
 800d822:	d806      	bhi.n	800d832 <udp_sendto_if_src+0x9a>
 800d824:	4b26      	ldr	r3, [pc, #152]	; (800d8c0 <udp_sendto_if_src+0x128>)
 800d826:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d82a:	4926      	ldr	r1, [pc, #152]	; (800d8c4 <udp_sendto_if_src+0x12c>)
 800d82c:	4826      	ldr	r0, [pc, #152]	; (800d8c8 <udp_sendto_if_src+0x130>)
 800d82e:	f006 f9b9 	bl	8013ba4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	8a5b      	ldrh	r3, [r3, #18]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7f9 fe2b 	bl	8007498 <lwip_htons>
 800d842:	4603      	mov	r3, r0
 800d844:	461a      	mov	r2, r3
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d84a:	887b      	ldrh	r3, [r7, #2]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f9 fe23 	bl	8007498 <lwip_htons>
 800d852:	4603      	mov	r3, r0
 800d854:	461a      	mov	r2, r3
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2200      	movs	r2, #0
 800d85e:	719a      	strb	r2, [r3, #6]
 800d860:	2200      	movs	r2, #0
 800d862:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	891b      	ldrh	r3, [r3, #8]
 800d868:	4618      	mov	r0, r3
 800d86a:	f7f9 fe15 	bl	8007498 <lwip_htons>
 800d86e:	4603      	mov	r3, r0
 800d870:	461a      	mov	r2, r3
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d876:	2311      	movs	r3, #17
 800d878:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	7a9b      	ldrb	r3, [r3, #10]
 800d87e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	7a5b      	ldrb	r3, [r3, #9]
 800d884:	7cb9      	ldrb	r1, [r7, #18]
 800d886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d888:	9202      	str	r2, [sp, #8]
 800d88a:	7cfa      	ldrb	r2, [r7, #19]
 800d88c:	9201      	str	r2, [sp, #4]
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	460b      	mov	r3, r1
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d896:	69f8      	ldr	r0, [r7, #28]
 800d898:	f003 fab8 	bl	8010e0c <ip4_output_if_src>
 800d89c:	4603      	mov	r3, r0
 800d89e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d8a0:	69fa      	ldr	r2, [r7, #28]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d004      	beq.n	800d8b2 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800d8a8:	69f8      	ldr	r0, [r7, #28]
 800d8aa:	f7fa fefd 	bl	80086a8 <pbuf_free>
    q = NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d8b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	08015de8 	.word	0x08015de8
 800d8c4:	08015e54 	.word	0x08015e54
 800d8c8:	08015e2c 	.word	0x08015e2c

0800d8cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d101      	bne.n	800d8e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d8e0:	4b30      	ldr	r3, [pc, #192]	; (800d9a4 <udp_bind+0xd8>)
 800d8e2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d002      	beq.n	800d8f0 <udp_bind+0x24>
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d102      	bne.n	800d8f6 <udp_bind+0x2a>
    return ERR_VAL;
 800d8f0:	f06f 0305 	mvn.w	r3, #5
 800d8f4:	e052      	b.n	800d99c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d8fa:	4b2b      	ldr	r3, [pc, #172]	; (800d9a8 <udp_bind+0xdc>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	617b      	str	r3, [r7, #20]
 800d900:	e009      	b.n	800d916 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	429a      	cmp	r2, r3
 800d908:	d102      	bne.n	800d910 <udp_bind+0x44>
      rebind = 1;
 800d90a:	2301      	movs	r3, #1
 800d90c:	74fb      	strb	r3, [r7, #19]
      break;
 800d90e:	e005      	b.n	800d91c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	617b      	str	r3, [r7, #20]
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1f2      	bne.n	800d902 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d91c:	88fb      	ldrh	r3, [r7, #6]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d109      	bne.n	800d936 <udp_bind+0x6a>
    port = udp_new_port();
 800d922:	f7ff fda1 	bl	800d468 <udp_new_port>
 800d926:	4603      	mov	r3, r0
 800d928:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d92a:	88fb      	ldrh	r3, [r7, #6]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d11e      	bne.n	800d96e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d930:	f06f 0307 	mvn.w	r3, #7
 800d934:	e032      	b.n	800d99c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d936:	4b1c      	ldr	r3, [pc, #112]	; (800d9a8 <udp_bind+0xdc>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	617b      	str	r3, [r7, #20]
 800d93c:	e014      	b.n	800d968 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	429a      	cmp	r2, r3
 800d944:	d00d      	beq.n	800d962 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	8a5b      	ldrh	r3, [r3, #18]
 800d94a:	88fa      	ldrh	r2, [r7, #6]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d108      	bne.n	800d962 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d958:	429a      	cmp	r2, r3
 800d95a:	d102      	bne.n	800d962 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d95c:	f06f 0307 	mvn.w	r3, #7
 800d960:	e01c      	b.n	800d99c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	617b      	str	r3, [r7, #20]
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1e7      	bne.n	800d93e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <udp_bind+0xae>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	e000      	b.n	800d97c <udp_bind+0xb0>
 800d97a:	2300      	movs	r3, #0
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	88fa      	ldrh	r2, [r7, #6]
 800d984:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d986:	7cfb      	ldrb	r3, [r7, #19]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d98c:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <udp_bind+0xdc>)
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d994:	4a04      	ldr	r2, [pc, #16]	; (800d9a8 <udp_bind+0xdc>)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3718      	adds	r7, #24
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	08016b70 	.word	0x08016b70
 800d9a8:	20003900 	.word	0x20003900

0800d9ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b086      	sub	sp, #24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d002      	beq.n	800d9c6 <udp_connect+0x1a>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <udp_connect+0x20>
    return ERR_VAL;
 800d9c6:	f06f 0305 	mvn.w	r3, #5
 800d9ca:	e03e      	b.n	800da4a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	8a5b      	ldrh	r3, [r3, #18]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10f      	bne.n	800d9f4 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d9d4:	68f9      	ldr	r1, [r7, #12]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	8a5b      	ldrh	r3, [r3, #18]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f7ff ff75 	bl	800d8cc <udp_bind>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d002      	beq.n	800d9f4 <udp_connect+0x48>
      return err;
 800d9ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9f2:	e02a      	b.n	800da4a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d002      	beq.n	800da00 <udp_connect+0x54>
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	e000      	b.n	800da02 <udp_connect+0x56>
 800da00:	2300      	movs	r3, #0
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	88fa      	ldrh	r2, [r7, #6]
 800da0a:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	7c1b      	ldrb	r3, [r3, #16]
 800da10:	f043 0304 	orr.w	r3, r3, #4
 800da14:	b2da      	uxtb	r2, r3
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800da1a:	4b0e      	ldr	r3, [pc, #56]	; (800da54 <udp_connect+0xa8>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	e008      	b.n	800da34 <udp_connect+0x88>
    if (pcb == ipcb) {
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	429a      	cmp	r2, r3
 800da28:	d101      	bne.n	800da2e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	e00d      	b.n	800da4a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	617b      	str	r3, [r7, #20]
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1f3      	bne.n	800da22 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800da3a:	4b06      	ldr	r3, [pc, #24]	; (800da54 <udp_connect+0xa8>)
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800da42:	4a04      	ldr	r2, [pc, #16]	; (800da54 <udp_connect+0xa8>)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3718      	adds	r7, #24
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	20003900 	.word	0x20003900

0800da58 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	61da      	str	r2, [r3, #28]
}
 800da70:	bf00      	nop
 800da72:	3714      	adds	r7, #20
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800da84:	4b15      	ldr	r3, [pc, #84]	; (800dadc <udp_remove+0x60>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d105      	bne.n	800da9a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800da8e:	4b13      	ldr	r3, [pc, #76]	; (800dadc <udp_remove+0x60>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	4a11      	ldr	r2, [pc, #68]	; (800dadc <udp_remove+0x60>)
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	e017      	b.n	800daca <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800da9a:	4b10      	ldr	r3, [pc, #64]	; (800dadc <udp_remove+0x60>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	e010      	b.n	800dac4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d009      	beq.n	800dabe <udp_remove+0x42>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d104      	bne.n	800dabe <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68da      	ldr	r2, [r3, #12]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	60da      	str	r2, [r3, #12]
        break;
 800dabc:	e005      	b.n	800daca <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1eb      	bne.n	800daa2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	2000      	movs	r0, #0
 800dace:	f7fa f8dd 	bl	8007c8c <memp_free>
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20003900 	.word	0x20003900

0800dae0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dae6:	2000      	movs	r0, #0
 800dae8:	f7fa f884 	bl	8007bf4 <memp_malloc>
 800daec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d007      	beq.n	800db04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800daf4:	2220      	movs	r2, #32
 800daf6:	2100      	movs	r1, #0
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f005 ffa3 	bl	8013a44 <memset>
    pcb->ttl = UDP_TTL;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	22ff      	movs	r2, #255	; 0xff
 800db02:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800db04:	687b      	ldr	r3, [r7, #4]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d01e      	beq.n	800db5e <udp_netif_ip_addr_changed+0x4e>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01a      	beq.n	800db5e <udp_netif_ip_addr_changed+0x4e>
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d017      	beq.n	800db5e <udp_netif_ip_addr_changed+0x4e>
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d013      	beq.n	800db5e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db36:	4b0d      	ldr	r3, [pc, #52]	; (800db6c <udp_netif_ip_addr_changed+0x5c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	60fb      	str	r3, [r7, #12]
 800db3c:	e00c      	b.n	800db58 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	429a      	cmp	r2, r3
 800db48:	d103      	bne.n	800db52 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1ef      	bne.n	800db3e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800db5e:	bf00      	nop
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	20003900 	.word	0x20003900

0800db70 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800db74:	4b20      	ldr	r3, [pc, #128]	; (800dbf8 <dhcp_inc_pcb_refcount+0x88>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d133      	bne.n	800dbe4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800db7c:	4b1f      	ldr	r3, [pc, #124]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d005      	beq.n	800db90 <dhcp_inc_pcb_refcount+0x20>
 800db84:	4b1e      	ldr	r3, [pc, #120]	; (800dc00 <dhcp_inc_pcb_refcount+0x90>)
 800db86:	22d9      	movs	r2, #217	; 0xd9
 800db88:	491e      	ldr	r1, [pc, #120]	; (800dc04 <dhcp_inc_pcb_refcount+0x94>)
 800db8a:	481f      	ldr	r0, [pc, #124]	; (800dc08 <dhcp_inc_pcb_refcount+0x98>)
 800db8c:	f006 f80a 	bl	8013ba4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800db90:	f7ff ffa6 	bl	800dae0 <udp_new>
 800db94:	4602      	mov	r2, r0
 800db96:	4b19      	ldr	r3, [pc, #100]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800db98:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800db9a:	4b18      	ldr	r3, [pc, #96]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800dba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dba6:	e024      	b.n	800dbf2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800dba8:	4b14      	ldr	r3, [pc, #80]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	7a1a      	ldrb	r2, [r3, #8]
 800dbae:	4b13      	ldr	r3, [pc, #76]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f042 0220 	orr.w	r2, r2, #32
 800dbb6:	b2d2      	uxtb	r2, r2
 800dbb8:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800dbba:	4b10      	ldr	r3, [pc, #64]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2244      	movs	r2, #68	; 0x44
 800dbc0:	4912      	ldr	r1, [pc, #72]	; (800dc0c <dhcp_inc_pcb_refcount+0x9c>)
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff fe82 	bl	800d8cc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800dbc8:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2243      	movs	r2, #67	; 0x43
 800dbce:	490f      	ldr	r1, [pc, #60]	; (800dc0c <dhcp_inc_pcb_refcount+0x9c>)
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7ff feeb 	bl	800d9ac <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800dbd6:	4b09      	ldr	r3, [pc, #36]	; (800dbfc <dhcp_inc_pcb_refcount+0x8c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	490c      	ldr	r1, [pc, #48]	; (800dc10 <dhcp_inc_pcb_refcount+0xa0>)
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff ff3a 	bl	800da58 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800dbe4:	4b04      	ldr	r3, [pc, #16]	; (800dbf8 <dhcp_inc_pcb_refcount+0x88>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	4b02      	ldr	r3, [pc, #8]	; (800dbf8 <dhcp_inc_pcb_refcount+0x88>)
 800dbee:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20000284 	.word	0x20000284
 800dbfc:	20000280 	.word	0x20000280
 800dc00:	08015e84 	.word	0x08015e84
 800dc04:	08015ebc 	.word	0x08015ebc
 800dc08:	08015ee4 	.word	0x08015ee4
 800dc0c:	08016b70 	.word	0x08016b70
 800dc10:	0800f2cd 	.word	0x0800f2cd

0800dc14 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800dc18:	4b0e      	ldr	r3, [pc, #56]	; (800dc54 <dhcp_dec_pcb_refcount+0x40>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d105      	bne.n	800dc2c <dhcp_dec_pcb_refcount+0x18>
 800dc20:	4b0d      	ldr	r3, [pc, #52]	; (800dc58 <dhcp_dec_pcb_refcount+0x44>)
 800dc22:	22f3      	movs	r2, #243	; 0xf3
 800dc24:	490d      	ldr	r1, [pc, #52]	; (800dc5c <dhcp_dec_pcb_refcount+0x48>)
 800dc26:	480e      	ldr	r0, [pc, #56]	; (800dc60 <dhcp_dec_pcb_refcount+0x4c>)
 800dc28:	f005 ffbc 	bl	8013ba4 <iprintf>
  dhcp_pcb_refcount--;
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <dhcp_dec_pcb_refcount+0x40>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	4b07      	ldr	r3, [pc, #28]	; (800dc54 <dhcp_dec_pcb_refcount+0x40>)
 800dc36:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800dc38:	4b06      	ldr	r3, [pc, #24]	; (800dc54 <dhcp_dec_pcb_refcount+0x40>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d107      	bne.n	800dc50 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800dc40:	4b08      	ldr	r3, [pc, #32]	; (800dc64 <dhcp_dec_pcb_refcount+0x50>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7ff ff19 	bl	800da7c <udp_remove>
    dhcp_pcb = NULL;
 800dc4a:	4b06      	ldr	r3, [pc, #24]	; (800dc64 <dhcp_dec_pcb_refcount+0x50>)
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
  }
}
 800dc50:	bf00      	nop
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	20000284 	.word	0x20000284
 800dc58:	08015e84 	.word	0x08015e84
 800dc5c:	08015f0c 	.word	0x08015f0c
 800dc60:	08015ee4 	.word	0x08015ee4
 800dc64:	20000280 	.word	0x20000280

0800dc68 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a1b      	ldr	r3, [r3, #32]
 800dc74:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800dc76:	210c      	movs	r1, #12
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f000 ff85 	bl	800eb88 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800dc7e:	4b06      	ldr	r3, [pc, #24]	; (800dc98 <dhcp_handle_nak+0x30>)
 800dc80:	4a05      	ldr	r2, [pc, #20]	; (800dc98 <dhcp_handle_nak+0x30>)
 800dc82:	4905      	ldr	r1, [pc, #20]	; (800dc98 <dhcp_handle_nak+0x30>)
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7fa f88f 	bl	8007da8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fbb6 	bl	800e3fc <dhcp_discover>
}
 800dc90:	bf00      	nop
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	08016b70 	.word	0x08016b70

0800dc9c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a1b      	ldr	r3, [r3, #32]
 800dca8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800dcaa:	2108      	movs	r1, #8
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f000 ff6b 	bl	800eb88 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	3328      	adds	r3, #40	; 0x28
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	4619      	mov	r1, r3
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f002 fb1e 	bl	80102fc <etharp_query>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	7a9b      	ldrb	r3, [r3, #10]
 800dcc8:	2bff      	cmp	r3, #255	; 0xff
 800dcca:	d005      	beq.n	800dcd8 <dhcp_check+0x3c>
    dhcp->tries++;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	7a9b      	ldrb	r3, [r3, #10]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800dcd8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800dcdc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800dcde:	893b      	ldrh	r3, [r7, #8]
 800dce0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dce4:	4a06      	ldr	r2, [pc, #24]	; (800dd00 <dhcp_check+0x64>)
 800dce6:	fb82 1203 	smull	r1, r2, r2, r3
 800dcea:	1152      	asrs	r2, r2, #5
 800dcec:	17db      	asrs	r3, r3, #31
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800dcf6:	bf00      	nop
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	10624dd3 	.word	0x10624dd3

0800dd04 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6a1b      	ldr	r3, [r3, #32]
 800dd10:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800dd12:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <dhcp_handle_offer+0x40>)
 800dd14:	789b      	ldrb	r3, [r3, #2]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00f      	beq.n	800dd3a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <dhcp_handle_offer+0x44>)
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f9 fbc8 	bl	80074b4 <lwip_htonl>
 800dd24:	4602      	mov	r2, r0
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	691a      	ldr	r2, [r3, #16]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f809 	bl	800dd4c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	20003904 	.word	0x20003904
 800dd48:	2000390c 	.word	0x2000390c

0800dd4c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b088      	sub	sp, #32
 800dd50:	af02      	add	r7, sp, #8
 800dd52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a1b      	ldr	r3, [r3, #32]
 800dd58:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	6938      	ldr	r0, [r7, #16]
 800dd5e:	f000 ff13 	bl	800eb88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800dd62:	2203      	movs	r2, #3
 800dd64:	6939      	ldr	r1, [r7, #16]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f001 fb94 	bl	800f494 <dhcp_create_msg>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800dd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d159      	bne.n	800de2c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800dd78:	2202      	movs	r2, #2
 800dd7a:	2139      	movs	r1, #57	; 0x39
 800dd7c:	6938      	ldr	r0, [r7, #16]
 800dd7e:	f000 ff1d 	bl	800ebbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd86:	4619      	mov	r1, r3
 800dd88:	6938      	ldr	r0, [r7, #16]
 800dd8a:	f000 ff79 	bl	800ec80 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800dd8e:	2204      	movs	r2, #4
 800dd90:	2132      	movs	r1, #50	; 0x32
 800dd92:	6938      	ldr	r0, [r7, #16]
 800dd94:	f000 ff12 	bl	800ebbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7f9 fb89 	bl	80074b4 <lwip_htonl>
 800dda2:	4603      	mov	r3, r0
 800dda4:	4619      	mov	r1, r3
 800dda6:	6938      	ldr	r0, [r7, #16]
 800dda8:	f000 ffa4 	bl	800ecf4 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800ddac:	2204      	movs	r2, #4
 800ddae:	2136      	movs	r1, #54	; 0x36
 800ddb0:	6938      	ldr	r0, [r7, #16]
 800ddb2:	f000 ff03 	bl	800ebbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7f9 fb7a 	bl	80074b4 <lwip_htonl>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	6938      	ldr	r0, [r7, #16]
 800ddc6:	f000 ff95 	bl	800ecf4 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ddca:	2203      	movs	r2, #3
 800ddcc:	2137      	movs	r1, #55	; 0x37
 800ddce:	6938      	ldr	r0, [r7, #16]
 800ddd0:	f000 fef4 	bl	800ebbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	75fb      	strb	r3, [r7, #23]
 800ddd8:	e009      	b.n	800ddee <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
 800dddc:	4a29      	ldr	r2, [pc, #164]	; (800de84 <dhcp_select+0x138>)
 800ddde:	5cd3      	ldrb	r3, [r2, r3]
 800dde0:	4619      	mov	r1, r3
 800dde2:	6938      	ldr	r0, [r7, #16]
 800dde4:	f000 ff24 	bl	800ec30 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	3301      	adds	r3, #1
 800ddec:	75fb      	strb	r3, [r7, #23]
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d9f2      	bls.n	800ddda <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800ddf4:	6938      	ldr	r0, [r7, #16]
 800ddf6:	f001 fcf1 	bl	800f7dc <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	68da      	ldr	r2, [r3, #12]
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	8a9b      	ldrh	r3, [r3, #20]
 800de02:	33f0      	adds	r3, #240	; 0xf0
 800de04:	b29b      	uxth	r3, r3
 800de06:	4619      	mov	r1, r3
 800de08:	4610      	mov	r0, r2
 800de0a:	f7fa fad9 	bl	80083c0 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800de0e:	4b1e      	ldr	r3, [pc, #120]	; (800de88 <dhcp_select+0x13c>)
 800de10:	6818      	ldr	r0, [r3, #0]
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	68d9      	ldr	r1, [r3, #12]
 800de16:	4b1d      	ldr	r3, [pc, #116]	; (800de8c <dhcp_select+0x140>)
 800de18:	9301      	str	r3, [sp, #4]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	2343      	movs	r3, #67	; 0x43
 800de20:	4a1b      	ldr	r2, [pc, #108]	; (800de90 <dhcp_select+0x144>)
 800de22:	f7ff fcb9 	bl	800d798 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800de26:	6938      	ldr	r0, [r7, #16]
 800de28:	f001 fc96 	bl	800f758 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	7a9b      	ldrb	r3, [r3, #10]
 800de30:	2bff      	cmp	r3, #255	; 0xff
 800de32:	d005      	beq.n	800de40 <dhcp_select+0xf4>
    dhcp->tries++;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	7a9b      	ldrb	r3, [r3, #10]
 800de38:	3301      	adds	r3, #1
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	7a9b      	ldrb	r3, [r3, #10]
 800de44:	2b05      	cmp	r3, #5
 800de46:	d807      	bhi.n	800de58 <dhcp_select+0x10c>
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	7a9b      	ldrb	r3, [r3, #10]
 800de4c:	461a      	mov	r2, r3
 800de4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de52:	4093      	lsls	r3, r2
 800de54:	b29b      	uxth	r3, r3
 800de56:	e001      	b.n	800de5c <dhcp_select+0x110>
 800de58:	f64e 2360 	movw	r3, #60000	; 0xea60
 800de5c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800de5e:	89bb      	ldrh	r3, [r7, #12]
 800de60:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800de64:	4a0b      	ldr	r2, [pc, #44]	; (800de94 <dhcp_select+0x148>)
 800de66:	fb82 1203 	smull	r1, r2, r2, r3
 800de6a:	1152      	asrs	r2, r2, #5
 800de6c:	17db      	asrs	r3, r3, #31
 800de6e:	1ad3      	subs	r3, r2, r3
 800de70:	b29a      	uxth	r2, r3
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800de76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3718      	adds	r7, #24
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20000120 	.word	0x20000120
 800de88:	20000280 	.word	0x20000280
 800de8c:	08016b70 	.word	0x08016b70
 800de90:	08016b74 	.word	0x08016b74
 800de94:	10624dd3 	.word	0x10624dd3

0800de98 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800de9e:	4b27      	ldr	r3, [pc, #156]	; (800df3c <dhcp_coarse_tmr+0xa4>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800dea4:	e042      	b.n	800df2c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d039      	beq.n	800df26 <dhcp_coarse_tmr+0x8e>
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	7a5b      	ldrb	r3, [r3, #9]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d035      	beq.n	800df26 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d012      	beq.n	800dee8 <dhcp_coarse_tmr+0x50>
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	8c1b      	ldrh	r3, [r3, #32]
 800dec6:	3301      	adds	r3, #1
 800dec8:	b29a      	uxth	r2, r3
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	841a      	strh	r2, [r3, #32]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	8c1a      	ldrh	r2, [r3, #32]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d106      	bne.n	800dee8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fd94 	bl	800ea08 <dhcp_release>
        dhcp_discover(netif);
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fa8b 	bl	800e3fc <dhcp_discover>
 800dee6:	e01e      	b.n	800df26 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	8bdb      	ldrh	r3, [r3, #30]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00b      	beq.n	800df08 <dhcp_coarse_tmr+0x70>
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	8bdb      	ldrh	r3, [r3, #30]
 800def4:	1e5a      	subs	r2, r3, #1
 800def6:	b291      	uxth	r1, r2
 800def8:	683a      	ldr	r2, [r7, #0]
 800defa:	83d1      	strh	r1, [r2, #30]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d103      	bne.n	800df08 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 f8c6 	bl	800e092 <dhcp_t2_timeout>
 800df06:	e00e      	b.n	800df26 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	8b9b      	ldrh	r3, [r3, #28]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00a      	beq.n	800df26 <dhcp_coarse_tmr+0x8e>
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	8b9b      	ldrh	r3, [r3, #28]
 800df14:	1e5a      	subs	r2, r3, #1
 800df16:	b291      	uxth	r1, r2
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	8391      	strh	r1, [r2, #28]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d102      	bne.n	800df26 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 f888 	bl	800e036 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1b9      	bne.n	800dea6 <dhcp_coarse_tmr+0xe>
  }
}
 800df32:	bf00      	nop
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	200038d8 	.word	0x200038d8

0800df40 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800df46:	4b16      	ldr	r3, [pc, #88]	; (800dfa0 <dhcp_fine_tmr+0x60>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800df4c:	e020      	b.n	800df90 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a1b      	ldr	r3, [r3, #32]
 800df52:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d017      	beq.n	800df8a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	8adb      	ldrh	r3, [r3, #22]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d906      	bls.n	800df70 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	8adb      	ldrh	r3, [r3, #22]
 800df66:	3b01      	subs	r3, #1
 800df68:	b29a      	uxth	r2, r3
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	82da      	strh	r2, [r3, #22]
 800df6e:	e00c      	b.n	800df8a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	8adb      	ldrh	r3, [r3, #22]
 800df74:	2b01      	cmp	r3, #1
 800df76:	d108      	bne.n	800df8a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	8adb      	ldrh	r3, [r3, #22]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	b29a      	uxth	r2, r3
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 f80d 	bl	800dfa4 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1db      	bne.n	800df4e <dhcp_fine_tmr+0xe>
  }
}
 800df96:	bf00      	nop
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	200038d8 	.word	0x200038d8

0800dfa4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a1b      	ldr	r3, [r3, #32]
 800dfb0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	7a5b      	ldrb	r3, [r3, #9]
 800dfb6:	2b0c      	cmp	r3, #12
 800dfb8:	d003      	beq.n	800dfc2 <dhcp_timeout+0x1e>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	7a5b      	ldrb	r3, [r3, #9]
 800dfbe:	2b06      	cmp	r3, #6
 800dfc0:	d103      	bne.n	800dfca <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fa1a 	bl	800e3fc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800dfc8:	e031      	b.n	800e02e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	7a5b      	ldrb	r3, [r3, #9]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d10e      	bne.n	800dff0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	7a9b      	ldrb	r3, [r3, #10]
 800dfd6:	2b05      	cmp	r3, #5
 800dfd8:	d803      	bhi.n	800dfe2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7ff feb6 	bl	800dd4c <dhcp_select>
}
 800dfe0:	e025      	b.n	800e02e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fd10 	bl	800ea08 <dhcp_release>
      dhcp_discover(netif);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fa07 	bl	800e3fc <dhcp_discover>
}
 800dfee:	e01e      	b.n	800e02e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	7a5b      	ldrb	r3, [r3, #9]
 800dff4:	2b08      	cmp	r3, #8
 800dff6:	d10b      	bne.n	800e010 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	7a9b      	ldrb	r3, [r3, #10]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d803      	bhi.n	800e008 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7ff fe4b 	bl	800dc9c <dhcp_check>
}
 800e006:	e012      	b.n	800e02e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fa83 	bl	800e514 <dhcp_bind>
}
 800e00e:	e00e      	b.n	800e02e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	7a5b      	ldrb	r3, [r3, #9]
 800e014:	2b03      	cmp	r3, #3
 800e016:	d10a      	bne.n	800e02e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	7a9b      	ldrb	r3, [r3, #10]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d803      	bhi.n	800e028 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 fc5d 	bl	800e8e0 <dhcp_reboot>
}
 800e026:	e002      	b.n	800e02e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 f9e7 	bl	800e3fc <dhcp_discover>
}
 800e02e:	bf00      	nop
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a1b      	ldr	r3, [r3, #32]
 800e042:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	7a5b      	ldrb	r3, [r3, #9]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d007      	beq.n	800e05c <dhcp_t1_timeout+0x26>
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	7a5b      	ldrb	r3, [r3, #9]
 800e050:	2b0a      	cmp	r3, #10
 800e052:	d003      	beq.n	800e05c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e058:	2b05      	cmp	r3, #5
 800e05a:	d116      	bne.n	800e08a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f000 fb33 	bl	800e6c8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	8b5b      	ldrh	r3, [r3, #26]
 800e066:	461a      	mov	r2, r3
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	8c1b      	ldrh	r3, [r3, #32]
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	2b01      	cmp	r3, #1
 800e070:	dd0b      	ble.n	800e08a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	8b5b      	ldrh	r3, [r3, #26]
 800e076:	461a      	mov	r2, r3
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	8c1b      	ldrh	r3, [r3, #32]
 800e07c:	1ad3      	subs	r3, r2, r3
 800e07e:	0fda      	lsrs	r2, r3, #31
 800e080:	4413      	add	r3, r2
 800e082:	105b      	asrs	r3, r3, #1
 800e084:	b29a      	uxth	r2, r3
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800e08a:	bf00      	nop
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b084      	sub	sp, #16
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	7a5b      	ldrb	r3, [r3, #9]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d00b      	beq.n	800e0c0 <dhcp_t2_timeout+0x2e>
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	7a5b      	ldrb	r3, [r3, #9]
 800e0ac:	2b0a      	cmp	r3, #10
 800e0ae:	d007      	beq.n	800e0c0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e0b4:	2b05      	cmp	r3, #5
 800e0b6:	d003      	beq.n	800e0c0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	7a5b      	ldrb	r3, [r3, #9]
 800e0bc:	2b04      	cmp	r3, #4
 800e0be:	d116      	bne.n	800e0ee <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 fb87 	bl	800e7d4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	8c1b      	ldrh	r3, [r3, #32]
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	dd0b      	ble.n	800e0ee <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e0da:	461a      	mov	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	8c1b      	ldrh	r3, [r3, #32]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	0fda      	lsrs	r2, r3, #31
 800e0e4:	4413      	add	r3, r2
 800e0e6:	105b      	asrs	r3, r3, #1
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800e0ee:	bf00      	nop
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
	...

0800e0f8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6a1b      	ldr	r3, [r3, #32]
 800e104:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e112:	4b27      	ldr	r3, [pc, #156]	; (800e1b0 <dhcp_handle_ack+0xb8>)
 800e114:	78db      	ldrb	r3, [r3, #3]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d003      	beq.n	800e122 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e11a:	4b26      	ldr	r3, [pc, #152]	; (800e1b4 <dhcp_handle_ack+0xbc>)
 800e11c:	68da      	ldr	r2, [r3, #12]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e122:	4b23      	ldr	r3, [pc, #140]	; (800e1b0 <dhcp_handle_ack+0xb8>)
 800e124:	791b      	ldrb	r3, [r3, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d004      	beq.n	800e134 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e12a:	4b22      	ldr	r3, [pc, #136]	; (800e1b4 <dhcp_handle_ack+0xbc>)
 800e12c:	691a      	ldr	r2, [r3, #16]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	639a      	str	r2, [r3, #56]	; 0x38
 800e132:	e004      	b.n	800e13e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e138:	085a      	lsrs	r2, r3, #1
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e13e:	4b1c      	ldr	r3, [pc, #112]	; (800e1b0 <dhcp_handle_ack+0xb8>)
 800e140:	795b      	ldrb	r3, [r3, #5]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d004      	beq.n	800e150 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e146:	4b1b      	ldr	r3, [pc, #108]	; (800e1b4 <dhcp_handle_ack+0xbc>)
 800e148:	695a      	ldr	r2, [r3, #20]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	63da      	str	r2, [r3, #60]	; 0x3c
 800e14e:	e007      	b.n	800e160 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e154:	4613      	mov	r3, r2
 800e156:	00db      	lsls	r3, r3, #3
 800e158:	1a9b      	subs	r3, r3, r2
 800e15a:	08da      	lsrs	r2, r3, #3
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	691a      	ldr	r2, [r3, #16]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e16a:	4b11      	ldr	r3, [pc, #68]	; (800e1b0 <dhcp_handle_ack+0xb8>)
 800e16c:	799b      	ldrb	r3, [r3, #6]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e172:	4b10      	ldr	r3, [pc, #64]	; (800e1b4 <dhcp_handle_ack+0xbc>)
 800e174:	699b      	ldr	r3, [r3, #24]
 800e176:	4618      	mov	r0, r3
 800e178:	f7f9 f99c 	bl	80074b4 <lwip_htonl>
 800e17c:	4602      	mov	r2, r0
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2201      	movs	r2, #1
 800e186:	72da      	strb	r2, [r3, #11]
 800e188:	e002      	b.n	800e190 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2200      	movs	r2, #0
 800e18e:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e190:	4b07      	ldr	r3, [pc, #28]	; (800e1b0 <dhcp_handle_ack+0xb8>)
 800e192:	79db      	ldrb	r3, [r3, #7]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d007      	beq.n	800e1a8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800e198:	4b06      	ldr	r3, [pc, #24]	; (800e1b4 <dhcp_handle_ack+0xbc>)
 800e19a:	69db      	ldr	r3, [r3, #28]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7f9 f989 	bl	80074b4 <lwip_htonl>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800e1a8:	bf00      	nop
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	20003904 	.word	0x20003904
 800e1b4:	2000390c 	.word	0x2000390c

0800e1b8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d109      	bne.n	800e1da <dhcp_start+0x22>
 800e1c6:	4b3c      	ldr	r3, [pc, #240]	; (800e2b8 <dhcp_start+0x100>)
 800e1c8:	f240 22d6 	movw	r2, #726	; 0x2d6
 800e1cc:	493b      	ldr	r1, [pc, #236]	; (800e2bc <dhcp_start+0x104>)
 800e1ce:	483c      	ldr	r0, [pc, #240]	; (800e2c0 <dhcp_start+0x108>)
 800e1d0:	f005 fce8 	bl	8013ba4 <iprintf>
 800e1d4:	f06f 030f 	mvn.w	r3, #15
 800e1d8:	e069      	b.n	800e2ae <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d109      	bne.n	800e1fc <dhcp_start+0x44>
 800e1e8:	4b33      	ldr	r3, [pc, #204]	; (800e2b8 <dhcp_start+0x100>)
 800e1ea:	f240 22d7 	movw	r2, #727	; 0x2d7
 800e1ee:	4935      	ldr	r1, [pc, #212]	; (800e2c4 <dhcp_start+0x10c>)
 800e1f0:	4833      	ldr	r0, [pc, #204]	; (800e2c0 <dhcp_start+0x108>)
 800e1f2:	f005 fcd7 	bl	8013ba4 <iprintf>
 800e1f6:	f06f 030f 	mvn.w	r3, #15
 800e1fa:	e058      	b.n	800e2ae <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e206:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e20a:	d202      	bcs.n	800e212 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800e20c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e210:	e04d      	b.n	800e2ae <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10d      	bne.n	800e234 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e218:	2040      	movs	r0, #64	; 0x40
 800e21a:	f7f9 fb8d 	bl	8007938 <mem_malloc>
 800e21e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d102      	bne.n	800e22c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800e226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e22a:	e040      	b.n	800e2ae <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	621a      	str	r2, [r3, #32]
 800e232:	e01b      	b.n	800e26c <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d006      	beq.n	800e24a <dhcp_start+0x92>
 800e23c:	4b1e      	ldr	r3, [pc, #120]	; (800e2b8 <dhcp_start+0x100>)
 800e23e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800e242:	4921      	ldr	r1, [pc, #132]	; (800e2c8 <dhcp_start+0x110>)
 800e244:	481e      	ldr	r0, [pc, #120]	; (800e2c0 <dhcp_start+0x108>)
 800e246:	f005 fcad 	bl	8013ba4 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d006      	beq.n	800e260 <dhcp_start+0xa8>
 800e252:	4b19      	ldr	r3, [pc, #100]	; (800e2b8 <dhcp_start+0x100>)
 800e254:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e258:	491c      	ldr	r1, [pc, #112]	; (800e2cc <dhcp_start+0x114>)
 800e25a:	4819      	ldr	r0, [pc, #100]	; (800e2c0 <dhcp_start+0x108>)
 800e25c:	f005 fca2 	bl	8013ba4 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	7a1b      	ldrb	r3, [r3, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e268:	f7ff fcd4 	bl	800dc14 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800e26c:	2240      	movs	r2, #64	; 0x40
 800e26e:	2100      	movs	r1, #0
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f005 fbe7 	bl	8013a44 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e276:	f7ff fc7b 	bl	800db70 <dhcp_inc_pcb_refcount>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d002      	beq.n	800e286 <dhcp_start+0xce>
    return ERR_MEM;
 800e280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e284:	e013      	b.n	800e2ae <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2201      	movs	r2, #1
 800e28a:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f8b5 	bl	800e3fc <dhcp_discover>
 800e292:	4603      	mov	r3, r0
 800e294:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800e296:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d005      	beq.n	800e2aa <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fc3a 	bl	800eb18 <dhcp_stop>
    return ERR_MEM;
 800e2a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2a8:	e001      	b.n	800e2ae <dhcp_start+0xf6>
  }
  return result;
 800e2aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	08015e84 	.word	0x08015e84
 800e2bc:	08015f30 	.word	0x08015f30
 800e2c0:	08015ee4 	.word	0x08015ee4
 800e2c4:	08015f74 	.word	0x08015f74
 800e2c8:	08015f98 	.word	0x08015f98
 800e2cc:	08015fb0 	.word	0x08015fb0

0800e2d0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d107      	bne.n	800e2f0 <dhcp_arp_reply+0x20>
 800e2e0:	4b0e      	ldr	r3, [pc, #56]	; (800e31c <dhcp_arp_reply+0x4c>)
 800e2e2:	f240 327b 	movw	r2, #891	; 0x37b
 800e2e6:	490e      	ldr	r1, [pc, #56]	; (800e320 <dhcp_arp_reply+0x50>)
 800e2e8:	480e      	ldr	r0, [pc, #56]	; (800e324 <dhcp_arp_reply+0x54>)
 800e2ea:	f005 fc5b 	bl	8013ba4 <iprintf>
 800e2ee:	e012      	b.n	800e316 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6a1b      	ldr	r3, [r3, #32]
 800e2f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00c      	beq.n	800e316 <dhcp_arp_reply+0x46>
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	7a5b      	ldrb	r3, [r3, #9]
 800e300:	2b08      	cmp	r3, #8
 800e302:	d108      	bne.n	800e316 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d102      	bne.n	800e316 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 f809 	bl	800e328 <dhcp_decline>
    }
  }
}
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	08015e84 	.word	0x08015e84
 800e320:	08015f30 	.word	0x08015f30
 800e324:	08015ee4 	.word	0x08015ee4

0800e328 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af02      	add	r7, sp, #8
 800e32e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e33a:	210c      	movs	r1, #12
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 fc23 	bl	800eb88 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800e342:	2204      	movs	r2, #4
 800e344:	68f9      	ldr	r1, [r7, #12]
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f001 f8a4 	bl	800f494 <dhcp_create_msg>
 800e34c:	4603      	mov	r3, r0
 800e34e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800e350:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d12a      	bne.n	800e3ae <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800e358:	2204      	movs	r2, #4
 800e35a:	2132      	movs	r1, #50	; 0x32
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f000 fc2d 	bl	800ebbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e366:	4618      	mov	r0, r3
 800e368:	f7f9 f8a4 	bl	80074b4 <lwip_htonl>
 800e36c:	4603      	mov	r3, r0
 800e36e:	4619      	mov	r1, r3
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 fcbf 	bl	800ecf4 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f001 fa30 	bl	800f7dc <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	68da      	ldr	r2, [r3, #12]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	8a9b      	ldrh	r3, [r3, #20]
 800e384:	33f0      	adds	r3, #240	; 0xf0
 800e386:	b29b      	uxth	r3, r3
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f7fa f818 	bl	80083c0 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800e390:	4b16      	ldr	r3, [pc, #88]	; (800e3ec <dhcp_decline+0xc4>)
 800e392:	6818      	ldr	r0, [r3, #0]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	68d9      	ldr	r1, [r3, #12]
 800e398:	4b15      	ldr	r3, [pc, #84]	; (800e3f0 <dhcp_decline+0xc8>)
 800e39a:	9301      	str	r3, [sp, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	2343      	movs	r3, #67	; 0x43
 800e3a2:	4a14      	ldr	r2, [pc, #80]	; (800e3f4 <dhcp_decline+0xcc>)
 800e3a4:	f7ff f9f8 	bl	800d798 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f001 f9d5 	bl	800f758 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	7a9b      	ldrb	r3, [r3, #10]
 800e3b2:	2bff      	cmp	r3, #255	; 0xff
 800e3b4:	d005      	beq.n	800e3c2 <dhcp_decline+0x9a>
    dhcp->tries++;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	7a9b      	ldrb	r3, [r3, #10]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800e3c2:	f242 7310 	movw	r3, #10000	; 0x2710
 800e3c6:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e3c8:	893b      	ldrh	r3, [r7, #8]
 800e3ca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e3ce:	4a0a      	ldr	r2, [pc, #40]	; (800e3f8 <dhcp_decline+0xd0>)
 800e3d0:	fb82 1203 	smull	r1, r2, r2, r3
 800e3d4:	1152      	asrs	r2, r2, #5
 800e3d6:	17db      	asrs	r3, r3, #31
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e3e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20000280 	.word	0x20000280
 800e3f0:	08016b70 	.word	0x08016b70
 800e3f4:	08016b74 	.word	0x08016b74
 800e3f8:	10624dd3 	.word	0x10624dd3

0800e3fc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af02      	add	r7, sp, #8
 800e402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a1b      	ldr	r3, [r3, #32]
 800e408:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	2200      	movs	r2, #0
 800e412:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800e414:	2106      	movs	r1, #6
 800e416:	6938      	ldr	r0, [r7, #16]
 800e418:	f000 fbb6 	bl	800eb88 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800e41c:	2201      	movs	r2, #1
 800e41e:	6939      	ldr	r1, [r7, #16]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 f837 	bl	800f494 <dhcp_create_msg>
 800e426:	4603      	mov	r3, r0
 800e428:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800e42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d13b      	bne.n	800e4aa <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e432:	2202      	movs	r2, #2
 800e434:	2139      	movs	r1, #57	; 0x39
 800e436:	6938      	ldr	r0, [r7, #16]
 800e438:	f000 fbc0 	bl	800ebbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e440:	4619      	mov	r1, r3
 800e442:	6938      	ldr	r0, [r7, #16]
 800e444:	f000 fc1c 	bl	800ec80 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e448:	2203      	movs	r2, #3
 800e44a:	2137      	movs	r1, #55	; 0x37
 800e44c:	6938      	ldr	r0, [r7, #16]
 800e44e:	f000 fbb5 	bl	800ebbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e452:	2300      	movs	r3, #0
 800e454:	75fb      	strb	r3, [r7, #23]
 800e456:	e009      	b.n	800e46c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e458:	7dfb      	ldrb	r3, [r7, #23]
 800e45a:	4a29      	ldr	r2, [pc, #164]	; (800e500 <dhcp_discover+0x104>)
 800e45c:	5cd3      	ldrb	r3, [r2, r3]
 800e45e:	4619      	mov	r1, r3
 800e460:	6938      	ldr	r0, [r7, #16]
 800e462:	f000 fbe5 	bl	800ec30 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e466:	7dfb      	ldrb	r3, [r7, #23]
 800e468:	3301      	adds	r3, #1
 800e46a:	75fb      	strb	r3, [r7, #23]
 800e46c:	7dfb      	ldrb	r3, [r7, #23]
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d9f2      	bls.n	800e458 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800e472:	6938      	ldr	r0, [r7, #16]
 800e474:	f001 f9b2 	bl	800f7dc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	68da      	ldr	r2, [r3, #12]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	8a9b      	ldrh	r3, [r3, #20]
 800e480:	33f0      	adds	r3, #240	; 0xf0
 800e482:	b29b      	uxth	r3, r3
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f7f9 ff9a 	bl	80083c0 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800e48c:	4b1d      	ldr	r3, [pc, #116]	; (800e504 <dhcp_discover+0x108>)
 800e48e:	6818      	ldr	r0, [r3, #0]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	68d9      	ldr	r1, [r3, #12]
 800e494:	4b1c      	ldr	r3, [pc, #112]	; (800e508 <dhcp_discover+0x10c>)
 800e496:	9301      	str	r3, [sp, #4]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	9300      	str	r3, [sp, #0]
 800e49c:	2343      	movs	r3, #67	; 0x43
 800e49e:	4a1b      	ldr	r2, [pc, #108]	; (800e50c <dhcp_discover+0x110>)
 800e4a0:	f7ff f97a 	bl	800d798 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800e4a4:	6938      	ldr	r0, [r7, #16]
 800e4a6:	f001 f957 	bl	800f758 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	7a9b      	ldrb	r3, [r3, #10]
 800e4ae:	2bff      	cmp	r3, #255	; 0xff
 800e4b0:	d005      	beq.n	800e4be <dhcp_discover+0xc2>
    dhcp->tries++;
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	7a9b      	ldrb	r3, [r3, #10]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	7a9b      	ldrb	r3, [r3, #10]
 800e4c2:	2b05      	cmp	r3, #5
 800e4c4:	d807      	bhi.n	800e4d6 <dhcp_discover+0xda>
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	7a9b      	ldrb	r3, [r3, #10]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e4d0:	4093      	lsls	r3, r2
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	e001      	b.n	800e4da <dhcp_discover+0xde>
 800e4d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e4da:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e4dc:	89bb      	ldrh	r3, [r7, #12]
 800e4de:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e4e2:	4a0b      	ldr	r2, [pc, #44]	; (800e510 <dhcp_discover+0x114>)
 800e4e4:	fb82 1203 	smull	r1, r2, r2, r3
 800e4e8:	1152      	asrs	r2, r2, #5
 800e4ea:	17db      	asrs	r3, r3, #31
 800e4ec:	1ad3      	subs	r3, r2, r3
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	20000120 	.word	0x20000120
 800e504:	20000280 	.word	0x20000280
 800e508:	08016b70 	.word	0x08016b70
 800e50c:	08016b74 	.word	0x08016b74
 800e510:	10624dd3 	.word	0x10624dd3

0800e514 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b088      	sub	sp, #32
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d107      	bne.n	800e532 <dhcp_bind+0x1e>
 800e522:	4b64      	ldr	r3, [pc, #400]	; (800e6b4 <dhcp_bind+0x1a0>)
 800e524:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800e528:	4963      	ldr	r1, [pc, #396]	; (800e6b8 <dhcp_bind+0x1a4>)
 800e52a:	4864      	ldr	r0, [pc, #400]	; (800e6bc <dhcp_bind+0x1a8>)
 800e52c:	f005 fb3a 	bl	8013ba4 <iprintf>
 800e530:	e0bc      	b.n	800e6ac <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a1b      	ldr	r3, [r3, #32]
 800e536:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d107      	bne.n	800e54e <dhcp_bind+0x3a>
 800e53e:	4b5d      	ldr	r3, [pc, #372]	; (800e6b4 <dhcp_bind+0x1a0>)
 800e540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e544:	495e      	ldr	r1, [pc, #376]	; (800e6c0 <dhcp_bind+0x1ac>)
 800e546:	485d      	ldr	r0, [pc, #372]	; (800e6bc <dhcp_bind+0x1a8>)
 800e548:	f005 fb2c 	bl	8013ba4 <iprintf>
 800e54c:	e0ae      	b.n	800e6ac <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	2200      	movs	r2, #0
 800e552:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e55c:	d019      	beq.n	800e592 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e562:	331e      	adds	r3, #30
 800e564:	4a57      	ldr	r2, [pc, #348]	; (800e6c4 <dhcp_bind+0x1b0>)
 800e566:	fba2 2303 	umull	r2, r3, r2, r3
 800e56a:	095b      	lsrs	r3, r3, #5
 800e56c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e574:	d302      	bcc.n	800e57c <dhcp_bind+0x68>
       timeout = 0xffff;
 800e576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e57a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	b29a      	uxth	r2, r3
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d102      	bne.n	800e592 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	2201      	movs	r2, #1
 800e590:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e59a:	d01d      	beq.n	800e5d8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a0:	331e      	adds	r3, #30
 800e5a2:	4a48      	ldr	r2, [pc, #288]	; (800e6c4 <dhcp_bind+0x1b0>)
 800e5a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a8:	095b      	lsrs	r3, r3, #5
 800e5aa:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5b2:	d302      	bcc.n	800e5ba <dhcp_bind+0xa6>
      timeout = 0xffff;
 800e5b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5b8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	8b1b      	ldrh	r3, [r3, #24]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d102      	bne.n	800e5d0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	8b1a      	ldrh	r2, [r3, #24]
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5e0:	d01d      	beq.n	800e61e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e6:	331e      	adds	r3, #30
 800e5e8:	4a36      	ldr	r2, [pc, #216]	; (800e6c4 <dhcp_bind+0x1b0>)
 800e5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ee:	095b      	lsrs	r3, r3, #5
 800e5f0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f8:	d302      	bcc.n	800e600 <dhcp_bind+0xec>
      timeout = 0xffff;
 800e5fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5fe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	b29a      	uxth	r2, r3
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	8b5b      	ldrh	r3, [r3, #26]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d102      	bne.n	800e616 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	2201      	movs	r2, #1
 800e614:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	8b5a      	ldrh	r2, [r3, #26]
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	8b1a      	ldrh	r2, [r3, #24]
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	8b5b      	ldrh	r3, [r3, #26]
 800e626:	429a      	cmp	r2, r3
 800e628:	d306      	bcc.n	800e638 <dhcp_bind+0x124>
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	8b5b      	ldrh	r3, [r3, #26]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	2200      	movs	r2, #0
 800e636:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	7adb      	ldrb	r3, [r3, #11]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d003      	beq.n	800e648 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e644:	613b      	str	r3, [r7, #16]
 800e646:	e014      	b.n	800e672 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	3328      	adds	r3, #40	; 0x28
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800e650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e654:	2b00      	cmp	r3, #0
 800e656:	db02      	blt.n	800e65e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800e658:	23ff      	movs	r3, #255	; 0xff
 800e65a:	613b      	str	r3, [r7, #16]
 800e65c:	e009      	b.n	800e672 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	2bbf      	cmp	r3, #191	; 0xbf
 800e662:	d903      	bls.n	800e66c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800e664:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800e668:	613b      	str	r3, [r7, #16]
 800e66a:	e002      	b.n	800e672 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800e66c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e670:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e676:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d108      	bne.n	800e690 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	4013      	ands	r3, r2
 800e686:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e68e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800e690:	210a      	movs	r1, #10
 800e692:	69b8      	ldr	r0, [r7, #24]
 800e694:	f000 fa78 	bl	800eb88 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e69e:	f107 030c 	add.w	r3, r7, #12
 800e6a2:	f107 0210 	add.w	r2, r7, #16
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7f9 fb7e 	bl	8007da8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800e6ac:	3720      	adds	r7, #32
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	08015e84 	.word	0x08015e84
 800e6b8:	08015fc4 	.word	0x08015fc4
 800e6bc:	08015ee4 	.word	0x08015ee4
 800e6c0:	08015fe0 	.word	0x08015fe0
 800e6c4:	88888889 	.word	0x88888889

0800e6c8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af02      	add	r7, sp, #8
 800e6ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6a1b      	ldr	r3, [r3, #32]
 800e6d4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e6d6:	2105      	movs	r1, #5
 800e6d8:	6938      	ldr	r0, [r7, #16]
 800e6da:	f000 fa55 	bl	800eb88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800e6de:	2203      	movs	r2, #3
 800e6e0:	6939      	ldr	r1, [r7, #16]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fed6 	bl	800f494 <dhcp_create_msg>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800e6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d13b      	bne.n	800e76c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	2139      	movs	r1, #57	; 0x39
 800e6f8:	6938      	ldr	r0, [r7, #16]
 800e6fa:	f000 fa5f 	bl	800ebbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e702:	4619      	mov	r1, r3
 800e704:	6938      	ldr	r0, [r7, #16]
 800e706:	f000 fabb 	bl	800ec80 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e70a:	2203      	movs	r2, #3
 800e70c:	2137      	movs	r1, #55	; 0x37
 800e70e:	6938      	ldr	r0, [r7, #16]
 800e710:	f000 fa54 	bl	800ebbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e714:	2300      	movs	r3, #0
 800e716:	75fb      	strb	r3, [r7, #23]
 800e718:	e009      	b.n	800e72e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e71a:	7dfb      	ldrb	r3, [r7, #23]
 800e71c:	4a2a      	ldr	r2, [pc, #168]	; (800e7c8 <dhcp_renew+0x100>)
 800e71e:	5cd3      	ldrb	r3, [r2, r3]
 800e720:	4619      	mov	r1, r3
 800e722:	6938      	ldr	r0, [r7, #16]
 800e724:	f000 fa84 	bl	800ec30 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e728:	7dfb      	ldrb	r3, [r7, #23]
 800e72a:	3301      	adds	r3, #1
 800e72c:	75fb      	strb	r3, [r7, #23]
 800e72e:	7dfb      	ldrb	r3, [r7, #23]
 800e730:	2b02      	cmp	r3, #2
 800e732:	d9f2      	bls.n	800e71a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800e734:	6938      	ldr	r0, [r7, #16]
 800e736:	f001 f851 	bl	800f7dc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	68da      	ldr	r2, [r3, #12]
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	8a9b      	ldrh	r3, [r3, #20]
 800e742:	33f0      	adds	r3, #240	; 0xf0
 800e744:	b29b      	uxth	r3, r3
 800e746:	4619      	mov	r1, r3
 800e748:	4610      	mov	r0, r2
 800e74a:	f7f9 fe39 	bl	80083c0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800e74e:	4b1f      	ldr	r3, [pc, #124]	; (800e7cc <dhcp_renew+0x104>)
 800e750:	6818      	ldr	r0, [r3, #0]
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	68d9      	ldr	r1, [r3, #12]
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	2343      	movs	r3, #67	; 0x43
 800e762:	f7fe ffdb 	bl	800d71c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800e766:	6938      	ldr	r0, [r7, #16]
 800e768:	f000 fff6 	bl	800f758 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	7a9b      	ldrb	r3, [r3, #10]
 800e770:	2bff      	cmp	r3, #255	; 0xff
 800e772:	d005      	beq.n	800e780 <dhcp_renew+0xb8>
    dhcp->tries++;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	7a9b      	ldrb	r3, [r3, #10]
 800e778:	3301      	adds	r3, #1
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	7a9b      	ldrb	r3, [r3, #10]
 800e784:	2b09      	cmp	r3, #9
 800e786:	d80a      	bhi.n	800e79e <dhcp_renew+0xd6>
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	7a9b      	ldrb	r3, [r3, #10]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	461a      	mov	r2, r3
 800e790:	0152      	lsls	r2, r2, #5
 800e792:	1ad2      	subs	r2, r2, r3
 800e794:	0092      	lsls	r2, r2, #2
 800e796:	4413      	add	r3, r2
 800e798:	011b      	lsls	r3, r3, #4
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	e001      	b.n	800e7a2 <dhcp_renew+0xda>
 800e79e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e7a2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e7a4:	89bb      	ldrh	r3, [r7, #12]
 800e7a6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e7aa:	4a09      	ldr	r2, [pc, #36]	; (800e7d0 <dhcp_renew+0x108>)
 800e7ac:	fb82 1203 	smull	r1, r2, r2, r3
 800e7b0:	1152      	asrs	r2, r2, #5
 800e7b2:	17db      	asrs	r3, r3, #31
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e7bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	20000120 	.word	0x20000120
 800e7cc:	20000280 	.word	0x20000280
 800e7d0:	10624dd3 	.word	0x10624dd3

0800e7d4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af02      	add	r7, sp, #8
 800e7da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6a1b      	ldr	r3, [r3, #32]
 800e7e0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e7e2:	2104      	movs	r1, #4
 800e7e4:	6938      	ldr	r0, [r7, #16]
 800e7e6:	f000 f9cf 	bl	800eb88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800e7ea:	2203      	movs	r2, #3
 800e7ec:	6939      	ldr	r1, [r7, #16]
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 fe50 	bl	800f494 <dhcp_create_msg>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800e7f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d139      	bne.n	800e874 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e800:	2202      	movs	r2, #2
 800e802:	2139      	movs	r1, #57	; 0x39
 800e804:	6938      	ldr	r0, [r7, #16]
 800e806:	f000 f9d9 	bl	800ebbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e80e:	4619      	mov	r1, r3
 800e810:	6938      	ldr	r0, [r7, #16]
 800e812:	f000 fa35 	bl	800ec80 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e816:	2203      	movs	r2, #3
 800e818:	2137      	movs	r1, #55	; 0x37
 800e81a:	6938      	ldr	r0, [r7, #16]
 800e81c:	f000 f9ce 	bl	800ebbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e820:	2300      	movs	r3, #0
 800e822:	75fb      	strb	r3, [r7, #23]
 800e824:	e009      	b.n	800e83a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e826:	7dfb      	ldrb	r3, [r7, #23]
 800e828:	4a29      	ldr	r2, [pc, #164]	; (800e8d0 <dhcp_rebind+0xfc>)
 800e82a:	5cd3      	ldrb	r3, [r2, r3]
 800e82c:	4619      	mov	r1, r3
 800e82e:	6938      	ldr	r0, [r7, #16]
 800e830:	f000 f9fe 	bl	800ec30 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e834:	7dfb      	ldrb	r3, [r7, #23]
 800e836:	3301      	adds	r3, #1
 800e838:	75fb      	strb	r3, [r7, #23]
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d9f2      	bls.n	800e826 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800e840:	6938      	ldr	r0, [r7, #16]
 800e842:	f000 ffcb 	bl	800f7dc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	8a9b      	ldrh	r3, [r3, #20]
 800e84e:	33f0      	adds	r3, #240	; 0xf0
 800e850:	b29b      	uxth	r3, r3
 800e852:	4619      	mov	r1, r3
 800e854:	4610      	mov	r0, r2
 800e856:	f7f9 fdb3 	bl	80083c0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800e85a:	4b1e      	ldr	r3, [pc, #120]	; (800e8d4 <dhcp_rebind+0x100>)
 800e85c:	6818      	ldr	r0, [r3, #0]
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	68d9      	ldr	r1, [r3, #12]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	2343      	movs	r3, #67	; 0x43
 800e868:	4a1b      	ldr	r2, [pc, #108]	; (800e8d8 <dhcp_rebind+0x104>)
 800e86a:	f7fe ff57 	bl	800d71c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800e86e:	6938      	ldr	r0, [r7, #16]
 800e870:	f000 ff72 	bl	800f758 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	7a9b      	ldrb	r3, [r3, #10]
 800e878:	2bff      	cmp	r3, #255	; 0xff
 800e87a:	d005      	beq.n	800e888 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	7a9b      	ldrb	r3, [r3, #10]
 800e880:	3301      	adds	r3, #1
 800e882:	b2da      	uxtb	r2, r3
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	7a9b      	ldrb	r3, [r3, #10]
 800e88c:	2b09      	cmp	r3, #9
 800e88e:	d80a      	bhi.n	800e8a6 <dhcp_rebind+0xd2>
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	7a9b      	ldrb	r3, [r3, #10]
 800e894:	b29b      	uxth	r3, r3
 800e896:	461a      	mov	r2, r3
 800e898:	0152      	lsls	r2, r2, #5
 800e89a:	1ad2      	subs	r2, r2, r3
 800e89c:	0092      	lsls	r2, r2, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	e001      	b.n	800e8aa <dhcp_rebind+0xd6>
 800e8a6:	f242 7310 	movw	r3, #10000	; 0x2710
 800e8aa:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e8ac:	89bb      	ldrh	r3, [r7, #12]
 800e8ae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e8b2:	4a0a      	ldr	r2, [pc, #40]	; (800e8dc <dhcp_rebind+0x108>)
 800e8b4:	fb82 1203 	smull	r1, r2, r2, r3
 800e8b8:	1152      	asrs	r2, r2, #5
 800e8ba:	17db      	asrs	r3, r3, #31
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3718      	adds	r7, #24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	20000120 	.word	0x20000120
 800e8d4:	20000280 	.word	0x20000280
 800e8d8:	08016b74 	.word	0x08016b74
 800e8dc:	10624dd3 	.word	0x10624dd3

0800e8e0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b088      	sub	sp, #32
 800e8e4:	af02      	add	r7, sp, #8
 800e8e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a1b      	ldr	r3, [r3, #32]
 800e8ec:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800e8ee:	2103      	movs	r1, #3
 800e8f0:	6938      	ldr	r0, [r7, #16]
 800e8f2:	f000 f949 	bl	800eb88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800e8f6:	2203      	movs	r2, #3
 800e8f8:	6939      	ldr	r1, [r7, #16]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 fdca 	bl	800f494 <dhcp_create_msg>
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800e904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d147      	bne.n	800e99c <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e90c:	2202      	movs	r2, #2
 800e90e:	2139      	movs	r1, #57	; 0x39
 800e910:	6938      	ldr	r0, [r7, #16]
 800e912:	f000 f953 	bl	800ebbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800e916:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e91a:	6938      	ldr	r0, [r7, #16]
 800e91c:	f000 f9b0 	bl	800ec80 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800e920:	2204      	movs	r2, #4
 800e922:	2132      	movs	r1, #50	; 0x32
 800e924:	6938      	ldr	r0, [r7, #16]
 800e926:	f000 f949 	bl	800ebbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f8 fdc0 	bl	80074b4 <lwip_htonl>
 800e934:	4603      	mov	r3, r0
 800e936:	4619      	mov	r1, r3
 800e938:	6938      	ldr	r0, [r7, #16]
 800e93a:	f000 f9db 	bl	800ecf4 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e93e:	2203      	movs	r2, #3
 800e940:	2137      	movs	r1, #55	; 0x37
 800e942:	6938      	ldr	r0, [r7, #16]
 800e944:	f000 f93a 	bl	800ebbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e948:	2300      	movs	r3, #0
 800e94a:	75fb      	strb	r3, [r7, #23]
 800e94c:	e009      	b.n	800e962 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e94e:	7dfb      	ldrb	r3, [r7, #23]
 800e950:	4a29      	ldr	r2, [pc, #164]	; (800e9f8 <dhcp_reboot+0x118>)
 800e952:	5cd3      	ldrb	r3, [r2, r3]
 800e954:	4619      	mov	r1, r3
 800e956:	6938      	ldr	r0, [r7, #16]
 800e958:	f000 f96a 	bl	800ec30 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e95c:	7dfb      	ldrb	r3, [r7, #23]
 800e95e:	3301      	adds	r3, #1
 800e960:	75fb      	strb	r3, [r7, #23]
 800e962:	7dfb      	ldrb	r3, [r7, #23]
 800e964:	2b02      	cmp	r3, #2
 800e966:	d9f2      	bls.n	800e94e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800e968:	6938      	ldr	r0, [r7, #16]
 800e96a:	f000 ff37 	bl	800f7dc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	68da      	ldr	r2, [r3, #12]
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	8a9b      	ldrh	r3, [r3, #20]
 800e976:	33f0      	adds	r3, #240	; 0xf0
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4619      	mov	r1, r3
 800e97c:	4610      	mov	r0, r2
 800e97e:	f7f9 fd1f 	bl	80083c0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800e982:	4b1e      	ldr	r3, [pc, #120]	; (800e9fc <dhcp_reboot+0x11c>)
 800e984:	6818      	ldr	r0, [r3, #0]
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	68d9      	ldr	r1, [r3, #12]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	2343      	movs	r3, #67	; 0x43
 800e990:	4a1b      	ldr	r2, [pc, #108]	; (800ea00 <dhcp_reboot+0x120>)
 800e992:	f7fe fec3 	bl	800d71c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800e996:	6938      	ldr	r0, [r7, #16]
 800e998:	f000 fede 	bl	800f758 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	7a9b      	ldrb	r3, [r3, #10]
 800e9a0:	2bff      	cmp	r3, #255	; 0xff
 800e9a2:	d005      	beq.n	800e9b0 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	7a9b      	ldrb	r3, [r3, #10]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	7a9b      	ldrb	r3, [r3, #10]
 800e9b4:	2b09      	cmp	r3, #9
 800e9b6:	d80a      	bhi.n	800e9ce <dhcp_reboot+0xee>
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	7a9b      	ldrb	r3, [r3, #10]
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	461a      	mov	r2, r3
 800e9c0:	0152      	lsls	r2, r2, #5
 800e9c2:	1ad2      	subs	r2, r2, r3
 800e9c4:	0092      	lsls	r2, r2, #2
 800e9c6:	4413      	add	r3, r2
 800e9c8:	00db      	lsls	r3, r3, #3
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	e001      	b.n	800e9d2 <dhcp_reboot+0xf2>
 800e9ce:	f242 7310 	movw	r3, #10000	; 0x2710
 800e9d2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e9d4:	89bb      	ldrh	r3, [r7, #12]
 800e9d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e9da:	4a0a      	ldr	r2, [pc, #40]	; (800ea04 <dhcp_reboot+0x124>)
 800e9dc:	fb82 1203 	smull	r1, r2, r2, r3
 800e9e0:	1152      	asrs	r2, r2, #5
 800e9e2:	17db      	asrs	r3, r3, #31
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	20000120 	.word	0x20000120
 800e9fc:	20000280 	.word	0x20000280
 800ea00:	08016b74 	.word	0x08016b74
 800ea04:	10624dd3 	.word	0x10624dd3

0800ea08 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b088      	sub	sp, #32
 800ea0c:	af02      	add	r7, sp, #8
 800ea0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a1b      	ldr	r3, [r3, #32]
 800ea14:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d102      	bne.n	800ea22 <dhcp_release+0x1a>
    return ERR_ARG;
 800ea1c:	f06f 030f 	mvn.w	r3, #15
 800ea20:	e072      	b.n	800eb08 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea26:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 ff31 	bl	800f890 <dhcp_supplied_address>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800ea32:	2100      	movs	r1, #0
 800ea34:	6978      	ldr	r0, [r7, #20]
 800ea36:	f000 f8a7 	bl	800eb88 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2200      	movs	r2, #0
 800ea44:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	2200      	movs	r2, #0
 800ea56:	63da      	str	r2, [r3, #60]	; 0x3c
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	639a      	str	r2, [r3, #56]	; 0x38
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	845a      	strh	r2, [r3, #34]	; 0x22
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	841a      	strh	r2, [r3, #32]
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	8c1a      	ldrh	r2, [r3, #32]
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	83da      	strh	r2, [r3, #30]
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	8bda      	ldrh	r2, [r3, #30]
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800ea86:	7cfb      	ldrb	r3, [r7, #19]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d101      	bne.n	800ea90 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e03b      	b.n	800eb08 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800ea90:	2207      	movs	r2, #7
 800ea92:	6979      	ldr	r1, [r7, #20]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 fcfd 	bl	800f494 <dhcp_create_msg>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800ea9e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d128      	bne.n	800eaf8 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800eaa6:	2204      	movs	r2, #4
 800eaa8:	2136      	movs	r1, #54	; 0x36
 800eaaa:	6978      	ldr	r0, [r7, #20]
 800eaac:	f000 f886 	bl	800ebbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7f8 fcfe 	bl	80074b4 <lwip_htonl>
 800eab8:	4603      	mov	r3, r0
 800eaba:	4619      	mov	r1, r3
 800eabc:	6978      	ldr	r0, [r7, #20]
 800eabe:	f000 f919 	bl	800ecf4 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800eac2:	6978      	ldr	r0, [r7, #20]
 800eac4:	f000 fe8a 	bl	800f7dc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	68da      	ldr	r2, [r3, #12]
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	8a9b      	ldrh	r3, [r3, #20]
 800ead0:	33f0      	adds	r3, #240	; 0xf0
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	4619      	mov	r1, r3
 800ead6:	4610      	mov	r0, r2
 800ead8:	f7f9 fc72 	bl	80083c0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800eadc:	4b0c      	ldr	r3, [pc, #48]	; (800eb10 <dhcp_release+0x108>)
 800eade:	6818      	ldr	r0, [r3, #0]
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	68d9      	ldr	r1, [r3, #12]
 800eae4:	f107 020c 	add.w	r2, r7, #12
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	2343      	movs	r3, #67	; 0x43
 800eaee:	f7fe fe15 	bl	800d71c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800eaf2:	6978      	ldr	r0, [r7, #20]
 800eaf4:	f000 fe30 	bl	800f758 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800eaf8:	4b06      	ldr	r3, [pc, #24]	; (800eb14 <dhcp_release+0x10c>)
 800eafa:	4a06      	ldr	r2, [pc, #24]	; (800eb14 <dhcp_release+0x10c>)
 800eafc:	4905      	ldr	r1, [pc, #20]	; (800eb14 <dhcp_release+0x10c>)
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f7f9 f952 	bl	8007da8 <netif_set_addr>

  return result;
 800eb04:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20000280 	.word	0x20000280
 800eb14:	08016b70 	.word	0x08016b70

0800eb18 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d107      	bne.n	800eb36 <dhcp_stop+0x1e>
 800eb26:	4b14      	ldr	r3, [pc, #80]	; (800eb78 <dhcp_stop+0x60>)
 800eb28:	f240 5242 	movw	r2, #1346	; 0x542
 800eb2c:	4913      	ldr	r1, [pc, #76]	; (800eb7c <dhcp_stop+0x64>)
 800eb2e:	4814      	ldr	r0, [pc, #80]	; (800eb80 <dhcp_stop+0x68>)
 800eb30:	f005 f838 	bl	8013ba4 <iprintf>
 800eb34:	e01d      	b.n	800eb72 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d017      	beq.n	800eb72 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d006      	beq.n	800eb58 <dhcp_stop+0x40>
 800eb4a:	4b0b      	ldr	r3, [pc, #44]	; (800eb78 <dhcp_stop+0x60>)
 800eb4c:	f240 524f 	movw	r2, #1359	; 0x54f
 800eb50:	490c      	ldr	r1, [pc, #48]	; (800eb84 <dhcp_stop+0x6c>)
 800eb52:	480b      	ldr	r0, [pc, #44]	; (800eb80 <dhcp_stop+0x68>)
 800eb54:	f005 f826 	bl	8013ba4 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800eb58:	2100      	movs	r1, #0
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f000 f814 	bl	800eb88 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	7a1b      	ldrb	r3, [r3, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800eb68:	f7ff f854 	bl	800dc14 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	08015e84 	.word	0x08015e84
 800eb7c:	08015ff8 	.word	0x08015ff8
 800eb80:	08015ee4 	.word	0x08015ee4
 800eb84:	08015fb0 	.word	0x08015fb0

0800eb88 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	460b      	mov	r3, r1
 800eb92:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	7a5b      	ldrb	r3, [r3, #9]
 800eb98:	78fa      	ldrb	r2, [r7, #3]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d008      	beq.n	800ebb0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	78fa      	ldrb	r2, [r7, #3]
 800eba2:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	82da      	strh	r2, [r3, #22]
  }
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	70fb      	strb	r3, [r7, #3]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	8a9b      	ldrh	r3, [r3, #20]
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	78bb      	ldrb	r3, [r7, #2]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	3302      	adds	r3, #2
 800ebd8:	2b44      	cmp	r3, #68	; 0x44
 800ebda:	d906      	bls.n	800ebea <dhcp_option+0x2e>
 800ebdc:	4b11      	ldr	r3, [pc, #68]	; (800ec24 <dhcp_option+0x68>)
 800ebde:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800ebe2:	4911      	ldr	r1, [pc, #68]	; (800ec28 <dhcp_option+0x6c>)
 800ebe4:	4811      	ldr	r0, [pc, #68]	; (800ec2c <dhcp_option+0x70>)
 800ebe6:	f004 ffdd 	bl	8013ba4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	691a      	ldr	r2, [r3, #16]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	8a9b      	ldrh	r3, [r3, #20]
 800ebf2:	1c59      	adds	r1, r3, #1
 800ebf4:	b288      	uxth	r0, r1
 800ebf6:	6879      	ldr	r1, [r7, #4]
 800ebf8:	8288      	strh	r0, [r1, #20]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	78fa      	ldrb	r2, [r7, #3]
 800ebfe:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	691a      	ldr	r2, [r3, #16]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	8a9b      	ldrh	r3, [r3, #20]
 800ec0a:	1c59      	adds	r1, r3, #1
 800ec0c:	b288      	uxth	r0, r1
 800ec0e:	6879      	ldr	r1, [r7, #4]
 800ec10:	8288      	strh	r0, [r1, #20]
 800ec12:	4413      	add	r3, r2
 800ec14:	78ba      	ldrb	r2, [r7, #2]
 800ec16:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ec1a:	bf00      	nop
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	08015e84 	.word	0x08015e84
 800ec28:	08016014 	.word	0x08016014
 800ec2c:	08015ee4 	.word	0x08015ee4

0800ec30 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	8a9b      	ldrh	r3, [r3, #20]
 800ec40:	2b43      	cmp	r3, #67	; 0x43
 800ec42:	d906      	bls.n	800ec52 <dhcp_option_byte+0x22>
 800ec44:	4b0b      	ldr	r3, [pc, #44]	; (800ec74 <dhcp_option_byte+0x44>)
 800ec46:	f240 527b 	movw	r2, #1403	; 0x57b
 800ec4a:	490b      	ldr	r1, [pc, #44]	; (800ec78 <dhcp_option_byte+0x48>)
 800ec4c:	480b      	ldr	r0, [pc, #44]	; (800ec7c <dhcp_option_byte+0x4c>)
 800ec4e:	f004 ffa9 	bl	8013ba4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	691a      	ldr	r2, [r3, #16]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	8a9b      	ldrh	r3, [r3, #20]
 800ec5a:	1c59      	adds	r1, r3, #1
 800ec5c:	b288      	uxth	r0, r1
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	8288      	strh	r0, [r1, #20]
 800ec62:	4413      	add	r3, r2
 800ec64:	78fa      	ldrb	r2, [r7, #3]
 800ec66:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ec6a:	bf00      	nop
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	08015e84 	.word	0x08015e84
 800ec78:	0801605c 	.word	0x0801605c
 800ec7c:	08015ee4 	.word	0x08015ee4

0800ec80 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800ec80:	b590      	push	{r4, r7, lr}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	8a9b      	ldrh	r3, [r3, #20]
 800ec90:	3302      	adds	r3, #2
 800ec92:	2b44      	cmp	r3, #68	; 0x44
 800ec94:	d906      	bls.n	800eca4 <dhcp_option_short+0x24>
 800ec96:	4b14      	ldr	r3, [pc, #80]	; (800ece8 <dhcp_option_short+0x68>)
 800ec98:	f240 5282 	movw	r2, #1410	; 0x582
 800ec9c:	4913      	ldr	r1, [pc, #76]	; (800ecec <dhcp_option_short+0x6c>)
 800ec9e:	4814      	ldr	r0, [pc, #80]	; (800ecf0 <dhcp_option_short+0x70>)
 800eca0:	f004 ff80 	bl	8013ba4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800eca4:	887b      	ldrh	r3, [r7, #2]
 800eca6:	0a1b      	lsrs	r3, r3, #8
 800eca8:	b298      	uxth	r0, r3
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	691a      	ldr	r2, [r3, #16]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	8a9b      	ldrh	r3, [r3, #20]
 800ecb2:	1c59      	adds	r1, r3, #1
 800ecb4:	b28c      	uxth	r4, r1
 800ecb6:	6879      	ldr	r1, [r7, #4]
 800ecb8:	828c      	strh	r4, [r1, #20]
 800ecba:	b2c1      	uxtb	r1, r0
 800ecbc:	4413      	add	r3, r2
 800ecbe:	460a      	mov	r2, r1
 800ecc0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	691a      	ldr	r2, [r3, #16]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	8a9b      	ldrh	r3, [r3, #20]
 800eccc:	1c59      	adds	r1, r3, #1
 800ecce:	b288      	uxth	r0, r1
 800ecd0:	6879      	ldr	r1, [r7, #4]
 800ecd2:	8288      	strh	r0, [r1, #20]
 800ecd4:	8879      	ldrh	r1, [r7, #2]
 800ecd6:	b2c9      	uxtb	r1, r1
 800ecd8:	4413      	add	r3, r2
 800ecda:	460a      	mov	r2, r1
 800ecdc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd90      	pop	{r4, r7, pc}
 800ece8:	08015e84 	.word	0x08015e84
 800ecec:	08016098 	.word	0x08016098
 800ecf0:	08015ee4 	.word	0x08015ee4

0800ecf4 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800ecf4:	b590      	push	{r4, r7, lr}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	8a9b      	ldrh	r3, [r3, #20]
 800ed02:	3304      	adds	r3, #4
 800ed04:	2b44      	cmp	r3, #68	; 0x44
 800ed06:	d906      	bls.n	800ed16 <dhcp_option_long+0x22>
 800ed08:	4b22      	ldr	r3, [pc, #136]	; (800ed94 <dhcp_option_long+0xa0>)
 800ed0a:	f240 528a 	movw	r2, #1418	; 0x58a
 800ed0e:	4922      	ldr	r1, [pc, #136]	; (800ed98 <dhcp_option_long+0xa4>)
 800ed10:	4822      	ldr	r0, [pc, #136]	; (800ed9c <dhcp_option_long+0xa8>)
 800ed12:	f004 ff47 	bl	8013ba4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	0e18      	lsrs	r0, r3, #24
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	691a      	ldr	r2, [r3, #16]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	8a9b      	ldrh	r3, [r3, #20]
 800ed22:	1c59      	adds	r1, r3, #1
 800ed24:	b28c      	uxth	r4, r1
 800ed26:	6879      	ldr	r1, [r7, #4]
 800ed28:	828c      	strh	r4, [r1, #20]
 800ed2a:	b2c1      	uxtb	r1, r0
 800ed2c:	4413      	add	r3, r2
 800ed2e:	460a      	mov	r2, r1
 800ed30:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	0c18      	lsrs	r0, r3, #16
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	691a      	ldr	r2, [r3, #16]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	8a9b      	ldrh	r3, [r3, #20]
 800ed40:	1c59      	adds	r1, r3, #1
 800ed42:	b28c      	uxth	r4, r1
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	828c      	strh	r4, [r1, #20]
 800ed48:	b2c1      	uxtb	r1, r0
 800ed4a:	4413      	add	r3, r2
 800ed4c:	460a      	mov	r2, r1
 800ed4e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	0a18      	lsrs	r0, r3, #8
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	691a      	ldr	r2, [r3, #16]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	8a9b      	ldrh	r3, [r3, #20]
 800ed5e:	1c59      	adds	r1, r3, #1
 800ed60:	b28c      	uxth	r4, r1
 800ed62:	6879      	ldr	r1, [r7, #4]
 800ed64:	828c      	strh	r4, [r1, #20]
 800ed66:	b2c1      	uxtb	r1, r0
 800ed68:	4413      	add	r3, r2
 800ed6a:	460a      	mov	r2, r1
 800ed6c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	691a      	ldr	r2, [r3, #16]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	8a9b      	ldrh	r3, [r3, #20]
 800ed78:	1c59      	adds	r1, r3, #1
 800ed7a:	b288      	uxth	r0, r1
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	8288      	strh	r0, [r1, #20]
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	b2c9      	uxtb	r1, r1
 800ed84:	4413      	add	r3, r2
 800ed86:	460a      	mov	r2, r1
 800ed88:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ed8c:	bf00      	nop
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd90      	pop	{r4, r7, pc}
 800ed94:	08015e84 	.word	0x08015e84
 800ed98:	080160dc 	.word	0x080160dc
 800ed9c:	08015ee4 	.word	0x08015ee4

0800eda0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08e      	sub	sp, #56	; 0x38
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800edaa:	2300      	movs	r3, #0
 800edac:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800edae:	2300      	movs	r3, #0
 800edb0:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800edb2:	2208      	movs	r2, #8
 800edb4:	2100      	movs	r1, #0
 800edb6:	48b3      	ldr	r0, [pc, #716]	; (800f084 <dhcp_parse_reply+0x2e4>)
 800edb8:	f004 fe44 	bl	8013a44 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	895b      	ldrh	r3, [r3, #10]
 800edc0:	2b2b      	cmp	r3, #43	; 0x2b
 800edc2:	d802      	bhi.n	800edca <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800edc4:	f06f 0301 	mvn.w	r3, #1
 800edc8:	e26a      	b.n	800f2a0 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800edd2:	23f0      	movs	r3, #240	; 0xf0
 800edd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	891b      	ldrh	r3, [r3, #8]
 800edda:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800ede0:	e00c      	b.n	800edfc <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	895b      	ldrh	r3, [r3, #10]
 800ede6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800edec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edee:	895b      	ldrh	r3, [r3, #10]
 800edf0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d004      	beq.n	800ee0c <dhcp_parse_reply+0x6c>
 800ee02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee04:	895b      	ldrh	r3, [r3, #10]
 800ee06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d2ea      	bcs.n	800ede2 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800ee0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d102      	bne.n	800ee18 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800ee12:	f06f 0301 	mvn.w	r3, #1
 800ee16:	e243      	b.n	800f2a0 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800ee18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee1a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800ee1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee1e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ee26:	e1fb      	b.n	800f220 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800ee28:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ee2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee2c:	4413      	add	r3, r2
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800ee36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee3a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800ee3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ee3e:	3302      	adds	r3, #2
 800ee40:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800ee42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ee44:	3301      	adds	r3, #1
 800ee46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee48:	8952      	ldrh	r2, [r2, #10]
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	da06      	bge.n	800ee5c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800ee4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ee50:	3301      	adds	r3, #1
 800ee52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee54:	4413      	add	r3, r2
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	77fb      	strb	r3, [r7, #31]
 800ee5a:	e00a      	b.n	800ee72 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800ee5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d004      	beq.n	800ee6e <dhcp_parse_reply+0xce>
 800ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	e000      	b.n	800ee70 <dhcp_parse_reply+0xd0>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800ee72:	7ffb      	ldrb	r3, [r7, #31]
 800ee74:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800ee76:	7d7b      	ldrb	r3, [r7, #21]
 800ee78:	2b3b      	cmp	r3, #59	; 0x3b
 800ee7a:	f200 8121 	bhi.w	800f0c0 <dhcp_parse_reply+0x320>
 800ee7e:	a201      	add	r2, pc, #4	; (adr r2, 800ee84 <dhcp_parse_reply+0xe4>)
 800ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee84:	0800ef75 	.word	0x0800ef75
 800ee88:	0800ef85 	.word	0x0800ef85
 800ee8c:	0800f0c1 	.word	0x0800f0c1
 800ee90:	0800efa5 	.word	0x0800efa5
 800ee94:	0800f0c1 	.word	0x0800f0c1
 800ee98:	0800f0c1 	.word	0x0800f0c1
 800ee9c:	0800f0c1 	.word	0x0800f0c1
 800eea0:	0800f0c1 	.word	0x0800f0c1
 800eea4:	0800f0c1 	.word	0x0800f0c1
 800eea8:	0800f0c1 	.word	0x0800f0c1
 800eeac:	0800f0c1 	.word	0x0800f0c1
 800eeb0:	0800f0c1 	.word	0x0800f0c1
 800eeb4:	0800f0c1 	.word	0x0800f0c1
 800eeb8:	0800f0c1 	.word	0x0800f0c1
 800eebc:	0800f0c1 	.word	0x0800f0c1
 800eec0:	0800f0c1 	.word	0x0800f0c1
 800eec4:	0800f0c1 	.word	0x0800f0c1
 800eec8:	0800f0c1 	.word	0x0800f0c1
 800eecc:	0800f0c1 	.word	0x0800f0c1
 800eed0:	0800f0c1 	.word	0x0800f0c1
 800eed4:	0800f0c1 	.word	0x0800f0c1
 800eed8:	0800f0c1 	.word	0x0800f0c1
 800eedc:	0800f0c1 	.word	0x0800f0c1
 800eee0:	0800f0c1 	.word	0x0800f0c1
 800eee4:	0800f0c1 	.word	0x0800f0c1
 800eee8:	0800f0c1 	.word	0x0800f0c1
 800eeec:	0800f0c1 	.word	0x0800f0c1
 800eef0:	0800f0c1 	.word	0x0800f0c1
 800eef4:	0800f0c1 	.word	0x0800f0c1
 800eef8:	0800f0c1 	.word	0x0800f0c1
 800eefc:	0800f0c1 	.word	0x0800f0c1
 800ef00:	0800f0c1 	.word	0x0800f0c1
 800ef04:	0800f0c1 	.word	0x0800f0c1
 800ef08:	0800f0c1 	.word	0x0800f0c1
 800ef0c:	0800f0c1 	.word	0x0800f0c1
 800ef10:	0800f0c1 	.word	0x0800f0c1
 800ef14:	0800f0c1 	.word	0x0800f0c1
 800ef18:	0800f0c1 	.word	0x0800f0c1
 800ef1c:	0800f0c1 	.word	0x0800f0c1
 800ef20:	0800f0c1 	.word	0x0800f0c1
 800ef24:	0800f0c1 	.word	0x0800f0c1
 800ef28:	0800f0c1 	.word	0x0800f0c1
 800ef2c:	0800f0c1 	.word	0x0800f0c1
 800ef30:	0800f0c1 	.word	0x0800f0c1
 800ef34:	0800f0c1 	.word	0x0800f0c1
 800ef38:	0800f0c1 	.word	0x0800f0c1
 800ef3c:	0800f0c1 	.word	0x0800f0c1
 800ef40:	0800f0c1 	.word	0x0800f0c1
 800ef44:	0800f0c1 	.word	0x0800f0c1
 800ef48:	0800f0c1 	.word	0x0800f0c1
 800ef4c:	0800f0c1 	.word	0x0800f0c1
 800ef50:	0800efcb 	.word	0x0800efcb
 800ef54:	0800efeb 	.word	0x0800efeb
 800ef58:	0800f025 	.word	0x0800f025
 800ef5c:	0800f045 	.word	0x0800f045
 800ef60:	0800f0c1 	.word	0x0800f0c1
 800ef64:	0800f0c1 	.word	0x0800f0c1
 800ef68:	0800f0c1 	.word	0x0800f0c1
 800ef6c:	0800f065 	.word	0x0800f065
 800ef70:	0800f0a1 	.word	0x0800f0a1
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800ef74:	2300      	movs	r3, #0
 800ef76:	77fb      	strb	r3, [r7, #31]
 800ef78:	7ffb      	ldrb	r3, [r7, #31]
 800ef7a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800ef7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800ef82:	e0a0      	b.n	800f0c6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ef84:	7ffb      	ldrb	r3, [r7, #31]
 800ef86:	2b04      	cmp	r3, #4
 800ef88:	d009      	beq.n	800ef9e <dhcp_parse_reply+0x1fe>
 800ef8a:	4b3f      	ldr	r3, [pc, #252]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800ef8c:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800ef90:	493e      	ldr	r1, [pc, #248]	; (800f08c <dhcp_parse_reply+0x2ec>)
 800ef92:	483f      	ldr	r0, [pc, #252]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800ef94:	f004 fe06 	bl	8013ba4 <iprintf>
 800ef98:	f06f 0305 	mvn.w	r3, #5
 800ef9c:	e180      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ef9e:	2306      	movs	r3, #6
 800efa0:	61bb      	str	r3, [r7, #24]
        break;
 800efa2:	e090      	b.n	800f0c6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800efa4:	2304      	movs	r3, #4
 800efa6:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800efa8:	7ffa      	ldrb	r2, [r7, #31]
 800efaa:	7fbb      	ldrb	r3, [r7, #30]
 800efac:	429a      	cmp	r2, r3
 800efae:	d209      	bcs.n	800efc4 <dhcp_parse_reply+0x224>
 800efb0:	4b35      	ldr	r3, [pc, #212]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800efb2:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800efb6:	4937      	ldr	r1, [pc, #220]	; (800f094 <dhcp_parse_reply+0x2f4>)
 800efb8:	4835      	ldr	r0, [pc, #212]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800efba:	f004 fdf3 	bl	8013ba4 <iprintf>
 800efbe:	f06f 0305 	mvn.w	r3, #5
 800efc2:	e16d      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800efc4:	2307      	movs	r3, #7
 800efc6:	61bb      	str	r3, [r7, #24]
        break;
 800efc8:	e07d      	b.n	800f0c6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800efca:	7ffb      	ldrb	r3, [r7, #31]
 800efcc:	2b04      	cmp	r3, #4
 800efce:	d009      	beq.n	800efe4 <dhcp_parse_reply+0x244>
 800efd0:	4b2d      	ldr	r3, [pc, #180]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800efd2:	f240 6209 	movw	r2, #1545	; 0x609
 800efd6:	492d      	ldr	r1, [pc, #180]	; (800f08c <dhcp_parse_reply+0x2ec>)
 800efd8:	482d      	ldr	r0, [pc, #180]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800efda:	f004 fde3 	bl	8013ba4 <iprintf>
 800efde:	f06f 0305 	mvn.w	r3, #5
 800efe2:	e15d      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800efe4:	2303      	movs	r3, #3
 800efe6:	61bb      	str	r3, [r7, #24]
        break;
 800efe8:	e06d      	b.n	800f0c6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800efea:	7ffb      	ldrb	r3, [r7, #31]
 800efec:	2b01      	cmp	r3, #1
 800efee:	d009      	beq.n	800f004 <dhcp_parse_reply+0x264>
 800eff0:	4b25      	ldr	r3, [pc, #148]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800eff2:	f240 6217 	movw	r2, #1559	; 0x617
 800eff6:	4928      	ldr	r1, [pc, #160]	; (800f098 <dhcp_parse_reply+0x2f8>)
 800eff8:	4825      	ldr	r0, [pc, #148]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800effa:	f004 fdd3 	bl	8013ba4 <iprintf>
 800effe:	f06f 0305 	mvn.w	r3, #5
 800f002:	e14d      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f004:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f006:	2bf0      	cmp	r3, #240	; 0xf0
 800f008:	d009      	beq.n	800f01e <dhcp_parse_reply+0x27e>
 800f00a:	4b1f      	ldr	r3, [pc, #124]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800f00c:	f240 6219 	movw	r2, #1561	; 0x619
 800f010:	4922      	ldr	r1, [pc, #136]	; (800f09c <dhcp_parse_reply+0x2fc>)
 800f012:	481f      	ldr	r0, [pc, #124]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800f014:	f004 fdc6 	bl	8013ba4 <iprintf>
 800f018:	f06f 0305 	mvn.w	r3, #5
 800f01c:	e140      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f01e:	2300      	movs	r3, #0
 800f020:	61bb      	str	r3, [r7, #24]
        break;
 800f022:	e050      	b.n	800f0c6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f024:	7ffb      	ldrb	r3, [r7, #31]
 800f026:	2b01      	cmp	r3, #1
 800f028:	d009      	beq.n	800f03e <dhcp_parse_reply+0x29e>
 800f02a:	4b17      	ldr	r3, [pc, #92]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800f02c:	f240 621d 	movw	r2, #1565	; 0x61d
 800f030:	4919      	ldr	r1, [pc, #100]	; (800f098 <dhcp_parse_reply+0x2f8>)
 800f032:	4817      	ldr	r0, [pc, #92]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800f034:	f004 fdb6 	bl	8013ba4 <iprintf>
 800f038:	f06f 0305 	mvn.w	r3, #5
 800f03c:	e130      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f03e:	2301      	movs	r3, #1
 800f040:	61bb      	str	r3, [r7, #24]
        break;
 800f042:	e040      	b.n	800f0c6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f044:	7ffb      	ldrb	r3, [r7, #31]
 800f046:	2b04      	cmp	r3, #4
 800f048:	d009      	beq.n	800f05e <dhcp_parse_reply+0x2be>
 800f04a:	4b0f      	ldr	r3, [pc, #60]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800f04c:	f240 6221 	movw	r2, #1569	; 0x621
 800f050:	490e      	ldr	r1, [pc, #56]	; (800f08c <dhcp_parse_reply+0x2ec>)
 800f052:	480f      	ldr	r0, [pc, #60]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800f054:	f004 fda6 	bl	8013ba4 <iprintf>
 800f058:	f06f 0305 	mvn.w	r3, #5
 800f05c:	e120      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f05e:	2302      	movs	r3, #2
 800f060:	61bb      	str	r3, [r7, #24]
        break;
 800f062:	e030      	b.n	800f0c6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f064:	7ffb      	ldrb	r3, [r7, #31]
 800f066:	2b04      	cmp	r3, #4
 800f068:	d009      	beq.n	800f07e <dhcp_parse_reply+0x2de>
 800f06a:	4b07      	ldr	r3, [pc, #28]	; (800f088 <dhcp_parse_reply+0x2e8>)
 800f06c:	f240 6225 	movw	r2, #1573	; 0x625
 800f070:	4906      	ldr	r1, [pc, #24]	; (800f08c <dhcp_parse_reply+0x2ec>)
 800f072:	4807      	ldr	r0, [pc, #28]	; (800f090 <dhcp_parse_reply+0x2f0>)
 800f074:	f004 fd96 	bl	8013ba4 <iprintf>
 800f078:	f06f 0305 	mvn.w	r3, #5
 800f07c:	e110      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f07e:	2304      	movs	r3, #4
 800f080:	61bb      	str	r3, [r7, #24]
        break;
 800f082:	e020      	b.n	800f0c6 <dhcp_parse_reply+0x326>
 800f084:	20003904 	.word	0x20003904
 800f088:	08015e84 	.word	0x08015e84
 800f08c:	0801611c 	.word	0x0801611c
 800f090:	08015ee4 	.word	0x08015ee4
 800f094:	08016128 	.word	0x08016128
 800f098:	0801613c 	.word	0x0801613c
 800f09c:	08016148 	.word	0x08016148
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f0a0:	7ffb      	ldrb	r3, [r7, #31]
 800f0a2:	2b04      	cmp	r3, #4
 800f0a4:	d009      	beq.n	800f0ba <dhcp_parse_reply+0x31a>
 800f0a6:	4b80      	ldr	r3, [pc, #512]	; (800f2a8 <dhcp_parse_reply+0x508>)
 800f0a8:	f240 6229 	movw	r2, #1577	; 0x629
 800f0ac:	497f      	ldr	r1, [pc, #508]	; (800f2ac <dhcp_parse_reply+0x50c>)
 800f0ae:	4880      	ldr	r0, [pc, #512]	; (800f2b0 <dhcp_parse_reply+0x510>)
 800f0b0:	f004 fd78 	bl	8013ba4 <iprintf>
 800f0b4:	f06f 0305 	mvn.w	r3, #5
 800f0b8:	e0f2      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f0ba:	2305      	movs	r3, #5
 800f0bc:	61bb      	str	r3, [r7, #24]
        break;
 800f0be:	e002      	b.n	800f0c6 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800f0c4:	bf00      	nop
    }
    offset += len + 2;
 800f0c6:	7ffb      	ldrb	r3, [r7, #31]
 800f0c8:	b29a      	uxth	r2, r3
 800f0ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f0cc:	4413      	add	r3, r2
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	3302      	adds	r3, #2
 800f0d2:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800f0d4:	7fbb      	ldrb	r3, [r7, #30]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d079      	beq.n	800f1ce <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	db02      	blt.n	800f0ea <dhcp_parse_reply+0x34a>
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	2b07      	cmp	r3, #7
 800f0e8:	dd06      	ble.n	800f0f8 <dhcp_parse_reply+0x358>
 800f0ea:	4b6f      	ldr	r3, [pc, #444]	; (800f2a8 <dhcp_parse_reply+0x508>)
 800f0ec:	f240 6236 	movw	r2, #1590	; 0x636
 800f0f0:	4970      	ldr	r1, [pc, #448]	; (800f2b4 <dhcp_parse_reply+0x514>)
 800f0f2:	486f      	ldr	r0, [pc, #444]	; (800f2b0 <dhcp_parse_reply+0x510>)
 800f0f4:	f004 fd56 	bl	8013ba4 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800f0f8:	4a6f      	ldr	r2, [pc, #444]	; (800f2b8 <dhcp_parse_reply+0x518>)
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d164      	bne.n	800f1ce <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800f104:	7fbb      	ldrb	r3, [r7, #30]
 800f106:	2b04      	cmp	r3, #4
 800f108:	bf28      	it	cs
 800f10a:	2304      	movcs	r3, #4
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f110:	8afb      	ldrh	r3, [r7, #22]
 800f112:	8a7a      	ldrh	r2, [r7, #18]
 800f114:	f107 0108 	add.w	r1, r7, #8
 800f118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f11a:	f7f9 fcc5 	bl	8008aa8 <pbuf_copy_partial>
 800f11e:	4603      	mov	r3, r0
 800f120:	461a      	mov	r2, r3
 800f122:	8a7b      	ldrh	r3, [r7, #18]
 800f124:	4293      	cmp	r3, r2
 800f126:	d002      	beq.n	800f12e <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800f128:	f06f 0301 	mvn.w	r3, #1
 800f12c:	e0b8      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800f12e:	7fbb      	ldrb	r3, [r7, #30]
 800f130:	2b04      	cmp	r3, #4
 800f132:	d927      	bls.n	800f184 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f134:	7fbb      	ldrb	r3, [r7, #30]
 800f136:	f003 0303 	and.w	r3, r3, #3
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d009      	beq.n	800f154 <dhcp_parse_reply+0x3b4>
 800f140:	4b59      	ldr	r3, [pc, #356]	; (800f2a8 <dhcp_parse_reply+0x508>)
 800f142:	f240 623e 	movw	r2, #1598	; 0x63e
 800f146:	495d      	ldr	r1, [pc, #372]	; (800f2bc <dhcp_parse_reply+0x51c>)
 800f148:	4859      	ldr	r0, [pc, #356]	; (800f2b0 <dhcp_parse_reply+0x510>)
 800f14a:	f004 fd2b 	bl	8013ba4 <iprintf>
 800f14e:	f06f 0305 	mvn.w	r3, #5
 800f152:	e0a5      	b.n	800f2a0 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800f154:	4a58      	ldr	r2, [pc, #352]	; (800f2b8 <dhcp_parse_reply+0x518>)
 800f156:	69bb      	ldr	r3, [r7, #24]
 800f158:	4413      	add	r3, r2
 800f15a:	2201      	movs	r2, #1
 800f15c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	4618      	mov	r0, r3
 800f162:	f7f8 f9a7 	bl	80074b4 <lwip_htonl>
 800f166:	4601      	mov	r1, r0
 800f168:	4a55      	ldr	r2, [pc, #340]	; (800f2c0 <dhcp_parse_reply+0x520>)
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800f170:	7fbb      	ldrb	r3, [r7, #30]
 800f172:	3b04      	subs	r3, #4
 800f174:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800f176:	8afb      	ldrh	r3, [r7, #22]
 800f178:	3304      	adds	r3, #4
 800f17a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	3301      	adds	r3, #1
 800f180:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800f182:	e7ac      	b.n	800f0de <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800f184:	7fbb      	ldrb	r3, [r7, #30]
 800f186:	2b04      	cmp	r3, #4
 800f188:	d106      	bne.n	800f198 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7f8 f991 	bl	80074b4 <lwip_htonl>
 800f192:	4603      	mov	r3, r0
 800f194:	60bb      	str	r3, [r7, #8]
 800f196:	e010      	b.n	800f1ba <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800f198:	7fbb      	ldrb	r3, [r7, #30]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d009      	beq.n	800f1b2 <dhcp_parse_reply+0x412>
 800f19e:	4b42      	ldr	r3, [pc, #264]	; (800f2a8 <dhcp_parse_reply+0x508>)
 800f1a0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800f1a4:	4947      	ldr	r1, [pc, #284]	; (800f2c4 <dhcp_parse_reply+0x524>)
 800f1a6:	4842      	ldr	r0, [pc, #264]	; (800f2b0 <dhcp_parse_reply+0x510>)
 800f1a8:	f004 fcfc 	bl	8013ba4 <iprintf>
 800f1ac:	f06f 0305 	mvn.w	r3, #5
 800f1b0:	e076      	b.n	800f2a0 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800f1b2:	f107 0308 	add.w	r3, r7, #8
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800f1ba:	4a3f      	ldr	r2, [pc, #252]	; (800f2b8 <dhcp_parse_reply+0x518>)
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	4413      	add	r3, r2
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	493e      	ldr	r1, [pc, #248]	; (800f2c0 <dhcp_parse_reply+0x520>)
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800f1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d0:	895b      	ldrh	r3, [r3, #10]
 800f1d2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d323      	bcc.n	800f220 <dhcp_parse_reply+0x480>
      offset -= q->len;
 800f1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1da:	895b      	ldrh	r3, [r3, #10]
 800f1dc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	895b      	ldrh	r3, [r3, #10]
 800f1e6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f1e8:	1ad3      	subs	r3, r2, r3
 800f1ea:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800f1ec:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800f1ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d223      	bcs.n	800f23c <dhcp_parse_reply+0x49c>
 800f1f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d020      	beq.n	800f23c <dhcp_parse_reply+0x49c>
        q = q->next;
 800f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800f200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f202:	2b00      	cmp	r3, #0
 800f204:	d109      	bne.n	800f21a <dhcp_parse_reply+0x47a>
 800f206:	4b28      	ldr	r3, [pc, #160]	; (800f2a8 <dhcp_parse_reply+0x508>)
 800f208:	f240 6254 	movw	r2, #1620	; 0x654
 800f20c:	492e      	ldr	r1, [pc, #184]	; (800f2c8 <dhcp_parse_reply+0x528>)
 800f20e:	4828      	ldr	r0, [pc, #160]	; (800f2b0 <dhcp_parse_reply+0x510>)
 800f210:	f004 fcc8 	bl	8013ba4 <iprintf>
 800f214:	f06f 0305 	mvn.w	r3, #5
 800f218:	e042      	b.n	800f2a0 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800f21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00a      	beq.n	800f23c <dhcp_parse_reply+0x49c>
 800f226:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800f228:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d206      	bcs.n	800f23c <dhcp_parse_reply+0x49c>
 800f22e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f232:	4413      	add	r3, r2
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	2bff      	cmp	r3, #255	; 0xff
 800f238:	f47f adf6 	bne.w	800ee28 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800f23c:	4b1e      	ldr	r3, [pc, #120]	; (800f2b8 <dhcp_parse_reply+0x518>)
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d018      	beq.n	800f276 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f244:	4b1e      	ldr	r3, [pc, #120]	; (800f2c0 <dhcp_parse_reply+0x520>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f24a:	4b1b      	ldr	r3, [pc, #108]	; (800f2b8 <dhcp_parse_reply+0x518>)
 800f24c:	2200      	movs	r2, #0
 800f24e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d102      	bne.n	800f25c <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800f256:	2301      	movs	r3, #1
 800f258:	627b      	str	r3, [r7, #36]	; 0x24
 800f25a:	e00c      	b.n	800f276 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b02      	cmp	r3, #2
 800f260:	d102      	bne.n	800f268 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800f262:	2301      	movs	r3, #1
 800f264:	623b      	str	r3, [r7, #32]
 800f266:	e006      	b.n	800f276 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2b03      	cmp	r3, #3
 800f26c:	d103      	bne.n	800f276 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800f26e:	2301      	movs	r3, #1
 800f270:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800f272:	2301      	movs	r3, #1
 800f274:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800f276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d006      	beq.n	800f28a <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800f27c:	2300      	movs	r3, #0
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800f280:	236c      	movs	r3, #108	; 0x6c
 800f282:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800f284:	23ec      	movs	r3, #236	; 0xec
 800f286:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800f288:	e5a8      	b.n	800eddc <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d006      	beq.n	800f29e <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800f290:	2300      	movs	r3, #0
 800f292:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800f294:	232c      	movs	r3, #44	; 0x2c
 800f296:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800f298:	236c      	movs	r3, #108	; 0x6c
 800f29a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800f29c:	e59e      	b.n	800eddc <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800f29e:	2300      	movs	r3, #0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3738      	adds	r7, #56	; 0x38
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	08015e84 	.word	0x08015e84
 800f2ac:	0801611c 	.word	0x0801611c
 800f2b0:	08015ee4 	.word	0x08015ee4
 800f2b4:	08016160 	.word	0x08016160
 800f2b8:	20003904 	.word	0x20003904
 800f2bc:	08016174 	.word	0x08016174
 800f2c0:	2000390c 	.word	0x2000390c
 800f2c4:	0801618c 	.word	0x0801618c
 800f2c8:	080161a0 	.word	0x080161a0

0800f2cc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b08a      	sub	sp, #40	; 0x28
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
 800f2d8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800f2da:	4b68      	ldr	r3, [pc, #416]	; (800f47c <dhcp_recv+0x1b0>)
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f2e0:	6a3b      	ldr	r3, [r7, #32]
 800f2e2:	6a1b      	ldr	r3, [r3, #32]
 800f2e4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	f000 80a9 	beq.w	800f446 <dhcp_recv+0x17a>
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	7a1b      	ldrb	r3, [r3, #8]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 80a4 	beq.w	800f446 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d006      	beq.n	800f314 <dhcp_recv+0x48>
 800f306:	4b5e      	ldr	r3, [pc, #376]	; (800f480 <dhcp_recv+0x1b4>)
 800f308:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800f30c:	495d      	ldr	r1, [pc, #372]	; (800f484 <dhcp_recv+0x1b8>)
 800f30e:	485e      	ldr	r0, [pc, #376]	; (800f488 <dhcp_recv+0x1bc>)
 800f310:	f004 fc48 	bl	8013ba4 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	895b      	ldrh	r3, [r3, #10]
 800f318:	2b2b      	cmp	r3, #43	; 0x2b
 800f31a:	f240 8096 	bls.w	800f44a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	2b02      	cmp	r3, #2
 800f324:	f040 8093 	bne.w	800f44e <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800f328:	2300      	movs	r3, #0
 800f32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f32e:	e012      	b.n	800f356 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800f330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f334:	6a3a      	ldr	r2, [r7, #32]
 800f336:	4413      	add	r3, r2
 800f338:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f340:	69b9      	ldr	r1, [r7, #24]
 800f342:	440b      	add	r3, r1
 800f344:	7f1b      	ldrb	r3, [r3, #28]
 800f346:	429a      	cmp	r2, r3
 800f348:	f040 8083 	bne.w	800f452 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800f34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f350:	3301      	adds	r3, #1
 800f352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f356:	6a3b      	ldr	r3, [r7, #32]
 800f358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f35c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f360:	429a      	cmp	r2, r3
 800f362:	d207      	bcs.n	800f374 <dhcp_recv+0xa8>
 800f364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f368:	2b05      	cmp	r3, #5
 800f36a:	d803      	bhi.n	800f374 <dhcp_recv+0xa8>
 800f36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f370:	2b0f      	cmp	r3, #15
 800f372:	d9dd      	bls.n	800f330 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	4618      	mov	r0, r3
 800f37a:	f7f8 f89b 	bl	80074b4 <lwip_htonl>
 800f37e:	4602      	mov	r2, r0
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	429a      	cmp	r2, r3
 800f386:	d166      	bne.n	800f456 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800f388:	6879      	ldr	r1, [r7, #4]
 800f38a:	69f8      	ldr	r0, [r7, #28]
 800f38c:	f7ff fd08 	bl	800eda0 <dhcp_parse_reply>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d161      	bne.n	800f45a <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800f396:	4b3d      	ldr	r3, [pc, #244]	; (800f48c <dhcp_recv+0x1c0>)
 800f398:	785b      	ldrb	r3, [r3, #1]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d05f      	beq.n	800f45e <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800f39e:	4b3c      	ldr	r3, [pc, #240]	; (800f490 <dhcp_recv+0x1c4>)
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800f3a4:	7dfb      	ldrb	r3, [r7, #23]
 800f3a6:	2b05      	cmp	r3, #5
 800f3a8:	d128      	bne.n	800f3fc <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	7a5b      	ldrb	r3, [r3, #9]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d111      	bne.n	800f3d6 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800f3b2:	6a38      	ldr	r0, [r7, #32]
 800f3b4:	f7fe fea0 	bl	800e0f8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800f3b8:	6a3b      	ldr	r3, [r7, #32]
 800f3ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3be:	f003 0308 	and.w	r3, r3, #8
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d003      	beq.n	800f3ce <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800f3c6:	6a38      	ldr	r0, [r7, #32]
 800f3c8:	f7fe fc68 	bl	800dc9c <dhcp_check>
 800f3cc:	e048      	b.n	800f460 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800f3ce:	6a38      	ldr	r0, [r7, #32]
 800f3d0:	f7ff f8a0 	bl	800e514 <dhcp_bind>
 800f3d4:	e044      	b.n	800f460 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	7a5b      	ldrb	r3, [r3, #9]
 800f3da:	2b03      	cmp	r3, #3
 800f3dc:	d007      	beq.n	800f3ee <dhcp_recv+0x122>
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	7a5b      	ldrb	r3, [r3, #9]
 800f3e2:	2b04      	cmp	r3, #4
 800f3e4:	d003      	beq.n	800f3ee <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f3ea:	2b05      	cmp	r3, #5
 800f3ec:	d138      	bne.n	800f460 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 800f3ee:	6a38      	ldr	r0, [r7, #32]
 800f3f0:	f7fe fe82 	bl	800e0f8 <dhcp_handle_ack>
      dhcp_bind(netif);
 800f3f4:	6a38      	ldr	r0, [r7, #32]
 800f3f6:	f7ff f88d 	bl	800e514 <dhcp_bind>
 800f3fa:	e031      	b.n	800f460 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800f3fc:	7dfb      	ldrb	r3, [r7, #23]
 800f3fe:	2b06      	cmp	r3, #6
 800f400:	d113      	bne.n	800f42a <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800f406:	2b03      	cmp	r3, #3
 800f408:	d00b      	beq.n	800f422 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	7a5b      	ldrb	r3, [r3, #9]
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d007      	beq.n	800f422 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f416:	2b04      	cmp	r3, #4
 800f418:	d003      	beq.n	800f422 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	7a5b      	ldrb	r3, [r3, #9]
 800f41e:	2b05      	cmp	r3, #5
 800f420:	d103      	bne.n	800f42a <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800f422:	6a38      	ldr	r0, [r7, #32]
 800f424:	f7fe fc20 	bl	800dc68 <dhcp_handle_nak>
 800f428:	e01a      	b.n	800f460 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
 800f42c:	2b02      	cmp	r3, #2
 800f42e:	d10a      	bne.n	800f446 <dhcp_recv+0x17a>
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	7a5b      	ldrb	r3, [r3, #9]
 800f434:	2b06      	cmp	r3, #6
 800f436:	d106      	bne.n	800f446 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	2200      	movs	r2, #0
 800f43c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800f43e:	6a38      	ldr	r0, [r7, #32]
 800f440:	f7fe fc60 	bl	800dd04 <dhcp_handle_offer>
 800f444:	e00c      	b.n	800f460 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 800f446:	bf00      	nop
 800f448:	e00a      	b.n	800f460 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800f44a:	bf00      	nop
 800f44c:	e008      	b.n	800f460 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800f44e:	bf00      	nop
 800f450:	e006      	b.n	800f460 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 800f452:	bf00      	nop
 800f454:	e004      	b.n	800f460 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800f456:	bf00      	nop
 800f458:	e002      	b.n	800f460 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800f45a:	bf00      	nop
 800f45c:	e000      	b.n	800f460 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800f45e:	bf00      	nop
  if (dhcp != NULL) {
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d002      	beq.n	800f46c <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	2200      	movs	r2, #0
 800f46a:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f7f9 f91b 	bl	80086a8 <pbuf_free>
}
 800f472:	bf00      	nop
 800f474:	3728      	adds	r7, #40	; 0x28
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	20000398 	.word	0x20000398
 800f480:	08015e84 	.word	0x08015e84
 800f484:	08015fb0 	.word	0x08015fb0
 800f488:	08015ee4 	.word	0x08015ee4
 800f48c:	20003904 	.word	0x20003904
 800f490:	2000390c 	.word	0x2000390c

0800f494 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800f494:	b590      	push	{r4, r7, lr}
 800f496:	b087      	sub	sp, #28
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d109      	bne.n	800f4bc <dhcp_create_msg+0x28>
 800f4a8:	4ba3      	ldr	r3, [pc, #652]	; (800f738 <dhcp_create_msg+0x2a4>)
 800f4aa:	f240 721d 	movw	r2, #1821	; 0x71d
 800f4ae:	49a3      	ldr	r1, [pc, #652]	; (800f73c <dhcp_create_msg+0x2a8>)
 800f4b0:	48a3      	ldr	r0, [pc, #652]	; (800f740 <dhcp_create_msg+0x2ac>)
 800f4b2:	f004 fb77 	bl	8013ba4 <iprintf>
 800f4b6:	f06f 030f 	mvn.w	r3, #15
 800f4ba:	e138      	b.n	800f72e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d109      	bne.n	800f4d6 <dhcp_create_msg+0x42>
 800f4c2:	4b9d      	ldr	r3, [pc, #628]	; (800f738 <dhcp_create_msg+0x2a4>)
 800f4c4:	f240 721e 	movw	r2, #1822	; 0x71e
 800f4c8:	499e      	ldr	r1, [pc, #632]	; (800f744 <dhcp_create_msg+0x2b0>)
 800f4ca:	489d      	ldr	r0, [pc, #628]	; (800f740 <dhcp_create_msg+0x2ac>)
 800f4cc:	f004 fb6a 	bl	8013ba4 <iprintf>
 800f4d0:	f06f 0305 	mvn.w	r3, #5
 800f4d4:	e12b      	b.n	800f72e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d006      	beq.n	800f4ec <dhcp_create_msg+0x58>
 800f4de:	4b96      	ldr	r3, [pc, #600]	; (800f738 <dhcp_create_msg+0x2a4>)
 800f4e0:	f240 721f 	movw	r2, #1823	; 0x71f
 800f4e4:	4998      	ldr	r1, [pc, #608]	; (800f748 <dhcp_create_msg+0x2b4>)
 800f4e6:	4896      	ldr	r0, [pc, #600]	; (800f740 <dhcp_create_msg+0x2ac>)
 800f4e8:	f004 fb5c 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d006      	beq.n	800f502 <dhcp_create_msg+0x6e>
 800f4f4:	4b90      	ldr	r3, [pc, #576]	; (800f738 <dhcp_create_msg+0x2a4>)
 800f4f6:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800f4fa:	4994      	ldr	r1, [pc, #592]	; (800f74c <dhcp_create_msg+0x2b8>)
 800f4fc:	4890      	ldr	r0, [pc, #576]	; (800f740 <dhcp_create_msg+0x2ac>)
 800f4fe:	f004 fb51 	bl	8013ba4 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800f502:	2200      	movs	r2, #0
 800f504:	f44f 719a 	mov.w	r1, #308	; 0x134
 800f508:	2000      	movs	r0, #0
 800f50a:	f7f8 fd5b 	bl	8007fc4 <pbuf_alloc>
 800f50e:	4602      	mov	r2, r0
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800f51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f520:	e105      	b.n	800f72e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	895b      	ldrh	r3, [r3, #10]
 800f528:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800f52c:	d206      	bcs.n	800f53c <dhcp_create_msg+0xa8>
 800f52e:	4b82      	ldr	r3, [pc, #520]	; (800f738 <dhcp_create_msg+0x2a4>)
 800f530:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800f534:	4986      	ldr	r1, [pc, #536]	; (800f750 <dhcp_create_msg+0x2bc>)
 800f536:	4882      	ldr	r0, [pc, #520]	; (800f740 <dhcp_create_msg+0x2ac>)
 800f538:	f004 fb34 	bl	8013ba4 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800f53c:	79fb      	ldrb	r3, [r7, #7]
 800f53e:	2b03      	cmp	r3, #3
 800f540:	d103      	bne.n	800f54a <dhcp_create_msg+0xb6>
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	7a5b      	ldrb	r3, [r3, #9]
 800f546:	2b03      	cmp	r3, #3
 800f548:	d10d      	bne.n	800f566 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	7a9b      	ldrb	r3, [r3, #10]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d105      	bne.n	800f55e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800f552:	f004 fb3f 	bl	8013bd4 <rand>
 800f556:	4603      	mov	r3, r0
 800f558:	461a      	mov	r2, r3
 800f55a:	4b7e      	ldr	r3, [pc, #504]	; (800f754 <dhcp_create_msg+0x2c0>)
 800f55c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800f55e:	4b7d      	ldr	r3, [pc, #500]	; (800f754 <dhcp_create_msg+0x2c0>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	685a      	ldr	r2, [r3, #4]
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	2201      	movs	r2, #1
 800f576:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	691b      	ldr	r3, [r3, #16]
 800f57c:	2201      	movs	r2, #1
 800f57e:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800f58a:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	2200      	movs	r2, #0
 800f592:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	691c      	ldr	r4, [r3, #16]
 800f59c:	4610      	mov	r0, r2
 800f59e:	f7f7 ff89 	bl	80074b4 <lwip_htonl>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	691b      	ldr	r3, [r3, #16]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	721a      	strb	r2, [r3, #8]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	729a      	strb	r2, [r3, #10]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	731a      	strb	r2, [r3, #12]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	735a      	strb	r2, [r3, #13]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	739a      	strb	r2, [r3, #14]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800f5d2:	79fb      	ldrb	r3, [r7, #7]
 800f5d4:	2b08      	cmp	r3, #8
 800f5d6:	d010      	beq.n	800f5fa <dhcp_create_msg+0x166>
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	2b04      	cmp	r3, #4
 800f5dc:	d00d      	beq.n	800f5fa <dhcp_create_msg+0x166>
 800f5de:	79fb      	ldrb	r3, [r7, #7]
 800f5e0:	2b07      	cmp	r3, #7
 800f5e2:	d00a      	beq.n	800f5fa <dhcp_create_msg+0x166>
 800f5e4:	79fb      	ldrb	r3, [r7, #7]
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d10d      	bne.n	800f606 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800f5ee:	2b05      	cmp	r3, #5
 800f5f0:	d003      	beq.n	800f5fa <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	7a5b      	ldrb	r3, [r3, #9]
 800f5f6:	2b04      	cmp	r3, #4
 800f5f8:	d105      	bne.n	800f606 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	1d1a      	adds	r2, r3, #4
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	691b      	ldr	r3, [r3, #16]
 800f602:	6812      	ldr	r2, [r2, #0]
 800f604:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	691b      	ldr	r3, [r3, #16]
 800f60a:	2200      	movs	r2, #0
 800f60c:	741a      	strb	r2, [r3, #16]
 800f60e:	2200      	movs	r2, #0
 800f610:	745a      	strb	r2, [r3, #17]
 800f612:	2200      	movs	r2, #0
 800f614:	749a      	strb	r2, [r3, #18]
 800f616:	2200      	movs	r2, #0
 800f618:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	2200      	movs	r2, #0
 800f620:	751a      	strb	r2, [r3, #20]
 800f622:	2200      	movs	r2, #0
 800f624:	755a      	strb	r2, [r3, #21]
 800f626:	2200      	movs	r2, #0
 800f628:	759a      	strb	r2, [r3, #22]
 800f62a:	2200      	movs	r2, #0
 800f62c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	691b      	ldr	r3, [r3, #16]
 800f632:	2200      	movs	r2, #0
 800f634:	761a      	strb	r2, [r3, #24]
 800f636:	2200      	movs	r2, #0
 800f638:	765a      	strb	r2, [r3, #25]
 800f63a:	2200      	movs	r2, #0
 800f63c:	769a      	strb	r2, [r3, #26]
 800f63e:	2200      	movs	r2, #0
 800f640:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800f642:	2300      	movs	r3, #0
 800f644:	82fb      	strh	r3, [r7, #22]
 800f646:	e019      	b.n	800f67c <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f64e:	b29b      	uxth	r3, r3
 800f650:	8afa      	ldrh	r2, [r7, #22]
 800f652:	429a      	cmp	r2, r3
 800f654:	d208      	bcs.n	800f668 <dhcp_create_msg+0x1d4>
 800f656:	8afb      	ldrh	r3, [r7, #22]
 800f658:	2b05      	cmp	r3, #5
 800f65a:	d805      	bhi.n	800f668 <dhcp_create_msg+0x1d4>
 800f65c:	8afb      	ldrh	r3, [r7, #22]
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	4413      	add	r3, r2
 800f662:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800f666:	e000      	b.n	800f66a <dhcp_create_msg+0x1d6>
 800f668:	2100      	movs	r1, #0
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	691a      	ldr	r2, [r3, #16]
 800f66e:	8afb      	ldrh	r3, [r7, #22]
 800f670:	4413      	add	r3, r2
 800f672:	460a      	mov	r2, r1
 800f674:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800f676:	8afb      	ldrh	r3, [r7, #22]
 800f678:	3301      	adds	r3, #1
 800f67a:	82fb      	strh	r3, [r7, #22]
 800f67c:	8afb      	ldrh	r3, [r7, #22]
 800f67e:	2b0f      	cmp	r3, #15
 800f680:	d9e2      	bls.n	800f648 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800f682:	2300      	movs	r3, #0
 800f684:	82fb      	strh	r3, [r7, #22]
 800f686:	e009      	b.n	800f69c <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	691a      	ldr	r2, [r3, #16]
 800f68c:	8afb      	ldrh	r3, [r7, #22]
 800f68e:	4413      	add	r3, r2
 800f690:	2200      	movs	r2, #0
 800f692:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800f696:	8afb      	ldrh	r3, [r7, #22]
 800f698:	3301      	adds	r3, #1
 800f69a:	82fb      	strh	r3, [r7, #22]
 800f69c:	8afb      	ldrh	r3, [r7, #22]
 800f69e:	2b3f      	cmp	r3, #63	; 0x3f
 800f6a0:	d9f2      	bls.n	800f688 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	82fb      	strh	r3, [r7, #22]
 800f6a6:	e009      	b.n	800f6bc <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	691a      	ldr	r2, [r3, #16]
 800f6ac:	8afb      	ldrh	r3, [r7, #22]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800f6b6:	8afb      	ldrh	r3, [r7, #22]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	82fb      	strh	r3, [r7, #22]
 800f6bc:	8afb      	ldrh	r3, [r7, #22]
 800f6be:	2b7f      	cmp	r3, #127	; 0x7f
 800f6c0:	d9f2      	bls.n	800f6a8 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	691b      	ldr	r3, [r3, #16]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f6cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800f6d6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800f6e0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f6ea:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	82fb      	strh	r3, [r7, #22]
 800f6f8:	e00b      	b.n	800f712 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	691a      	ldr	r2, [r3, #16]
 800f6fe:	8afb      	ldrh	r3, [r7, #22]
 800f700:	8af9      	ldrh	r1, [r7, #22]
 800f702:	b2c9      	uxtb	r1, r1
 800f704:	4413      	add	r3, r2
 800f706:	460a      	mov	r2, r1
 800f708:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800f70c:	8afb      	ldrh	r3, [r7, #22]
 800f70e:	3301      	adds	r3, #1
 800f710:	82fb      	strh	r3, [r7, #22]
 800f712:	8afb      	ldrh	r3, [r7, #22]
 800f714:	2b43      	cmp	r3, #67	; 0x43
 800f716:	d9f0      	bls.n	800f6fa <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800f718:	2201      	movs	r2, #1
 800f71a:	2135      	movs	r1, #53	; 0x35
 800f71c:	68b8      	ldr	r0, [r7, #8]
 800f71e:	f7ff fa4d 	bl	800ebbc <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800f722:	79fb      	ldrb	r3, [r7, #7]
 800f724:	4619      	mov	r1, r3
 800f726:	68b8      	ldr	r0, [r7, #8]
 800f728:	f7ff fa82 	bl	800ec30 <dhcp_option_byte>
  return ERR_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	371c      	adds	r7, #28
 800f732:	46bd      	mov	sp, r7
 800f734:	bd90      	pop	{r4, r7, pc}
 800f736:	bf00      	nop
 800f738:	08015e84 	.word	0x08015e84
 800f73c:	080161b4 	.word	0x080161b4
 800f740:	08015ee4 	.word	0x08015ee4
 800f744:	080161d4 	.word	0x080161d4
 800f748:	080161f4 	.word	0x080161f4
 800f74c:	0801621c 	.word	0x0801621c
 800f750:	08016244 	.word	0x08016244
 800f754:	20000288 	.word	0x20000288

0800f758 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d107      	bne.n	800f776 <dhcp_delete_msg+0x1e>
 800f766:	4b18      	ldr	r3, [pc, #96]	; (800f7c8 <dhcp_delete_msg+0x70>)
 800f768:	f240 726d 	movw	r2, #1901	; 0x76d
 800f76c:	4917      	ldr	r1, [pc, #92]	; (800f7cc <dhcp_delete_msg+0x74>)
 800f76e:	4818      	ldr	r0, [pc, #96]	; (800f7d0 <dhcp_delete_msg+0x78>)
 800f770:	f004 fa18 	bl	8013ba4 <iprintf>
 800f774:	e024      	b.n	800f7c0 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d106      	bne.n	800f78c <dhcp_delete_msg+0x34>
 800f77e:	4b12      	ldr	r3, [pc, #72]	; (800f7c8 <dhcp_delete_msg+0x70>)
 800f780:	f240 726e 	movw	r2, #1902	; 0x76e
 800f784:	4913      	ldr	r1, [pc, #76]	; (800f7d4 <dhcp_delete_msg+0x7c>)
 800f786:	4812      	ldr	r0, [pc, #72]	; (800f7d0 <dhcp_delete_msg+0x78>)
 800f788:	f004 fa0c 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d106      	bne.n	800f7a2 <dhcp_delete_msg+0x4a>
 800f794:	4b0c      	ldr	r3, [pc, #48]	; (800f7c8 <dhcp_delete_msg+0x70>)
 800f796:	f240 726f 	movw	r2, #1903	; 0x76f
 800f79a:	490f      	ldr	r1, [pc, #60]	; (800f7d8 <dhcp_delete_msg+0x80>)
 800f79c:	480c      	ldr	r0, [pc, #48]	; (800f7d0 <dhcp_delete_msg+0x78>)
 800f79e:	f004 fa01 	bl	8013ba4 <iprintf>
  if (dhcp->p_out != NULL) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d004      	beq.n	800f7b4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7f8 ff7a 	bl	80086a8 <pbuf_free>
  }
  dhcp->p_out = NULL;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	611a      	str	r2, [r3, #16]
}
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	08015e84 	.word	0x08015e84
 800f7cc:	08016284 	.word	0x08016284
 800f7d0:	08015ee4 	.word	0x08015ee4
 800f7d4:	080162a4 	.word	0x080162a4
 800f7d8:	080162cc 	.word	0x080162cc

0800f7dc <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d107      	bne.n	800f7fa <dhcp_option_trailer+0x1e>
 800f7ea:	4b24      	ldr	r3, [pc, #144]	; (800f87c <dhcp_option_trailer+0xa0>)
 800f7ec:	f240 7282 	movw	r2, #1922	; 0x782
 800f7f0:	4923      	ldr	r1, [pc, #140]	; (800f880 <dhcp_option_trailer+0xa4>)
 800f7f2:	4824      	ldr	r0, [pc, #144]	; (800f884 <dhcp_option_trailer+0xa8>)
 800f7f4:	f004 f9d6 	bl	8013ba4 <iprintf>
 800f7f8:	e03c      	b.n	800f874 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	691b      	ldr	r3, [r3, #16]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <dhcp_option_trailer+0x34>
 800f802:	4b1e      	ldr	r3, [pc, #120]	; (800f87c <dhcp_option_trailer+0xa0>)
 800f804:	f240 7283 	movw	r2, #1923	; 0x783
 800f808:	491f      	ldr	r1, [pc, #124]	; (800f888 <dhcp_option_trailer+0xac>)
 800f80a:	481e      	ldr	r0, [pc, #120]	; (800f884 <dhcp_option_trailer+0xa8>)
 800f80c:	f004 f9ca 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	8a9b      	ldrh	r3, [r3, #20]
 800f814:	2b43      	cmp	r3, #67	; 0x43
 800f816:	d906      	bls.n	800f826 <dhcp_option_trailer+0x4a>
 800f818:	4b18      	ldr	r3, [pc, #96]	; (800f87c <dhcp_option_trailer+0xa0>)
 800f81a:	f240 7284 	movw	r2, #1924	; 0x784
 800f81e:	491b      	ldr	r1, [pc, #108]	; (800f88c <dhcp_option_trailer+0xb0>)
 800f820:	4818      	ldr	r0, [pc, #96]	; (800f884 <dhcp_option_trailer+0xa8>)
 800f822:	f004 f9bf 	bl	8013ba4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	691a      	ldr	r2, [r3, #16]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	8a9b      	ldrh	r3, [r3, #20]
 800f82e:	1c59      	adds	r1, r3, #1
 800f830:	b288      	uxth	r0, r1
 800f832:	6879      	ldr	r1, [r7, #4]
 800f834:	8288      	strh	r0, [r1, #20]
 800f836:	4413      	add	r3, r2
 800f838:	22ff      	movs	r2, #255	; 0xff
 800f83a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800f83e:	e00b      	b.n	800f858 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	691a      	ldr	r2, [r3, #16]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	8a9b      	ldrh	r3, [r3, #20]
 800f848:	1c59      	adds	r1, r3, #1
 800f84a:	b288      	uxth	r0, r1
 800f84c:	6879      	ldr	r1, [r7, #4]
 800f84e:	8288      	strh	r0, [r1, #20]
 800f850:	4413      	add	r3, r2
 800f852:	2200      	movs	r2, #0
 800f854:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	8a9b      	ldrh	r3, [r3, #20]
 800f85c:	2b43      	cmp	r3, #67	; 0x43
 800f85e:	d905      	bls.n	800f86c <dhcp_option_trailer+0x90>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	8a9b      	ldrh	r3, [r3, #20]
 800f864:	f003 0303 	and.w	r3, r3, #3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d003      	beq.n	800f874 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800f870:	2b43      	cmp	r3, #67	; 0x43
 800f872:	d9e5      	bls.n	800f840 <dhcp_option_trailer+0x64>
  }
}
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	08015e84 	.word	0x08015e84
 800f880:	080162f4 	.word	0x080162f4
 800f884:	08015ee4 	.word	0x08015ee4
 800f888:	08016318 	.word	0x08016318
 800f88c:	08016344 	.word	0x08016344

0800f890 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d017      	beq.n	800f8ce <dhcp_supplied_address+0x3e>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a1b      	ldr	r3, [r3, #32]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d013      	beq.n	800f8ce <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	7a5b      	ldrb	r3, [r3, #9]
 800f8b0:	2b0a      	cmp	r3, #10
 800f8b2:	d007      	beq.n	800f8c4 <dhcp_supplied_address+0x34>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	7a5b      	ldrb	r3, [r3, #9]
 800f8b8:	2b05      	cmp	r3, #5
 800f8ba:	d003      	beq.n	800f8c4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f8c0:	2b04      	cmp	r3, #4
 800f8c2:	d101      	bne.n	800f8c8 <dhcp_supplied_address+0x38>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e000      	b.n	800f8ca <dhcp_supplied_address+0x3a>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	e000      	b.n	800f8d0 <dhcp_supplied_address+0x40>
  }
  return 0;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3714      	adds	r7, #20
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f8e4:	4915      	ldr	r1, [pc, #84]	; (800f93c <etharp_free_entry+0x60>)
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	005b      	lsls	r3, r3, #1
 800f8ec:	4413      	add	r3, r2
 800f8ee:	00db      	lsls	r3, r3, #3
 800f8f0:	440b      	add	r3, r1
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d013      	beq.n	800f920 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f8f8:	4910      	ldr	r1, [pc, #64]	; (800f93c <etharp_free_entry+0x60>)
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	4413      	add	r3, r2
 800f902:	00db      	lsls	r3, r3, #3
 800f904:	440b      	add	r3, r1
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7f8 fecd 	bl	80086a8 <pbuf_free>
    arp_table[i].q = NULL;
 800f90e:	490b      	ldr	r1, [pc, #44]	; (800f93c <etharp_free_entry+0x60>)
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	4613      	mov	r3, r2
 800f914:	005b      	lsls	r3, r3, #1
 800f916:	4413      	add	r3, r2
 800f918:	00db      	lsls	r3, r3, #3
 800f91a:	440b      	add	r3, r1
 800f91c:	2200      	movs	r2, #0
 800f91e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f920:	4906      	ldr	r1, [pc, #24]	; (800f93c <etharp_free_entry+0x60>)
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	4613      	mov	r3, r2
 800f926:	005b      	lsls	r3, r3, #1
 800f928:	4413      	add	r3, r2
 800f92a:	00db      	lsls	r3, r3, #3
 800f92c:	440b      	add	r3, r1
 800f92e:	3314      	adds	r3, #20
 800f930:	2200      	movs	r2, #0
 800f932:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f934:	bf00      	nop
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	2000028c 	.word	0x2000028c

0800f940 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f946:	2300      	movs	r3, #0
 800f948:	71fb      	strb	r3, [r7, #7]
 800f94a:	e096      	b.n	800fa7a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f94c:	79fa      	ldrb	r2, [r7, #7]
 800f94e:	494f      	ldr	r1, [pc, #316]	; (800fa8c <etharp_tmr+0x14c>)
 800f950:	4613      	mov	r3, r2
 800f952:	005b      	lsls	r3, r3, #1
 800f954:	4413      	add	r3, r2
 800f956:	00db      	lsls	r3, r3, #3
 800f958:	440b      	add	r3, r1
 800f95a:	3314      	adds	r3, #20
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800f960:	79bb      	ldrb	r3, [r7, #6]
 800f962:	2b00      	cmp	r3, #0
 800f964:	f000 8086 	beq.w	800fa74 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800f968:	79fa      	ldrb	r2, [r7, #7]
 800f96a:	4948      	ldr	r1, [pc, #288]	; (800fa8c <etharp_tmr+0x14c>)
 800f96c:	4613      	mov	r3, r2
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	4413      	add	r3, r2
 800f972:	00db      	lsls	r3, r3, #3
 800f974:	440b      	add	r3, r1
 800f976:	3312      	adds	r3, #18
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	3301      	adds	r3, #1
 800f97c:	b298      	uxth	r0, r3
 800f97e:	4943      	ldr	r1, [pc, #268]	; (800fa8c <etharp_tmr+0x14c>)
 800f980:	4613      	mov	r3, r2
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	4413      	add	r3, r2
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	440b      	add	r3, r1
 800f98a:	3312      	adds	r3, #18
 800f98c:	4602      	mov	r2, r0
 800f98e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f990:	79fa      	ldrb	r2, [r7, #7]
 800f992:	493e      	ldr	r1, [pc, #248]	; (800fa8c <etharp_tmr+0x14c>)
 800f994:	4613      	mov	r3, r2
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	4413      	add	r3, r2
 800f99a:	00db      	lsls	r3, r3, #3
 800f99c:	440b      	add	r3, r1
 800f99e:	3312      	adds	r3, #18
 800f9a0:	881b      	ldrh	r3, [r3, #0]
 800f9a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f9a6:	d215      	bcs.n	800f9d4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f9a8:	79fa      	ldrb	r2, [r7, #7]
 800f9aa:	4938      	ldr	r1, [pc, #224]	; (800fa8c <etharp_tmr+0x14c>)
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	005b      	lsls	r3, r3, #1
 800f9b0:	4413      	add	r3, r2
 800f9b2:	00db      	lsls	r3, r3, #3
 800f9b4:	440b      	add	r3, r1
 800f9b6:	3314      	adds	r3, #20
 800f9b8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d10f      	bne.n	800f9de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f9be:	79fa      	ldrb	r2, [r7, #7]
 800f9c0:	4932      	ldr	r1, [pc, #200]	; (800fa8c <etharp_tmr+0x14c>)
 800f9c2:	4613      	mov	r3, r2
 800f9c4:	005b      	lsls	r3, r3, #1
 800f9c6:	4413      	add	r3, r2
 800f9c8:	00db      	lsls	r3, r3, #3
 800f9ca:	440b      	add	r3, r1
 800f9cc:	3312      	adds	r3, #18
 800f9ce:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f9d0:	2b04      	cmp	r3, #4
 800f9d2:	d904      	bls.n	800f9de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff ff80 	bl	800f8dc <etharp_free_entry>
 800f9dc:	e04a      	b.n	800fa74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f9de:	79fa      	ldrb	r2, [r7, #7]
 800f9e0:	492a      	ldr	r1, [pc, #168]	; (800fa8c <etharp_tmr+0x14c>)
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	005b      	lsls	r3, r3, #1
 800f9e6:	4413      	add	r3, r2
 800f9e8:	00db      	lsls	r3, r3, #3
 800f9ea:	440b      	add	r3, r1
 800f9ec:	3314      	adds	r3, #20
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b03      	cmp	r3, #3
 800f9f2:	d10a      	bne.n	800fa0a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f9f4:	79fa      	ldrb	r2, [r7, #7]
 800f9f6:	4925      	ldr	r1, [pc, #148]	; (800fa8c <etharp_tmr+0x14c>)
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	005b      	lsls	r3, r3, #1
 800f9fc:	4413      	add	r3, r2
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	440b      	add	r3, r1
 800fa02:	3314      	adds	r3, #20
 800fa04:	2204      	movs	r2, #4
 800fa06:	701a      	strb	r2, [r3, #0]
 800fa08:	e034      	b.n	800fa74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fa0a:	79fa      	ldrb	r2, [r7, #7]
 800fa0c:	491f      	ldr	r1, [pc, #124]	; (800fa8c <etharp_tmr+0x14c>)
 800fa0e:	4613      	mov	r3, r2
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	4413      	add	r3, r2
 800fa14:	00db      	lsls	r3, r3, #3
 800fa16:	440b      	add	r3, r1
 800fa18:	3314      	adds	r3, #20
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	2b04      	cmp	r3, #4
 800fa1e:	d10a      	bne.n	800fa36 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fa20:	79fa      	ldrb	r2, [r7, #7]
 800fa22:	491a      	ldr	r1, [pc, #104]	; (800fa8c <etharp_tmr+0x14c>)
 800fa24:	4613      	mov	r3, r2
 800fa26:	005b      	lsls	r3, r3, #1
 800fa28:	4413      	add	r3, r2
 800fa2a:	00db      	lsls	r3, r3, #3
 800fa2c:	440b      	add	r3, r1
 800fa2e:	3314      	adds	r3, #20
 800fa30:	2202      	movs	r2, #2
 800fa32:	701a      	strb	r2, [r3, #0]
 800fa34:	e01e      	b.n	800fa74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fa36:	79fa      	ldrb	r2, [r7, #7]
 800fa38:	4914      	ldr	r1, [pc, #80]	; (800fa8c <etharp_tmr+0x14c>)
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	4413      	add	r3, r2
 800fa40:	00db      	lsls	r3, r3, #3
 800fa42:	440b      	add	r3, r1
 800fa44:	3314      	adds	r3, #20
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d113      	bne.n	800fa74 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fa4c:	79fa      	ldrb	r2, [r7, #7]
 800fa4e:	490f      	ldr	r1, [pc, #60]	; (800fa8c <etharp_tmr+0x14c>)
 800fa50:	4613      	mov	r3, r2
 800fa52:	005b      	lsls	r3, r3, #1
 800fa54:	4413      	add	r3, r2
 800fa56:	00db      	lsls	r3, r3, #3
 800fa58:	440b      	add	r3, r1
 800fa5a:	3308      	adds	r3, #8
 800fa5c:	6818      	ldr	r0, [r3, #0]
 800fa5e:	79fa      	ldrb	r2, [r7, #7]
 800fa60:	4613      	mov	r3, r2
 800fa62:	005b      	lsls	r3, r3, #1
 800fa64:	4413      	add	r3, r2
 800fa66:	00db      	lsls	r3, r3, #3
 800fa68:	4a08      	ldr	r2, [pc, #32]	; (800fa8c <etharp_tmr+0x14c>)
 800fa6a:	4413      	add	r3, r2
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	4619      	mov	r1, r3
 800fa70:	f000 fe3c 	bl	80106ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa74:	79fb      	ldrb	r3, [r7, #7]
 800fa76:	3301      	adds	r3, #1
 800fa78:	71fb      	strb	r3, [r7, #7]
 800fa7a:	79fb      	ldrb	r3, [r7, #7]
 800fa7c:	2b09      	cmp	r3, #9
 800fa7e:	f67f af65 	bls.w	800f94c <etharp_tmr+0xc>
      }
    }
  }
}
 800fa82:	bf00      	nop
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	2000028c 	.word	0x2000028c

0800fa90 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b088      	sub	sp, #32
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	607a      	str	r2, [r7, #4]
 800fa9c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fa9e:	230a      	movs	r3, #10
 800faa0:	77fb      	strb	r3, [r7, #31]
 800faa2:	230a      	movs	r3, #10
 800faa4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800faa6:	230a      	movs	r3, #10
 800faa8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800faaa:	2300      	movs	r3, #0
 800faac:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800faae:	230a      	movs	r3, #10
 800fab0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fab2:	2300      	movs	r3, #0
 800fab4:	833b      	strh	r3, [r7, #24]
 800fab6:	2300      	movs	r3, #0
 800fab8:	82fb      	strh	r3, [r7, #22]
 800faba:	2300      	movs	r3, #0
 800fabc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fabe:	2300      	movs	r3, #0
 800fac0:	773b      	strb	r3, [r7, #28]
 800fac2:	e093      	b.n	800fbec <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800fac4:	7f3a      	ldrb	r2, [r7, #28]
 800fac6:	4990      	ldr	r1, [pc, #576]	; (800fd08 <etharp_find_entry+0x278>)
 800fac8:	4613      	mov	r3, r2
 800faca:	005b      	lsls	r3, r3, #1
 800facc:	4413      	add	r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	440b      	add	r3, r1
 800fad2:	3314      	adds	r3, #20
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fad8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fadc:	2b0a      	cmp	r3, #10
 800fade:	d105      	bne.n	800faec <etharp_find_entry+0x5c>
 800fae0:	7cfb      	ldrb	r3, [r7, #19]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d102      	bne.n	800faec <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800fae6:	7f3b      	ldrb	r3, [r7, #28]
 800fae8:	777b      	strb	r3, [r7, #29]
 800faea:	e07c      	b.n	800fbe6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800faec:	7cfb      	ldrb	r3, [r7, #19]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d079      	beq.n	800fbe6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800faf2:	7cfb      	ldrb	r3, [r7, #19]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d009      	beq.n	800fb0c <etharp_find_entry+0x7c>
 800faf8:	7cfb      	ldrb	r3, [r7, #19]
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d806      	bhi.n	800fb0c <etharp_find_entry+0x7c>
 800fafe:	4b83      	ldr	r3, [pc, #524]	; (800fd0c <etharp_find_entry+0x27c>)
 800fb00:	f44f 7293 	mov.w	r2, #294	; 0x126
 800fb04:	4982      	ldr	r1, [pc, #520]	; (800fd10 <etharp_find_entry+0x280>)
 800fb06:	4883      	ldr	r0, [pc, #524]	; (800fd14 <etharp_find_entry+0x284>)
 800fb08:	f004 f84c 	bl	8013ba4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00f      	beq.n	800fb32 <etharp_find_entry+0xa2>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	6819      	ldr	r1, [r3, #0]
 800fb16:	7f3a      	ldrb	r2, [r7, #28]
 800fb18:	487b      	ldr	r0, [pc, #492]	; (800fd08 <etharp_find_entry+0x278>)
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	005b      	lsls	r3, r3, #1
 800fb1e:	4413      	add	r3, r2
 800fb20:	00db      	lsls	r3, r3, #3
 800fb22:	4403      	add	r3, r0
 800fb24:	3304      	adds	r3, #4
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4299      	cmp	r1, r3
 800fb2a:	d102      	bne.n	800fb32 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fb2c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fb30:	e0e5      	b.n	800fcfe <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fb32:	7cfb      	ldrb	r3, [r7, #19]
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d13b      	bne.n	800fbb0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fb38:	7f3a      	ldrb	r2, [r7, #28]
 800fb3a:	4973      	ldr	r1, [pc, #460]	; (800fd08 <etharp_find_entry+0x278>)
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	005b      	lsls	r3, r3, #1
 800fb40:	4413      	add	r3, r2
 800fb42:	00db      	lsls	r3, r3, #3
 800fb44:	440b      	add	r3, r1
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d018      	beq.n	800fb7e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800fb4c:	7f3a      	ldrb	r2, [r7, #28]
 800fb4e:	496e      	ldr	r1, [pc, #440]	; (800fd08 <etharp_find_entry+0x278>)
 800fb50:	4613      	mov	r3, r2
 800fb52:	005b      	lsls	r3, r3, #1
 800fb54:	4413      	add	r3, r2
 800fb56:	00db      	lsls	r3, r3, #3
 800fb58:	440b      	add	r3, r1
 800fb5a:	3312      	adds	r3, #18
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	8b3a      	ldrh	r2, [r7, #24]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d840      	bhi.n	800fbe6 <etharp_find_entry+0x156>
            old_queue = i;
 800fb64:	7f3b      	ldrb	r3, [r7, #28]
 800fb66:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800fb68:	7f3a      	ldrb	r2, [r7, #28]
 800fb6a:	4967      	ldr	r1, [pc, #412]	; (800fd08 <etharp_find_entry+0x278>)
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	005b      	lsls	r3, r3, #1
 800fb70:	4413      	add	r3, r2
 800fb72:	00db      	lsls	r3, r3, #3
 800fb74:	440b      	add	r3, r1
 800fb76:	3312      	adds	r3, #18
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	833b      	strh	r3, [r7, #24]
 800fb7c:	e033      	b.n	800fbe6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fb7e:	7f3a      	ldrb	r2, [r7, #28]
 800fb80:	4961      	ldr	r1, [pc, #388]	; (800fd08 <etharp_find_entry+0x278>)
 800fb82:	4613      	mov	r3, r2
 800fb84:	005b      	lsls	r3, r3, #1
 800fb86:	4413      	add	r3, r2
 800fb88:	00db      	lsls	r3, r3, #3
 800fb8a:	440b      	add	r3, r1
 800fb8c:	3312      	adds	r3, #18
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	8afa      	ldrh	r2, [r7, #22]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d827      	bhi.n	800fbe6 <etharp_find_entry+0x156>
            old_pending = i;
 800fb96:	7f3b      	ldrb	r3, [r7, #28]
 800fb98:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800fb9a:	7f3a      	ldrb	r2, [r7, #28]
 800fb9c:	495a      	ldr	r1, [pc, #360]	; (800fd08 <etharp_find_entry+0x278>)
 800fb9e:	4613      	mov	r3, r2
 800fba0:	005b      	lsls	r3, r3, #1
 800fba2:	4413      	add	r3, r2
 800fba4:	00db      	lsls	r3, r3, #3
 800fba6:	440b      	add	r3, r1
 800fba8:	3312      	adds	r3, #18
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	82fb      	strh	r3, [r7, #22]
 800fbae:	e01a      	b.n	800fbe6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fbb0:	7cfb      	ldrb	r3, [r7, #19]
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d917      	bls.n	800fbe6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fbb6:	7f3a      	ldrb	r2, [r7, #28]
 800fbb8:	4953      	ldr	r1, [pc, #332]	; (800fd08 <etharp_find_entry+0x278>)
 800fbba:	4613      	mov	r3, r2
 800fbbc:	005b      	lsls	r3, r3, #1
 800fbbe:	4413      	add	r3, r2
 800fbc0:	00db      	lsls	r3, r3, #3
 800fbc2:	440b      	add	r3, r1
 800fbc4:	3312      	adds	r3, #18
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	8aba      	ldrh	r2, [r7, #20]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d80b      	bhi.n	800fbe6 <etharp_find_entry+0x156>
            old_stable = i;
 800fbce:	7f3b      	ldrb	r3, [r7, #28]
 800fbd0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800fbd2:	7f3a      	ldrb	r2, [r7, #28]
 800fbd4:	494c      	ldr	r1, [pc, #304]	; (800fd08 <etharp_find_entry+0x278>)
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	4413      	add	r3, r2
 800fbdc:	00db      	lsls	r3, r3, #3
 800fbde:	440b      	add	r3, r1
 800fbe0:	3312      	adds	r3, #18
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fbe6:	7f3b      	ldrb	r3, [r7, #28]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	773b      	strb	r3, [r7, #28]
 800fbec:	7f3b      	ldrb	r3, [r7, #28]
 800fbee:	2b09      	cmp	r3, #9
 800fbf0:	f67f af68 	bls.w	800fac4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fbf4:	7afb      	ldrb	r3, [r7, #11]
 800fbf6:	f003 0302 	and.w	r3, r3, #2
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d108      	bne.n	800fc10 <etharp_find_entry+0x180>
 800fbfe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fc02:	2b0a      	cmp	r3, #10
 800fc04:	d107      	bne.n	800fc16 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fc06:	7afb      	ldrb	r3, [r7, #11]
 800fc08:	f003 0301 	and.w	r3, r3, #1
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d102      	bne.n	800fc16 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800fc10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc14:	e073      	b.n	800fcfe <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fc16:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fc1a:	2b09      	cmp	r3, #9
 800fc1c:	dc02      	bgt.n	800fc24 <etharp_find_entry+0x194>
    i = empty;
 800fc1e:	7f7b      	ldrb	r3, [r7, #29]
 800fc20:	773b      	strb	r3, [r7, #28]
 800fc22:	e036      	b.n	800fc92 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fc24:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800fc28:	2b09      	cmp	r3, #9
 800fc2a:	dc13      	bgt.n	800fc54 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800fc2c:	7fbb      	ldrb	r3, [r7, #30]
 800fc2e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fc30:	7f3a      	ldrb	r2, [r7, #28]
 800fc32:	4935      	ldr	r1, [pc, #212]	; (800fd08 <etharp_find_entry+0x278>)
 800fc34:	4613      	mov	r3, r2
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	4413      	add	r3, r2
 800fc3a:	00db      	lsls	r3, r3, #3
 800fc3c:	440b      	add	r3, r1
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d018      	beq.n	800fc76 <etharp_find_entry+0x1e6>
 800fc44:	4b31      	ldr	r3, [pc, #196]	; (800fd0c <etharp_find_entry+0x27c>)
 800fc46:	f240 126f 	movw	r2, #367	; 0x16f
 800fc4a:	4933      	ldr	r1, [pc, #204]	; (800fd18 <etharp_find_entry+0x288>)
 800fc4c:	4831      	ldr	r0, [pc, #196]	; (800fd14 <etharp_find_entry+0x284>)
 800fc4e:	f003 ffa9 	bl	8013ba4 <iprintf>
 800fc52:	e010      	b.n	800fc76 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fc54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fc58:	2b09      	cmp	r3, #9
 800fc5a:	dc02      	bgt.n	800fc62 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800fc5c:	7ffb      	ldrb	r3, [r7, #31]
 800fc5e:	773b      	strb	r3, [r7, #28]
 800fc60:	e009      	b.n	800fc76 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fc62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fc66:	2b09      	cmp	r3, #9
 800fc68:	dc02      	bgt.n	800fc70 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fc6a:	7efb      	ldrb	r3, [r7, #27]
 800fc6c:	773b      	strb	r3, [r7, #28]
 800fc6e:	e002      	b.n	800fc76 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800fc70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc74:	e043      	b.n	800fcfe <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fc76:	7f3b      	ldrb	r3, [r7, #28]
 800fc78:	2b09      	cmp	r3, #9
 800fc7a:	d906      	bls.n	800fc8a <etharp_find_entry+0x1fa>
 800fc7c:	4b23      	ldr	r3, [pc, #140]	; (800fd0c <etharp_find_entry+0x27c>)
 800fc7e:	f240 1281 	movw	r2, #385	; 0x181
 800fc82:	4926      	ldr	r1, [pc, #152]	; (800fd1c <etharp_find_entry+0x28c>)
 800fc84:	4823      	ldr	r0, [pc, #140]	; (800fd14 <etharp_find_entry+0x284>)
 800fc86:	f003 ff8d 	bl	8013ba4 <iprintf>
    etharp_free_entry(i);
 800fc8a:	7f3b      	ldrb	r3, [r7, #28]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff fe25 	bl	800f8dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fc92:	7f3b      	ldrb	r3, [r7, #28]
 800fc94:	2b09      	cmp	r3, #9
 800fc96:	d906      	bls.n	800fca6 <etharp_find_entry+0x216>
 800fc98:	4b1c      	ldr	r3, [pc, #112]	; (800fd0c <etharp_find_entry+0x27c>)
 800fc9a:	f240 1285 	movw	r2, #389	; 0x185
 800fc9e:	491f      	ldr	r1, [pc, #124]	; (800fd1c <etharp_find_entry+0x28c>)
 800fca0:	481c      	ldr	r0, [pc, #112]	; (800fd14 <etharp_find_entry+0x284>)
 800fca2:	f003 ff7f 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fca6:	7f3a      	ldrb	r2, [r7, #28]
 800fca8:	4917      	ldr	r1, [pc, #92]	; (800fd08 <etharp_find_entry+0x278>)
 800fcaa:	4613      	mov	r3, r2
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	4413      	add	r3, r2
 800fcb0:	00db      	lsls	r3, r3, #3
 800fcb2:	440b      	add	r3, r1
 800fcb4:	3314      	adds	r3, #20
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d006      	beq.n	800fcca <etharp_find_entry+0x23a>
 800fcbc:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <etharp_find_entry+0x27c>)
 800fcbe:	f240 1287 	movw	r2, #391	; 0x187
 800fcc2:	4917      	ldr	r1, [pc, #92]	; (800fd20 <etharp_find_entry+0x290>)
 800fcc4:	4813      	ldr	r0, [pc, #76]	; (800fd14 <etharp_find_entry+0x284>)
 800fcc6:	f003 ff6d 	bl	8013ba4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00a      	beq.n	800fce6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fcd0:	7f3a      	ldrb	r2, [r7, #28]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	6819      	ldr	r1, [r3, #0]
 800fcd6:	480c      	ldr	r0, [pc, #48]	; (800fd08 <etharp_find_entry+0x278>)
 800fcd8:	4613      	mov	r3, r2
 800fcda:	005b      	lsls	r3, r3, #1
 800fcdc:	4413      	add	r3, r2
 800fcde:	00db      	lsls	r3, r3, #3
 800fce0:	4403      	add	r3, r0
 800fce2:	3304      	adds	r3, #4
 800fce4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fce6:	7f3a      	ldrb	r2, [r7, #28]
 800fce8:	4907      	ldr	r1, [pc, #28]	; (800fd08 <etharp_find_entry+0x278>)
 800fcea:	4613      	mov	r3, r2
 800fcec:	005b      	lsls	r3, r3, #1
 800fcee:	4413      	add	r3, r2
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	440b      	add	r3, r1
 800fcf4:	3312      	adds	r3, #18
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800fcfa:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3720      	adds	r7, #32
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	2000028c 	.word	0x2000028c
 800fd0c:	08016384 	.word	0x08016384
 800fd10:	080163bc 	.word	0x080163bc
 800fd14:	080163fc 	.word	0x080163fc
 800fd18:	08016424 	.word	0x08016424
 800fd1c:	0801643c 	.word	0x0801643c
 800fd20:	08016450 	.word	0x08016450

0800fd24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b088      	sub	sp, #32
 800fd28:	af02      	add	r7, sp, #8
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd38:	2b06      	cmp	r3, #6
 800fd3a:	d006      	beq.n	800fd4a <etharp_update_arp_entry+0x26>
 800fd3c:	4b48      	ldr	r3, [pc, #288]	; (800fe60 <etharp_update_arp_entry+0x13c>)
 800fd3e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800fd42:	4948      	ldr	r1, [pc, #288]	; (800fe64 <etharp_update_arp_entry+0x140>)
 800fd44:	4848      	ldr	r0, [pc, #288]	; (800fe68 <etharp_update_arp_entry+0x144>)
 800fd46:	f003 ff2d 	bl	8013ba4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d012      	beq.n	800fd76 <etharp_update_arp_entry+0x52>
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00e      	beq.n	800fd76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68f9      	ldr	r1, [r7, #12]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f001 f8fc 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 800fd64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d105      	bne.n	800fd76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fd72:	2be0      	cmp	r3, #224	; 0xe0
 800fd74:	d102      	bne.n	800fd7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fd76:	f06f 030f 	mvn.w	r3, #15
 800fd7a:	e06c      	b.n	800fe56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fd7c:	78fb      	ldrb	r3, [r7, #3]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	4619      	mov	r1, r3
 800fd82:	68b8      	ldr	r0, [r7, #8]
 800fd84:	f7ff fe84 	bl	800fa90 <etharp_find_entry>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fd8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	da02      	bge.n	800fd9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fd94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd98:	e05d      	b.n	800fe56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fd9a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fd9e:	4933      	ldr	r1, [pc, #204]	; (800fe6c <etharp_update_arp_entry+0x148>)
 800fda0:	4613      	mov	r3, r2
 800fda2:	005b      	lsls	r3, r3, #1
 800fda4:	4413      	add	r3, r2
 800fda6:	00db      	lsls	r3, r3, #3
 800fda8:	440b      	add	r3, r1
 800fdaa:	3314      	adds	r3, #20
 800fdac:	2202      	movs	r2, #2
 800fdae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fdb0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fdb4:	492d      	ldr	r1, [pc, #180]	; (800fe6c <etharp_update_arp_entry+0x148>)
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	4413      	add	r3, r2
 800fdbc:	00db      	lsls	r3, r3, #3
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3308      	adds	r3, #8
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800fdc6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	4413      	add	r3, r2
 800fdd0:	00db      	lsls	r3, r3, #3
 800fdd2:	3308      	adds	r3, #8
 800fdd4:	4a25      	ldr	r2, [pc, #148]	; (800fe6c <etharp_update_arp_entry+0x148>)
 800fdd6:	4413      	add	r3, r2
 800fdd8:	3304      	adds	r3, #4
 800fdda:	2206      	movs	r2, #6
 800fddc:	6879      	ldr	r1, [r7, #4]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f003 fe25 	bl	8013a2e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fde4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fde8:	4920      	ldr	r1, [pc, #128]	; (800fe6c <etharp_update_arp_entry+0x148>)
 800fdea:	4613      	mov	r3, r2
 800fdec:	005b      	lsls	r3, r3, #1
 800fdee:	4413      	add	r3, r2
 800fdf0:	00db      	lsls	r3, r3, #3
 800fdf2:	440b      	add	r3, r1
 800fdf4:	3312      	adds	r3, #18
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fdfa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fdfe:	491b      	ldr	r1, [pc, #108]	; (800fe6c <etharp_update_arp_entry+0x148>)
 800fe00:	4613      	mov	r3, r2
 800fe02:	005b      	lsls	r3, r3, #1
 800fe04:	4413      	add	r3, r2
 800fe06:	00db      	lsls	r3, r3, #3
 800fe08:	440b      	add	r3, r1
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d021      	beq.n	800fe54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fe10:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fe14:	4915      	ldr	r1, [pc, #84]	; (800fe6c <etharp_update_arp_entry+0x148>)
 800fe16:	4613      	mov	r3, r2
 800fe18:	005b      	lsls	r3, r3, #1
 800fe1a:	4413      	add	r3, r2
 800fe1c:	00db      	lsls	r3, r3, #3
 800fe1e:	440b      	add	r3, r1
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fe24:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fe28:	4910      	ldr	r1, [pc, #64]	; (800fe6c <etharp_update_arp_entry+0x148>)
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	005b      	lsls	r3, r3, #1
 800fe2e:	4413      	add	r3, r2
 800fe30:	00db      	lsls	r3, r3, #3
 800fe32:	440b      	add	r3, r1
 800fe34:	2200      	movs	r2, #0
 800fe36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800fe3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6939      	ldr	r1, [r7, #16]
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f001 ff29 	bl	8011ca0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fe4e:	6938      	ldr	r0, [r7, #16]
 800fe50:	f7f8 fc2a 	bl	80086a8 <pbuf_free>
  }
  return ERR_OK;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	08016384 	.word	0x08016384
 800fe64:	0801647c 	.word	0x0801647c
 800fe68:	080163fc 	.word	0x080163fc
 800fe6c:	2000028c 	.word	0x2000028c

0800fe70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe78:	2300      	movs	r3, #0
 800fe7a:	73fb      	strb	r3, [r7, #15]
 800fe7c:	e01f      	b.n	800febe <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800fe7e:	7bfa      	ldrb	r2, [r7, #15]
 800fe80:	4912      	ldr	r1, [pc, #72]	; (800fecc <etharp_cleanup_netif+0x5c>)
 800fe82:	4613      	mov	r3, r2
 800fe84:	005b      	lsls	r3, r3, #1
 800fe86:	4413      	add	r3, r2
 800fe88:	00db      	lsls	r3, r3, #3
 800fe8a:	440b      	add	r3, r1
 800fe8c:	3314      	adds	r3, #20
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fe92:	7bbb      	ldrb	r3, [r7, #14]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00f      	beq.n	800feb8 <etharp_cleanup_netif+0x48>
 800fe98:	7bfa      	ldrb	r2, [r7, #15]
 800fe9a:	490c      	ldr	r1, [pc, #48]	; (800fecc <etharp_cleanup_netif+0x5c>)
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	005b      	lsls	r3, r3, #1
 800fea0:	4413      	add	r3, r2
 800fea2:	00db      	lsls	r3, r3, #3
 800fea4:	440b      	add	r3, r1
 800fea6:	3308      	adds	r3, #8
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	429a      	cmp	r2, r3
 800feae:	d103      	bne.n	800feb8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800feb0:	7bfb      	ldrb	r3, [r7, #15]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7ff fd12 	bl	800f8dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800feb8:	7bfb      	ldrb	r3, [r7, #15]
 800feba:	3301      	adds	r3, #1
 800febc:	73fb      	strb	r3, [r7, #15]
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	2b09      	cmp	r3, #9
 800fec2:	d9dc      	bls.n	800fe7e <etharp_cleanup_netif+0xe>
    }
  }
}
 800fec4:	bf00      	nop
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	2000028c 	.word	0x2000028c

0800fed0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fed0:	b5b0      	push	{r4, r5, r7, lr}
 800fed2:	b08a      	sub	sp, #40	; 0x28
 800fed4:	af04      	add	r7, sp, #16
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d107      	bne.n	800fef0 <etharp_input+0x20>
 800fee0:	4b3f      	ldr	r3, [pc, #252]	; (800ffe0 <etharp_input+0x110>)
 800fee2:	f44f 7222 	mov.w	r2, #648	; 0x288
 800fee6:	493f      	ldr	r1, [pc, #252]	; (800ffe4 <etharp_input+0x114>)
 800fee8:	483f      	ldr	r0, [pc, #252]	; (800ffe8 <etharp_input+0x118>)
 800feea:	f003 fe5b 	bl	8013ba4 <iprintf>
 800feee:	e074      	b.n	800ffda <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff00:	d10c      	bne.n	800ff1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800ff06:	2b06      	cmp	r3, #6
 800ff08:	d108      	bne.n	800ff1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ff0e:	2b04      	cmp	r3, #4
 800ff10:	d104      	bne.n	800ff1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	885b      	ldrh	r3, [r3, #2]
 800ff16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ff18:	2b08      	cmp	r3, #8
 800ff1a:	d003      	beq.n	800ff24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7f8 fbc3 	bl	80086a8 <pbuf_free>
    return;
 800ff22:	e05a      	b.n	800ffda <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	330e      	adds	r3, #14
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	3318      	adds	r3, #24
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	3304      	adds	r3, #4
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d102      	bne.n	800ff44 <etharp_input+0x74>
    for_us = 0;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	75fb      	strb	r3, [r7, #23]
 800ff42:	e009      	b.n	800ff58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	3304      	adds	r3, #4
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	bf0c      	ite	eq
 800ff50:	2301      	moveq	r3, #1
 800ff52:	2300      	movne	r3, #0
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	f103 0208 	add.w	r2, r3, #8
 800ff5e:	7dfb      	ldrb	r3, [r7, #23]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d001      	beq.n	800ff68 <etharp_input+0x98>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e000      	b.n	800ff6a <etharp_input+0x9a>
 800ff68:	2302      	movs	r3, #2
 800ff6a:	f107 010c 	add.w	r1, r7, #12
 800ff6e:	6838      	ldr	r0, [r7, #0]
 800ff70:	f7ff fed8 	bl	800fd24 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	88db      	ldrh	r3, [r3, #6]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff7e:	d003      	beq.n	800ff88 <etharp_input+0xb8>
 800ff80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff84:	d01e      	beq.n	800ffc4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800ff86:	e025      	b.n	800ffd4 <etharp_input+0x104>
    if (for_us) {
 800ff88:	7dfb      	ldrb	r3, [r7, #23]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d021      	beq.n	800ffd2 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800ffa4:	693a      	ldr	r2, [r7, #16]
 800ffa6:	3208      	adds	r2, #8
      etharp_raw(netif,
 800ffa8:	2102      	movs	r1, #2
 800ffaa:	9103      	str	r1, [sp, #12]
 800ffac:	f107 010c 	add.w	r1, r7, #12
 800ffb0:	9102      	str	r1, [sp, #8]
 800ffb2:	9201      	str	r2, [sp, #4]
 800ffb4:	9300      	str	r3, [sp, #0]
 800ffb6:	462b      	mov	r3, r5
 800ffb8:	4622      	mov	r2, r4
 800ffba:	4601      	mov	r1, r0
 800ffbc:	6838      	ldr	r0, [r7, #0]
 800ffbe:	f000 fae7 	bl	8010590 <etharp_raw>
    break;
 800ffc2:	e006      	b.n	800ffd2 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800ffc4:	f107 030c 	add.w	r3, r7, #12
 800ffc8:	4619      	mov	r1, r3
 800ffca:	6838      	ldr	r0, [r7, #0]
 800ffcc:	f7fe f980 	bl	800e2d0 <dhcp_arp_reply>
    break;
 800ffd0:	e000      	b.n	800ffd4 <etharp_input+0x104>
    break;
 800ffd2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7f8 fb67 	bl	80086a8 <pbuf_free>
}
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bdb0      	pop	{r4, r5, r7, pc}
 800ffe0:	08016384 	.word	0x08016384
 800ffe4:	080164d4 	.word	0x080164d4
 800ffe8:	080163fc 	.word	0x080163fc

0800ffec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b086      	sub	sp, #24
 800fff0:	af02      	add	r7, sp, #8
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	4613      	mov	r3, r2
 800fff8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fffa:	79fa      	ldrb	r2, [r7, #7]
 800fffc:	4944      	ldr	r1, [pc, #272]	; (8010110 <etharp_output_to_arp_index+0x124>)
 800fffe:	4613      	mov	r3, r2
 8010000:	005b      	lsls	r3, r3, #1
 8010002:	4413      	add	r3, r2
 8010004:	00db      	lsls	r3, r3, #3
 8010006:	440b      	add	r3, r1
 8010008:	3314      	adds	r3, #20
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d806      	bhi.n	801001e <etharp_output_to_arp_index+0x32>
 8010010:	4b40      	ldr	r3, [pc, #256]	; (8010114 <etharp_output_to_arp_index+0x128>)
 8010012:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010016:	4940      	ldr	r1, [pc, #256]	; (8010118 <etharp_output_to_arp_index+0x12c>)
 8010018:	4840      	ldr	r0, [pc, #256]	; (801011c <etharp_output_to_arp_index+0x130>)
 801001a:	f003 fdc3 	bl	8013ba4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801001e:	79fa      	ldrb	r2, [r7, #7]
 8010020:	493b      	ldr	r1, [pc, #236]	; (8010110 <etharp_output_to_arp_index+0x124>)
 8010022:	4613      	mov	r3, r2
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	4413      	add	r3, r2
 8010028:	00db      	lsls	r3, r3, #3
 801002a:	440b      	add	r3, r1
 801002c:	3314      	adds	r3, #20
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	2b02      	cmp	r3, #2
 8010032:	d153      	bne.n	80100dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010034:	79fa      	ldrb	r2, [r7, #7]
 8010036:	4936      	ldr	r1, [pc, #216]	; (8010110 <etharp_output_to_arp_index+0x124>)
 8010038:	4613      	mov	r3, r2
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	4413      	add	r3, r2
 801003e:	00db      	lsls	r3, r3, #3
 8010040:	440b      	add	r3, r1
 8010042:	3312      	adds	r3, #18
 8010044:	881b      	ldrh	r3, [r3, #0]
 8010046:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801004a:	d919      	bls.n	8010080 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801004c:	79fa      	ldrb	r2, [r7, #7]
 801004e:	4613      	mov	r3, r2
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	4413      	add	r3, r2
 8010054:	00db      	lsls	r3, r3, #3
 8010056:	4a2e      	ldr	r2, [pc, #184]	; (8010110 <etharp_output_to_arp_index+0x124>)
 8010058:	4413      	add	r3, r2
 801005a:	3304      	adds	r3, #4
 801005c:	4619      	mov	r1, r3
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f000 fb44 	bl	80106ec <etharp_request>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d138      	bne.n	80100dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801006a:	79fa      	ldrb	r2, [r7, #7]
 801006c:	4928      	ldr	r1, [pc, #160]	; (8010110 <etharp_output_to_arp_index+0x124>)
 801006e:	4613      	mov	r3, r2
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	4413      	add	r3, r2
 8010074:	00db      	lsls	r3, r3, #3
 8010076:	440b      	add	r3, r1
 8010078:	3314      	adds	r3, #20
 801007a:	2203      	movs	r2, #3
 801007c:	701a      	strb	r2, [r3, #0]
 801007e:	e02d      	b.n	80100dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010080:	79fa      	ldrb	r2, [r7, #7]
 8010082:	4923      	ldr	r1, [pc, #140]	; (8010110 <etharp_output_to_arp_index+0x124>)
 8010084:	4613      	mov	r3, r2
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	4413      	add	r3, r2
 801008a:	00db      	lsls	r3, r3, #3
 801008c:	440b      	add	r3, r1
 801008e:	3312      	adds	r3, #18
 8010090:	881b      	ldrh	r3, [r3, #0]
 8010092:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010096:	d321      	bcc.n	80100dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010098:	79fa      	ldrb	r2, [r7, #7]
 801009a:	4613      	mov	r3, r2
 801009c:	005b      	lsls	r3, r3, #1
 801009e:	4413      	add	r3, r2
 80100a0:	00db      	lsls	r3, r3, #3
 80100a2:	4a1b      	ldr	r2, [pc, #108]	; (8010110 <etharp_output_to_arp_index+0x124>)
 80100a4:	4413      	add	r3, r2
 80100a6:	1d19      	adds	r1, r3, #4
 80100a8:	79fa      	ldrb	r2, [r7, #7]
 80100aa:	4613      	mov	r3, r2
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	4413      	add	r3, r2
 80100b0:	00db      	lsls	r3, r3, #3
 80100b2:	3308      	adds	r3, #8
 80100b4:	4a16      	ldr	r2, [pc, #88]	; (8010110 <etharp_output_to_arp_index+0x124>)
 80100b6:	4413      	add	r3, r2
 80100b8:	3304      	adds	r3, #4
 80100ba:	461a      	mov	r2, r3
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f000 faf3 	bl	80106a8 <etharp_request_dst>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d109      	bne.n	80100dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80100c8:	79fa      	ldrb	r2, [r7, #7]
 80100ca:	4911      	ldr	r1, [pc, #68]	; (8010110 <etharp_output_to_arp_index+0x124>)
 80100cc:	4613      	mov	r3, r2
 80100ce:	005b      	lsls	r3, r3, #1
 80100d0:	4413      	add	r3, r2
 80100d2:	00db      	lsls	r3, r3, #3
 80100d4:	440b      	add	r3, r1
 80100d6:	3314      	adds	r3, #20
 80100d8:	2203      	movs	r2, #3
 80100da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80100e2:	79fa      	ldrb	r2, [r7, #7]
 80100e4:	4613      	mov	r3, r2
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	4413      	add	r3, r2
 80100ea:	00db      	lsls	r3, r3, #3
 80100ec:	3308      	adds	r3, #8
 80100ee:	4a08      	ldr	r2, [pc, #32]	; (8010110 <etharp_output_to_arp_index+0x124>)
 80100f0:	4413      	add	r3, r2
 80100f2:	1d1a      	adds	r2, r3, #4
 80100f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	4613      	mov	r3, r2
 80100fc:	460a      	mov	r2, r1
 80100fe:	68b9      	ldr	r1, [r7, #8]
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f001 fdcd 	bl	8011ca0 <ethernet_output>
 8010106:	4603      	mov	r3, r0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	2000028c 	.word	0x2000028c
 8010114:	08016384 	.word	0x08016384
 8010118:	080164f4 	.word	0x080164f4
 801011c:	080163fc 	.word	0x080163fc

08010120 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b08a      	sub	sp, #40	; 0x28
 8010124:	af02      	add	r7, sp, #8
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d106      	bne.n	8010144 <etharp_output+0x24>
 8010136:	4b69      	ldr	r3, [pc, #420]	; (80102dc <etharp_output+0x1bc>)
 8010138:	f240 321b 	movw	r2, #795	; 0x31b
 801013c:	4968      	ldr	r1, [pc, #416]	; (80102e0 <etharp_output+0x1c0>)
 801013e:	4869      	ldr	r0, [pc, #420]	; (80102e4 <etharp_output+0x1c4>)
 8010140:	f003 fd30 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <etharp_output+0x38>
 801014a:	4b64      	ldr	r3, [pc, #400]	; (80102dc <etharp_output+0x1bc>)
 801014c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010150:	4965      	ldr	r1, [pc, #404]	; (80102e8 <etharp_output+0x1c8>)
 8010152:	4864      	ldr	r0, [pc, #400]	; (80102e4 <etharp_output+0x1c4>)
 8010154:	f003 fd26 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <etharp_output+0x4c>
 801015e:	4b5f      	ldr	r3, [pc, #380]	; (80102dc <etharp_output+0x1bc>)
 8010160:	f240 321d 	movw	r2, #797	; 0x31d
 8010164:	4961      	ldr	r1, [pc, #388]	; (80102ec <etharp_output+0x1cc>)
 8010166:	485f      	ldr	r0, [pc, #380]	; (80102e4 <etharp_output+0x1c4>)
 8010168:	f003 fd1c 	bl	8013ba4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68f9      	ldr	r1, [r7, #12]
 8010172:	4618      	mov	r0, r3
 8010174:	f000 fef2 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d002      	beq.n	8010184 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801017e:	4b5c      	ldr	r3, [pc, #368]	; (80102f0 <etharp_output+0x1d0>)
 8010180:	61fb      	str	r3, [r7, #28]
 8010182:	e09b      	b.n	80102bc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801018c:	2be0      	cmp	r3, #224	; 0xe0
 801018e:	d118      	bne.n	80101c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010190:	2301      	movs	r3, #1
 8010192:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010194:	2300      	movs	r3, #0
 8010196:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010198:	235e      	movs	r3, #94	; 0x5e
 801019a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3301      	adds	r3, #1
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	3302      	adds	r3, #2
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	3303      	adds	r3, #3
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80101ba:	f107 0310 	add.w	r3, r7, #16
 80101be:	61fb      	str	r3, [r7, #28]
 80101c0:	e07c      	b.n	80102bc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	3304      	adds	r3, #4
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	405a      	eors	r2, r3
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	3308      	adds	r3, #8
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4013      	ands	r3, r2
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d012      	beq.n	8010200 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80101e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d00b      	beq.n	8010200 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	330c      	adds	r3, #12
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d003      	beq.n	80101fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	330c      	adds	r3, #12
 80101f6:	61bb      	str	r3, [r7, #24]
 80101f8:	e002      	b.n	8010200 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80101fa:	f06f 0303 	mvn.w	r3, #3
 80101fe:	e069      	b.n	80102d4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010200:	4b3c      	ldr	r3, [pc, #240]	; (80102f4 <etharp_output+0x1d4>)
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	4619      	mov	r1, r3
 8010206:	4a3c      	ldr	r2, [pc, #240]	; (80102f8 <etharp_output+0x1d8>)
 8010208:	460b      	mov	r3, r1
 801020a:	005b      	lsls	r3, r3, #1
 801020c:	440b      	add	r3, r1
 801020e:	00db      	lsls	r3, r3, #3
 8010210:	4413      	add	r3, r2
 8010212:	3314      	adds	r3, #20
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	2b01      	cmp	r3, #1
 8010218:	d917      	bls.n	801024a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	4b35      	ldr	r3, [pc, #212]	; (80102f4 <etharp_output+0x1d4>)
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	4618      	mov	r0, r3
 8010224:	4934      	ldr	r1, [pc, #208]	; (80102f8 <etharp_output+0x1d8>)
 8010226:	4603      	mov	r3, r0
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	4403      	add	r3, r0
 801022c:	00db      	lsls	r3, r3, #3
 801022e:	440b      	add	r3, r1
 8010230:	3304      	adds	r3, #4
 8010232:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010234:	429a      	cmp	r2, r3
 8010236:	d108      	bne.n	801024a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010238:	4b2e      	ldr	r3, [pc, #184]	; (80102f4 <etharp_output+0x1d4>)
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	461a      	mov	r2, r3
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f7ff fed3 	bl	800ffec <etharp_output_to_arp_index>
 8010246:	4603      	mov	r3, r0
 8010248:	e044      	b.n	80102d4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801024a:	2300      	movs	r3, #0
 801024c:	75fb      	strb	r3, [r7, #23]
 801024e:	e02a      	b.n	80102a6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010250:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010254:	4928      	ldr	r1, [pc, #160]	; (80102f8 <etharp_output+0x1d8>)
 8010256:	4613      	mov	r3, r2
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	4413      	add	r3, r2
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	440b      	add	r3, r1
 8010260:	3314      	adds	r3, #20
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d918      	bls.n	801029a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	6819      	ldr	r1, [r3, #0]
 801026c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010270:	4821      	ldr	r0, [pc, #132]	; (80102f8 <etharp_output+0x1d8>)
 8010272:	4613      	mov	r3, r2
 8010274:	005b      	lsls	r3, r3, #1
 8010276:	4413      	add	r3, r2
 8010278:	00db      	lsls	r3, r3, #3
 801027a:	4403      	add	r3, r0
 801027c:	3304      	adds	r3, #4
 801027e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010280:	4299      	cmp	r1, r3
 8010282:	d10a      	bne.n	801029a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010284:	7dfa      	ldrb	r2, [r7, #23]
 8010286:	4b1b      	ldr	r3, [pc, #108]	; (80102f4 <etharp_output+0x1d4>)
 8010288:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801028a:	7dfb      	ldrb	r3, [r7, #23]
 801028c:	461a      	mov	r2, r3
 801028e:	68b9      	ldr	r1, [r7, #8]
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f7ff feab 	bl	800ffec <etharp_output_to_arp_index>
 8010296:	4603      	mov	r3, r0
 8010298:	e01c      	b.n	80102d4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801029a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	3301      	adds	r3, #1
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	75fb      	strb	r3, [r7, #23]
 80102a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80102aa:	2b09      	cmp	r3, #9
 80102ac:	ddd0      	ble.n	8010250 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	69b9      	ldr	r1, [r7, #24]
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f000 f822 	bl	80102fc <etharp_query>
 80102b8:	4603      	mov	r3, r0
 80102ba:	e00b      	b.n	80102d4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80102c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	68b9      	ldr	r1, [r7, #8]
 80102cc:	68f8      	ldr	r0, [r7, #12]
 80102ce:	f001 fce7 	bl	8011ca0 <ethernet_output>
 80102d2:	4603      	mov	r3, r0
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3720      	adds	r7, #32
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	08016384 	.word	0x08016384
 80102e0:	080164d4 	.word	0x080164d4
 80102e4:	080163fc 	.word	0x080163fc
 80102e8:	08016524 	.word	0x08016524
 80102ec:	080164c4 	.word	0x080164c4
 80102f0:	08016b78 	.word	0x08016b78
 80102f4:	2000037c 	.word	0x2000037c
 80102f8:	2000028c 	.word	0x2000028c

080102fc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b08c      	sub	sp, #48	; 0x30
 8010300:	af02      	add	r7, sp, #8
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	3329      	adds	r3, #41	; 0x29
 801030c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801030e:	23ff      	movs	r3, #255	; 0xff
 8010310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	68f9      	ldr	r1, [r7, #12]
 801031e:	4618      	mov	r0, r3
 8010320:	f000 fe1c 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10c      	bne.n	8010344 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010332:	2be0      	cmp	r3, #224	; 0xe0
 8010334:	d006      	beq.n	8010344 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d003      	beq.n	8010344 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d102      	bne.n	801034a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010344:	f06f 030f 	mvn.w	r3, #15
 8010348:	e10f      	b.n	801056a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801034a:	68fa      	ldr	r2, [r7, #12]
 801034c:	2101      	movs	r1, #1
 801034e:	68b8      	ldr	r0, [r7, #8]
 8010350:	f7ff fb9e 	bl	800fa90 <etharp_find_entry>
 8010354:	4603      	mov	r3, r0
 8010356:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010358:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801035c:	2b00      	cmp	r3, #0
 801035e:	da02      	bge.n	8010366 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010360:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010364:	e101      	b.n	801056a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010366:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801036a:	4982      	ldr	r1, [pc, #520]	; (8010574 <etharp_query+0x278>)
 801036c:	4613      	mov	r3, r2
 801036e:	005b      	lsls	r3, r3, #1
 8010370:	4413      	add	r3, r2
 8010372:	00db      	lsls	r3, r3, #3
 8010374:	440b      	add	r3, r1
 8010376:	3314      	adds	r3, #20
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d117      	bne.n	80103ae <etharp_query+0xb2>
    is_new_entry = 1;
 801037e:	2301      	movs	r3, #1
 8010380:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010382:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010386:	497b      	ldr	r1, [pc, #492]	; (8010574 <etharp_query+0x278>)
 8010388:	4613      	mov	r3, r2
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	4413      	add	r3, r2
 801038e:	00db      	lsls	r3, r3, #3
 8010390:	440b      	add	r3, r1
 8010392:	3314      	adds	r3, #20
 8010394:	2201      	movs	r2, #1
 8010396:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010398:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801039c:	4975      	ldr	r1, [pc, #468]	; (8010574 <etharp_query+0x278>)
 801039e:	4613      	mov	r3, r2
 80103a0:	005b      	lsls	r3, r3, #1
 80103a2:	4413      	add	r3, r2
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	440b      	add	r3, r1
 80103a8:	3308      	adds	r3, #8
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80103ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80103b2:	4970      	ldr	r1, [pc, #448]	; (8010574 <etharp_query+0x278>)
 80103b4:	4613      	mov	r3, r2
 80103b6:	005b      	lsls	r3, r3, #1
 80103b8:	4413      	add	r3, r2
 80103ba:	00db      	lsls	r3, r3, #3
 80103bc:	440b      	add	r3, r1
 80103be:	3314      	adds	r3, #20
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d012      	beq.n	80103ec <etharp_query+0xf0>
 80103c6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80103ca:	496a      	ldr	r1, [pc, #424]	; (8010574 <etharp_query+0x278>)
 80103cc:	4613      	mov	r3, r2
 80103ce:	005b      	lsls	r3, r3, #1
 80103d0:	4413      	add	r3, r2
 80103d2:	00db      	lsls	r3, r3, #3
 80103d4:	440b      	add	r3, r1
 80103d6:	3314      	adds	r3, #20
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d806      	bhi.n	80103ec <etharp_query+0xf0>
 80103de:	4b66      	ldr	r3, [pc, #408]	; (8010578 <etharp_query+0x27c>)
 80103e0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80103e4:	4965      	ldr	r1, [pc, #404]	; (801057c <etharp_query+0x280>)
 80103e6:	4866      	ldr	r0, [pc, #408]	; (8010580 <etharp_query+0x284>)
 80103e8:	f003 fbdc 	bl	8013ba4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80103ec:	6a3b      	ldr	r3, [r7, #32]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d102      	bne.n	80103f8 <etharp_query+0xfc>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d10c      	bne.n	8010412 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80103f8:	68b9      	ldr	r1, [r7, #8]
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f000 f976 	bl	80106ec <etharp_request>
 8010400:	4603      	mov	r3, r0
 8010402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d102      	bne.n	8010412 <etharp_query+0x116>
      return result;
 801040c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010410:	e0ab      	b.n	801056a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d106      	bne.n	8010426 <etharp_query+0x12a>
 8010418:	4b57      	ldr	r3, [pc, #348]	; (8010578 <etharp_query+0x27c>)
 801041a:	f240 32db 	movw	r2, #987	; 0x3db
 801041e:	4959      	ldr	r1, [pc, #356]	; (8010584 <etharp_query+0x288>)
 8010420:	4857      	ldr	r0, [pc, #348]	; (8010580 <etharp_query+0x284>)
 8010422:	f003 fbbf 	bl	8013ba4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010426:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801042a:	4952      	ldr	r1, [pc, #328]	; (8010574 <etharp_query+0x278>)
 801042c:	4613      	mov	r3, r2
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	4413      	add	r3, r2
 8010432:	00db      	lsls	r3, r3, #3
 8010434:	440b      	add	r3, r1
 8010436:	3314      	adds	r3, #20
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d919      	bls.n	8010472 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801043e:	7cfa      	ldrb	r2, [r7, #19]
 8010440:	4b51      	ldr	r3, [pc, #324]	; (8010588 <etharp_query+0x28c>)
 8010442:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010444:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010448:	4613      	mov	r3, r2
 801044a:	005b      	lsls	r3, r3, #1
 801044c:	4413      	add	r3, r2
 801044e:	00db      	lsls	r3, r3, #3
 8010450:	3308      	adds	r3, #8
 8010452:	4a48      	ldr	r2, [pc, #288]	; (8010574 <etharp_query+0x278>)
 8010454:	4413      	add	r3, r2
 8010456:	1d1a      	adds	r2, r3, #4
 8010458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	4613      	mov	r3, r2
 8010460:	697a      	ldr	r2, [r7, #20]
 8010462:	6879      	ldr	r1, [r7, #4]
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f001 fc1b 	bl	8011ca0 <ethernet_output>
 801046a:	4603      	mov	r3, r0
 801046c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010470:	e079      	b.n	8010566 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010472:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010476:	493f      	ldr	r1, [pc, #252]	; (8010574 <etharp_query+0x278>)
 8010478:	4613      	mov	r3, r2
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	4413      	add	r3, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	440b      	add	r3, r1
 8010482:	3314      	adds	r3, #20
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b01      	cmp	r3, #1
 8010488:	d16d      	bne.n	8010566 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801048a:	2300      	movs	r3, #0
 801048c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010492:	e01a      	b.n	80104ca <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	895a      	ldrh	r2, [r3, #10]
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	891b      	ldrh	r3, [r3, #8]
 801049c:	429a      	cmp	r2, r3
 801049e:	d10a      	bne.n	80104b6 <etharp_query+0x1ba>
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d006      	beq.n	80104b6 <etharp_query+0x1ba>
 80104a8:	4b33      	ldr	r3, [pc, #204]	; (8010578 <etharp_query+0x27c>)
 80104aa:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80104ae:	4937      	ldr	r1, [pc, #220]	; (801058c <etharp_query+0x290>)
 80104b0:	4833      	ldr	r0, [pc, #204]	; (8010580 <etharp_query+0x284>)
 80104b2:	f003 fb77 	bl	8013ba4 <iprintf>
      if (p->type != PBUF_ROM) {
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	7b1b      	ldrb	r3, [r3, #12]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d002      	beq.n	80104c4 <etharp_query+0x1c8>
        copy_needed = 1;
 80104be:	2301      	movs	r3, #1
 80104c0:	61bb      	str	r3, [r7, #24]
        break;
 80104c2:	e005      	b.n	80104d0 <etharp_query+0x1d4>
      }
      p = p->next;
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d1e1      	bne.n	8010494 <etharp_query+0x198>
    }
    if (copy_needed) {
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d017      	beq.n	8010506 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	891b      	ldrh	r3, [r3, #8]
 80104da:	2200      	movs	r2, #0
 80104dc:	4619      	mov	r1, r3
 80104de:	2002      	movs	r0, #2
 80104e0:	f7f7 fd70 	bl	8007fc4 <pbuf_alloc>
 80104e4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d011      	beq.n	8010510 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 80104ec:	6879      	ldr	r1, [r7, #4]
 80104ee:	69f8      	ldr	r0, [r7, #28]
 80104f0:	f7f8 fa0e 	bl	8008910 <pbuf_copy>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00a      	beq.n	8010510 <etharp_query+0x214>
          pbuf_free(p);
 80104fa:	69f8      	ldr	r0, [r7, #28]
 80104fc:	f7f8 f8d4 	bl	80086a8 <pbuf_free>
          p = NULL;
 8010500:	2300      	movs	r3, #0
 8010502:	61fb      	str	r3, [r7, #28]
 8010504:	e004      	b.n	8010510 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801050a:	69f8      	ldr	r0, [r7, #28]
 801050c:	f7f8 f978 	bl	8008800 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d024      	beq.n	8010560 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010516:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801051a:	4916      	ldr	r1, [pc, #88]	; (8010574 <etharp_query+0x278>)
 801051c:	4613      	mov	r3, r2
 801051e:	005b      	lsls	r3, r3, #1
 8010520:	4413      	add	r3, r2
 8010522:	00db      	lsls	r3, r3, #3
 8010524:	440b      	add	r3, r1
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d00b      	beq.n	8010544 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801052c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010530:	4910      	ldr	r1, [pc, #64]	; (8010574 <etharp_query+0x278>)
 8010532:	4613      	mov	r3, r2
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	4413      	add	r3, r2
 8010538:	00db      	lsls	r3, r3, #3
 801053a:	440b      	add	r3, r1
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4618      	mov	r0, r3
 8010540:	f7f8 f8b2 	bl	80086a8 <pbuf_free>
      }
      arp_table[i].q = p;
 8010544:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010548:	490a      	ldr	r1, [pc, #40]	; (8010574 <etharp_query+0x278>)
 801054a:	4613      	mov	r3, r2
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	4413      	add	r3, r2
 8010550:	00db      	lsls	r3, r3, #3
 8010552:	440b      	add	r3, r1
 8010554:	69fa      	ldr	r2, [r7, #28]
 8010556:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010558:	2300      	movs	r3, #0
 801055a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801055e:	e002      	b.n	8010566 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010560:	23ff      	movs	r3, #255	; 0xff
 8010562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010566:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801056a:	4618      	mov	r0, r3
 801056c:	3728      	adds	r7, #40	; 0x28
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	2000028c 	.word	0x2000028c
 8010578:	08016384 	.word	0x08016384
 801057c:	08016530 	.word	0x08016530
 8010580:	080163fc 	.word	0x080163fc
 8010584:	08016524 	.word	0x08016524
 8010588:	2000037c 	.word	0x2000037c
 801058c:	08016558 	.word	0x08016558

08010590 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b08a      	sub	sp, #40	; 0x28
 8010594:	af02      	add	r7, sp, #8
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	607a      	str	r2, [r7, #4]
 801059c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801059e:	2300      	movs	r3, #0
 80105a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d106      	bne.n	80105b6 <etharp_raw+0x26>
 80105a8:	4b3a      	ldr	r3, [pc, #232]	; (8010694 <etharp_raw+0x104>)
 80105aa:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80105ae:	493a      	ldr	r1, [pc, #232]	; (8010698 <etharp_raw+0x108>)
 80105b0:	483a      	ldr	r0, [pc, #232]	; (801069c <etharp_raw+0x10c>)
 80105b2:	f003 faf7 	bl	8013ba4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80105b6:	2200      	movs	r2, #0
 80105b8:	211c      	movs	r1, #28
 80105ba:	2002      	movs	r0, #2
 80105bc:	f7f7 fd02 	bl	8007fc4 <pbuf_alloc>
 80105c0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80105c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105cc:	e05d      	b.n	801068a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	895b      	ldrh	r3, [r3, #10]
 80105d2:	2b1b      	cmp	r3, #27
 80105d4:	d806      	bhi.n	80105e4 <etharp_raw+0x54>
 80105d6:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <etharp_raw+0x104>)
 80105d8:	f240 4264 	movw	r2, #1124	; 0x464
 80105dc:	4930      	ldr	r1, [pc, #192]	; (80106a0 <etharp_raw+0x110>)
 80105de:	482f      	ldr	r0, [pc, #188]	; (801069c <etharp_raw+0x10c>)
 80105e0:	f003 fae0 	bl	8013ba4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80105ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7f6 ff53 	bl	8007498 <lwip_htons>
 80105f2:	4603      	mov	r3, r0
 80105f4:	461a      	mov	r2, r3
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010600:	2b06      	cmp	r3, #6
 8010602:	d006      	beq.n	8010612 <etharp_raw+0x82>
 8010604:	4b23      	ldr	r3, [pc, #140]	; (8010694 <etharp_raw+0x104>)
 8010606:	f240 426b 	movw	r2, #1131	; 0x46b
 801060a:	4926      	ldr	r1, [pc, #152]	; (80106a4 <etharp_raw+0x114>)
 801060c:	4823      	ldr	r0, [pc, #140]	; (801069c <etharp_raw+0x10c>)
 801060e:	f003 fac9 	bl	8013ba4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	3308      	adds	r3, #8
 8010616:	2206      	movs	r2, #6
 8010618:	6839      	ldr	r1, [r7, #0]
 801061a:	4618      	mov	r0, r3
 801061c:	f003 fa07 	bl	8013a2e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	3312      	adds	r3, #18
 8010624:	2206      	movs	r2, #6
 8010626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010628:	4618      	mov	r0, r3
 801062a:	f003 fa00 	bl	8013a2e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	330e      	adds	r3, #14
 8010632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010634:	6812      	ldr	r2, [r2, #0]
 8010636:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	3318      	adds	r3, #24
 801063c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801063e:	6812      	ldr	r2, [r2, #0]
 8010640:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	2200      	movs	r2, #0
 8010646:	701a      	strb	r2, [r3, #0]
 8010648:	2200      	movs	r2, #0
 801064a:	f042 0201 	orr.w	r2, r2, #1
 801064e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	2200      	movs	r2, #0
 8010654:	f042 0208 	orr.w	r2, r2, #8
 8010658:	709a      	strb	r2, [r3, #2]
 801065a:	2200      	movs	r2, #0
 801065c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	2206      	movs	r2, #6
 8010662:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	2204      	movs	r2, #4
 8010668:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801066a:	f640 0306 	movw	r3, #2054	; 0x806
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	69b9      	ldr	r1, [r7, #24]
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	f001 fb12 	bl	8011ca0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801067c:	69b8      	ldr	r0, [r7, #24]
 801067e:	f7f8 f813 	bl	80086a8 <pbuf_free>
  p = NULL;
 8010682:	2300      	movs	r3, #0
 8010684:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010686:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3720      	adds	r7, #32
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	08016384 	.word	0x08016384
 8010698:	080164d4 	.word	0x080164d4
 801069c:	080163fc 	.word	0x080163fc
 80106a0:	08016574 	.word	0x08016574
 80106a4:	080165a8 	.word	0x080165a8

080106a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b088      	sub	sp, #32
 80106ac:	af04      	add	r7, sp, #16
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80106c4:	2201      	movs	r2, #1
 80106c6:	9203      	str	r2, [sp, #12]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	9202      	str	r2, [sp, #8]
 80106cc:	4a06      	ldr	r2, [pc, #24]	; (80106e8 <etharp_request_dst+0x40>)
 80106ce:	9201      	str	r2, [sp, #4]
 80106d0:	9300      	str	r3, [sp, #0]
 80106d2:	4603      	mov	r3, r0
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	f7ff ff5a 	bl	8010590 <etharp_raw>
 80106dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	08016b80 	.word	0x08016b80

080106ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80106f6:	4a05      	ldr	r2, [pc, #20]	; (801070c <etharp_request+0x20>)
 80106f8:	6839      	ldr	r1, [r7, #0]
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f7ff ffd4 	bl	80106a8 <etharp_request_dst>
 8010700:	4603      	mov	r3, r0
}
 8010702:	4618      	mov	r0, r3
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	08016b78 	.word	0x08016b78

08010710 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b08e      	sub	sp, #56	; 0x38
 8010714:	af04      	add	r7, sp, #16
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801071a:	4b7a      	ldr	r3, [pc, #488]	; (8010904 <icmp_input+0x1f4>)
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	b29b      	uxth	r3, r3
 8010726:	f003 030f 	and.w	r3, r3, #15
 801072a:	b29b      	uxth	r3, r3
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010732:	2b13      	cmp	r3, #19
 8010734:	f240 80d1 	bls.w	80108da <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	895b      	ldrh	r3, [r3, #10]
 801073c:	2b03      	cmp	r3, #3
 801073e:	f240 80ce 	bls.w	80108de <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801074c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010750:	2b00      	cmp	r3, #0
 8010752:	f000 80bb 	beq.w	80108cc <icmp_input+0x1bc>
 8010756:	2b08      	cmp	r3, #8
 8010758:	f040 80bb 	bne.w	80108d2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801075c:	4b6a      	ldr	r3, [pc, #424]	; (8010908 <icmp_input+0x1f8>)
 801075e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010760:	4b68      	ldr	r3, [pc, #416]	; (8010904 <icmp_input+0x1f4>)
 8010762:	695b      	ldr	r3, [r3, #20]
 8010764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010768:	2be0      	cmp	r3, #224	; 0xe0
 801076a:	f000 80bf 	beq.w	80108ec <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801076e:	4b65      	ldr	r3, [pc, #404]	; (8010904 <icmp_input+0x1f4>)
 8010770:	695a      	ldr	r2, [r3, #20]
 8010772:	4b64      	ldr	r3, [pc, #400]	; (8010904 <icmp_input+0x1f4>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4619      	mov	r1, r3
 8010778:	4610      	mov	r0, r2
 801077a:	f000 fbef 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	f040 80b5 	bne.w	80108f0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	891b      	ldrh	r3, [r3, #8]
 801078a:	2b07      	cmp	r3, #7
 801078c:	f240 80a9 	bls.w	80108e2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8010790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010792:	330e      	adds	r3, #14
 8010794:	b29b      	uxth	r3, r3
 8010796:	b21b      	sxth	r3, r3
 8010798:	4619      	mov	r1, r3
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7f7 ff60 	bl	8008660 <pbuf_header>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d046      	beq.n	8010834 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	891a      	ldrh	r2, [r3, #8]
 80107aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107ac:	4413      	add	r3, r2
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	2200      	movs	r2, #0
 80107b2:	4619      	mov	r1, r3
 80107b4:	2002      	movs	r0, #2
 80107b6:	f7f7 fc05 	bl	8007fc4 <pbuf_alloc>
 80107ba:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f000 8098 	beq.w	80108f4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	895b      	ldrh	r3, [r3, #10]
 80107c8:	461a      	mov	r2, r3
 80107ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107cc:	3308      	adds	r3, #8
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d203      	bcs.n	80107da <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80107d2:	69b8      	ldr	r0, [r7, #24]
 80107d4:	f7f7 ff68 	bl	80086a8 <pbuf_free>
        goto icmperr;
 80107d8:	e08d      	b.n	80108f6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80107e2:	4618      	mov	r0, r3
 80107e4:	f003 f923 	bl	8013a2e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80107e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107ea:	425b      	negs	r3, r3
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	b21b      	sxth	r3, r3
 80107f0:	4619      	mov	r1, r3
 80107f2:	69b8      	ldr	r0, [r7, #24]
 80107f4:	f7f7 ff34 	bl	8008660 <pbuf_header>
 80107f8:	4603      	mov	r3, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d009      	beq.n	8010812 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80107fe:	4b43      	ldr	r3, [pc, #268]	; (801090c <icmp_input+0x1fc>)
 8010800:	22af      	movs	r2, #175	; 0xaf
 8010802:	4943      	ldr	r1, [pc, #268]	; (8010910 <icmp_input+0x200>)
 8010804:	4843      	ldr	r0, [pc, #268]	; (8010914 <icmp_input+0x204>)
 8010806:	f003 f9cd 	bl	8013ba4 <iprintf>
        pbuf_free(r);
 801080a:	69b8      	ldr	r0, [r7, #24]
 801080c:	f7f7 ff4c 	bl	80086a8 <pbuf_free>
        goto icmperr;
 8010810:	e071      	b.n	80108f6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8010812:	6879      	ldr	r1, [r7, #4]
 8010814:	69b8      	ldr	r0, [r7, #24]
 8010816:	f7f8 f87b 	bl	8008910 <pbuf_copy>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8010820:	69b8      	ldr	r0, [r7, #24]
 8010822:	f7f7 ff41 	bl	80086a8 <pbuf_free>
        goto icmperr;
 8010826:	e066      	b.n	80108f6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7f7 ff3d 	bl	80086a8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	607b      	str	r3, [r7, #4]
 8010832:	e015      	b.n	8010860 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8010834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010836:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801083a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801083e:	33f2      	adds	r3, #242	; 0xf2
 8010840:	b29b      	uxth	r3, r3
 8010842:	b21b      	sxth	r3, r3
 8010844:	4619      	mov	r1, r3
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f7f7 ff0a 	bl	8008660 <pbuf_header>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d006      	beq.n	8010860 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010852:	4b2e      	ldr	r3, [pc, #184]	; (801090c <icmp_input+0x1fc>)
 8010854:	22c0      	movs	r2, #192	; 0xc0
 8010856:	4930      	ldr	r1, [pc, #192]	; (8010918 <icmp_input+0x208>)
 8010858:	482e      	ldr	r0, [pc, #184]	; (8010914 <icmp_input+0x204>)
 801085a:	f003 f9a3 	bl	8013ba4 <iprintf>
        goto icmperr;
 801085e:	e04a      	b.n	80108f6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8010866:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7f7 fef7 	bl	8008660 <pbuf_header>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d12b      	bne.n	80108d0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010886:	4b1f      	ldr	r3, [pc, #124]	; (8010904 <icmp_input+0x1f4>)
 8010888:	691a      	ldr	r2, [r3, #16]
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	2200      	movs	r2, #0
 8010892:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	2200      	movs	r2, #0
 8010898:	709a      	strb	r2, [r3, #2]
 801089a:	2200      	movs	r2, #0
 801089c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	22ff      	movs	r2, #255	; 0xff
 80108a2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	2200      	movs	r2, #0
 80108a8:	729a      	strb	r2, [r3, #10]
 80108aa:	2200      	movs	r2, #0
 80108ac:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	9302      	str	r3, [sp, #8]
 80108b2:	2301      	movs	r3, #1
 80108b4:	9301      	str	r3, [sp, #4]
 80108b6:	2300      	movs	r3, #0
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	23ff      	movs	r3, #255	; 0xff
 80108bc:	2200      	movs	r2, #0
 80108be:	69f9      	ldr	r1, [r7, #28]
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fa79 	bl	8010db8 <ip4_output_if>
 80108c6:	4603      	mov	r3, r0
 80108c8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80108ca:	e001      	b.n	80108d0 <icmp_input+0x1c0>
    break;
 80108cc:	bf00      	nop
 80108ce:	e000      	b.n	80108d2 <icmp_input+0x1c2>
    break;
 80108d0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7f7 fee8 	bl	80086a8 <pbuf_free>
  return;
 80108d8:	e011      	b.n	80108fe <icmp_input+0x1ee>
    goto lenerr;
 80108da:	bf00      	nop
 80108dc:	e002      	b.n	80108e4 <icmp_input+0x1d4>
    goto lenerr;
 80108de:	bf00      	nop
 80108e0:	e000      	b.n	80108e4 <icmp_input+0x1d4>
      goto lenerr;
 80108e2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7f7 fedf 	bl	80086a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80108ea:	e008      	b.n	80108fe <icmp_input+0x1ee>
      goto icmperr;
 80108ec:	bf00      	nop
 80108ee:	e002      	b.n	80108f6 <icmp_input+0x1e6>
      goto icmperr;
 80108f0:	bf00      	nop
 80108f2:	e000      	b.n	80108f6 <icmp_input+0x1e6>
        goto icmperr;
 80108f4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7f7 fed6 	bl	80086a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80108fc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80108fe:	3728      	adds	r7, #40	; 0x28
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	20000398 	.word	0x20000398
 8010908:	200003ac 	.word	0x200003ac
 801090c:	080165ec 	.word	0x080165ec
 8010910:	08016624 	.word	0x08016624
 8010914:	0801665c 	.word	0x0801665c
 8010918:	08016684 	.word	0x08016684

0801091c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	460b      	mov	r3, r1
 8010926:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010928:	78fb      	ldrb	r3, [r7, #3]
 801092a:	461a      	mov	r2, r3
 801092c:	2103      	movs	r1, #3
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f814 	bl	801095c <icmp_send_response>
}
 8010934:	bf00      	nop
 8010936:	3708      	adds	r7, #8
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	460b      	mov	r3, r1
 8010946:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010948:	78fb      	ldrb	r3, [r7, #3]
 801094a:	461a      	mov	r2, r3
 801094c:	210b      	movs	r1, #11
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 f804 	bl	801095c <icmp_send_response>
}
 8010954:	bf00      	nop
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b08c      	sub	sp, #48	; 0x30
 8010960:	af04      	add	r7, sp, #16
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	460b      	mov	r3, r1
 8010966:	70fb      	strb	r3, [r7, #3]
 8010968:	4613      	mov	r3, r2
 801096a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801096c:	2200      	movs	r2, #0
 801096e:	2124      	movs	r1, #36	; 0x24
 8010970:	2001      	movs	r0, #1
 8010972:	f7f7 fb27 	bl	8007fc4 <pbuf_alloc>
 8010976:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d04c      	beq.n	8010a18 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	895b      	ldrh	r3, [r3, #10]
 8010982:	2b23      	cmp	r3, #35	; 0x23
 8010984:	d806      	bhi.n	8010994 <icmp_send_response+0x38>
 8010986:	4b26      	ldr	r3, [pc, #152]	; (8010a20 <icmp_send_response+0xc4>)
 8010988:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801098c:	4925      	ldr	r1, [pc, #148]	; (8010a24 <icmp_send_response+0xc8>)
 801098e:	4826      	ldr	r0, [pc, #152]	; (8010a28 <icmp_send_response+0xcc>)
 8010990:	f003 f908 	bl	8013ba4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801099a:	69fb      	ldr	r3, [r7, #28]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	78fa      	ldrb	r2, [r7, #3]
 80109a4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	78ba      	ldrb	r2, [r7, #2]
 80109aa:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	2200      	movs	r2, #0
 80109b0:	711a      	strb	r2, [r3, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	2200      	movs	r2, #0
 80109ba:	719a      	strb	r2, [r3, #6]
 80109bc:	2200      	movs	r2, #0
 80109be:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	f103 0008 	add.w	r0, r3, #8
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	221c      	movs	r2, #28
 80109ce:	4619      	mov	r1, r3
 80109d0:	f003 f82d 	bl	8013a2e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80109da:	f107 030c 	add.w	r3, r7, #12
 80109de:	4618      	mov	r0, r3
 80109e0:	f000 f824 	bl	8010a2c <ip4_route>
 80109e4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d011      	beq.n	8010a10 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	2200      	movs	r2, #0
 80109f0:	709a      	strb	r2, [r3, #2]
 80109f2:	2200      	movs	r2, #0
 80109f4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80109f6:	f107 020c 	add.w	r2, r7, #12
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	9302      	str	r3, [sp, #8]
 80109fe:	2301      	movs	r3, #1
 8010a00:	9301      	str	r3, [sp, #4]
 8010a02:	2300      	movs	r3, #0
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	23ff      	movs	r3, #255	; 0xff
 8010a08:	2100      	movs	r1, #0
 8010a0a:	69f8      	ldr	r0, [r7, #28]
 8010a0c:	f000 f9d4 	bl	8010db8 <ip4_output_if>
  }
  pbuf_free(q);
 8010a10:	69f8      	ldr	r0, [r7, #28]
 8010a12:	f7f7 fe49 	bl	80086a8 <pbuf_free>
 8010a16:	e000      	b.n	8010a1a <icmp_send_response+0xbe>
    return;
 8010a18:	bf00      	nop
}
 8010a1a:	3720      	adds	r7, #32
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	080165ec 	.word	0x080165ec
 8010a24:	080166b8 	.word	0x080166b8
 8010a28:	0801665c 	.word	0x0801665c

08010a2c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8010a34:	4b30      	ldr	r3, [pc, #192]	; (8010af8 <ip4_route+0xcc>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	60fb      	str	r3, [r7, #12]
 8010a3a:	e036      	b.n	8010aaa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d02b      	beq.n	8010aa4 <ip4_route+0x78>
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010a52:	089b      	lsrs	r3, r3, #2
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d022      	beq.n	8010aa4 <ip4_route+0x78>
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	3304      	adds	r3, #4
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d01d      	beq.n	8010aa4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	3304      	adds	r3, #4
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	405a      	eors	r2, r3
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	3308      	adds	r3, #8
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4013      	ands	r3, r2
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d101      	bne.n	8010a84 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	e033      	b.n	8010aec <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010a8a:	f003 0302 	and.w	r3, r3, #2
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d108      	bne.n	8010aa4 <ip4_route+0x78>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	330c      	adds	r3, #12
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d101      	bne.n	8010aa4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	e023      	b.n	8010aec <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	60fb      	str	r3, [r7, #12]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1c5      	bne.n	8010a3c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010ab0:	4b12      	ldr	r3, [pc, #72]	; (8010afc <ip4_route+0xd0>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d015      	beq.n	8010ae4 <ip4_route+0xb8>
 8010ab8:	4b10      	ldr	r3, [pc, #64]	; (8010afc <ip4_route+0xd0>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010ac0:	f003 0301 	and.w	r3, r3, #1
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00d      	beq.n	8010ae4 <ip4_route+0xb8>
 8010ac8:	4b0c      	ldr	r3, [pc, #48]	; (8010afc <ip4_route+0xd0>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010ad0:	f003 0304 	and.w	r3, r3, #4
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d005      	beq.n	8010ae4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8010ad8:	4b08      	ldr	r3, [pc, #32]	; (8010afc <ip4_route+0xd0>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	3304      	adds	r3, #4
 8010ade:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d101      	bne.n	8010ae8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	e001      	b.n	8010aec <ip4_route+0xc0>
  }

  return netif_default;
 8010ae8:	4b04      	ldr	r3, [pc, #16]	; (8010afc <ip4_route+0xd0>)
 8010aea:	681b      	ldr	r3, [r3, #0]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr
 8010af8:	200038d8 	.word	0x200038d8
 8010afc:	200038dc 	.word	0x200038dc

08010b00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b088      	sub	sp, #32
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	091b      	lsrs	r3, r3, #4
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d004      	beq.n	8010b2a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7f7 fdc1 	bl	80086a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010b26:	2300      	movs	r3, #0
 8010b28:	e13e      	b.n	8010da8 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	f003 030f 	and.w	r3, r3, #15
 8010b34:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8010b36:	89fb      	ldrh	r3, [r7, #14]
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	885b      	ldrh	r3, [r3, #2]
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7f6 fca8 	bl	8007498 <lwip_htons>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	891b      	ldrh	r3, [r3, #8]
 8010b50:	89ba      	ldrh	r2, [r7, #12]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d204      	bcs.n	8010b60 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8010b56:	89bb      	ldrh	r3, [r7, #12]
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f7f7 fc30 	bl	80083c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	895b      	ldrh	r3, [r3, #10]
 8010b64:	89fa      	ldrh	r2, [r7, #14]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d807      	bhi.n	8010b7a <ip4_input+0x7a>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	891b      	ldrh	r3, [r3, #8]
 8010b6e:	89ba      	ldrh	r2, [r7, #12]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d802      	bhi.n	8010b7a <ip4_input+0x7a>
 8010b74:	89fb      	ldrh	r3, [r7, #14]
 8010b76:	2b13      	cmp	r3, #19
 8010b78:	d804      	bhi.n	8010b84 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7f7 fd94 	bl	80086a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	e111      	b.n	8010da8 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	691b      	ldr	r3, [r3, #16]
 8010b88:	4a89      	ldr	r2, [pc, #548]	; (8010db0 <ip4_input+0x2b0>)
 8010b8a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	4a87      	ldr	r2, [pc, #540]	; (8010db0 <ip4_input+0x2b0>)
 8010b92:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010b94:	4b86      	ldr	r3, [pc, #536]	; (8010db0 <ip4_input+0x2b0>)
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b9c:	2be0      	cmp	r3, #224	; 0xe0
 8010b9e:	d112      	bne.n	8010bc6 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010ba6:	f003 0301 	and.w	r3, r3, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d007      	beq.n	8010bc0 <ip4_input+0xc0>
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	3304      	adds	r3, #4
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d002      	beq.n	8010bc0 <ip4_input+0xc0>
      netif = inp;
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	61bb      	str	r3, [r7, #24]
 8010bbe:	e041      	b.n	8010c44 <ip4_input+0x144>
    } else {
      netif = NULL;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	61bb      	str	r3, [r7, #24]
 8010bc4:	e03e      	b.n	8010c44 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	613b      	str	r3, [r7, #16]
    netif = inp;
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d014      	beq.n	8010c08 <ip4_input+0x108>
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	3304      	adds	r3, #4
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00f      	beq.n	8010c08 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010be8:	4b71      	ldr	r3, [pc, #452]	; (8010db0 <ip4_input+0x2b0>)
 8010bea:	695a      	ldr	r2, [r3, #20]
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	3304      	adds	r3, #4
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d026      	beq.n	8010c44 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010bf6:	4b6e      	ldr	r3, [pc, #440]	; (8010db0 <ip4_input+0x2b0>)
 8010bf8:	695b      	ldr	r3, [r3, #20]
 8010bfa:	69b9      	ldr	r1, [r7, #24]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 f9ad 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010c02:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d11d      	bne.n	8010c44 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00d      	beq.n	8010c2a <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8010c0e:	4b68      	ldr	r3, [pc, #416]	; (8010db0 <ip4_input+0x2b0>)
 8010c10:	695b      	ldr	r3, [r3, #20]
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	2b7f      	cmp	r3, #127	; 0x7f
 8010c16:	d102      	bne.n	8010c1e <ip4_input+0x11e>
          netif = NULL;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	61bb      	str	r3, [r7, #24]
          break;
 8010c1c:	e012      	b.n	8010c44 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8010c22:	4b64      	ldr	r3, [pc, #400]	; (8010db4 <ip4_input+0x2b4>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	61bb      	str	r3, [r7, #24]
 8010c28:	e002      	b.n	8010c30 <ip4_input+0x130>
      } else {
        netif = netif->next;
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8010c30:	69ba      	ldr	r2, [r7, #24]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d102      	bne.n	8010c3e <ip4_input+0x13e>
        netif = netif->next;
 8010c38:	69bb      	ldr	r3, [r7, #24]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1c4      	bne.n	8010bce <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8010c44:	69bb      	ldr	r3, [r7, #24]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d111      	bne.n	8010c6e <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	7a5b      	ldrb	r3, [r3, #9]
 8010c4e:	2b11      	cmp	r3, #17
 8010c50:	d10d      	bne.n	8010c6e <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8010c52:	89fb      	ldrh	r3, [r7, #14]
 8010c54:	69fa      	ldr	r2, [r7, #28]
 8010c56:	4413      	add	r3, r2
 8010c58:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	885b      	ldrh	r3, [r3, #2]
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8010c64:	d103      	bne.n	8010c6e <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d017      	beq.n	8010ca4 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010c74:	4b4e      	ldr	r3, [pc, #312]	; (8010db0 <ip4_input+0x2b0>)
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d013      	beq.n	8010ca4 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010c7c:	4b4c      	ldr	r3, [pc, #304]	; (8010db0 <ip4_input+0x2b0>)
 8010c7e:	691b      	ldr	r3, [r3, #16]
 8010c80:	6839      	ldr	r1, [r7, #0]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 f96a 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d105      	bne.n	8010c9a <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010c8e:	4b48      	ldr	r3, [pc, #288]	; (8010db0 <ip4_input+0x2b0>)
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010c96:	2be0      	cmp	r3, #224	; 0xe0
 8010c98:	d104      	bne.n	8010ca4 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7f7 fd04 	bl	80086a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	e081      	b.n	8010da8 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d104      	bne.n	8010cb4 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f7f7 fcfc 	bl	80086a8 <pbuf_free>
    return ERR_OK;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	e079      	b.n	8010da8 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	88db      	ldrh	r3, [r3, #6]
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	461a      	mov	r2, r3
 8010cbc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010cc0:	4013      	ands	r3, r2
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00b      	beq.n	8010cde <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 fc8e 	bl	80115e8 <ip4_reass>
 8010ccc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d101      	bne.n	8010cd8 <ip4_input+0x1d8>
      return ERR_OK;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	e067      	b.n	8010da8 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010cde:	4a34      	ldr	r2, [pc, #208]	; (8010db0 <ip4_input+0x2b0>)
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010ce4:	4a32      	ldr	r2, [pc, #200]	; (8010db0 <ip4_input+0x2b0>)
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010cea:	4a31      	ldr	r2, [pc, #196]	; (8010db0 <ip4_input+0x2b0>)
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	f003 030f 	and.w	r3, r3, #15
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	b29a      	uxth	r2, r3
 8010d00:	4b2b      	ldr	r3, [pc, #172]	; (8010db0 <ip4_input+0x2b0>)
 8010d02:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8010d04:	89fb      	ldrh	r3, [r7, #14]
 8010d06:	425b      	negs	r3, r3
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	b21b      	sxth	r3, r3
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7f7 fca6 	bl	8008660 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	7a5b      	ldrb	r3, [r3, #9]
 8010d18:	2b06      	cmp	r3, #6
 8010d1a:	d009      	beq.n	8010d30 <ip4_input+0x230>
 8010d1c:	2b11      	cmp	r3, #17
 8010d1e:	d002      	beq.n	8010d26 <ip4_input+0x226>
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d00a      	beq.n	8010d3a <ip4_input+0x23a>
 8010d24:	e00e      	b.n	8010d44 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8010d26:	6839      	ldr	r1, [r7, #0]
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7fc fc11 	bl	800d550 <udp_input>
      break;
 8010d2e:	e028      	b.n	8010d82 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8010d30:	6839      	ldr	r1, [r7, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7f9 f900 	bl	8009f38 <tcp_input>
      break;
 8010d38:	e023      	b.n	8010d82 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f7ff fce7 	bl	8010710 <icmp_input>
      break;
 8010d42:	e01e      	b.n	8010d82 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010d44:	4b1a      	ldr	r3, [pc, #104]	; (8010db0 <ip4_input+0x2b0>)
 8010d46:	695b      	ldr	r3, [r3, #20]
 8010d48:	69b9      	ldr	r1, [r7, #24]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 f906 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d112      	bne.n	8010d7c <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010d56:	4b16      	ldr	r3, [pc, #88]	; (8010db0 <ip4_input+0x2b0>)
 8010d58:	695b      	ldr	r3, [r3, #20]
 8010d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010d5e:	2be0      	cmp	r3, #224	; 0xe0
 8010d60:	d00c      	beq.n	8010d7c <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8010d62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010d66:	4619      	mov	r1, r3
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f7f7 fc8b 	bl	8008684 <pbuf_header_force>
        p->payload = iphdr;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	69fa      	ldr	r2, [r7, #28]
 8010d72:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010d74:	2102      	movs	r1, #2
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f7ff fdd0 	bl	801091c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7f7 fc93 	bl	80086a8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010d82:	4b0b      	ldr	r3, [pc, #44]	; (8010db0 <ip4_input+0x2b0>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010d88:	4b09      	ldr	r3, [pc, #36]	; (8010db0 <ip4_input+0x2b0>)
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010d8e:	4b08      	ldr	r3, [pc, #32]	; (8010db0 <ip4_input+0x2b0>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010d94:	4b06      	ldr	r3, [pc, #24]	; (8010db0 <ip4_input+0x2b0>)
 8010d96:	2200      	movs	r2, #0
 8010d98:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010d9a:	4b05      	ldr	r3, [pc, #20]	; (8010db0 <ip4_input+0x2b0>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010da0:	4b03      	ldr	r3, [pc, #12]	; (8010db0 <ip4_input+0x2b0>)
 8010da2:	2200      	movs	r2, #0
 8010da4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3720      	adds	r7, #32
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	20000398 	.word	0x20000398
 8010db4:	200038d8 	.word	0x200038d8

08010db8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b08a      	sub	sp, #40	; 0x28
 8010dbc:	af04      	add	r7, sp, #16
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	607a      	str	r2, [r7, #4]
 8010dc4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d009      	beq.n	8010de4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d003      	beq.n	8010dde <ip4_output_if+0x26>
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d102      	bne.n	8010de4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de0:	3304      	adds	r3, #4
 8010de2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010de4:	78fa      	ldrb	r2, [r7, #3]
 8010de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de8:	9302      	str	r3, [sp, #8]
 8010dea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	4613      	mov	r3, r2
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	6979      	ldr	r1, [r7, #20]
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 f805 	bl	8010e0c <ip4_output_if_src>
 8010e02:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3718      	adds	r7, #24
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b088      	sub	sp, #32
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
 8010e18:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	89db      	ldrh	r3, [r3, #14]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d006      	beq.n	8010e30 <ip4_output_if_src+0x24>
 8010e22:	4b48      	ldr	r3, [pc, #288]	; (8010f44 <ip4_output_if_src+0x138>)
 8010e24:	f240 3233 	movw	r2, #819	; 0x333
 8010e28:	4947      	ldr	r1, [pc, #284]	; (8010f48 <ip4_output_if_src+0x13c>)
 8010e2a:	4848      	ldr	r0, [pc, #288]	; (8010f4c <ip4_output_if_src+0x140>)
 8010e2c:	f002 feba 	bl	8013ba4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d060      	beq.n	8010ef8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010e36:	2314      	movs	r3, #20
 8010e38:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8010e3a:	2114      	movs	r1, #20
 8010e3c:	68f8      	ldr	r0, [r7, #12]
 8010e3e:	f7f7 fc0f 	bl	8008660 <pbuf_header>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d002      	beq.n	8010e4e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010e48:	f06f 0301 	mvn.w	r3, #1
 8010e4c:	e075      	b.n	8010f3a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	895b      	ldrh	r3, [r3, #10]
 8010e58:	2b13      	cmp	r3, #19
 8010e5a:	d806      	bhi.n	8010e6a <ip4_output_if_src+0x5e>
 8010e5c:	4b39      	ldr	r3, [pc, #228]	; (8010f44 <ip4_output_if_src+0x138>)
 8010e5e:	f240 3261 	movw	r2, #865	; 0x361
 8010e62:	493b      	ldr	r1, [pc, #236]	; (8010f50 <ip4_output_if_src+0x144>)
 8010e64:	4839      	ldr	r0, [pc, #228]	; (8010f4c <ip4_output_if_src+0x140>)
 8010e66:	f002 fe9d 	bl	8013ba4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	78fa      	ldrb	r2, [r7, #3]
 8010e6e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010e70:	69fb      	ldr	r3, [r7, #28]
 8010e72:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010e76:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010e80:	8b7b      	ldrh	r3, [r7, #26]
 8010e82:	089b      	lsrs	r3, r3, #2
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010e98:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	891b      	ldrh	r3, [r3, #8]
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7f6 fafa 	bl	8007498 <lwip_htons>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	719a      	strb	r2, [r3, #6]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010eb6:	4b27      	ldr	r3, [pc, #156]	; (8010f54 <ip4_output_if_src+0x148>)
 8010eb8:	881b      	ldrh	r3, [r3, #0]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7f6 faec 	bl	8007498 <lwip_htons>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010ec8:	4b22      	ldr	r3, [pc, #136]	; (8010f54 <ip4_output_if_src+0x148>)
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	4b20      	ldr	r3, [pc, #128]	; (8010f54 <ip4_output_if_src+0x148>)
 8010ed2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d104      	bne.n	8010ee4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010eda:	4b1f      	ldr	r3, [pc, #124]	; (8010f58 <ip4_output_if_src+0x14c>)
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	60da      	str	r2, [r3, #12]
 8010ee2:	e003      	b.n	8010eec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	729a      	strb	r2, [r3, #10]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	72da      	strb	r2, [r3, #11]
 8010ef6:	e008      	b.n	8010f0a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010f04:	f107 0314 	add.w	r3, r7, #20
 8010f08:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00c      	beq.n	8010f2c <ip4_output_if_src+0x120>
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	891a      	ldrh	r2, [r3, #8]
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d906      	bls.n	8010f2c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f22:	68f8      	ldr	r0, [r7, #12]
 8010f24:	f000 fd0a 	bl	801193c <ip4_frag>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	e006      	b.n	8010f3a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2e:	695b      	ldr	r3, [r3, #20]
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	68f9      	ldr	r1, [r7, #12]
 8010f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f36:	4798      	blx	r3
 8010f38:	4603      	mov	r3, r0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3720      	adds	r7, #32
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	080166e4 	.word	0x080166e4
 8010f48:	08016718 	.word	0x08016718
 8010f4c:	08016724 	.word	0x08016724
 8010f50:	0801674c 	.word	0x0801674c
 8010f54:	2000037e 	.word	0x2000037e
 8010f58:	08016b70 	.word	0x08016b70

08010f5c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b085      	sub	sp, #20
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f70:	d002      	beq.n	8010f78 <ip4_addr_isbroadcast_u32+0x1c>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e02a      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010f82:	f003 0302 	and.w	r3, r3, #2
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d101      	bne.n	8010f8e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e021      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	3304      	adds	r3, #4
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d101      	bne.n	8010f9e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	e019      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010f9e:	68fa      	ldr	r2, [r7, #12]
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	3304      	adds	r3, #4
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	405a      	eors	r2, r3
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	3308      	adds	r3, #8
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4013      	ands	r3, r2
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d10d      	bne.n	8010fd0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	3308      	adds	r3, #8
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	43da      	mvns	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	3308      	adds	r3, #8
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d101      	bne.n	8010fd0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e000      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010fd0:	2300      	movs	r3, #0
  }
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3714      	adds	r7, #20
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr
	...

08010fe0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010fea:	4b12      	ldr	r3, [pc, #72]	; (8011034 <ip_reass_tmr+0x54>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010ff0:	e018      	b.n	8011024 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	7fdb      	ldrb	r3, [r3, #31]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00b      	beq.n	8011012 <ip_reass_tmr+0x32>
      r->timer--;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	7fdb      	ldrb	r3, [r3, #31]
 8010ffe:	3b01      	subs	r3, #1
 8011000:	b2da      	uxtb	r2, r3
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	60fb      	str	r3, [r7, #12]
 8011010:	e008      	b.n	8011024 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801101c:	68b9      	ldr	r1, [r7, #8]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 f80a 	bl	8011038 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1e3      	bne.n	8010ff2 <ip_reass_tmr+0x12>
     }
   }
}
 801102a:	bf00      	nop
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	20000380 	.word	0x20000380

08011038 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b088      	sub	sp, #32
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	429a      	cmp	r2, r3
 801104c:	d105      	bne.n	801105a <ip_reass_free_complete_datagram+0x22>
 801104e:	4b45      	ldr	r3, [pc, #276]	; (8011164 <ip_reass_free_complete_datagram+0x12c>)
 8011050:	22ab      	movs	r2, #171	; 0xab
 8011052:	4945      	ldr	r1, [pc, #276]	; (8011168 <ip_reass_free_complete_datagram+0x130>)
 8011054:	4845      	ldr	r0, [pc, #276]	; (801116c <ip_reass_free_complete_datagram+0x134>)
 8011056:	f002 fda5 	bl	8013ba4 <iprintf>
  if (prev != NULL) {
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d00a      	beq.n	8011076 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	429a      	cmp	r2, r3
 8011068:	d005      	beq.n	8011076 <ip_reass_free_complete_datagram+0x3e>
 801106a:	4b3e      	ldr	r3, [pc, #248]	; (8011164 <ip_reass_free_complete_datagram+0x12c>)
 801106c:	22ad      	movs	r2, #173	; 0xad
 801106e:	4940      	ldr	r1, [pc, #256]	; (8011170 <ip_reass_free_complete_datagram+0x138>)
 8011070:	483e      	ldr	r0, [pc, #248]	; (801116c <ip_reass_free_complete_datagram+0x134>)
 8011072:	f002 fd97 	bl	8013ba4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	889b      	ldrh	r3, [r3, #4]
 8011082:	b29b      	uxth	r3, r3
 8011084:	2b00      	cmp	r3, #0
 8011086:	d12a      	bne.n	80110de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	6858      	ldr	r0, [r3, #4]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3308      	adds	r3, #8
 801109e:	2214      	movs	r2, #20
 80110a0:	4619      	mov	r1, r3
 80110a2:	f002 fcc4 	bl	8013a2e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80110a6:	2101      	movs	r1, #1
 80110a8:	69b8      	ldr	r0, [r7, #24]
 80110aa:	f7ff fc47 	bl	801093c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80110ae:	69b8      	ldr	r0, [r7, #24]
 80110b0:	f7f7 fb8e 	bl	80087d0 <pbuf_clen>
 80110b4:	4603      	mov	r3, r0
 80110b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80110b8:	8bfa      	ldrh	r2, [r7, #30]
 80110ba:	8a7b      	ldrh	r3, [r7, #18]
 80110bc:	4413      	add	r3, r2
 80110be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110c2:	db05      	blt.n	80110d0 <ip_reass_free_complete_datagram+0x98>
 80110c4:	4b27      	ldr	r3, [pc, #156]	; (8011164 <ip_reass_free_complete_datagram+0x12c>)
 80110c6:	22bc      	movs	r2, #188	; 0xbc
 80110c8:	492a      	ldr	r1, [pc, #168]	; (8011174 <ip_reass_free_complete_datagram+0x13c>)
 80110ca:	4828      	ldr	r0, [pc, #160]	; (801116c <ip_reass_free_complete_datagram+0x134>)
 80110cc:	f002 fd6a 	bl	8013ba4 <iprintf>
    pbufs_freed += clen;
 80110d0:	8bfa      	ldrh	r2, [r7, #30]
 80110d2:	8a7b      	ldrh	r3, [r7, #18]
 80110d4:	4413      	add	r3, r2
 80110d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80110d8:	69b8      	ldr	r0, [r7, #24]
 80110da:	f7f7 fae5 	bl	80086a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80110e4:	e01f      	b.n	8011126 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80110e6:	69bb      	ldr	r3, [r7, #24]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 80110ec:	69bb      	ldr	r3, [r7, #24]
 80110ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f7f7 fb6a 	bl	80087d0 <pbuf_clen>
 80110fc:	4603      	mov	r3, r0
 80110fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011100:	8bfa      	ldrh	r2, [r7, #30]
 8011102:	8a7b      	ldrh	r3, [r7, #18]
 8011104:	4413      	add	r3, r2
 8011106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801110a:	db05      	blt.n	8011118 <ip_reass_free_complete_datagram+0xe0>
 801110c:	4b15      	ldr	r3, [pc, #84]	; (8011164 <ip_reass_free_complete_datagram+0x12c>)
 801110e:	22cc      	movs	r2, #204	; 0xcc
 8011110:	4918      	ldr	r1, [pc, #96]	; (8011174 <ip_reass_free_complete_datagram+0x13c>)
 8011112:	4816      	ldr	r0, [pc, #88]	; (801116c <ip_reass_free_complete_datagram+0x134>)
 8011114:	f002 fd46 	bl	8013ba4 <iprintf>
    pbufs_freed += clen;
 8011118:	8bfa      	ldrh	r2, [r7, #30]
 801111a:	8a7b      	ldrh	r3, [r7, #18]
 801111c:	4413      	add	r3, r2
 801111e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f7f7 fac1 	bl	80086a8 <pbuf_free>
  while (p != NULL) {
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1dc      	bne.n	80110e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801112c:	6839      	ldr	r1, [r7, #0]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 f8c2 	bl	80112b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011134:	4b10      	ldr	r3, [pc, #64]	; (8011178 <ip_reass_free_complete_datagram+0x140>)
 8011136:	881b      	ldrh	r3, [r3, #0]
 8011138:	8bfa      	ldrh	r2, [r7, #30]
 801113a:	429a      	cmp	r2, r3
 801113c:	d905      	bls.n	801114a <ip_reass_free_complete_datagram+0x112>
 801113e:	4b09      	ldr	r3, [pc, #36]	; (8011164 <ip_reass_free_complete_datagram+0x12c>)
 8011140:	22d2      	movs	r2, #210	; 0xd2
 8011142:	490e      	ldr	r1, [pc, #56]	; (801117c <ip_reass_free_complete_datagram+0x144>)
 8011144:	4809      	ldr	r0, [pc, #36]	; (801116c <ip_reass_free_complete_datagram+0x134>)
 8011146:	f002 fd2d 	bl	8013ba4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801114a:	4b0b      	ldr	r3, [pc, #44]	; (8011178 <ip_reass_free_complete_datagram+0x140>)
 801114c:	881a      	ldrh	r2, [r3, #0]
 801114e:	8bfb      	ldrh	r3, [r7, #30]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	b29a      	uxth	r2, r3
 8011154:	4b08      	ldr	r3, [pc, #32]	; (8011178 <ip_reass_free_complete_datagram+0x140>)
 8011156:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011158:	8bfb      	ldrh	r3, [r7, #30]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3720      	adds	r7, #32
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	0801677c 	.word	0x0801677c
 8011168:	080167b8 	.word	0x080167b8
 801116c:	080167c4 	.word	0x080167c4
 8011170:	080167ec 	.word	0x080167ec
 8011174:	08016800 	.word	0x08016800
 8011178:	20000384 	.word	0x20000384
 801117c:	08016820 	.word	0x08016820

08011180 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b08a      	sub	sp, #40	; 0x28
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801118a:	2300      	movs	r3, #0
 801118c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801118e:	2300      	movs	r3, #0
 8011190:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011192:	2300      	movs	r3, #0
 8011194:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011196:	2300      	movs	r3, #0
 8011198:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801119a:	2300      	movs	r3, #0
 801119c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801119e:	4b28      	ldr	r3, [pc, #160]	; (8011240 <ip_reass_remove_oldest_datagram+0xc0>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80111a4:	e030      	b.n	8011208 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80111a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a8:	695a      	ldr	r2, [r3, #20]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d10c      	bne.n	80111cc <ip_reass_remove_oldest_datagram+0x4c>
 80111b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b4:	699a      	ldr	r2, [r3, #24]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d106      	bne.n	80111cc <ip_reass_remove_oldest_datagram+0x4c>
 80111be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c0:	899a      	ldrh	r2, [r3, #12]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	889b      	ldrh	r3, [r3, #4]
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d014      	beq.n	80111f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	3301      	adds	r3, #1
 80111d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d104      	bne.n	80111e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	61bb      	str	r3, [r7, #24]
 80111e0:	e009      	b.n	80111f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80111e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e4:	7fda      	ldrb	r2, [r3, #31]
 80111e6:	6a3b      	ldr	r3, [r7, #32]
 80111e8:	7fdb      	ldrb	r3, [r3, #31]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d803      	bhi.n	80111f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80111ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d001      	beq.n	8011202 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80111fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011200:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1cb      	bne.n	80111a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801120e:	6a3b      	ldr	r3, [r7, #32]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d008      	beq.n	8011226 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011214:	69b9      	ldr	r1, [r7, #24]
 8011216:	6a38      	ldr	r0, [r7, #32]
 8011218:	f7ff ff0e 	bl	8011038 <ip_reass_free_complete_datagram>
 801121c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801121e:	697a      	ldr	r2, [r7, #20]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	4413      	add	r3, r2
 8011224:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011226:	697a      	ldr	r2, [r7, #20]
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	429a      	cmp	r2, r3
 801122c:	da02      	bge.n	8011234 <ip_reass_remove_oldest_datagram+0xb4>
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	2b01      	cmp	r3, #1
 8011232:	dcac      	bgt.n	801118e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011234:	697b      	ldr	r3, [r7, #20]
}
 8011236:	4618      	mov	r0, r3
 8011238:	3728      	adds	r7, #40	; 0x28
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	bf00      	nop
 8011240:	20000380 	.word	0x20000380

08011244 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801124e:	2004      	movs	r0, #4
 8011250:	f7f6 fcd0 	bl	8007bf4 <memp_malloc>
 8011254:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d110      	bne.n	801127e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801125c:	6839      	ldr	r1, [r7, #0]
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f7ff ff8e 	bl	8011180 <ip_reass_remove_oldest_datagram>
 8011264:	4602      	mov	r2, r0
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	4293      	cmp	r3, r2
 801126a:	dc03      	bgt.n	8011274 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801126c:	2004      	movs	r0, #4
 801126e:	f7f6 fcc1 	bl	8007bf4 <memp_malloc>
 8011272:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d101      	bne.n	801127e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801127a:	2300      	movs	r3, #0
 801127c:	e016      	b.n	80112ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801127e:	2220      	movs	r2, #32
 8011280:	2100      	movs	r1, #0
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f002 fbde 	bl	8013a44 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2203      	movs	r2, #3
 801128c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801128e:	4b09      	ldr	r3, [pc, #36]	; (80112b4 <ip_reass_enqueue_new_datagram+0x70>)
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011296:	4a07      	ldr	r2, [pc, #28]	; (80112b4 <ip_reass_enqueue_new_datagram+0x70>)
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	3308      	adds	r3, #8
 80112a0:	2214      	movs	r2, #20
 80112a2:	6879      	ldr	r1, [r7, #4]
 80112a4:	4618      	mov	r0, r3
 80112a6:	f002 fbc2 	bl	8013a2e <memcpy>
  return ipr;
 80112aa:	68fb      	ldr	r3, [r7, #12]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3710      	adds	r7, #16
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	20000380 	.word	0x20000380

080112b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80112c2:	4b10      	ldr	r3, [pc, #64]	; (8011304 <ip_reass_dequeue_datagram+0x4c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d104      	bne.n	80112d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a0c      	ldr	r2, [pc, #48]	; (8011304 <ip_reass_dequeue_datagram+0x4c>)
 80112d2:	6013      	str	r3, [r2, #0]
 80112d4:	e00d      	b.n	80112f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d106      	bne.n	80112ea <ip_reass_dequeue_datagram+0x32>
 80112dc:	4b0a      	ldr	r3, [pc, #40]	; (8011308 <ip_reass_dequeue_datagram+0x50>)
 80112de:	f240 1245 	movw	r2, #325	; 0x145
 80112e2:	490a      	ldr	r1, [pc, #40]	; (801130c <ip_reass_dequeue_datagram+0x54>)
 80112e4:	480a      	ldr	r0, [pc, #40]	; (8011310 <ip_reass_dequeue_datagram+0x58>)
 80112e6:	f002 fc5d 	bl	8013ba4 <iprintf>
    prev->next = ipr->next;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80112f2:	6879      	ldr	r1, [r7, #4]
 80112f4:	2004      	movs	r0, #4
 80112f6:	f7f6 fcc9 	bl	8007c8c <memp_free>
}
 80112fa:	bf00      	nop
 80112fc:	3708      	adds	r7, #8
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	20000380 	.word	0x20000380
 8011308:	0801677c 	.word	0x0801677c
 801130c:	0801683c 	.word	0x0801683c
 8011310:	080167c4 	.word	0x080167c4

08011314 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08c      	sub	sp, #48	; 0x30
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011320:	2300      	movs	r3, #0
 8011322:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011324:	2301      	movs	r3, #1
 8011326:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	885b      	ldrh	r3, [r3, #2]
 8011332:	b29b      	uxth	r3, r3
 8011334:	4618      	mov	r0, r3
 8011336:	f7f6 f8af 	bl	8007498 <lwip_htons>
 801133a:	4603      	mov	r3, r0
 801133c:	461a      	mov	r2, r3
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	b29b      	uxth	r3, r3
 8011344:	f003 030f 	and.w	r3, r3, #15
 8011348:	b29b      	uxth	r3, r3
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	b29b      	uxth	r3, r3
 801134e:	1ad3      	subs	r3, r2, r3
 8011350:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	88db      	ldrh	r3, [r3, #6]
 8011356:	b29b      	uxth	r3, r3
 8011358:	4618      	mov	r0, r3
 801135a:	f7f6 f89d 	bl	8007498 <lwip_htons>
 801135e:	4603      	mov	r3, r0
 8011360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011364:	b29b      	uxth	r3, r3
 8011366:	00db      	lsls	r3, r3, #3
 8011368:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	2200      	movs	r2, #0
 8011374:	701a      	strb	r2, [r3, #0]
 8011376:	2200      	movs	r2, #0
 8011378:	705a      	strb	r2, [r3, #1]
 801137a:	2200      	movs	r2, #0
 801137c:	709a      	strb	r2, [r3, #2]
 801137e:	2200      	movs	r2, #0
 8011380:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011384:	8b3a      	ldrh	r2, [r7, #24]
 8011386:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8011388:	8b3a      	ldrh	r2, [r7, #24]
 801138a:	8b7b      	ldrh	r3, [r7, #26]
 801138c:	4413      	add	r3, r2
 801138e:	b29a      	uxth	r2, r3
 8011390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011392:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	627b      	str	r3, [r7, #36]	; 0x24
 801139a:	e061      	b.n	8011460 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80113a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a4:	889b      	ldrh	r3, [r3, #4]
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	889b      	ldrh	r3, [r3, #4]
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d232      	bcs.n	8011418 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80113b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80113b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d01f      	beq.n	80113fe <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80113be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c0:	889b      	ldrh	r3, [r3, #4]
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c6:	88db      	ldrh	r3, [r3, #6]
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	429a      	cmp	r2, r3
 80113cc:	f0c0 80e3 	bcc.w	8011596 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80113d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d2:	88db      	ldrh	r3, [r3, #6]
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	889b      	ldrh	r3, [r3, #4]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	429a      	cmp	r2, r3
 80113de:	f200 80da 	bhi.w	8011596 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80113e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e4:	68ba      	ldr	r2, [r7, #8]
 80113e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80113e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ea:	88db      	ldrh	r3, [r3, #6]
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f0:	889b      	ldrh	r3, [r3, #4]
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d037      	beq.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80113fc:	e034      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80113fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011400:	88db      	ldrh	r3, [r3, #6]
 8011402:	b29a      	uxth	r2, r3
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	889b      	ldrh	r3, [r3, #4]
 8011408:	b29b      	uxth	r3, r3
 801140a:	429a      	cmp	r2, r3
 801140c:	f200 80c5 	bhi.w	801159a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	605a      	str	r2, [r3, #4]
      break;
 8011416:	e027      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8011418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141a:	889b      	ldrh	r3, [r3, #4]
 801141c:	b29a      	uxth	r2, r3
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	889b      	ldrh	r3, [r3, #4]
 8011422:	b29b      	uxth	r3, r3
 8011424:	429a      	cmp	r2, r3
 8011426:	f000 80ba 	beq.w	801159e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142c:	889b      	ldrh	r3, [r3, #4]
 801142e:	b29a      	uxth	r2, r3
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	88db      	ldrh	r3, [r3, #6]
 8011434:	b29b      	uxth	r3, r3
 8011436:	429a      	cmp	r2, r3
 8011438:	f0c0 80b3 	bcc.w	80115a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143e:	2b00      	cmp	r3, #0
 8011440:	d009      	beq.n	8011456 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8011442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011444:	88db      	ldrh	r3, [r3, #6]
 8011446:	b29a      	uxth	r2, r3
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	889b      	ldrh	r3, [r3, #4]
 801144c:	b29b      	uxth	r3, r3
 801144e:	429a      	cmp	r2, r3
 8011450:	d001      	beq.n	8011456 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011452:	2300      	movs	r3, #0
 8011454:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	2b00      	cmp	r3, #0
 8011464:	d19a      	bne.n	801139c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8011466:	e000      	b.n	801146a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8011468:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	2b00      	cmp	r3, #0
 801146e:	d12d      	bne.n	80114cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8011470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011472:	2b00      	cmp	r3, #0
 8011474:	d01c      	beq.n	80114b0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011478:	88db      	ldrh	r3, [r3, #6]
 801147a:	b29a      	uxth	r2, r3
 801147c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147e:	889b      	ldrh	r3, [r3, #4]
 8011480:	b29b      	uxth	r3, r3
 8011482:	429a      	cmp	r2, r3
 8011484:	d906      	bls.n	8011494 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8011486:	4b51      	ldr	r3, [pc, #324]	; (80115cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011488:	f240 12ab 	movw	r2, #427	; 0x1ab
 801148c:	4950      	ldr	r1, [pc, #320]	; (80115d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801148e:	4851      	ldr	r0, [pc, #324]	; (80115d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011490:	f002 fb88 	bl	8013ba4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011496:	68ba      	ldr	r2, [r7, #8]
 8011498:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149c:	88db      	ldrh	r3, [r3, #6]
 801149e:	b29a      	uxth	r2, r3
 80114a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a2:	889b      	ldrh	r3, [r3, #4]
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d010      	beq.n	80114cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	623b      	str	r3, [r7, #32]
 80114ae:	e00d      	b.n	80114cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d006      	beq.n	80114c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80114b8:	4b44      	ldr	r3, [pc, #272]	; (80115cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80114ba:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80114be:	4946      	ldr	r1, [pc, #280]	; (80115d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80114c0:	4844      	ldr	r0, [pc, #272]	; (80115d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80114c2:	f002 fb6f 	bl	8013ba4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	68ba      	ldr	r2, [r7, #8]
 80114ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d105      	bne.n	80114de <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	7f9b      	ldrb	r3, [r3, #30]
 80114d6:	f003 0301 	and.w	r3, r3, #1
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d059      	beq.n	8011592 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d04f      	beq.n	8011584 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d006      	beq.n	80114fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	889b      	ldrh	r3, [r3, #4]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d002      	beq.n	8011500 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80114fa:	2300      	movs	r3, #0
 80114fc:	623b      	str	r3, [r7, #32]
 80114fe:	e041      	b.n	8011584 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011502:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801150a:	e012      	b.n	8011532 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011514:	88db      	ldrh	r3, [r3, #6]
 8011516:	b29a      	uxth	r2, r3
 8011518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151a:	889b      	ldrh	r3, [r3, #4]
 801151c:	b29b      	uxth	r3, r3
 801151e:	429a      	cmp	r2, r3
 8011520:	d002      	beq.n	8011528 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8011522:	2300      	movs	r3, #0
 8011524:	623b      	str	r3, [r7, #32]
            break;
 8011526:	e007      	b.n	8011538 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8011528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1e9      	bne.n	801150c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011538:	6a3b      	ldr	r3, [r7, #32]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d022      	beq.n	8011584 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d106      	bne.n	8011554 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8011546:	4b21      	ldr	r3, [pc, #132]	; (80115cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011548:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801154c:	4923      	ldr	r1, [pc, #140]	; (80115dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801154e:	4821      	ldr	r0, [pc, #132]	; (80115d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011550:	f002 fb28 	bl	8013ba4 <iprintf>
          LWIP_ASSERT("sanity check",
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801155c:	429a      	cmp	r2, r3
 801155e:	d106      	bne.n	801156e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8011560:	4b1a      	ldr	r3, [pc, #104]	; (80115cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011562:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011566:	491d      	ldr	r1, [pc, #116]	; (80115dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011568:	481a      	ldr	r0, [pc, #104]	; (80115d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801156a:	f002 fb1b 	bl	8013ba4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d006      	beq.n	8011584 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8011576:	4b15      	ldr	r3, [pc, #84]	; (80115cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011578:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801157c:	4918      	ldr	r1, [pc, #96]	; (80115e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801157e:	4815      	ldr	r0, [pc, #84]	; (80115d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011580:	f002 fb10 	bl	8013ba4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011584:	6a3b      	ldr	r3, [r7, #32]
 8011586:	2b00      	cmp	r3, #0
 8011588:	bf14      	ite	ne
 801158a:	2301      	movne	r3, #1
 801158c:	2300      	moveq	r3, #0
 801158e:	b2db      	uxtb	r3, r3
 8011590:	e018      	b.n	80115c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011592:	2300      	movs	r3, #0
 8011594:	e016      	b.n	80115c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8011596:	bf00      	nop
 8011598:	e004      	b.n	80115a4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801159a:	bf00      	nop
 801159c:	e002      	b.n	80115a4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801159e:	bf00      	nop
 80115a0:	e000      	b.n	80115a4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80115a2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80115a4:	68b8      	ldr	r0, [r7, #8]
 80115a6:	f7f7 f913 	bl	80087d0 <pbuf_clen>
 80115aa:	4603      	mov	r3, r0
 80115ac:	461a      	mov	r2, r3
 80115ae:	4b0d      	ldr	r3, [pc, #52]	; (80115e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80115b0:	881b      	ldrh	r3, [r3, #0]
 80115b2:	1a9b      	subs	r3, r3, r2
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	4b0b      	ldr	r3, [pc, #44]	; (80115e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80115b8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80115ba:	68b8      	ldr	r0, [r7, #8]
 80115bc:	f7f7 f874 	bl	80086a8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3730      	adds	r7, #48	; 0x30
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	0801677c 	.word	0x0801677c
 80115d0:	08016858 	.word	0x08016858
 80115d4:	080167c4 	.word	0x080167c4
 80115d8:	08016878 	.word	0x08016878
 80115dc:	080168b0 	.word	0x080168b0
 80115e0:	080168c0 	.word	0x080168c0
 80115e4:	20000384 	.word	0x20000384

080115e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b08e      	sub	sp, #56	; 0x38
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80115f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	f003 030f 	and.w	r3, r3, #15
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	2b14      	cmp	r3, #20
 8011602:	f040 8131 	bne.w	8011868 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011608:	88db      	ldrh	r3, [r3, #6]
 801160a:	b29b      	uxth	r3, r3
 801160c:	4618      	mov	r0, r3
 801160e:	f7f5 ff43 	bl	8007498 <lwip_htons>
 8011612:	4603      	mov	r3, r0
 8011614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011618:	b29b      	uxth	r3, r3
 801161a:	00db      	lsls	r3, r3, #3
 801161c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011620:	885b      	ldrh	r3, [r3, #2]
 8011622:	b29b      	uxth	r3, r3
 8011624:	4618      	mov	r0, r3
 8011626:	f7f5 ff37 	bl	8007498 <lwip_htons>
 801162a:	4603      	mov	r3, r0
 801162c:	461a      	mov	r2, r3
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	b29b      	uxth	r3, r3
 8011634:	f003 030f 	and.w	r3, r3, #15
 8011638:	b29b      	uxth	r3, r3
 801163a:	009b      	lsls	r3, r3, #2
 801163c:	b29b      	uxth	r3, r3
 801163e:	1ad3      	subs	r3, r2, r3
 8011640:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f7f7 f8c4 	bl	80087d0 <pbuf_clen>
 8011648:	4603      	mov	r3, r0
 801164a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801164c:	4b8d      	ldr	r3, [pc, #564]	; (8011884 <ip4_reass+0x29c>)
 801164e:	881b      	ldrh	r3, [r3, #0]
 8011650:	461a      	mov	r2, r3
 8011652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011654:	4413      	add	r3, r2
 8011656:	2b0a      	cmp	r3, #10
 8011658:	dd10      	ble.n	801167c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801165a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801165c:	4619      	mov	r1, r3
 801165e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011660:	f7ff fd8e 	bl	8011180 <ip_reass_remove_oldest_datagram>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	f000 8100 	beq.w	801186c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801166c:	4b85      	ldr	r3, [pc, #532]	; (8011884 <ip4_reass+0x29c>)
 801166e:	881b      	ldrh	r3, [r3, #0]
 8011670:	461a      	mov	r2, r3
 8011672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011674:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011676:	2b0a      	cmp	r3, #10
 8011678:	f300 80f8 	bgt.w	801186c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801167c:	4b82      	ldr	r3, [pc, #520]	; (8011888 <ip4_reass+0x2a0>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	633b      	str	r3, [r7, #48]	; 0x30
 8011682:	e015      	b.n	80116b0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	695a      	ldr	r2, [r3, #20]
 8011688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	429a      	cmp	r2, r3
 801168e:	d10c      	bne.n	80116aa <ip4_reass+0xc2>
 8011690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011692:	699a      	ldr	r2, [r3, #24]
 8011694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011696:	691b      	ldr	r3, [r3, #16]
 8011698:	429a      	cmp	r2, r3
 801169a:	d106      	bne.n	80116aa <ip4_reass+0xc2>
 801169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169e:	899a      	ldrh	r2, [r3, #12]
 80116a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a2:	889b      	ldrh	r3, [r3, #4]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d006      	beq.n	80116b8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80116aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	633b      	str	r3, [r7, #48]	; 0x30
 80116b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1e6      	bne.n	8011684 <ip4_reass+0x9c>
 80116b6:	e000      	b.n	80116ba <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80116b8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80116ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d109      	bne.n	80116d4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80116c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116c2:	4619      	mov	r1, r3
 80116c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116c6:	f7ff fdbd 	bl	8011244 <ip_reass_enqueue_new_datagram>
 80116ca:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80116cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d11c      	bne.n	801170c <ip4_reass+0x124>
      goto nullreturn;
 80116d2:	e0ce      	b.n	8011872 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80116d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d6:	88db      	ldrh	r3, [r3, #6]
 80116d8:	b29b      	uxth	r3, r3
 80116da:	4618      	mov	r0, r3
 80116dc:	f7f5 fedc 	bl	8007498 <lwip_htons>
 80116e0:	4603      	mov	r3, r0
 80116e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d110      	bne.n	801170c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80116ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ec:	89db      	ldrh	r3, [r3, #14]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7f5 fed2 	bl	8007498 <lwip_htons>
 80116f4:	4603      	mov	r3, r0
 80116f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d006      	beq.n	801170c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80116fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011700:	3308      	adds	r3, #8
 8011702:	2214      	movs	r2, #20
 8011704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011706:	4618      	mov	r0, r3
 8011708:	f002 f991 	bl	8013a2e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170e:	88db      	ldrh	r3, [r3, #6]
 8011710:	b29b      	uxth	r3, r3
 8011712:	f003 0320 	and.w	r3, r3, #32
 8011716:	2b00      	cmp	r3, #0
 8011718:	bf0c      	ite	eq
 801171a:	2301      	moveq	r3, #1
 801171c:	2300      	movne	r3, #0
 801171e:	b2db      	uxtb	r3, r3
 8011720:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d00e      	beq.n	8011746 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8011728:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801172a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801172c:	4413      	add	r3, r2
 801172e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011730:	8b7a      	ldrh	r2, [r7, #26]
 8011732:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011734:	429a      	cmp	r2, r3
 8011736:	f0c0 8099 	bcc.w	801186c <ip4_reass+0x284>
 801173a:	8b7b      	ldrh	r3, [r7, #26]
 801173c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011740:	4293      	cmp	r3, r2
 8011742:	f200 8093 	bhi.w	801186c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011746:	69fa      	ldr	r2, [r7, #28]
 8011748:	6879      	ldr	r1, [r7, #4]
 801174a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801174c:	f7ff fde2 	bl	8011314 <ip_reass_chain_frag_into_datagram_and_validate>
 8011750:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011758:	f000 808a 	beq.w	8011870 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801175c:	4b49      	ldr	r3, [pc, #292]	; (8011884 <ip4_reass+0x29c>)
 801175e:	881a      	ldrh	r2, [r3, #0]
 8011760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011762:	4413      	add	r3, r2
 8011764:	b29a      	uxth	r2, r3
 8011766:	4b47      	ldr	r3, [pc, #284]	; (8011884 <ip4_reass+0x29c>)
 8011768:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00d      	beq.n	801178c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8011770:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011774:	4413      	add	r3, r2
 8011776:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177a:	8a7a      	ldrh	r2, [r7, #18]
 801177c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	7f9b      	ldrb	r3, [r3, #30]
 8011782:	f043 0301 	orr.w	r3, r3, #1
 8011786:	b2da      	uxtb	r2, r3
 8011788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	2b01      	cmp	r3, #1
 8011790:	d168      	bne.n	8011864 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8011792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011794:	8b9b      	ldrh	r3, [r3, #28]
 8011796:	3314      	adds	r3, #20
 8011798:	b29a      	uxth	r2, r3
 801179a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80117a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80117b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b2:	3308      	adds	r3, #8
 80117b4:	2214      	movs	r2, #20
 80117b6:	4619      	mov	r1, r3
 80117b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117ba:	f002 f938 	bl	8013a2e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	8b9b      	ldrh	r3, [r3, #28]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7f5 fe68 	bl	8007498 <lwip_htons>
 80117c8:	4603      	mov	r3, r0
 80117ca:	461a      	mov	r2, r3
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80117d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d2:	2200      	movs	r2, #0
 80117d4:	719a      	strb	r2, [r3, #6]
 80117d6:	2200      	movs	r2, #0
 80117d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80117da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117dc:	2200      	movs	r2, #0
 80117de:	729a      	strb	r2, [r3, #10]
 80117e0:	2200      	movs	r2, #0
 80117e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80117e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80117ea:	e00e      	b.n	801180a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80117ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80117f2:	f06f 0113 	mvn.w	r1, #19
 80117f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80117f8:	f7f6 ff32 	bl	8008660 <pbuf_header>
      pbuf_cat(p, r);
 80117fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7f7 f820 	bl	8008844 <pbuf_cat>
      r = iprh->next_pbuf;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801180c:	2b00      	cmp	r3, #0
 801180e:	d1ed      	bne.n	80117ec <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011810:	4b1d      	ldr	r3, [pc, #116]	; (8011888 <ip4_reass+0x2a0>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011816:	429a      	cmp	r2, r3
 8011818:	d102      	bne.n	8011820 <ip4_reass+0x238>
      ipr_prev = NULL;
 801181a:	2300      	movs	r3, #0
 801181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801181e:	e010      	b.n	8011842 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011820:	4b19      	ldr	r3, [pc, #100]	; (8011888 <ip4_reass+0x2a0>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011826:	e007      	b.n	8011838 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8011828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801182e:	429a      	cmp	r2, r3
 8011830:	d006      	beq.n	8011840 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1f4      	bne.n	8011828 <ip4_reass+0x240>
 801183e:	e000      	b.n	8011842 <ip4_reass+0x25a>
          break;
 8011840:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011846:	f7ff fd37 	bl	80112b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f7f6 ffc0 	bl	80087d0 <pbuf_clen>
 8011850:	4603      	mov	r3, r0
 8011852:	461a      	mov	r2, r3
 8011854:	4b0b      	ldr	r3, [pc, #44]	; (8011884 <ip4_reass+0x29c>)
 8011856:	881b      	ldrh	r3, [r3, #0]
 8011858:	1a9b      	subs	r3, r3, r2
 801185a:	b29a      	uxth	r2, r3
 801185c:	4b09      	ldr	r3, [pc, #36]	; (8011884 <ip4_reass+0x29c>)
 801185e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	e00a      	b.n	801187a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011864:	2300      	movs	r3, #0
 8011866:	e008      	b.n	801187a <ip4_reass+0x292>
    goto nullreturn;
 8011868:	bf00      	nop
 801186a:	e002      	b.n	8011872 <ip4_reass+0x28a>

nullreturn:
 801186c:	bf00      	nop
 801186e:	e000      	b.n	8011872 <ip4_reass+0x28a>
    goto nullreturn;
 8011870:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7f6 ff18 	bl	80086a8 <pbuf_free>
  return NULL;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3738      	adds	r7, #56	; 0x38
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	20000384 	.word	0x20000384
 8011888:	20000380 	.word	0x20000380

0801188c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8011890:	2005      	movs	r0, #5
 8011892:	f7f6 f9af 	bl	8007bf4 <memp_malloc>
 8011896:	4603      	mov	r3, r0
}
 8011898:	4618      	mov	r0, r3
 801189a:	bd80      	pop	{r7, pc}

0801189c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d106      	bne.n	80118b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80118aa:	4b07      	ldr	r3, [pc, #28]	; (80118c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80118ac:	f240 22ae 	movw	r2, #686	; 0x2ae
 80118b0:	4906      	ldr	r1, [pc, #24]	; (80118cc <ip_frag_free_pbuf_custom_ref+0x30>)
 80118b2:	4807      	ldr	r0, [pc, #28]	; (80118d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80118b4:	f002 f976 	bl	8013ba4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80118b8:	6879      	ldr	r1, [r7, #4]
 80118ba:	2005      	movs	r0, #5
 80118bc:	f7f6 f9e6 	bl	8007c8c <memp_free>
}
 80118c0:	bf00      	nop
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	0801677c 	.word	0x0801677c
 80118cc:	080168e4 	.word	0x080168e4
 80118d0:	080167c4 	.word	0x080167c4

080118d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d106      	bne.n	80118f4 <ipfrag_free_pbuf_custom+0x20>
 80118e6:	4b11      	ldr	r3, [pc, #68]	; (801192c <ipfrag_free_pbuf_custom+0x58>)
 80118e8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80118ec:	4910      	ldr	r1, [pc, #64]	; (8011930 <ipfrag_free_pbuf_custom+0x5c>)
 80118ee:	4811      	ldr	r0, [pc, #68]	; (8011934 <ipfrag_free_pbuf_custom+0x60>)
 80118f0:	f002 f958 	bl	8013ba4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80118f4:	68fa      	ldr	r2, [r7, #12]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d006      	beq.n	801190a <ipfrag_free_pbuf_custom+0x36>
 80118fc:	4b0b      	ldr	r3, [pc, #44]	; (801192c <ipfrag_free_pbuf_custom+0x58>)
 80118fe:	f240 22b9 	movw	r2, #697	; 0x2b9
 8011902:	490d      	ldr	r1, [pc, #52]	; (8011938 <ipfrag_free_pbuf_custom+0x64>)
 8011904:	480b      	ldr	r0, [pc, #44]	; (8011934 <ipfrag_free_pbuf_custom+0x60>)
 8011906:	f002 f94d 	bl	8013ba4 <iprintf>
  if (pcr->original != NULL) {
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	695b      	ldr	r3, [r3, #20]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d004      	beq.n	801191c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	695b      	ldr	r3, [r3, #20]
 8011916:	4618      	mov	r0, r3
 8011918:	f7f6 fec6 	bl	80086a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	f7ff ffbd 	bl	801189c <ip_frag_free_pbuf_custom_ref>
}
 8011922:	bf00      	nop
 8011924:	3710      	adds	r7, #16
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	0801677c 	.word	0x0801677c
 8011930:	080168f0 	.word	0x080168f0
 8011934:	080167c4 	.word	0x080167c4
 8011938:	080168fc 	.word	0x080168fc

0801193c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b092      	sub	sp, #72	; 0x48
 8011940:	af02      	add	r7, sp, #8
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011948:	2300      	movs	r3, #0
 801194a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011950:	3b14      	subs	r3, #20
 8011952:	2b00      	cmp	r3, #0
 8011954:	da00      	bge.n	8011958 <ip4_frag+0x1c>
 8011956:	3307      	adds	r3, #7
 8011958:	10db      	asrs	r3, r3, #3
 801195a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801195c:	2314      	movs	r3, #20
 801195e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8011966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011968:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	f003 030f 	and.w	r3, r3, #15
 8011972:	009b      	lsls	r3, r3, #2
 8011974:	2b14      	cmp	r3, #20
 8011976:	d009      	beq.n	801198c <ip4_frag+0x50>
 8011978:	4b79      	ldr	r3, [pc, #484]	; (8011b60 <ip4_frag+0x224>)
 801197a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801197e:	4979      	ldr	r1, [pc, #484]	; (8011b64 <ip4_frag+0x228>)
 8011980:	4879      	ldr	r0, [pc, #484]	; (8011b68 <ip4_frag+0x22c>)
 8011982:	f002 f90f 	bl	8013ba4 <iprintf>
 8011986:	f06f 0305 	mvn.w	r3, #5
 801198a:	e0e5      	b.n	8011b58 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198e:	88db      	ldrh	r3, [r3, #6]
 8011990:	b29b      	uxth	r3, r3
 8011992:	4618      	mov	r0, r3
 8011994:	f7f5 fd80 	bl	8007498 <lwip_htons>
 8011998:	4603      	mov	r3, r0
 801199a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801199c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801199e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80119a2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80119a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80119a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d009      	beq.n	80119c2 <ip4_frag+0x86>
 80119ae:	4b6c      	ldr	r3, [pc, #432]	; (8011b60 <ip4_frag+0x224>)
 80119b0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80119b4:	496d      	ldr	r1, [pc, #436]	; (8011b6c <ip4_frag+0x230>)
 80119b6:	486c      	ldr	r0, [pc, #432]	; (8011b68 <ip4_frag+0x22c>)
 80119b8:	f002 f8f4 	bl	8013ba4 <iprintf>
 80119bc:	f06f 0305 	mvn.w	r3, #5
 80119c0:	e0ca      	b.n	8011b58 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	891b      	ldrh	r3, [r3, #8]
 80119c6:	3b14      	subs	r3, #20
 80119c8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80119ca:	e0bc      	b.n	8011b46 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80119cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80119ce:	00da      	lsls	r2, r3, #3
 80119d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80119d2:	4293      	cmp	r3, r2
 80119d4:	bfa8      	it	ge
 80119d6:	4613      	movge	r3, r2
 80119d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80119da:	2200      	movs	r2, #0
 80119dc:	2114      	movs	r1, #20
 80119de:	2002      	movs	r0, #2
 80119e0:	f7f6 faf0 	bl	8007fc4 <pbuf_alloc>
 80119e4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f000 80b2 	beq.w	8011b52 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	895b      	ldrh	r3, [r3, #10]
 80119f2:	2b13      	cmp	r3, #19
 80119f4:	d806      	bhi.n	8011a04 <ip4_frag+0xc8>
 80119f6:	4b5a      	ldr	r3, [pc, #360]	; (8011b60 <ip4_frag+0x224>)
 80119f8:	f240 3209 	movw	r2, #777	; 0x309
 80119fc:	495c      	ldr	r1, [pc, #368]	; (8011b70 <ip4_frag+0x234>)
 80119fe:	485a      	ldr	r0, [pc, #360]	; (8011b68 <ip4_frag+0x22c>)
 8011a00:	f002 f8d0 	bl	8013ba4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011a04:	6a3b      	ldr	r3, [r7, #32]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	2214      	movs	r2, #20
 8011a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f002 f80e 	bl	8013a2e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011a12:	6a3b      	ldr	r3, [r7, #32]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8011a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8011a1c:	e04f      	b.n	8011abe <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	895a      	ldrh	r2, [r3, #10]
 8011a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011a28:	8b7a      	ldrh	r2, [r7, #26]
 8011a2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	bf28      	it	cs
 8011a30:	4613      	movcs	r3, r2
 8011a32:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011a34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d105      	bne.n	8011a46 <ip4_frag+0x10a>
        poff = 0;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	60fb      	str	r3, [r7, #12]
        continue;
 8011a44:	e03b      	b.n	8011abe <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011a46:	f7ff ff21 	bl	801188c <ip_frag_alloc_pbuf_custom_ref>
 8011a4a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d103      	bne.n	8011a5a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8011a52:	6a38      	ldr	r0, [r7, #32]
 8011a54:	f7f6 fe28 	bl	80086a8 <pbuf_free>
        goto memerr;
 8011a58:	e07c      	b.n	8011b54 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011a5a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011a60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011a62:	4413      	add	r3, r2
 8011a64:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8011a66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011a68:	9201      	str	r2, [sp, #4]
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2202      	movs	r2, #2
 8011a70:	2004      	movs	r0, #4
 8011a72:	f7f6 fc3b 	bl	80082ec <pbuf_alloced_custom>
 8011a76:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d106      	bne.n	8011a8c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011a7e:	6978      	ldr	r0, [r7, #20]
 8011a80:	f7ff ff0c 	bl	801189c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011a84:	6a38      	ldr	r0, [r7, #32]
 8011a86:	f7f6 fe0f 	bl	80086a8 <pbuf_free>
        goto memerr;
 8011a8a:	e063      	b.n	8011b54 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8011a8c:	68f8      	ldr	r0, [r7, #12]
 8011a8e:	f7f6 feb7 	bl	8008800 <pbuf_ref>
      pcr->original = p;
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	68fa      	ldr	r2, [r7, #12]
 8011a96:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	4a36      	ldr	r2, [pc, #216]	; (8011b74 <ip4_frag+0x238>)
 8011a9c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011a9e:	6939      	ldr	r1, [r7, #16]
 8011aa0:	6a38      	ldr	r0, [r7, #32]
 8011aa2:	f7f6 fecf 	bl	8008844 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8011aa6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8011aa8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8011aae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d004      	beq.n	8011abe <ip4_frag+0x182>
        poff = 0;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011abe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d1ac      	bne.n	8011a1e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8011ac4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011ac6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ac8:	4413      	add	r3, r2
 8011aca:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011acc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011ad2:	3b14      	subs	r3, #20
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	bfd4      	ite	le
 8011ad8:	2301      	movle	r3, #1
 8011ada:	2300      	movgt	r3, #0
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011ae0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011ae2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ae6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d103      	bne.n	8011af6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8011aee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011af0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011af4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011af6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7f5 fccd 	bl	8007498 <lwip_htons>
 8011afe:	4603      	mov	r3, r0
 8011b00:	461a      	mov	r2, r3
 8011b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b04:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8011b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b08:	3314      	adds	r3, #20
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7f5 fcc3 	bl	8007498 <lwip_htons>
 8011b12:	4603      	mov	r3, r0
 8011b14:	461a      	mov	r2, r3
 8011b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b18:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	729a      	strb	r2, [r3, #10]
 8011b20:	2200      	movs	r2, #0
 8011b22:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	695b      	ldr	r3, [r3, #20]
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	6a39      	ldr	r1, [r7, #32]
 8011b2c:	68b8      	ldr	r0, [r7, #8]
 8011b2e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011b30:	6a38      	ldr	r0, [r7, #32]
 8011b32:	f7f6 fdb9 	bl	80086a8 <pbuf_free>
    left -= fragsize;
 8011b36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8011b3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011b40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011b42:	4413      	add	r3, r2
 8011b44:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8011b46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f47f af3f 	bne.w	80119cc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	e002      	b.n	8011b58 <ip4_frag+0x21c>
      goto memerr;
 8011b52:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3740      	adds	r7, #64	; 0x40
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	0801677c 	.word	0x0801677c
 8011b64:	08016908 	.word	0x08016908
 8011b68:	080167c4 	.word	0x080167c4
 8011b6c:	08016930 	.word	0x08016930
 8011b70:	0801694c 	.word	0x0801694c
 8011b74:	080118d5 	.word	0x080118d5

08011b78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8011b82:	230e      	movs	r3, #14
 8011b84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	895b      	ldrh	r3, [r3, #10]
 8011b8a:	2b0e      	cmp	r3, #14
 8011b8c:	d977      	bls.n	8011c7e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	7b1a      	ldrb	r2, [r3, #12]
 8011b98:	7b5b      	ldrb	r3, [r3, #13]
 8011b9a:	021b      	lsls	r3, r3, #8
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	f003 0301 	and.w	r3, r3, #1
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d023      	beq.n	8011bf4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d10f      	bne.n	8011bd4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	785b      	ldrb	r3, [r3, #1]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d11b      	bne.n	8011bf4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011bc0:	2b5e      	cmp	r3, #94	; 0x5e
 8011bc2:	d117      	bne.n	8011bf4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	7b5b      	ldrb	r3, [r3, #13]
 8011bc8:	f043 0310 	orr.w	r3, r3, #16
 8011bcc:	b2da      	uxtb	r2, r3
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	735a      	strb	r2, [r3, #13]
 8011bd2:	e00f      	b.n	8011bf4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	2206      	movs	r2, #6
 8011bd8:	4930      	ldr	r1, [pc, #192]	; (8011c9c <ethernet_input+0x124>)
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f001 ff18 	bl	8013a10 <memcmp>
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d106      	bne.n	8011bf4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	7b5b      	ldrb	r3, [r3, #13]
 8011bea:	f043 0308 	orr.w	r3, r3, #8
 8011bee:	b2da      	uxtb	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011bf4:	89fb      	ldrh	r3, [r7, #14]
 8011bf6:	2b08      	cmp	r3, #8
 8011bf8:	d003      	beq.n	8011c02 <ethernet_input+0x8a>
 8011bfa:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011bfe:	d01e      	beq.n	8011c3e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011c00:	e044      	b.n	8011c8c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011c08:	f003 0308 	and.w	r3, r3, #8
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d038      	beq.n	8011c82 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	895b      	ldrh	r3, [r3, #10]
 8011c14:	461a      	mov	r2, r3
 8011c16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	db33      	blt.n	8011c86 <ethernet_input+0x10e>
 8011c1e:	8afb      	ldrh	r3, [r7, #22]
 8011c20:	425b      	negs	r3, r3
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	b21b      	sxth	r3, r3
 8011c26:	4619      	mov	r1, r3
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7f6 fd19 	bl	8008660 <pbuf_header>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d128      	bne.n	8011c86 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8011c34:	6839      	ldr	r1, [r7, #0]
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7fe ff62 	bl	8010b00 <ip4_input>
      break;
 8011c3c:	e01d      	b.n	8011c7a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011c44:	f003 0308 	and.w	r3, r3, #8
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d01e      	beq.n	8011c8a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	895b      	ldrh	r3, [r3, #10]
 8011c50:	461a      	mov	r2, r3
 8011c52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	db15      	blt.n	8011c86 <ethernet_input+0x10e>
 8011c5a:	8afb      	ldrh	r3, [r7, #22]
 8011c5c:	425b      	negs	r3, r3
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	b21b      	sxth	r3, r3
 8011c62:	4619      	mov	r1, r3
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7f6 fcfb 	bl	8008660 <pbuf_header>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d10a      	bne.n	8011c86 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8011c70:	6839      	ldr	r1, [r7, #0]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7fe f92c 	bl	800fed0 <etharp_input>
      break;
 8011c78:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	e00a      	b.n	8011c94 <ethernet_input+0x11c>
    goto free_and_return;
 8011c7e:	bf00      	nop
 8011c80:	e004      	b.n	8011c8c <ethernet_input+0x114>
        goto free_and_return;
 8011c82:	bf00      	nop
 8011c84:	e002      	b.n	8011c8c <ethernet_input+0x114>

free_and_return:
 8011c86:	bf00      	nop
 8011c88:	e000      	b.n	8011c8c <ethernet_input+0x114>
        goto free_and_return;
 8011c8a:	bf00      	nop
  pbuf_free(p);
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7f6 fd0b 	bl	80086a8 <pbuf_free>
  return ERR_OK;
 8011c92:	2300      	movs	r3, #0
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3718      	adds	r7, #24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	08016b78 	.word	0x08016b78

08011ca0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	607a      	str	r2, [r7, #4]
 8011cac:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011cae:	8c3b      	ldrh	r3, [r7, #32]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7f5 fbf1 	bl	8007498 <lwip_htons>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8011cba:	210e      	movs	r1, #14
 8011cbc:	68b8      	ldr	r0, [r7, #8]
 8011cbe:	f7f6 fccf 	bl	8008660 <pbuf_header>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d125      	bne.n	8011d14 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	8afa      	ldrh	r2, [r7, #22]
 8011cd2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	2206      	movs	r2, #6
 8011cd8:	6839      	ldr	r1, [r7, #0]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f001 fea7 	bl	8013a2e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	3306      	adds	r3, #6
 8011ce4:	2206      	movs	r2, #6
 8011ce6:	6879      	ldr	r1, [r7, #4]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f001 fea0 	bl	8013a2e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cf4:	2b06      	cmp	r3, #6
 8011cf6:	d006      	beq.n	8011d06 <ethernet_output+0x66>
 8011cf8:	4b0a      	ldr	r3, [pc, #40]	; (8011d24 <ethernet_output+0x84>)
 8011cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011cfe:	490a      	ldr	r1, [pc, #40]	; (8011d28 <ethernet_output+0x88>)
 8011d00:	480a      	ldr	r0, [pc, #40]	; (8011d2c <ethernet_output+0x8c>)
 8011d02:	f001 ff4f 	bl	8013ba4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	699b      	ldr	r3, [r3, #24]
 8011d0a:	68b9      	ldr	r1, [r7, #8]
 8011d0c:	68f8      	ldr	r0, [r7, #12]
 8011d0e:	4798      	blx	r3
 8011d10:	4603      	mov	r3, r0
 8011d12:	e002      	b.n	8011d1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011d14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011d16:	f06f 0301 	mvn.w	r3, #1
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3718      	adds	r7, #24
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	0801696c 	.word	0x0801696c
 8011d28:	080169a4 	.word	0x080169a4
 8011d2c:	080169d8 	.word	0x080169d8

08011d30 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b08e      	sub	sp, #56	; 0x38
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	601a      	str	r2, [r3, #0]
 8011d40:	605a      	str	r2, [r3, #4]
 8011d42:	609a      	str	r2, [r3, #8]
 8011d44:	60da      	str	r2, [r3, #12]
 8011d46:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a55      	ldr	r2, [pc, #340]	; (8011ea4 <HAL_ETH_MspInit+0x174>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	f040 80a4 	bne.w	8011e9c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8011d54:	2300      	movs	r3, #0
 8011d56:	623b      	str	r3, [r7, #32]
 8011d58:	4b53      	ldr	r3, [pc, #332]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d5c:	4a52      	ldr	r2, [pc, #328]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011d62:	6313      	str	r3, [r2, #48]	; 0x30
 8011d64:	4b50      	ldr	r3, [pc, #320]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d6c:	623b      	str	r3, [r7, #32]
 8011d6e:	6a3b      	ldr	r3, [r7, #32]
 8011d70:	2300      	movs	r3, #0
 8011d72:	61fb      	str	r3, [r7, #28]
 8011d74:	4b4c      	ldr	r3, [pc, #304]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d78:	4a4b      	ldr	r2, [pc, #300]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8011d80:	4b49      	ldr	r3, [pc, #292]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d88:	61fb      	str	r3, [r7, #28]
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	61bb      	str	r3, [r7, #24]
 8011d90:	4b45      	ldr	r3, [pc, #276]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d94:	4a44      	ldr	r2, [pc, #272]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8011d9c:	4b42      	ldr	r3, [pc, #264]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011da4:	61bb      	str	r3, [r7, #24]
 8011da6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011da8:	2300      	movs	r3, #0
 8011daa:	617b      	str	r3, [r7, #20]
 8011dac:	4b3e      	ldr	r3, [pc, #248]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db0:	4a3d      	ldr	r2, [pc, #244]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011db2:	f043 0304 	orr.w	r3, r3, #4
 8011db6:	6313      	str	r3, [r2, #48]	; 0x30
 8011db8:	4b3b      	ldr	r3, [pc, #236]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dbc:	f003 0304 	and.w	r3, r3, #4
 8011dc0:	617b      	str	r3, [r7, #20]
 8011dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	613b      	str	r3, [r7, #16]
 8011dc8:	4b37      	ldr	r3, [pc, #220]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dcc:	4a36      	ldr	r2, [pc, #216]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011dce:	f043 0301 	orr.w	r3, r3, #1
 8011dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8011dd4:	4b34      	ldr	r3, [pc, #208]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dd8:	f003 0301 	and.w	r3, r3, #1
 8011ddc:	613b      	str	r3, [r7, #16]
 8011dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011de0:	2300      	movs	r3, #0
 8011de2:	60fb      	str	r3, [r7, #12]
 8011de4:	4b30      	ldr	r3, [pc, #192]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011de8:	4a2f      	ldr	r2, [pc, #188]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011dea:	f043 0302 	orr.w	r3, r3, #2
 8011dee:	6313      	str	r3, [r2, #48]	; 0x30
 8011df0:	4b2d      	ldr	r3, [pc, #180]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011df4:	f003 0302 	and.w	r3, r3, #2
 8011df8:	60fb      	str	r3, [r7, #12]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	60bb      	str	r3, [r7, #8]
 8011e00:	4b29      	ldr	r3, [pc, #164]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e04:	4a28      	ldr	r2, [pc, #160]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8011e0c:	4b26      	ldr	r3, [pc, #152]	; (8011ea8 <HAL_ETH_MspInit+0x178>)
 8011e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e14:	60bb      	str	r3, [r7, #8]
 8011e16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8011e18:	2332      	movs	r3, #50	; 0x32
 8011e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e1c:	2302      	movs	r3, #2
 8011e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e20:	2300      	movs	r3, #0
 8011e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e24:	2303      	movs	r3, #3
 8011e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011e28:	230b      	movs	r3, #11
 8011e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e30:	4619      	mov	r1, r3
 8011e32:	481e      	ldr	r0, [pc, #120]	; (8011eac <HAL_ETH_MspInit+0x17c>)
 8011e34:	f7ef fc62 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8011e38:	2386      	movs	r3, #134	; 0x86
 8011e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e3c:	2302      	movs	r3, #2
 8011e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e40:	2300      	movs	r3, #0
 8011e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e44:	2303      	movs	r3, #3
 8011e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011e48:	230b      	movs	r3, #11
 8011e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e50:	4619      	mov	r1, r3
 8011e52:	4817      	ldr	r0, [pc, #92]	; (8011eb0 <HAL_ETH_MspInit+0x180>)
 8011e54:	f7ef fc52 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8011e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e5e:	2302      	movs	r3, #2
 8011e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e62:	2300      	movs	r3, #0
 8011e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e66:	2303      	movs	r3, #3
 8011e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011e6a:	230b      	movs	r3, #11
 8011e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8011e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e72:	4619      	mov	r1, r3
 8011e74:	480f      	ldr	r0, [pc, #60]	; (8011eb4 <HAL_ETH_MspInit+0x184>)
 8011e76:	f7ef fc41 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8011e7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8011e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e80:	2302      	movs	r3, #2
 8011e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e84:	2300      	movs	r3, #0
 8011e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e88:	2303      	movs	r3, #3
 8011e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011e8c:	230b      	movs	r3, #11
 8011e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e94:	4619      	mov	r1, r3
 8011e96:	4808      	ldr	r0, [pc, #32]	; (8011eb8 <HAL_ETH_MspInit+0x188>)
 8011e98:	f7ef fc30 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011e9c:	bf00      	nop
 8011e9e:	3738      	adds	r7, #56	; 0x38
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	40028000 	.word	0x40028000
 8011ea8:	40023800 	.word	0x40023800
 8011eac:	40020800 	.word	0x40020800
 8011eb0:	40020000 	.word	0x40020000
 8011eb4:	40020400 	.word	0x40020400
 8011eb8:	40021800 	.word	0x40021800

08011ebc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b086      	sub	sp, #24
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011ec8:	4b49      	ldr	r3, [pc, #292]	; (8011ff0 <low_level_init+0x134>)
 8011eca:	4a4a      	ldr	r2, [pc, #296]	; (8011ff4 <low_level_init+0x138>)
 8011ecc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8011ece:	4b48      	ldr	r3, [pc, #288]	; (8011ff0 <low_level_init+0x134>)
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8011ed4:	4b46      	ldr	r3, [pc, #280]	; (8011ff0 <low_level_init+0x134>)
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8011eda:	2300      	movs	r3, #0
 8011edc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8011ede:	2380      	movs	r3, #128	; 0x80
 8011ee0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8011ee2:	23e1      	movs	r3, #225	; 0xe1
 8011ee4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8011eea:	2300      	movs	r3, #0
 8011eec:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8011ef2:	4a3f      	ldr	r2, [pc, #252]	; (8011ff0 <low_level_init+0x134>)
 8011ef4:	f107 0308 	add.w	r3, r7, #8
 8011ef8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8011efa:	4b3d      	ldr	r3, [pc, #244]	; (8011ff0 <low_level_init+0x134>)
 8011efc:	2200      	movs	r2, #0
 8011efe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8011f00:	4b3b      	ldr	r3, [pc, #236]	; (8011ff0 <low_level_init+0x134>)
 8011f02:	2200      	movs	r2, #0
 8011f04:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8011f06:	4b3a      	ldr	r3, [pc, #232]	; (8011ff0 <low_level_init+0x134>)
 8011f08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011f0c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011f0e:	4838      	ldr	r0, [pc, #224]	; (8011ff0 <low_level_init+0x134>)
 8011f10:	f7ee fce4 	bl	80008dc <HAL_ETH_Init>
 8011f14:	4603      	mov	r3, r0
 8011f16:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8011f18:	7dfb      	ldrb	r3, [r7, #23]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d108      	bne.n	8011f30 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f24:	f043 0304 	orr.w	r3, r3, #4
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011f30:	2304      	movs	r3, #4
 8011f32:	4a31      	ldr	r2, [pc, #196]	; (8011ff8 <low_level_init+0x13c>)
 8011f34:	4931      	ldr	r1, [pc, #196]	; (8011ffc <low_level_init+0x140>)
 8011f36:	482e      	ldr	r0, [pc, #184]	; (8011ff0 <low_level_init+0x134>)
 8011f38:	f7ee fe6e 	bl	8000c18 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8011f3c:	2304      	movs	r3, #4
 8011f3e:	4a30      	ldr	r2, [pc, #192]	; (8012000 <low_level_init+0x144>)
 8011f40:	4930      	ldr	r1, [pc, #192]	; (8012004 <low_level_init+0x148>)
 8011f42:	482b      	ldr	r0, [pc, #172]	; (8011ff0 <low_level_init+0x134>)
 8011f44:	f7ee fed1 	bl	8000cea <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2206      	movs	r2, #6
 8011f4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011f50:	4b27      	ldr	r3, [pc, #156]	; (8011ff0 <low_level_init+0x134>)
 8011f52:	695b      	ldr	r3, [r3, #20]
 8011f54:	781a      	ldrb	r2, [r3, #0]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011f5c:	4b24      	ldr	r3, [pc, #144]	; (8011ff0 <low_level_init+0x134>)
 8011f5e:	695b      	ldr	r3, [r3, #20]
 8011f60:	785a      	ldrb	r2, [r3, #1]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011f68:	4b21      	ldr	r3, [pc, #132]	; (8011ff0 <low_level_init+0x134>)
 8011f6a:	695b      	ldr	r3, [r3, #20]
 8011f6c:	789a      	ldrb	r2, [r3, #2]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011f74:	4b1e      	ldr	r3, [pc, #120]	; (8011ff0 <low_level_init+0x134>)
 8011f76:	695b      	ldr	r3, [r3, #20]
 8011f78:	78da      	ldrb	r2, [r3, #3]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011f80:	4b1b      	ldr	r3, [pc, #108]	; (8011ff0 <low_level_init+0x134>)
 8011f82:	695b      	ldr	r3, [r3, #20]
 8011f84:	791a      	ldrb	r2, [r3, #4]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011f8c:	4b18      	ldr	r3, [pc, #96]	; (8011ff0 <low_level_init+0x134>)
 8011f8e:	695b      	ldr	r3, [r3, #20]
 8011f90:	795a      	ldrb	r2, [r3, #5]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011f9e:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011fa6:	f043 030a 	orr.w	r3, r3, #10
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8011fb2:	480f      	ldr	r0, [pc, #60]	; (8011ff0 <low_level_init+0x134>)
 8011fb4:	f7ef f8be 	bl	8001134 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8011fb8:	f107 0310 	add.w	r3, r7, #16
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	211d      	movs	r1, #29
 8011fc0:	480b      	ldr	r0, [pc, #44]	; (8011ff0 <low_level_init+0x134>)
 8011fc2:	f7ee ffe9 	bl	8000f98 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	f043 030b 	orr.w	r3, r3, #11
 8011fcc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	211d      	movs	r1, #29
 8011fd4:	4806      	ldr	r0, [pc, #24]	; (8011ff0 <low_level_init+0x134>)
 8011fd6:	f7ef f847 	bl	8001068 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8011fda:	f107 0310 	add.w	r3, r7, #16
 8011fde:	461a      	mov	r2, r3
 8011fe0:	211d      	movs	r1, #29
 8011fe2:	4803      	ldr	r0, [pc, #12]	; (8011ff0 <low_level_init+0x134>)
 8011fe4:	f7ee ffd8 	bl	8000f98 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8011fe8:	bf00      	nop
 8011fea:	3718      	adds	r7, #24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	200051fc 	.word	0x200051fc
 8011ff4:	40028000 	.word	0x40028000
 8011ff8:	20005244 	.word	0x20005244
 8011ffc:	2000392c 	.word	0x2000392c
 8012000:	200039ac 	.word	0x200039ac
 8012004:	2000517c 	.word	0x2000517c

08012008 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b08a      	sub	sp, #40	; 0x28
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012012:	4b4b      	ldr	r3, [pc, #300]	; (8012140 <low_level_output+0x138>)
 8012014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 801201a:	2300      	movs	r3, #0
 801201c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801201e:	2300      	movs	r3, #0
 8012020:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8012026:	2300      	movs	r3, #0
 8012028:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 801202a:	4b45      	ldr	r3, [pc, #276]	; (8012140 <low_level_output+0x138>)
 801202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8012030:	2300      	movs	r3, #0
 8012032:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	623b      	str	r3, [r7, #32]
 8012038:	e05a      	b.n	80120f0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	da03      	bge.n	801204a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8012042:	23f8      	movs	r3, #248	; 0xf8
 8012044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8012048:	e05c      	b.n	8012104 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 801204a:	6a3b      	ldr	r3, [r7, #32]
 801204c:	895b      	ldrh	r3, [r3, #10]
 801204e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8012050:	2300      	movs	r3, #0
 8012052:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012054:	e02f      	b.n	80120b6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8012056:	69fa      	ldr	r2, [r7, #28]
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	18d0      	adds	r0, r2, r3
 801205c:	6a3b      	ldr	r3, [r7, #32]
 801205e:	685a      	ldr	r2, [r3, #4]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	18d1      	adds	r1, r2, r3
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801206a:	3304      	adds	r3, #4
 801206c:	461a      	mov	r2, r3
 801206e:	f001 fcde 	bl	8013a2e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	68db      	ldr	r3, [r3, #12]
 8012076:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	da03      	bge.n	8012088 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8012080:	23f8      	movs	r3, #248	; 0xf8
 8012082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8012086:	e03d      	b.n	8012104 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801208e:	693a      	ldr	r2, [r7, #16]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	4413      	add	r3, r2
 8012094:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8012098:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801209a:	68ba      	ldr	r2, [r7, #8]
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	1ad3      	subs	r3, r2, r3
 80120a0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80120a4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80120a6:	697a      	ldr	r2, [r7, #20]
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	1ad3      	subs	r3, r2, r3
 80120ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80120b0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80120b2:	2300      	movs	r3, #0
 80120b4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80120b6:	68fa      	ldr	r2, [r7, #12]
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	4413      	add	r3, r2
 80120bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80120c0:	4293      	cmp	r3, r2
 80120c2:	d8c8      	bhi.n	8012056 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80120c4:	69fa      	ldr	r2, [r7, #28]
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	18d0      	adds	r0, r2, r3
 80120ca:	6a3b      	ldr	r3, [r7, #32]
 80120cc:	685a      	ldr	r2, [r3, #4]
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	4413      	add	r3, r2
 80120d2:	68fa      	ldr	r2, [r7, #12]
 80120d4:	4619      	mov	r1, r3
 80120d6:	f001 fcaa 	bl	8013a2e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80120da:	693a      	ldr	r2, [r7, #16]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	4413      	add	r3, r2
 80120e0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80120e2:	697a      	ldr	r2, [r7, #20]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	4413      	add	r3, r2
 80120e8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	623b      	str	r3, [r7, #32]
 80120f0:	6a3b      	ldr	r3, [r7, #32]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d1a1      	bne.n	801203a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80120f6:	6979      	ldr	r1, [r7, #20]
 80120f8:	4811      	ldr	r0, [pc, #68]	; (8012140 <low_level_output+0x138>)
 80120fa:	f7ee fe63 	bl	8000dc4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80120fe:	2300      	movs	r3, #0
 8012100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8012104:	4b0e      	ldr	r3, [pc, #56]	; (8012140 <low_level_output+0x138>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801210c:	3314      	adds	r3, #20
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f003 0320 	and.w	r3, r3, #32
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00d      	beq.n	8012134 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8012118:	4b09      	ldr	r3, [pc, #36]	; (8012140 <low_level_output+0x138>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012120:	3314      	adds	r3, #20
 8012122:	2220      	movs	r2, #32
 8012124:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8012126:	4b06      	ldr	r3, [pc, #24]	; (8012140 <low_level_output+0x138>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801212e:	3304      	adds	r3, #4
 8012130:	2200      	movs	r2, #0
 8012132:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8012134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012138:	4618      	mov	r0, r3
 801213a:	3728      	adds	r7, #40	; 0x28
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	200051fc 	.word	0x200051fc

08012144 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d106      	bne.n	8012160 <ethernetif_init+0x1c>
 8012152:	4b0e      	ldr	r3, [pc, #56]	; (801218c <ethernetif_init+0x48>)
 8012154:	f44f 7204 	mov.w	r2, #528	; 0x210
 8012158:	490d      	ldr	r1, [pc, #52]	; (8012190 <ethernetif_init+0x4c>)
 801215a:	480e      	ldr	r0, [pc, #56]	; (8012194 <ethernetif_init+0x50>)
 801215c:	f001 fd22 	bl	8013ba4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2273      	movs	r2, #115	; 0x73
 8012164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2274      	movs	r2, #116	; 0x74
 801216c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	4a09      	ldr	r2, [pc, #36]	; (8012198 <ethernetif_init+0x54>)
 8012174:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4a08      	ldr	r2, [pc, #32]	; (801219c <ethernetif_init+0x58>)
 801217a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f7ff fe9d 	bl	8011ebc <low_level_init>

  return ERR_OK;
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	08016a00 	.word	0x08016a00
 8012190:	08016a14 	.word	0x08016a14
 8012194:	08016a24 	.word	0x08016a24
 8012198:	08010121 	.word	0x08010121
 801219c:	08012009 	.word	0x08012009

080121a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80121a4:	f7ee fa5a 	bl	800065c <HAL_GetTick>
 80121a8:	4603      	mov	r3, r0
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	bd80      	pop	{r7, pc}
	...

080121b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b08e      	sub	sp, #56	; 0x38
 80121b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80121ba:	2200      	movs	r2, #0
 80121bc:	601a      	str	r2, [r3, #0]
 80121be:	605a      	str	r2, [r3, #4]
 80121c0:	609a      	str	r2, [r3, #8]
 80121c2:	60da      	str	r2, [r3, #12]
 80121c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80121c6:	2300      	movs	r3, #0
 80121c8:	623b      	str	r3, [r7, #32]
 80121ca:	4bab      	ldr	r3, [pc, #684]	; (8012478 <MX_GPIO_Init+0x2c8>)
 80121cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121ce:	4aaa      	ldr	r2, [pc, #680]	; (8012478 <MX_GPIO_Init+0x2c8>)
 80121d0:	f043 0310 	orr.w	r3, r3, #16
 80121d4:	6313      	str	r3, [r2, #48]	; 0x30
 80121d6:	4ba8      	ldr	r3, [pc, #672]	; (8012478 <MX_GPIO_Init+0x2c8>)
 80121d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121da:	f003 0310 	and.w	r3, r3, #16
 80121de:	623b      	str	r3, [r7, #32]
 80121e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80121e2:	2300      	movs	r3, #0
 80121e4:	61fb      	str	r3, [r7, #28]
 80121e6:	4ba4      	ldr	r3, [pc, #656]	; (8012478 <MX_GPIO_Init+0x2c8>)
 80121e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121ea:	4aa3      	ldr	r2, [pc, #652]	; (8012478 <MX_GPIO_Init+0x2c8>)
 80121ec:	f043 0304 	orr.w	r3, r3, #4
 80121f0:	6313      	str	r3, [r2, #48]	; 0x30
 80121f2:	4ba1      	ldr	r3, [pc, #644]	; (8012478 <MX_GPIO_Init+0x2c8>)
 80121f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121f6:	f003 0304 	and.w	r3, r3, #4
 80121fa:	61fb      	str	r3, [r7, #28]
 80121fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80121fe:	2300      	movs	r3, #0
 8012200:	61bb      	str	r3, [r7, #24]
 8012202:	4b9d      	ldr	r3, [pc, #628]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012206:	4a9c      	ldr	r2, [pc, #624]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012208:	f043 0320 	orr.w	r3, r3, #32
 801220c:	6313      	str	r3, [r2, #48]	; 0x30
 801220e:	4b9a      	ldr	r3, [pc, #616]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012212:	f003 0320 	and.w	r3, r3, #32
 8012216:	61bb      	str	r3, [r7, #24]
 8012218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801221a:	2300      	movs	r3, #0
 801221c:	617b      	str	r3, [r7, #20]
 801221e:	4b96      	ldr	r3, [pc, #600]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012222:	4a95      	ldr	r2, [pc, #596]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012228:	6313      	str	r3, [r2, #48]	; 0x30
 801222a:	4b93      	ldr	r3, [pc, #588]	; (8012478 <MX_GPIO_Init+0x2c8>)
 801222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012232:	617b      	str	r3, [r7, #20]
 8012234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012236:	2300      	movs	r3, #0
 8012238:	613b      	str	r3, [r7, #16]
 801223a:	4b8f      	ldr	r3, [pc, #572]	; (8012478 <MX_GPIO_Init+0x2c8>)
 801223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801223e:	4a8e      	ldr	r2, [pc, #568]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012240:	f043 0301 	orr.w	r3, r3, #1
 8012244:	6313      	str	r3, [r2, #48]	; 0x30
 8012246:	4b8c      	ldr	r3, [pc, #560]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801224a:	f003 0301 	and.w	r3, r3, #1
 801224e:	613b      	str	r3, [r7, #16]
 8012250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012252:	2300      	movs	r3, #0
 8012254:	60fb      	str	r3, [r7, #12]
 8012256:	4b88      	ldr	r3, [pc, #544]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801225a:	4a87      	ldr	r2, [pc, #540]	; (8012478 <MX_GPIO_Init+0x2c8>)
 801225c:	f043 0302 	orr.w	r3, r3, #2
 8012260:	6313      	str	r3, [r2, #48]	; 0x30
 8012262:	4b85      	ldr	r3, [pc, #532]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012266:	f003 0302 	and.w	r3, r3, #2
 801226a:	60fb      	str	r3, [r7, #12]
 801226c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801226e:	2300      	movs	r3, #0
 8012270:	60bb      	str	r3, [r7, #8]
 8012272:	4b81      	ldr	r3, [pc, #516]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012276:	4a80      	ldr	r2, [pc, #512]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801227c:	6313      	str	r3, [r2, #48]	; 0x30
 801227e:	4b7e      	ldr	r3, [pc, #504]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012286:	60bb      	str	r3, [r7, #8]
 8012288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801228a:	2300      	movs	r3, #0
 801228c:	607b      	str	r3, [r7, #4]
 801228e:	4b7a      	ldr	r3, [pc, #488]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012292:	4a79      	ldr	r2, [pc, #484]	; (8012478 <MX_GPIO_Init+0x2c8>)
 8012294:	f043 0308 	orr.w	r3, r3, #8
 8012298:	6313      	str	r3, [r2, #48]	; 0x30
 801229a:	4b77      	ldr	r3, [pc, #476]	; (8012478 <MX_GPIO_Init+0x2c8>)
 801229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801229e:	f003 0308 	and.w	r3, r3, #8
 80122a2:	607b      	str	r3, [r7, #4]
 80122a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LD1_Pin, GPIO_PIN_RESET);
 80122a6:	2200      	movs	r2, #0
 80122a8:	f240 2101 	movw	r1, #513	; 0x201
 80122ac:	4873      	ldr	r0, [pc, #460]	; (801247c <MX_GPIO_Init+0x2cc>)
 80122ae:	f7ef fbcf 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80122b2:	2200      	movs	r2, #0
 80122b4:	2108      	movs	r1, #8
 80122b6:	4872      	ldr	r0, [pc, #456]	; (8012480 <MX_GPIO_Init+0x2d0>)
 80122b8:	f7ef fbca 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80122bc:	2200      	movs	r2, #0
 80122be:	f244 0181 	movw	r1, #16513	; 0x4081
 80122c2:	4870      	ldr	r0, [pc, #448]	; (8012484 <MX_GPIO_Init+0x2d4>)
 80122c4:	f7ef fbc4 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80122c8:	2200      	movs	r2, #0
 80122ca:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80122ce:	486e      	ldr	r0, [pc, #440]	; (8012488 <MX_GPIO_Init+0x2d8>)
 80122d0:	f7ef fbbe 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80122d4:	2200      	movs	r2, #0
 80122d6:	2140      	movs	r1, #64	; 0x40
 80122d8:	486c      	ldr	r0, [pc, #432]	; (801248c <MX_GPIO_Init+0x2dc>)
 80122da:	f7ef fbb9 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80122de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80122e4:	2303      	movs	r3, #3
 80122e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122e8:	2300      	movs	r3, #0
 80122ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80122ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122f0:	4619      	mov	r1, r3
 80122f2:	4867      	ldr	r0, [pc, #412]	; (8012490 <MX_GPIO_Init+0x2e0>)
 80122f4:	f7ef fa02 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80122f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80122fe:	4b65      	ldr	r3, [pc, #404]	; (8012494 <MX_GPIO_Init+0x2e4>)
 8012300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012302:	2300      	movs	r3, #0
 8012304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8012306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801230a:	4619      	mov	r1, r3
 801230c:	485b      	ldr	r0, [pc, #364]	; (801247c <MX_GPIO_Init+0x2cc>)
 801230e:	f7ef f9f5 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF4 PF5 
                           PF6 PF7 PF8 PF9 
                           PF10 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8012312:	f648 73fc 	movw	r3, #36860	; 0x8ffc
 8012316:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012318:	2303      	movs	r3, #3
 801231a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801231c:	2300      	movs	r3, #0
 801231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012324:	4619      	mov	r1, r3
 8012326:	4858      	ldr	r0, [pc, #352]	; (8012488 <MX_GPIO_Init+0x2d8>)
 8012328:	f7ef f9e8 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD1_Pin;
 801232c:	f240 2301 	movw	r3, #513	; 0x201
 8012330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012332:	2301      	movs	r3, #1
 8012334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012336:	2300      	movs	r3, #0
 8012338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801233a:	2300      	movs	r3, #0
 801233c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801233e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012342:	4619      	mov	r1, r3
 8012344:	484d      	ldr	r0, [pc, #308]	; (801247c <MX_GPIO_Init+0x2cc>)
 8012346:	f7ef f9d9 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC6 PC7 
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7 
 801234a:	f641 53cc 	movw	r3, #7628	; 0x1dcc
 801234e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012350:	2303      	movs	r3, #3
 8012352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012354:	2300      	movs	r3, #0
 8012356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801235c:	4619      	mov	r1, r3
 801235e:	4847      	ldr	r0, [pc, #284]	; (801247c <MX_GPIO_Init+0x2cc>)
 8012360:	f7ef f9cc 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8012364:	2331      	movs	r3, #49	; 0x31
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012368:	2303      	movs	r3, #3
 801236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801236c:	2300      	movs	r3, #0
 801236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012374:	4619      	mov	r1, r3
 8012376:	4842      	ldr	r0, [pc, #264]	; (8012480 <MX_GPIO_Init+0x2d0>)
 8012378:	f7ef f9c0 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 801237c:	2308      	movs	r3, #8
 801237e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012380:	2301      	movs	r3, #1
 8012382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012384:	2300      	movs	r3, #0
 8012386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012388:	2300      	movs	r3, #0
 801238a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012390:	4619      	mov	r1, r3
 8012392:	483b      	ldr	r0, [pc, #236]	; (8012480 <MX_GPIO_Init+0x2d0>)
 8012394:	f7ef f9b2 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8012398:	2340      	movs	r3, #64	; 0x40
 801239a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801239c:	2300      	movs	r3, #0
 801239e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123a0:	2300      	movs	r3, #0
 80123a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80123a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123a8:	4619      	mov	r1, r3
 80123aa:	4835      	ldr	r0, [pc, #212]	; (8012480 <MX_GPIO_Init+0x2d0>)
 80123ac:	f7ef f9a6 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 80123b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80123b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80123b6:	2301      	movs	r3, #1
 80123b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123ba:	2300      	movs	r3, #0
 80123bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80123be:	2300      	movs	r3, #0
 80123c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80123c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123c6:	4619      	mov	r1, r3
 80123c8:	482e      	ldr	r0, [pc, #184]	; (8012484 <MX_GPIO_Init+0x2d4>)
 80123ca:	f7ef f997 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 80123ce:	f649 4346 	movw	r3, #40006	; 0x9c46
 80123d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80123d4:	2303      	movs	r3, #3
 80123d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123d8:	2300      	movs	r3, #0
 80123da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80123dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123e0:	4619      	mov	r1, r3
 80123e2:	4828      	ldr	r0, [pc, #160]	; (8012484 <MX_GPIO_Init+0x2d4>)
 80123e4:	f7ef f98a 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80123e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80123ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80123ee:	2301      	movs	r3, #1
 80123f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123f2:	2300      	movs	r3, #0
 80123f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80123f6:	2300      	movs	r3, #0
 80123f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80123fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123fe:	4619      	mov	r1, r3
 8012400:	4821      	ldr	r0, [pc, #132]	; (8012488 <MX_GPIO_Init+0x2d8>)
 8012402:	f7ef f97b 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8012406:	f24d 733f 	movw	r3, #55103	; 0xd73f
 801240a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801240c:	2303      	movs	r3, #3
 801240e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012410:	2300      	movs	r3, #0
 8012412:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012418:	4619      	mov	r1, r3
 801241a:	481c      	ldr	r0, [pc, #112]	; (801248c <MX_GPIO_Init+0x2dc>)
 801241c:	f7ef f96e 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8012420:	f643 43ff 	movw	r3, #15615	; 0x3cff
 8012424:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012426:	2303      	movs	r3, #3
 8012428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801242a:	2300      	movs	r3, #0
 801242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012432:	4619      	mov	r1, r3
 8012434:	4818      	ldr	r0, [pc, #96]	; (8012498 <MX_GPIO_Init+0x2e8>)
 8012436:	f7ef f961 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 801243a:	2340      	movs	r3, #64	; 0x40
 801243c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801243e:	2301      	movs	r3, #1
 8012440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012442:	2300      	movs	r3, #0
 8012444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012446:	2300      	movs	r3, #0
 8012448:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 801244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801244e:	4619      	mov	r1, r3
 8012450:	480e      	ldr	r0, [pc, #56]	; (801248c <MX_GPIO_Init+0x2dc>)
 8012452:	f7ef f953 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8012456:	2380      	movs	r3, #128	; 0x80
 8012458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801245a:	2300      	movs	r3, #0
 801245c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801245e:	2300      	movs	r3, #0
 8012460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8012462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012466:	4619      	mov	r1, r3
 8012468:	4808      	ldr	r0, [pc, #32]	; (801248c <MX_GPIO_Init+0x2dc>)
 801246a:	f7ef f947 	bl	80016fc <HAL_GPIO_Init>

}
 801246e:	bf00      	nop
 8012470:	3738      	adds	r7, #56	; 0x38
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
 8012476:	bf00      	nop
 8012478:	40023800 	.word	0x40023800
 801247c:	40020800 	.word	0x40020800
 8012480:	40020000 	.word	0x40020000
 8012484:	40020400 	.word	0x40020400
 8012488:	40021400 	.word	0x40021400
 801248c:	40021800 	.word	0x40021800
 8012490:	40021000 	.word	0x40021000
 8012494:	10110000 	.word	0x10110000
 8012498:	40020c00 	.word	0x40020c00

0801249c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80124a0:	4b1b      	ldr	r3, [pc, #108]	; (8012510 <MX_I2C1_Init+0x74>)
 80124a2:	4a1c      	ldr	r2, [pc, #112]	; (8012514 <MX_I2C1_Init+0x78>)
 80124a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80124a6:	4b1a      	ldr	r3, [pc, #104]	; (8012510 <MX_I2C1_Init+0x74>)
 80124a8:	4a1b      	ldr	r2, [pc, #108]	; (8012518 <MX_I2C1_Init+0x7c>)
 80124aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80124ac:	4b18      	ldr	r3, [pc, #96]	; (8012510 <MX_I2C1_Init+0x74>)
 80124ae:	2200      	movs	r2, #0
 80124b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80124b2:	4b17      	ldr	r3, [pc, #92]	; (8012510 <MX_I2C1_Init+0x74>)
 80124b4:	2200      	movs	r2, #0
 80124b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80124b8:	4b15      	ldr	r3, [pc, #84]	; (8012510 <MX_I2C1_Init+0x74>)
 80124ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80124be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80124c0:	4b13      	ldr	r3, [pc, #76]	; (8012510 <MX_I2C1_Init+0x74>)
 80124c2:	2200      	movs	r2, #0
 80124c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80124c6:	4b12      	ldr	r3, [pc, #72]	; (8012510 <MX_I2C1_Init+0x74>)
 80124c8:	2200      	movs	r2, #0
 80124ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80124cc:	4b10      	ldr	r3, [pc, #64]	; (8012510 <MX_I2C1_Init+0x74>)
 80124ce:	2200      	movs	r2, #0
 80124d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80124d2:	4b0f      	ldr	r3, [pc, #60]	; (8012510 <MX_I2C1_Init+0x74>)
 80124d4:	2200      	movs	r2, #0
 80124d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80124d8:	480d      	ldr	r0, [pc, #52]	; (8012510 <MX_I2C1_Init+0x74>)
 80124da:	f7ef fad3 	bl	8001a84 <HAL_I2C_Init>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d001      	beq.n	80124e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80124e4:	f000 f99c 	bl	8012820 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80124e8:	2100      	movs	r1, #0
 80124ea:	4809      	ldr	r0, [pc, #36]	; (8012510 <MX_I2C1_Init+0x74>)
 80124ec:	f7ef fbf2 	bl	8001cd4 <HAL_I2CEx_ConfigAnalogFilter>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d001      	beq.n	80124fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80124f6:	f000 f993 	bl	8012820 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80124fa:	2100      	movs	r1, #0
 80124fc:	4804      	ldr	r0, [pc, #16]	; (8012510 <MX_I2C1_Init+0x74>)
 80124fe:	f7ef fc25 	bl	8001d4c <HAL_I2CEx_ConfigDigitalFilter>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d001      	beq.n	801250c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8012508:	f000 f98a 	bl	8012820 <Error_Handler>
  }

}
 801250c:	bf00      	nop
 801250e:	bd80      	pop	{r7, pc}
 8012510:	20006a14 	.word	0x20006a14
 8012514:	40005400 	.word	0x40005400
 8012518:	000186a0 	.word	0x000186a0

0801251c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8012520:	4b1b      	ldr	r3, [pc, #108]	; (8012590 <MX_I2C2_Init+0x74>)
 8012522:	4a1c      	ldr	r2, [pc, #112]	; (8012594 <MX_I2C2_Init+0x78>)
 8012524:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8012526:	4b1a      	ldr	r3, [pc, #104]	; (8012590 <MX_I2C2_Init+0x74>)
 8012528:	4a1b      	ldr	r2, [pc, #108]	; (8012598 <MX_I2C2_Init+0x7c>)
 801252a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801252c:	4b18      	ldr	r3, [pc, #96]	; (8012590 <MX_I2C2_Init+0x74>)
 801252e:	2200      	movs	r2, #0
 8012530:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8012532:	4b17      	ldr	r3, [pc, #92]	; (8012590 <MX_I2C2_Init+0x74>)
 8012534:	2200      	movs	r2, #0
 8012536:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012538:	4b15      	ldr	r3, [pc, #84]	; (8012590 <MX_I2C2_Init+0x74>)
 801253a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801253e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012540:	4b13      	ldr	r3, [pc, #76]	; (8012590 <MX_I2C2_Init+0x74>)
 8012542:	2200      	movs	r2, #0
 8012544:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8012546:	4b12      	ldr	r3, [pc, #72]	; (8012590 <MX_I2C2_Init+0x74>)
 8012548:	2200      	movs	r2, #0
 801254a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801254c:	4b10      	ldr	r3, [pc, #64]	; (8012590 <MX_I2C2_Init+0x74>)
 801254e:	2200      	movs	r2, #0
 8012550:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012552:	4b0f      	ldr	r3, [pc, #60]	; (8012590 <MX_I2C2_Init+0x74>)
 8012554:	2200      	movs	r2, #0
 8012556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8012558:	480d      	ldr	r0, [pc, #52]	; (8012590 <MX_I2C2_Init+0x74>)
 801255a:	f7ef fa93 	bl	8001a84 <HAL_I2C_Init>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d001      	beq.n	8012568 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8012564:	f000 f95c 	bl	8012820 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012568:	2100      	movs	r1, #0
 801256a:	4809      	ldr	r0, [pc, #36]	; (8012590 <MX_I2C2_Init+0x74>)
 801256c:	f7ef fbb2 	bl	8001cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8012570:	4603      	mov	r3, r0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d001      	beq.n	801257a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8012576:	f000 f953 	bl	8012820 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 801257a:	2100      	movs	r1, #0
 801257c:	4804      	ldr	r0, [pc, #16]	; (8012590 <MX_I2C2_Init+0x74>)
 801257e:	f7ef fbe5 	bl	8001d4c <HAL_I2CEx_ConfigDigitalFilter>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d001      	beq.n	801258c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8012588:	f000 f94a 	bl	8012820 <Error_Handler>
  }

}
 801258c:	bf00      	nop
 801258e:	bd80      	pop	{r7, pc}
 8012590:	20006a68 	.word	0x20006a68
 8012594:	40005800 	.word	0x40005800
 8012598:	000186a0 	.word	0x000186a0

0801259c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b08c      	sub	sp, #48	; 0x30
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80125a4:	f107 031c 	add.w	r3, r7, #28
 80125a8:	2200      	movs	r2, #0
 80125aa:	601a      	str	r2, [r3, #0]
 80125ac:	605a      	str	r2, [r3, #4]
 80125ae:	609a      	str	r2, [r3, #8]
 80125b0:	60da      	str	r2, [r3, #12]
 80125b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a32      	ldr	r2, [pc, #200]	; (8012684 <HAL_I2C_MspInit+0xe8>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d12d      	bne.n	801261a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80125be:	2300      	movs	r3, #0
 80125c0:	61bb      	str	r3, [r7, #24]
 80125c2:	4b31      	ldr	r3, [pc, #196]	; (8012688 <HAL_I2C_MspInit+0xec>)
 80125c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125c6:	4a30      	ldr	r2, [pc, #192]	; (8012688 <HAL_I2C_MspInit+0xec>)
 80125c8:	f043 0302 	orr.w	r3, r3, #2
 80125cc:	6313      	str	r3, [r2, #48]	; 0x30
 80125ce:	4b2e      	ldr	r3, [pc, #184]	; (8012688 <HAL_I2C_MspInit+0xec>)
 80125d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125d2:	f003 0302 	and.w	r3, r3, #2
 80125d6:	61bb      	str	r3, [r7, #24]
 80125d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80125da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80125de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80125e0:	2312      	movs	r3, #18
 80125e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80125e4:	2301      	movs	r3, #1
 80125e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80125e8:	2303      	movs	r3, #3
 80125ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80125ec:	2304      	movs	r3, #4
 80125ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80125f0:	f107 031c 	add.w	r3, r7, #28
 80125f4:	4619      	mov	r1, r3
 80125f6:	4825      	ldr	r0, [pc, #148]	; (801268c <HAL_I2C_MspInit+0xf0>)
 80125f8:	f7ef f880 	bl	80016fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80125fc:	2300      	movs	r3, #0
 80125fe:	617b      	str	r3, [r7, #20]
 8012600:	4b21      	ldr	r3, [pc, #132]	; (8012688 <HAL_I2C_MspInit+0xec>)
 8012602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012604:	4a20      	ldr	r2, [pc, #128]	; (8012688 <HAL_I2C_MspInit+0xec>)
 8012606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801260a:	6413      	str	r3, [r2, #64]	; 0x40
 801260c:	4b1e      	ldr	r3, [pc, #120]	; (8012688 <HAL_I2C_MspInit+0xec>)
 801260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012614:	617b      	str	r3, [r7, #20]
 8012616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8012618:	e030      	b.n	801267c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4a1c      	ldr	r2, [pc, #112]	; (8012690 <HAL_I2C_MspInit+0xf4>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d12b      	bne.n	801267c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8012624:	2300      	movs	r3, #0
 8012626:	613b      	str	r3, [r7, #16]
 8012628:	4b17      	ldr	r3, [pc, #92]	; (8012688 <HAL_I2C_MspInit+0xec>)
 801262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801262c:	4a16      	ldr	r2, [pc, #88]	; (8012688 <HAL_I2C_MspInit+0xec>)
 801262e:	f043 0320 	orr.w	r3, r3, #32
 8012632:	6313      	str	r3, [r2, #48]	; 0x30
 8012634:	4b14      	ldr	r3, [pc, #80]	; (8012688 <HAL_I2C_MspInit+0xec>)
 8012636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012638:	f003 0320 	and.w	r3, r3, #32
 801263c:	613b      	str	r3, [r7, #16]
 801263e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012640:	2303      	movs	r3, #3
 8012642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012644:	2312      	movs	r3, #18
 8012646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012648:	2301      	movs	r3, #1
 801264a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801264c:	2303      	movs	r3, #3
 801264e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8012650:	2304      	movs	r3, #4
 8012652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012654:	f107 031c 	add.w	r3, r7, #28
 8012658:	4619      	mov	r1, r3
 801265a:	480e      	ldr	r0, [pc, #56]	; (8012694 <HAL_I2C_MspInit+0xf8>)
 801265c:	f7ef f84e 	bl	80016fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8012660:	2300      	movs	r3, #0
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	4b08      	ldr	r3, [pc, #32]	; (8012688 <HAL_I2C_MspInit+0xec>)
 8012666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012668:	4a07      	ldr	r2, [pc, #28]	; (8012688 <HAL_I2C_MspInit+0xec>)
 801266a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801266e:	6413      	str	r3, [r2, #64]	; 0x40
 8012670:	4b05      	ldr	r3, [pc, #20]	; (8012688 <HAL_I2C_MspInit+0xec>)
 8012672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012678:	60fb      	str	r3, [r7, #12]
 801267a:	68fb      	ldr	r3, [r7, #12]
}
 801267c:	bf00      	nop
 801267e:	3730      	adds	r7, #48	; 0x30
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}
 8012684:	40005400 	.word	0x40005400
 8012688:	40023800 	.word	0x40023800
 801268c:	40020400 	.word	0x40020400
 8012690:	40005800 	.word	0x40005800
 8012694:	40021400 	.word	0x40021400

08012698 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801269e:	f7f4 ff22 	bl	80074e6 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80126a2:	4b17      	ldr	r3, [pc, #92]	; (8012700 <MX_LWIP_Init+0x68>)
 80126a4:	2200      	movs	r2, #0
 80126a6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80126a8:	4b16      	ldr	r3, [pc, #88]	; (8012704 <MX_LWIP_Init+0x6c>)
 80126aa:	2200      	movs	r2, #0
 80126ac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80126ae:	4b16      	ldr	r3, [pc, #88]	; (8012708 <MX_LWIP_Init+0x70>)
 80126b0:	2200      	movs	r2, #0
 80126b2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80126b4:	4b15      	ldr	r3, [pc, #84]	; (801270c <MX_LWIP_Init+0x74>)
 80126b6:	9302      	str	r3, [sp, #8]
 80126b8:	4b15      	ldr	r3, [pc, #84]	; (8012710 <MX_LWIP_Init+0x78>)
 80126ba:	9301      	str	r3, [sp, #4]
 80126bc:	2300      	movs	r3, #0
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	4b11      	ldr	r3, [pc, #68]	; (8012708 <MX_LWIP_Init+0x70>)
 80126c2:	4a10      	ldr	r2, [pc, #64]	; (8012704 <MX_LWIP_Init+0x6c>)
 80126c4:	490e      	ldr	r1, [pc, #56]	; (8012700 <MX_LWIP_Init+0x68>)
 80126c6:	4813      	ldr	r0, [pc, #76]	; (8012714 <MX_LWIP_Init+0x7c>)
 80126c8:	f7f5 fb12 	bl	8007cf0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80126cc:	4811      	ldr	r0, [pc, #68]	; (8012714 <MX_LWIP_Init+0x7c>)
 80126ce:	f7f5 fbf7 	bl	8007ec0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80126d2:	4b10      	ldr	r3, [pc, #64]	; (8012714 <MX_LWIP_Init+0x7c>)
 80126d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80126d8:	089b      	lsrs	r3, r3, #2
 80126da:	f003 0301 	and.w	r3, r3, #1
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d003      	beq.n	80126ec <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80126e4:	480b      	ldr	r0, [pc, #44]	; (8012714 <MX_LWIP_Init+0x7c>)
 80126e6:	f7f5 fbfb 	bl	8007ee0 <netif_set_up>
 80126ea:	e002      	b.n	80126f2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80126ec:	4809      	ldr	r0, [pc, #36]	; (8012714 <MX_LWIP_Init+0x7c>)
 80126ee:	f7f5 fc3b 	bl	8007f68 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80126f2:	4808      	ldr	r0, [pc, #32]	; (8012714 <MX_LWIP_Init+0x7c>)
 80126f4:	f7fb fd60 	bl	800e1b8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80126f8:	bf00      	nop
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	20006af0 	.word	0x20006af0
 8012704:	20006af4 	.word	0x20006af4
 8012708:	20006af8 	.word	0x20006af8
 801270c:	08011b79 	.word	0x08011b79
 8012710:	08012145 	.word	0x08012145
 8012714:	20006abc 	.word	0x20006abc

08012718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801271c:	f7ed ff38 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012720:	f000 f814 	bl	801274c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8012724:	f7ff fd44 	bl	80121b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8012728:	f7ff feb8 	bl	801249c <MX_I2C1_Init>
  MX_I2C2_Init();
 801272c:	f7ff fef6 	bl	801251c <MX_I2C2_Init>
  MX_TIM2_Init();
 8012730:	f000 f9b0 	bl	8012a94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8012734:	f000 fa0a 	bl	8012b4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8012738:	f000 fa66 	bl	8012c08 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 801273c:	f000 fbbe 	bl	8012ebc <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8012740:	f7ff ffaa 	bl	8012698 <MX_LWIP_Init>
  MX_USB_DEVICE_Init();
 8012744:	f000 fc2c 	bl	8012fa0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8012748:	e7fe      	b.n	8012748 <main+0x30>
	...

0801274c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b094      	sub	sp, #80	; 0x50
 8012750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012752:	f107 0320 	add.w	r3, r7, #32
 8012756:	2230      	movs	r2, #48	; 0x30
 8012758:	2100      	movs	r1, #0
 801275a:	4618      	mov	r0, r3
 801275c:	f001 f972 	bl	8013a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012760:	f107 030c 	add.w	r3, r7, #12
 8012764:	2200      	movs	r2, #0
 8012766:	601a      	str	r2, [r3, #0]
 8012768:	605a      	str	r2, [r3, #4]
 801276a:	609a      	str	r2, [r3, #8]
 801276c:	60da      	str	r2, [r3, #12]
 801276e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8012770:	2300      	movs	r3, #0
 8012772:	60bb      	str	r3, [r7, #8]
 8012774:	4b28      	ldr	r3, [pc, #160]	; (8012818 <SystemClock_Config+0xcc>)
 8012776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012778:	4a27      	ldr	r2, [pc, #156]	; (8012818 <SystemClock_Config+0xcc>)
 801277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801277e:	6413      	str	r3, [r2, #64]	; 0x40
 8012780:	4b25      	ldr	r3, [pc, #148]	; (8012818 <SystemClock_Config+0xcc>)
 8012782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012788:	60bb      	str	r3, [r7, #8]
 801278a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801278c:	2300      	movs	r3, #0
 801278e:	607b      	str	r3, [r7, #4]
 8012790:	4b22      	ldr	r3, [pc, #136]	; (801281c <SystemClock_Config+0xd0>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	4a21      	ldr	r2, [pc, #132]	; (801281c <SystemClock_Config+0xd0>)
 8012796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	4b1f      	ldr	r3, [pc, #124]	; (801281c <SystemClock_Config+0xd0>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80127a4:	607b      	str	r3, [r7, #4]
 80127a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80127a8:	2301      	movs	r3, #1
 80127aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80127ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80127b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80127b2:	2302      	movs	r3, #2
 80127b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80127b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80127ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80127bc:	2304      	movs	r3, #4
 80127be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80127c0:	23a8      	movs	r3, #168	; 0xa8
 80127c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80127c4:	2302      	movs	r3, #2
 80127c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80127c8:	2307      	movs	r3, #7
 80127ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80127cc:	f107 0320 	add.w	r3, r7, #32
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7f0 fc85 	bl	80030e0 <HAL_RCC_OscConfig>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d001      	beq.n	80127e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80127dc:	f000 f820 	bl	8012820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80127e0:	230f      	movs	r3, #15
 80127e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80127e4:	2302      	movs	r3, #2
 80127e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80127e8:	2300      	movs	r3, #0
 80127ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80127ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80127f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80127f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80127f8:	f107 030c 	add.w	r3, r7, #12
 80127fc:	2105      	movs	r1, #5
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f0 feb0 	bl	8003564 <HAL_RCC_ClockConfig>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d001      	beq.n	801280e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 801280a:	f000 f809 	bl	8012820 <Error_Handler>
  }
}
 801280e:	bf00      	nop
 8012810:	3750      	adds	r7, #80	; 0x50
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	40023800 	.word	0x40023800
 801281c:	40007000 	.word	0x40007000

08012820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012820:	b480      	push	{r7}
 8012822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8012824:	bf00      	nop
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr
	...

08012830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012830:	b480      	push	{r7}
 8012832:	b083      	sub	sp, #12
 8012834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012836:	2300      	movs	r3, #0
 8012838:	607b      	str	r3, [r7, #4]
 801283a:	4b10      	ldr	r3, [pc, #64]	; (801287c <HAL_MspInit+0x4c>)
 801283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801283e:	4a0f      	ldr	r2, [pc, #60]	; (801287c <HAL_MspInit+0x4c>)
 8012840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012844:	6453      	str	r3, [r2, #68]	; 0x44
 8012846:	4b0d      	ldr	r3, [pc, #52]	; (801287c <HAL_MspInit+0x4c>)
 8012848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801284e:	607b      	str	r3, [r7, #4]
 8012850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012852:	2300      	movs	r3, #0
 8012854:	603b      	str	r3, [r7, #0]
 8012856:	4b09      	ldr	r3, [pc, #36]	; (801287c <HAL_MspInit+0x4c>)
 8012858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285a:	4a08      	ldr	r2, [pc, #32]	; (801287c <HAL_MspInit+0x4c>)
 801285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012860:	6413      	str	r3, [r2, #64]	; 0x40
 8012862:	4b06      	ldr	r3, [pc, #24]	; (801287c <HAL_MspInit+0x4c>)
 8012864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801286a:	603b      	str	r3, [r7, #0]
 801286c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801286e:	bf00      	nop
 8012870:	370c      	adds	r7, #12
 8012872:	46bd      	mov	sp, r7
 8012874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012878:	4770      	bx	lr
 801287a:	bf00      	nop
 801287c:	40023800 	.word	0x40023800

08012880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012880:	b480      	push	{r7}
 8012882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012884:	bf00      	nop
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr

0801288e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801288e:	b480      	push	{r7}
 8012890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012892:	e7fe      	b.n	8012892 <HardFault_Handler+0x4>

08012894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012894:	b480      	push	{r7}
 8012896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012898:	e7fe      	b.n	8012898 <MemManage_Handler+0x4>

0801289a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801289a:	b480      	push	{r7}
 801289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801289e:	e7fe      	b.n	801289e <BusFault_Handler+0x4>

080128a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80128a0:	b480      	push	{r7}
 80128a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80128a4:	e7fe      	b.n	80128a4 <UsageFault_Handler+0x4>

080128a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80128a6:	b480      	push	{r7}
 80128a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80128aa:	bf00      	nop
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80128b4:	b480      	push	{r7}
 80128b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80128b8:	bf00      	nop
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr

080128c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80128c2:	b480      	push	{r7}
 80128c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80128c6:	bf00      	nop
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr

080128d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80128d4:	f7ed feae 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80128d8:	bf00      	nop
 80128da:	bd80      	pop	{r7, pc}

080128dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80128e0:	4802      	ldr	r0, [pc, #8]	; (80128ec <OTG_FS_IRQHandler+0x10>)
 80128e2:	f7ef fbc2 	bl	800206a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80128e6:	bf00      	nop
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	20007e98 	.word	0x20007e98

080128f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b086      	sub	sp, #24
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80128fc:	2300      	movs	r3, #0
 80128fe:	617b      	str	r3, [r7, #20]
 8012900:	e00a      	b.n	8012918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012902:	f3af 8000 	nop.w
 8012906:	4601      	mov	r1, r0
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	1c5a      	adds	r2, r3, #1
 801290c:	60ba      	str	r2, [r7, #8]
 801290e:	b2ca      	uxtb	r2, r1
 8012910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	3301      	adds	r3, #1
 8012916:	617b      	str	r3, [r7, #20]
 8012918:	697a      	ldr	r2, [r7, #20]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	429a      	cmp	r2, r3
 801291e:	dbf0      	blt.n	8012902 <_read+0x12>
	}

return len;
 8012920:	687b      	ldr	r3, [r7, #4]
}
 8012922:	4618      	mov	r0, r3
 8012924:	3718      	adds	r7, #24
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}

0801292a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801292a:	b580      	push	{r7, lr}
 801292c:	b086      	sub	sp, #24
 801292e:	af00      	add	r7, sp, #0
 8012930:	60f8      	str	r0, [r7, #12]
 8012932:	60b9      	str	r1, [r7, #8]
 8012934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012936:	2300      	movs	r3, #0
 8012938:	617b      	str	r3, [r7, #20]
 801293a:	e009      	b.n	8012950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	1c5a      	adds	r2, r3, #1
 8012940:	60ba      	str	r2, [r7, #8]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	4618      	mov	r0, r3
 8012946:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	3301      	adds	r3, #1
 801294e:	617b      	str	r3, [r7, #20]
 8012950:	697a      	ldr	r2, [r7, #20]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	429a      	cmp	r2, r3
 8012956:	dbf1      	blt.n	801293c <_write+0x12>
	}
	return len;
 8012958:	687b      	ldr	r3, [r7, #4]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3718      	adds	r7, #24
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <_close>:

int _close(int file)
{
 8012962:	b480      	push	{r7}
 8012964:	b083      	sub	sp, #12
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
	return -1;
 801296a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801296e:	4618      	mov	r0, r3
 8012970:	370c      	adds	r7, #12
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr

0801297a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801297a:	b480      	push	{r7}
 801297c:	b083      	sub	sp, #12
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
 8012982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801298a:	605a      	str	r2, [r3, #4]
	return 0;
 801298c:	2300      	movs	r3, #0
}
 801298e:	4618      	mov	r0, r3
 8012990:	370c      	adds	r7, #12
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr

0801299a <_isatty>:

int _isatty(int file)
{
 801299a:	b480      	push	{r7}
 801299c:	b083      	sub	sp, #12
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
	return 1;
 80129a2:	2301      	movs	r3, #1
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	607a      	str	r2, [r7, #4]
	return 0;
 80129bc:	2300      	movs	r3, #0
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3714      	adds	r7, #20
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr
	...

080129cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b085      	sub	sp, #20
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80129d4:	4b11      	ldr	r3, [pc, #68]	; (8012a1c <_sbrk+0x50>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d102      	bne.n	80129e2 <_sbrk+0x16>
		heap_end = &end;
 80129dc:	4b0f      	ldr	r3, [pc, #60]	; (8012a1c <_sbrk+0x50>)
 80129de:	4a10      	ldr	r2, [pc, #64]	; (8012a20 <_sbrk+0x54>)
 80129e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80129e2:	4b0e      	ldr	r3, [pc, #56]	; (8012a1c <_sbrk+0x50>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80129e8:	4b0c      	ldr	r3, [pc, #48]	; (8012a1c <_sbrk+0x50>)
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4413      	add	r3, r2
 80129f0:	466a      	mov	r2, sp
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d905      	bls.n	8012a02 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80129f6:	4b0b      	ldr	r3, [pc, #44]	; (8012a24 <_sbrk+0x58>)
 80129f8:	220c      	movs	r2, #12
 80129fa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80129fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a00:	e006      	b.n	8012a10 <_sbrk+0x44>
	}

	heap_end += incr;
 8012a02:	4b06      	ldr	r3, [pc, #24]	; (8012a1c <_sbrk+0x50>)
 8012a04:	681a      	ldr	r2, [r3, #0]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	4413      	add	r3, r2
 8012a0a:	4a04      	ldr	r2, [pc, #16]	; (8012a1c <_sbrk+0x50>)
 8012a0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3714      	adds	r7, #20
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr
 8012a1c:	20000388 	.word	0x20000388
 8012a20:	200084a8 	.word	0x200084a8
 8012a24:	200084a0 	.word	0x200084a0

08012a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012a2c:	4b16      	ldr	r3, [pc, #88]	; (8012a88 <SystemInit+0x60>)
 8012a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a32:	4a15      	ldr	r2, [pc, #84]	; (8012a88 <SystemInit+0x60>)
 8012a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8012a3c:	4b13      	ldr	r3, [pc, #76]	; (8012a8c <SystemInit+0x64>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	4a12      	ldr	r2, [pc, #72]	; (8012a8c <SystemInit+0x64>)
 8012a42:	f043 0301 	orr.w	r3, r3, #1
 8012a46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012a48:	4b10      	ldr	r3, [pc, #64]	; (8012a8c <SystemInit+0x64>)
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012a4e:	4b0f      	ldr	r3, [pc, #60]	; (8012a8c <SystemInit+0x64>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4a0e      	ldr	r2, [pc, #56]	; (8012a8c <SystemInit+0x64>)
 8012a54:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012a5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8012a5e:	4b0b      	ldr	r3, [pc, #44]	; (8012a8c <SystemInit+0x64>)
 8012a60:	4a0b      	ldr	r2, [pc, #44]	; (8012a90 <SystemInit+0x68>)
 8012a62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012a64:	4b09      	ldr	r3, [pc, #36]	; (8012a8c <SystemInit+0x64>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4a08      	ldr	r2, [pc, #32]	; (8012a8c <SystemInit+0x64>)
 8012a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012a6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012a70:	4b06      	ldr	r3, [pc, #24]	; (8012a8c <SystemInit+0x64>)
 8012a72:	2200      	movs	r2, #0
 8012a74:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012a76:	4b04      	ldr	r3, [pc, #16]	; (8012a88 <SystemInit+0x60>)
 8012a78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012a7c:	609a      	str	r2, [r3, #8]
#endif
}
 8012a7e:	bf00      	nop
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr
 8012a88:	e000ed00 	.word	0xe000ed00
 8012a8c:	40023800 	.word	0x40023800
 8012a90:	24003010 	.word	0x24003010

08012a94 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b086      	sub	sp, #24
 8012a98:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012a9a:	f107 0310 	add.w	r3, r7, #16
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	601a      	str	r2, [r3, #0]
 8012aa2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8012aa4:	463b      	mov	r3, r7
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	601a      	str	r2, [r3, #0]
 8012aaa:	605a      	str	r2, [r3, #4]
 8012aac:	609a      	str	r2, [r3, #8]
 8012aae:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8012ab0:	4b25      	ldr	r3, [pc, #148]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012ab6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8012ab8:	4b23      	ldr	r3, [pc, #140]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012aba:	2200      	movs	r2, #0
 8012abc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012abe:	4b22      	ldr	r3, [pc, #136]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8012ac4:	4b20      	ldr	r3, [pc, #128]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012aca:	4b1f      	ldr	r3, [pc, #124]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012acc:	2200      	movs	r2, #0
 8012ace:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012ad0:	4b1d      	ldr	r3, [pc, #116]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8012ad6:	481c      	ldr	r0, [pc, #112]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012ad8:	f7f0 ff5d 	bl	8003996 <HAL_TIM_IC_Init>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8012ae2:	f7ff fe9d 	bl	8012820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012aea:	2300      	movs	r3, #0
 8012aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012aee:	f107 0310 	add.w	r3, r7, #16
 8012af2:	4619      	mov	r1, r3
 8012af4:	4814      	ldr	r0, [pc, #80]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012af6:	f7f1 fc55 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8012b00:	f7ff fe8e 	bl	8012820 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8012b04:	2300      	movs	r3, #0
 8012b06:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8012b08:	2301      	movs	r3, #1
 8012b0a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8012b10:	2300      	movs	r3, #0
 8012b12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8012b14:	463b      	mov	r3, r7
 8012b16:	2200      	movs	r2, #0
 8012b18:	4619      	mov	r1, r3
 8012b1a:	480b      	ldr	r0, [pc, #44]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012b1c:	f7f0 ff66 	bl	80039ec <HAL_TIM_IC_ConfigChannel>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d001      	beq.n	8012b2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8012b26:	f7ff fe7b 	bl	8012820 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8012b2a:	463b      	mov	r3, r7
 8012b2c:	2204      	movs	r2, #4
 8012b2e:	4619      	mov	r1, r3
 8012b30:	4805      	ldr	r0, [pc, #20]	; (8012b48 <MX_TIM2_Init+0xb4>)
 8012b32:	f7f0 ff5b 	bl	80039ec <HAL_TIM_IC_ConfigChannel>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d001      	beq.n	8012b40 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8012b3c:	f7ff fe70 	bl	8012820 <Error_Handler>
  }

}
 8012b40:	bf00      	nop
 8012b42:	3718      	adds	r7, #24
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	20006b7c 	.word	0x20006b7c

08012b4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b086      	sub	sp, #24
 8012b50:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012b52:	f107 0310 	add.w	r3, r7, #16
 8012b56:	2200      	movs	r2, #0
 8012b58:	601a      	str	r2, [r3, #0]
 8012b5a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8012b5c:	463b      	mov	r3, r7
 8012b5e:	2200      	movs	r2, #0
 8012b60:	601a      	str	r2, [r3, #0]
 8012b62:	605a      	str	r2, [r3, #4]
 8012b64:	609a      	str	r2, [r3, #8]
 8012b66:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8012b68:	4b25      	ldr	r3, [pc, #148]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012b6a:	4a26      	ldr	r2, [pc, #152]	; (8012c04 <MX_TIM3_Init+0xb8>)
 8012b6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012b6e:	4b24      	ldr	r3, [pc, #144]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012b70:	2200      	movs	r2, #0
 8012b72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012b74:	4b22      	ldr	r3, [pc, #136]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012b76:	2200      	movs	r2, #0
 8012b78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8012b7a:	4b21      	ldr	r3, [pc, #132]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012b80:	4b1f      	ldr	r3, [pc, #124]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012b82:	2200      	movs	r2, #0
 8012b84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012b86:	4b1e      	ldr	r3, [pc, #120]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012b88:	2200      	movs	r2, #0
 8012b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8012b8c:	481c      	ldr	r0, [pc, #112]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012b8e:	f7f0 ff02 	bl	8003996 <HAL_TIM_IC_Init>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d001      	beq.n	8012b9c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8012b98:	f7ff fe42 	bl	8012820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012ba4:	f107 0310 	add.w	r3, r7, #16
 8012ba8:	4619      	mov	r1, r3
 8012baa:	4815      	ldr	r0, [pc, #84]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012bac:	f7f1 fbfa 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8012bb6:	f7ff fe33 	bl	8012820 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8012bca:	463b      	mov	r3, r7
 8012bcc:	2200      	movs	r2, #0
 8012bce:	4619      	mov	r1, r3
 8012bd0:	480b      	ldr	r0, [pc, #44]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012bd2:	f7f0 ff0b 	bl	80039ec <HAL_TIM_IC_ConfigChannel>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d001      	beq.n	8012be0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8012bdc:	f7ff fe20 	bl	8012820 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8012be0:	463b      	mov	r3, r7
 8012be2:	2204      	movs	r2, #4
 8012be4:	4619      	mov	r1, r3
 8012be6:	4806      	ldr	r0, [pc, #24]	; (8012c00 <MX_TIM3_Init+0xb4>)
 8012be8:	f7f0 ff00 	bl	80039ec <HAL_TIM_IC_ConfigChannel>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8012bf2:	f7ff fe15 	bl	8012820 <Error_Handler>
  }

}
 8012bf6:	bf00      	nop
 8012bf8:	3718      	adds	r7, #24
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	20006b3c 	.word	0x20006b3c
 8012c04:	40000400 	.word	0x40000400

08012c08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b08a      	sub	sp, #40	; 0x28
 8012c0c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012c0e:	f107 0320 	add.w	r3, r7, #32
 8012c12:	2200      	movs	r2, #0
 8012c14:	601a      	str	r2, [r3, #0]
 8012c16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012c18:	1d3b      	adds	r3, r7, #4
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	601a      	str	r2, [r3, #0]
 8012c1e:	605a      	str	r2, [r3, #4]
 8012c20:	609a      	str	r2, [r3, #8]
 8012c22:	60da      	str	r2, [r3, #12]
 8012c24:	611a      	str	r2, [r3, #16]
 8012c26:	615a      	str	r2, [r3, #20]
 8012c28:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8012c2a:	4b27      	ldr	r3, [pc, #156]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c2c:	4a27      	ldr	r2, [pc, #156]	; (8012ccc <MX_TIM4_Init+0xc4>)
 8012c2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8012c30:	4b25      	ldr	r3, [pc, #148]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c32:	2200      	movs	r2, #0
 8012c34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012c36:	4b24      	ldr	r3, [pc, #144]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8012c3c:	4b22      	ldr	r3, [pc, #136]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c3e:	2200      	movs	r2, #0
 8012c40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012c42:	4b21      	ldr	r3, [pc, #132]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c44:	2200      	movs	r2, #0
 8012c46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012c48:	4b1f      	ldr	r3, [pc, #124]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8012c4e:	481e      	ldr	r0, [pc, #120]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c50:	f7f0 fe76 	bl	8003940 <HAL_TIM_PWM_Init>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d001      	beq.n	8012c5e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8012c5a:	f7ff fde1 	bl	8012820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012c62:	2300      	movs	r3, #0
 8012c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8012c66:	f107 0320 	add.w	r3, r7, #32
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	4816      	ldr	r0, [pc, #88]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c6e:	f7f1 fb99 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 8012c72:	4603      	mov	r3, r0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8012c78:	f7ff fdd2 	bl	8012820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012c7c:	2360      	movs	r3, #96	; 0x60
 8012c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8012c80:	2300      	movs	r3, #0
 8012c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012c84:	2300      	movs	r3, #0
 8012c86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012c8c:	1d3b      	adds	r3, r7, #4
 8012c8e:	2208      	movs	r2, #8
 8012c90:	4619      	mov	r1, r3
 8012c92:	480d      	ldr	r0, [pc, #52]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012c94:	f7f0 ff46 	bl	8003b24 <HAL_TIM_PWM_ConfigChannel>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8012c9e:	f7ff fdbf 	bl	8012820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012ca2:	1d3b      	adds	r3, r7, #4
 8012ca4:	220c      	movs	r2, #12
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	4807      	ldr	r0, [pc, #28]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012caa:	f7f0 ff3b 	bl	8003b24 <HAL_TIM_PWM_ConfigChannel>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8012cb4:	f7ff fdb4 	bl	8012820 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8012cb8:	4803      	ldr	r0, [pc, #12]	; (8012cc8 <MX_TIM4_Init+0xc0>)
 8012cba:	f000 f8c5 	bl	8012e48 <HAL_TIM_MspPostInit>

}
 8012cbe:	bf00      	nop
 8012cc0:	3728      	adds	r7, #40	; 0x28
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	20006afc 	.word	0x20006afc
 8012ccc:	40000800 	.word	0x40000800

08012cd0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b08c      	sub	sp, #48	; 0x30
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012cd8:	f107 031c 	add.w	r3, r7, #28
 8012cdc:	2200      	movs	r2, #0
 8012cde:	601a      	str	r2, [r3, #0]
 8012ce0:	605a      	str	r2, [r3, #4]
 8012ce2:	609a      	str	r2, [r3, #8]
 8012ce4:	60da      	str	r2, [r3, #12]
 8012ce6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012cf0:	d14b      	bne.n	8012d8a <HAL_TIM_IC_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	61bb      	str	r3, [r7, #24]
 8012cf6:	4b3f      	ldr	r3, [pc, #252]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cfa:	4a3e      	ldr	r2, [pc, #248]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012cfc:	f043 0301 	orr.w	r3, r3, #1
 8012d00:	6413      	str	r3, [r2, #64]	; 0x40
 8012d02:	4b3c      	ldr	r3, [pc, #240]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d06:	f003 0301 	and.w	r3, r3, #1
 8012d0a:	61bb      	str	r3, [r7, #24]
 8012d0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012d0e:	2300      	movs	r3, #0
 8012d10:	617b      	str	r3, [r7, #20]
 8012d12:	4b38      	ldr	r3, [pc, #224]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d16:	4a37      	ldr	r2, [pc, #220]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d18:	f043 0301 	orr.w	r3, r3, #1
 8012d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8012d1e:	4b35      	ldr	r3, [pc, #212]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d22:	f003 0301 	and.w	r3, r3, #1
 8012d26:	617b      	str	r3, [r7, #20]
 8012d28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	613b      	str	r3, [r7, #16]
 8012d2e:	4b31      	ldr	r3, [pc, #196]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d32:	4a30      	ldr	r2, [pc, #192]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d34:	f043 0302 	orr.w	r3, r3, #2
 8012d38:	6313      	str	r3, [r2, #48]	; 0x30
 8012d3a:	4b2e      	ldr	r3, [pc, #184]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d3e:	f003 0302 	and.w	r3, r3, #2
 8012d42:	613b      	str	r3, [r7, #16]
 8012d44:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8012d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d4c:	2302      	movs	r3, #2
 8012d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d50:	2300      	movs	r3, #0
 8012d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d54:	2300      	movs	r3, #0
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8012d58:	2301      	movs	r3, #1
 8012d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d5c:	f107 031c 	add.w	r3, r7, #28
 8012d60:	4619      	mov	r1, r3
 8012d62:	4825      	ldr	r0, [pc, #148]	; (8012df8 <HAL_TIM_IC_MspInit+0x128>)
 8012d64:	f7ee fcca 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012d68:	2308      	movs	r3, #8
 8012d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d6c:	2302      	movs	r3, #2
 8012d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d70:	2300      	movs	r3, #0
 8012d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d74:	2300      	movs	r3, #0
 8012d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8012d78:	2301      	movs	r3, #1
 8012d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012d7c:	f107 031c 	add.w	r3, r7, #28
 8012d80:	4619      	mov	r1, r3
 8012d82:	481e      	ldr	r0, [pc, #120]	; (8012dfc <HAL_TIM_IC_MspInit+0x12c>)
 8012d84:	f7ee fcba 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012d88:	e030      	b.n	8012dec <HAL_TIM_IC_MspInit+0x11c>
  else if(tim_icHandle->Instance==TIM3)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4a1c      	ldr	r2, [pc, #112]	; (8012e00 <HAL_TIM_IC_MspInit+0x130>)
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d12b      	bne.n	8012dec <HAL_TIM_IC_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012d94:	2300      	movs	r3, #0
 8012d96:	60fb      	str	r3, [r7, #12]
 8012d98:	4b16      	ldr	r3, [pc, #88]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d9c:	4a15      	ldr	r2, [pc, #84]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012d9e:	f043 0302 	orr.w	r3, r3, #2
 8012da2:	6413      	str	r3, [r2, #64]	; 0x40
 8012da4:	4b13      	ldr	r3, [pc, #76]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012da8:	f003 0302 	and.w	r3, r3, #2
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012db0:	2300      	movs	r3, #0
 8012db2:	60bb      	str	r3, [r7, #8]
 8012db4:	4b0f      	ldr	r3, [pc, #60]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db8:	4a0e      	ldr	r2, [pc, #56]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012dba:	f043 0302 	orr.w	r3, r3, #2
 8012dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8012dc0:	4b0c      	ldr	r3, [pc, #48]	; (8012df4 <HAL_TIM_IC_MspInit+0x124>)
 8012dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dc4:	f003 0302 	and.w	r3, r3, #2
 8012dc8:	60bb      	str	r3, [r7, #8]
 8012dca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8012dcc:	2330      	movs	r3, #48	; 0x30
 8012dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dd0:	2302      	movs	r3, #2
 8012dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012ddc:	2302      	movs	r3, #2
 8012dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012de0:	f107 031c 	add.w	r3, r7, #28
 8012de4:	4619      	mov	r1, r3
 8012de6:	4805      	ldr	r0, [pc, #20]	; (8012dfc <HAL_TIM_IC_MspInit+0x12c>)
 8012de8:	f7ee fc88 	bl	80016fc <HAL_GPIO_Init>
}
 8012dec:	bf00      	nop
 8012dee:	3730      	adds	r7, #48	; 0x30
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	40023800 	.word	0x40023800
 8012df8:	40020000 	.word	0x40020000
 8012dfc:	40020400 	.word	0x40020400
 8012e00:	40000400 	.word	0x40000400

08012e04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a0b      	ldr	r2, [pc, #44]	; (8012e40 <HAL_TIM_PWM_MspInit+0x3c>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d10d      	bne.n	8012e32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8012e16:	2300      	movs	r3, #0
 8012e18:	60fb      	str	r3, [r7, #12]
 8012e1a:	4b0a      	ldr	r3, [pc, #40]	; (8012e44 <HAL_TIM_PWM_MspInit+0x40>)
 8012e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e1e:	4a09      	ldr	r2, [pc, #36]	; (8012e44 <HAL_TIM_PWM_MspInit+0x40>)
 8012e20:	f043 0304 	orr.w	r3, r3, #4
 8012e24:	6413      	str	r3, [r2, #64]	; 0x40
 8012e26:	4b07      	ldr	r3, [pc, #28]	; (8012e44 <HAL_TIM_PWM_MspInit+0x40>)
 8012e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e2a:	f003 0304 	and.w	r3, r3, #4
 8012e2e:	60fb      	str	r3, [r7, #12]
 8012e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8012e32:	bf00      	nop
 8012e34:	3714      	adds	r7, #20
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
 8012e3e:	bf00      	nop
 8012e40:	40000800 	.word	0x40000800
 8012e44:	40023800 	.word	0x40023800

08012e48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b088      	sub	sp, #32
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e50:	f107 030c 	add.w	r3, r7, #12
 8012e54:	2200      	movs	r2, #0
 8012e56:	601a      	str	r2, [r3, #0]
 8012e58:	605a      	str	r2, [r3, #4]
 8012e5a:	609a      	str	r2, [r3, #8]
 8012e5c:	60da      	str	r2, [r3, #12]
 8012e5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4a12      	ldr	r2, [pc, #72]	; (8012eb0 <HAL_TIM_MspPostInit+0x68>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d11e      	bne.n	8012ea8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	60bb      	str	r3, [r7, #8]
 8012e6e:	4b11      	ldr	r3, [pc, #68]	; (8012eb4 <HAL_TIM_MspPostInit+0x6c>)
 8012e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e72:	4a10      	ldr	r2, [pc, #64]	; (8012eb4 <HAL_TIM_MspPostInit+0x6c>)
 8012e74:	f043 0308 	orr.w	r3, r3, #8
 8012e78:	6313      	str	r3, [r2, #48]	; 0x30
 8012e7a:	4b0e      	ldr	r3, [pc, #56]	; (8012eb4 <HAL_TIM_MspPostInit+0x6c>)
 8012e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e7e:	f003 0308 	and.w	r3, r3, #8
 8012e82:	60bb      	str	r3, [r7, #8]
 8012e84:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8012e86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8012e8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e8c:	2302      	movs	r3, #2
 8012e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e90:	2300      	movs	r3, #0
 8012e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e94:	2300      	movs	r3, #0
 8012e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8012e98:	2302      	movs	r3, #2
 8012e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012e9c:	f107 030c 	add.w	r3, r7, #12
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	4805      	ldr	r0, [pc, #20]	; (8012eb8 <HAL_TIM_MspPostInit+0x70>)
 8012ea4:	f7ee fc2a 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8012ea8:	bf00      	nop
 8012eaa:	3720      	adds	r7, #32
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}
 8012eb0:	40000800 	.word	0x40000800
 8012eb4:	40023800 	.word	0x40023800
 8012eb8:	40020c00 	.word	0x40020c00

08012ebc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8012ec0:	4b11      	ldr	r3, [pc, #68]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012ec2:	4a12      	ldr	r2, [pc, #72]	; (8012f0c <MX_USART3_UART_Init+0x50>)
 8012ec4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8012ec6:	4b10      	ldr	r3, [pc, #64]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012ecc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8012ece:	4b0e      	ldr	r3, [pc, #56]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8012ed4:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8012eda:	4b0b      	ldr	r3, [pc, #44]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012edc:	2200      	movs	r2, #0
 8012ede:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8012ee0:	4b09      	ldr	r3, [pc, #36]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012ee2:	220c      	movs	r2, #12
 8012ee4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012ee6:	4b08      	ldr	r3, [pc, #32]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012ee8:	2200      	movs	r2, #0
 8012eea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8012eec:	4b06      	ldr	r3, [pc, #24]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012eee:	2200      	movs	r2, #0
 8012ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8012ef2:	4805      	ldr	r0, [pc, #20]	; (8012f08 <MX_USART3_UART_Init+0x4c>)
 8012ef4:	f7f1 fa9b 	bl	800442e <HAL_UART_Init>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d001      	beq.n	8012f02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8012efe:	f7ff fc8f 	bl	8012820 <Error_Handler>
  }

}
 8012f02:	bf00      	nop
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	20006bbc 	.word	0x20006bbc
 8012f0c:	40004800 	.word	0x40004800

08012f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08a      	sub	sp, #40	; 0x28
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f18:	f107 0314 	add.w	r3, r7, #20
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	601a      	str	r2, [r3, #0]
 8012f20:	605a      	str	r2, [r3, #4]
 8012f22:	609a      	str	r2, [r3, #8]
 8012f24:	60da      	str	r2, [r3, #12]
 8012f26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	4a19      	ldr	r2, [pc, #100]	; (8012f94 <HAL_UART_MspInit+0x84>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d12c      	bne.n	8012f8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8012f32:	2300      	movs	r3, #0
 8012f34:	613b      	str	r3, [r7, #16]
 8012f36:	4b18      	ldr	r3, [pc, #96]	; (8012f98 <HAL_UART_MspInit+0x88>)
 8012f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f3a:	4a17      	ldr	r2, [pc, #92]	; (8012f98 <HAL_UART_MspInit+0x88>)
 8012f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012f40:	6413      	str	r3, [r2, #64]	; 0x40
 8012f42:	4b15      	ldr	r3, [pc, #84]	; (8012f98 <HAL_UART_MspInit+0x88>)
 8012f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012f4a:	613b      	str	r3, [r7, #16]
 8012f4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012f4e:	2300      	movs	r3, #0
 8012f50:	60fb      	str	r3, [r7, #12]
 8012f52:	4b11      	ldr	r3, [pc, #68]	; (8012f98 <HAL_UART_MspInit+0x88>)
 8012f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f56:	4a10      	ldr	r2, [pc, #64]	; (8012f98 <HAL_UART_MspInit+0x88>)
 8012f58:	f043 0308 	orr.w	r3, r3, #8
 8012f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f5e:	4b0e      	ldr	r3, [pc, #56]	; (8012f98 <HAL_UART_MspInit+0x88>)
 8012f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f62:	f003 0308 	and.w	r3, r3, #8
 8012f66:	60fb      	str	r3, [r7, #12]
 8012f68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8012f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f70:	2302      	movs	r3, #2
 8012f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012f74:	2301      	movs	r3, #1
 8012f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f78:	2303      	movs	r3, #3
 8012f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8012f7c:	2307      	movs	r3, #7
 8012f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012f80:	f107 0314 	add.w	r3, r7, #20
 8012f84:	4619      	mov	r1, r3
 8012f86:	4805      	ldr	r0, [pc, #20]	; (8012f9c <HAL_UART_MspInit+0x8c>)
 8012f88:	f7ee fbb8 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8012f8c:	bf00      	nop
 8012f8e:	3728      	adds	r7, #40	; 0x28
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	40004800 	.word	0x40004800
 8012f98:	40023800 	.word	0x40023800
 8012f9c:	40020c00 	.word	0x40020c00

08012fa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	4912      	ldr	r1, [pc, #72]	; (8012ff0 <MX_USB_DEVICE_Init+0x50>)
 8012fa8:	4812      	ldr	r0, [pc, #72]	; (8012ff4 <MX_USB_DEVICE_Init+0x54>)
 8012faa:	f7f3 fa1a 	bl	80063e2 <USBD_Init>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d001      	beq.n	8012fb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012fb4:	f7ff fc34 	bl	8012820 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012fb8:	490f      	ldr	r1, [pc, #60]	; (8012ff8 <MX_USB_DEVICE_Init+0x58>)
 8012fba:	480e      	ldr	r0, [pc, #56]	; (8012ff4 <MX_USB_DEVICE_Init+0x54>)
 8012fbc:	f7f3 fa3c 	bl	8006438 <USBD_RegisterClass>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d001      	beq.n	8012fca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012fc6:	f7ff fc2b 	bl	8012820 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012fca:	490c      	ldr	r1, [pc, #48]	; (8012ffc <MX_USB_DEVICE_Init+0x5c>)
 8012fcc:	4809      	ldr	r0, [pc, #36]	; (8012ff4 <MX_USB_DEVICE_Init+0x54>)
 8012fce:	f7f3 f999 	bl	8006304 <USBD_CDC_RegisterInterface>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d001      	beq.n	8012fdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012fd8:	f7ff fc22 	bl	8012820 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012fdc:	4805      	ldr	r0, [pc, #20]	; (8012ff4 <MX_USB_DEVICE_Init+0x54>)
 8012fde:	f7f3 fa45 	bl	800646c <USBD_Start>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d001      	beq.n	8012fec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012fe8:	f7ff fc1a 	bl	8012820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012fec:	bf00      	nop
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	20000138 	.word	0x20000138
 8012ff4:	20006bfc 	.word	0x20006bfc
 8012ff8:	20000014 	.word	0x20000014
 8012ffc:	20000128 	.word	0x20000128

08013000 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013004:	2200      	movs	r2, #0
 8013006:	4905      	ldr	r1, [pc, #20]	; (801301c <CDC_Init_FS+0x1c>)
 8013008:	4805      	ldr	r0, [pc, #20]	; (8013020 <CDC_Init_FS+0x20>)
 801300a:	f7f3 f992 	bl	8006332 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801300e:	4905      	ldr	r1, [pc, #20]	; (8013024 <CDC_Init_FS+0x24>)
 8013010:	4803      	ldr	r0, [pc, #12]	; (8013020 <CDC_Init_FS+0x20>)
 8013012:	f7f3 f9a8 	bl	8006366 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013016:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013018:	4618      	mov	r0, r3
 801301a:	bd80      	pop	{r7, pc}
 801301c:	20007698 	.word	0x20007698
 8013020:	20006bfc 	.word	0x20006bfc
 8013024:	20006e98 	.word	0x20006e98

08013028 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013028:	b480      	push	{r7}
 801302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801302c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801302e:	4618      	mov	r0, r3
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	6039      	str	r1, [r7, #0]
 8013042:	71fb      	strb	r3, [r7, #7]
 8013044:	4613      	mov	r3, r2
 8013046:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013048:	79fb      	ldrb	r3, [r7, #7]
 801304a:	2b23      	cmp	r3, #35	; 0x23
 801304c:	d84a      	bhi.n	80130e4 <CDC_Control_FS+0xac>
 801304e:	a201      	add	r2, pc, #4	; (adr r2, 8013054 <CDC_Control_FS+0x1c>)
 8013050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013054:	080130e5 	.word	0x080130e5
 8013058:	080130e5 	.word	0x080130e5
 801305c:	080130e5 	.word	0x080130e5
 8013060:	080130e5 	.word	0x080130e5
 8013064:	080130e5 	.word	0x080130e5
 8013068:	080130e5 	.word	0x080130e5
 801306c:	080130e5 	.word	0x080130e5
 8013070:	080130e5 	.word	0x080130e5
 8013074:	080130e5 	.word	0x080130e5
 8013078:	080130e5 	.word	0x080130e5
 801307c:	080130e5 	.word	0x080130e5
 8013080:	080130e5 	.word	0x080130e5
 8013084:	080130e5 	.word	0x080130e5
 8013088:	080130e5 	.word	0x080130e5
 801308c:	080130e5 	.word	0x080130e5
 8013090:	080130e5 	.word	0x080130e5
 8013094:	080130e5 	.word	0x080130e5
 8013098:	080130e5 	.word	0x080130e5
 801309c:	080130e5 	.word	0x080130e5
 80130a0:	080130e5 	.word	0x080130e5
 80130a4:	080130e5 	.word	0x080130e5
 80130a8:	080130e5 	.word	0x080130e5
 80130ac:	080130e5 	.word	0x080130e5
 80130b0:	080130e5 	.word	0x080130e5
 80130b4:	080130e5 	.word	0x080130e5
 80130b8:	080130e5 	.word	0x080130e5
 80130bc:	080130e5 	.word	0x080130e5
 80130c0:	080130e5 	.word	0x080130e5
 80130c4:	080130e5 	.word	0x080130e5
 80130c8:	080130e5 	.word	0x080130e5
 80130cc:	080130e5 	.word	0x080130e5
 80130d0:	080130e5 	.word	0x080130e5
 80130d4:	080130e5 	.word	0x080130e5
 80130d8:	080130e5 	.word	0x080130e5
 80130dc:	080130e5 	.word	0x080130e5
 80130e0:	080130e5 	.word	0x080130e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80130e4:	bf00      	nop
  }

  return (USBD_OK);
 80130e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr

080130f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80130fe:	6879      	ldr	r1, [r7, #4]
 8013100:	4805      	ldr	r0, [pc, #20]	; (8013118 <CDC_Receive_FS+0x24>)
 8013102:	f7f3 f930 	bl	8006366 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013106:	4804      	ldr	r0, [pc, #16]	; (8013118 <CDC_Receive_FS+0x24>)
 8013108:	f7f3 f941 	bl	800638e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801310c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801310e:	4618      	mov	r0, r3
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop
 8013118:	20006bfc 	.word	0x20006bfc

0801311c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b08a      	sub	sp, #40	; 0x28
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013124:	f107 0314 	add.w	r3, r7, #20
 8013128:	2200      	movs	r2, #0
 801312a:	601a      	str	r2, [r3, #0]
 801312c:	605a      	str	r2, [r3, #4]
 801312e:	609a      	str	r2, [r3, #8]
 8013130:	60da      	str	r2, [r3, #12]
 8013132:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801313c:	d147      	bne.n	80131ce <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801313e:	2300      	movs	r3, #0
 8013140:	613b      	str	r3, [r7, #16]
 8013142:	4b25      	ldr	r3, [pc, #148]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 8013144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013146:	4a24      	ldr	r2, [pc, #144]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 8013148:	f043 0301 	orr.w	r3, r3, #1
 801314c:	6313      	str	r3, [r2, #48]	; 0x30
 801314e:	4b22      	ldr	r3, [pc, #136]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 8013150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013152:	f003 0301 	and.w	r3, r3, #1
 8013156:	613b      	str	r3, [r7, #16]
 8013158:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801315a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801315e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013160:	2302      	movs	r3, #2
 8013162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013164:	2300      	movs	r3, #0
 8013166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013168:	2303      	movs	r3, #3
 801316a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801316c:	230a      	movs	r3, #10
 801316e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013170:	f107 0314 	add.w	r3, r7, #20
 8013174:	4619      	mov	r1, r3
 8013176:	4819      	ldr	r0, [pc, #100]	; (80131dc <HAL_PCD_MspInit+0xc0>)
 8013178:	f7ee fac0 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801317c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013182:	2300      	movs	r3, #0
 8013184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013186:	2300      	movs	r3, #0
 8013188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801318a:	f107 0314 	add.w	r3, r7, #20
 801318e:	4619      	mov	r1, r3
 8013190:	4812      	ldr	r0, [pc, #72]	; (80131dc <HAL_PCD_MspInit+0xc0>)
 8013192:	f7ee fab3 	bl	80016fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013196:	4b10      	ldr	r3, [pc, #64]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 8013198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801319a:	4a0f      	ldr	r2, [pc, #60]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 801319c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131a0:	6353      	str	r3, [r2, #52]	; 0x34
 80131a2:	2300      	movs	r3, #0
 80131a4:	60fb      	str	r3, [r7, #12]
 80131a6:	4b0c      	ldr	r3, [pc, #48]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 80131a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131aa:	4a0b      	ldr	r2, [pc, #44]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 80131ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80131b0:	6453      	str	r3, [r2, #68]	; 0x44
 80131b2:	4b09      	ldr	r3, [pc, #36]	; (80131d8 <HAL_PCD_MspInit+0xbc>)
 80131b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80131be:	2200      	movs	r2, #0
 80131c0:	2100      	movs	r1, #0
 80131c2:	2043      	movs	r0, #67	; 0x43
 80131c4:	f7ed fb53 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80131c8:	2043      	movs	r0, #67	; 0x43
 80131ca:	f7ed fb6c 	bl	80008a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80131ce:	bf00      	nop
 80131d0:	3728      	adds	r7, #40	; 0x28
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	40023800 	.word	0x40023800
 80131dc:	40020000 	.word	0x40020000

080131e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80131f4:	4619      	mov	r1, r3
 80131f6:	4610      	mov	r0, r2
 80131f8:	f7f3 f981 	bl	80064fe <USBD_LL_SetupStage>
}
 80131fc:	bf00      	nop
 80131fe:	3708      	adds	r7, #8
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}

08013204 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	460b      	mov	r3, r1
 801320e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013216:	78fa      	ldrb	r2, [r7, #3]
 8013218:	6879      	ldr	r1, [r7, #4]
 801321a:	4613      	mov	r3, r2
 801321c:	00db      	lsls	r3, r3, #3
 801321e:	1a9b      	subs	r3, r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	440b      	add	r3, r1
 8013224:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	78fb      	ldrb	r3, [r7, #3]
 801322c:	4619      	mov	r1, r3
 801322e:	f7f3 f9b1 	bl	8006594 <USBD_LL_DataOutStage>
}
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}

0801323a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b082      	sub	sp, #8
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	460b      	mov	r3, r1
 8013244:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801324c:	78fa      	ldrb	r2, [r7, #3]
 801324e:	6879      	ldr	r1, [r7, #4]
 8013250:	4613      	mov	r3, r2
 8013252:	00db      	lsls	r3, r3, #3
 8013254:	1a9b      	subs	r3, r3, r2
 8013256:	009b      	lsls	r3, r3, #2
 8013258:	440b      	add	r3, r1
 801325a:	3348      	adds	r3, #72	; 0x48
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	78fb      	ldrb	r3, [r7, #3]
 8013260:	4619      	mov	r1, r3
 8013262:	f7f3 fa08 	bl	8006676 <USBD_LL_DataInStage>
}
 8013266:	bf00      	nop
 8013268:	3708      	adds	r7, #8
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b082      	sub	sp, #8
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801327c:	4618      	mov	r0, r3
 801327e:	f7f3 fb16 	bl	80068ae <USBD_LL_SOF>
}
 8013282:	bf00      	nop
 8013284:	3708      	adds	r7, #8
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}

0801328a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801328a:	b580      	push	{r7, lr}
 801328c:	b084      	sub	sp, #16
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013292:	2301      	movs	r3, #1
 8013294:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d102      	bne.n	80132a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801329e:	2300      	movs	r3, #0
 80132a0:	73fb      	strb	r3, [r7, #15]
 80132a2:	e008      	b.n	80132b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d102      	bne.n	80132b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80132ac:	2301      	movs	r3, #1
 80132ae:	73fb      	strb	r3, [r7, #15]
 80132b0:	e001      	b.n	80132b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80132b2:	f7ff fab5 	bl	8012820 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80132bc:	7bfa      	ldrb	r2, [r7, #15]
 80132be:	4611      	mov	r1, r2
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7f3 fabe 	bl	8006842 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7f3 fa77 	bl	80067c0 <USBD_LL_Reset>
}
 80132d2:	bf00      	nop
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
	...

080132dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7f3 fab9 	bl	8006862 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	6812      	ldr	r2, [r2, #0]
 80132fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013302:	f043 0301 	orr.w	r3, r3, #1
 8013306:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6a1b      	ldr	r3, [r3, #32]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d005      	beq.n	801331c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013310:	4b04      	ldr	r3, [pc, #16]	; (8013324 <HAL_PCD_SuspendCallback+0x48>)
 8013312:	691b      	ldr	r3, [r3, #16]
 8013314:	4a03      	ldr	r2, [pc, #12]	; (8013324 <HAL_PCD_SuspendCallback+0x48>)
 8013316:	f043 0306 	orr.w	r3, r3, #6
 801331a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801331c:	bf00      	nop
 801331e:	3708      	adds	r7, #8
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	e000ed00 	.word	0xe000ed00

08013328 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013336:	4618      	mov	r0, r3
 8013338:	f7f3 faa8 	bl	800688c <USBD_LL_Resume>
}
 801333c:	bf00      	nop
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	460b      	mov	r3, r1
 801334e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013356:	78fa      	ldrb	r2, [r7, #3]
 8013358:	4611      	mov	r1, r2
 801335a:	4618      	mov	r0, r3
 801335c:	f7f3 face 	bl	80068fc <USBD_LL_IsoOUTIncomplete>
}
 8013360:	bf00      	nop
 8013362:	3708      	adds	r7, #8
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	460b      	mov	r3, r1
 8013372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801337a:	78fa      	ldrb	r2, [r7, #3]
 801337c:	4611      	mov	r1, r2
 801337e:	4618      	mov	r0, r3
 8013380:	f7f3 faaf 	bl	80068e2 <USBD_LL_IsoINIncomplete>
}
 8013384:	bf00      	nop
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801339a:	4618      	mov	r0, r3
 801339c:	f7f3 fabb 	bl	8006916 <USBD_LL_DevConnected>
}
 80133a0:	bf00      	nop
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7f3 fab8 	bl	800692c <USBD_LL_DevDisconnected>
}
 80133bc:	bf00      	nop
 80133be:	3708      	adds	r7, #8
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b082      	sub	sp, #8
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d13c      	bne.n	801344e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80133d4:	4a20      	ldr	r2, [pc, #128]	; (8013458 <USBD_LL_Init+0x94>)
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	4a1e      	ldr	r2, [pc, #120]	; (8013458 <USBD_LL_Init+0x94>)
 80133e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80133e4:	4b1c      	ldr	r3, [pc, #112]	; (8013458 <USBD_LL_Init+0x94>)
 80133e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80133ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80133ec:	4b1a      	ldr	r3, [pc, #104]	; (8013458 <USBD_LL_Init+0x94>)
 80133ee:	2204      	movs	r2, #4
 80133f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80133f2:	4b19      	ldr	r3, [pc, #100]	; (8013458 <USBD_LL_Init+0x94>)
 80133f4:	2202      	movs	r2, #2
 80133f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80133f8:	4b17      	ldr	r3, [pc, #92]	; (8013458 <USBD_LL_Init+0x94>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80133fe:	4b16      	ldr	r3, [pc, #88]	; (8013458 <USBD_LL_Init+0x94>)
 8013400:	2202      	movs	r2, #2
 8013402:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8013404:	4b14      	ldr	r3, [pc, #80]	; (8013458 <USBD_LL_Init+0x94>)
 8013406:	2201      	movs	r2, #1
 8013408:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801340a:	4b13      	ldr	r3, [pc, #76]	; (8013458 <USBD_LL_Init+0x94>)
 801340c:	2200      	movs	r2, #0
 801340e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013410:	4b11      	ldr	r3, [pc, #68]	; (8013458 <USBD_LL_Init+0x94>)
 8013412:	2200      	movs	r2, #0
 8013414:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8013416:	4b10      	ldr	r3, [pc, #64]	; (8013458 <USBD_LL_Init+0x94>)
 8013418:	2201      	movs	r2, #1
 801341a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801341c:	4b0e      	ldr	r3, [pc, #56]	; (8013458 <USBD_LL_Init+0x94>)
 801341e:	2200      	movs	r2, #0
 8013420:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013422:	480d      	ldr	r0, [pc, #52]	; (8013458 <USBD_LL_Init+0x94>)
 8013424:	f7ee fcd1 	bl	8001dca <HAL_PCD_Init>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801342e:	f7ff f9f7 	bl	8012820 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013432:	2180      	movs	r1, #128	; 0x80
 8013434:	4808      	ldr	r0, [pc, #32]	; (8013458 <USBD_LL_Init+0x94>)
 8013436:	f7ef fe36 	bl	80030a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801343a:	2240      	movs	r2, #64	; 0x40
 801343c:	2100      	movs	r1, #0
 801343e:	4806      	ldr	r0, [pc, #24]	; (8013458 <USBD_LL_Init+0x94>)
 8013440:	f7ef fdea 	bl	8003018 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013444:	2280      	movs	r2, #128	; 0x80
 8013446:	2101      	movs	r1, #1
 8013448:	4803      	ldr	r0, [pc, #12]	; (8013458 <USBD_LL_Init+0x94>)
 801344a:	f7ef fde5 	bl	8003018 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801344e:	2300      	movs	r3, #0
}
 8013450:	4618      	mov	r0, r3
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	20007e98 	.word	0x20007e98

0801345c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b084      	sub	sp, #16
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013464:	2300      	movs	r3, #0
 8013466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013468:	2300      	movs	r3, #0
 801346a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013472:	4618      	mov	r0, r3
 8013474:	f7ee fdc6 	bl	8002004 <HAL_PCD_Start>
 8013478:	4603      	mov	r3, r0
 801347a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801347c:	7bfb      	ldrb	r3, [r7, #15]
 801347e:	4618      	mov	r0, r3
 8013480:	f000 f92e 	bl	80136e0 <USBD_Get_USB_Status>
 8013484:	4603      	mov	r3, r0
 8013486:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8013488:	7bbb      	ldrb	r3, [r7, #14]
}
 801348a:	4618      	mov	r0, r3
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013492:	b580      	push	{r7, lr}
 8013494:	b084      	sub	sp, #16
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	4608      	mov	r0, r1
 801349c:	4611      	mov	r1, r2
 801349e:	461a      	mov	r2, r3
 80134a0:	4603      	mov	r3, r0
 80134a2:	70fb      	strb	r3, [r7, #3]
 80134a4:	460b      	mov	r3, r1
 80134a6:	70bb      	strb	r3, [r7, #2]
 80134a8:	4613      	mov	r3, r2
 80134aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ac:	2300      	movs	r3, #0
 80134ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b0:	2300      	movs	r3, #0
 80134b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80134ba:	78bb      	ldrb	r3, [r7, #2]
 80134bc:	883a      	ldrh	r2, [r7, #0]
 80134be:	78f9      	ldrb	r1, [r7, #3]
 80134c0:	f7ef f99b 	bl	80027fa <HAL_PCD_EP_Open>
 80134c4:	4603      	mov	r3, r0
 80134c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f000 f908 	bl	80136e0 <USBD_Get_USB_Status>
 80134d0:	4603      	mov	r3, r0
 80134d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80134d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3710      	adds	r7, #16
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134de:	b580      	push	{r7, lr}
 80134e0:	b084      	sub	sp, #16
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
 80134e6:	460b      	mov	r3, r1
 80134e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ea:	2300      	movs	r3, #0
 80134ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134ee:	2300      	movs	r3, #0
 80134f0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80134f8:	78fa      	ldrb	r2, [r7, #3]
 80134fa:	4611      	mov	r1, r2
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ef f9e4 	bl	80028ca <HAL_PCD_EP_Close>
 8013502:	4603      	mov	r3, r0
 8013504:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8013506:	7bfb      	ldrb	r3, [r7, #15]
 8013508:	4618      	mov	r0, r3
 801350a:	f000 f8e9 	bl	80136e0 <USBD_Get_USB_Status>
 801350e:	4603      	mov	r3, r0
 8013510:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8013512:	7bbb      	ldrb	r3, [r7, #14]
}
 8013514:	4618      	mov	r0, r3
 8013516:	3710      	adds	r7, #16
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b084      	sub	sp, #16
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	460b      	mov	r3, r1
 8013526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013528:	2300      	movs	r3, #0
 801352a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801352c:	2300      	movs	r3, #0
 801352e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013536:	78fa      	ldrb	r2, [r7, #3]
 8013538:	4611      	mov	r1, r2
 801353a:	4618      	mov	r0, r3
 801353c:	f7ef fabc 	bl	8002ab8 <HAL_PCD_EP_SetStall>
 8013540:	4603      	mov	r3, r0
 8013542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013544:	7bfb      	ldrb	r3, [r7, #15]
 8013546:	4618      	mov	r0, r3
 8013548:	f000 f8ca 	bl	80136e0 <USBD_Get_USB_Status>
 801354c:	4603      	mov	r3, r0
 801354e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013550:	7bbb      	ldrb	r3, [r7, #14]
}
 8013552:	4618      	mov	r0, r3
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}

0801355a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801355a:	b580      	push	{r7, lr}
 801355c:	b084      	sub	sp, #16
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
 8013562:	460b      	mov	r3, r1
 8013564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013566:	2300      	movs	r3, #0
 8013568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801356a:	2300      	movs	r3, #0
 801356c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013574:	78fa      	ldrb	r2, [r7, #3]
 8013576:	4611      	mov	r1, r2
 8013578:	4618      	mov	r0, r3
 801357a:	f7ef fb01 	bl	8002b80 <HAL_PCD_EP_ClrStall>
 801357e:	4603      	mov	r3, r0
 8013580:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8013582:	7bfb      	ldrb	r3, [r7, #15]
 8013584:	4618      	mov	r0, r3
 8013586:	f000 f8ab 	bl	80136e0 <USBD_Get_USB_Status>
 801358a:	4603      	mov	r3, r0
 801358c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801358e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013590:	4618      	mov	r0, r3
 8013592:	3710      	adds	r7, #16
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013598:	b480      	push	{r7}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	460b      	mov	r3, r1
 80135a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80135aa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80135ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	da0b      	bge.n	80135cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80135b4:	78fb      	ldrb	r3, [r7, #3]
 80135b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80135ba:	68f9      	ldr	r1, [r7, #12]
 80135bc:	4613      	mov	r3, r2
 80135be:	00db      	lsls	r3, r3, #3
 80135c0:	1a9b      	subs	r3, r3, r2
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	440b      	add	r3, r1
 80135c6:	333e      	adds	r3, #62	; 0x3e
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	e00b      	b.n	80135e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80135cc:	78fb      	ldrb	r3, [r7, #3]
 80135ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80135d2:	68f9      	ldr	r1, [r7, #12]
 80135d4:	4613      	mov	r3, r2
 80135d6:	00db      	lsls	r3, r3, #3
 80135d8:	1a9b      	subs	r3, r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	440b      	add	r3, r1
 80135de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80135e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3714      	adds	r7, #20
 80135e8:	46bd      	mov	sp, r7
 80135ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ee:	4770      	bx	lr

080135f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	460b      	mov	r3, r1
 80135fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135fc:	2300      	movs	r3, #0
 80135fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013600:	2300      	movs	r3, #0
 8013602:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801360a:	78fa      	ldrb	r2, [r7, #3]
 801360c:	4611      	mov	r1, r2
 801360e:	4618      	mov	r0, r3
 8013610:	f7ef f8ce 	bl	80027b0 <HAL_PCD_SetAddress>
 8013614:	4603      	mov	r3, r0
 8013616:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013618:	7bfb      	ldrb	r3, [r7, #15]
 801361a:	4618      	mov	r0, r3
 801361c:	f000 f860 	bl	80136e0 <USBD_Get_USB_Status>
 8013620:	4603      	mov	r3, r0
 8013622:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013624:	7bbb      	ldrb	r3, [r7, #14]
}
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}

0801362e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801362e:	b580      	push	{r7, lr}
 8013630:	b086      	sub	sp, #24
 8013632:	af00      	add	r7, sp, #0
 8013634:	60f8      	str	r0, [r7, #12]
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	461a      	mov	r2, r3
 801363a:	460b      	mov	r3, r1
 801363c:	72fb      	strb	r3, [r7, #11]
 801363e:	4613      	mov	r3, r2
 8013640:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013642:	2300      	movs	r3, #0
 8013644:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013646:	2300      	movs	r3, #0
 8013648:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8013650:	893b      	ldrh	r3, [r7, #8]
 8013652:	7af9      	ldrb	r1, [r7, #11]
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	f7ef f9e5 	bl	8002a24 <HAL_PCD_EP_Transmit>
 801365a:	4603      	mov	r3, r0
 801365c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801365e:	7dfb      	ldrb	r3, [r7, #23]
 8013660:	4618      	mov	r0, r3
 8013662:	f000 f83d 	bl	80136e0 <USBD_Get_USB_Status>
 8013666:	4603      	mov	r3, r0
 8013668:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801366a:	7dbb      	ldrb	r3, [r7, #22]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3718      	adds	r7, #24
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}

08013674 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b086      	sub	sp, #24
 8013678:	af00      	add	r7, sp, #0
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	607a      	str	r2, [r7, #4]
 801367e:	461a      	mov	r2, r3
 8013680:	460b      	mov	r3, r1
 8013682:	72fb      	strb	r3, [r7, #11]
 8013684:	4613      	mov	r3, r2
 8013686:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013688:	2300      	movs	r3, #0
 801368a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801368c:	2300      	movs	r3, #0
 801368e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8013696:	893b      	ldrh	r3, [r7, #8]
 8013698:	7af9      	ldrb	r1, [r7, #11]
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	f7ef f95f 	bl	800295e <HAL_PCD_EP_Receive>
 80136a0:	4603      	mov	r3, r0
 80136a2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
 80136a6:	4618      	mov	r0, r3
 80136a8:	f000 f81a 	bl	80136e0 <USBD_Get_USB_Status>
 80136ac:	4603      	mov	r3, r0
 80136ae:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80136b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3718      	adds	r7, #24
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}

080136ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b082      	sub	sp, #8
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
 80136c2:	460b      	mov	r3, r1
 80136c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80136cc:	78fa      	ldrb	r2, [r7, #3]
 80136ce:	4611      	mov	r1, r2
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7ef f98f 	bl	80029f4 <HAL_PCD_EP_GetRxCount>
 80136d6:	4603      	mov	r3, r0
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80136e0:	b480      	push	{r7}
 80136e2:	b085      	sub	sp, #20
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	4603      	mov	r3, r0
 80136e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136ea:	2300      	movs	r3, #0
 80136ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80136ee:	79fb      	ldrb	r3, [r7, #7]
 80136f0:	2b03      	cmp	r3, #3
 80136f2:	d817      	bhi.n	8013724 <USBD_Get_USB_Status+0x44>
 80136f4:	a201      	add	r2, pc, #4	; (adr r2, 80136fc <USBD_Get_USB_Status+0x1c>)
 80136f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136fa:	bf00      	nop
 80136fc:	0801370d 	.word	0x0801370d
 8013700:	08013713 	.word	0x08013713
 8013704:	08013719 	.word	0x08013719
 8013708:	0801371f 	.word	0x0801371f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801370c:	2300      	movs	r3, #0
 801370e:	73fb      	strb	r3, [r7, #15]
    break;
 8013710:	e00b      	b.n	801372a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013712:	2302      	movs	r3, #2
 8013714:	73fb      	strb	r3, [r7, #15]
    break;
 8013716:	e008      	b.n	801372a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013718:	2301      	movs	r3, #1
 801371a:	73fb      	strb	r3, [r7, #15]
    break;
 801371c:	e005      	b.n	801372a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801371e:	2302      	movs	r3, #2
 8013720:	73fb      	strb	r3, [r7, #15]
    break;
 8013722:	e002      	b.n	801372a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013724:	2302      	movs	r3, #2
 8013726:	73fb      	strb	r3, [r7, #15]
    break;
 8013728:	bf00      	nop
  }
  return usb_status;
 801372a:	7bfb      	ldrb	r3, [r7, #15]
}
 801372c:	4618      	mov	r0, r3
 801372e:	3714      	adds	r7, #20
 8013730:	46bd      	mov	sp, r7
 8013732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013736:	4770      	bx	lr

08013738 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013738:	b480      	push	{r7}
 801373a:	b083      	sub	sp, #12
 801373c:	af00      	add	r7, sp, #0
 801373e:	4603      	mov	r3, r0
 8013740:	6039      	str	r1, [r7, #0]
 8013742:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	2212      	movs	r2, #18
 8013748:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801374a:	4b03      	ldr	r3, [pc, #12]	; (8013758 <USBD_FS_DeviceDescriptor+0x20>)
}
 801374c:	4618      	mov	r0, r3
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr
 8013758:	20000154 	.word	0x20000154

0801375c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801375c:	b480      	push	{r7}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	4603      	mov	r3, r0
 8013764:	6039      	str	r1, [r7, #0]
 8013766:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	2204      	movs	r2, #4
 801376c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801376e:	4b03      	ldr	r3, [pc, #12]	; (801377c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013770:	4618      	mov	r0, r3
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr
 801377c:	20000168 	.word	0x20000168

08013780 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	4603      	mov	r3, r0
 8013788:	6039      	str	r1, [r7, #0]
 801378a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801378c:	79fb      	ldrb	r3, [r7, #7]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d105      	bne.n	801379e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013792:	683a      	ldr	r2, [r7, #0]
 8013794:	4907      	ldr	r1, [pc, #28]	; (80137b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8013796:	4808      	ldr	r0, [pc, #32]	; (80137b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8013798:	f7f3 fda0 	bl	80072dc <USBD_GetString>
 801379c:	e004      	b.n	80137a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801379e:	683a      	ldr	r2, [r7, #0]
 80137a0:	4904      	ldr	r1, [pc, #16]	; (80137b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80137a2:	4805      	ldr	r0, [pc, #20]	; (80137b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80137a4:	f7f3 fd9a 	bl	80072dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80137a8:	4b02      	ldr	r3, [pc, #8]	; (80137b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
 80137b2:	bf00      	nop
 80137b4:	200082a0 	.word	0x200082a0
 80137b8:	08016a4c 	.word	0x08016a4c

080137bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	4603      	mov	r3, r0
 80137c4:	6039      	str	r1, [r7, #0]
 80137c6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80137c8:	683a      	ldr	r2, [r7, #0]
 80137ca:	4904      	ldr	r1, [pc, #16]	; (80137dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80137cc:	4804      	ldr	r0, [pc, #16]	; (80137e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80137ce:	f7f3 fd85 	bl	80072dc <USBD_GetString>
  return USBD_StrDesc;
 80137d2:	4b02      	ldr	r3, [pc, #8]	; (80137dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	200082a0 	.word	0x200082a0
 80137e0:	08016a64 	.word	0x08016a64

080137e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	4603      	mov	r3, r0
 80137ec:	6039      	str	r1, [r7, #0]
 80137ee:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	221a      	movs	r2, #26
 80137f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80137f6:	f000 f843 	bl	8013880 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 80137fa:	4b02      	ldr	r3, [pc, #8]	; (8013804 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3708      	adds	r7, #8
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}
 8013804:	2000016c 	.word	0x2000016c

08013808 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	4603      	mov	r3, r0
 8013810:	6039      	str	r1, [r7, #0]
 8013812:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013814:	79fb      	ldrb	r3, [r7, #7]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d105      	bne.n	8013826 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801381a:	683a      	ldr	r2, [r7, #0]
 801381c:	4907      	ldr	r1, [pc, #28]	; (801383c <USBD_FS_ConfigStrDescriptor+0x34>)
 801381e:	4808      	ldr	r0, [pc, #32]	; (8013840 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013820:	f7f3 fd5c 	bl	80072dc <USBD_GetString>
 8013824:	e004      	b.n	8013830 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013826:	683a      	ldr	r2, [r7, #0]
 8013828:	4904      	ldr	r1, [pc, #16]	; (801383c <USBD_FS_ConfigStrDescriptor+0x34>)
 801382a:	4805      	ldr	r0, [pc, #20]	; (8013840 <USBD_FS_ConfigStrDescriptor+0x38>)
 801382c:	f7f3 fd56 	bl	80072dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013830:	4b02      	ldr	r3, [pc, #8]	; (801383c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013832:	4618      	mov	r0, r3
 8013834:	3708      	adds	r7, #8
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}
 801383a:	bf00      	nop
 801383c:	200082a0 	.word	0x200082a0
 8013840:	08016a74 	.word	0x08016a74

08013844 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	4603      	mov	r3, r0
 801384c:	6039      	str	r1, [r7, #0]
 801384e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013850:	79fb      	ldrb	r3, [r7, #7]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d105      	bne.n	8013862 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013856:	683a      	ldr	r2, [r7, #0]
 8013858:	4907      	ldr	r1, [pc, #28]	; (8013878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801385a:	4808      	ldr	r0, [pc, #32]	; (801387c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801385c:	f7f3 fd3e 	bl	80072dc <USBD_GetString>
 8013860:	e004      	b.n	801386c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013862:	683a      	ldr	r2, [r7, #0]
 8013864:	4904      	ldr	r1, [pc, #16]	; (8013878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013866:	4805      	ldr	r0, [pc, #20]	; (801387c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013868:	f7f3 fd38 	bl	80072dc <USBD_GetString>
  }
  return USBD_StrDesc;
 801386c:	4b02      	ldr	r3, [pc, #8]	; (8013878 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801386e:	4618      	mov	r0, r3
 8013870:	3708      	adds	r7, #8
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	200082a0 	.word	0x200082a0
 801387c:	08016a80 	.word	0x08016a80

08013880 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b084      	sub	sp, #16
 8013884:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013886:	4b0f      	ldr	r3, [pc, #60]	; (80138c4 <Get_SerialNum+0x44>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801388c:	4b0e      	ldr	r3, [pc, #56]	; (80138c8 <Get_SerialNum+0x48>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013892:	4b0e      	ldr	r3, [pc, #56]	; (80138cc <Get_SerialNum+0x4c>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	4413      	add	r3, r2
 801389e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d009      	beq.n	80138ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80138a6:	2208      	movs	r2, #8
 80138a8:	4909      	ldr	r1, [pc, #36]	; (80138d0 <Get_SerialNum+0x50>)
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f000 f814 	bl	80138d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80138b0:	2204      	movs	r2, #4
 80138b2:	4908      	ldr	r1, [pc, #32]	; (80138d4 <Get_SerialNum+0x54>)
 80138b4:	68b8      	ldr	r0, [r7, #8]
 80138b6:	f000 f80f 	bl	80138d8 <IntToUnicode>
  }
}
 80138ba:	bf00      	nop
 80138bc:	3710      	adds	r7, #16
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	1fff7a10 	.word	0x1fff7a10
 80138c8:	1fff7a14 	.word	0x1fff7a14
 80138cc:	1fff7a18 	.word	0x1fff7a18
 80138d0:	2000016e 	.word	0x2000016e
 80138d4:	2000017e 	.word	0x2000017e

080138d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80138d8:	b480      	push	{r7}
 80138da:	b087      	sub	sp, #28
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	60b9      	str	r1, [r7, #8]
 80138e2:	4613      	mov	r3, r2
 80138e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80138ea:	2300      	movs	r3, #0
 80138ec:	75fb      	strb	r3, [r7, #23]
 80138ee:	e027      	b.n	8013940 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	0f1b      	lsrs	r3, r3, #28
 80138f4:	2b09      	cmp	r3, #9
 80138f6:	d80b      	bhi.n	8013910 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	0f1b      	lsrs	r3, r3, #28
 80138fc:	b2da      	uxtb	r2, r3
 80138fe:	7dfb      	ldrb	r3, [r7, #23]
 8013900:	005b      	lsls	r3, r3, #1
 8013902:	4619      	mov	r1, r3
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	440b      	add	r3, r1
 8013908:	3230      	adds	r2, #48	; 0x30
 801390a:	b2d2      	uxtb	r2, r2
 801390c:	701a      	strb	r2, [r3, #0]
 801390e:	e00a      	b.n	8013926 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	0f1b      	lsrs	r3, r3, #28
 8013914:	b2da      	uxtb	r2, r3
 8013916:	7dfb      	ldrb	r3, [r7, #23]
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	4619      	mov	r1, r3
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	440b      	add	r3, r1
 8013920:	3237      	adds	r2, #55	; 0x37
 8013922:	b2d2      	uxtb	r2, r2
 8013924:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	011b      	lsls	r3, r3, #4
 801392a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801392c:	7dfb      	ldrb	r3, [r7, #23]
 801392e:	005b      	lsls	r3, r3, #1
 8013930:	3301      	adds	r3, #1
 8013932:	68ba      	ldr	r2, [r7, #8]
 8013934:	4413      	add	r3, r2
 8013936:	2200      	movs	r2, #0
 8013938:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801393a:	7dfb      	ldrb	r3, [r7, #23]
 801393c:	3301      	adds	r3, #1
 801393e:	75fb      	strb	r3, [r7, #23]
 8013940:	7dfa      	ldrb	r2, [r7, #23]
 8013942:	79fb      	ldrb	r3, [r7, #7]
 8013944:	429a      	cmp	r2, r3
 8013946:	d3d3      	bcc.n	80138f0 <IntToUnicode+0x18>
  }
}
 8013948:	bf00      	nop
 801394a:	371c      	adds	r7, #28
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	4770      	bx	lr

08013954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8013954:	f8df d034 	ldr.w	sp, [pc, #52]	; 801398c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801395a:	e003      	b.n	8013964 <LoopCopyDataInit>

0801395c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801395c:	4b0c      	ldr	r3, [pc, #48]	; (8013990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801395e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013962:	3104      	adds	r1, #4

08013964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013964:	480b      	ldr	r0, [pc, #44]	; (8013994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013966:	4b0c      	ldr	r3, [pc, #48]	; (8013998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801396a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801396c:	d3f6      	bcc.n	801395c <CopyDataInit>
  ldr  r2, =_sbss
 801396e:	4a0b      	ldr	r2, [pc, #44]	; (801399c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013970:	e002      	b.n	8013978 <LoopFillZerobss>

08013972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8013972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013974:	f842 3b04 	str.w	r3, [r2], #4

08013978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013978:	4b09      	ldr	r3, [pc, #36]	; (80139a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801397a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801397c:	d3f9      	bcc.n	8013972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801397e:	f7ff f853 	bl	8012a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013982:	f000 f811 	bl	80139a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013986:	f7fe fec7 	bl	8012718 <main>
  bx  lr    
 801398a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 801398c:	2002ffff 	.word	0x2002ffff
  ldr  r3, =_sidata
 8013990:	08016c48 	.word	0x08016c48
  ldr  r0, =_sdata
 8013994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013998:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 801399c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80139a0:	200084a4 	.word	0x200084a4

080139a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80139a4:	e7fe      	b.n	80139a4 <ADC_IRQHandler>
	...

080139a8 <__libc_init_array>:
 80139a8:	b570      	push	{r4, r5, r6, lr}
 80139aa:	4e0d      	ldr	r6, [pc, #52]	; (80139e0 <__libc_init_array+0x38>)
 80139ac:	4c0d      	ldr	r4, [pc, #52]	; (80139e4 <__libc_init_array+0x3c>)
 80139ae:	1ba4      	subs	r4, r4, r6
 80139b0:	10a4      	asrs	r4, r4, #2
 80139b2:	2500      	movs	r5, #0
 80139b4:	42a5      	cmp	r5, r4
 80139b6:	d109      	bne.n	80139cc <__libc_init_array+0x24>
 80139b8:	4e0b      	ldr	r6, [pc, #44]	; (80139e8 <__libc_init_array+0x40>)
 80139ba:	4c0c      	ldr	r4, [pc, #48]	; (80139ec <__libc_init_array+0x44>)
 80139bc:	f000 ff62 	bl	8014884 <_init>
 80139c0:	1ba4      	subs	r4, r4, r6
 80139c2:	10a4      	asrs	r4, r4, #2
 80139c4:	2500      	movs	r5, #0
 80139c6:	42a5      	cmp	r5, r4
 80139c8:	d105      	bne.n	80139d6 <__libc_init_array+0x2e>
 80139ca:	bd70      	pop	{r4, r5, r6, pc}
 80139cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139d0:	4798      	blx	r3
 80139d2:	3501      	adds	r5, #1
 80139d4:	e7ee      	b.n	80139b4 <__libc_init_array+0xc>
 80139d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139da:	4798      	blx	r3
 80139dc:	3501      	adds	r5, #1
 80139de:	e7f2      	b.n	80139c6 <__libc_init_array+0x1e>
 80139e0:	08016c40 	.word	0x08016c40
 80139e4:	08016c40 	.word	0x08016c40
 80139e8:	08016c40 	.word	0x08016c40
 80139ec:	08016c44 	.word	0x08016c44

080139f0 <malloc>:
 80139f0:	4b02      	ldr	r3, [pc, #8]	; (80139fc <malloc+0xc>)
 80139f2:	4601      	mov	r1, r0
 80139f4:	6818      	ldr	r0, [r3, #0]
 80139f6:	f000 b87b 	b.w	8013af0 <_malloc_r>
 80139fa:	bf00      	nop
 80139fc:	20000188 	.word	0x20000188

08013a00 <free>:
 8013a00:	4b02      	ldr	r3, [pc, #8]	; (8013a0c <free+0xc>)
 8013a02:	4601      	mov	r1, r0
 8013a04:	6818      	ldr	r0, [r3, #0]
 8013a06:	f000 b825 	b.w	8013a54 <_free_r>
 8013a0a:	bf00      	nop
 8013a0c:	20000188 	.word	0x20000188

08013a10 <memcmp>:
 8013a10:	b530      	push	{r4, r5, lr}
 8013a12:	2400      	movs	r4, #0
 8013a14:	42a2      	cmp	r2, r4
 8013a16:	d101      	bne.n	8013a1c <memcmp+0xc>
 8013a18:	2000      	movs	r0, #0
 8013a1a:	e007      	b.n	8013a2c <memcmp+0x1c>
 8013a1c:	5d03      	ldrb	r3, [r0, r4]
 8013a1e:	3401      	adds	r4, #1
 8013a20:	190d      	adds	r5, r1, r4
 8013a22:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8013a26:	42ab      	cmp	r3, r5
 8013a28:	d0f4      	beq.n	8013a14 <memcmp+0x4>
 8013a2a:	1b58      	subs	r0, r3, r5
 8013a2c:	bd30      	pop	{r4, r5, pc}

08013a2e <memcpy>:
 8013a2e:	b510      	push	{r4, lr}
 8013a30:	1e43      	subs	r3, r0, #1
 8013a32:	440a      	add	r2, r1
 8013a34:	4291      	cmp	r1, r2
 8013a36:	d100      	bne.n	8013a3a <memcpy+0xc>
 8013a38:	bd10      	pop	{r4, pc}
 8013a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a42:	e7f7      	b.n	8013a34 <memcpy+0x6>

08013a44 <memset>:
 8013a44:	4402      	add	r2, r0
 8013a46:	4603      	mov	r3, r0
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d100      	bne.n	8013a4e <memset+0xa>
 8013a4c:	4770      	bx	lr
 8013a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8013a52:	e7f9      	b.n	8013a48 <memset+0x4>

08013a54 <_free_r>:
 8013a54:	b538      	push	{r3, r4, r5, lr}
 8013a56:	4605      	mov	r5, r0
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	d045      	beq.n	8013ae8 <_free_r+0x94>
 8013a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a60:	1f0c      	subs	r4, r1, #4
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	bfb8      	it	lt
 8013a66:	18e4      	addlt	r4, r4, r3
 8013a68:	f000 f9c2 	bl	8013df0 <__malloc_lock>
 8013a6c:	4a1f      	ldr	r2, [pc, #124]	; (8013aec <_free_r+0x98>)
 8013a6e:	6813      	ldr	r3, [r2, #0]
 8013a70:	4610      	mov	r0, r2
 8013a72:	b933      	cbnz	r3, 8013a82 <_free_r+0x2e>
 8013a74:	6063      	str	r3, [r4, #4]
 8013a76:	6014      	str	r4, [r2, #0]
 8013a78:	4628      	mov	r0, r5
 8013a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a7e:	f000 b9b8 	b.w	8013df2 <__malloc_unlock>
 8013a82:	42a3      	cmp	r3, r4
 8013a84:	d90c      	bls.n	8013aa0 <_free_r+0x4c>
 8013a86:	6821      	ldr	r1, [r4, #0]
 8013a88:	1862      	adds	r2, r4, r1
 8013a8a:	4293      	cmp	r3, r2
 8013a8c:	bf04      	itt	eq
 8013a8e:	681a      	ldreq	r2, [r3, #0]
 8013a90:	685b      	ldreq	r3, [r3, #4]
 8013a92:	6063      	str	r3, [r4, #4]
 8013a94:	bf04      	itt	eq
 8013a96:	1852      	addeq	r2, r2, r1
 8013a98:	6022      	streq	r2, [r4, #0]
 8013a9a:	6004      	str	r4, [r0, #0]
 8013a9c:	e7ec      	b.n	8013a78 <_free_r+0x24>
 8013a9e:	4613      	mov	r3, r2
 8013aa0:	685a      	ldr	r2, [r3, #4]
 8013aa2:	b10a      	cbz	r2, 8013aa8 <_free_r+0x54>
 8013aa4:	42a2      	cmp	r2, r4
 8013aa6:	d9fa      	bls.n	8013a9e <_free_r+0x4a>
 8013aa8:	6819      	ldr	r1, [r3, #0]
 8013aaa:	1858      	adds	r0, r3, r1
 8013aac:	42a0      	cmp	r0, r4
 8013aae:	d10b      	bne.n	8013ac8 <_free_r+0x74>
 8013ab0:	6820      	ldr	r0, [r4, #0]
 8013ab2:	4401      	add	r1, r0
 8013ab4:	1858      	adds	r0, r3, r1
 8013ab6:	4282      	cmp	r2, r0
 8013ab8:	6019      	str	r1, [r3, #0]
 8013aba:	d1dd      	bne.n	8013a78 <_free_r+0x24>
 8013abc:	6810      	ldr	r0, [r2, #0]
 8013abe:	6852      	ldr	r2, [r2, #4]
 8013ac0:	605a      	str	r2, [r3, #4]
 8013ac2:	4401      	add	r1, r0
 8013ac4:	6019      	str	r1, [r3, #0]
 8013ac6:	e7d7      	b.n	8013a78 <_free_r+0x24>
 8013ac8:	d902      	bls.n	8013ad0 <_free_r+0x7c>
 8013aca:	230c      	movs	r3, #12
 8013acc:	602b      	str	r3, [r5, #0]
 8013ace:	e7d3      	b.n	8013a78 <_free_r+0x24>
 8013ad0:	6820      	ldr	r0, [r4, #0]
 8013ad2:	1821      	adds	r1, r4, r0
 8013ad4:	428a      	cmp	r2, r1
 8013ad6:	bf04      	itt	eq
 8013ad8:	6811      	ldreq	r1, [r2, #0]
 8013ada:	6852      	ldreq	r2, [r2, #4]
 8013adc:	6062      	str	r2, [r4, #4]
 8013ade:	bf04      	itt	eq
 8013ae0:	1809      	addeq	r1, r1, r0
 8013ae2:	6021      	streq	r1, [r4, #0]
 8013ae4:	605c      	str	r4, [r3, #4]
 8013ae6:	e7c7      	b.n	8013a78 <_free_r+0x24>
 8013ae8:	bd38      	pop	{r3, r4, r5, pc}
 8013aea:	bf00      	nop
 8013aec:	2000038c 	.word	0x2000038c

08013af0 <_malloc_r>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	1ccd      	adds	r5, r1, #3
 8013af4:	f025 0503 	bic.w	r5, r5, #3
 8013af8:	3508      	adds	r5, #8
 8013afa:	2d0c      	cmp	r5, #12
 8013afc:	bf38      	it	cc
 8013afe:	250c      	movcc	r5, #12
 8013b00:	2d00      	cmp	r5, #0
 8013b02:	4606      	mov	r6, r0
 8013b04:	db01      	blt.n	8013b0a <_malloc_r+0x1a>
 8013b06:	42a9      	cmp	r1, r5
 8013b08:	d903      	bls.n	8013b12 <_malloc_r+0x22>
 8013b0a:	230c      	movs	r3, #12
 8013b0c:	6033      	str	r3, [r6, #0]
 8013b0e:	2000      	movs	r0, #0
 8013b10:	bd70      	pop	{r4, r5, r6, pc}
 8013b12:	f000 f96d 	bl	8013df0 <__malloc_lock>
 8013b16:	4a21      	ldr	r2, [pc, #132]	; (8013b9c <_malloc_r+0xac>)
 8013b18:	6814      	ldr	r4, [r2, #0]
 8013b1a:	4621      	mov	r1, r4
 8013b1c:	b991      	cbnz	r1, 8013b44 <_malloc_r+0x54>
 8013b1e:	4c20      	ldr	r4, [pc, #128]	; (8013ba0 <_malloc_r+0xb0>)
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	b91b      	cbnz	r3, 8013b2c <_malloc_r+0x3c>
 8013b24:	4630      	mov	r0, r6
 8013b26:	f000 f889 	bl	8013c3c <_sbrk_r>
 8013b2a:	6020      	str	r0, [r4, #0]
 8013b2c:	4629      	mov	r1, r5
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f000 f884 	bl	8013c3c <_sbrk_r>
 8013b34:	1c43      	adds	r3, r0, #1
 8013b36:	d124      	bne.n	8013b82 <_malloc_r+0x92>
 8013b38:	230c      	movs	r3, #12
 8013b3a:	6033      	str	r3, [r6, #0]
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f000 f958 	bl	8013df2 <__malloc_unlock>
 8013b42:	e7e4      	b.n	8013b0e <_malloc_r+0x1e>
 8013b44:	680b      	ldr	r3, [r1, #0]
 8013b46:	1b5b      	subs	r3, r3, r5
 8013b48:	d418      	bmi.n	8013b7c <_malloc_r+0x8c>
 8013b4a:	2b0b      	cmp	r3, #11
 8013b4c:	d90f      	bls.n	8013b6e <_malloc_r+0x7e>
 8013b4e:	600b      	str	r3, [r1, #0]
 8013b50:	50cd      	str	r5, [r1, r3]
 8013b52:	18cc      	adds	r4, r1, r3
 8013b54:	4630      	mov	r0, r6
 8013b56:	f000 f94c 	bl	8013df2 <__malloc_unlock>
 8013b5a:	f104 000b 	add.w	r0, r4, #11
 8013b5e:	1d23      	adds	r3, r4, #4
 8013b60:	f020 0007 	bic.w	r0, r0, #7
 8013b64:	1ac3      	subs	r3, r0, r3
 8013b66:	d0d3      	beq.n	8013b10 <_malloc_r+0x20>
 8013b68:	425a      	negs	r2, r3
 8013b6a:	50e2      	str	r2, [r4, r3]
 8013b6c:	e7d0      	b.n	8013b10 <_malloc_r+0x20>
 8013b6e:	428c      	cmp	r4, r1
 8013b70:	684b      	ldr	r3, [r1, #4]
 8013b72:	bf16      	itet	ne
 8013b74:	6063      	strne	r3, [r4, #4]
 8013b76:	6013      	streq	r3, [r2, #0]
 8013b78:	460c      	movne	r4, r1
 8013b7a:	e7eb      	b.n	8013b54 <_malloc_r+0x64>
 8013b7c:	460c      	mov	r4, r1
 8013b7e:	6849      	ldr	r1, [r1, #4]
 8013b80:	e7cc      	b.n	8013b1c <_malloc_r+0x2c>
 8013b82:	1cc4      	adds	r4, r0, #3
 8013b84:	f024 0403 	bic.w	r4, r4, #3
 8013b88:	42a0      	cmp	r0, r4
 8013b8a:	d005      	beq.n	8013b98 <_malloc_r+0xa8>
 8013b8c:	1a21      	subs	r1, r4, r0
 8013b8e:	4630      	mov	r0, r6
 8013b90:	f000 f854 	bl	8013c3c <_sbrk_r>
 8013b94:	3001      	adds	r0, #1
 8013b96:	d0cf      	beq.n	8013b38 <_malloc_r+0x48>
 8013b98:	6025      	str	r5, [r4, #0]
 8013b9a:	e7db      	b.n	8013b54 <_malloc_r+0x64>
 8013b9c:	2000038c 	.word	0x2000038c
 8013ba0:	20000390 	.word	0x20000390

08013ba4 <iprintf>:
 8013ba4:	b40f      	push	{r0, r1, r2, r3}
 8013ba6:	4b0a      	ldr	r3, [pc, #40]	; (8013bd0 <iprintf+0x2c>)
 8013ba8:	b513      	push	{r0, r1, r4, lr}
 8013baa:	681c      	ldr	r4, [r3, #0]
 8013bac:	b124      	cbz	r4, 8013bb8 <iprintf+0x14>
 8013bae:	69a3      	ldr	r3, [r4, #24]
 8013bb0:	b913      	cbnz	r3, 8013bb8 <iprintf+0x14>
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	f000 f892 	bl	8013cdc <__sinit>
 8013bb8:	ab05      	add	r3, sp, #20
 8013bba:	9a04      	ldr	r2, [sp, #16]
 8013bbc:	68a1      	ldr	r1, [r4, #8]
 8013bbe:	9301      	str	r3, [sp, #4]
 8013bc0:	4620      	mov	r0, r4
 8013bc2:	f000 f941 	bl	8013e48 <_vfiprintf_r>
 8013bc6:	b002      	add	sp, #8
 8013bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bcc:	b004      	add	sp, #16
 8013bce:	4770      	bx	lr
 8013bd0:	20000188 	.word	0x20000188

08013bd4 <rand>:
 8013bd4:	b538      	push	{r3, r4, r5, lr}
 8013bd6:	4b13      	ldr	r3, [pc, #76]	; (8013c24 <rand+0x50>)
 8013bd8:	681c      	ldr	r4, [r3, #0]
 8013bda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013bdc:	b97b      	cbnz	r3, 8013bfe <rand+0x2a>
 8013bde:	2018      	movs	r0, #24
 8013be0:	f7ff ff06 	bl	80139f0 <malloc>
 8013be4:	4a10      	ldr	r2, [pc, #64]	; (8013c28 <rand+0x54>)
 8013be6:	4b11      	ldr	r3, [pc, #68]	; (8013c2c <rand+0x58>)
 8013be8:	63a0      	str	r0, [r4, #56]	; 0x38
 8013bea:	e9c0 2300 	strd	r2, r3, [r0]
 8013bee:	4b10      	ldr	r3, [pc, #64]	; (8013c30 <rand+0x5c>)
 8013bf0:	6083      	str	r3, [r0, #8]
 8013bf2:	230b      	movs	r3, #11
 8013bf4:	8183      	strh	r3, [r0, #12]
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013bfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013c00:	480c      	ldr	r0, [pc, #48]	; (8013c34 <rand+0x60>)
 8013c02:	690a      	ldr	r2, [r1, #16]
 8013c04:	694b      	ldr	r3, [r1, #20]
 8013c06:	4c0c      	ldr	r4, [pc, #48]	; (8013c38 <rand+0x64>)
 8013c08:	4350      	muls	r0, r2
 8013c0a:	fb04 0003 	mla	r0, r4, r3, r0
 8013c0e:	fba2 2304 	umull	r2, r3, r2, r4
 8013c12:	4403      	add	r3, r0
 8013c14:	1c54      	adds	r4, r2, #1
 8013c16:	f143 0500 	adc.w	r5, r3, #0
 8013c1a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8013c1e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8013c22:	bd38      	pop	{r3, r4, r5, pc}
 8013c24:	20000188 	.word	0x20000188
 8013c28:	abcd330e 	.word	0xabcd330e
 8013c2c:	e66d1234 	.word	0xe66d1234
 8013c30:	0005deec 	.word	0x0005deec
 8013c34:	5851f42d 	.word	0x5851f42d
 8013c38:	4c957f2d 	.word	0x4c957f2d

08013c3c <_sbrk_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	4c06      	ldr	r4, [pc, #24]	; (8013c58 <_sbrk_r+0x1c>)
 8013c40:	2300      	movs	r3, #0
 8013c42:	4605      	mov	r5, r0
 8013c44:	4608      	mov	r0, r1
 8013c46:	6023      	str	r3, [r4, #0]
 8013c48:	f7fe fec0 	bl	80129cc <_sbrk>
 8013c4c:	1c43      	adds	r3, r0, #1
 8013c4e:	d102      	bne.n	8013c56 <_sbrk_r+0x1a>
 8013c50:	6823      	ldr	r3, [r4, #0]
 8013c52:	b103      	cbz	r3, 8013c56 <_sbrk_r+0x1a>
 8013c54:	602b      	str	r3, [r5, #0]
 8013c56:	bd38      	pop	{r3, r4, r5, pc}
 8013c58:	200084a0 	.word	0x200084a0

08013c5c <std>:
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	b510      	push	{r4, lr}
 8013c60:	4604      	mov	r4, r0
 8013c62:	e9c0 3300 	strd	r3, r3, [r0]
 8013c66:	6083      	str	r3, [r0, #8]
 8013c68:	8181      	strh	r1, [r0, #12]
 8013c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8013c6c:	81c2      	strh	r2, [r0, #14]
 8013c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c72:	6183      	str	r3, [r0, #24]
 8013c74:	4619      	mov	r1, r3
 8013c76:	2208      	movs	r2, #8
 8013c78:	305c      	adds	r0, #92	; 0x5c
 8013c7a:	f7ff fee3 	bl	8013a44 <memset>
 8013c7e:	4b05      	ldr	r3, [pc, #20]	; (8013c94 <std+0x38>)
 8013c80:	6263      	str	r3, [r4, #36]	; 0x24
 8013c82:	4b05      	ldr	r3, [pc, #20]	; (8013c98 <std+0x3c>)
 8013c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c86:	4b05      	ldr	r3, [pc, #20]	; (8013c9c <std+0x40>)
 8013c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c8a:	4b05      	ldr	r3, [pc, #20]	; (8013ca0 <std+0x44>)
 8013c8c:	6224      	str	r4, [r4, #32]
 8013c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8013c90:	bd10      	pop	{r4, pc}
 8013c92:	bf00      	nop
 8013c94:	08014385 	.word	0x08014385
 8013c98:	080143a7 	.word	0x080143a7
 8013c9c:	080143df 	.word	0x080143df
 8013ca0:	08014403 	.word	0x08014403

08013ca4 <_cleanup_r>:
 8013ca4:	4901      	ldr	r1, [pc, #4]	; (8013cac <_cleanup_r+0x8>)
 8013ca6:	f000 b885 	b.w	8013db4 <_fwalk_reent>
 8013caa:	bf00      	nop
 8013cac:	080146dd 	.word	0x080146dd

08013cb0 <__sfmoreglue>:
 8013cb0:	b570      	push	{r4, r5, r6, lr}
 8013cb2:	1e4a      	subs	r2, r1, #1
 8013cb4:	2568      	movs	r5, #104	; 0x68
 8013cb6:	4355      	muls	r5, r2
 8013cb8:	460e      	mov	r6, r1
 8013cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cbe:	f7ff ff17 	bl	8013af0 <_malloc_r>
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	b140      	cbz	r0, 8013cd8 <__sfmoreglue+0x28>
 8013cc6:	2100      	movs	r1, #0
 8013cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8013ccc:	300c      	adds	r0, #12
 8013cce:	60a0      	str	r0, [r4, #8]
 8013cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cd4:	f7ff feb6 	bl	8013a44 <memset>
 8013cd8:	4620      	mov	r0, r4
 8013cda:	bd70      	pop	{r4, r5, r6, pc}

08013cdc <__sinit>:
 8013cdc:	6983      	ldr	r3, [r0, #24]
 8013cde:	b510      	push	{r4, lr}
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	bb33      	cbnz	r3, 8013d32 <__sinit+0x56>
 8013ce4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013ce8:	6503      	str	r3, [r0, #80]	; 0x50
 8013cea:	4b12      	ldr	r3, [pc, #72]	; (8013d34 <__sinit+0x58>)
 8013cec:	4a12      	ldr	r2, [pc, #72]	; (8013d38 <__sinit+0x5c>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	6282      	str	r2, [r0, #40]	; 0x28
 8013cf2:	4298      	cmp	r0, r3
 8013cf4:	bf04      	itt	eq
 8013cf6:	2301      	moveq	r3, #1
 8013cf8:	6183      	streq	r3, [r0, #24]
 8013cfa:	f000 f81f 	bl	8013d3c <__sfp>
 8013cfe:	6060      	str	r0, [r4, #4]
 8013d00:	4620      	mov	r0, r4
 8013d02:	f000 f81b 	bl	8013d3c <__sfp>
 8013d06:	60a0      	str	r0, [r4, #8]
 8013d08:	4620      	mov	r0, r4
 8013d0a:	f000 f817 	bl	8013d3c <__sfp>
 8013d0e:	2200      	movs	r2, #0
 8013d10:	60e0      	str	r0, [r4, #12]
 8013d12:	2104      	movs	r1, #4
 8013d14:	6860      	ldr	r0, [r4, #4]
 8013d16:	f7ff ffa1 	bl	8013c5c <std>
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	2109      	movs	r1, #9
 8013d1e:	68a0      	ldr	r0, [r4, #8]
 8013d20:	f7ff ff9c 	bl	8013c5c <std>
 8013d24:	2202      	movs	r2, #2
 8013d26:	2112      	movs	r1, #18
 8013d28:	68e0      	ldr	r0, [r4, #12]
 8013d2a:	f7ff ff97 	bl	8013c5c <std>
 8013d2e:	2301      	movs	r3, #1
 8013d30:	61a3      	str	r3, [r4, #24]
 8013d32:	bd10      	pop	{r4, pc}
 8013d34:	08016ba0 	.word	0x08016ba0
 8013d38:	08013ca5 	.word	0x08013ca5

08013d3c <__sfp>:
 8013d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d3e:	4b1b      	ldr	r3, [pc, #108]	; (8013dac <__sfp+0x70>)
 8013d40:	681e      	ldr	r6, [r3, #0]
 8013d42:	69b3      	ldr	r3, [r6, #24]
 8013d44:	4607      	mov	r7, r0
 8013d46:	b913      	cbnz	r3, 8013d4e <__sfp+0x12>
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f7ff ffc7 	bl	8013cdc <__sinit>
 8013d4e:	3648      	adds	r6, #72	; 0x48
 8013d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013d54:	3b01      	subs	r3, #1
 8013d56:	d503      	bpl.n	8013d60 <__sfp+0x24>
 8013d58:	6833      	ldr	r3, [r6, #0]
 8013d5a:	b133      	cbz	r3, 8013d6a <__sfp+0x2e>
 8013d5c:	6836      	ldr	r6, [r6, #0]
 8013d5e:	e7f7      	b.n	8013d50 <__sfp+0x14>
 8013d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013d64:	b16d      	cbz	r5, 8013d82 <__sfp+0x46>
 8013d66:	3468      	adds	r4, #104	; 0x68
 8013d68:	e7f4      	b.n	8013d54 <__sfp+0x18>
 8013d6a:	2104      	movs	r1, #4
 8013d6c:	4638      	mov	r0, r7
 8013d6e:	f7ff ff9f 	bl	8013cb0 <__sfmoreglue>
 8013d72:	6030      	str	r0, [r6, #0]
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d1f1      	bne.n	8013d5c <__sfp+0x20>
 8013d78:	230c      	movs	r3, #12
 8013d7a:	603b      	str	r3, [r7, #0]
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	4620      	mov	r0, r4
 8013d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d82:	4b0b      	ldr	r3, [pc, #44]	; (8013db0 <__sfp+0x74>)
 8013d84:	6665      	str	r5, [r4, #100]	; 0x64
 8013d86:	e9c4 5500 	strd	r5, r5, [r4]
 8013d8a:	60a5      	str	r5, [r4, #8]
 8013d8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013d90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013d94:	2208      	movs	r2, #8
 8013d96:	4629      	mov	r1, r5
 8013d98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013d9c:	f7ff fe52 	bl	8013a44 <memset>
 8013da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013da8:	e7e9      	b.n	8013d7e <__sfp+0x42>
 8013daa:	bf00      	nop
 8013dac:	08016ba0 	.word	0x08016ba0
 8013db0:	ffff0001 	.word	0xffff0001

08013db4 <_fwalk_reent>:
 8013db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013db8:	4680      	mov	r8, r0
 8013dba:	4689      	mov	r9, r1
 8013dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013dc0:	2600      	movs	r6, #0
 8013dc2:	b914      	cbnz	r4, 8013dca <_fwalk_reent+0x16>
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013dce:	3f01      	subs	r7, #1
 8013dd0:	d501      	bpl.n	8013dd6 <_fwalk_reent+0x22>
 8013dd2:	6824      	ldr	r4, [r4, #0]
 8013dd4:	e7f5      	b.n	8013dc2 <_fwalk_reent+0xe>
 8013dd6:	89ab      	ldrh	r3, [r5, #12]
 8013dd8:	2b01      	cmp	r3, #1
 8013dda:	d907      	bls.n	8013dec <_fwalk_reent+0x38>
 8013ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013de0:	3301      	adds	r3, #1
 8013de2:	d003      	beq.n	8013dec <_fwalk_reent+0x38>
 8013de4:	4629      	mov	r1, r5
 8013de6:	4640      	mov	r0, r8
 8013de8:	47c8      	blx	r9
 8013dea:	4306      	orrs	r6, r0
 8013dec:	3568      	adds	r5, #104	; 0x68
 8013dee:	e7ee      	b.n	8013dce <_fwalk_reent+0x1a>

08013df0 <__malloc_lock>:
 8013df0:	4770      	bx	lr

08013df2 <__malloc_unlock>:
 8013df2:	4770      	bx	lr

08013df4 <__sfputc_r>:
 8013df4:	6893      	ldr	r3, [r2, #8]
 8013df6:	3b01      	subs	r3, #1
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	b410      	push	{r4}
 8013dfc:	6093      	str	r3, [r2, #8]
 8013dfe:	da08      	bge.n	8013e12 <__sfputc_r+0x1e>
 8013e00:	6994      	ldr	r4, [r2, #24]
 8013e02:	42a3      	cmp	r3, r4
 8013e04:	db01      	blt.n	8013e0a <__sfputc_r+0x16>
 8013e06:	290a      	cmp	r1, #10
 8013e08:	d103      	bne.n	8013e12 <__sfputc_r+0x1e>
 8013e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e0e:	f000 bafd 	b.w	801440c <__swbuf_r>
 8013e12:	6813      	ldr	r3, [r2, #0]
 8013e14:	1c58      	adds	r0, r3, #1
 8013e16:	6010      	str	r0, [r2, #0]
 8013e18:	7019      	strb	r1, [r3, #0]
 8013e1a:	4608      	mov	r0, r1
 8013e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e20:	4770      	bx	lr

08013e22 <__sfputs_r>:
 8013e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e24:	4606      	mov	r6, r0
 8013e26:	460f      	mov	r7, r1
 8013e28:	4614      	mov	r4, r2
 8013e2a:	18d5      	adds	r5, r2, r3
 8013e2c:	42ac      	cmp	r4, r5
 8013e2e:	d101      	bne.n	8013e34 <__sfputs_r+0x12>
 8013e30:	2000      	movs	r0, #0
 8013e32:	e007      	b.n	8013e44 <__sfputs_r+0x22>
 8013e34:	463a      	mov	r2, r7
 8013e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	f7ff ffda 	bl	8013df4 <__sfputc_r>
 8013e40:	1c43      	adds	r3, r0, #1
 8013e42:	d1f3      	bne.n	8013e2c <__sfputs_r+0xa>
 8013e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e48 <_vfiprintf_r>:
 8013e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e4c:	460c      	mov	r4, r1
 8013e4e:	b09d      	sub	sp, #116	; 0x74
 8013e50:	4617      	mov	r7, r2
 8013e52:	461d      	mov	r5, r3
 8013e54:	4606      	mov	r6, r0
 8013e56:	b118      	cbz	r0, 8013e60 <_vfiprintf_r+0x18>
 8013e58:	6983      	ldr	r3, [r0, #24]
 8013e5a:	b90b      	cbnz	r3, 8013e60 <_vfiprintf_r+0x18>
 8013e5c:	f7ff ff3e 	bl	8013cdc <__sinit>
 8013e60:	4b7c      	ldr	r3, [pc, #496]	; (8014054 <_vfiprintf_r+0x20c>)
 8013e62:	429c      	cmp	r4, r3
 8013e64:	d158      	bne.n	8013f18 <_vfiprintf_r+0xd0>
 8013e66:	6874      	ldr	r4, [r6, #4]
 8013e68:	89a3      	ldrh	r3, [r4, #12]
 8013e6a:	0718      	lsls	r0, r3, #28
 8013e6c:	d55e      	bpl.n	8013f2c <_vfiprintf_r+0xe4>
 8013e6e:	6923      	ldr	r3, [r4, #16]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d05b      	beq.n	8013f2c <_vfiprintf_r+0xe4>
 8013e74:	2300      	movs	r3, #0
 8013e76:	9309      	str	r3, [sp, #36]	; 0x24
 8013e78:	2320      	movs	r3, #32
 8013e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e7e:	2330      	movs	r3, #48	; 0x30
 8013e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e84:	9503      	str	r5, [sp, #12]
 8013e86:	f04f 0b01 	mov.w	fp, #1
 8013e8a:	46b8      	mov	r8, r7
 8013e8c:	4645      	mov	r5, r8
 8013e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013e92:	b10b      	cbz	r3, 8013e98 <_vfiprintf_r+0x50>
 8013e94:	2b25      	cmp	r3, #37	; 0x25
 8013e96:	d154      	bne.n	8013f42 <_vfiprintf_r+0xfa>
 8013e98:	ebb8 0a07 	subs.w	sl, r8, r7
 8013e9c:	d00b      	beq.n	8013eb6 <_vfiprintf_r+0x6e>
 8013e9e:	4653      	mov	r3, sl
 8013ea0:	463a      	mov	r2, r7
 8013ea2:	4621      	mov	r1, r4
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	f7ff ffbc 	bl	8013e22 <__sfputs_r>
 8013eaa:	3001      	adds	r0, #1
 8013eac:	f000 80c2 	beq.w	8014034 <_vfiprintf_r+0x1ec>
 8013eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eb2:	4453      	add	r3, sl
 8013eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8013eb6:	f898 3000 	ldrb.w	r3, [r8]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	f000 80ba 	beq.w	8014034 <_vfiprintf_r+0x1ec>
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013eca:	9304      	str	r3, [sp, #16]
 8013ecc:	9307      	str	r3, [sp, #28]
 8013ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8013ed4:	46a8      	mov	r8, r5
 8013ed6:	2205      	movs	r2, #5
 8013ed8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013edc:	485e      	ldr	r0, [pc, #376]	; (8014058 <_vfiprintf_r+0x210>)
 8013ede:	f7ec f987 	bl	80001f0 <memchr>
 8013ee2:	9b04      	ldr	r3, [sp, #16]
 8013ee4:	bb78      	cbnz	r0, 8013f46 <_vfiprintf_r+0xfe>
 8013ee6:	06d9      	lsls	r1, r3, #27
 8013ee8:	bf44      	itt	mi
 8013eea:	2220      	movmi	r2, #32
 8013eec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013ef0:	071a      	lsls	r2, r3, #28
 8013ef2:	bf44      	itt	mi
 8013ef4:	222b      	movmi	r2, #43	; 0x2b
 8013ef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013efa:	782a      	ldrb	r2, [r5, #0]
 8013efc:	2a2a      	cmp	r2, #42	; 0x2a
 8013efe:	d02a      	beq.n	8013f56 <_vfiprintf_r+0x10e>
 8013f00:	9a07      	ldr	r2, [sp, #28]
 8013f02:	46a8      	mov	r8, r5
 8013f04:	2000      	movs	r0, #0
 8013f06:	250a      	movs	r5, #10
 8013f08:	4641      	mov	r1, r8
 8013f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f0e:	3b30      	subs	r3, #48	; 0x30
 8013f10:	2b09      	cmp	r3, #9
 8013f12:	d969      	bls.n	8013fe8 <_vfiprintf_r+0x1a0>
 8013f14:	b360      	cbz	r0, 8013f70 <_vfiprintf_r+0x128>
 8013f16:	e024      	b.n	8013f62 <_vfiprintf_r+0x11a>
 8013f18:	4b50      	ldr	r3, [pc, #320]	; (801405c <_vfiprintf_r+0x214>)
 8013f1a:	429c      	cmp	r4, r3
 8013f1c:	d101      	bne.n	8013f22 <_vfiprintf_r+0xda>
 8013f1e:	68b4      	ldr	r4, [r6, #8]
 8013f20:	e7a2      	b.n	8013e68 <_vfiprintf_r+0x20>
 8013f22:	4b4f      	ldr	r3, [pc, #316]	; (8014060 <_vfiprintf_r+0x218>)
 8013f24:	429c      	cmp	r4, r3
 8013f26:	bf08      	it	eq
 8013f28:	68f4      	ldreq	r4, [r6, #12]
 8013f2a:	e79d      	b.n	8013e68 <_vfiprintf_r+0x20>
 8013f2c:	4621      	mov	r1, r4
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f000 fad0 	bl	80144d4 <__swsetup_r>
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d09d      	beq.n	8013e74 <_vfiprintf_r+0x2c>
 8013f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f3c:	b01d      	add	sp, #116	; 0x74
 8013f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f42:	46a8      	mov	r8, r5
 8013f44:	e7a2      	b.n	8013e8c <_vfiprintf_r+0x44>
 8013f46:	4a44      	ldr	r2, [pc, #272]	; (8014058 <_vfiprintf_r+0x210>)
 8013f48:	1a80      	subs	r0, r0, r2
 8013f4a:	fa0b f000 	lsl.w	r0, fp, r0
 8013f4e:	4318      	orrs	r0, r3
 8013f50:	9004      	str	r0, [sp, #16]
 8013f52:	4645      	mov	r5, r8
 8013f54:	e7be      	b.n	8013ed4 <_vfiprintf_r+0x8c>
 8013f56:	9a03      	ldr	r2, [sp, #12]
 8013f58:	1d11      	adds	r1, r2, #4
 8013f5a:	6812      	ldr	r2, [r2, #0]
 8013f5c:	9103      	str	r1, [sp, #12]
 8013f5e:	2a00      	cmp	r2, #0
 8013f60:	db01      	blt.n	8013f66 <_vfiprintf_r+0x11e>
 8013f62:	9207      	str	r2, [sp, #28]
 8013f64:	e004      	b.n	8013f70 <_vfiprintf_r+0x128>
 8013f66:	4252      	negs	r2, r2
 8013f68:	f043 0302 	orr.w	r3, r3, #2
 8013f6c:	9207      	str	r2, [sp, #28]
 8013f6e:	9304      	str	r3, [sp, #16]
 8013f70:	f898 3000 	ldrb.w	r3, [r8]
 8013f74:	2b2e      	cmp	r3, #46	; 0x2e
 8013f76:	d10e      	bne.n	8013f96 <_vfiprintf_r+0x14e>
 8013f78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8013f7e:	d138      	bne.n	8013ff2 <_vfiprintf_r+0x1aa>
 8013f80:	9b03      	ldr	r3, [sp, #12]
 8013f82:	1d1a      	adds	r2, r3, #4
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	9203      	str	r2, [sp, #12]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	bfb8      	it	lt
 8013f8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013f90:	f108 0802 	add.w	r8, r8, #2
 8013f94:	9305      	str	r3, [sp, #20]
 8013f96:	4d33      	ldr	r5, [pc, #204]	; (8014064 <_vfiprintf_r+0x21c>)
 8013f98:	f898 1000 	ldrb.w	r1, [r8]
 8013f9c:	2203      	movs	r2, #3
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	f7ec f926 	bl	80001f0 <memchr>
 8013fa4:	b140      	cbz	r0, 8013fb8 <_vfiprintf_r+0x170>
 8013fa6:	2340      	movs	r3, #64	; 0x40
 8013fa8:	1b40      	subs	r0, r0, r5
 8013faa:	fa03 f000 	lsl.w	r0, r3, r0
 8013fae:	9b04      	ldr	r3, [sp, #16]
 8013fb0:	4303      	orrs	r3, r0
 8013fb2:	f108 0801 	add.w	r8, r8, #1
 8013fb6:	9304      	str	r3, [sp, #16]
 8013fb8:	f898 1000 	ldrb.w	r1, [r8]
 8013fbc:	482a      	ldr	r0, [pc, #168]	; (8014068 <_vfiprintf_r+0x220>)
 8013fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fc2:	2206      	movs	r2, #6
 8013fc4:	f108 0701 	add.w	r7, r8, #1
 8013fc8:	f7ec f912 	bl	80001f0 <memchr>
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	d037      	beq.n	8014040 <_vfiprintf_r+0x1f8>
 8013fd0:	4b26      	ldr	r3, [pc, #152]	; (801406c <_vfiprintf_r+0x224>)
 8013fd2:	bb1b      	cbnz	r3, 801401c <_vfiprintf_r+0x1d4>
 8013fd4:	9b03      	ldr	r3, [sp, #12]
 8013fd6:	3307      	adds	r3, #7
 8013fd8:	f023 0307 	bic.w	r3, r3, #7
 8013fdc:	3308      	adds	r3, #8
 8013fde:	9303      	str	r3, [sp, #12]
 8013fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fe2:	444b      	add	r3, r9
 8013fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8013fe6:	e750      	b.n	8013e8a <_vfiprintf_r+0x42>
 8013fe8:	fb05 3202 	mla	r2, r5, r2, r3
 8013fec:	2001      	movs	r0, #1
 8013fee:	4688      	mov	r8, r1
 8013ff0:	e78a      	b.n	8013f08 <_vfiprintf_r+0xc0>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	f108 0801 	add.w	r8, r8, #1
 8013ff8:	9305      	str	r3, [sp, #20]
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	250a      	movs	r5, #10
 8013ffe:	4640      	mov	r0, r8
 8014000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014004:	3a30      	subs	r2, #48	; 0x30
 8014006:	2a09      	cmp	r2, #9
 8014008:	d903      	bls.n	8014012 <_vfiprintf_r+0x1ca>
 801400a:	2b00      	cmp	r3, #0
 801400c:	d0c3      	beq.n	8013f96 <_vfiprintf_r+0x14e>
 801400e:	9105      	str	r1, [sp, #20]
 8014010:	e7c1      	b.n	8013f96 <_vfiprintf_r+0x14e>
 8014012:	fb05 2101 	mla	r1, r5, r1, r2
 8014016:	2301      	movs	r3, #1
 8014018:	4680      	mov	r8, r0
 801401a:	e7f0      	b.n	8013ffe <_vfiprintf_r+0x1b6>
 801401c:	ab03      	add	r3, sp, #12
 801401e:	9300      	str	r3, [sp, #0]
 8014020:	4622      	mov	r2, r4
 8014022:	4b13      	ldr	r3, [pc, #76]	; (8014070 <_vfiprintf_r+0x228>)
 8014024:	a904      	add	r1, sp, #16
 8014026:	4630      	mov	r0, r6
 8014028:	f3af 8000 	nop.w
 801402c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014030:	4681      	mov	r9, r0
 8014032:	d1d5      	bne.n	8013fe0 <_vfiprintf_r+0x198>
 8014034:	89a3      	ldrh	r3, [r4, #12]
 8014036:	065b      	lsls	r3, r3, #25
 8014038:	f53f af7e 	bmi.w	8013f38 <_vfiprintf_r+0xf0>
 801403c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801403e:	e77d      	b.n	8013f3c <_vfiprintf_r+0xf4>
 8014040:	ab03      	add	r3, sp, #12
 8014042:	9300      	str	r3, [sp, #0]
 8014044:	4622      	mov	r2, r4
 8014046:	4b0a      	ldr	r3, [pc, #40]	; (8014070 <_vfiprintf_r+0x228>)
 8014048:	a904      	add	r1, sp, #16
 801404a:	4630      	mov	r0, r6
 801404c:	f000 f888 	bl	8014160 <_printf_i>
 8014050:	e7ec      	b.n	801402c <_vfiprintf_r+0x1e4>
 8014052:	bf00      	nop
 8014054:	08016bc4 	.word	0x08016bc4
 8014058:	08016c04 	.word	0x08016c04
 801405c:	08016be4 	.word	0x08016be4
 8014060:	08016ba4 	.word	0x08016ba4
 8014064:	08016c0a 	.word	0x08016c0a
 8014068:	08016c0e 	.word	0x08016c0e
 801406c:	00000000 	.word	0x00000000
 8014070:	08013e23 	.word	0x08013e23

08014074 <_printf_common>:
 8014074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014078:	4691      	mov	r9, r2
 801407a:	461f      	mov	r7, r3
 801407c:	688a      	ldr	r2, [r1, #8]
 801407e:	690b      	ldr	r3, [r1, #16]
 8014080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014084:	4293      	cmp	r3, r2
 8014086:	bfb8      	it	lt
 8014088:	4613      	movlt	r3, r2
 801408a:	f8c9 3000 	str.w	r3, [r9]
 801408e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014092:	4606      	mov	r6, r0
 8014094:	460c      	mov	r4, r1
 8014096:	b112      	cbz	r2, 801409e <_printf_common+0x2a>
 8014098:	3301      	adds	r3, #1
 801409a:	f8c9 3000 	str.w	r3, [r9]
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	0699      	lsls	r1, r3, #26
 80140a2:	bf42      	ittt	mi
 80140a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80140a8:	3302      	addmi	r3, #2
 80140aa:	f8c9 3000 	strmi.w	r3, [r9]
 80140ae:	6825      	ldr	r5, [r4, #0]
 80140b0:	f015 0506 	ands.w	r5, r5, #6
 80140b4:	d107      	bne.n	80140c6 <_printf_common+0x52>
 80140b6:	f104 0a19 	add.w	sl, r4, #25
 80140ba:	68e3      	ldr	r3, [r4, #12]
 80140bc:	f8d9 2000 	ldr.w	r2, [r9]
 80140c0:	1a9b      	subs	r3, r3, r2
 80140c2:	42ab      	cmp	r3, r5
 80140c4:	dc28      	bgt.n	8014118 <_printf_common+0xa4>
 80140c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80140ca:	6822      	ldr	r2, [r4, #0]
 80140cc:	3300      	adds	r3, #0
 80140ce:	bf18      	it	ne
 80140d0:	2301      	movne	r3, #1
 80140d2:	0692      	lsls	r2, r2, #26
 80140d4:	d42d      	bmi.n	8014132 <_printf_common+0xbe>
 80140d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140da:	4639      	mov	r1, r7
 80140dc:	4630      	mov	r0, r6
 80140de:	47c0      	blx	r8
 80140e0:	3001      	adds	r0, #1
 80140e2:	d020      	beq.n	8014126 <_printf_common+0xb2>
 80140e4:	6823      	ldr	r3, [r4, #0]
 80140e6:	68e5      	ldr	r5, [r4, #12]
 80140e8:	f8d9 2000 	ldr.w	r2, [r9]
 80140ec:	f003 0306 	and.w	r3, r3, #6
 80140f0:	2b04      	cmp	r3, #4
 80140f2:	bf08      	it	eq
 80140f4:	1aad      	subeq	r5, r5, r2
 80140f6:	68a3      	ldr	r3, [r4, #8]
 80140f8:	6922      	ldr	r2, [r4, #16]
 80140fa:	bf0c      	ite	eq
 80140fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014100:	2500      	movne	r5, #0
 8014102:	4293      	cmp	r3, r2
 8014104:	bfc4      	itt	gt
 8014106:	1a9b      	subgt	r3, r3, r2
 8014108:	18ed      	addgt	r5, r5, r3
 801410a:	f04f 0900 	mov.w	r9, #0
 801410e:	341a      	adds	r4, #26
 8014110:	454d      	cmp	r5, r9
 8014112:	d11a      	bne.n	801414a <_printf_common+0xd6>
 8014114:	2000      	movs	r0, #0
 8014116:	e008      	b.n	801412a <_printf_common+0xb6>
 8014118:	2301      	movs	r3, #1
 801411a:	4652      	mov	r2, sl
 801411c:	4639      	mov	r1, r7
 801411e:	4630      	mov	r0, r6
 8014120:	47c0      	blx	r8
 8014122:	3001      	adds	r0, #1
 8014124:	d103      	bne.n	801412e <_printf_common+0xba>
 8014126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801412e:	3501      	adds	r5, #1
 8014130:	e7c3      	b.n	80140ba <_printf_common+0x46>
 8014132:	18e1      	adds	r1, r4, r3
 8014134:	1c5a      	adds	r2, r3, #1
 8014136:	2030      	movs	r0, #48	; 0x30
 8014138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801413c:	4422      	add	r2, r4
 801413e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014146:	3302      	adds	r3, #2
 8014148:	e7c5      	b.n	80140d6 <_printf_common+0x62>
 801414a:	2301      	movs	r3, #1
 801414c:	4622      	mov	r2, r4
 801414e:	4639      	mov	r1, r7
 8014150:	4630      	mov	r0, r6
 8014152:	47c0      	blx	r8
 8014154:	3001      	adds	r0, #1
 8014156:	d0e6      	beq.n	8014126 <_printf_common+0xb2>
 8014158:	f109 0901 	add.w	r9, r9, #1
 801415c:	e7d8      	b.n	8014110 <_printf_common+0x9c>
	...

08014160 <_printf_i>:
 8014160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014168:	460c      	mov	r4, r1
 801416a:	7e09      	ldrb	r1, [r1, #24]
 801416c:	b085      	sub	sp, #20
 801416e:	296e      	cmp	r1, #110	; 0x6e
 8014170:	4617      	mov	r7, r2
 8014172:	4606      	mov	r6, r0
 8014174:	4698      	mov	r8, r3
 8014176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014178:	f000 80b3 	beq.w	80142e2 <_printf_i+0x182>
 801417c:	d822      	bhi.n	80141c4 <_printf_i+0x64>
 801417e:	2963      	cmp	r1, #99	; 0x63
 8014180:	d036      	beq.n	80141f0 <_printf_i+0x90>
 8014182:	d80a      	bhi.n	801419a <_printf_i+0x3a>
 8014184:	2900      	cmp	r1, #0
 8014186:	f000 80b9 	beq.w	80142fc <_printf_i+0x19c>
 801418a:	2958      	cmp	r1, #88	; 0x58
 801418c:	f000 8083 	beq.w	8014296 <_printf_i+0x136>
 8014190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014198:	e032      	b.n	8014200 <_printf_i+0xa0>
 801419a:	2964      	cmp	r1, #100	; 0x64
 801419c:	d001      	beq.n	80141a2 <_printf_i+0x42>
 801419e:	2969      	cmp	r1, #105	; 0x69
 80141a0:	d1f6      	bne.n	8014190 <_printf_i+0x30>
 80141a2:	6820      	ldr	r0, [r4, #0]
 80141a4:	6813      	ldr	r3, [r2, #0]
 80141a6:	0605      	lsls	r5, r0, #24
 80141a8:	f103 0104 	add.w	r1, r3, #4
 80141ac:	d52a      	bpl.n	8014204 <_printf_i+0xa4>
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	6011      	str	r1, [r2, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	da03      	bge.n	80141be <_printf_i+0x5e>
 80141b6:	222d      	movs	r2, #45	; 0x2d
 80141b8:	425b      	negs	r3, r3
 80141ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80141be:	486f      	ldr	r0, [pc, #444]	; (801437c <_printf_i+0x21c>)
 80141c0:	220a      	movs	r2, #10
 80141c2:	e039      	b.n	8014238 <_printf_i+0xd8>
 80141c4:	2973      	cmp	r1, #115	; 0x73
 80141c6:	f000 809d 	beq.w	8014304 <_printf_i+0x1a4>
 80141ca:	d808      	bhi.n	80141de <_printf_i+0x7e>
 80141cc:	296f      	cmp	r1, #111	; 0x6f
 80141ce:	d020      	beq.n	8014212 <_printf_i+0xb2>
 80141d0:	2970      	cmp	r1, #112	; 0x70
 80141d2:	d1dd      	bne.n	8014190 <_printf_i+0x30>
 80141d4:	6823      	ldr	r3, [r4, #0]
 80141d6:	f043 0320 	orr.w	r3, r3, #32
 80141da:	6023      	str	r3, [r4, #0]
 80141dc:	e003      	b.n	80141e6 <_printf_i+0x86>
 80141de:	2975      	cmp	r1, #117	; 0x75
 80141e0:	d017      	beq.n	8014212 <_printf_i+0xb2>
 80141e2:	2978      	cmp	r1, #120	; 0x78
 80141e4:	d1d4      	bne.n	8014190 <_printf_i+0x30>
 80141e6:	2378      	movs	r3, #120	; 0x78
 80141e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80141ec:	4864      	ldr	r0, [pc, #400]	; (8014380 <_printf_i+0x220>)
 80141ee:	e055      	b.n	801429c <_printf_i+0x13c>
 80141f0:	6813      	ldr	r3, [r2, #0]
 80141f2:	1d19      	adds	r1, r3, #4
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	6011      	str	r1, [r2, #0]
 80141f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80141fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014200:	2301      	movs	r3, #1
 8014202:	e08c      	b.n	801431e <_printf_i+0x1be>
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	6011      	str	r1, [r2, #0]
 8014208:	f010 0f40 	tst.w	r0, #64	; 0x40
 801420c:	bf18      	it	ne
 801420e:	b21b      	sxthne	r3, r3
 8014210:	e7cf      	b.n	80141b2 <_printf_i+0x52>
 8014212:	6813      	ldr	r3, [r2, #0]
 8014214:	6825      	ldr	r5, [r4, #0]
 8014216:	1d18      	adds	r0, r3, #4
 8014218:	6010      	str	r0, [r2, #0]
 801421a:	0628      	lsls	r0, r5, #24
 801421c:	d501      	bpl.n	8014222 <_printf_i+0xc2>
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	e002      	b.n	8014228 <_printf_i+0xc8>
 8014222:	0668      	lsls	r0, r5, #25
 8014224:	d5fb      	bpl.n	801421e <_printf_i+0xbe>
 8014226:	881b      	ldrh	r3, [r3, #0]
 8014228:	4854      	ldr	r0, [pc, #336]	; (801437c <_printf_i+0x21c>)
 801422a:	296f      	cmp	r1, #111	; 0x6f
 801422c:	bf14      	ite	ne
 801422e:	220a      	movne	r2, #10
 8014230:	2208      	moveq	r2, #8
 8014232:	2100      	movs	r1, #0
 8014234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014238:	6865      	ldr	r5, [r4, #4]
 801423a:	60a5      	str	r5, [r4, #8]
 801423c:	2d00      	cmp	r5, #0
 801423e:	f2c0 8095 	blt.w	801436c <_printf_i+0x20c>
 8014242:	6821      	ldr	r1, [r4, #0]
 8014244:	f021 0104 	bic.w	r1, r1, #4
 8014248:	6021      	str	r1, [r4, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d13d      	bne.n	80142ca <_printf_i+0x16a>
 801424e:	2d00      	cmp	r5, #0
 8014250:	f040 808e 	bne.w	8014370 <_printf_i+0x210>
 8014254:	4665      	mov	r5, ip
 8014256:	2a08      	cmp	r2, #8
 8014258:	d10b      	bne.n	8014272 <_printf_i+0x112>
 801425a:	6823      	ldr	r3, [r4, #0]
 801425c:	07db      	lsls	r3, r3, #31
 801425e:	d508      	bpl.n	8014272 <_printf_i+0x112>
 8014260:	6923      	ldr	r3, [r4, #16]
 8014262:	6862      	ldr	r2, [r4, #4]
 8014264:	429a      	cmp	r2, r3
 8014266:	bfde      	ittt	le
 8014268:	2330      	movle	r3, #48	; 0x30
 801426a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801426e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014272:	ebac 0305 	sub.w	r3, ip, r5
 8014276:	6123      	str	r3, [r4, #16]
 8014278:	f8cd 8000 	str.w	r8, [sp]
 801427c:	463b      	mov	r3, r7
 801427e:	aa03      	add	r2, sp, #12
 8014280:	4621      	mov	r1, r4
 8014282:	4630      	mov	r0, r6
 8014284:	f7ff fef6 	bl	8014074 <_printf_common>
 8014288:	3001      	adds	r0, #1
 801428a:	d14d      	bne.n	8014328 <_printf_i+0x1c8>
 801428c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014290:	b005      	add	sp, #20
 8014292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014296:	4839      	ldr	r0, [pc, #228]	; (801437c <_printf_i+0x21c>)
 8014298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801429c:	6813      	ldr	r3, [r2, #0]
 801429e:	6821      	ldr	r1, [r4, #0]
 80142a0:	1d1d      	adds	r5, r3, #4
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	6015      	str	r5, [r2, #0]
 80142a6:	060a      	lsls	r2, r1, #24
 80142a8:	d50b      	bpl.n	80142c2 <_printf_i+0x162>
 80142aa:	07ca      	lsls	r2, r1, #31
 80142ac:	bf44      	itt	mi
 80142ae:	f041 0120 	orrmi.w	r1, r1, #32
 80142b2:	6021      	strmi	r1, [r4, #0]
 80142b4:	b91b      	cbnz	r3, 80142be <_printf_i+0x15e>
 80142b6:	6822      	ldr	r2, [r4, #0]
 80142b8:	f022 0220 	bic.w	r2, r2, #32
 80142bc:	6022      	str	r2, [r4, #0]
 80142be:	2210      	movs	r2, #16
 80142c0:	e7b7      	b.n	8014232 <_printf_i+0xd2>
 80142c2:	064d      	lsls	r5, r1, #25
 80142c4:	bf48      	it	mi
 80142c6:	b29b      	uxthmi	r3, r3
 80142c8:	e7ef      	b.n	80142aa <_printf_i+0x14a>
 80142ca:	4665      	mov	r5, ip
 80142cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80142d0:	fb02 3311 	mls	r3, r2, r1, r3
 80142d4:	5cc3      	ldrb	r3, [r0, r3]
 80142d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80142da:	460b      	mov	r3, r1
 80142dc:	2900      	cmp	r1, #0
 80142de:	d1f5      	bne.n	80142cc <_printf_i+0x16c>
 80142e0:	e7b9      	b.n	8014256 <_printf_i+0xf6>
 80142e2:	6813      	ldr	r3, [r2, #0]
 80142e4:	6825      	ldr	r5, [r4, #0]
 80142e6:	6961      	ldr	r1, [r4, #20]
 80142e8:	1d18      	adds	r0, r3, #4
 80142ea:	6010      	str	r0, [r2, #0]
 80142ec:	0628      	lsls	r0, r5, #24
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	d501      	bpl.n	80142f6 <_printf_i+0x196>
 80142f2:	6019      	str	r1, [r3, #0]
 80142f4:	e002      	b.n	80142fc <_printf_i+0x19c>
 80142f6:	066a      	lsls	r2, r5, #25
 80142f8:	d5fb      	bpl.n	80142f2 <_printf_i+0x192>
 80142fa:	8019      	strh	r1, [r3, #0]
 80142fc:	2300      	movs	r3, #0
 80142fe:	6123      	str	r3, [r4, #16]
 8014300:	4665      	mov	r5, ip
 8014302:	e7b9      	b.n	8014278 <_printf_i+0x118>
 8014304:	6813      	ldr	r3, [r2, #0]
 8014306:	1d19      	adds	r1, r3, #4
 8014308:	6011      	str	r1, [r2, #0]
 801430a:	681d      	ldr	r5, [r3, #0]
 801430c:	6862      	ldr	r2, [r4, #4]
 801430e:	2100      	movs	r1, #0
 8014310:	4628      	mov	r0, r5
 8014312:	f7eb ff6d 	bl	80001f0 <memchr>
 8014316:	b108      	cbz	r0, 801431c <_printf_i+0x1bc>
 8014318:	1b40      	subs	r0, r0, r5
 801431a:	6060      	str	r0, [r4, #4]
 801431c:	6863      	ldr	r3, [r4, #4]
 801431e:	6123      	str	r3, [r4, #16]
 8014320:	2300      	movs	r3, #0
 8014322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014326:	e7a7      	b.n	8014278 <_printf_i+0x118>
 8014328:	6923      	ldr	r3, [r4, #16]
 801432a:	462a      	mov	r2, r5
 801432c:	4639      	mov	r1, r7
 801432e:	4630      	mov	r0, r6
 8014330:	47c0      	blx	r8
 8014332:	3001      	adds	r0, #1
 8014334:	d0aa      	beq.n	801428c <_printf_i+0x12c>
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	079b      	lsls	r3, r3, #30
 801433a:	d413      	bmi.n	8014364 <_printf_i+0x204>
 801433c:	68e0      	ldr	r0, [r4, #12]
 801433e:	9b03      	ldr	r3, [sp, #12]
 8014340:	4298      	cmp	r0, r3
 8014342:	bfb8      	it	lt
 8014344:	4618      	movlt	r0, r3
 8014346:	e7a3      	b.n	8014290 <_printf_i+0x130>
 8014348:	2301      	movs	r3, #1
 801434a:	464a      	mov	r2, r9
 801434c:	4639      	mov	r1, r7
 801434e:	4630      	mov	r0, r6
 8014350:	47c0      	blx	r8
 8014352:	3001      	adds	r0, #1
 8014354:	d09a      	beq.n	801428c <_printf_i+0x12c>
 8014356:	3501      	adds	r5, #1
 8014358:	68e3      	ldr	r3, [r4, #12]
 801435a:	9a03      	ldr	r2, [sp, #12]
 801435c:	1a9b      	subs	r3, r3, r2
 801435e:	42ab      	cmp	r3, r5
 8014360:	dcf2      	bgt.n	8014348 <_printf_i+0x1e8>
 8014362:	e7eb      	b.n	801433c <_printf_i+0x1dc>
 8014364:	2500      	movs	r5, #0
 8014366:	f104 0919 	add.w	r9, r4, #25
 801436a:	e7f5      	b.n	8014358 <_printf_i+0x1f8>
 801436c:	2b00      	cmp	r3, #0
 801436e:	d1ac      	bne.n	80142ca <_printf_i+0x16a>
 8014370:	7803      	ldrb	r3, [r0, #0]
 8014372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801437a:	e76c      	b.n	8014256 <_printf_i+0xf6>
 801437c:	08016c15 	.word	0x08016c15
 8014380:	08016c26 	.word	0x08016c26

08014384 <__sread>:
 8014384:	b510      	push	{r4, lr}
 8014386:	460c      	mov	r4, r1
 8014388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801438c:	f000 fa46 	bl	801481c <_read_r>
 8014390:	2800      	cmp	r0, #0
 8014392:	bfab      	itete	ge
 8014394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014396:	89a3      	ldrhlt	r3, [r4, #12]
 8014398:	181b      	addge	r3, r3, r0
 801439a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801439e:	bfac      	ite	ge
 80143a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80143a2:	81a3      	strhlt	r3, [r4, #12]
 80143a4:	bd10      	pop	{r4, pc}

080143a6 <__swrite>:
 80143a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143aa:	461f      	mov	r7, r3
 80143ac:	898b      	ldrh	r3, [r1, #12]
 80143ae:	05db      	lsls	r3, r3, #23
 80143b0:	4605      	mov	r5, r0
 80143b2:	460c      	mov	r4, r1
 80143b4:	4616      	mov	r6, r2
 80143b6:	d505      	bpl.n	80143c4 <__swrite+0x1e>
 80143b8:	2302      	movs	r3, #2
 80143ba:	2200      	movs	r2, #0
 80143bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143c0:	f000 f9b6 	bl	8014730 <_lseek_r>
 80143c4:	89a3      	ldrh	r3, [r4, #12]
 80143c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80143ce:	81a3      	strh	r3, [r4, #12]
 80143d0:	4632      	mov	r2, r6
 80143d2:	463b      	mov	r3, r7
 80143d4:	4628      	mov	r0, r5
 80143d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143da:	f000 b869 	b.w	80144b0 <_write_r>

080143de <__sseek>:
 80143de:	b510      	push	{r4, lr}
 80143e0:	460c      	mov	r4, r1
 80143e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143e6:	f000 f9a3 	bl	8014730 <_lseek_r>
 80143ea:	1c43      	adds	r3, r0, #1
 80143ec:	89a3      	ldrh	r3, [r4, #12]
 80143ee:	bf15      	itete	ne
 80143f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80143f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80143f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80143fa:	81a3      	strheq	r3, [r4, #12]
 80143fc:	bf18      	it	ne
 80143fe:	81a3      	strhne	r3, [r4, #12]
 8014400:	bd10      	pop	{r4, pc}

08014402 <__sclose>:
 8014402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014406:	f000 b8d3 	b.w	80145b0 <_close_r>
	...

0801440c <__swbuf_r>:
 801440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801440e:	460e      	mov	r6, r1
 8014410:	4614      	mov	r4, r2
 8014412:	4605      	mov	r5, r0
 8014414:	b118      	cbz	r0, 801441e <__swbuf_r+0x12>
 8014416:	6983      	ldr	r3, [r0, #24]
 8014418:	b90b      	cbnz	r3, 801441e <__swbuf_r+0x12>
 801441a:	f7ff fc5f 	bl	8013cdc <__sinit>
 801441e:	4b21      	ldr	r3, [pc, #132]	; (80144a4 <__swbuf_r+0x98>)
 8014420:	429c      	cmp	r4, r3
 8014422:	d12a      	bne.n	801447a <__swbuf_r+0x6e>
 8014424:	686c      	ldr	r4, [r5, #4]
 8014426:	69a3      	ldr	r3, [r4, #24]
 8014428:	60a3      	str	r3, [r4, #8]
 801442a:	89a3      	ldrh	r3, [r4, #12]
 801442c:	071a      	lsls	r2, r3, #28
 801442e:	d52e      	bpl.n	801448e <__swbuf_r+0x82>
 8014430:	6923      	ldr	r3, [r4, #16]
 8014432:	b363      	cbz	r3, 801448e <__swbuf_r+0x82>
 8014434:	6923      	ldr	r3, [r4, #16]
 8014436:	6820      	ldr	r0, [r4, #0]
 8014438:	1ac0      	subs	r0, r0, r3
 801443a:	6963      	ldr	r3, [r4, #20]
 801443c:	b2f6      	uxtb	r6, r6
 801443e:	4283      	cmp	r3, r0
 8014440:	4637      	mov	r7, r6
 8014442:	dc04      	bgt.n	801444e <__swbuf_r+0x42>
 8014444:	4621      	mov	r1, r4
 8014446:	4628      	mov	r0, r5
 8014448:	f000 f948 	bl	80146dc <_fflush_r>
 801444c:	bb28      	cbnz	r0, 801449a <__swbuf_r+0x8e>
 801444e:	68a3      	ldr	r3, [r4, #8]
 8014450:	3b01      	subs	r3, #1
 8014452:	60a3      	str	r3, [r4, #8]
 8014454:	6823      	ldr	r3, [r4, #0]
 8014456:	1c5a      	adds	r2, r3, #1
 8014458:	6022      	str	r2, [r4, #0]
 801445a:	701e      	strb	r6, [r3, #0]
 801445c:	6963      	ldr	r3, [r4, #20]
 801445e:	3001      	adds	r0, #1
 8014460:	4283      	cmp	r3, r0
 8014462:	d004      	beq.n	801446e <__swbuf_r+0x62>
 8014464:	89a3      	ldrh	r3, [r4, #12]
 8014466:	07db      	lsls	r3, r3, #31
 8014468:	d519      	bpl.n	801449e <__swbuf_r+0x92>
 801446a:	2e0a      	cmp	r6, #10
 801446c:	d117      	bne.n	801449e <__swbuf_r+0x92>
 801446e:	4621      	mov	r1, r4
 8014470:	4628      	mov	r0, r5
 8014472:	f000 f933 	bl	80146dc <_fflush_r>
 8014476:	b190      	cbz	r0, 801449e <__swbuf_r+0x92>
 8014478:	e00f      	b.n	801449a <__swbuf_r+0x8e>
 801447a:	4b0b      	ldr	r3, [pc, #44]	; (80144a8 <__swbuf_r+0x9c>)
 801447c:	429c      	cmp	r4, r3
 801447e:	d101      	bne.n	8014484 <__swbuf_r+0x78>
 8014480:	68ac      	ldr	r4, [r5, #8]
 8014482:	e7d0      	b.n	8014426 <__swbuf_r+0x1a>
 8014484:	4b09      	ldr	r3, [pc, #36]	; (80144ac <__swbuf_r+0xa0>)
 8014486:	429c      	cmp	r4, r3
 8014488:	bf08      	it	eq
 801448a:	68ec      	ldreq	r4, [r5, #12]
 801448c:	e7cb      	b.n	8014426 <__swbuf_r+0x1a>
 801448e:	4621      	mov	r1, r4
 8014490:	4628      	mov	r0, r5
 8014492:	f000 f81f 	bl	80144d4 <__swsetup_r>
 8014496:	2800      	cmp	r0, #0
 8014498:	d0cc      	beq.n	8014434 <__swbuf_r+0x28>
 801449a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801449e:	4638      	mov	r0, r7
 80144a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144a2:	bf00      	nop
 80144a4:	08016bc4 	.word	0x08016bc4
 80144a8:	08016be4 	.word	0x08016be4
 80144ac:	08016ba4 	.word	0x08016ba4

080144b0 <_write_r>:
 80144b0:	b538      	push	{r3, r4, r5, lr}
 80144b2:	4c07      	ldr	r4, [pc, #28]	; (80144d0 <_write_r+0x20>)
 80144b4:	4605      	mov	r5, r0
 80144b6:	4608      	mov	r0, r1
 80144b8:	4611      	mov	r1, r2
 80144ba:	2200      	movs	r2, #0
 80144bc:	6022      	str	r2, [r4, #0]
 80144be:	461a      	mov	r2, r3
 80144c0:	f7fe fa33 	bl	801292a <_write>
 80144c4:	1c43      	adds	r3, r0, #1
 80144c6:	d102      	bne.n	80144ce <_write_r+0x1e>
 80144c8:	6823      	ldr	r3, [r4, #0]
 80144ca:	b103      	cbz	r3, 80144ce <_write_r+0x1e>
 80144cc:	602b      	str	r3, [r5, #0]
 80144ce:	bd38      	pop	{r3, r4, r5, pc}
 80144d0:	200084a0 	.word	0x200084a0

080144d4 <__swsetup_r>:
 80144d4:	4b32      	ldr	r3, [pc, #200]	; (80145a0 <__swsetup_r+0xcc>)
 80144d6:	b570      	push	{r4, r5, r6, lr}
 80144d8:	681d      	ldr	r5, [r3, #0]
 80144da:	4606      	mov	r6, r0
 80144dc:	460c      	mov	r4, r1
 80144de:	b125      	cbz	r5, 80144ea <__swsetup_r+0x16>
 80144e0:	69ab      	ldr	r3, [r5, #24]
 80144e2:	b913      	cbnz	r3, 80144ea <__swsetup_r+0x16>
 80144e4:	4628      	mov	r0, r5
 80144e6:	f7ff fbf9 	bl	8013cdc <__sinit>
 80144ea:	4b2e      	ldr	r3, [pc, #184]	; (80145a4 <__swsetup_r+0xd0>)
 80144ec:	429c      	cmp	r4, r3
 80144ee:	d10f      	bne.n	8014510 <__swsetup_r+0x3c>
 80144f0:	686c      	ldr	r4, [r5, #4]
 80144f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144f6:	b29a      	uxth	r2, r3
 80144f8:	0715      	lsls	r5, r2, #28
 80144fa:	d42c      	bmi.n	8014556 <__swsetup_r+0x82>
 80144fc:	06d0      	lsls	r0, r2, #27
 80144fe:	d411      	bmi.n	8014524 <__swsetup_r+0x50>
 8014500:	2209      	movs	r2, #9
 8014502:	6032      	str	r2, [r6, #0]
 8014504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014508:	81a3      	strh	r3, [r4, #12]
 801450a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801450e:	e03e      	b.n	801458e <__swsetup_r+0xba>
 8014510:	4b25      	ldr	r3, [pc, #148]	; (80145a8 <__swsetup_r+0xd4>)
 8014512:	429c      	cmp	r4, r3
 8014514:	d101      	bne.n	801451a <__swsetup_r+0x46>
 8014516:	68ac      	ldr	r4, [r5, #8]
 8014518:	e7eb      	b.n	80144f2 <__swsetup_r+0x1e>
 801451a:	4b24      	ldr	r3, [pc, #144]	; (80145ac <__swsetup_r+0xd8>)
 801451c:	429c      	cmp	r4, r3
 801451e:	bf08      	it	eq
 8014520:	68ec      	ldreq	r4, [r5, #12]
 8014522:	e7e6      	b.n	80144f2 <__swsetup_r+0x1e>
 8014524:	0751      	lsls	r1, r2, #29
 8014526:	d512      	bpl.n	801454e <__swsetup_r+0x7a>
 8014528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801452a:	b141      	cbz	r1, 801453e <__swsetup_r+0x6a>
 801452c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014530:	4299      	cmp	r1, r3
 8014532:	d002      	beq.n	801453a <__swsetup_r+0x66>
 8014534:	4630      	mov	r0, r6
 8014536:	f7ff fa8d 	bl	8013a54 <_free_r>
 801453a:	2300      	movs	r3, #0
 801453c:	6363      	str	r3, [r4, #52]	; 0x34
 801453e:	89a3      	ldrh	r3, [r4, #12]
 8014540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014544:	81a3      	strh	r3, [r4, #12]
 8014546:	2300      	movs	r3, #0
 8014548:	6063      	str	r3, [r4, #4]
 801454a:	6923      	ldr	r3, [r4, #16]
 801454c:	6023      	str	r3, [r4, #0]
 801454e:	89a3      	ldrh	r3, [r4, #12]
 8014550:	f043 0308 	orr.w	r3, r3, #8
 8014554:	81a3      	strh	r3, [r4, #12]
 8014556:	6923      	ldr	r3, [r4, #16]
 8014558:	b94b      	cbnz	r3, 801456e <__swsetup_r+0x9a>
 801455a:	89a3      	ldrh	r3, [r4, #12]
 801455c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014564:	d003      	beq.n	801456e <__swsetup_r+0x9a>
 8014566:	4621      	mov	r1, r4
 8014568:	4630      	mov	r0, r6
 801456a:	f000 f917 	bl	801479c <__smakebuf_r>
 801456e:	89a2      	ldrh	r2, [r4, #12]
 8014570:	f012 0301 	ands.w	r3, r2, #1
 8014574:	d00c      	beq.n	8014590 <__swsetup_r+0xbc>
 8014576:	2300      	movs	r3, #0
 8014578:	60a3      	str	r3, [r4, #8]
 801457a:	6963      	ldr	r3, [r4, #20]
 801457c:	425b      	negs	r3, r3
 801457e:	61a3      	str	r3, [r4, #24]
 8014580:	6923      	ldr	r3, [r4, #16]
 8014582:	b953      	cbnz	r3, 801459a <__swsetup_r+0xc6>
 8014584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014588:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801458c:	d1ba      	bne.n	8014504 <__swsetup_r+0x30>
 801458e:	bd70      	pop	{r4, r5, r6, pc}
 8014590:	0792      	lsls	r2, r2, #30
 8014592:	bf58      	it	pl
 8014594:	6963      	ldrpl	r3, [r4, #20]
 8014596:	60a3      	str	r3, [r4, #8]
 8014598:	e7f2      	b.n	8014580 <__swsetup_r+0xac>
 801459a:	2000      	movs	r0, #0
 801459c:	e7f7      	b.n	801458e <__swsetup_r+0xba>
 801459e:	bf00      	nop
 80145a0:	20000188 	.word	0x20000188
 80145a4:	08016bc4 	.word	0x08016bc4
 80145a8:	08016be4 	.word	0x08016be4
 80145ac:	08016ba4 	.word	0x08016ba4

080145b0 <_close_r>:
 80145b0:	b538      	push	{r3, r4, r5, lr}
 80145b2:	4c06      	ldr	r4, [pc, #24]	; (80145cc <_close_r+0x1c>)
 80145b4:	2300      	movs	r3, #0
 80145b6:	4605      	mov	r5, r0
 80145b8:	4608      	mov	r0, r1
 80145ba:	6023      	str	r3, [r4, #0]
 80145bc:	f7fe f9d1 	bl	8012962 <_close>
 80145c0:	1c43      	adds	r3, r0, #1
 80145c2:	d102      	bne.n	80145ca <_close_r+0x1a>
 80145c4:	6823      	ldr	r3, [r4, #0]
 80145c6:	b103      	cbz	r3, 80145ca <_close_r+0x1a>
 80145c8:	602b      	str	r3, [r5, #0]
 80145ca:	bd38      	pop	{r3, r4, r5, pc}
 80145cc:	200084a0 	.word	0x200084a0

080145d0 <__sflush_r>:
 80145d0:	898a      	ldrh	r2, [r1, #12]
 80145d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d6:	4605      	mov	r5, r0
 80145d8:	0710      	lsls	r0, r2, #28
 80145da:	460c      	mov	r4, r1
 80145dc:	d458      	bmi.n	8014690 <__sflush_r+0xc0>
 80145de:	684b      	ldr	r3, [r1, #4]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	dc05      	bgt.n	80145f0 <__sflush_r+0x20>
 80145e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	dc02      	bgt.n	80145f0 <__sflush_r+0x20>
 80145ea:	2000      	movs	r0, #0
 80145ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145f2:	2e00      	cmp	r6, #0
 80145f4:	d0f9      	beq.n	80145ea <__sflush_r+0x1a>
 80145f6:	2300      	movs	r3, #0
 80145f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145fc:	682f      	ldr	r7, [r5, #0]
 80145fe:	6a21      	ldr	r1, [r4, #32]
 8014600:	602b      	str	r3, [r5, #0]
 8014602:	d032      	beq.n	801466a <__sflush_r+0x9a>
 8014604:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014606:	89a3      	ldrh	r3, [r4, #12]
 8014608:	075a      	lsls	r2, r3, #29
 801460a:	d505      	bpl.n	8014618 <__sflush_r+0x48>
 801460c:	6863      	ldr	r3, [r4, #4]
 801460e:	1ac0      	subs	r0, r0, r3
 8014610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014612:	b10b      	cbz	r3, 8014618 <__sflush_r+0x48>
 8014614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014616:	1ac0      	subs	r0, r0, r3
 8014618:	2300      	movs	r3, #0
 801461a:	4602      	mov	r2, r0
 801461c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801461e:	6a21      	ldr	r1, [r4, #32]
 8014620:	4628      	mov	r0, r5
 8014622:	47b0      	blx	r6
 8014624:	1c43      	adds	r3, r0, #1
 8014626:	89a3      	ldrh	r3, [r4, #12]
 8014628:	d106      	bne.n	8014638 <__sflush_r+0x68>
 801462a:	6829      	ldr	r1, [r5, #0]
 801462c:	291d      	cmp	r1, #29
 801462e:	d848      	bhi.n	80146c2 <__sflush_r+0xf2>
 8014630:	4a29      	ldr	r2, [pc, #164]	; (80146d8 <__sflush_r+0x108>)
 8014632:	40ca      	lsrs	r2, r1
 8014634:	07d6      	lsls	r6, r2, #31
 8014636:	d544      	bpl.n	80146c2 <__sflush_r+0xf2>
 8014638:	2200      	movs	r2, #0
 801463a:	6062      	str	r2, [r4, #4]
 801463c:	04d9      	lsls	r1, r3, #19
 801463e:	6922      	ldr	r2, [r4, #16]
 8014640:	6022      	str	r2, [r4, #0]
 8014642:	d504      	bpl.n	801464e <__sflush_r+0x7e>
 8014644:	1c42      	adds	r2, r0, #1
 8014646:	d101      	bne.n	801464c <__sflush_r+0x7c>
 8014648:	682b      	ldr	r3, [r5, #0]
 801464a:	b903      	cbnz	r3, 801464e <__sflush_r+0x7e>
 801464c:	6560      	str	r0, [r4, #84]	; 0x54
 801464e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014650:	602f      	str	r7, [r5, #0]
 8014652:	2900      	cmp	r1, #0
 8014654:	d0c9      	beq.n	80145ea <__sflush_r+0x1a>
 8014656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801465a:	4299      	cmp	r1, r3
 801465c:	d002      	beq.n	8014664 <__sflush_r+0x94>
 801465e:	4628      	mov	r0, r5
 8014660:	f7ff f9f8 	bl	8013a54 <_free_r>
 8014664:	2000      	movs	r0, #0
 8014666:	6360      	str	r0, [r4, #52]	; 0x34
 8014668:	e7c0      	b.n	80145ec <__sflush_r+0x1c>
 801466a:	2301      	movs	r3, #1
 801466c:	4628      	mov	r0, r5
 801466e:	47b0      	blx	r6
 8014670:	1c41      	adds	r1, r0, #1
 8014672:	d1c8      	bne.n	8014606 <__sflush_r+0x36>
 8014674:	682b      	ldr	r3, [r5, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d0c5      	beq.n	8014606 <__sflush_r+0x36>
 801467a:	2b1d      	cmp	r3, #29
 801467c:	d001      	beq.n	8014682 <__sflush_r+0xb2>
 801467e:	2b16      	cmp	r3, #22
 8014680:	d101      	bne.n	8014686 <__sflush_r+0xb6>
 8014682:	602f      	str	r7, [r5, #0]
 8014684:	e7b1      	b.n	80145ea <__sflush_r+0x1a>
 8014686:	89a3      	ldrh	r3, [r4, #12]
 8014688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801468c:	81a3      	strh	r3, [r4, #12]
 801468e:	e7ad      	b.n	80145ec <__sflush_r+0x1c>
 8014690:	690f      	ldr	r7, [r1, #16]
 8014692:	2f00      	cmp	r7, #0
 8014694:	d0a9      	beq.n	80145ea <__sflush_r+0x1a>
 8014696:	0793      	lsls	r3, r2, #30
 8014698:	680e      	ldr	r6, [r1, #0]
 801469a:	bf08      	it	eq
 801469c:	694b      	ldreq	r3, [r1, #20]
 801469e:	600f      	str	r7, [r1, #0]
 80146a0:	bf18      	it	ne
 80146a2:	2300      	movne	r3, #0
 80146a4:	eba6 0807 	sub.w	r8, r6, r7
 80146a8:	608b      	str	r3, [r1, #8]
 80146aa:	f1b8 0f00 	cmp.w	r8, #0
 80146ae:	dd9c      	ble.n	80145ea <__sflush_r+0x1a>
 80146b0:	4643      	mov	r3, r8
 80146b2:	463a      	mov	r2, r7
 80146b4:	6a21      	ldr	r1, [r4, #32]
 80146b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80146b8:	4628      	mov	r0, r5
 80146ba:	47b0      	blx	r6
 80146bc:	2800      	cmp	r0, #0
 80146be:	dc06      	bgt.n	80146ce <__sflush_r+0xfe>
 80146c0:	89a3      	ldrh	r3, [r4, #12]
 80146c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146c6:	81a3      	strh	r3, [r4, #12]
 80146c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146cc:	e78e      	b.n	80145ec <__sflush_r+0x1c>
 80146ce:	4407      	add	r7, r0
 80146d0:	eba8 0800 	sub.w	r8, r8, r0
 80146d4:	e7e9      	b.n	80146aa <__sflush_r+0xda>
 80146d6:	bf00      	nop
 80146d8:	20400001 	.word	0x20400001

080146dc <_fflush_r>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	690b      	ldr	r3, [r1, #16]
 80146e0:	4605      	mov	r5, r0
 80146e2:	460c      	mov	r4, r1
 80146e4:	b1db      	cbz	r3, 801471e <_fflush_r+0x42>
 80146e6:	b118      	cbz	r0, 80146f0 <_fflush_r+0x14>
 80146e8:	6983      	ldr	r3, [r0, #24]
 80146ea:	b90b      	cbnz	r3, 80146f0 <_fflush_r+0x14>
 80146ec:	f7ff faf6 	bl	8013cdc <__sinit>
 80146f0:	4b0c      	ldr	r3, [pc, #48]	; (8014724 <_fflush_r+0x48>)
 80146f2:	429c      	cmp	r4, r3
 80146f4:	d109      	bne.n	801470a <_fflush_r+0x2e>
 80146f6:	686c      	ldr	r4, [r5, #4]
 80146f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146fc:	b17b      	cbz	r3, 801471e <_fflush_r+0x42>
 80146fe:	4621      	mov	r1, r4
 8014700:	4628      	mov	r0, r5
 8014702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014706:	f7ff bf63 	b.w	80145d0 <__sflush_r>
 801470a:	4b07      	ldr	r3, [pc, #28]	; (8014728 <_fflush_r+0x4c>)
 801470c:	429c      	cmp	r4, r3
 801470e:	d101      	bne.n	8014714 <_fflush_r+0x38>
 8014710:	68ac      	ldr	r4, [r5, #8]
 8014712:	e7f1      	b.n	80146f8 <_fflush_r+0x1c>
 8014714:	4b05      	ldr	r3, [pc, #20]	; (801472c <_fflush_r+0x50>)
 8014716:	429c      	cmp	r4, r3
 8014718:	bf08      	it	eq
 801471a:	68ec      	ldreq	r4, [r5, #12]
 801471c:	e7ec      	b.n	80146f8 <_fflush_r+0x1c>
 801471e:	2000      	movs	r0, #0
 8014720:	bd38      	pop	{r3, r4, r5, pc}
 8014722:	bf00      	nop
 8014724:	08016bc4 	.word	0x08016bc4
 8014728:	08016be4 	.word	0x08016be4
 801472c:	08016ba4 	.word	0x08016ba4

08014730 <_lseek_r>:
 8014730:	b538      	push	{r3, r4, r5, lr}
 8014732:	4c07      	ldr	r4, [pc, #28]	; (8014750 <_lseek_r+0x20>)
 8014734:	4605      	mov	r5, r0
 8014736:	4608      	mov	r0, r1
 8014738:	4611      	mov	r1, r2
 801473a:	2200      	movs	r2, #0
 801473c:	6022      	str	r2, [r4, #0]
 801473e:	461a      	mov	r2, r3
 8014740:	f7fe f936 	bl	80129b0 <_lseek>
 8014744:	1c43      	adds	r3, r0, #1
 8014746:	d102      	bne.n	801474e <_lseek_r+0x1e>
 8014748:	6823      	ldr	r3, [r4, #0]
 801474a:	b103      	cbz	r3, 801474e <_lseek_r+0x1e>
 801474c:	602b      	str	r3, [r5, #0]
 801474e:	bd38      	pop	{r3, r4, r5, pc}
 8014750:	200084a0 	.word	0x200084a0

08014754 <__swhatbuf_r>:
 8014754:	b570      	push	{r4, r5, r6, lr}
 8014756:	460e      	mov	r6, r1
 8014758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475c:	2900      	cmp	r1, #0
 801475e:	b096      	sub	sp, #88	; 0x58
 8014760:	4614      	mov	r4, r2
 8014762:	461d      	mov	r5, r3
 8014764:	da07      	bge.n	8014776 <__swhatbuf_r+0x22>
 8014766:	2300      	movs	r3, #0
 8014768:	602b      	str	r3, [r5, #0]
 801476a:	89b3      	ldrh	r3, [r6, #12]
 801476c:	061a      	lsls	r2, r3, #24
 801476e:	d410      	bmi.n	8014792 <__swhatbuf_r+0x3e>
 8014770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014774:	e00e      	b.n	8014794 <__swhatbuf_r+0x40>
 8014776:	466a      	mov	r2, sp
 8014778:	f000 f862 	bl	8014840 <_fstat_r>
 801477c:	2800      	cmp	r0, #0
 801477e:	dbf2      	blt.n	8014766 <__swhatbuf_r+0x12>
 8014780:	9a01      	ldr	r2, [sp, #4]
 8014782:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014786:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801478a:	425a      	negs	r2, r3
 801478c:	415a      	adcs	r2, r3
 801478e:	602a      	str	r2, [r5, #0]
 8014790:	e7ee      	b.n	8014770 <__swhatbuf_r+0x1c>
 8014792:	2340      	movs	r3, #64	; 0x40
 8014794:	2000      	movs	r0, #0
 8014796:	6023      	str	r3, [r4, #0]
 8014798:	b016      	add	sp, #88	; 0x58
 801479a:	bd70      	pop	{r4, r5, r6, pc}

0801479c <__smakebuf_r>:
 801479c:	898b      	ldrh	r3, [r1, #12]
 801479e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80147a0:	079d      	lsls	r5, r3, #30
 80147a2:	4606      	mov	r6, r0
 80147a4:	460c      	mov	r4, r1
 80147a6:	d507      	bpl.n	80147b8 <__smakebuf_r+0x1c>
 80147a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80147ac:	6023      	str	r3, [r4, #0]
 80147ae:	6123      	str	r3, [r4, #16]
 80147b0:	2301      	movs	r3, #1
 80147b2:	6163      	str	r3, [r4, #20]
 80147b4:	b002      	add	sp, #8
 80147b6:	bd70      	pop	{r4, r5, r6, pc}
 80147b8:	ab01      	add	r3, sp, #4
 80147ba:	466a      	mov	r2, sp
 80147bc:	f7ff ffca 	bl	8014754 <__swhatbuf_r>
 80147c0:	9900      	ldr	r1, [sp, #0]
 80147c2:	4605      	mov	r5, r0
 80147c4:	4630      	mov	r0, r6
 80147c6:	f7ff f993 	bl	8013af0 <_malloc_r>
 80147ca:	b948      	cbnz	r0, 80147e0 <__smakebuf_r+0x44>
 80147cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147d0:	059a      	lsls	r2, r3, #22
 80147d2:	d4ef      	bmi.n	80147b4 <__smakebuf_r+0x18>
 80147d4:	f023 0303 	bic.w	r3, r3, #3
 80147d8:	f043 0302 	orr.w	r3, r3, #2
 80147dc:	81a3      	strh	r3, [r4, #12]
 80147de:	e7e3      	b.n	80147a8 <__smakebuf_r+0xc>
 80147e0:	4b0d      	ldr	r3, [pc, #52]	; (8014818 <__smakebuf_r+0x7c>)
 80147e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80147e4:	89a3      	ldrh	r3, [r4, #12]
 80147e6:	6020      	str	r0, [r4, #0]
 80147e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147ec:	81a3      	strh	r3, [r4, #12]
 80147ee:	9b00      	ldr	r3, [sp, #0]
 80147f0:	6163      	str	r3, [r4, #20]
 80147f2:	9b01      	ldr	r3, [sp, #4]
 80147f4:	6120      	str	r0, [r4, #16]
 80147f6:	b15b      	cbz	r3, 8014810 <__smakebuf_r+0x74>
 80147f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147fc:	4630      	mov	r0, r6
 80147fe:	f000 f831 	bl	8014864 <_isatty_r>
 8014802:	b128      	cbz	r0, 8014810 <__smakebuf_r+0x74>
 8014804:	89a3      	ldrh	r3, [r4, #12]
 8014806:	f023 0303 	bic.w	r3, r3, #3
 801480a:	f043 0301 	orr.w	r3, r3, #1
 801480e:	81a3      	strh	r3, [r4, #12]
 8014810:	89a3      	ldrh	r3, [r4, #12]
 8014812:	431d      	orrs	r5, r3
 8014814:	81a5      	strh	r5, [r4, #12]
 8014816:	e7cd      	b.n	80147b4 <__smakebuf_r+0x18>
 8014818:	08013ca5 	.word	0x08013ca5

0801481c <_read_r>:
 801481c:	b538      	push	{r3, r4, r5, lr}
 801481e:	4c07      	ldr	r4, [pc, #28]	; (801483c <_read_r+0x20>)
 8014820:	4605      	mov	r5, r0
 8014822:	4608      	mov	r0, r1
 8014824:	4611      	mov	r1, r2
 8014826:	2200      	movs	r2, #0
 8014828:	6022      	str	r2, [r4, #0]
 801482a:	461a      	mov	r2, r3
 801482c:	f7fe f860 	bl	80128f0 <_read>
 8014830:	1c43      	adds	r3, r0, #1
 8014832:	d102      	bne.n	801483a <_read_r+0x1e>
 8014834:	6823      	ldr	r3, [r4, #0]
 8014836:	b103      	cbz	r3, 801483a <_read_r+0x1e>
 8014838:	602b      	str	r3, [r5, #0]
 801483a:	bd38      	pop	{r3, r4, r5, pc}
 801483c:	200084a0 	.word	0x200084a0

08014840 <_fstat_r>:
 8014840:	b538      	push	{r3, r4, r5, lr}
 8014842:	4c07      	ldr	r4, [pc, #28]	; (8014860 <_fstat_r+0x20>)
 8014844:	2300      	movs	r3, #0
 8014846:	4605      	mov	r5, r0
 8014848:	4608      	mov	r0, r1
 801484a:	4611      	mov	r1, r2
 801484c:	6023      	str	r3, [r4, #0]
 801484e:	f7fe f894 	bl	801297a <_fstat>
 8014852:	1c43      	adds	r3, r0, #1
 8014854:	d102      	bne.n	801485c <_fstat_r+0x1c>
 8014856:	6823      	ldr	r3, [r4, #0]
 8014858:	b103      	cbz	r3, 801485c <_fstat_r+0x1c>
 801485a:	602b      	str	r3, [r5, #0]
 801485c:	bd38      	pop	{r3, r4, r5, pc}
 801485e:	bf00      	nop
 8014860:	200084a0 	.word	0x200084a0

08014864 <_isatty_r>:
 8014864:	b538      	push	{r3, r4, r5, lr}
 8014866:	4c06      	ldr	r4, [pc, #24]	; (8014880 <_isatty_r+0x1c>)
 8014868:	2300      	movs	r3, #0
 801486a:	4605      	mov	r5, r0
 801486c:	4608      	mov	r0, r1
 801486e:	6023      	str	r3, [r4, #0]
 8014870:	f7fe f893 	bl	801299a <_isatty>
 8014874:	1c43      	adds	r3, r0, #1
 8014876:	d102      	bne.n	801487e <_isatty_r+0x1a>
 8014878:	6823      	ldr	r3, [r4, #0]
 801487a:	b103      	cbz	r3, 801487e <_isatty_r+0x1a>
 801487c:	602b      	str	r3, [r5, #0]
 801487e:	bd38      	pop	{r3, r4, r5, pc}
 8014880:	200084a0 	.word	0x200084a0

08014884 <_init>:
 8014884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014886:	bf00      	nop
 8014888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801488a:	bc08      	pop	{r3}
 801488c:	469e      	mov	lr, r3
 801488e:	4770      	bx	lr

08014890 <_fini>:
 8014890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014892:	bf00      	nop
 8014894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014896:	bc08      	pop	{r3}
 8014898:	469e      	mov	lr, r3
 801489a:	4770      	bx	lr
