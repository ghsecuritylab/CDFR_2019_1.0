
CDFR release 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000913c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009470  08009470  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009478  08009478  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  200001e0  08009660  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cb4  08009660  00021cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e03  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004790  00000000  00000000  00044013  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  000487a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001650  00000000  00000000  00049ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b4e6  00000000  00000000  0004b640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000197f1  00000000  00000000  00076b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eff97  00000000  00000000  00090317  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001802ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a60  00000000  00000000  0018032c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e0 	.word	0x200001e0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080092d0 	.word	0x080092d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001e4 	.word	0x200001e4
 80001e8:	080092d0 	.word	0x080092d0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(VL53L1_Dev_t dev, uint8_t new_address)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
	VL53L1X_ERROR status = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	085b      	lsrs	r3, r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f99c 	bl	8000844 <VL53L1_WrByte>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000510:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_Dev_t dev)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp=0;
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	2300      	movs	r3, #0
 800052e:	737b      	strb	r3, [r7, #13]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000530:	232d      	movs	r3, #45	; 0x2d
 8000532:	73fb      	strb	r3, [r7, #15]
 8000534:	e00e      	b.n	8000554 <VL53L1X_SensorInit+0x38>
		status = VL53L1_WrByte(&dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	b299      	uxth	r1, r3
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	3b2d      	subs	r3, #45	; 0x2d
 800053e:	4a20      	ldr	r2, [pc, #128]	; (80005c0 <VL53L1X_SensorInit+0xa4>)
 8000540:	5cd2      	ldrb	r2, [r2, r3]
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f97d 	bl	8000844 <VL53L1_WrByte>
 800054a:	4603      	mov	r3, r0
 800054c:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	3301      	adds	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b87      	cmp	r3, #135	; 0x87
 8000558:	d9ed      	bls.n	8000536 <VL53L1X_SensorInit+0x1a>
	}
	status = VL53L1X_StartRanging(dev);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f86c 	bl	8000638 <VL53L1X_StartRanging>
 8000560:	4603      	mov	r3, r0
 8000562:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8000564:	e007      	b.n	8000576 <VL53L1X_SensorInit+0x5a>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8000566:	f107 030d 	add.w	r3, r7, #13
 800056a:	4619      	mov	r1, r3
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 f88b 	bl	8000688 <VL53L1X_CheckForDataReady>
 8000572:	4603      	mov	r3, r0
 8000574:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8000576:	7b7b      	ldrb	r3, [r7, #13]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f4      	beq.n	8000566 <VL53L1X_SensorInit+0x4a>
	}
	tmp  = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	737b      	strb	r3, [r7, #13]
	status = VL53L1X_ClearInterrupt(dev);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 f81f 	bl	80005c4 <VL53L1X_ClearInterrupt>
 8000586:	4603      	mov	r3, r0
 8000588:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f868 	bl	8000660 <VL53L1X_StopRanging>
 8000590:	4603      	mov	r3, r0
 8000592:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2209      	movs	r2, #9
 8000598:	2108      	movs	r1, #8
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f952 	bl	8000844 <VL53L1_WrByte>
 80005a0:	4603      	mov	r3, r0
 80005a2:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, 0x0B, 0); /* start VHV from the previous temperature */
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	210b      	movs	r1, #11
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f94a 	bl	8000844 <VL53L1_WrByte>
 80005b0:	4603      	mov	r3, r0
 80005b2:	73bb      	strb	r3, [r7, #14]
	return status;
 80005b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	08009398 	.word	0x08009398

080005c4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_Dev_t dev)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2201      	movs	r2, #1
 80005d4:	2186      	movs	r1, #134	; 0x86
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f934 	bl	8000844 <VL53L1_WrByte>
 80005dc:	4603      	mov	r3, r0
 80005de:	73fb      	strb	r3, [r7, #15]
	return status;
 80005e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(&dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_Dev_t dev, uint8_t *pInterruptPolarity)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(&dev, GPIO_HV_MUX__CTRL, &Temp);
 80005fa:	f107 020e 	add.w	r2, r7, #14
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2130      	movs	r1, #48	; 0x30
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f938 	bl	8000878 <VL53L1_RdByte>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	701a      	strb	r2, [r3, #0]
	return status;
 800062c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_Dev_t dev)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2240      	movs	r2, #64	; 0x40
 8000648:	2187      	movs	r1, #135	; 0x87
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8fa 	bl	8000844 <VL53L1_WrByte>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
	return status;
 8000654:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_Dev_t dev)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	2187      	movs	r1, #135	; 0x87
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f8e6 	bl	8000844 <VL53L1_WrByte>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
	return status;
 800067c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_Dev_t dev, uint8_t *isDataReady)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000696:	f107 030d 	add.w	r3, r7, #13
 800069a:	4619      	mov	r1, r3
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ffa5 	bl	80005ec <VL53L1X_GetInterruptPolarity>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(&dev, GPIO__TIO_HV_STATUS, &Temp);
 80006a6:	f107 020e 	add.w	r2, r7, #14
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2131      	movs	r1, #49	; 0x31
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f8e2 	bl	8000878 <VL53L1_RdByte>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80006b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10c      	bne.n	80006da <VL53L1X_CheckForDataReady+0x52>
		if ((Temp & 1) == IntPol)
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	7b7a      	ldrb	r2, [r7, #13]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d103      	bne.n	80006d4 <VL53L1X_CheckForDataReady+0x4c>
			*isDataReady = 1;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e002      	b.n	80006da <VL53L1X_CheckForDataReady+0x52>
		else
			*isDataReady = 0;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80006da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_Dev_t dev, uint8_t *state)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(&dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80006f8:	f107 020e 	add.w	r2, r7, #14
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	21e5      	movs	r1, #229	; 0xe5
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f8b9 	bl	8000878 <VL53L1_RdByte>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 800070a:	7bba      	ldrb	r2, [r7, #14]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	701a      	strb	r2, [r3, #0]
	return status;
 8000710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_Dev_t dev, uint16_t *distance)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(&dev,
 800072a:	f107 020c 	add.w	r2, r7, #12
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2196      	movs	r1, #150	; 0x96
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f8b9 	bl	80008aa <VL53L1_RdWord>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800073c:	89ba      	ldrh	r2, [r7, #12]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	801a      	strh	r2, [r3, #0]
	return status;
 8000742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(VL53L1_Dev_t dev, uint8_t *rangeStatus)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	status = VL53L1_RdByte(&dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 800075e:	f107 020e 	add.w	r2, r7, #14
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2189      	movs	r1, #137	; 0x89
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f886 	bl	8000878 <VL53L1_RdByte>
 800076c:	4603      	mov	r3, r0
 800076e:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt&0x1F;
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	f003 031f 	and.w	r3, r3, #31
 8000776:	b2db      	uxtb	r3, r3
 8000778:	73bb      	strb	r3, [r7, #14]
	switch (RgSt) {
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	3b03      	subs	r3, #3
 800077e:	2b14      	cmp	r3, #20
 8000780:	d853      	bhi.n	800082a <VL53L1X_GetRangeStatus+0xda>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <VL53L1X_GetRangeStatus+0x38>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	080007fb 	.word	0x080007fb
 800078c:	080007e9 	.word	0x080007e9
 8000790:	080007f5 	.word	0x080007f5
 8000794:	080007e3 	.word	0x080007e3
 8000798:	08000807 	.word	0x08000807
 800079c:	080007ef 	.word	0x080007ef
 80007a0:	080007dd 	.word	0x080007dd
 80007a4:	0800082b 	.word	0x0800082b
 80007a8:	0800082b 	.word	0x0800082b
 80007ac:	0800080d 	.word	0x0800080d
 80007b0:	08000825 	.word	0x08000825
 80007b4:	0800082b 	.word	0x0800082b
 80007b8:	0800082b 	.word	0x0800082b
 80007bc:	0800082b 	.word	0x0800082b
 80007c0:	0800082b 	.word	0x0800082b
 80007c4:	08000813 	.word	0x08000813
 80007c8:	08000801 	.word	0x08000801
 80007cc:	0800082b 	.word	0x0800082b
 80007d0:	0800082b 	.word	0x0800082b
 80007d4:	08000819 	.word	0x08000819
 80007d8:	0800081f 	.word	0x0800081f
	case 9:
		RgSt = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73bb      	strb	r3, [r7, #14]
		break;
 80007e0:	e026      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 6:
		RgSt = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73bb      	strb	r3, [r7, #14]
		break;
 80007e6:	e023      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 4:
		RgSt = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	73bb      	strb	r3, [r7, #14]
		break;
 80007ec:	e020      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 8:
		RgSt = 3;
 80007ee:	2303      	movs	r3, #3
 80007f0:	73bb      	strb	r3, [r7, #14]
		break;
 80007f2:	e01d      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 5:
		RgSt = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	73bb      	strb	r3, [r7, #14]
		break;
 80007f8:	e01a      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 3:
		RgSt = 5;
 80007fa:	2305      	movs	r3, #5
 80007fc:	73bb      	strb	r3, [r7, #14]
		break;
 80007fe:	e017      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 19:
		RgSt = 6;
 8000800:	2306      	movs	r3, #6
 8000802:	73bb      	strb	r3, [r7, #14]
		break;
 8000804:	e014      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 7:
		RgSt = 7;
 8000806:	2307      	movs	r3, #7
 8000808:	73bb      	strb	r3, [r7, #14]
		break;
 800080a:	e011      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 12:
		RgSt = 9;
 800080c:	2309      	movs	r3, #9
 800080e:	73bb      	strb	r3, [r7, #14]
		break;
 8000810:	e00e      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 18:
		RgSt = 10;
 8000812:	230a      	movs	r3, #10
 8000814:	73bb      	strb	r3, [r7, #14]
		break;
 8000816:	e00b      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 22:
		RgSt = 11;
 8000818:	230b      	movs	r3, #11
 800081a:	73bb      	strb	r3, [r7, #14]
		break;
 800081c:	e008      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 23:
		RgSt = 12;
 800081e:	230c      	movs	r3, #12
 8000820:	73bb      	strb	r3, [r7, #14]
		break;
 8000822:	e005      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	case 13:
		RgSt = 13;
 8000824:	230d      	movs	r3, #13
 8000826:	73bb      	strb	r3, [r7, #14]
		break;
 8000828:	e002      	b.n	8000830 <VL53L1X_GetRangeStatus+0xe0>
	default:
		RgSt = 255;
 800082a:	23ff      	movs	r3, #255	; 0xff
 800082c:	73bb      	strb	r3, [r7, #14]
		break;
 800082e:	bf00      	nop
	}
	*rangeStatus = RgSt;
 8000830:	7bba      	ldrb	r2, [r7, #14]
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	701a      	strb	r2, [r3, #0]
	return status;
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop

08000844 <VL53L1_WrByte>:
#include <math.h>


#include "i2c.h"

int8_t VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
 8000850:	4613      	mov	r3, r2
 8000852:	707b      	strb	r3, [r7, #1]

	uint8_t status = I2C_STATUS_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]
	status = F_I2C2_WriteRegister(Dev->addr, index, &data, 1);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	b2d8      	uxtb	r0, r3
 800085e:	1c7a      	adds	r2, r7, #1
 8000860:	8879      	ldrh	r1, [r7, #2]
 8000862:	2301      	movs	r3, #1
 8000864:	f006 fd5a 	bl	800731c <F_I2C2_WriteRegister>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

	return status; // to be implemented
 800086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <VL53L1_RdByte>:
	status = F_I2C2_WriteRegister(Dev->addr, index, &to_send[3], 1);

	return status; // to be implemented
}

int8_t VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	460b      	mov	r3, r1
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	817b      	strh	r3, [r7, #10]

	uint8_t status = I2C_STATUS_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	75fb      	strb	r3, [r7, #23]
	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 1, data);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	b2d8      	uxtb	r0, r3
 8000890:	8979      	ldrh	r1, [r7, #10]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2201      	movs	r2, #1
 8000896:	f006 fdc5 	bl	8007424 <F_I2C2_ReadRegisterVL53L1X>
 800089a:	4603      	mov	r3, r0
 800089c:	75fb      	strb	r3, [r7, #23]

	return status; // to be implemented
 800089e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <VL53L1_RdWord>:

int8_t VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	460b      	mov	r3, r1
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	817b      	strh	r3, [r7, #10]

	uint8_t read_values[2] = {0,0};
 80008b8:	2300      	movs	r3, #0
 80008ba:	753b      	strb	r3, [r7, #20]
 80008bc:	2300      	movs	r3, #0
 80008be:	757b      	strb	r3, [r7, #21]
	uint8_t status = I2C_STATUS_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	75fb      	strb	r3, [r7, #23]

	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 2, read_values);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	b2d8      	uxtb	r0, r3
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	8979      	ldrh	r1, [r7, #10]
 80008d0:	2202      	movs	r2, #2
 80008d2:	f006 fda7 	bl	8007424 <F_I2C2_ReadRegisterVL53L1X>
 80008d6:	4603      	mov	r3, r0
 80008d8:	75fb      	strb	r3, [r7, #23]

	*data = (read_values[0] << 8) + read_values[1];
 80008da:	7d3b      	ldrb	r3, [r7, #20]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	7d7b      	ldrb	r3, [r7, #21]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	801a      	strh	r2, [r3, #0]

	return status; // to be implemented
 80008ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_Init+0x40>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_Init+0x40>)
 8000912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_Init+0x40>)
 800091e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f94d 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f808 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f006 fed4 	bl	80076dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023c00 	.word	0x40023c00

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f965 	bl	8000c2e <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800097c:	f000 f92d 	bl	8000bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000118 	.word	0x20000118
 8000998:	20000004 	.word	0x20000004
 800099c:	20000000 	.word	0x20000000

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000210 	.word	0x20000210

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000210 	.word	0x20000210

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff ffee 	bl	80009c8 <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_Delay+0x40>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffde 	bl	80009c8 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000004 	.word	0x20000004

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff29 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff3e 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff31 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffa2 	bl	8000b80 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e177      	b.n	8000f54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8166 	bne.w	8000f4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x4a>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d123      	bne.n	8000cda <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	691a      	ldr	r2, [r3, #16]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	69b9      	ldr	r1, [r7, #24]
 8000cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0203 	and.w	r2, r3, #3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d00b      	beq.n	8000d2e <HAL_GPIO_Init+0xe6>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d007      	beq.n	8000d2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d22:	2b11      	cmp	r3, #17
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b12      	cmp	r3, #18
 8000d2c:	d130      	bne.n	8000d90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	f003 0201 	and.w	r2, r3, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80c0 	beq.w	8000f4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a64      	ldr	r2, [pc, #400]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dea:	4a60      	ldr	r2, [pc, #384]	; (8000f6c <HAL_GPIO_Init+0x324>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a57      	ldr	r2, [pc, #348]	; (8000f70 <HAL_GPIO_Init+0x328>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d037      	beq.n	8000e86 <HAL_GPIO_Init+0x23e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a56      	ldr	r2, [pc, #344]	; (8000f74 <HAL_GPIO_Init+0x32c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d031      	beq.n	8000e82 <HAL_GPIO_Init+0x23a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a55      	ldr	r2, [pc, #340]	; (8000f78 <HAL_GPIO_Init+0x330>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d02b      	beq.n	8000e7e <HAL_GPIO_Init+0x236>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a54      	ldr	r2, [pc, #336]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d025      	beq.n	8000e7a <HAL_GPIO_Init+0x232>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a53      	ldr	r2, [pc, #332]	; (8000f80 <HAL_GPIO_Init+0x338>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d01f      	beq.n	8000e76 <HAL_GPIO_Init+0x22e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a52      	ldr	r2, [pc, #328]	; (8000f84 <HAL_GPIO_Init+0x33c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d019      	beq.n	8000e72 <HAL_GPIO_Init+0x22a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a51      	ldr	r2, [pc, #324]	; (8000f88 <HAL_GPIO_Init+0x340>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x226>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <HAL_GPIO_Init+0x344>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x222>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4f      	ldr	r2, [pc, #316]	; (8000f90 <HAL_GPIO_Init+0x348>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x21e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x21a>
 8000e5e:	2309      	movs	r3, #9
 8000e60:	e012      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e62:	230a      	movs	r3, #10
 8000e64:	e010      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e66:	2308      	movs	r3, #8
 8000e68:	e00e      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e00c      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e00a      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e008      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e76:	2304      	movs	r3, #4
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e004      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e002      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x240>
 8000e86:	2300      	movs	r3, #0
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	f002 0203 	and.w	r2, r2, #3
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	4093      	lsls	r3, r2
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e98:	4934      	ldr	r1, [pc, #208]	; (8000f6c <HAL_GPIO_Init+0x324>)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea6:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eca:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef4:	4a28      	ldr	r2, [pc, #160]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3301      	adds	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	2b0f      	cmp	r3, #15
 8000f58:	f67f ae84 	bls.w	8000c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3724      	adds	r7, #36	; 0x24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40021400 	.word	0x40021400
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	40021c00 	.word	0x40021c00
 8000f90:	40022000 	.word	0x40022000
 8000f94:	40022400 	.word	0x40022400
 8000f98:	40013c00 	.word	0x40013c00

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e10f      	b.n	8001202 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f006 f912 	bl	8007220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	; 0x24
 8001000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001014:	f001 ff12 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8001018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a7b      	ldr	r2, [pc, #492]	; (800120c <HAL_I2C_Init+0x23c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d807      	bhi.n	8001034 <HAL_I2C_Init+0x64>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <HAL_I2C_Init+0x240>)
 8001028:	4293      	cmp	r3, r2
 800102a:	bf94      	ite	ls
 800102c:	2301      	movls	r3, #1
 800102e:	2300      	movhi	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	e006      	b.n	8001042 <HAL_I2C_Init+0x72>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4a77      	ldr	r2, [pc, #476]	; (8001214 <HAL_I2C_Init+0x244>)
 8001038:	4293      	cmp	r3, r2
 800103a:	bf94      	ite	ls
 800103c:	2301      	movls	r3, #1
 800103e:	2300      	movhi	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0db      	b.n	8001202 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4a72      	ldr	r2, [pc, #456]	; (8001218 <HAL_I2C_Init+0x248>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9b      	lsrs	r3, r3, #18
 8001054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4a64      	ldr	r2, [pc, #400]	; (800120c <HAL_I2C_Init+0x23c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d802      	bhi.n	8001084 <HAL_I2C_Init+0xb4>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	e009      	b.n	8001098 <HAL_I2C_Init+0xc8>
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	4a63      	ldr	r2, [pc, #396]	; (800121c <HAL_I2C_Init+0x24c>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	099b      	lsrs	r3, r3, #6
 8001096:	3301      	adds	r3, #1
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	430b      	orrs	r3, r1
 800109e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4956      	ldr	r1, [pc, #344]	; (800120c <HAL_I2C_Init+0x23c>)
 80010b4:	428b      	cmp	r3, r1
 80010b6:	d80d      	bhi.n	80010d4 <HAL_I2C_Init+0x104>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1e59      	subs	r1, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c6:	3301      	adds	r3, #1
 80010c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	bf38      	it	cc
 80010d0:	2304      	movcc	r3, #4
 80010d2:	e04f      	b.n	8001174 <HAL_I2C_Init+0x1a4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <HAL_I2C_Init+0x130>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1e58      	subs	r0, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	440b      	add	r3, r1
 80010ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	e012      	b.n	8001126 <HAL_I2C_Init+0x156>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1e58      	subs	r0, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	0099      	lsls	r1, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Init+0x15e>
 800112a:	2301      	movs	r3, #1
 800112c:	e022      	b.n	8001174 <HAL_I2C_Init+0x1a4>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10e      	bne.n	8001154 <HAL_I2C_Init+0x184>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1e58      	subs	r0, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	440b      	add	r3, r1
 8001144:	fbb0 f3f3 	udiv	r3, r0, r3
 8001148:	3301      	adds	r3, #1
 800114a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001152:	e00f      	b.n	8001174 <HAL_I2C_Init+0x1a4>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1e58      	subs	r0, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6859      	ldr	r1, [r3, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	0099      	lsls	r1, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	6809      	ldr	r1, [r1, #0]
 8001178:	4313      	orrs	r3, r2
 800117a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69da      	ldr	r2, [r3, #28]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6911      	ldr	r1, [r2, #16]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68d2      	ldr	r2, [r2, #12]
 80011ae:	4311      	orrs	r1, r2
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2220      	movs	r2, #32
 80011ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	000186a0 	.word	0x000186a0
 8001210:	001e847f 	.word	0x001e847f
 8001214:	003d08ff 	.word	0x003d08ff
 8001218:	431bde83 	.word	0x431bde83
 800121c:	10624dd3 	.word	0x10624dd3

08001220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b20      	cmp	r3, #32
 8001234:	d129      	bne.n	800128a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2224      	movs	r2, #36	; 0x24
 800123a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0210 	bic.w	r2, r2, #16
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800128a:	2302      	movs	r3, #2
  }
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	d12a      	bne.n	8001308 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2224      	movs	r2, #36	; 0x24
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	f023 030f 	bic.w	r3, r3, #15
 80012d8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	89fa      	ldrh	r2, [r7, #14]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2220      	movs	r2, #32
 8001300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	e000      	b.n	800130a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001308:	2302      	movs	r3, #2
  }
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001318:	b08f      	sub	sp, #60	; 0x3c
 800131a:	af0a      	add	r7, sp, #40	; 0x28
 800131c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e10f      	b.n	8001548 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f006 feda 	bl	80080fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 ffed 	bl	8004346 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	687e      	ldr	r6, [r7, #4]
 8001374:	466d      	mov	r5, sp
 8001376:	f106 0410 	add.w	r4, r6, #16
 800137a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001386:	e885 0003 	stmia.w	r5, {r0, r1}
 800138a:	1d33      	adds	r3, r6, #4
 800138c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f002 fec4 	bl	800411c <USB_CoreInit>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2202      	movs	r2, #2
 800139e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0d0      	b.n	8001548 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 ffdb 	bl	8004368 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e04a      	b.n	800144e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	333d      	adds	r3, #61	; 0x3d
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	333c      	adds	r3, #60	; 0x3c
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	b298      	uxth	r0, r3
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3342      	adds	r3, #66	; 0x42
 80013f4:	4602      	mov	r2, r0
 80013f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	333f      	adds	r3, #63	; 0x3f
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3344      	adds	r3, #68	; 0x44
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3348      	adds	r3, #72	; 0x48
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	3350      	adds	r3, #80	; 0x50
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3af      	bcc.n	80013b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e044      	b.n	80014e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3b5      	bcc.n	800145e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	687e      	ldr	r6, [r7, #4]
 80014fa:	466d      	mov	r5, sp
 80014fc:	f106 0410 	add.w	r4, r6, #16
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001508:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001510:	1d33      	adds	r3, r6, #4
 8001512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001514:	6838      	ldr	r0, [r7, #0]
 8001516:	f002 ff51 	bl	80043bc <USB_DevInit>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e00d      	b.n	8001548 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f003 ff46 	bl	80053d2 <USB_DevDisconnect>

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_PCD_Start+0x1c>
 8001568:	2302      	movs	r3, #2
 800156a:	e020      	b.n	80015ae <HAL_PCD_Start+0x5e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	2b01      	cmp	r3, #1
 800157a:	d109      	bne.n	8001590 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001580:	2b01      	cmp	r3, #1
 8001582:	d005      	beq.n	8001590 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 ff04 	bl	80053a2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fec0 	bl	8004324 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015b6:	b590      	push	{r4, r7, lr}
 80015b8:	b08d      	sub	sp, #52	; 0x34
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 ffab 	bl	8005528 <USB_GetMode>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f040 838e 	bne.w	8001cf6 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 ff0f 	bl	8005402 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8384 	beq.w	8001cf4 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 ff06 	bl	8005402 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d107      	bne.n	8001610 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f002 0202 	and.w	r2, r2, #2
 800160e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fef4 	bl	8005402 <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001620:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001624:	d17b      	bne.n	800171e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fefa 	bl	8005428 <USB_ReadDevAllOutEpInterrupt>
 8001634:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001636:	e06f      	b.n	8001718 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d064      	beq.n	800170c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f003 ff1f 	bl	8005490 <USB_ReadDevOutEPInterrupt>
 8001652:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166a:	461a      	mov	r2, r3
 800166c:	2301      	movs	r3, #1
 800166e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fe0e 	bl	8002294 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00c      	beq.n	800169c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 ff0d 	bl	80024a4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001696:	461a      	mov	r2, r3
 8001698:	2308      	movs	r3, #8
 800169a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d008      	beq.n	80016b8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b2:	461a      	mov	r2, r3
 80016b4:	2310      	movs	r3, #16
 80016b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d015      	beq.n	80016ee <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016d4:	461a      	mov	r2, r3
 80016d6:	2101      	movs	r1, #1
 80016d8:	f003 ff6a 	bl	80055b0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e8:	461a      	mov	r2, r3
 80016ea:	2320      	movs	r3, #32
 80016ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001704:	461a      	mov	r2, r3
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	3301      	adds	r3, #1
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	2b00      	cmp	r3, #0
 800171c:	d18c      	bne.n	8001638 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 fe6d 	bl	8005402 <USB_ReadInterrupts>
 8001728:	4603      	mov	r3, r0
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001732:	f040 80c4 	bne.w	80018be <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fe8e 	bl	800545c <USB_ReadDevAllInEpInterrupt>
 8001740:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001746:	e0b6      	b.n	80018b6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80ab 	beq.w	80018aa <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f003 feb4 	bl	80054cc <USB_ReadDevInEPInterrupt>
 8001764:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05b      	beq.n	8001828 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	2201      	movs	r2, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	43db      	mvns	r3, r3
 800178a:	69f9      	ldr	r1, [r7, #28]
 800178c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001790:	4013      	ands	r3, r2
 8001792:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a0:	461a      	mov	r2, r3
 80017a2:	2301      	movs	r3, #1
 80017a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d11b      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3348      	adds	r3, #72	; 0x48
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4403      	add	r3, r0
 80017ce:	3344      	adds	r3, #68	; 0x44
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4419      	add	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4403      	add	r3, r0
 80017e2:	3348      	adds	r3, #72	; 0x48
 80017e4:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	4619      	mov	r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f006 fd14 	bl	800821a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d116      	bne.n	8001828 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d113      	bne.n	8001828 <HAL_PCD_IRQHandler+0x272>
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3350      	adds	r3, #80	; 0x50
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d108      	bne.n	8001828 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001820:	461a      	mov	r2, r3
 8001822:	2101      	movs	r1, #1
 8001824:	f003 fec4 	bl	80055b0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800183e:	461a      	mov	r2, r3
 8001840:	2308      	movs	r3, #8
 8001842:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800185a:	461a      	mov	r2, r3
 800185c:	2310      	movs	r3, #16
 800185e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001876:	461a      	mov	r2, r3
 8001878:	2340      	movs	r3, #64	; 0x40
 800187a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001892:	461a      	mov	r2, r3
 8001894:	2302      	movs	r3, #2
 8001896:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fc67 	bl	8002178 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f af45 	bne.w	8001748 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fd9d 	bl	8005402 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018d2:	d122      	bne.n	800191a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fe89 	bl	8002614 <HAL_PCDEx_LPM_Callback>
 8001902:	e002      	b.n	800190a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f006 fcff 	bl	8008308 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fd6f 	bl	8005402 <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800192e:	d112      	bne.n	8001956 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d102      	bne.n	8001946 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f006 fcbb 	bl	80082bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001954:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fd51 	bl	8005402 <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196a:	f040 80a7 	bne.w	8001abc <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2110      	movs	r1, #16
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fe89 	bl	80046a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198e:	2300      	movs	r3, #0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001992:	e036      	b.n	8001a02 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a0:	461a      	mov	r2, r3
 80019a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b8:	0151      	lsls	r1, r2, #5
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	440a      	add	r2, r1
 80019be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d4:	461a      	mov	r2, r3
 80019d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ec:	0151      	lsls	r1, r2, #5
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	440a      	add	r2, r1
 80019f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fe:	3301      	adds	r3, #1
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3c3      	bcc.n	8001994 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d016      	beq.n	8001a56 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a38:	f043 030b 	orr.w	r3, r3, #11
 8001a3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4e:	f043 030b 	orr.w	r3, r3, #11
 8001a52:	6453      	str	r3, [r2, #68]	; 0x44
 8001a54:	e015      	b.n	8001a82 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a68:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7c:	f043 030b 	orr.w	r3, r3, #11
 8001a80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f003 fd82 	bl	80055b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fc9e 	bl	8005402 <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad0:	d124      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fd34 	bl	8005544 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 fe3e 	bl	8004762 <USB_GetDevSpeed>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681c      	ldr	r4, [r3, #0]
 8001af2:	f001 f997 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8001af6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	4620      	mov	r0, r4
 8001b02:	f002 fb6d 	bl	80041e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f006 fbaf 	bl	800826a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fc6e 	bl	8005402 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d161      	bne.n	8001bf4 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0210 	bic.w	r2, r2, #16
 8001b3e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f003 020f 	and.w	r2, r3, #15
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	0c5b      	lsrs	r3, r3, #17
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d124      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d035      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	6a38      	ldr	r0, [r7, #32]
 8001b8c:	f003 fae6 	bl	800515c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b9c:	441a      	add	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bae:	441a      	add	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	e016      	b.n	8001be4 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	0c5b      	lsrs	r3, r3, #17
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d110      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bc8:	2208      	movs	r2, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6a38      	ldr	r0, [r7, #32]
 8001bce:	f003 fac5 	bl	800515c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bde:	441a      	add	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0210 	orr.w	r2, r2, #16
 8001bf2:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fc02 	bl	8005402 <USB_ReadInterrupts>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d10a      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f006 fb20 	bl	800824e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f002 0208 	and.w	r2, r2, #8
 8001c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fbed 	bl	8005402 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c32:	d10f      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f006 fb82 	bl	8008348 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fbd2 	bl	8005402 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c68:	d10f      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f006 fb55 	bl	8008324 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 fbb7 	bl	8005402 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f006 fb63 	bl	800836c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fba1 	bl	8005402 <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d115      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f006 fb53 	bl	8008388 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	e000      	b.n	8001cf6 <HAL_PCD_IRQHandler+0x740>
      return;
 8001cf4:	bf00      	nop
    }
  }
}
 8001cf6:	3734      	adds	r7, #52	; 0x34
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_SetAddress+0x1a>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e013      	b.n	8001d3e <HAL_PCD_SetAddress+0x42>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fb11 	bl	8005356 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	4608      	mov	r0, r1
 8001d50:	4611      	mov	r1, r2
 8001d52:	461a      	mov	r2, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	70fb      	strb	r3, [r7, #3]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	803b      	strh	r3, [r7, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da0f      	bge.n	8001d8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	3338      	adds	r3, #56	; 0x38
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	705a      	strb	r2, [r3, #1]
 8001d8a:	e00f      	b.n	8001dac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001db8:	883a      	ldrh	r2, [r7, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	78ba      	ldrb	r2, [r7, #2]
 8001dc2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dd6:	78bb      	ldrb	r3, [r7, #2]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d102      	bne.n	8001de2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_EP_Open+0xaa>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e00e      	b.n	8001e0e <HAL_PCD_EP_Open+0xc8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fcd4 	bl	80047ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da0f      	bge.n	8001e4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	3338      	adds	r3, #56	; 0x38
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	705a      	strb	r2, [r3, #1]
 8001e48:	e00f      	b.n	8001e6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	3304      	adds	r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_EP_Close+0x6e>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e00e      	b.n	8001ea2 <HAL_PCD_EP_Close+0x8c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 fd12 	bl	80048bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	f003 020f 	and.w	r2, r3, #15
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eec:	7afb      	ldrb	r3, [r7, #11]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	6979      	ldr	r1, [r7, #20]
 8001f1e:	f002 ff95 	bl	8004e4c <USB_EP0StartXfer>
 8001f22:	e008      	b.n	8001f36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6979      	ldr	r1, [r7, #20]
 8001f32:	f002 fd47 	bl	80049c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 020f 	and.w	r2, r3, #15
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	3338      	adds	r3, #56	; 0x38
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2201      	movs	r2, #1
 8001fae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6979      	ldr	r1, [r7, #20]
 8001fe2:	f002 ff33 	bl	8004e4c <USB_EP0StartXfer>
 8001fe6:	e008      	b.n	8001ffa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	f002 fce5 	bl	80049c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 020f 	and.w	r2, r3, #15
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d901      	bls.n	8002022 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e050      	b.n	80020c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da0f      	bge.n	800204a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3338      	adds	r3, #56	; 0x38
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00d      	b.n	8002066 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_PCD_EP_SetStall+0x82>
 8002082:	2302      	movs	r3, #2
 8002084:	e01e      	b.n	80020c4 <HAL_PCD_EP_SetStall+0xc0>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 f88a 	bl	80051ae <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	b2d9      	uxtb	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020b4:	461a      	mov	r2, r3
 80020b6:	f003 fa7b 	bl	80055b0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d901      	bls.n	80020ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e042      	b.n	8002170 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0f      	bge.n	8002112 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3338      	adds	r3, #56	; 0x38
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00f      	b.n	8002132 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	b2da      	uxtb	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_EP_ClrStall+0x86>
 800214e:	2302      	movs	r3, #2
 8002150:	e00e      	b.n	8002170 <HAL_PCD_EP_ClrStall+0xa4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	4618      	mov	r0, r3
 8002162:	f003 f892 	bl	800528a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3338      	adds	r3, #56	; 0x38
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d901      	bls.n	80021b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e06c      	b.n	800228a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d902      	bls.n	80021cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	3303      	adds	r3, #3
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d4:	e02b      	b.n	800222e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d902      	bls.n	80021f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3303      	adds	r3, #3
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800220a:	b2db      	uxtb	r3, r3
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4603      	mov	r3, r0
 8002210:	6978      	ldr	r0, [r7, #20]
 8002212:	f002 ff6e 	bl	80050f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	441a      	add	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	441a      	add	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	b29b      	uxth	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	429a      	cmp	r2, r3
 8002242:	d809      	bhi.n	8002258 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800224c:	429a      	cmp	r2, r3
 800224e:	d203      	bcs.n	8002258 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1be      	bne.n	80021d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	d811      	bhi.n	8002288 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	43db      	mvns	r3, r3
 800227e:	6939      	ldr	r1, [r7, #16]
 8002280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002284:	4013      	ands	r3, r2
 8002286:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	333c      	adds	r3, #60	; 0x3c
 80022ac:	3304      	adds	r3, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f040 80b3 	bne.w	8002432 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d028      	beq.n	8002328 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a70      	ldr	r2, [pc, #448]	; (800249c <PCD_EP_OutXfrComplete_int+0x208>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d90e      	bls.n	80022fc <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f4:	461a      	mov	r2, r3
 80022f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f005 ff5f 	bl	80081c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800230c:	461a      	mov	r2, r3
 800230e:	2101      	movs	r1, #1
 8002310:	f003 f94e 	bl	80055b0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2308      	movs	r3, #8
 8002324:	6093      	str	r3, [r2, #8]
 8002326:	e0b3      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233e:	461a      	mov	r2, r3
 8002340:	2320      	movs	r3, #32
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e0a4      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 809f 	bne.w	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a51      	ldr	r2, [pc, #324]	; (800249c <PCD_EP_OutXfrComplete_int+0x208>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d90f      	bls.n	800237a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002376:	6093      	str	r3, [r2, #8]
 8002378:	e08a      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800238c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	0159      	lsls	r1, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	440b      	add	r3, r1
 8002396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80023a0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4403      	add	r3, r0
 80023b0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023b4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4403      	add	r3, r0
 80023d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4419      	add	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4403      	add	r3, r0
 80023ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f005 fef2 	bl	80081e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d144      	bne.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d138      	bne.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002428:	461a      	mov	r2, r3
 800242a:	2101      	movs	r1, #1
 800242c:	f003 f8c0 	bl	80055b0 <USB_EP0_OutStart>
 8002430:	e02e      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d124      	bne.n	8002484 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	e01a      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	2320      	movs	r3, #32
 8002474:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f005 feb1 	bl	80081e4 <HAL_PCD_DataOutStageCallback>
 8002482:	e005      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f005 feaa 	bl	80081e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	4f54300a 	.word	0x4f54300a
 80024a0:	4f54310a 	.word	0x4f54310a

080024a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	333c      	adds	r3, #60	; 0x3c
 80024bc:	3304      	adds	r3, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d113      	bne.n	8002502 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <PCD_EP_OutSetupPacket_int+0xb8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d922      	bls.n	8002528 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01d      	beq.n	8002528 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f8:	461a      	mov	r2, r3
 80024fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fe:	6093      	str	r3, [r2, #8]
 8002500:	e012      	b.n	8002528 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10e      	bne.n	8002528 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f005 fe49 	bl	80081c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <PCD_EP_OutSetupPacket_int+0xb8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d90c      	bls.n	8002550 <PCD_EP_OutSetupPacket_int+0xac>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002548:	461a      	mov	r2, r3
 800254a:	2101      	movs	r1, #1
 800254c:	f003 f830 	bl	80055b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	4f54300a 	.word	0x4f54300a
 8002560:	4f54310a 	.word	0x4f54310a

08002564 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
 8002570:	4613      	mov	r3, r2
 8002572:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002582:	883b      	ldrh	r3, [r7, #0]
 8002584:	0419      	lsls	r1, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	430a      	orrs	r2, r1
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
 8002590:	e028      	b.n	80025e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4413      	add	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e00d      	b.n	80025c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3340      	adds	r3, #64	; 0x40
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4413      	add	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	3301      	adds	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3ec      	bcc.n	80025a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025cc:	883b      	ldrh	r3, [r7, #0]
 80025ce:	0418      	lsls	r0, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	4302      	orrs	r2, r0
 80025dc:	3340      	adds	r3, #64	; 0x40
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e22d      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d075      	beq.n	8002736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	4ba3      	ldr	r3, [pc, #652]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d00c      	beq.n	8002670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4ba0      	ldr	r3, [pc, #640]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265e:	2b08      	cmp	r3, #8
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002662:	4b9d      	ldr	r3, [pc, #628]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266e:	d10b      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	4b99      	ldr	r3, [pc, #612]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05b      	beq.n	8002734 <HAL_RCC_OscConfig+0x108>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d157      	bne.n	8002734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e208      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x74>
 8002692:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a90      	ldr	r2, [pc, #576]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x98>
 80026aa:	4b8b      	ldr	r3, [pc, #556]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a8a      	ldr	r2, [pc, #552]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b88      	ldr	r3, [pc, #544]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a87      	ldr	r2, [pc, #540]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026c4:	4b84      	ldr	r3, [pc, #528]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a83      	ldr	r2, [pc, #524]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b81      	ldr	r3, [pc, #516]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a80      	ldr	r2, [pc, #512]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe f970 	bl	80009c8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe f96c 	bl	80009c8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1cd      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0xc0>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe f95c 	bl	80009c8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe f958 	bl	80009c8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1b9      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0xe8>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d063      	beq.n	800280a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b62      	ldr	r3, [pc, #392]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e18d      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4952      	ldr	r1, [pc, #328]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_OscConfig+0x2b0>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe f911 	bl	80009c8 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe f90d 	bl	80009c8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e16e      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4940      	ldr	r1, [pc, #256]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0x2b0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe f8f0 	bl	80009c8 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f7fe f8ec 	bl	80009c8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e14d      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d030      	beq.n	8002878 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x2b4>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe f8d0 	bl	80009c8 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe f8cc 	bl	80009c8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e12d      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x200>
 800284a:	e015      	b.n	8002878 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_OscConfig+0x2b4>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe f8b9 	bl	80009c8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe f8b5 	bl	80009c8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e116      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a0 	beq.w	80029c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_OscConfig+0x2b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d121      	bne.n	8002906 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCC_OscConfig+0x2b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_RCC_OscConfig+0x2b8>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7fe f87b 	bl	80009c8 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	e011      	b.n	80028fa <HAL_RCC_OscConfig+0x2ce>
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	42470000 	.word	0x42470000
 80028e0:	42470e80 	.word	0x42470e80
 80028e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe f86e 	bl	80009c8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0cf      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x2f0>
 800290e:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	e01c      	b.n	8002956 <HAL_RCC_OscConfig+0x32a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d10c      	bne.n	800293e <HAL_RCC_OscConfig+0x312>
 8002924:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a5c      	ldr	r2, [pc, #368]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0x32a>
 800293e:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a59      	ldr	r2, [pc, #356]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a56      	ldr	r2, [pc, #344]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe f833 	bl	80009c8 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe f82f 	bl	80009c8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e08e      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ee      	beq.n	8002966 <HAL_RCC_OscConfig+0x33a>
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe f81d 	bl	80009c8 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe f819 	bl	80009c8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e078      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d064      	beq.n	8002a98 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d05c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d141      	bne.n	8002a66 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_RCC_OscConfig+0x480>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fd ffee 	bl	80009c8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fd ffea 	bl	80009c8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e04b      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	019b      	lsls	r3, r3, #6
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	3b01      	subs	r3, #1
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	491d      	ldr	r1, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_RCC_OscConfig+0x480>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7fd ffc3 	bl	80009c8 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fd ffbf 	bl	80009c8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e020      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x41a>
 8002a64:	e018      	b.n	8002a98 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_OscConfig+0x480>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fd ffac 	bl	80009c8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fd ffa8 	bl	80009c8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_RCC_OscConfig+0x47c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x448>
 8002a92:	e001      	b.n	8002a98 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470060 	.word	0x42470060

08002ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0ca      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d90c      	bls.n	8002aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCC_ClockConfig+0x1b4>)
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_ClockConfig+0x1b4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0b6      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b04:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a57      	ldr	r2, [pc, #348]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	494c      	ldr	r1, [pc, #304]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d044      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d119      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e07d      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06d      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e065      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4933      	ldr	r1, [pc, #204]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fd ff12 	bl	80009c8 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fd ff0e 	bl	80009c8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e04d      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d20c      	bcs.n	8002bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_RCC_ClockConfig+0x1b4>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <HAL_RCC_ClockConfig+0x1b4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e030      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4915      	ldr	r1, [pc, #84]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	490d      	ldr	r1, [pc, #52]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c36:	f000 f81d 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fd fe74 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	080093f4 	.word	0x080093f4
 8002c70:	20000118 	.word	0x20000118

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d007      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x32>
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d008      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x38>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 80b4 	bne.w	8002e08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ca2:	60bb      	str	r3, [r7, #8]
       break;
 8002ca4:	e0b3      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ca8:	60bb      	str	r3, [r7, #8]
      break;
 8002caa:	e0b0      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cac:	4b5a      	ldr	r3, [pc, #360]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb6:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04a      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc2:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	ea03 0501 	and.w	r5, r3, r1
 8002cd8:	ea04 0602 	and.w	r6, r4, r2
 8002cdc:	4629      	mov	r1, r5
 8002cde:	4632      	mov	r2, r6
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	0154      	lsls	r4, r2, #5
 8002cea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cee:	014b      	lsls	r3, r1, #5
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	1b49      	subs	r1, r1, r5
 8002cf6:	eb62 0206 	sbc.w	r2, r2, r6
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	f04f 0400 	mov.w	r4, #0
 8002d02:	0194      	lsls	r4, r2, #6
 8002d04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d08:	018b      	lsls	r3, r1, #6
 8002d0a:	1a5b      	subs	r3, r3, r1
 8002d0c:	eb64 0402 	sbc.w	r4, r4, r2
 8002d10:	f04f 0100 	mov.w	r1, #0
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	00e2      	lsls	r2, r4, #3
 8002d1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d1e:	00d9      	lsls	r1, r3, #3
 8002d20:	460b      	mov	r3, r1
 8002d22:	4614      	mov	r4, r2
 8002d24:	195b      	adds	r3, r3, r5
 8002d26:	eb44 0406 	adc.w	r4, r4, r6
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	0262      	lsls	r2, r4, #9
 8002d34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d38:	0259      	lsls	r1, r3, #9
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	4621      	mov	r1, r4
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f04f 0400 	mov.w	r4, #0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	f7fd fa4e 	bl	80001ec <__aeabi_uldivmod>
 8002d50:	4603      	mov	r3, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e049      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	f04f 0400 	mov.w	r4, #0
 8002d62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	ea03 0501 	and.w	r5, r3, r1
 8002d6e:	ea04 0602 	and.w	r6, r4, r2
 8002d72:	4629      	mov	r1, r5
 8002d74:	4632      	mov	r2, r6
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	f04f 0400 	mov.w	r4, #0
 8002d7e:	0154      	lsls	r4, r2, #5
 8002d80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d84:	014b      	lsls	r3, r1, #5
 8002d86:	4619      	mov	r1, r3
 8002d88:	4622      	mov	r2, r4
 8002d8a:	1b49      	subs	r1, r1, r5
 8002d8c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	f04f 0400 	mov.w	r4, #0
 8002d98:	0194      	lsls	r4, r2, #6
 8002d9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d9e:	018b      	lsls	r3, r1, #6
 8002da0:	1a5b      	subs	r3, r3, r1
 8002da2:	eb64 0402 	sbc.w	r4, r4, r2
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	00e2      	lsls	r2, r4, #3
 8002db0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002db4:	00d9      	lsls	r1, r3, #3
 8002db6:	460b      	mov	r3, r1
 8002db8:	4614      	mov	r4, r2
 8002dba:	195b      	adds	r3, r3, r5
 8002dbc:	eb44 0406 	adc.w	r4, r4, r6
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	02a2      	lsls	r2, r4, #10
 8002dca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dce:	0299      	lsls	r1, r3, #10
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4614      	mov	r4, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f04f 0400 	mov.w	r4, #0
 8002dde:	461a      	mov	r2, r3
 8002de0:	4623      	mov	r3, r4
 8002de2:	f7fd fa03 	bl	80001ec <__aeabi_uldivmod>
 8002de6:	4603      	mov	r3, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	60bb      	str	r3, [r7, #8]
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e0a:	60bb      	str	r3, [r7, #8]
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	007a1200 	.word	0x007a1200

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000118 	.word	0x20000118

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4601      	mov	r1, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08009404 	.word	0x08009404

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffdc 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08009404 	.word	0x08009404

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e01d      	b.n	8002eda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f004 ff58 	bl	8007d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 fafc 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e01d      	b.n	8002f30 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f004 ff0b 	bl	8007d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f000 fad1 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e01d      	b.n	8002f86 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f004 fe46 	bl	8007bf0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f000 faa6 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d122      	bne.n	8002fea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d11b      	bne.n	8002fea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0202 	mvn.w	r2, #2
 8002fba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fa5b 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 8002fd6:	e005      	b.n	8002fe4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fa4d 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa5e 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d122      	bne.n	800303e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d11b      	bne.n	800303e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0204 	mvn.w	r2, #4
 800300e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa31 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 800302a:	e005      	b.n	8003038 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fa23 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa34 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d122      	bne.n	8003092 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d11b      	bne.n	8003092 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0208 	mvn.w	r2, #8
 8003062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2204      	movs	r2, #4
 8003068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fa07 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 800307e:	e005      	b.n	800308c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f9f9 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa0a 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d122      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d11b      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0210 	mvn.w	r2, #16
 80030b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2208      	movs	r2, #8
 80030bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f9dd 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 80030d2:	e005      	b.n	80030e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f9cf 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9e0 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10e      	bne.n	8003112 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d107      	bne.n	8003112 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0201 	mvn.w	r2, #1
 800310a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f9a9 	bl	8003464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d10e      	bne.n	800313e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d107      	bne.n	800313e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fd8e 	bl	8003c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d10e      	bne.n	800316a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f9a5 	bl	80034b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d10e      	bne.n	8003196 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b20      	cmp	r3, #32
 8003184:	d107      	bne.n	8003196 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0220 	mvn.w	r2, #32
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fd58 	bl	8003c46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e08a      	b.n	80032ce <HAL_TIM_IC_ConfigChannel+0x130>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11b      	bne.n	8003206 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f000 fbc3 	bl	8003968 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 020c 	bic.w	r2, r2, #12
 80031f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6999      	ldr	r1, [r3, #24]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	e05a      	b.n	80032bc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11c      	bne.n	8003246 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f000 fc18 	bl	8003a50 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800322e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6999      	ldr	r1, [r3, #24]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	021a      	lsls	r2, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	619a      	str	r2, [r3, #24]
 8003244:	e03a      	b.n	80032bc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d11b      	bne.n	8003284 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f000 fc35 	bl	8003aca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 020c 	bic.w	r2, r2, #12
 800326e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69d9      	ldr	r1, [r3, #28]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	61da      	str	r2, [r3, #28]
 8003282:	e01b      	b.n	80032bc <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f000 fc55 	bl	8003b42 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69d9      	ldr	r1, [r3, #28]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	021a      	lsls	r2, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e0b4      	b.n	800345c <HAL_TIM_PWM_ConfigChannel+0x184>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	f200 809f 	bhi.w	8003448 <HAL_TIM_PWM_ConfigChannel+0x170>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003345 	.word	0x08003345
 8003314:	08003449 	.word	0x08003449
 8003318:	08003449 	.word	0x08003449
 800331c:	08003449 	.word	0x08003449
 8003320:	08003385 	.word	0x08003385
 8003324:	08003449 	.word	0x08003449
 8003328:	08003449 	.word	0x08003449
 800332c:	08003449 	.word	0x08003449
 8003330:	080033c7 	.word	0x080033c7
 8003334:	08003449 	.word	0x08003449
 8003338:	08003449 	.word	0x08003449
 800333c:	08003449 	.word	0x08003449
 8003340:	08003407 	.word	0x08003407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f95c 	bl	8003608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0208 	orr.w	r2, r2, #8
 800335e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6999      	ldr	r1, [r3, #24]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	619a      	str	r2, [r3, #24]
      break;
 8003382:	e062      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f9ac 	bl	80036e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800339e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6999      	ldr	r1, [r3, #24]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	021a      	lsls	r2, r3, #8
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]
      break;
 80033c4:	e041      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa01 	bl	80037d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0208 	orr.w	r2, r2, #8
 80033e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0204 	bic.w	r2, r2, #4
 80033f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69d9      	ldr	r1, [r3, #28]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	61da      	str	r2, [r3, #28]
      break;
 8003404:	e021      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fa55 	bl	80038bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69d9      	ldr	r1, [r3, #28]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	021a      	lsls	r2, r3, #8
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	61da      	str	r2, [r3, #28]
      break;
 8003446:	e000      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003448:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a40      	ldr	r2, [pc, #256]	; (80035dc <TIM_Base_SetConfig+0x114>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d00f      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <TIM_Base_SetConfig+0x118>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <TIM_Base_SetConfig+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <TIM_Base_SetConfig+0x120>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <TIM_Base_SetConfig+0x124>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <TIM_Base_SetConfig+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d027      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <TIM_Base_SetConfig+0x118>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d023      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2b      	ldr	r2, [pc, #172]	; (80035e4 <TIM_Base_SetConfig+0x11c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01f      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <TIM_Base_SetConfig+0x120>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <TIM_Base_SetConfig+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d017      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <TIM_Base_SetConfig+0x128>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <TIM_Base_SetConfig+0x12c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00f      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <TIM_Base_SetConfig+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <TIM_Base_SetConfig+0x134>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <TIM_Base_SetConfig+0x138>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a23      	ldr	r2, [pc, #140]	; (8003604 <TIM_Base_SetConfig+0x13c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <TIM_Base_SetConfig+0x114>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0xf8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <TIM_Base_SetConfig+0x124>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40010400 	.word	0x40010400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800
 80035fc:	40001800 	.word	0x40001800
 8003600:	40001c00 	.word	0x40001c00
 8003604:	40002000 	.word	0x40002000

08003608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f023 0201 	bic.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 0302 	bic.w	r3, r3, #2
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a20      	ldr	r2, [pc, #128]	; (80036e0 <TIM_OC1_SetConfig+0xd8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC1_SetConfig+0x64>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <TIM_OC1_SetConfig+0xdc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10c      	bne.n	8003686 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0308 	bic.w	r3, r3, #8
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <TIM_OC1_SetConfig+0xd8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_OC1_SetConfig+0x8e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <TIM_OC1_SetConfig+0xdc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d111      	bne.n	80036ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40010000 	.word	0x40010000
 80036e4:	40010400 	.word	0x40010400

080036e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0210 	bic.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0320 	bic.w	r3, r3, #32
 8003732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <TIM_OC2_SetConfig+0xe4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d003      	beq.n	8003750 <TIM_OC2_SetConfig+0x68>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <TIM_OC2_SetConfig+0xe8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d10d      	bne.n	800376c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <TIM_OC2_SetConfig+0xe4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_OC2_SetConfig+0x94>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <TIM_OC2_SetConfig+0xe8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d113      	bne.n	80037a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800378a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40010400 	.word	0x40010400

080037d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800381c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <TIM_OC3_SetConfig+0xe0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_OC3_SetConfig+0x66>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <TIM_OC3_SetConfig+0xe4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10d      	bne.n	8003856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <TIM_OC3_SetConfig+0xe0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_OC3_SetConfig+0x92>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <TIM_OC3_SetConfig+0xe4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d113      	bne.n	800388e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800386c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	621a      	str	r2, [r3, #32]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40010000 	.word	0x40010000
 80038b8:	40010400 	.word	0x40010400

080038bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <TIM_OC4_SetConfig+0xa4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_OC4_SetConfig+0x68>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a11      	ldr	r2, [pc, #68]	; (8003964 <TIM_OC4_SetConfig+0xa8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d109      	bne.n	8003938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40010400 	.word	0x40010400

08003968 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0201 	bic.w	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <TIM_TI1_SetConfig+0xcc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01b      	beq.n	80039ce <TIM_TI1_SetConfig+0x66>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399c:	d017      	beq.n	80039ce <TIM_TI1_SetConfig+0x66>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a25      	ldr	r2, [pc, #148]	; (8003a38 <TIM_TI1_SetConfig+0xd0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_TI1_SetConfig+0x66>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <TIM_TI1_SetConfig+0xd4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_TI1_SetConfig+0x66>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <TIM_TI1_SetConfig+0xd8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_TI1_SetConfig+0x66>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <TIM_TI1_SetConfig+0xdc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_TI1_SetConfig+0x66>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <TIM_TI1_SetConfig+0xe0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_TI1_SetConfig+0x66>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <TIM_TI1_SetConfig+0xe4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <TIM_TI1_SetConfig+0x6a>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <TIM_TI1_SetConfig+0x6c>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e003      	b.n	80039f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f023 030a 	bic.w	r3, r3, #10
 8003a0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 030a 	and.w	r3, r3, #10
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40010400 	.word	0x40010400
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40001800 	.word	0x40001800

08003a50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0210 	bic.w	r2, r3, #16
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	031b      	lsls	r3, r3, #12
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	031b      	lsls	r3, r3, #12
 8003b9a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e032      	b.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e03f      	b.n	8003d00 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f004 f8f3 	bl	8007e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2224      	movs	r2, #36	; 0x24
 8003c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f828 	bl	8003d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d48:	f023 030c 	bic.w	r3, r3, #12
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	430b      	orrs	r3, r1
 8003d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	f040 80e4 	bne.w	8003f40 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4aab      	ldr	r2, [pc, #684]	; (800402c <UART_SetConfig+0x324>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <UART_SetConfig+0x84>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4aaa      	ldr	r2, [pc, #680]	; (8004030 <UART_SetConfig+0x328>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d16c      	bne.n	8003e66 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003d8c:	f7ff f86a 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009a      	lsls	r2, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	4aa3      	ldr	r2, [pc, #652]	; (8004034 <UART_SetConfig+0x32c>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	011c      	lsls	r4, r3, #4
 8003db0:	f7ff f858 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009a      	lsls	r2, r3, #2
 8003dbe:	441a      	add	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fbb2 f5f3 	udiv	r5, r2, r3
 8003dca:	f7ff f84b 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009a      	lsls	r2, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	4a93      	ldr	r2, [pc, #588]	; (8004034 <UART_SetConfig+0x32c>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2264      	movs	r2, #100	; 0x64
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	1aeb      	subs	r3, r5, r3
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	3332      	adds	r3, #50	; 0x32
 8003df8:	4a8e      	ldr	r2, [pc, #568]	; (8004034 <UART_SetConfig+0x32c>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e06:	441c      	add	r4, r3
 8003e08:	f7ff f82c 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009a      	lsls	r2, r3, #2
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e22:	f7ff f81f 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009a      	lsls	r2, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	4a7d      	ldr	r2, [pc, #500]	; (8004034 <UART_SetConfig+0x32c>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2264      	movs	r2, #100	; 0x64
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	1aeb      	subs	r3, r5, r3
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a78      	ldr	r2, [pc, #480]	; (8004034 <UART_SetConfig+0x32c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 0207 	and.w	r2, r3, #7
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4422      	add	r2, r4
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	e154      	b.n	8004110 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e66:	f7fe ffe9 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009a      	lsls	r2, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	4a6c      	ldr	r2, [pc, #432]	; (8004034 <UART_SetConfig+0x32c>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011c      	lsls	r4, r3, #4
 8003e8a:	f7fe ffd7 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009a      	lsls	r2, r3, #2
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ea4:	f7fe ffca 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	009a      	lsls	r2, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	4a5d      	ldr	r2, [pc, #372]	; (8004034 <UART_SetConfig+0x32c>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	2264      	movs	r2, #100	; 0x64
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	1aeb      	subs	r3, r5, r3
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	3332      	adds	r3, #50	; 0x32
 8003ed2:	4a58      	ldr	r2, [pc, #352]	; (8004034 <UART_SetConfig+0x32c>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ee0:	441c      	add	r4, r3
 8003ee2:	f7fe ffab 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009a      	lsls	r2, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003efc:	f7fe ff9e 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	4a47      	ldr	r2, [pc, #284]	; (8004034 <UART_SetConfig+0x32c>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	2264      	movs	r2, #100	; 0x64
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	1aeb      	subs	r3, r5, r3
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	3332      	adds	r3, #50	; 0x32
 8003f2a:	4a42      	ldr	r2, [pc, #264]	; (8004034 <UART_SetConfig+0x32c>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0207 	and.w	r2, r3, #7
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4422      	add	r2, r4
 8003f3c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f3e:	e0e7      	b.n	8004110 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a39      	ldr	r2, [pc, #228]	; (800402c <UART_SetConfig+0x324>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <UART_SetConfig+0x24c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a38      	ldr	r2, [pc, #224]	; (8004030 <UART_SetConfig+0x328>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d171      	bne.n	8004038 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f54:	f7fe ff86 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	4a31      	ldr	r2, [pc, #196]	; (8004034 <UART_SetConfig+0x32c>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	011c      	lsls	r4, r3, #4
 8003f78:	f7fe ff74 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009a      	lsls	r2, r3, #2
 8003f86:	441a      	add	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f92:	f7fe ff67 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	4a21      	ldr	r2, [pc, #132]	; (8004034 <UART_SetConfig+0x32c>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2264      	movs	r2, #100	; 0x64
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	1aeb      	subs	r3, r5, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <UART_SetConfig+0x32c>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fcc:	441c      	add	r4, r3
 8003fce:	f7fe ff49 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009a      	lsls	r2, r3, #2
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fe8:	f7fe ff3c 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003fec:	4602      	mov	r2, r0
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009a      	lsls	r2, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <UART_SetConfig+0x32c>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2264      	movs	r2, #100	; 0x64
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	1aeb      	subs	r3, r5, r3
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a07      	ldr	r2, [pc, #28]	; (8004034 <UART_SetConfig+0x32c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4422      	add	r2, r4
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	e071      	b.n	8004110 <UART_SetConfig+0x408>
 800402c:	40011000 	.word	0x40011000
 8004030:	40011400 	.word	0x40011400
 8004034:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004038:	f7fe ff00 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 800403c:	4602      	mov	r2, r0
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4a31      	ldr	r2, [pc, #196]	; (8004118 <UART_SetConfig+0x410>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	011c      	lsls	r4, r3, #4
 800405c:	f7fe feee 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8004060:	4602      	mov	r2, r0
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009a      	lsls	r2, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	fbb2 f5f3 	udiv	r5, r2, r3
 8004076:	f7fe fee1 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 800407a:	4602      	mov	r2, r0
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	009a      	lsls	r2, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	4a21      	ldr	r2, [pc, #132]	; (8004118 <UART_SetConfig+0x410>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2264      	movs	r2, #100	; 0x64
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	1aeb      	subs	r3, r5, r3
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	3332      	adds	r3, #50	; 0x32
 80040a4:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <UART_SetConfig+0x410>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b0:	441c      	add	r4, r3
 80040b2:	f7fe fec3 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 80040b6:	4602      	mov	r2, r0
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009a      	lsls	r2, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80040cc:	f7fe feb6 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009a      	lsls	r2, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <UART_SetConfig+0x410>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	2264      	movs	r2, #100	; 0x64
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	1aeb      	subs	r3, r5, r3
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	3332      	adds	r3, #50	; 0x32
 80040fa:	4a07      	ldr	r2, [pc, #28]	; (8004118 <UART_SetConfig+0x410>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	f003 020f 	and.w	r2, r3, #15
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4422      	add	r2, r4
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	e7ff      	b.n	8004110 <UART_SetConfig+0x408>
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bdb0      	pop	{r4, r5, r7, pc}
 8004118:	51eb851f 	.word	0x51eb851f

0800411c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800411c:	b084      	sub	sp, #16
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	f107 001c 	add.w	r0, r7, #28
 800412a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	2b01      	cmp	r3, #1
 8004132:	d122      	bne.n	800417a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 fa7c 	bl	800566c <USB_CoreReset>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e01a      	b.n	80041b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f001 fa70 	bl	800566c <USB_CoreReset>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
 80041a2:	e005      	b.n	80041b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d10b      	bne.n	80041ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f043 0206 	orr.w	r2, r3, #6
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041da:	b004      	add	sp, #16
 80041dc:	4770      	bx	lr
	...

080041e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d165      	bne.n	80042c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a41      	ldr	r2, [pc, #260]	; (80042fc <USB_SetTurnaroundTime+0x11c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d906      	bls.n	800420a <USB_SetTurnaroundTime+0x2a>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4a40      	ldr	r2, [pc, #256]	; (8004300 <USB_SetTurnaroundTime+0x120>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d802      	bhi.n	800420a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004204:	230f      	movs	r3, #15
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e062      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <USB_SetTurnaroundTime+0x120>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d906      	bls.n	8004220 <USB_SetTurnaroundTime+0x40>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <USB_SetTurnaroundTime+0x124>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d802      	bhi.n	8004220 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800421a:	230e      	movs	r3, #14
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e057      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a38      	ldr	r2, [pc, #224]	; (8004304 <USB_SetTurnaroundTime+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d906      	bls.n	8004236 <USB_SetTurnaroundTime+0x56>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4a37      	ldr	r2, [pc, #220]	; (8004308 <USB_SetTurnaroundTime+0x128>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d802      	bhi.n	8004236 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004230:	230d      	movs	r3, #13
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e04c      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4a33      	ldr	r2, [pc, #204]	; (8004308 <USB_SetTurnaroundTime+0x128>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d906      	bls.n	800424c <USB_SetTurnaroundTime+0x6c>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4a32      	ldr	r2, [pc, #200]	; (800430c <USB_SetTurnaroundTime+0x12c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d802      	bhi.n	800424c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004246:	230c      	movs	r3, #12
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e041      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4a2f      	ldr	r2, [pc, #188]	; (800430c <USB_SetTurnaroundTime+0x12c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d906      	bls.n	8004262 <USB_SetTurnaroundTime+0x82>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4a2e      	ldr	r2, [pc, #184]	; (8004310 <USB_SetTurnaroundTime+0x130>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d802      	bhi.n	8004262 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800425c:	230b      	movs	r3, #11
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e036      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <USB_SetTurnaroundTime+0x130>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d906      	bls.n	8004278 <USB_SetTurnaroundTime+0x98>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4a29      	ldr	r2, [pc, #164]	; (8004314 <USB_SetTurnaroundTime+0x134>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d802      	bhi.n	8004278 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004272:	230a      	movs	r3, #10
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e02b      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4a26      	ldr	r2, [pc, #152]	; (8004314 <USB_SetTurnaroundTime+0x134>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d906      	bls.n	800428e <USB_SetTurnaroundTime+0xae>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4a25      	ldr	r2, [pc, #148]	; (8004318 <USB_SetTurnaroundTime+0x138>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d802      	bhi.n	800428e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004288:	2309      	movs	r3, #9
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e020      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4a21      	ldr	r2, [pc, #132]	; (8004318 <USB_SetTurnaroundTime+0x138>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d906      	bls.n	80042a4 <USB_SetTurnaroundTime+0xc4>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4a20      	ldr	r2, [pc, #128]	; (800431c <USB_SetTurnaroundTime+0x13c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d802      	bhi.n	80042a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800429e:	2308      	movs	r3, #8
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e015      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a1d      	ldr	r2, [pc, #116]	; (800431c <USB_SetTurnaroundTime+0x13c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d906      	bls.n	80042ba <USB_SetTurnaroundTime+0xda>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <USB_SetTurnaroundTime+0x140>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d802      	bhi.n	80042ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042b4:	2307      	movs	r3, #7
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e00a      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042ba:	2306      	movs	r3, #6
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e007      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042c6:	2309      	movs	r3, #9
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e001      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042cc:	2309      	movs	r3, #9
 80042ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	00d8acbf 	.word	0x00d8acbf
 8004300:	00e4e1bf 	.word	0x00e4e1bf
 8004304:	00f423ff 	.word	0x00f423ff
 8004308:	0106737f 	.word	0x0106737f
 800430c:	011a499f 	.word	0x011a499f
 8004310:	01312cff 	.word	0x01312cff
 8004314:	014ca43f 	.word	0x014ca43f
 8004318:	016e35ff 	.word	0x016e35ff
 800431c:	01a6ab1f 	.word	0x01a6ab1f
 8004320:	01e847ff 	.word	0x01e847ff

08004324 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d106      	bne.n	8004394 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	e00b      	b.n	80043ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60da      	str	r2, [r3, #12]
 80043a6:	e001      	b.n	80043ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e003      	b.n	80043b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80043ac:	2032      	movs	r0, #50	; 0x32
 80043ae:	f7fc fb17 	bl	80009e0 <HAL_Delay>

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043bc:	b084      	sub	sp, #16
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	e009      	b.n	80043f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3340      	adds	r3, #64	; 0x40
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	2200      	movs	r2, #0
 80043e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	3301      	adds	r3, #1
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b0e      	cmp	r3, #14
 80043f4:	d9f2      	bls.n	80043dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d112      	bne.n	8004422 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
 8004420:	e00b      	b.n	800443a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004440:	461a      	mov	r2, r3
 8004442:	2300      	movs	r3, #0
 8004444:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	4619      	mov	r1, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	461a      	mov	r2, r3
 8004456:	680b      	ldr	r3, [r1, #0]
 8004458:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	2b01      	cmp	r3, #1
 800445e:	d10c      	bne.n	800447a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004466:	2100      	movs	r1, #0
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f961 	bl	8004730 <USB_SetDevSpeed>
 800446e:	e008      	b.n	8004482 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004470:	2101      	movs	r1, #1
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f95c 	bl	8004730 <USB_SetDevSpeed>
 8004478:	e003      	b.n	8004482 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800447a:	2103      	movs	r1, #3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f957 	bl	8004730 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004482:	2110      	movs	r1, #16
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f90b 	bl	80046a0 <USB_FlushTxFifo>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f929 	bl	80046ec <USB_FlushRxFifo>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	461a      	mov	r2, r3
 80044ac:	2300      	movs	r3, #0
 80044ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	461a      	mov	r2, r3
 80044b8:	2300      	movs	r3, #0
 80044ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	461a      	mov	r2, r3
 80044c4:	2300      	movs	r3, #0
 80044c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	e043      	b.n	8004556 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e4:	d118      	bne.n	8004518 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f8:	461a      	mov	r2, r3
 80044fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e013      	b.n	800452a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450e:	461a      	mov	r2, r3
 8004510:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e008      	b.n	800452a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	461a      	mov	r2, r3
 8004526:	2300      	movs	r3, #0
 8004528:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004548:	461a      	mov	r2, r3
 800454a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800454e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3301      	adds	r3, #1
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	429a      	cmp	r2, r3
 800455c:	d3b7      	bcc.n	80044ce <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e043      	b.n	80045ec <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800457a:	d118      	bne.n	80045ae <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458e:	461a      	mov	r2, r3
 8004590:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e013      	b.n	80045c0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a4:	461a      	mov	r2, r3
 80045a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e008      	b.n	80045c0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	461a      	mov	r2, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045de:	461a      	mov	r2, r3
 80045e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3301      	adds	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d3b7      	bcc.n	8004564 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004606:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	2b01      	cmp	r3, #1
 800460c:	d111      	bne.n	8004632 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004614:	461a      	mov	r2, r3
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <USB_DevInit+0x2dc>)
 8004618:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462c:	f043 0303 	orr.w	r3, r3, #3
 8004630:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800463e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f043 0210 	orr.w	r2, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <USB_DevInit+0x2e0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800465e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f043 0208 	orr.w	r2, r3, #8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d107      	bne.n	8004686 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467e:	f043 0304 	orr.w	r3, r3, #4
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004692:	b004      	add	sp, #16
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	00800100 	.word	0x00800100
 800469c:	803c3800 	.word	0x803c3800

080046a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	f043 0220 	orr.w	r2, r3, #32
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3301      	adds	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <USB_FlushTxFifo+0x48>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e006      	b.n	80046da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d0f0      	beq.n	80046ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	00030d40 	.word	0x00030d40

080046ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2210      	movs	r2, #16
 80046fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3301      	adds	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <USB_FlushRxFifo+0x40>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e006      	b.n	800471e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b10      	cmp	r3, #16
 800471a:	d0f0      	beq.n	80046fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	00030d40 	.word	0x00030d40

08004730 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004762:	b480      	push	{r7}
 8004764:	b087      	sub	sp, #28
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0306 	and.w	r3, r3, #6
 800477a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]
 8004786:	e00a      	b.n	800479e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d002      	beq.n	8004794 <USB_GetDevSpeed+0x32>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b06      	cmp	r3, #6
 8004792:	d102      	bne.n	800479a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004794:	2302      	movs	r3, #2
 8004796:	75fb      	strb	r3, [r7, #23]
 8004798:	e001      	b.n	800479e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800479a:	230f      	movs	r3, #15
 800479c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d13a      	bne.n	800483e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	b29b      	uxth	r3, r3
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d155      	bne.n	80048ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	78db      	ldrb	r3, [r3, #3]
 800481a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800481c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	059b      	lsls	r3, r3, #22
 8004822:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004824:	4313      	orrs	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e036      	b.n	80048ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	2101      	movs	r1, #1
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485c:	4313      	orrs	r3, r2
 800485e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11a      	bne.n	80048ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	78db      	ldrb	r3, [r3, #3]
 8004890:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004892:	430b      	orrs	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d135      	bne.n	8004944 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f8:	4013      	ands	r3, r2
 80048fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	b29b      	uxth	r3, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491c:	4013      	ands	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0159      	lsls	r1, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	440b      	add	r3, r1
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	4619      	mov	r1, r3
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <USB_DeactivateEndpoint+0x100>)
 800493e:	4013      	ands	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
 8004942:	e034      	b.n	80049ae <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	43db      	mvns	r3, r3
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004964:	4013      	ands	r3, r2
 8004966:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	43db      	mvns	r3, r3
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004988:	4013      	ands	r3, r2
 800498a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	0159      	lsls	r1, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	440b      	add	r3, r1
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	4619      	mov	r1, r3
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <USB_DeactivateEndpoint+0x104>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	ec337800 	.word	0xec337800
 80049c0:	eff37800 	.word	0xeff37800

080049c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	f040 815c 	bne.w	8004c9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d132      	bne.n	8004a54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	0151      	lsls	r1, r2, #5
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	440a      	add	r2, r1
 8004a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4c:	0cdb      	lsrs	r3, r3, #19
 8004a4e:	04db      	lsls	r3, r3, #19
 8004a50:	6113      	str	r3, [r2, #16]
 8004a52:	e074      	b.n	8004b3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	0cdb      	lsrs	r3, r3, #19
 8004a70:	04db      	lsls	r3, r3, #19
 8004a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	6959      	ldr	r1, [r3, #20]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	440b      	add	r3, r1
 8004ab0:	1e59      	subs	r1, r3, #1
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aba:	04d9      	lsls	r1, r3, #19
 8004abc:	4b9d      	ldr	r3, [pc, #628]	; (8004d34 <USB_EPStartXfer+0x370>)
 8004abe:	400b      	ands	r3, r1
 8004ac0:	69b9      	ldr	r1, [r7, #24]
 8004ac2:	0148      	lsls	r0, r1, #5
 8004ac4:	69f9      	ldr	r1, [r7, #28]
 8004ac6:	4401      	add	r1, r0
 8004ac8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004acc:	4313      	orrs	r3, r2
 8004ace:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae6:	69b9      	ldr	r1, [r7, #24]
 8004ae8:	0148      	lsls	r0, r1, #5
 8004aea:	69f9      	ldr	r1, [r7, #28]
 8004aec:	4401      	add	r1, r0
 8004aee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004af2:	4313      	orrs	r3, r2
 8004af4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	78db      	ldrb	r3, [r3, #3]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d11f      	bne.n	8004b3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d14b      	bne.n	8004bdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d009      	beq.n	8004b60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	78db      	ldrb	r3, [r3, #3]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d128      	bne.n	8004bba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d110      	bne.n	8004b9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	e00f      	b.n	8004bba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e12f      	b.n	8004e3c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d015      	beq.n	8004c30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8117 	beq.w	8004e3c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	2101      	movs	r1, #1
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c2e:	e105      	b.n	8004e3c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d110      	bne.n	8004c62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e00f      	b.n	8004c82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68d9      	ldr	r1, [r3, #12]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	b298      	uxth	r0, r3
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fa2b 	bl	80050f2 <USB_WritePacket>
 8004c9c:	e0ce      	b.n	8004e3c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	0cdb      	lsrs	r3, r3, #19
 8004cba:	04db      	lsls	r3, r3, #19
 8004cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ce0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d126      	bne.n	8004d38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	0148      	lsls	r0, r1, #5
 8004d04:	69f9      	ldr	r1, [r7, #28]
 8004d06:	4401      	add	r1, r0
 8004d08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d2e:	6113      	str	r3, [r2, #16]
 8004d30:	e036      	b.n	8004da0 <USB_EPStartXfer+0x3dc>
 8004d32:	bf00      	nop
 8004d34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4413      	add	r3, r2
 8004d42:	1e5a      	subs	r2, r3, #1
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	8afb      	ldrh	r3, [r7, #22]
 8004d5e:	04d9      	lsls	r1, r3, #19
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <USB_EPStartXfer+0x484>)
 8004d62:	400b      	ands	r3, r1
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	0148      	lsls	r0, r1, #5
 8004d68:	69f9      	ldr	r1, [r7, #28]
 8004d6a:	4401      	add	r1, r0
 8004d6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d70:	4313      	orrs	r3, r2
 8004d72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	8af9      	ldrh	r1, [r7, #22]
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d90:	69b9      	ldr	r1, [r7, #24]
 8004d92:	0148      	lsls	r0, r1, #5
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	4401      	add	r1, r0
 8004d98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10d      	bne.n	8004dc2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68d9      	ldr	r1, [r3, #12]
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	78db      	ldrb	r3, [r3, #3]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d128      	bne.n	8004e1c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d110      	bne.n	8004dfc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e00f      	b.n	8004e1c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	1ff80000 	.word	0x1ff80000

08004e4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 80cd 	bne.w	8005008 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d132      	bne.n	8004edc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	0cdb      	lsrs	r3, r3, #19
 8004ed6:	04db      	lsls	r3, r3, #19
 8004ed8:	6113      	str	r3, [r2, #16]
 8004eda:	e04e      	b.n	8004f7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef6:	0cdb      	lsrs	r3, r3, #19
 8004ef8:	04db      	lsls	r3, r3, #19
 8004efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d903      	bls.n	8004f34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	0148      	lsls	r0, r1, #5
 8004f6e:	6979      	ldr	r1, [r7, #20]
 8004f70:	4401      	add	r1, r0
 8004f72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f76:	4313      	orrs	r3, r2
 8004f78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11e      	bne.n	8004fbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	461a      	mov	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	e092      	b.n	80050e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d07e      	beq.n	80050e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005002:	4313      	orrs	r3, r2
 8005004:	634b      	str	r3, [r1, #52]	; 0x34
 8005006:	e06d      	b.n	80050e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005022:	0cdb      	lsrs	r3, r3, #19
 8005024:	04db      	lsls	r3, r3, #19
 8005026:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005042:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005046:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800504a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800507a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005092:	6939      	ldr	r1, [r7, #16]
 8005094:	0148      	lsls	r0, r1, #5
 8005096:	6979      	ldr	r1, [r7, #20]
 8005098:	4401      	add	r1, r0
 800509a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800509e:	4313      	orrs	r3, r2
 80050a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10d      	bne.n	80050c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	68d9      	ldr	r1, [r3, #12]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	460a      	mov	r2, r1
 80050c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b089      	sub	sp, #36	; 0x24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	4611      	mov	r1, r2
 80050fe:	461a      	mov	r2, r3
 8005100:	460b      	mov	r3, r1
 8005102:	71fb      	strb	r3, [r7, #7]
 8005104:	4613      	mov	r3, r2
 8005106:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005110:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005114:	2b00      	cmp	r3, #0
 8005116:	d11a      	bne.n	800514e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005118:	88bb      	ldrh	r3, [r7, #4]
 800511a:	3303      	adds	r3, #3
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	e00f      	b.n	8005146 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	031a      	lsls	r2, r3, #12
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005132:	461a      	mov	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6013      	str	r3, [r2, #0]
      pSrc++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3304      	adds	r3, #4
 800513e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	3301      	adds	r3, #1
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d3eb      	bcc.n	8005126 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3724      	adds	r7, #36	; 0x24
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800515c:	b480      	push	{r7}
 800515e:	b089      	sub	sp, #36	; 0x24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	3303      	adds	r3, #3
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e00b      	b.n	8005198 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	601a      	str	r2, [r3, #0]
    pDest++;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3304      	adds	r3, #4
 8005190:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3301      	adds	r3, #1
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d3ef      	bcc.n	8005180 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80051a0:	69fb      	ldr	r3, [r7, #28]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3724      	adds	r7, #36	; 0x24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d12c      	bne.n	8005224 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	db12      	blt.n	8005202 <USB_EPSetStall+0x54>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00f      	beq.n	8005202 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005200:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e02b      	b.n	800527c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	db12      	blt.n	800525c <USB_EPSetStall+0xae>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00f      	beq.n	800525c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800525a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800527a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	785b      	ldrb	r3, [r3, #1]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d128      	bne.n	80052f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	78db      	ldrb	r3, [r3, #3]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d003      	beq.n	80052d6 <USB_EPClearStall+0x4c>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	78db      	ldrb	r3, [r3, #3]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d138      	bne.n	8005348 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e027      	b.n	8005348 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005312:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005316:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d003      	beq.n	8005328 <USB_EPClearStall+0x9e>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	78db      	ldrb	r3, [r3, #3]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d10f      	bne.n	8005348 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005346:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005374:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005378:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053bc:	f023 0302 	bic.w	r3, r3, #2
 80053c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80053c2:	2003      	movs	r0, #3
 80053c4:	f7fb fb0c 	bl	80009e0 <HAL_Delay>

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ec:	f043 0302 	orr.w	r3, r3, #2
 80053f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80053f2:	2003      	movs	r0, #3
 80053f4:	f7fb faf4 	bl	80009e0 <HAL_Delay>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4013      	ands	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800541a:	68fb      	ldr	r3, [r7, #12]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	0c1b      	lsrs	r3, r3, #16
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4013      	ands	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	b29b      	uxth	r3, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054be:	68bb      	ldr	r3, [r7, #8]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
 80054fc:	01db      	lsls	r3, r3, #7
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800551a:	68bb      	ldr	r3, [r7, #8]
}
 800551c:	4618      	mov	r0, r3
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f003 0301 	and.w	r3, r3, #1
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005562:	f023 0307 	bic.w	r3, r3, #7
 8005566:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0306 	and.w	r3, r3, #6
 8005574:	2b04      	cmp	r3, #4
 8005576:	d109      	bne.n	800558c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005586:	f043 0303 	orr.w	r3, r3, #3
 800558a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	460b      	mov	r3, r1
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	333c      	adds	r3, #60	; 0x3c
 80055c6:	3304      	adds	r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4a26      	ldr	r2, [pc, #152]	; (8005668 <USB_EP0_OutStart+0xb8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d90a      	bls.n	80055ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e4:	d101      	bne.n	80055ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e037      	b.n	800565a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005618:	f043 0318 	orr.w	r3, r3, #24
 800561c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005630:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005632:	7afb      	ldrb	r3, [r7, #11]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10f      	bne.n	8005658 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005652:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	4f54300a 	.word	0x4f54300a

0800566c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <USB_CoreReset+0x64>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e01b      	b.n	80056c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	daf2      	bge.n	8005678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <USB_CoreReset+0x64>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d0f0      	beq.n	80056a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	00030d40 	.word	0x00030d40

080056d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	7c1b      	ldrb	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d115      	bne.n	8005718 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f0:	2202      	movs	r2, #2
 80056f2:	2181      	movs	r1, #129	; 0x81
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f002 febc 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005704:	2202      	movs	r2, #2
 8005706:	2101      	movs	r1, #1
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f002 feb2 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005716:	e012      	b.n	800573e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005718:	2340      	movs	r3, #64	; 0x40
 800571a:	2202      	movs	r2, #2
 800571c:	2181      	movs	r1, #129	; 0x81
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f002 fea7 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800572a:	2340      	movs	r3, #64	; 0x40
 800572c:	2202      	movs	r2, #2
 800572e:	2101      	movs	r1, #1
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f002 fe9e 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800573e:	2308      	movs	r3, #8
 8005740:	2203      	movs	r2, #3
 8005742:	2182      	movs	r1, #130	; 0x82
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f002 fe94 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005750:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005754:	f003 f93c 	bl	80089d0 <malloc>
 8005758:	4603      	mov	r3, r0
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e026      	b.n	80057c0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005778:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	7c1b      	ldrb	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057a6:	2101      	movs	r1, #1
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f002 ff53 	bl	8008654 <USBD_LL_PrepareReceive>
 80057ae:	e007      	b.n	80057c0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057b6:	2340      	movs	r3, #64	; 0x40
 80057b8:	2101      	movs	r1, #1
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f002 ff4a 	bl	8008654 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80057da:	2181      	movs	r1, #129	; 0x81
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f002 fe6e 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80057e8:	2101      	movs	r1, #1
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f002 fe67 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80057f8:	2182      	movs	r1, #130	; 0x82
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f002 fe5f 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00e      	beq.n	800582e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005820:	4618      	mov	r0, r3
 8005822:	f003 f8dd 	bl	80089e0 <free>
    pdev->pClassData = NULL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005848:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800585e:	2b00      	cmp	r3, #0
 8005860:	d039      	beq.n	80058d6 <USBD_CDC_Setup+0x9e>
 8005862:	2b20      	cmp	r3, #32
 8005864:	d17c      	bne.n	8005960 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	88db      	ldrh	r3, [r3, #6]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d029      	beq.n	80058c2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b25b      	sxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	da11      	bge.n	800589c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005884:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	88d2      	ldrh	r2, [r2, #6]
 800588a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800588c:	6939      	ldr	r1, [r7, #16]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	88db      	ldrh	r3, [r3, #6]
 8005892:	461a      	mov	r2, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f9c9 	bl	8006c2c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800589a:	e068      	b.n	800596e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	785a      	ldrb	r2, [r3, #1]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	88db      	ldrh	r3, [r3, #6]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058b2:	6939      	ldr	r1, [r7, #16]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	88db      	ldrh	r3, [r3, #6]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f001 f9e4 	bl	8006c88 <USBD_CtlPrepareRx>
    break;
 80058c0:	e055      	b.n	800596e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	7850      	ldrb	r0, [r2, #1]
 80058ce:	2200      	movs	r2, #0
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	4798      	blx	r3
    break;
 80058d4:	e04b      	b.n	800596e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	2b0a      	cmp	r3, #10
 80058dc:	d017      	beq.n	800590e <USBD_CDC_Setup+0xd6>
 80058de:	2b0b      	cmp	r3, #11
 80058e0:	d029      	beq.n	8005936 <USBD_CDC_Setup+0xfe>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d133      	bne.n	800594e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d107      	bne.n	8005900 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80058f0:	f107 030c 	add.w	r3, r7, #12
 80058f4:	2202      	movs	r2, #2
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 f997 	bl	8006c2c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80058fe:	e02e      	b.n	800595e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 f927 	bl	8006b56 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005908:	2302      	movs	r3, #2
 800590a:	75fb      	strb	r3, [r7, #23]
      break;
 800590c:	e027      	b.n	800595e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005914:	2b03      	cmp	r3, #3
 8005916:	d107      	bne.n	8005928 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005918:	f107 030f 	add.w	r3, r7, #15
 800591c:	2201      	movs	r2, #1
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 f983 	bl	8006c2c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005926:	e01a      	b.n	800595e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f913 	bl	8006b56 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005930:	2302      	movs	r3, #2
 8005932:	75fb      	strb	r3, [r7, #23]
      break;
 8005934:	e013      	b.n	800595e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800593c:	2b03      	cmp	r3, #3
 800593e:	d00d      	beq.n	800595c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f907 	bl	8006b56 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005948:	2302      	movs	r3, #2
 800594a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800594c:	e006      	b.n	800595c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f001 f900 	bl	8006b56 <USBD_CtlError>
      ret = USBD_FAIL;
 8005956:	2302      	movs	r3, #2
 8005958:	75fb      	strb	r3, [r7, #23]
      break;
 800595a:	e000      	b.n	800595e <USBD_CDC_Setup+0x126>
      break;
 800595c:	bf00      	nop
    }
    break;
 800595e:	e006      	b.n	800596e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 f8f7 	bl	8006b56 <USBD_CtlError>
    ret = USBD_FAIL;
 8005968:	2302      	movs	r3, #2
 800596a:	75fb      	strb	r3, [r7, #23]
    break;
 800596c:	bf00      	nop
  }

  return ret;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800598a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005992:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800599a:	2b00      	cmp	r3, #0
 800599c:	d03a      	beq.n	8005a14 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	331c      	adds	r3, #28
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d029      	beq.n	8005a08 <USBD_CDC_DataIn+0x90>
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	331c      	adds	r3, #28
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	78f9      	ldrb	r1, [r7, #3]
 80059c8:	68b8      	ldr	r0, [r7, #8]
 80059ca:	460b      	mov	r3, r1
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	1a5b      	subs	r3, r3, r1
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4403      	add	r3, r0
 80059d4:	3344      	adds	r3, #68	; 0x44
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80059dc:	fb03 f301 	mul.w	r3, r3, r1
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d110      	bne.n	8005a08 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	331c      	adds	r3, #28
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80059fa:	78f9      	ldrb	r1, [r7, #3]
 80059fc:	2300      	movs	r3, #0
 80059fe:	2200      	movs	r2, #0
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f002 fe04 	bl	800860e <USBD_LL_Transmit>
 8005a06:	e003      	b.n	8005a10 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005a14:	2302      	movs	r3, #2
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f002 fe2f 	bl	800869a <USBD_LL_GetRxDataSize>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a62:	4611      	mov	r1, r2
 8005a64:	4798      	blx	r3

    return USBD_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e000      	b.n	8005a6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005a6a:	2302      	movs	r3, #2
  }
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a82:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d015      	beq.n	8005aba <USBD_CDC_EP0_RxReady+0x46>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a94:	2bff      	cmp	r3, #255	; 0xff
 8005a96:	d010      	beq.n	8005aba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005aa6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2243      	movs	r2, #67	; 0x43
 8005ad0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005ad2:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000090 	.word	0x20000090

08005ae4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2243      	movs	r2, #67	; 0x43
 8005af0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005af2:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	2000004c 	.word	0x2000004c

08005b04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2243      	movs	r2, #67	; 0x43
 8005b10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b12:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	200000d4 	.word	0x200000d4

08005b24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	220a      	movs	r2, #10
 8005b30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b32:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000008 	.word	0x20000008

08005b44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b86:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005bb6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005bdc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01c      	beq.n	8005c22 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d115      	bne.n	8005c1e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2181      	movs	r1, #129	; 0x81
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f002 fcfa 	bl	800860e <USBD_LL_Transmit>

      return USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e002      	b.n	8005c24 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d017      	beq.n	8005c76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	7c1b      	ldrb	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c58:	2101      	movs	r1, #1
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f002 fcfa 	bl	8008654 <USBD_LL_PrepareReceive>
 8005c60:	e007      	b.n	8005c72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f002 fcf1 	bl	8008654 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e01a      	b.n	8005cce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	79fa      	ldrb	r2, [r7, #7]
 8005cc4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f002 fb6c 	bl	80083a4 <USBD_LL_Init>

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
 8005cf6:	e001      	b.n	8005cfc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f002 fb92 	bl	800843c <USBD_LL_Start>

  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005d44:	2302      	movs	r3, #2
 8005d46:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
  return USBD_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fe94 	bl	8006adc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d00c      	beq.n	8005df2 <USBD_LL_SetupStage+0x56>
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d302      	bcc.n	8005de2 <USBD_LL_SetupStage+0x46>
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d010      	beq.n	8005e02 <USBD_LL_SetupStage+0x66>
 8005de0:	e017      	b.n	8005e12 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa04 	bl	80061f8 <USBD_StdDevReq>
    break;
 8005df0:	e01a      	b.n	8005e28 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa66 	bl	80062cc <USBD_StdItfReq>
    break;
 8005e00:	e012      	b.n	8005e28 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 faa4 	bl	8006358 <USBD_StdEPReq>
    break;
 8005e10:	e00a      	b.n	8005e28 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005e18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f002 fb6b 	bl	80084fc <USBD_LL_StallEP>
    break;
 8005e26:	bf00      	nop
  }

  return USBD_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b086      	sub	sp, #24
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d14b      	bne.n	8005ede <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e4c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d134      	bne.n	8005ec2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d919      	bls.n	8005e98 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	1ad2      	subs	r2, r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d203      	bcs.n	8005e86 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	e002      	b.n	8005e8c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 ff17 	bl	8006cc4 <USBD_CtlContinueRx>
 8005e96:	e038      	b.n	8005f0a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d105      	bne.n	8005eba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 ff14 	bl	8006ce8 <USBD_CtlSendStatus>
 8005ec0:	e023      	b.n	8005f0a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	d11e      	bne.n	8005f0a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f002 fb10 	bl	80084fc <USBD_LL_StallEP>
 8005edc:	e015      	b.n	8005f0a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d108      	bne.n	8005f06 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	7afa      	ldrb	r2, [r7, #11]
 8005efe:	4611      	mov	r1, r2
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	4798      	blx	r3
 8005f04:	e001      	b.n	8005f0a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f06:	2302      	movs	r3, #2
 8005f08:	e000      	b.n	8005f0c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005f22:	7afb      	ldrb	r3, [r7, #11]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d17f      	bne.n	8006028 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d15c      	bne.n	8005ff2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d915      	bls.n	8005f70 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	1ad2      	subs	r2, r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fe81 	bl	8006c64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005f62:	2300      	movs	r3, #0
 8005f64:	2200      	movs	r2, #0
 8005f66:	2100      	movs	r1, #0
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f002 fb73 	bl	8008654 <USBD_LL_PrepareReceive>
 8005f6e:	e04e      	b.n	800600e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	6912      	ldr	r2, [r2, #16]
 8005f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f7c:	fb02 f201 	mul.w	r2, r2, r1
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d11c      	bne.n	8005fc0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d316      	bcc.n	8005fc0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d20f      	bcs.n	8005fc0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fe5d 	bl	8006c64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f002 fb4b 	bl	8008654 <USBD_LL_PrepareReceive>
 8005fbe:	e026      	b.n	800600e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d105      	bne.n	8005fe2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005fe2:	2180      	movs	r1, #128	; 0x80
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f002 fa89 	bl	80084fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fe8f 	bl	8006d0e <USBD_CtlReceiveStatus>
 8005ff0:	e00d      	b.n	800600e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d004      	beq.n	8006006 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f002 fa77 	bl	80084fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006014:	2b01      	cmp	r3, #1
 8006016:	d11d      	bne.n	8006054 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff fe82 	bl	8005d22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006026:	e015      	b.n	8006054 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800603a:	2b03      	cmp	r3, #3
 800603c:	d108      	bne.n	8006050 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	7afa      	ldrb	r2, [r7, #11]
 8006048:	4611      	mov	r1, r2
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	4798      	blx	r3
 800604e:	e001      	b.n	8006054 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006050:	2302      	movs	r3, #2
 8006052:	e000      	b.n	8006056 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006066:	2340      	movs	r3, #64	; 0x40
 8006068:	2200      	movs	r2, #0
 800606a:	2100      	movs	r1, #0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f002 fa00 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2240      	movs	r2, #64	; 0x40
 800607e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006082:	2340      	movs	r3, #64	; 0x40
 8006084:	2200      	movs	r2, #0
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f002 f9f2 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2240      	movs	r2, #64	; 0x40
 8006098:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6852      	ldr	r2, [r2, #4]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	4611      	mov	r1, r2
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
  }

  return USBD_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2204      	movs	r2, #4
 8006118:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800615a:	2b03      	cmp	r3, #3
 800615c:	d10b      	bne.n	8006176 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6852      	ldr	r2, [r2, #4]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	4611      	mov	r1, r2
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3

  return USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800620e:	2b20      	cmp	r3, #32
 8006210:	d004      	beq.n	800621c <USBD_StdDevReq+0x24>
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d002      	beq.n	800621c <USBD_StdDevReq+0x24>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <USBD_StdDevReq+0x34>
 800621a:	e04c      	b.n	80062b6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
    break;
 800622a:	e049      	b.n	80062c0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b09      	cmp	r3, #9
 8006232:	d83a      	bhi.n	80062aa <USBD_StdDevReq+0xb2>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <USBD_StdDevReq+0x44>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	0800628d 	.word	0x0800628d
 8006240:	080062a1 	.word	0x080062a1
 8006244:	080062ab 	.word	0x080062ab
 8006248:	08006297 	.word	0x08006297
 800624c:	080062ab 	.word	0x080062ab
 8006250:	0800626f 	.word	0x0800626f
 8006254:	08006265 	.word	0x08006265
 8006258:	080062ab 	.word	0x080062ab
 800625c:	08006283 	.word	0x08006283
 8006260:	08006279 	.word	0x08006279
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9d2 	bl	8006610 <USBD_GetDescriptor>
      break;
 800626c:	e022      	b.n	80062b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fac7 	bl	8006804 <USBD_SetAddress>
      break;
 8006276:	e01d      	b.n	80062b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fb04 	bl	8006888 <USBD_SetConfig>
      break;
 8006280:	e018      	b.n	80062b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fb8d 	bl	80069a4 <USBD_GetConfig>
      break;
 800628a:	e013      	b.n	80062b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fbbc 	bl	8006a0c <USBD_GetStatus>
      break;
 8006294:	e00e      	b.n	80062b4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fbea 	bl	8006a72 <USBD_SetFeature>
      break;
 800629e:	e009      	b.n	80062b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fbf9 	bl	8006a9a <USBD_ClrFeature>
      break;
 80062a8:	e004      	b.n	80062b4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fc52 	bl	8006b56 <USBD_CtlError>
      break;
 80062b2:	bf00      	nop
    }
    break;
 80062b4:	e004      	b.n	80062c0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fc4c 	bl	8006b56 <USBD_CtlError>
    break;
 80062be:	bf00      	nop
  }

  return ret;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop

080062cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d003      	beq.n	80062ee <USBD_StdItfReq+0x22>
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d001      	beq.n	80062ee <USBD_StdItfReq+0x22>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d12a      	bne.n	8006344 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80062f4:	3b01      	subs	r3, #1
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d81d      	bhi.n	8006336 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	889b      	ldrh	r3, [r3, #4]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d813      	bhi.n	800632c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
 8006312:	4603      	mov	r3, r0
 8006314:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	88db      	ldrh	r3, [r3, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d110      	bne.n	8006340 <USBD_StdItfReq+0x74>
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10d      	bne.n	8006340 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fcdf 	bl	8006ce8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800632a:	e009      	b.n	8006340 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fc11 	bl	8006b56 <USBD_CtlError>
      break;
 8006334:	e004      	b.n	8006340 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fc0c 	bl	8006b56 <USBD_CtlError>
      break;
 800633e:	e000      	b.n	8006342 <USBD_StdItfReq+0x76>
      break;
 8006340:	bf00      	nop
    }
    break;
 8006342:	e004      	b.n	800634e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fc05 	bl	8006b56 <USBD_CtlError>
    break;
 800634c:	bf00      	nop
  }

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	889b      	ldrh	r3, [r3, #4]
 800636a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006374:	2b20      	cmp	r3, #32
 8006376:	d004      	beq.n	8006382 <USBD_StdEPReq+0x2a>
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d002      	beq.n	8006382 <USBD_StdEPReq+0x2a>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <USBD_StdEPReq+0x3a>
 8006380:	e13b      	b.n	80065fa <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
    break;
 8006390:	e138      	b.n	8006604 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800639a:	2b20      	cmp	r3, #32
 800639c:	d10a      	bne.n	80063b4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]

      return ret;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	e128      	b.n	8006606 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d03e      	beq.n	800643a <USBD_StdEPReq+0xe2>
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d002      	beq.n	80063c6 <USBD_StdEPReq+0x6e>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d070      	beq.n	80064a6 <USBD_StdEPReq+0x14e>
 80063c4:	e113      	b.n	80065ee <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d002      	beq.n	80063d6 <USBD_StdEPReq+0x7e>
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d015      	beq.n	8006400 <USBD_StdEPReq+0xa8>
 80063d4:	e02b      	b.n	800642e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <USBD_StdEPReq+0x9e>
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b80      	cmp	r3, #128	; 0x80
 80063e0:	d009      	beq.n	80063f6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f002 f888 	bl	80084fc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80063ec:	2180      	movs	r1, #128	; 0x80
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f002 f884 	bl	80084fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80063f4:	e020      	b.n	8006438 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fbac 	bl	8006b56 <USBD_CtlError>
        break;
 80063fe:	e01b      	b.n	8006438 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	885b      	ldrh	r3, [r3, #2]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10e      	bne.n	8006426 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <USBD_StdEPReq+0xce>
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	2b80      	cmp	r3, #128	; 0x80
 8006412:	d008      	beq.n	8006426 <USBD_StdEPReq+0xce>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	88db      	ldrh	r3, [r3, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f002 f86b 	bl	80084fc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fc5e 	bl	8006ce8 <USBD_CtlSendStatus>

        break;
 800642c:	e004      	b.n	8006438 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fb90 	bl	8006b56 <USBD_CtlError>
        break;
 8006436:	bf00      	nop
      }
      break;
 8006438:	e0de      	b.n	80065f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006440:	2b02      	cmp	r3, #2
 8006442:	d002      	beq.n	800644a <USBD_StdEPReq+0xf2>
 8006444:	2b03      	cmp	r3, #3
 8006446:	d015      	beq.n	8006474 <USBD_StdEPReq+0x11c>
 8006448:	e026      	b.n	8006498 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <USBD_StdEPReq+0x112>
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b80      	cmp	r3, #128	; 0x80
 8006454:	d009      	beq.n	800646a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f002 f84e 	bl	80084fc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006460:	2180      	movs	r1, #128	; 0x80
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f002 f84a 	bl	80084fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006468:	e01c      	b.n	80064a4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fb72 	bl	8006b56 <USBD_CtlError>
        break;
 8006472:	e017      	b.n	80064a4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	885b      	ldrh	r3, [r3, #2]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d112      	bne.n	80064a2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f002 f855 	bl	800853a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fc29 	bl	8006ce8 <USBD_CtlSendStatus>
        }
        break;
 8006496:	e004      	b.n	80064a2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fb5b 	bl	8006b56 <USBD_CtlError>
        break;
 80064a0:	e000      	b.n	80064a4 <USBD_StdEPReq+0x14c>
        break;
 80064a2:	bf00      	nop
      }
      break;
 80064a4:	e0a8      	b.n	80065f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d002      	beq.n	80064b6 <USBD_StdEPReq+0x15e>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d031      	beq.n	8006518 <USBD_StdEPReq+0x1c0>
 80064b4:	e095      	b.n	80065e2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <USBD_StdEPReq+0x174>
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b80      	cmp	r3, #128	; 0x80
 80064c0:	d004      	beq.n	80064cc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fb46 	bl	8006b56 <USBD_CtlError>
          break;
 80064ca:	e08f      	b.n	80065ec <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80064cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da0b      	bge.n	80064ec <USBD_StdEPReq+0x194>
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	3310      	adds	r3, #16
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	3304      	adds	r3, #4
 80064ea:	e00a      	b.n	8006502 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2202      	movs	r2, #2
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fb8b 	bl	8006c2c <USBD_CtlSendData>
          break;
 8006516:	e069      	b.n	80065ec <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800651c:	2b00      	cmp	r3, #0
 800651e:	da11      	bge.n	8006544 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	f003 020f 	and.w	r2, r3, #15
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	3318      	adds	r3, #24
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d117      	bne.n	800656a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb0a 	bl	8006b56 <USBD_CtlError>
            break;
 8006542:	e053      	b.n	80065ec <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 faf7 	bl	8006b56 <USBD_CtlError>
            break;
 8006568:	e040      	b.n	80065ec <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800656a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800656e:	2b00      	cmp	r3, #0
 8006570:	da0b      	bge.n	800658a <USBD_StdEPReq+0x232>
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	3310      	adds	r3, #16
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	3304      	adds	r3, #4
 8006588:	e00a      	b.n	80065a0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <USBD_StdEPReq+0x256>
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d103      	bne.n	80065b6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	e00e      	b.n	80065d4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 ffdc 	bl	8008578 <USBD_LL_IsStallEP>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	e002      	b.n	80065d4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2202      	movs	r2, #2
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fb26 	bl	8006c2c <USBD_CtlSendData>
          break;
 80065e0:	e004      	b.n	80065ec <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fab6 	bl	8006b56 <USBD_CtlError>
        break;
 80065ea:	bf00      	nop
      }
      break;
 80065ec:	e004      	b.n	80065f8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fab0 	bl	8006b56 <USBD_CtlError>
      break;
 80065f6:	bf00      	nop
    }
    break;
 80065f8:	e004      	b.n	8006604 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 faaa 	bl	8006b56 <USBD_CtlError>
    break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	885b      	ldrh	r3, [r3, #2]
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	2b06      	cmp	r3, #6
 8006626:	f200 80c9 	bhi.w	80067bc <USBD_GetDescriptor+0x1ac>
 800662a:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <USBD_GetDescriptor+0x20>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	0800664d 	.word	0x0800664d
 8006634:	08006665 	.word	0x08006665
 8006638:	080066a5 	.word	0x080066a5
 800663c:	080067bd 	.word	0x080067bd
 8006640:	080067bd 	.word	0x080067bd
 8006644:	08006769 	.word	0x08006769
 8006648:	0800678f 	.word	0x0800678f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	7c12      	ldrb	r2, [r2, #16]
 8006658:	f107 010a 	add.w	r1, r7, #10
 800665c:	4610      	mov	r0, r2
 800665e:	4798      	blx	r3
 8006660:	60f8      	str	r0, [r7, #12]
    break;
 8006662:	e0b0      	b.n	80067c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7c1b      	ldrb	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10d      	bne.n	8006688 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f107 020a 	add.w	r2, r7, #10
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
 800667c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	2202      	movs	r2, #2
 8006684:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006686:	e09e      	b.n	80067c6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	f107 020a 	add.w	r2, r7, #10
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	2202      	movs	r2, #2
 80066a0:	701a      	strb	r2, [r3, #0]
    break;
 80066a2:	e090      	b.n	80067c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	885b      	ldrh	r3, [r3, #2]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d856      	bhi.n	800675c <USBD_GetDescriptor+0x14c>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <USBD_GetDescriptor+0xa4>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	080066fd 	.word	0x080066fd
 80066c0:	08006715 	.word	0x08006715
 80066c4:	0800672d 	.word	0x0800672d
 80066c8:	08006745 	.word	0x08006745
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7c12      	ldrb	r2, [r2, #16]
 80066d8:	f107 010a 	add.w	r1, r7, #10
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	60f8      	str	r0, [r7, #12]
      break;
 80066e2:	e040      	b.n	8006766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 010a 	add.w	r1, r7, #10
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
      break;
 80066fa:	e034      	b.n	8006766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7c12      	ldrb	r2, [r2, #16]
 8006708:	f107 010a 	add.w	r1, r7, #10
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
      break;
 8006712:	e028      	b.n	8006766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	7c12      	ldrb	r2, [r2, #16]
 8006720:	f107 010a 	add.w	r1, r7, #10
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	60f8      	str	r0, [r7, #12]
      break;
 800672a:	e01c      	b.n	8006766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	f107 010a 	add.w	r1, r7, #10
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
      break;
 8006742:	e010      	b.n	8006766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7c12      	ldrb	r2, [r2, #16]
 8006750:	f107 010a 	add.w	r1, r7, #10
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	60f8      	str	r0, [r7, #12]
      break;
 800675a:	e004      	b.n	8006766 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9f9 	bl	8006b56 <USBD_CtlError>
      return;
 8006764:	e04b      	b.n	80067fe <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006766:	e02e      	b.n	80067c6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7c1b      	ldrb	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006778:	f107 020a 	add.w	r2, r7, #10
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
      break;
 8006782:	e020      	b.n	80067c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f9e5 	bl	8006b56 <USBD_CtlError>
      return;
 800678c:	e037      	b.n	80067fe <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7c1b      	ldrb	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	f107 020a 	add.w	r2, r7, #10
 80067a2:	4610      	mov	r0, r2
 80067a4:	4798      	blx	r3
 80067a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	2207      	movs	r2, #7
 80067ae:	701a      	strb	r2, [r3, #0]
      break;
 80067b0:	e009      	b.n	80067c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f9ce 	bl	8006b56 <USBD_CtlError>
      return;
 80067ba:	e020      	b.n	80067fe <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f9c9 	bl	8006b56 <USBD_CtlError>
    return;
 80067c4:	e01b      	b.n	80067fe <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80067c6:	897b      	ldrh	r3, [r7, #10]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d011      	beq.n	80067f0 <USBD_GetDescriptor+0x1e0>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	88db      	ldrh	r3, [r3, #6]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	88da      	ldrh	r2, [r3, #6]
 80067d8:	897b      	ldrh	r3, [r7, #10]
 80067da:	4293      	cmp	r3, r2
 80067dc:	bf28      	it	cs
 80067de:	4613      	movcs	r3, r2
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80067e4:	897b      	ldrh	r3, [r7, #10]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa1e 	bl	8006c2c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	88db      	ldrh	r3, [r3, #6]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa75 	bl	8006ce8 <USBD_CtlSendStatus>
  }
}
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	889b      	ldrh	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d130      	bne.n	8006878 <USBD_SetAddress+0x74>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d12c      	bne.n	8006878 <USBD_SetAddress+0x74>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	885b      	ldrh	r3, [r3, #2]
 8006822:	2b7f      	cmp	r3, #127	; 0x7f
 8006824:	d828      	bhi.n	8006878 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006830:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006838:	2b03      	cmp	r3, #3
 800683a:	d104      	bne.n	8006846 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f989 	bl	8006b56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006844:	e01c      	b.n	8006880 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7bfa      	ldrb	r2, [r7, #15]
 800684a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 febc 	bl	80085d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa45 	bl	8006ce8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686c:	e008      	b.n	8006880 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	e003      	b.n	8006880 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f96b 	bl	8006b56 <USBD_CtlError>
  }
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	885b      	ldrh	r3, [r3, #2]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	4b41      	ldr	r3, [pc, #260]	; (80069a0 <USBD_SetConfig+0x118>)
 800689a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800689c:	4b40      	ldr	r3, [pc, #256]	; (80069a0 <USBD_SetConfig+0x118>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d904      	bls.n	80068ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f955 	bl	8006b56 <USBD_CtlError>
 80068ac:	e075      	b.n	800699a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d002      	beq.n	80068be <USBD_SetConfig+0x36>
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d023      	beq.n	8006904 <USBD_SetConfig+0x7c>
 80068bc:	e062      	b.n	8006984 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80068be:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <USBD_SetConfig+0x118>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01a      	beq.n	80068fc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80068c6:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <USBD_SetConfig+0x118>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2203      	movs	r2, #3
 80068d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80068d8:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <USBD_SetConfig+0x118>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fa2a 	bl	8005d38 <USBD_SetClassConfig>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d104      	bne.n	80068f4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f932 	bl	8006b56 <USBD_CtlError>
          return;
 80068f2:	e052      	b.n	800699a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f9f7 	bl	8006ce8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80068fa:	e04e      	b.n	800699a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f9f3 	bl	8006ce8 <USBD_CtlSendStatus>
      break;
 8006902:	e04a      	b.n	800699a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006904:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <USBD_SetConfig+0x118>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d112      	bne.n	8006932 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006914:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <USBD_SetConfig+0x118>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <USBD_SetConfig+0x118>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fa26 	bl	8005d76 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9dc 	bl	8006ce8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006930:	e033      	b.n	800699a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006932:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <USBD_SetConfig+0x118>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d01d      	beq.n	800697c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fa14 	bl	8005d76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <USBD_SetConfig+0x118>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <USBD_SetConfig+0x118>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff f9ea 	bl	8005d38 <USBD_SetClassConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	2b02      	cmp	r3, #2
 8006968:	d104      	bne.n	8006974 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8f2 	bl	8006b56 <USBD_CtlError>
          return;
 8006972:	e012      	b.n	800699a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f9b7 	bl	8006ce8 <USBD_CtlSendStatus>
      break;
 800697a:	e00e      	b.n	800699a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f9b3 	bl	8006ce8 <USBD_CtlSendStatus>
      break;
 8006982:	e00a      	b.n	800699a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8e5 	bl	8006b56 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800698c:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <USBD_SetConfig+0x118>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff f9ef 	bl	8005d76 <USBD_ClrClassConfig>
      break;
 8006998:	bf00      	nop
    }
  }
}
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	200001fc 	.word	0x200001fc

080069a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d004      	beq.n	80069c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f8cc 	bl	8006b56 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80069be:	e021      	b.n	8006a04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	db17      	blt.n	80069fa <USBD_GetConfig+0x56>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	dd02      	ble.n	80069d4 <USBD_GetConfig+0x30>
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d00b      	beq.n	80069ea <USBD_GetConfig+0x46>
 80069d2:	e012      	b.n	80069fa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3308      	adds	r3, #8
 80069de:	2201      	movs	r2, #1
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f922 	bl	8006c2c <USBD_CtlSendData>
      break;
 80069e8:	e00c      	b.n	8006a04 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3304      	adds	r3, #4
 80069ee:	2201      	movs	r2, #1
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f91a 	bl	8006c2c <USBD_CtlSendData>
      break;
 80069f8:	e004      	b.n	8006a04 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f8aa 	bl	8006b56 <USBD_CtlError>
      break;
 8006a02:	bf00      	nop
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d81e      	bhi.n	8006a60 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	88db      	ldrh	r3, [r3, #6]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d004      	beq.n	8006a34 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f892 	bl	8006b56 <USBD_CtlError>
      break;
 8006a32:	e01a      	b.n	8006a6a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f043 0202 	orr.w	r2, r3, #2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	330c      	adds	r3, #12
 8006a54:	2202      	movs	r2, #2
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f8e7 	bl	8006c2c <USBD_CtlSendData>
    break;
 8006a5e:	e004      	b.n	8006a6a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f877 	bl	8006b56 <USBD_CtlError>
    break;
 8006a68:	bf00      	nop
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d106      	bne.n	8006a92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f92b 	bl	8006ce8 <USBD_CtlSendStatus>
  }

}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d80b      	bhi.n	8006ac8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	885b      	ldrh	r3, [r3, #2]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10c      	bne.n	8006ad2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f911 	bl	8006ce8 <USBD_CtlSendStatus>
    }
    break;
 8006ac6:	e004      	b.n	8006ad2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f843 	bl	8006b56 <USBD_CtlError>
    break;
 8006ad0:	e000      	b.n	8006ad4 <USBD_ClrFeature+0x3a>
    break;
 8006ad2:	bf00      	nop
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781a      	ldrb	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	785a      	ldrb	r2, [r3, #1]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	3302      	adds	r3, #2
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	3303      	adds	r3, #3
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	3304      	adds	r3, #4
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	3305      	adds	r3, #5
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	3306      	adds	r3, #6
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	3307      	adds	r3, #7
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	80da      	strh	r2, [r3, #6]

}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006b60:	2180      	movs	r1, #128	; 0x80
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fcca 	bl	80084fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006b68:	2100      	movs	r1, #0
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fcc6 	bl	80084fc <USBD_LL_StallEP>
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d032      	beq.n	8006bf4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f834 	bl	8006bfc <USBD_GetLen>
 8006b94:	4603      	mov	r3, r0
 8006b96:	3301      	adds	r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	75fa      	strb	r2, [r7, #23]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	4413      	add	r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	75fa      	strb	r2, [r7, #23]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006bc4:	e012      	b.n	8006bec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	60fa      	str	r2, [r7, #12]
 8006bcc:	7dfa      	ldrb	r2, [r7, #23]
 8006bce:	1c51      	adds	r1, r2, #1
 8006bd0:	75f9      	strb	r1, [r7, #23]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	75fa      	strb	r2, [r7, #23]
 8006be2:	461a      	mov	r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4413      	add	r3, r2
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e8      	bne.n	8006bc6 <USBD_GetString+0x4e>
    }
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006c08:	e005      	b.n	8006c16 <USBD_GetLen+0x1a>
    {
        len++;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3301      	adds	r3, #1
 8006c14:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1f5      	bne.n	8006c0a <USBD_GetLen+0xe>
    }

    return len;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006c48:	88fa      	ldrh	r2, [r7, #6]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	2100      	movs	r1, #0
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f001 fcda 	bl	800860e <USBD_LL_Transmit>

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	2100      	movs	r1, #0
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f001 fcc8 	bl	800860e <USBD_LL_Transmit>

  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2203      	movs	r2, #3
 8006c9a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006ca6:	88fa      	ldrh	r2, [r7, #6]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f001 fccd 	bl	8008654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f001 fcbb 	bl	8008654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fc85 	bl	800860e <USBD_LL_Transmit>

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2205      	movs	r2, #5
 8006d1a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fc95 	bl	8008654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <F_VL53L1X_InitSensors>:

/**
 * Init all the VL53L1X connected to I2C2
 */
void F_VL53L1X_InitSensors()
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	70fb      	strb	r3, [r7, #3]
	uint32_t i = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]

	// Set up I2C initial address
	dev_avant_1.addr = 0x52;
 8006d42:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <F_VL53L1X_InitSensors+0x98>)
 8006d44:	2252      	movs	r2, #82	; 0x52
 8006d46:	601a      	str	r2, [r3, #0]
	dev_avant_2.addr = 0x52;
 8006d48:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <F_VL53L1X_InitSensors+0x9c>)
 8006d4a:	2252      	movs	r2, #82	; 0x52
 8006d4c:	601a      	str	r2, [r3, #0]
	dev_avant_3.addr = 0x52;
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <F_VL53L1X_InitSensors+0xa0>)
 8006d50:	2252      	movs	r2, #82	; 0x52
 8006d52:	601a      	str	r2, [r3, #0]
	dev_arriere_1.addr = 0x52;
 8006d54:	4b20      	ldr	r3, [pc, #128]	; (8006dd8 <F_VL53L1X_InitSensors+0xa4>)
 8006d56:	2252      	movs	r2, #82	; 0x52
 8006d58:	601a      	str	r2, [r3, #0]


	// Configure VL53L1X_AVANT_1_ADDR	0x10	PF2

		// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD2;
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <F_VL53L1X_InitSensors+0xa8>)
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <F_VL53L1X_InitSensors+0xa8>)
 8006d60:	f043 0304 	orr.w	r3, r3, #4
 8006d64:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 8006d66:	2300      	movs	r3, #0
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	e003      	b.n	8006d74 <F_VL53L1X_InitSensors+0x40>
 8006d6c:	bf00      	nop
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3301      	adds	r3, #1
 8006d72:	607b      	str	r3, [r7, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d9f6      	bls.n	8006d6c <F_VL53L1X_InitSensors+0x38>

		// Wait for device booted
		while((state & 0x01) != 0x01){ VL53L1X_BootState(dev_avant_1, &state); HAL_Delay(2);}
 8006d7e:	e008      	b.n	8006d92 <F_VL53L1X_InitSensors+0x5e>
 8006d80:	1cfa      	adds	r2, r7, #3
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <F_VL53L1X_InitSensors+0x98>)
 8006d84:	4611      	mov	r1, r2
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	f7f9 fcad 	bl	80006e6 <VL53L1X_BootState>
 8006d8c:	2002      	movs	r0, #2
 8006d8e:	f7f9 fe27 	bl	80009e0 <HAL_Delay>
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f1      	beq.n	8006d80 <F_VL53L1X_InitSensors+0x4c>

		VL53L1X_SetI2CAddress(dev_avant_1, VL53L1X_AVANT_1_ADDR);
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <F_VL53L1X_InitSensors+0x98>)
 8006d9e:	2110      	movs	r1, #16
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	f7f9 fba3 	bl	80004ec <VL53L1X_SetI2CAddress>
		dev_avant_1.addr = VL53L1X_AVANT_1_ADDR;
 8006da6:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <F_VL53L1X_InitSensors+0x98>)
 8006da8:	2210      	movs	r2, #16
 8006daa:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8006dac:	2001      	movs	r0, #1
 8006dae:	f7f9 fe17 	bl	80009e0 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_1);
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <F_VL53L1X_InitSensors+0x98>)
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f7f9 fbb1 	bl	800051c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_1);
 8006dba:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <F_VL53L1X_InitSensors+0x98>)
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	f7f9 fc3b 	bl	8000638 <VL53L1X_StartRanging>

		HAL_Delay(1);

		VL53L1X_SensorInit(dev_arriere_1);
		VL53L1X_StartRanging(dev_arriere_1);*/
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000218 	.word	0x20000218
 8006dd0:	20000220 	.word	0x20000220
 8006dd4:	2000021c 	.word	0x2000021c
 8006dd8:	20000214 	.word	0x20000214
 8006ddc:	40021400 	.word	0x40021400

08006de0 <F_VL53L1X_CheckSensors>:
/**
 * Check the VL53L1X connected to the STM32
 * If data is ready ,update the value of distance_avant_1, distance_avant_2, distance_avant_3, distance_arriere_1
 */
void F_VL53L1X_CheckSensors(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
	uint8_t dataReady = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	71fb      	strb	r3, [r7, #7]
	uint8_t rangeStatus = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	71bb      	strb	r3, [r7, #6]

	// dev_avant_1;
	VL53L1X_CheckForDataReady(dev_avant_1, &dataReady);
 8006dee:	1dfa      	adds	r2, r7, #7
 8006df0:	4b0e      	ldr	r3, [pc, #56]	; (8006e2c <F_VL53L1X_CheckSensors+0x4c>)
 8006df2:	4611      	mov	r1, r2
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	f7f9 fc47 	bl	8000688 <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d011      	beq.n	8006e24 <F_VL53L1X_CheckSensors+0x44>
	{
		VL53L1X_GetRangeStatus(dev_avant_1, &rangeStatus);
 8006e00:	1dba      	adds	r2, r7, #6
 8006e02:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <F_VL53L1X_CheckSensors+0x4c>)
 8006e04:	4611      	mov	r1, r2
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	f7f9 fca2 	bl	8000750 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 8006e0c:	79bb      	ldrb	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d104      	bne.n	8006e1c <F_VL53L1X_CheckSensors+0x3c>
		{
			VL53L1X_GetDistance(dev_avant_1, &distance_avant_1);
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <F_VL53L1X_CheckSensors+0x4c>)
 8006e14:	4906      	ldr	r1, [pc, #24]	; (8006e30 <F_VL53L1X_CheckSensors+0x50>)
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	f7f9 fc80 	bl	800071c <VL53L1X_GetDistance>
		}
		VL53L1X_ClearInterrupt(dev_avant_1);
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <F_VL53L1X_CheckSensors+0x4c>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	f7f9 fbd0 	bl	80005c4 <VL53L1X_ClearInterrupt>
			VL53L1X_GetDistance(dev_arriere_1, &distance_arriere_1);
		}
		VL53L1X_ClearInterrupt(dev_arriere_1);
	}*/

}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000218 	.word	0x20000218
 8006e30:	200001fe 	.word	0x200001fe

08006e34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08e      	sub	sp, #56	; 0x38
 8006e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	605a      	str	r2, [r3, #4]
 8006e44:	609a      	str	r2, [r3, #8]
 8006e46:	60da      	str	r2, [r3, #12]
 8006e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	4bab      	ldr	r3, [pc, #684]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	4aaa      	ldr	r2, [pc, #680]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e54:	f043 0310 	orr.w	r3, r3, #16
 8006e58:	6313      	str	r3, [r2, #48]	; 0x30
 8006e5a:	4ba8      	ldr	r3, [pc, #672]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	623b      	str	r3, [r7, #32]
 8006e64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	4ba4      	ldr	r3, [pc, #656]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	4aa3      	ldr	r2, [pc, #652]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e70:	f043 0304 	orr.w	r3, r3, #4
 8006e74:	6313      	str	r3, [r2, #48]	; 0x30
 8006e76:	4ba1      	ldr	r3, [pc, #644]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e82:	2300      	movs	r3, #0
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	4b9d      	ldr	r3, [pc, #628]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	4a9c      	ldr	r2, [pc, #624]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e8c:	f043 0320 	orr.w	r3, r3, #32
 8006e90:	6313      	str	r3, [r2, #48]	; 0x30
 8006e92:	4b9a      	ldr	r3, [pc, #616]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	4b96      	ldr	r3, [pc, #600]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	4a95      	ldr	r2, [pc, #596]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eac:	6313      	str	r3, [r2, #48]	; 0x30
 8006eae:	4b93      	ldr	r3, [pc, #588]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	4b8f      	ldr	r3, [pc, #572]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	4a8e      	ldr	r2, [pc, #568]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eca:	4b8c      	ldr	r3, [pc, #560]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	4b88      	ldr	r3, [pc, #544]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	4a87      	ldr	r2, [pc, #540]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ee0:	f043 0302 	orr.w	r3, r3, #2
 8006ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ee6:	4b85      	ldr	r3, [pc, #532]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	4b81      	ldr	r3, [pc, #516]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	4a80      	ldr	r2, [pc, #512]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f00:	6313      	str	r3, [r2, #48]	; 0x30
 8006f02:	4b7e      	ldr	r3, [pc, #504]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	60bb      	str	r3, [r7, #8]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	4b7a      	ldr	r3, [pc, #488]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	4a79      	ldr	r2, [pc, #484]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006f18:	f043 0308 	orr.w	r3, r3, #8
 8006f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1e:	4b77      	ldr	r3, [pc, #476]	; (80070fc <MX_GPIO_Init+0x2c8>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	607b      	str	r3, [r7, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f247 013c 	movw	r1, #28732	; 0x703c
 8006f30:	4873      	ldr	r0, [pc, #460]	; (8007100 <MX_GPIO_Init+0x2cc>)
 8006f32:	f7fa f833 	bl	8000f9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LD1_Pin, GPIO_PIN_RESET);
 8006f36:	2200      	movs	r2, #0
 8006f38:	f240 2101 	movw	r1, #513	; 0x201
 8006f3c:	4871      	ldr	r0, [pc, #452]	; (8007104 <MX_GPIO_Init+0x2d0>)
 8006f3e:	f7fa f82d 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8006f42:	2200      	movs	r2, #0
 8006f44:	2108      	movs	r1, #8
 8006f46:	4870      	ldr	r0, [pc, #448]	; (8007108 <MX_GPIO_Init+0x2d4>)
 8006f48:	f7fa f828 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f244 0181 	movw	r1, #16513	; 0x4081
 8006f52:	486e      	ldr	r0, [pc, #440]	; (800710c <MX_GPIO_Init+0x2d8>)
 8006f54:	f7fa f822 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2140      	movs	r1, #64	; 0x40
 8006f5c:	486c      	ldr	r0, [pc, #432]	; (8007110 <MX_GPIO_Init+0x2dc>)
 8006f5e:	f7fa f81d 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8006f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f74:	4619      	mov	r1, r3
 8006f76:	4867      	ldr	r0, [pc, #412]	; (8007114 <MX_GPIO_Init+0x2e0>)
 8006f78:	f7f9 fe66 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8006f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006f82:	4b65      	ldr	r3, [pc, #404]	; (8007118 <MX_GPIO_Init+0x2e4>)
 8006f84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8006f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8e:	4619      	mov	r1, r3
 8006f90:	485c      	ldr	r0, [pc, #368]	; (8007104 <MX_GPIO_Init+0x2d0>)
 8006f92:	f7f9 fe59 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 8006f96:	f247 033c 	movw	r3, #28732	; 0x703c
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fac:	4619      	mov	r1, r3
 8006fae:	4854      	ldr	r0, [pc, #336]	; (8007100 <MX_GPIO_Init+0x2cc>)
 8006fb0:	f7f9 fe4a 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8006fb4:	f648 73c0 	movw	r3, #36800	; 0x8fc0
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	484d      	ldr	r0, [pc, #308]	; (8007100 <MX_GPIO_Init+0x2cc>)
 8006fca:	f7f9 fe3d 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD1_Pin;
 8006fce:	f240 2301 	movw	r3, #513	; 0x201
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4847      	ldr	r0, [pc, #284]	; (8007104 <MX_GPIO_Init+0x2d0>)
 8006fe8:	f7f9 fe2e 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC6 PC7 
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7 
 8006fec:	f641 53cc 	movw	r3, #7628	; 0x1dcc
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ffe:	4619      	mov	r1, r3
 8007000:	4840      	ldr	r0, [pc, #256]	; (8007104 <MX_GPIO_Init+0x2d0>)
 8007002:	f7f9 fe21 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8007006:	2331      	movs	r3, #49	; 0x31
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800700a:	2303      	movs	r3, #3
 800700c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700e:	2300      	movs	r3, #0
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007016:	4619      	mov	r1, r3
 8007018:	483b      	ldr	r0, [pc, #236]	; (8007108 <MX_GPIO_Init+0x2d4>)
 800701a:	f7f9 fe15 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800701e:	2308      	movs	r3, #8
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007022:	2301      	movs	r3, #1
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007026:	2300      	movs	r3, #0
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800702a:	2300      	movs	r3, #0
 800702c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800702e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007032:	4619      	mov	r1, r3
 8007034:	4834      	ldr	r0, [pc, #208]	; (8007108 <MX_GPIO_Init+0x2d4>)
 8007036:	f7f9 fe07 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800703a:	2340      	movs	r3, #64	; 0x40
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800703e:	2300      	movs	r3, #0
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007042:	2300      	movs	r3, #0
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800704a:	4619      	mov	r1, r3
 800704c:	482e      	ldr	r0, [pc, #184]	; (8007108 <MX_GPIO_Init+0x2d4>)
 800704e:	f7f9 fdfb 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8007052:	f244 0381 	movw	r3, #16513	; 0x4081
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007058:	2301      	movs	r3, #1
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705c:	2300      	movs	r3, #0
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007060:	2300      	movs	r3, #0
 8007062:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007068:	4619      	mov	r1, r3
 800706a:	4828      	ldr	r0, [pc, #160]	; (800710c <MX_GPIO_Init+0x2d8>)
 800706c:	f7f9 fdec 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8007070:	f649 4346 	movw	r3, #40006	; 0x9c46
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007076:	2303      	movs	r3, #3
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707a:	2300      	movs	r3, #0
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800707e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007082:	4619      	mov	r1, r3
 8007084:	4821      	ldr	r0, [pc, #132]	; (800710c <MX_GPIO_Init+0x2d8>)
 8007086:	f7f9 fddf 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800708a:	f24d 733f 	movw	r3, #55103	; 0xd73f
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007090:	2303      	movs	r3, #3
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007094:	2300      	movs	r3, #0
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800709c:	4619      	mov	r1, r3
 800709e:	481c      	ldr	r0, [pc, #112]	; (8007110 <MX_GPIO_Init+0x2dc>)
 80070a0:	f7f9 fdd2 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80070a4:	f643 43ff 	movw	r3, #15615	; 0x3cff
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070aa:	2303      	movs	r3, #3
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b6:	4619      	mov	r1, r3
 80070b8:	4818      	ldr	r0, [pc, #96]	; (800711c <MX_GPIO_Init+0x2e8>)
 80070ba:	f7f9 fdc5 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80070be:	2340      	movs	r3, #64	; 0x40
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070c2:	2301      	movs	r3, #1
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ca:	2300      	movs	r3, #0
 80070cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80070ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d2:	4619      	mov	r1, r3
 80070d4:	480e      	ldr	r0, [pc, #56]	; (8007110 <MX_GPIO_Init+0x2dc>)
 80070d6:	f7f9 fdb7 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070de:	2300      	movs	r3, #0
 80070e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80070e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ea:	4619      	mov	r1, r3
 80070ec:	4808      	ldr	r0, [pc, #32]	; (8007110 <MX_GPIO_Init+0x2dc>)
 80070ee:	f7f9 fdab 	bl	8000c48 <HAL_GPIO_Init>

}
 80070f2:	bf00      	nop
 80070f4:	3738      	adds	r7, #56	; 0x38
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023800 	.word	0x40023800
 8007100:	40021400 	.word	0x40021400
 8007104:	40020800 	.word	0x40020800
 8007108:	40020000 	.word	0x40020000
 800710c:	40020400 	.word	0x40020400
 8007110:	40021800 	.word	0x40021800
 8007114:	40021000 	.word	0x40021000
 8007118:	10110000 	.word	0x10110000
 800711c:	40020c00 	.word	0x40020c00

08007120 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007124:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <MX_I2C1_Init+0x74>)
 8007126:	4a1c      	ldr	r2, [pc, #112]	; (8007198 <MX_I2C1_Init+0x78>)
 8007128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800712a:	4b1a      	ldr	r3, [pc, #104]	; (8007194 <MX_I2C1_Init+0x74>)
 800712c:	4a1b      	ldr	r2, [pc, #108]	; (800719c <MX_I2C1_Init+0x7c>)
 800712e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007130:	4b18      	ldr	r3, [pc, #96]	; (8007194 <MX_I2C1_Init+0x74>)
 8007132:	2200      	movs	r2, #0
 8007134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007136:	4b17      	ldr	r3, [pc, #92]	; (8007194 <MX_I2C1_Init+0x74>)
 8007138:	2200      	movs	r2, #0
 800713a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800713c:	4b15      	ldr	r3, [pc, #84]	; (8007194 <MX_I2C1_Init+0x74>)
 800713e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007142:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007144:	4b13      	ldr	r3, [pc, #76]	; (8007194 <MX_I2C1_Init+0x74>)
 8007146:	2200      	movs	r2, #0
 8007148:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <MX_I2C1_Init+0x74>)
 800714c:	2200      	movs	r2, #0
 800714e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007150:	4b10      	ldr	r3, [pc, #64]	; (8007194 <MX_I2C1_Init+0x74>)
 8007152:	2200      	movs	r2, #0
 8007154:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007156:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <MX_I2C1_Init+0x74>)
 8007158:	2200      	movs	r2, #0
 800715a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800715c:	480d      	ldr	r0, [pc, #52]	; (8007194 <MX_I2C1_Init+0x74>)
 800715e:	f7f9 ff37 	bl	8000fd0 <HAL_I2C_Init>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007168:	f000 fab0 	bl	80076cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800716c:	2100      	movs	r1, #0
 800716e:	4809      	ldr	r0, [pc, #36]	; (8007194 <MX_I2C1_Init+0x74>)
 8007170:	f7fa f856 	bl	8001220 <HAL_I2CEx_ConfigAnalogFilter>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800717a:	f000 faa7 	bl	80076cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800717e:	2100      	movs	r1, #0
 8007180:	4804      	ldr	r0, [pc, #16]	; (8007194 <MX_I2C1_Init+0x74>)
 8007182:	f7fa f889 	bl	8001298 <HAL_I2CEx_ConfigDigitalFilter>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800718c:	f000 fa9e 	bl	80076cc <Error_Handler>
  }

}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000224 	.word	0x20000224
 8007198:	40005400 	.word	0x40005400
 800719c:	000186a0 	.word	0x000186a0

080071a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80071a4:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <MX_I2C2_Init+0x74>)
 80071a6:	4a1c      	ldr	r2, [pc, #112]	; (8007218 <MX_I2C2_Init+0x78>)
 80071a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80071aa:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <MX_I2C2_Init+0x74>)
 80071ac:	4a1b      	ldr	r2, [pc, #108]	; (800721c <MX_I2C2_Init+0x7c>)
 80071ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80071b0:	4b18      	ldr	r3, [pc, #96]	; (8007214 <MX_I2C2_Init+0x74>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80071b6:	4b17      	ldr	r3, [pc, #92]	; (8007214 <MX_I2C2_Init+0x74>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80071bc:	4b15      	ldr	r3, [pc, #84]	; (8007214 <MX_I2C2_Init+0x74>)
 80071be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80071c4:	4b13      	ldr	r3, [pc, #76]	; (8007214 <MX_I2C2_Init+0x74>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <MX_I2C2_Init+0x74>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80071d0:	4b10      	ldr	r3, [pc, #64]	; (8007214 <MX_I2C2_Init+0x74>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <MX_I2C2_Init+0x74>)
 80071d8:	2200      	movs	r2, #0
 80071da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80071dc:	480d      	ldr	r0, [pc, #52]	; (8007214 <MX_I2C2_Init+0x74>)
 80071de:	f7f9 fef7 	bl	8000fd0 <HAL_I2C_Init>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80071e8:	f000 fa70 	bl	80076cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80071ec:	2100      	movs	r1, #0
 80071ee:	4809      	ldr	r0, [pc, #36]	; (8007214 <MX_I2C2_Init+0x74>)
 80071f0:	f7fa f816 	bl	8001220 <HAL_I2CEx_ConfigAnalogFilter>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80071fa:	f000 fa67 	bl	80076cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80071fe:	2100      	movs	r1, #0
 8007200:	4804      	ldr	r0, [pc, #16]	; (8007214 <MX_I2C2_Init+0x74>)
 8007202:	f7fa f849 	bl	8001298 <HAL_I2CEx_ConfigDigitalFilter>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800720c:	f000 fa5e 	bl	80076cc <Error_Handler>
  }

}
 8007210:	bf00      	nop
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000278 	.word	0x20000278
 8007218:	40005800 	.word	0x40005800
 800721c:	000186a0 	.word	0x000186a0

08007220 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08c      	sub	sp, #48	; 0x30
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007228:	f107 031c 	add.w	r3, r7, #28
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	605a      	str	r2, [r3, #4]
 8007232:	609a      	str	r2, [r3, #8]
 8007234:	60da      	str	r2, [r3, #12]
 8007236:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a32      	ldr	r2, [pc, #200]	; (8007308 <HAL_I2C_MspInit+0xe8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d12d      	bne.n	800729e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007242:	2300      	movs	r3, #0
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	4b31      	ldr	r3, [pc, #196]	; (800730c <HAL_I2C_MspInit+0xec>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	4a30      	ldr	r2, [pc, #192]	; (800730c <HAL_I2C_MspInit+0xec>)
 800724c:	f043 0302 	orr.w	r3, r3, #2
 8007250:	6313      	str	r3, [r2, #48]	; 0x30
 8007252:	4b2e      	ldr	r3, [pc, #184]	; (800730c <HAL_I2C_MspInit+0xec>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800725e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007264:	2312      	movs	r3, #18
 8007266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007268:	2301      	movs	r3, #1
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800726c:	2303      	movs	r3, #3
 800726e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007270:	2304      	movs	r3, #4
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007274:	f107 031c 	add.w	r3, r7, #28
 8007278:	4619      	mov	r1, r3
 800727a:	4825      	ldr	r0, [pc, #148]	; (8007310 <HAL_I2C_MspInit+0xf0>)
 800727c:	f7f9 fce4 	bl	8000c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	4b21      	ldr	r3, [pc, #132]	; (800730c <HAL_I2C_MspInit+0xec>)
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	4a20      	ldr	r2, [pc, #128]	; (800730c <HAL_I2C_MspInit+0xec>)
 800728a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800728e:	6413      	str	r3, [r2, #64]	; 0x40
 8007290:	4b1e      	ldr	r3, [pc, #120]	; (800730c <HAL_I2C_MspInit+0xec>)
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800729c:	e030      	b.n	8007300 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <HAL_I2C_MspInit+0xf4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d12b      	bne.n	8007300 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	4b17      	ldr	r3, [pc, #92]	; (800730c <HAL_I2C_MspInit+0xec>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	4a16      	ldr	r2, [pc, #88]	; (800730c <HAL_I2C_MspInit+0xec>)
 80072b2:	f043 0320 	orr.w	r3, r3, #32
 80072b6:	6313      	str	r3, [r2, #48]	; 0x30
 80072b8:	4b14      	ldr	r3, [pc, #80]	; (800730c <HAL_I2C_MspInit+0xec>)
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80072c4:	2303      	movs	r3, #3
 80072c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072c8:	2312      	movs	r3, #18
 80072ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072cc:	2301      	movs	r3, #1
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d0:	2303      	movs	r3, #3
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80072d4:	2304      	movs	r3, #4
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80072d8:	f107 031c 	add.w	r3, r7, #28
 80072dc:	4619      	mov	r1, r3
 80072de:	480e      	ldr	r0, [pc, #56]	; (8007318 <HAL_I2C_MspInit+0xf8>)
 80072e0:	f7f9 fcb2 	bl	8000c48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	4b08      	ldr	r3, [pc, #32]	; (800730c <HAL_I2C_MspInit+0xec>)
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	4a07      	ldr	r2, [pc, #28]	; (800730c <HAL_I2C_MspInit+0xec>)
 80072ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072f2:	6413      	str	r3, [r2, #64]	; 0x40
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <HAL_I2C_MspInit+0xec>)
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
}
 8007300:	bf00      	nop
 8007302:	3730      	adds	r7, #48	; 0x30
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40005400 	.word	0x40005400
 800730c:	40023800 	.word	0x40023800
 8007310:	40020400 	.word	0x40020400
 8007314:	40005800 	.word	0x40005800
 8007318:	40021400 	.word	0x40021400

0800731c <F_I2C2_WriteRegister>:
/* USER CODE BEGIN 1 */
/** I2C2 *****/
/**
 * Write a single value in a slave register
 */
uint8_t F_I2C2_WriteRegister(uint8_t slave_addr, uint16_t register_addr, uint8_t *value, uint8_t size){
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	603a      	str	r2, [r7, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	4603      	mov	r3, r0
 8007328:	71fb      	strb	r3, [r7, #7]
 800732a:	460b      	mov	r3, r1
 800732c:	80bb      	strh	r3, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = I2C_STATUS_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	72bb      	strb	r3, [r7, #10]
	uint32_t timeout = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	72fb      	strb	r3, [r7, #11]

    // Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 800733e:	4b38      	ldr	r3, [pc, #224]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a37      	ldr	r2, [pc, #220]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007348:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 800734a:	e002      	b.n	8007352 <F_I2C2_WriteRegister+0x36>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8007352:	4b33      	ldr	r3, [pc, #204]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f6      	beq.n	800734c <F_I2C2_WriteRegister+0x30>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	4a2f      	ldr	r2, [pc, #188]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 8007362:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007366:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8007368:	e002      	b.n	8007370 <F_I2C2_WriteRegister+0x54>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8007370:	4b2b      	ldr	r3, [pc, #172]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0f6      	beq.n	800736a <F_I2C2_WriteRegister+0x4e>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 800737c:	4b28      	ldr	r3, [pc, #160]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 8007382:	88bb      	ldrh	r3, [r7, #4]
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	b29b      	uxth	r3, r3
 8007388:	b2da      	uxtb	r2, r3
 800738a:	4b25      	ldr	r3, [pc, #148]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 800738c:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 800738e:	bf00      	nop
 8007390:	4b23      	ldr	r3, [pc, #140]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007398:	2b00      	cmp	r3, #0
 800739a:	d105      	bne.n	80073a8 <F_I2C2_WriteRegister+0x8c>
 800739c:	4b20      	ldr	r3, [pc, #128]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f3      	beq.n	8007390 <F_I2C2_WriteRegister+0x74>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 80073a8:	88bb      	ldrh	r3, [r7, #4]
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 80073ae:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80073b0:	bf00      	nop
 80073b2:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <F_I2C2_WriteRegister+0xae>
 80073be:	4b18      	ldr	r3, [pc, #96]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f3      	beq.n	80073b2 <F_I2C2_WriteRegister+0x96>

	for(i=0;i<size;i++)
 80073ca:	2300      	movs	r3, #0
 80073cc:	72fb      	strb	r3, [r7, #11]
 80073ce:	e015      	b.n	80073fc <F_I2C2_WriteRegister+0xe0>
	{

		// Send new value to write to the register
		I2C2->DR = value[i];
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	4413      	add	r3, r2
 80073d6:	781a      	ldrb	r2, [r3, #0]
 80073d8:	4b11      	ldr	r3, [pc, #68]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 80073da:	611a      	str	r2, [r3, #16]
		while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80073dc:	bf00      	nop
 80073de:	4b10      	ldr	r3, [pc, #64]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <F_I2C2_WriteRegister+0xda>
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f3      	beq.n	80073de <F_I2C2_WriteRegister+0xc2>
	for(i=0;i<size;i++)
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	3301      	adds	r3, #1
 80073fa:	72fb      	strb	r3, [r7, #11]
 80073fc:	7afa      	ldrb	r2, [r7, #11]
 80073fe:	79bb      	ldrb	r3, [r7, #6]
 8007400:	429a      	cmp	r2, r3
 8007402:	d3e5      	bcc.n	80073d0 <F_I2C2_WriteRegister+0xb4>

	}

	I2C2->CR1 |= I2C_CR1_STOP; // send STOP bit
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a05      	ldr	r2, [pc, #20]	; (8007420 <F_I2C2_WriteRegister+0x104>)
 800740a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800740e:	6013      	str	r3, [r2, #0]
	return i2c_status;
 8007410:	7abb      	ldrb	r3, [r7, #10]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40005800 	.word	0x40005800

08007424 <F_I2C2_ReadRegisterVL53L1X>:
	return i2c_status;
}


// Read x value from the device
uint8_t F_I2C2_ReadRegisterVL53L1X(uint8_t slave_addr, uint16_t register_addr, uint8_t nb_value_to_read, uint8_t *value_read){
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	4603      	mov	r3, r0
 800742e:	71fb      	strb	r3, [r7, #7]
 8007430:	460b      	mov	r3, r1
 8007432:	80bb      	strh	r3, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = 0;	// Init return value to error
 8007438:	2300      	movs	r3, #0
 800743a:	72bb      	strb	r3, [r7, #10]
	uint8_t status = I2C_STATUS_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	727b      	strb	r3, [r7, #9]
	int timeout=0;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]

	uint8_t i = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	72fb      	strb	r3, [r7, #11]

	// Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 8007448:	4b4e      	ldr	r3, [pc, #312]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a4d      	ldr	r2, [pc, #308]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800744e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007452:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8007454:	e002      	b.n	800745c <F_I2C2_ReadRegisterVL53L1X+0x38>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 800745c:	4b49      	ldr	r3, [pc, #292]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f6      	beq.n	8007456 <F_I2C2_ReadRegisterVL53L1X+0x32>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	4a46      	ldr	r2, [pc, #280]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800746c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007470:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8007472:	e002      	b.n	800747a <F_I2C2_ReadRegisterVL53L1X+0x56>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 800747a:	4b42      	ldr	r3, [pc, #264]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f6      	beq.n	8007474 <F_I2C2_ReadRegisterVL53L1X+0x50>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 8007486:	4b3f      	ldr	r3, [pc, #252]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 800748c:	88bb      	ldrh	r3, [r7, #4]
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	b29b      	uxth	r3, r3
 8007492:	b2da      	uxtb	r2, r3
 8007494:	4b3b      	ldr	r3, [pc, #236]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007496:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8007498:	bf00      	nop
 800749a:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <F_I2C2_ReadRegisterVL53L1X+0x8e>
 80074a6:	4b37      	ldr	r3, [pc, #220]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f3      	beq.n	800749a <F_I2C2_ReadRegisterVL53L1X+0x76>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 80074b2:	88bb      	ldrh	r3, [r7, #4]
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	4b33      	ldr	r3, [pc, #204]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074b8:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80074ba:	bf00      	nop
 80074bc:	4b31      	ldr	r3, [pc, #196]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <F_I2C2_ReadRegisterVL53L1X+0xb0>
 80074c8:	4b2e      	ldr	r3, [pc, #184]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f3      	beq.n	80074bc <F_I2C2_ReadRegisterVL53L1X+0x98>


	// Send repeated start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 80074d4:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a2a      	ldr	r2, [pc, #168]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074de:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB));	// wait for START condition (SB=1)
 80074e0:	bf00      	nop
 80074e2:	4b28      	ldr	r3, [pc, #160]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f9      	beq.n	80074e2 <F_I2C2_ReadRegisterVL53L1X+0xbe>

	timeout=0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C2->DR = slave_addr | 1;	// address + read
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	4b22      	ldr	r3, [pc, #136]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80074fc:	611a      	str	r2, [r3, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 80074fe:	e002      	b.n	8007506 <F_I2C2_ReadRegisterVL53L1X+0xe2>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 8007506:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f6      	beq.n	8007500 <F_I2C2_ReadRegisterVL53L1X+0xdc>
	}
	i2c_status = I2C2->SR2; // read status to clear flag
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	72bb      	strb	r3, [r7, #10]


	// prepare ACK
	I2C2->CR1 |= I2C_CR1_ACK;
 8007518:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a19      	ldr	r2, [pc, #100]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800751e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007522:	6013      	str	r3, [r2, #0]

	for(i=0;i<nb_value_to_read;i++)
 8007524:	2300      	movs	r3, #0
 8007526:	72fb      	strb	r3, [r7, #11]
 8007528:	e01b      	b.n	8007562 <F_I2C2_ReadRegisterVL53L1X+0x13e>
	{

		// If this is the last byte to receive
		if((i+1) >= nb_value_to_read)
 800752a:	7afb      	ldrb	r3, [r7, #11]
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	79bb      	ldrb	r3, [r7, #6]
 8007530:	429a      	cmp	r2, r3
 8007532:	db05      	blt.n	8007540 <F_I2C2_ReadRegisterVL53L1X+0x11c>
		{
			// prepare NACK
			I2C2->CR1 &= ~I2C_CR1_ACK;
 8007534:	4b13      	ldr	r3, [pc, #76]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a12      	ldr	r2, [pc, #72]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800753a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800753e:	6013      	str	r3, [r2, #0]
		}

		// Wait for Data available
			while (!(I2C2->SR1 & I2C_SR1_RXNE));
 8007540:	bf00      	nop
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f9      	beq.n	8007542 <F_I2C2_ReadRegisterVL53L1X+0x11e>
			value_read[i] = I2C2->DR; 			// Address in chip -> DR & write
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007550:	6919      	ldr	r1, [r3, #16]
 8007552:	7afb      	ldrb	r3, [r7, #11]
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	4413      	add	r3, r2
 8007558:	b2ca      	uxtb	r2, r1
 800755a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<nb_value_to_read;i++)
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	3301      	adds	r3, #1
 8007560:	72fb      	strb	r3, [r7, #11]
 8007562:	7afa      	ldrb	r2, [r7, #11]
 8007564:	79bb      	ldrb	r3, [r7, #6]
 8007566:	429a      	cmp	r2, r3
 8007568:	d3df      	bcc.n	800752a <F_I2C2_ReadRegisterVL53L1X+0x106>
	}


	// send STOP bit
	I2C2->CR1 |= I2C_CR1_STOP;
 800756a:	4b06      	ldr	r3, [pc, #24]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a05      	ldr	r2, [pc, #20]	; (8007584 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8007570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007574:	6013      	str	r3, [r2, #0]
	return status;
 8007576:	7a7b      	ldrb	r3, [r7, #9]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40005800 	.word	0x40005800

08007588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800758c:	f7f9 f9b6 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007590:	f000 f832 	bl	80075f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007594:	f7ff fc4e 	bl	8006e34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007598:	f7ff fdc2 	bl	8007120 <MX_I2C1_Init>
  MX_I2C2_Init();
 800759c:	f7ff fe00 	bl	80071a0 <MX_I2C2_Init>
  MX_TIM2_Init();
 80075a0:	f000 f9e4 	bl	800796c <MX_TIM2_Init>
  MX_TIM3_Init();
 80075a4:	f000 fa3e 	bl	8007a24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80075a8:	f000 fa9a 	bl	8007ae0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80075ac:	f000 fc3e 	bl	8007e2c <MX_USART3_UART_Init>
#if USE_TCP_SERVER == 1
  MX_LWIP_Init();
#endif
  MX_USB_DEVICE_Init();
 80075b0:	f000 fcae 	bl	8007f10 <MX_USB_DEVICE_Init>
  MX_TIM13_Init();
 80075b4:	f000 faf8 	bl	8007ba8 <MX_TIM13_Init>

  /* USER CODE BEGIN 2 */
#if PRINTF_USB_UART == 1
  printf("Initializing the VL53L1X sensors....\r\n");
 80075b8:	480b      	ldr	r0, [pc, #44]	; (80075e8 <main+0x60>)
 80075ba:	f001 fb25 	bl	8008c08 <puts>
#endif
  F_VL53L1X_InitSensors();
 80075be:	f7ff fbb9 	bl	8006d34 <F_VL53L1X_InitSensors>

  TIM13->DIER |= TIM_DIER_UIE;	// Enable interrupt
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <main+0x64>)
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	4a09      	ldr	r2, [pc, #36]	; (80075ec <main+0x64>)
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	60d3      	str	r3, [r2, #12]
  TIM13->CR1 |= TIM_CR1_CEN;
 80075ce:	4b07      	ldr	r3, [pc, #28]	; (80075ec <main+0x64>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a06      	ldr	r2, [pc, #24]	; (80075ec <main+0x64>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	6013      	str	r3, [r2, #0]

    // Initialize the TCP Echo Server
#if PRINTF_USB_UART == 1
  printf("Initializing the TCP server....\r\n");
 80075da:	4805      	ldr	r0, [pc, #20]	; (80075f0 <main+0x68>)
 80075dc:	f001 fb14 	bl	8008c08 <puts>
#if USE_TCP_SERVER == 1
      tcp_server_init();
#endif

#if PRINTF_USB_UART == 1
  printf("Entering the infinite loop....\r\n");
 80075e0:	4804      	ldr	r0, [pc, #16]	; (80075f4 <main+0x6c>)
 80075e2:	f001 fb11 	bl	8008c08 <puts>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075e6:	e7fe      	b.n	80075e6 <main+0x5e>
 80075e8:	080092e8 	.word	0x080092e8
 80075ec:	40001c00 	.word	0x40001c00
 80075f0:	08009310 	.word	0x08009310
 80075f4:	08009334 	.word	0x08009334

080075f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b094      	sub	sp, #80	; 0x50
 80075fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075fe:	f107 0320 	add.w	r3, r7, #32
 8007602:	2230      	movs	r2, #48	; 0x30
 8007604:	2100      	movs	r1, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f001 f9f2 	bl	80089f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800760c:	f107 030c 	add.w	r3, r7, #12
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	609a      	str	r2, [r3, #8]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800761c:	2300      	movs	r3, #0
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	4b28      	ldr	r3, [pc, #160]	; (80076c4 <SystemClock_Config+0xcc>)
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <SystemClock_Config+0xcc>)
 8007626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800762a:	6413      	str	r3, [r2, #64]	; 0x40
 800762c:	4b25      	ldr	r3, [pc, #148]	; (80076c4 <SystemClock_Config+0xcc>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007638:	2300      	movs	r3, #0
 800763a:	607b      	str	r3, [r7, #4]
 800763c:	4b22      	ldr	r3, [pc, #136]	; (80076c8 <SystemClock_Config+0xd0>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <SystemClock_Config+0xd0>)
 8007642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <SystemClock_Config+0xd0>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007654:	2301      	movs	r3, #1
 8007656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800765e:	2302      	movs	r3, #2
 8007660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007668:	2304      	movs	r3, #4
 800766a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800766c:	23a8      	movs	r3, #168	; 0xa8
 800766e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007670:	2302      	movs	r3, #2
 8007672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007674:	2307      	movs	r3, #7
 8007676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007678:	f107 0320 	add.w	r3, r7, #32
 800767c:	4618      	mov	r0, r3
 800767e:	f7fa ffd5 	bl	800262c <HAL_RCC_OscConfig>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007688:	f000 f820 	bl	80076cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800768c:	230f      	movs	r3, #15
 800768e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007690:	2302      	movs	r3, #2
 8007692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800769c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800769e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80076a4:	f107 030c 	add.w	r3, r7, #12
 80076a8:	2105      	movs	r1, #5
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fb fa00 	bl	8002ab0 <HAL_RCC_ClockConfig>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80076b6:	f000 f809 	bl	80076cc <Error_Handler>
  }
}
 80076ba:	bf00      	nop
 80076bc:	3750      	adds	r7, #80	; 0x50
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40007000 	.word	0x40007000

080076cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076d0:	bf00      	nop
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
	...

080076dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <HAL_MspInit+0x4c>)
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	4a0f      	ldr	r2, [pc, #60]	; (8007728 <HAL_MspInit+0x4c>)
 80076ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076f0:	6453      	str	r3, [r2, #68]	; 0x44
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <HAL_MspInit+0x4c>)
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076fe:	2300      	movs	r3, #0
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <HAL_MspInit+0x4c>)
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	4a08      	ldr	r2, [pc, #32]	; (8007728 <HAL_MspInit+0x4c>)
 8007708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800770c:	6413      	str	r3, [r2, #64]	; 0x40
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_MspInit+0x4c>)
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40023800 	.word	0x40023800

0800772c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007730:	bf00      	nop
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800773a:	b480      	push	{r7}
 800773c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800773e:	e7fe      	b.n	800773e <HardFault_Handler+0x4>

08007740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007744:	e7fe      	b.n	8007744 <MemManage_Handler+0x4>

08007746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007746:	b480      	push	{r7}
 8007748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800774a:	e7fe      	b.n	800774a <BusFault_Handler+0x4>

0800774c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007750:	e7fe      	b.n	8007750 <UsageFault_Handler+0x4>

08007752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007752:	b480      	push	{r7}
 8007754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007756:	bf00      	nop
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007764:	bf00      	nop
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800776e:	b480      	push	{r7}
 8007770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007772:	bf00      	nop
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007780:	f7f9 f90e 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007784:	bf00      	nop
 8007786:	bd80      	pop	{r7, pc}

08007788 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(TIM13->SR & TIM_SR_UIF)
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <TIM8_UP_TIM13_IRQHandler+0x38>)
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00e      	beq.n	80077b6 <TIM8_UP_TIM13_IRQHandler+0x2e>
	{
		  // Clear interrupt
		  F_VL53L1X_CheckSensors();
 8007798:	f7ff fb22 	bl	8006de0 <F_VL53L1X_CheckSensors>

		  if(i == 10)
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b0a      	cmp	r3, #10
 80077a2:	d102      	bne.n	80077aa <TIM8_UP_TIM13_IRQHandler+0x22>
		  {

			  i = 0;
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
		  }

		  i++;
 80077aa:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80077b4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80077b6:	4804      	ldr	r0, [pc, #16]	; (80077c8 <TIM8_UP_TIM13_IRQHandler+0x40>)
 80077b8:	f7fb fbe9 	bl	8002f8e <HAL_TIM_IRQHandler>


  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40001c00 	.word	0x40001c00
 80077c4:	20000200 	.word	0x20000200
 80077c8:	2000034c 	.word	0x2000034c

080077cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80077d0:	4802      	ldr	r0, [pc, #8]	; (80077dc <OTG_FS_IRQHandler+0x10>)
 80077d2:	f7f9 fef0 	bl	80015b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80077d6:	bf00      	nop
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	200016a8 	.word	0x200016a8

080077e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	e00a      	b.n	8007808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80077f2:	f000 fbbd 	bl	8007f70 <__io_getchar>
 80077f6:	4601      	mov	r1, r0
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	60ba      	str	r2, [r7, #8]
 80077fe:	b2ca      	uxtb	r2, r1
 8007800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	3301      	adds	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	dbf0      	blt.n	80077f2 <_read+0x12>
	}


return len;
 8007810:	687b      	ldr	r3, [r7, #4]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <_write>:

int _write(int file, char *ptr, int len)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
	int DataIdx;

#if PRINTF_USB_UART == 1
	CDC_Transmit_FS((uint8_t *)ptr, (uint16_t)len);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	b29b      	uxth	r3, r3
 800782a:	4619      	mov	r1, r3
 800782c:	68b8      	ldr	r0, [r7, #8]
 800782e:	f000 fc3f 	bl	80080b0 <CDC_Transmit_FS>
			__io_putchar(*ptr++);
		}
#endif


	return len;
 8007832:	687b      	ldr	r3, [r7, #4]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_close>:

int _close(int file)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	return -1;
 8007844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007864:	605a      	str	r2, [r3, #4]
	return 0;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <_isatty>:

int _isatty(int file)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	return 1;
 800787c:	2301      	movs	r3, #1
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
	return 0;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <_sbrk+0x50>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <_sbrk+0x16>
		heap_end = &end;
 80078b4:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <_sbrk+0x50>)
 80078b6:	4a10      	ldr	r2, [pc, #64]	; (80078f8 <_sbrk+0x54>)
 80078b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80078ba:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <_sbrk+0x50>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80078c0:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <_sbrk+0x50>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4413      	add	r3, r2
 80078c8:	466a      	mov	r2, sp
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d905      	bls.n	80078da <_sbrk+0x36>
	{
		errno = ENOMEM;
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <_sbrk+0x58>)
 80078d0:	220c      	movs	r2, #12
 80078d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80078d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d8:	e006      	b.n	80078e8 <_sbrk+0x44>
	}

	heap_end += incr;
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <_sbrk+0x50>)
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4413      	add	r3, r2
 80078e2:	4a04      	ldr	r2, [pc, #16]	; (80078f4 <_sbrk+0x50>)
 80078e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80078e6:	68fb      	ldr	r3, [r7, #12]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	20000204 	.word	0x20000204
 80078f8:	20001cb8 	.word	0x20001cb8
 80078fc:	20001cb0 	.word	0x20001cb0

08007900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007904:	4b16      	ldr	r3, [pc, #88]	; (8007960 <SystemInit+0x60>)
 8007906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <SystemInit+0x60>)
 800790c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007914:	4b13      	ldr	r3, [pc, #76]	; (8007964 <SystemInit+0x64>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a12      	ldr	r2, [pc, #72]	; (8007964 <SystemInit+0x64>)
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <SystemInit+0x64>)
 8007922:	2200      	movs	r2, #0
 8007924:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <SystemInit+0x64>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a0e      	ldr	r2, [pc, #56]	; (8007964 <SystemInit+0x64>)
 800792c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007934:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <SystemInit+0x64>)
 8007938:	4a0b      	ldr	r2, [pc, #44]	; (8007968 <SystemInit+0x68>)
 800793a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <SystemInit+0x64>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a08      	ldr	r2, [pc, #32]	; (8007964 <SystemInit+0x64>)
 8007942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007946:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <SystemInit+0x64>)
 800794a:	2200      	movs	r2, #0
 800794c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <SystemInit+0x60>)
 8007950:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007954:	609a      	str	r2, [r3, #8]
#endif
}
 8007956:	bf00      	nop
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	e000ed00 	.word	0xe000ed00
 8007964:	40023800 	.word	0x40023800
 8007968:	24003010 	.word	0x24003010

0800796c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007972:	f107 0310 	add.w	r3, r7, #16
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800797c:	463b      	mov	r3, r7
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	605a      	str	r2, [r3, #4]
 8007984:	609a      	str	r2, [r3, #8]
 8007986:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8007988:	4b25      	ldr	r3, [pc, #148]	; (8007a20 <MX_TIM2_Init+0xb4>)
 800798a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800798e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007990:	4b23      	ldr	r3, [pc, #140]	; (8007a20 <MX_TIM2_Init+0xb4>)
 8007992:	2200      	movs	r2, #0
 8007994:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007996:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <MX_TIM2_Init+0xb4>)
 8007998:	2200      	movs	r2, #0
 800799a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800799c:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <MX_TIM2_Init+0xb4>)
 800799e:	2200      	movs	r2, #0
 80079a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079a2:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <MX_TIM2_Init+0xb4>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079a8:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <MX_TIM2_Init+0xb4>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80079ae:	481c      	ldr	r0, [pc, #112]	; (8007a20 <MX_TIM2_Init+0xb4>)
 80079b0:	f7fb fac2 	bl	8002f38 <HAL_TIM_IC_Init>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80079ba:	f7ff fe87 	bl	80076cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079be:	2300      	movs	r3, #0
 80079c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80079c6:	f107 0310 	add.w	r3, r7, #16
 80079ca:	4619      	mov	r1, r3
 80079cc:	4814      	ldr	r0, [pc, #80]	; (8007a20 <MX_TIM2_Init+0xb4>)
 80079ce:	f7fc f8f5 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80079d8:	f7ff fe78 	bl	80076cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80079dc:	2300      	movs	r3, #0
 80079de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80079e0:	2301      	movs	r3, #1
 80079e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80079e4:	2300      	movs	r3, #0
 80079e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80079ec:	463b      	mov	r3, r7
 80079ee:	2200      	movs	r2, #0
 80079f0:	4619      	mov	r1, r3
 80079f2:	480b      	ldr	r0, [pc, #44]	; (8007a20 <MX_TIM2_Init+0xb4>)
 80079f4:	f7fb fbd3 	bl	800319e <HAL_TIM_IC_ConfigChannel>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80079fe:	f7ff fe65 	bl	80076cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007a02:	463b      	mov	r3, r7
 8007a04:	2204      	movs	r2, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4805      	ldr	r0, [pc, #20]	; (8007a20 <MX_TIM2_Init+0xb4>)
 8007a0a:	f7fb fbc8 	bl	800319e <HAL_TIM_IC_ConfigChannel>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8007a14:	f7ff fe5a 	bl	80076cc <Error_Handler>
  }

}
 8007a18:	bf00      	nop
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	2000038c 	.word	0x2000038c

08007a24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007a34:	463b      	mov	r3, r7
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	605a      	str	r2, [r3, #4]
 8007a3c:	609a      	str	r2, [r3, #8]
 8007a3e:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8007a40:	4b25      	ldr	r3, [pc, #148]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a42:	4a26      	ldr	r2, [pc, #152]	; (8007adc <MX_TIM3_Init+0xb8>)
 8007a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007a46:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a4c:	4b22      	ldr	r3, [pc, #136]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8007a52:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a58:	4b1f      	ldr	r3, [pc, #124]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8007a64:	481c      	ldr	r0, [pc, #112]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a66:	f7fb fa67 	bl	8002f38 <HAL_TIM_IC_Init>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8007a70:	f7ff fe2c 	bl	80076cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a74:	2300      	movs	r3, #0
 8007a76:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007a7c:	f107 0310 	add.w	r3, r7, #16
 8007a80:	4619      	mov	r1, r3
 8007a82:	4815      	ldr	r0, [pc, #84]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007a84:	f7fc f89a 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8007a8e:	f7ff fe1d 	bl	80076cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007a92:	2300      	movs	r3, #0
 8007a94:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007a96:	2301      	movs	r3, #1
 8007a98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	480b      	ldr	r0, [pc, #44]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007aaa:	f7fb fb78 	bl	800319e <HAL_TIM_IC_ConfigChannel>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8007ab4:	f7ff fe0a 	bl	80076cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007ab8:	463b      	mov	r3, r7
 8007aba:	2204      	movs	r2, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4806      	ldr	r0, [pc, #24]	; (8007ad8 <MX_TIM3_Init+0xb4>)
 8007ac0:	f7fb fb6d 	bl	800319e <HAL_TIM_IC_ConfigChannel>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8007aca:	f7ff fdff 	bl	80076cc <Error_Handler>
  }

}
 8007ace:	bf00      	nop
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	2000030c 	.word	0x2000030c
 8007adc:	40000400 	.word	0x40000400

08007ae0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	; 0x28
 8007ae4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ae6:	f107 0320 	add.w	r3, r7, #32
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007af0:	1d3b      	adds	r3, r7, #4
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	605a      	str	r2, [r3, #4]
 8007af8:	609a      	str	r2, [r3, #8]
 8007afa:	60da      	str	r2, [r3, #12]
 8007afc:	611a      	str	r2, [r3, #16]
 8007afe:	615a      	str	r2, [r3, #20]
 8007b00:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8007b02:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b04:	4a27      	ldr	r2, [pc, #156]	; (8007ba4 <MX_TIM4_Init+0xc4>)
 8007b06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8007b08:	4b25      	ldr	r3, [pc, #148]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b0e:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8007b14:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b1a:	4b21      	ldr	r3, [pc, #132]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b20:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007b26:	481e      	ldr	r0, [pc, #120]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b28:	f7fb f9db 	bl	8002ee2 <HAL_TIM_PWM_Init>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8007b32:	f7ff fdcb 	bl	80076cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b36:	2300      	movs	r3, #0
 8007b38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007b3e:	f107 0320 	add.w	r3, r7, #32
 8007b42:	4619      	mov	r1, r3
 8007b44:	4816      	ldr	r0, [pc, #88]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b46:	f7fc f839 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8007b50:	f7ff fdbc 	bl	80076cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b54:	2360      	movs	r3, #96	; 0x60
 8007b56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007b64:	1d3b      	adds	r3, r7, #4
 8007b66:	2208      	movs	r2, #8
 8007b68:	4619      	mov	r1, r3
 8007b6a:	480d      	ldr	r0, [pc, #52]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b6c:	f7fb fbb4 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8007b76:	f7ff fda9 	bl	80076cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	220c      	movs	r2, #12
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4807      	ldr	r0, [pc, #28]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b82:	f7fb fba9 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007b8c:	f7ff fd9e 	bl	80076cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8007b90:	4803      	ldr	r0, [pc, #12]	; (8007ba0 <MX_TIM4_Init+0xc0>)
 8007b92:	f000 f911 	bl	8007db8 <HAL_TIM_MspPostInit>

}
 8007b96:	bf00      	nop
 8007b98:	3728      	adds	r7, #40	; 0x28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200002cc 	.word	0x200002cc
 8007ba4:	40000800 	.word	0x40000800

08007ba8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <MX_TIM13_Init+0x40>)
 8007bae:	4a0f      	ldr	r2, [pc, #60]	; (8007bec <MX_TIM13_Init+0x44>)
 8007bb0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400;
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <MX_TIM13_Init+0x40>)
 8007bb4:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8007bb8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bba:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <MX_TIM13_Init+0x40>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <MX_TIM13_Init+0x40>)
 8007bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bc6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <MX_TIM13_Init+0x40>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <MX_TIM13_Init+0x40>)
 8007bd0:	2280      	movs	r2, #128	; 0x80
 8007bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007bd4:	4804      	ldr	r0, [pc, #16]	; (8007be8 <MX_TIM13_Init+0x40>)
 8007bd6:	f7fb f959 	bl	8002e8c <HAL_TIM_Base_Init>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8007be0:	f7ff fd74 	bl	80076cc <Error_Handler>
  }

}
 8007be4:	bf00      	nop
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	2000034c 	.word	0x2000034c
 8007bec:	40001c00 	.word	0x40001c00

08007bf0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08c      	sub	sp, #48	; 0x30
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bf8:	f107 031c 	add.w	r3, r7, #28
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	605a      	str	r2, [r3, #4]
 8007c02:	609a      	str	r2, [r3, #8]
 8007c04:	60da      	str	r2, [r3, #12]
 8007c06:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c10:	d14b      	bne.n	8007caa <HAL_TIM_IC_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c12:	2300      	movs	r3, #0
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	4b3f      	ldr	r3, [pc, #252]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	4a3e      	ldr	r2, [pc, #248]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c1c:	f043 0301 	orr.w	r3, r3, #1
 8007c20:	6413      	str	r3, [r2, #64]	; 0x40
 8007c22:	4b3c      	ldr	r3, [pc, #240]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	4b38      	ldr	r3, [pc, #224]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c36:	4a37      	ldr	r2, [pc, #220]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c3e:	4b35      	ldr	r3, [pc, #212]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	4b31      	ldr	r3, [pc, #196]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	4a30      	ldr	r2, [pc, #192]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	6313      	str	r3, [r2, #48]	; 0x30
 8007c5a:	4b2e      	ldr	r3, [pc, #184]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c74:	2300      	movs	r3, #0
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c7c:	f107 031c 	add.w	r3, r7, #28
 8007c80:	4619      	mov	r1, r3
 8007c82:	4825      	ldr	r0, [pc, #148]	; (8007d18 <HAL_TIM_IC_MspInit+0x128>)
 8007c84:	f7f8 ffe0 	bl	8000c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007c88:	2308      	movs	r3, #8
 8007c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c94:	2300      	movs	r3, #0
 8007c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c9c:	f107 031c 	add.w	r3, r7, #28
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	481e      	ldr	r0, [pc, #120]	; (8007d1c <HAL_TIM_IC_MspInit+0x12c>)
 8007ca4:	f7f8 ffd0 	bl	8000c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007ca8:	e030      	b.n	8007d0c <HAL_TIM_IC_MspInit+0x11c>
  else if(tim_icHandle->Instance==TIM3)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1c      	ldr	r2, [pc, #112]	; (8007d20 <HAL_TIM_IC_MspInit+0x130>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d12b      	bne.n	8007d0c <HAL_TIM_IC_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	4a15      	ldr	r2, [pc, #84]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007cbe:	f043 0302 	orr.w	r3, r3, #2
 8007cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8007cc4:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60bb      	str	r3, [r7, #8]
 8007cd4:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007cda:	f043 0302 	orr.w	r3, r3, #2
 8007cde:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <HAL_TIM_IC_MspInit+0x124>)
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	60bb      	str	r3, [r7, #8]
 8007cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007cec:	2330      	movs	r3, #48	; 0x30
 8007cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d00:	f107 031c 	add.w	r3, r7, #28
 8007d04:	4619      	mov	r1, r3
 8007d06:	4805      	ldr	r0, [pc, #20]	; (8007d1c <HAL_TIM_IC_MspInit+0x12c>)
 8007d08:	f7f8 ff9e 	bl	8000c48 <HAL_GPIO_Init>
}
 8007d0c:	bf00      	nop
 8007d0e:	3730      	adds	r7, #48	; 0x30
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40023800 	.word	0x40023800
 8007d18:	40020000 	.word	0x40020000
 8007d1c:	40020400 	.word	0x40020400
 8007d20:	40000400 	.word	0x40000400

08007d24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0b      	ldr	r2, [pc, #44]	; (8007d60 <HAL_TIM_PWM_MspInit+0x3c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10d      	bne.n	8007d52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <HAL_TIM_PWM_MspInit+0x40>)
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <HAL_TIM_PWM_MspInit+0x40>)
 8007d40:	f043 0304 	orr.w	r3, r3, #4
 8007d44:	6413      	str	r3, [r2, #64]	; 0x40
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <HAL_TIM_PWM_MspInit+0x40>)
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007d52:	bf00      	nop
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40000800 	.word	0x40000800
 8007d64:	40023800 	.word	0x40023800

08007d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a0e      	ldr	r2, [pc, #56]	; (8007db0 <HAL_TIM_Base_MspInit+0x48>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d115      	bne.n	8007da6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <HAL_TIM_Base_MspInit+0x4c>)
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	4a0c      	ldr	r2, [pc, #48]	; (8007db4 <HAL_TIM_Base_MspInit+0x4c>)
 8007d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d88:	6413      	str	r3, [r2, #64]	; 0x40
 8007d8a:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <HAL_TIM_Base_MspInit+0x4c>)
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8007d96:	2200      	movs	r2, #0
 8007d98:	2105      	movs	r1, #5
 8007d9a:	202c      	movs	r0, #44	; 0x2c
 8007d9c:	f7f8 ff1d 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007da0:	202c      	movs	r0, #44	; 0x2c
 8007da2:	f7f8 ff36 	bl	8000c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40001c00 	.word	0x40001c00
 8007db4:	40023800 	.word	0x40023800

08007db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dc0:	f107 030c 	add.w	r3, r7, #12
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	605a      	str	r2, [r3, #4]
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	60da      	str	r2, [r3, #12]
 8007dce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a12      	ldr	r2, [pc, #72]	; (8007e20 <HAL_TIM_MspPostInit+0x68>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d11e      	bne.n	8007e18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60bb      	str	r3, [r7, #8]
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <HAL_TIM_MspPostInit+0x6c>)
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	4a10      	ldr	r2, [pc, #64]	; (8007e24 <HAL_TIM_MspPostInit+0x6c>)
 8007de4:	f043 0308 	orr.w	r3, r3, #8
 8007de8:	6313      	str	r3, [r2, #48]	; 0x30
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <HAL_TIM_MspPostInit+0x6c>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	60bb      	str	r3, [r7, #8]
 8007df4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007df6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007dfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e0c:	f107 030c 	add.w	r3, r7, #12
 8007e10:	4619      	mov	r1, r3
 8007e12:	4805      	ldr	r0, [pc, #20]	; (8007e28 <HAL_TIM_MspPostInit+0x70>)
 8007e14:	f7f8 ff18 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007e18:	bf00      	nop
 8007e1a:	3720      	adds	r7, #32
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40000800 	.word	0x40000800
 8007e24:	40023800 	.word	0x40023800
 8007e28:	40020c00 	.word	0x40020c00

08007e2c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007e30:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e32:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <MX_USART3_UART_Init+0x50>)
 8007e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007e3e:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007e4a:	4b0b      	ldr	r3, [pc, #44]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e52:	220c      	movs	r2, #12
 8007e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e56:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007e62:	4805      	ldr	r0, [pc, #20]	; (8007e78 <MX_USART3_UART_Init+0x4c>)
 8007e64:	f7fb ff03 	bl	8003c6e <HAL_UART_Init>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007e6e:	f7ff fc2d 	bl	80076cc <Error_Handler>
  }

}
 8007e72:	bf00      	nop
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200003cc 	.word	0x200003cc
 8007e7c:	40004800 	.word	0x40004800

08007e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08a      	sub	sp, #40	; 0x28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e88:	f107 0314 	add.w	r3, r7, #20
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	609a      	str	r2, [r3, #8]
 8007e94:	60da      	str	r2, [r3, #12]
 8007e96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <HAL_UART_MspInit+0x84>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d12c      	bne.n	8007efc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <HAL_UART_MspInit+0x88>)
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <HAL_UART_MspInit+0x88>)
 8007eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <HAL_UART_MspInit+0x88>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eba:	613b      	str	r3, [r7, #16]
 8007ebc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <HAL_UART_MspInit+0x88>)
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	4a10      	ldr	r2, [pc, #64]	; (8007f08 <HAL_UART_MspInit+0x88>)
 8007ec8:	f043 0308 	orr.w	r3, r3, #8
 8007ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <HAL_UART_MspInit+0x88>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	f003 0308 	and.w	r3, r3, #8
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007eec:	2307      	movs	r3, #7
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4805      	ldr	r0, [pc, #20]	; (8007f0c <HAL_UART_MspInit+0x8c>)
 8007ef8:	f7f8 fea6 	bl	8000c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007efc:	bf00      	nop
 8007efe:	3728      	adds	r7, #40	; 0x28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	40004800 	.word	0x40004800
 8007f08:	40023800 	.word	0x40023800
 8007f0c:	40020c00 	.word	0x40020c00

08007f10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4912      	ldr	r1, [pc, #72]	; (8007f60 <MX_USB_DEVICE_Init+0x50>)
 8007f18:	4812      	ldr	r0, [pc, #72]	; (8007f64 <MX_USB_DEVICE_Init+0x54>)
 8007f1a:	f7fd feb1 	bl	8005c80 <USBD_Init>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f24:	f7ff fbd2 	bl	80076cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f28:	490f      	ldr	r1, [pc, #60]	; (8007f68 <MX_USB_DEVICE_Init+0x58>)
 8007f2a:	480e      	ldr	r0, [pc, #56]	; (8007f64 <MX_USB_DEVICE_Init+0x54>)
 8007f2c:	f7fd fed3 	bl	8005cd6 <USBD_RegisterClass>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f36:	f7ff fbc9 	bl	80076cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f3a:	490c      	ldr	r1, [pc, #48]	; (8007f6c <MX_USB_DEVICE_Init+0x5c>)
 8007f3c:	4809      	ldr	r0, [pc, #36]	; (8007f64 <MX_USB_DEVICE_Init+0x54>)
 8007f3e:	f7fd fe01 	bl	8005b44 <USBD_CDC_RegisterInterface>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f48:	f7ff fbc0 	bl	80076cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f4c:	4805      	ldr	r0, [pc, #20]	; (8007f64 <MX_USB_DEVICE_Init+0x54>)
 8007f4e:	f7fd fedc 	bl	8005d0a <USBD_Start>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f58:	f7ff fbb8 	bl	80076cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f5c:	bf00      	nop
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	2000012c 	.word	0x2000012c
 8007f64:	2000040c 	.word	0x2000040c
 8007f68:	20000014 	.word	0x20000014
 8007f6c:	2000011c 	.word	0x2000011c

08007f70 <__io_getchar>:
	CDC_Transmit_FS((uint8_t *)&ch, 1);

	return(ch);
}

int __io_getchar(void){
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0

  // Loop until the reception buffer is not empty
  while(!(USART6->SR & USART_SR_RXNE));
 8007f74:	bf00      	nop
 8007f76:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <__io_getchar+0x20>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0f9      	beq.n	8007f76 <__io_getchar+0x6>

  return((int)USART6->DR);
 8007f82:	4b03      	ldr	r3, [pc, #12]	; (8007f90 <__io_getchar+0x20>)
 8007f84:	685b      	ldr	r3, [r3, #4]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	40011400 	.word	0x40011400

08007f94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4905      	ldr	r1, [pc, #20]	; (8007fb0 <CDC_Init_FS+0x1c>)
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <CDC_Init_FS+0x20>)
 8007f9e:	f7fd fde8 	bl	8005b72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fa2:	4905      	ldr	r1, [pc, #20]	; (8007fb8 <CDC_Init_FS+0x24>)
 8007fa4:	4803      	ldr	r0, [pc, #12]	; (8007fb4 <CDC_Init_FS+0x20>)
 8007fa6:	f7fd fdfe 	bl	8005ba6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007faa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000ea8 	.word	0x20000ea8
 8007fb4:	2000040c 	.word	0x2000040c
 8007fb8:	200006a8 	.word	0x200006a8

08007fbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	2b23      	cmp	r3, #35	; 0x23
 8007fe0:	d84a      	bhi.n	8008078 <CDC_Control_FS+0xac>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <CDC_Control_FS+0x1c>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008079 	.word	0x08008079
 8007fec:	08008079 	.word	0x08008079
 8007ff0:	08008079 	.word	0x08008079
 8007ff4:	08008079 	.word	0x08008079
 8007ff8:	08008079 	.word	0x08008079
 8007ffc:	08008079 	.word	0x08008079
 8008000:	08008079 	.word	0x08008079
 8008004:	08008079 	.word	0x08008079
 8008008:	08008079 	.word	0x08008079
 800800c:	08008079 	.word	0x08008079
 8008010:	08008079 	.word	0x08008079
 8008014:	08008079 	.word	0x08008079
 8008018:	08008079 	.word	0x08008079
 800801c:	08008079 	.word	0x08008079
 8008020:	08008079 	.word	0x08008079
 8008024:	08008079 	.word	0x08008079
 8008028:	08008079 	.word	0x08008079
 800802c:	08008079 	.word	0x08008079
 8008030:	08008079 	.word	0x08008079
 8008034:	08008079 	.word	0x08008079
 8008038:	08008079 	.word	0x08008079
 800803c:	08008079 	.word	0x08008079
 8008040:	08008079 	.word	0x08008079
 8008044:	08008079 	.word	0x08008079
 8008048:	08008079 	.word	0x08008079
 800804c:	08008079 	.word	0x08008079
 8008050:	08008079 	.word	0x08008079
 8008054:	08008079 	.word	0x08008079
 8008058:	08008079 	.word	0x08008079
 800805c:	08008079 	.word	0x08008079
 8008060:	08008079 	.word	0x08008079
 8008064:	08008079 	.word	0x08008079
 8008068:	08008079 	.word	0x08008079
 800806c:	08008079 	.word	0x08008079
 8008070:	08008079 	.word	0x08008079
 8008074:	08008079 	.word	0x08008079
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008078:	bf00      	nop
  }

  return (USBD_OK);
 800807a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4805      	ldr	r0, [pc, #20]	; (80080ac <CDC_Receive_FS+0x24>)
 8008096:	f7fd fd86 	bl	8005ba6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800809a:	4804      	ldr	r0, [pc, #16]	; (80080ac <CDC_Receive_FS+0x24>)
 800809c:	f7fd fdc6 	bl	8005c2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2000040c 	.word	0x2000040c

080080b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080c0:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <CDC_Transmit_FS+0x48>)
 80080c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80080c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e00b      	b.n	80080ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080d6:	887b      	ldrh	r3, [r7, #2]
 80080d8:	461a      	mov	r2, r3
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	4806      	ldr	r0, [pc, #24]	; (80080f8 <CDC_Transmit_FS+0x48>)
 80080de:	f7fd fd48 	bl	8005b72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080e2:	4805      	ldr	r0, [pc, #20]	; (80080f8 <CDC_Transmit_FS+0x48>)
 80080e4:	f7fd fd73 	bl	8005bce <USBD_CDC_TransmitPacket>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	2000040c 	.word	0x2000040c

080080fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	; 0x28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	605a      	str	r2, [r3, #4]
 800810e:	609a      	str	r2, [r3, #8]
 8008110:	60da      	str	r2, [r3, #12]
 8008112:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800811c:	d147      	bne.n	80081ae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800811e:	2300      	movs	r3, #0
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008126:	4a24      	ldr	r2, [pc, #144]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 8008128:	f043 0301 	orr.w	r3, r3, #1
 800812c:	6313      	str	r3, [r2, #48]	; 0x30
 800812e:	4b22      	ldr	r3, [pc, #136]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800813a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800813e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008140:	2302      	movs	r3, #2
 8008142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008148:	2303      	movs	r3, #3
 800814a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800814c:	230a      	movs	r3, #10
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008150:	f107 0314 	add.w	r3, r7, #20
 8008154:	4619      	mov	r1, r3
 8008156:	4819      	ldr	r0, [pc, #100]	; (80081bc <HAL_PCD_MspInit+0xc0>)
 8008158:	f7f8 fd76 	bl	8000c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800815c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800816a:	f107 0314 	add.w	r3, r7, #20
 800816e:	4619      	mov	r1, r3
 8008170:	4812      	ldr	r0, [pc, #72]	; (80081bc <HAL_PCD_MspInit+0xc0>)
 8008172:	f7f8 fd69 	bl	8000c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008176:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	4a0f      	ldr	r2, [pc, #60]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 800817c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008180:	6353      	str	r3, [r2, #52]	; 0x34
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 8008188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818a:	4a0b      	ldr	r2, [pc, #44]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 800818c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008190:	6453      	str	r3, [r2, #68]	; 0x44
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <HAL_PCD_MspInit+0xbc>)
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	2043      	movs	r0, #67	; 0x43
 80081a4:	f7f8 fd19 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081a8:	2043      	movs	r0, #67	; 0x43
 80081aa:	f7f8 fd32 	bl	8000c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081ae:	bf00      	nop
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40023800 	.word	0x40023800
 80081bc:	40020000 	.word	0x40020000

080081c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7fd fde0 	bl	8005d9c <USBD_LL_SetupStage>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	4619      	mov	r1, r3
 800820e:	f7fd fe10 	bl	8005e32 <USBD_LL_DataOutStage>
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800822c:	78fa      	ldrb	r2, [r7, #3]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	3348      	adds	r3, #72	; 0x48
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	4619      	mov	r1, r3
 8008242:	f7fd fe67 	bl	8005f14 <USBD_LL_DataInStage>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800825c:	4618      	mov	r0, r3
 800825e:	f7fd ff75 	bl	800614c <USBD_LL_SOF>
}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008272:	2301      	movs	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
 8008282:	e008      	b.n	8008296 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d102      	bne.n	8008292 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e001      	b.n	8008296 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008292:	f7ff fa1b 	bl	80076cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800829c:	7bfa      	ldrb	r2, [r7, #15]
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fd ff1d 	bl	80060e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fed6 	bl	800605e <USBD_LL_Reset>
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fd ff18 	bl	8006100 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <HAL_PCD_SuspendCallback+0x48>)
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	4a03      	ldr	r2, [pc, #12]	; (8008304 <HAL_PCD_SuspendCallback+0x48>)
 80082f6:	f043 0306 	orr.w	r3, r3, #6
 80082fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000ed00 	.word	0xe000ed00

08008308 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008316:	4618      	mov	r0, r3
 8008318:	f7fd ff07 	bl	800612a <USBD_LL_Resume>
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	4611      	mov	r1, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f7fd ff2d 	bl	800619a <USBD_LL_IsoOUTIncomplete>
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	4611      	mov	r1, r2
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd ff0e 	bl	8006180 <USBD_LL_IsoINIncomplete>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd ff1a 	bl	80061b4 <USBD_LL_DevConnected>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008396:	4618      	mov	r0, r3
 8008398:	f7fd ff17 	bl	80061ca <USBD_LL_DevDisconnected>
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d13c      	bne.n	800842e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083b4:	4a20      	ldr	r2, [pc, #128]	; (8008438 <USBD_LL_Init+0x94>)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a1e      	ldr	r2, [pc, #120]	; (8008438 <USBD_LL_Init+0x94>)
 80083c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083c4:	4b1c      	ldr	r3, [pc, #112]	; (8008438 <USBD_LL_Init+0x94>)
 80083c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80083cc:	4b1a      	ldr	r3, [pc, #104]	; (8008438 <USBD_LL_Init+0x94>)
 80083ce:	2204      	movs	r2, #4
 80083d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80083d2:	4b19      	ldr	r3, [pc, #100]	; (8008438 <USBD_LL_Init+0x94>)
 80083d4:	2202      	movs	r2, #2
 80083d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083d8:	4b17      	ldr	r3, [pc, #92]	; (8008438 <USBD_LL_Init+0x94>)
 80083da:	2200      	movs	r2, #0
 80083dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083de:	4b16      	ldr	r3, [pc, #88]	; (8008438 <USBD_LL_Init+0x94>)
 80083e0:	2202      	movs	r2, #2
 80083e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80083e4:	4b14      	ldr	r3, [pc, #80]	; (8008438 <USBD_LL_Init+0x94>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083ea:	4b13      	ldr	r3, [pc, #76]	; (8008438 <USBD_LL_Init+0x94>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <USBD_LL_Init+0x94>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80083f6:	4b10      	ldr	r3, [pc, #64]	; (8008438 <USBD_LL_Init+0x94>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083fc:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <USBD_LL_Init+0x94>)
 80083fe:	2200      	movs	r2, #0
 8008400:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008402:	480d      	ldr	r0, [pc, #52]	; (8008438 <USBD_LL_Init+0x94>)
 8008404:	f7f8 ff87 	bl	8001316 <HAL_PCD_Init>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800840e:	f7ff f95d 	bl	80076cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	4808      	ldr	r0, [pc, #32]	; (8008438 <USBD_LL_Init+0x94>)
 8008416:	f7fa f8ec 	bl	80025f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800841a:	2240      	movs	r2, #64	; 0x40
 800841c:	2100      	movs	r1, #0
 800841e:	4806      	ldr	r0, [pc, #24]	; (8008438 <USBD_LL_Init+0x94>)
 8008420:	f7fa f8a0 	bl	8002564 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008424:	2280      	movs	r2, #128	; 0x80
 8008426:	2101      	movs	r1, #1
 8008428:	4803      	ldr	r0, [pc, #12]	; (8008438 <USBD_LL_Init+0x94>)
 800842a:	f7fa f89b 	bl	8002564 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	200016a8 	.word	0x200016a8

0800843c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008452:	4618      	mov	r0, r3
 8008454:	f7f9 f87c 	bl	8001550 <HAL_PCD_Start>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f92e 	bl	80086c0 <USBD_Get_USB_Status>
 8008464:	4603      	mov	r3, r0
 8008466:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008468:	7bbb      	ldrb	r3, [r7, #14]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	461a      	mov	r2, r3
 8008480:	4603      	mov	r3, r0
 8008482:	70fb      	strb	r3, [r7, #3]
 8008484:	460b      	mov	r3, r1
 8008486:	70bb      	strb	r3, [r7, #2]
 8008488:	4613      	mov	r3, r2
 800848a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800849a:	78bb      	ldrb	r3, [r7, #2]
 800849c:	883a      	ldrh	r2, [r7, #0]
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	f7f9 fc51 	bl	8001d46 <HAL_PCD_EP_Open>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f908 	bl	80086c0 <USBD_Get_USB_Status>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f9 fc9a 	bl	8001e16 <HAL_PCD_EP_Close>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f8e9 	bl	80086c0 <USBD_Get_USB_Status>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008516:	78fa      	ldrb	r2, [r7, #3]
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7f9 fd72 	bl	8002004 <HAL_PCD_EP_SetStall>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f8ca 	bl	80086c0 <USBD_Get_USB_Status>
 800852c:	4603      	mov	r3, r0
 800852e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008530:	7bbb      	ldrb	r3, [r7, #14]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7f9 fdb7 	bl	80020cc <HAL_PCD_EP_ClrStall>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f8ab 	bl	80086c0 <USBD_Get_USB_Status>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800856e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800858a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800858c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008590:	2b00      	cmp	r3, #0
 8008592:	da0b      	bge.n	80085ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800859a:	68f9      	ldr	r1, [r7, #12]
 800859c:	4613      	mov	r3, r2
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	1a9b      	subs	r3, r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	333e      	adds	r3, #62	; 0x3e
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	e00b      	b.n	80085c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	4613      	mov	r3, r2
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f9 fb84 	bl	8001cfc <HAL_PCD_SetAddress>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f860 	bl	80086c0 <USBD_Get_USB_Status>
 8008600:	4603      	mov	r3, r0
 8008602:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008604:	7bbb      	ldrb	r3, [r7, #14]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b086      	sub	sp, #24
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	461a      	mov	r2, r3
 800861a:	460b      	mov	r3, r1
 800861c:	72fb      	strb	r3, [r7, #11]
 800861e:	4613      	mov	r3, r2
 8008620:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008630:	893b      	ldrh	r3, [r7, #8]
 8008632:	7af9      	ldrb	r1, [r7, #11]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	f7f9 fc9b 	bl	8001f70 <HAL_PCD_EP_Transmit>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f83d 	bl	80086c0 <USBD_Get_USB_Status>
 8008646:	4603      	mov	r3, r0
 8008648:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800864a:	7dbb      	ldrb	r3, [r7, #22]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	461a      	mov	r2, r3
 8008660:	460b      	mov	r3, r1
 8008662:	72fb      	strb	r3, [r7, #11]
 8008664:	4613      	mov	r3, r2
 8008666:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008676:	893b      	ldrh	r3, [r7, #8]
 8008678:	7af9      	ldrb	r1, [r7, #11]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	f7f9 fc15 	bl	8001eaa <HAL_PCD_EP_Receive>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f81a 	bl	80086c0 <USBD_Get_USB_Status>
 800868c:	4603      	mov	r3, r0
 800868e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008690:	7dbb      	ldrb	r3, [r7, #22]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7f9 fc45 	bl	8001f40 <HAL_PCD_EP_GetRxCount>
 80086b6:	4603      	mov	r3, r0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d817      	bhi.n	8008704 <USBD_Get_USB_Status+0x44>
 80086d4:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <USBD_Get_USB_Status+0x1c>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	080086ed 	.word	0x080086ed
 80086e0:	080086f3 	.word	0x080086f3
 80086e4:	080086f9 	.word	0x080086f9
 80086e8:	080086ff 	.word	0x080086ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
    break;
 80086f0:	e00b      	b.n	800870a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086f2:	2302      	movs	r3, #2
 80086f4:	73fb      	strb	r3, [r7, #15]
    break;
 80086f6:	e008      	b.n	800870a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086f8:	2301      	movs	r3, #1
 80086fa:	73fb      	strb	r3, [r7, #15]
    break;
 80086fc:	e005      	b.n	800870a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086fe:	2302      	movs	r3, #2
 8008700:	73fb      	strb	r3, [r7, #15]
    break;
 8008702:	e002      	b.n	800870a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008704:	2302      	movs	r3, #2
 8008706:	73fb      	strb	r3, [r7, #15]
    break;
 8008708:	bf00      	nop
  }
  return usb_status;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2212      	movs	r2, #18
 8008728:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800872a:	4b03      	ldr	r3, [pc, #12]	; (8008738 <USBD_FS_DeviceDescriptor+0x20>)
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	20000148 	.word	0x20000148

0800873c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2204      	movs	r2, #4
 800874c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800874e:	4b03      	ldr	r3, [pc, #12]	; (800875c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	2000015c 	.word	0x2000015c

08008760 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d105      	bne.n	800877e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	4907      	ldr	r1, [pc, #28]	; (8008794 <USBD_FS_ProductStrDescriptor+0x34>)
 8008776:	4808      	ldr	r0, [pc, #32]	; (8008798 <USBD_FS_ProductStrDescriptor+0x38>)
 8008778:	f7fe f9fe 	bl	8006b78 <USBD_GetString>
 800877c:	e004      	b.n	8008788 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	4904      	ldr	r1, [pc, #16]	; (8008794 <USBD_FS_ProductStrDescriptor+0x34>)
 8008782:	4805      	ldr	r0, [pc, #20]	; (8008798 <USBD_FS_ProductStrDescriptor+0x38>)
 8008784:	f7fe f9f8 	bl	8006b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008788:	4b02      	ldr	r3, [pc, #8]	; (8008794 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20001ab0 	.word	0x20001ab0
 8008798:	08009354 	.word	0x08009354

0800879c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	4904      	ldr	r1, [pc, #16]	; (80087bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087ac:	4804      	ldr	r0, [pc, #16]	; (80087c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ae:	f7fe f9e3 	bl	8006b78 <USBD_GetString>
  return USBD_StrDesc;
 80087b2:	4b02      	ldr	r3, [pc, #8]	; (80087bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20001ab0 	.word	0x20001ab0
 80087c0:	0800936c 	.word	0x0800936c

080087c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	6039      	str	r1, [r7, #0]
 80087ce:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	221a      	movs	r2, #26
 80087d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087d6:	f000 f843 	bl	8008860 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 80087da:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20000160 	.word	0x20000160

080087e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d105      	bne.n	8008806 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	4907      	ldr	r1, [pc, #28]	; (800881c <USBD_FS_ConfigStrDescriptor+0x34>)
 80087fe:	4808      	ldr	r0, [pc, #32]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008800:	f7fe f9ba 	bl	8006b78 <USBD_GetString>
 8008804:	e004      	b.n	8008810 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4904      	ldr	r1, [pc, #16]	; (800881c <USBD_FS_ConfigStrDescriptor+0x34>)
 800880a:	4805      	ldr	r0, [pc, #20]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x38>)
 800880c:	f7fe f9b4 	bl	8006b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008810:	4b02      	ldr	r3, [pc, #8]	; (800881c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20001ab0 	.word	0x20001ab0
 8008820:	0800937c 	.word	0x0800937c

08008824 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	4907      	ldr	r1, [pc, #28]	; (8008858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800883a:	4808      	ldr	r0, [pc, #32]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800883c:	f7fe f99c 	bl	8006b78 <USBD_GetString>
 8008840:	e004      	b.n	800884c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4904      	ldr	r1, [pc, #16]	; (8008858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008846:	4805      	ldr	r0, [pc, #20]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008848:	f7fe f996 	bl	8006b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800884c:	4b02      	ldr	r3, [pc, #8]	; (8008858 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20001ab0 	.word	0x20001ab0
 800885c:	08009388 	.word	0x08009388

08008860 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008866:	4b0f      	ldr	r3, [pc, #60]	; (80088a4 <Get_SerialNum+0x44>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800886c:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <Get_SerialNum+0x48>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008872:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <Get_SerialNum+0x4c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008886:	2208      	movs	r2, #8
 8008888:	4909      	ldr	r1, [pc, #36]	; (80088b0 <Get_SerialNum+0x50>)
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 f814 	bl	80088b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008890:	2204      	movs	r2, #4
 8008892:	4908      	ldr	r1, [pc, #32]	; (80088b4 <Get_SerialNum+0x54>)
 8008894:	68b8      	ldr	r0, [r7, #8]
 8008896:	f000 f80f 	bl	80088b8 <IntToUnicode>
  }
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	1fff7a10 	.word	0x1fff7a10
 80088a8:	1fff7a14 	.word	0x1fff7a14
 80088ac:	1fff7a18 	.word	0x1fff7a18
 80088b0:	20000162 	.word	0x20000162
 80088b4:	20000172 	.word	0x20000172

080088b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]
 80088ce:	e027      	b.n	8008920 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	0f1b      	lsrs	r3, r3, #28
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	d80b      	bhi.n	80088f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	0f1b      	lsrs	r3, r3, #28
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	4619      	mov	r1, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	440b      	add	r3, r1
 80088e8:	3230      	adds	r2, #48	; 0x30
 80088ea:	b2d2      	uxtb	r2, r2
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	e00a      	b.n	8008906 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	0f1b      	lsrs	r3, r3, #28
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	4619      	mov	r1, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	440b      	add	r3, r1
 8008900:	3237      	adds	r2, #55	; 0x37
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	3301      	adds	r3, #1
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	4413      	add	r3, r2
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	3301      	adds	r3, #1
 800891e:	75fb      	strb	r3, [r7, #23]
 8008920:	7dfa      	ldrb	r2, [r7, #23]
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	429a      	cmp	r2, r3
 8008926:	d3d3      	bcc.n	80088d0 <IntToUnicode+0x18>
  }
}
 8008928:	bf00      	nop
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800896c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008938:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800893a:	e003      	b.n	8008944 <LoopCopyDataInit>

0800893c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800893c:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800893e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008940:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008942:	3104      	adds	r1, #4

08008944 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008944:	480b      	ldr	r0, [pc, #44]	; (8008974 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008946:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008948:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800894a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800894c:	d3f6      	bcc.n	800893c <CopyDataInit>
  ldr  r2, =_sbss
 800894e:	4a0b      	ldr	r2, [pc, #44]	; (800897c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008950:	e002      	b.n	8008958 <LoopFillZerobss>

08008952 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008952:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008954:	f842 3b04 	str.w	r3, [r2], #4

08008958 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800895a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800895c:	d3f9      	bcc.n	8008952 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800895e:	f7fe ffcf 	bl	8007900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008962:	f000 f811 	bl	8008988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008966:	f7fe fe0f 	bl	8007588 <main>
  bx  lr    
 800896a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800896c:	2002ffff 	.word	0x2002ffff
  ldr  r3, =_sidata
 8008970:	08009480 	.word	0x08009480
  ldr  r0, =_sdata
 8008974:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008978:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800897c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008980:	20001cb4 	.word	0x20001cb4

08008984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008984:	e7fe      	b.n	8008984 <ADC_IRQHandler>
	...

08008988 <__libc_init_array>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	4e0d      	ldr	r6, [pc, #52]	; (80089c0 <__libc_init_array+0x38>)
 800898c:	4c0d      	ldr	r4, [pc, #52]	; (80089c4 <__libc_init_array+0x3c>)
 800898e:	1ba4      	subs	r4, r4, r6
 8008990:	10a4      	asrs	r4, r4, #2
 8008992:	2500      	movs	r5, #0
 8008994:	42a5      	cmp	r5, r4
 8008996:	d109      	bne.n	80089ac <__libc_init_array+0x24>
 8008998:	4e0b      	ldr	r6, [pc, #44]	; (80089c8 <__libc_init_array+0x40>)
 800899a:	4c0c      	ldr	r4, [pc, #48]	; (80089cc <__libc_init_array+0x44>)
 800899c:	f000 fc98 	bl	80092d0 <_init>
 80089a0:	1ba4      	subs	r4, r4, r6
 80089a2:	10a4      	asrs	r4, r4, #2
 80089a4:	2500      	movs	r5, #0
 80089a6:	42a5      	cmp	r5, r4
 80089a8:	d105      	bne.n	80089b6 <__libc_init_array+0x2e>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089b0:	4798      	blx	r3
 80089b2:	3501      	adds	r5, #1
 80089b4:	e7ee      	b.n	8008994 <__libc_init_array+0xc>
 80089b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089ba:	4798      	blx	r3
 80089bc:	3501      	adds	r5, #1
 80089be:	e7f2      	b.n	80089a6 <__libc_init_array+0x1e>
 80089c0:	08009478 	.word	0x08009478
 80089c4:	08009478 	.word	0x08009478
 80089c8:	08009478 	.word	0x08009478
 80089cc:	0800947c 	.word	0x0800947c

080089d0 <malloc>:
 80089d0:	4b02      	ldr	r3, [pc, #8]	; (80089dc <malloc+0xc>)
 80089d2:	4601      	mov	r1, r0
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	f000 b861 	b.w	8008a9c <_malloc_r>
 80089da:	bf00      	nop
 80089dc:	2000017c 	.word	0x2000017c

080089e0 <free>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	; (80089ec <free+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f000 b80b 	b.w	8008a00 <_free_r>
 80089ea:	bf00      	nop
 80089ec:	2000017c 	.word	0x2000017c

080089f0 <memset>:
 80089f0:	4402      	add	r2, r0
 80089f2:	4603      	mov	r3, r0
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d100      	bne.n	80089fa <memset+0xa>
 80089f8:	4770      	bx	lr
 80089fa:	f803 1b01 	strb.w	r1, [r3], #1
 80089fe:	e7f9      	b.n	80089f4 <memset+0x4>

08008a00 <_free_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4605      	mov	r5, r0
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d045      	beq.n	8008a94 <_free_r+0x94>
 8008a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a0c:	1f0c      	subs	r4, r1, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfb8      	it	lt
 8008a12:	18e4      	addlt	r4, r4, r3
 8008a14:	f000 fbae 	bl	8009174 <__malloc_lock>
 8008a18:	4a1f      	ldr	r2, [pc, #124]	; (8008a98 <_free_r+0x98>)
 8008a1a:	6813      	ldr	r3, [r2, #0]
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	b933      	cbnz	r3, 8008a2e <_free_r+0x2e>
 8008a20:	6063      	str	r3, [r4, #4]
 8008a22:	6014      	str	r4, [r2, #0]
 8008a24:	4628      	mov	r0, r5
 8008a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a2a:	f000 bba4 	b.w	8009176 <__malloc_unlock>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	d90c      	bls.n	8008a4c <_free_r+0x4c>
 8008a32:	6821      	ldr	r1, [r4, #0]
 8008a34:	1862      	adds	r2, r4, r1
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bf04      	itt	eq
 8008a3a:	681a      	ldreq	r2, [r3, #0]
 8008a3c:	685b      	ldreq	r3, [r3, #4]
 8008a3e:	6063      	str	r3, [r4, #4]
 8008a40:	bf04      	itt	eq
 8008a42:	1852      	addeq	r2, r2, r1
 8008a44:	6022      	streq	r2, [r4, #0]
 8008a46:	6004      	str	r4, [r0, #0]
 8008a48:	e7ec      	b.n	8008a24 <_free_r+0x24>
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	b10a      	cbz	r2, 8008a54 <_free_r+0x54>
 8008a50:	42a2      	cmp	r2, r4
 8008a52:	d9fa      	bls.n	8008a4a <_free_r+0x4a>
 8008a54:	6819      	ldr	r1, [r3, #0]
 8008a56:	1858      	adds	r0, r3, r1
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d10b      	bne.n	8008a74 <_free_r+0x74>
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	4401      	add	r1, r0
 8008a60:	1858      	adds	r0, r3, r1
 8008a62:	4282      	cmp	r2, r0
 8008a64:	6019      	str	r1, [r3, #0]
 8008a66:	d1dd      	bne.n	8008a24 <_free_r+0x24>
 8008a68:	6810      	ldr	r0, [r2, #0]
 8008a6a:	6852      	ldr	r2, [r2, #4]
 8008a6c:	605a      	str	r2, [r3, #4]
 8008a6e:	4401      	add	r1, r0
 8008a70:	6019      	str	r1, [r3, #0]
 8008a72:	e7d7      	b.n	8008a24 <_free_r+0x24>
 8008a74:	d902      	bls.n	8008a7c <_free_r+0x7c>
 8008a76:	230c      	movs	r3, #12
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	e7d3      	b.n	8008a24 <_free_r+0x24>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	1821      	adds	r1, r4, r0
 8008a80:	428a      	cmp	r2, r1
 8008a82:	bf04      	itt	eq
 8008a84:	6811      	ldreq	r1, [r2, #0]
 8008a86:	6852      	ldreq	r2, [r2, #4]
 8008a88:	6062      	str	r2, [r4, #4]
 8008a8a:	bf04      	itt	eq
 8008a8c:	1809      	addeq	r1, r1, r0
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	605c      	str	r4, [r3, #4]
 8008a92:	e7c7      	b.n	8008a24 <_free_r+0x24>
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	20000208 	.word	0x20000208

08008a9c <_malloc_r>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	1ccd      	adds	r5, r1, #3
 8008aa0:	f025 0503 	bic.w	r5, r5, #3
 8008aa4:	3508      	adds	r5, #8
 8008aa6:	2d0c      	cmp	r5, #12
 8008aa8:	bf38      	it	cc
 8008aaa:	250c      	movcc	r5, #12
 8008aac:	2d00      	cmp	r5, #0
 8008aae:	4606      	mov	r6, r0
 8008ab0:	db01      	blt.n	8008ab6 <_malloc_r+0x1a>
 8008ab2:	42a9      	cmp	r1, r5
 8008ab4:	d903      	bls.n	8008abe <_malloc_r+0x22>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	6033      	str	r3, [r6, #0]
 8008aba:	2000      	movs	r0, #0
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
 8008abe:	f000 fb59 	bl	8009174 <__malloc_lock>
 8008ac2:	4a21      	ldr	r2, [pc, #132]	; (8008b48 <_malloc_r+0xac>)
 8008ac4:	6814      	ldr	r4, [r2, #0]
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	b991      	cbnz	r1, 8008af0 <_malloc_r+0x54>
 8008aca:	4c20      	ldr	r4, [pc, #128]	; (8008b4c <_malloc_r+0xb0>)
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	b91b      	cbnz	r3, 8008ad8 <_malloc_r+0x3c>
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 f8a1 	bl	8008c18 <_sbrk_r>
 8008ad6:	6020      	str	r0, [r4, #0]
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4630      	mov	r0, r6
 8008adc:	f000 f89c 	bl	8008c18 <_sbrk_r>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d124      	bne.n	8008b2e <_malloc_r+0x92>
 8008ae4:	230c      	movs	r3, #12
 8008ae6:	6033      	str	r3, [r6, #0]
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 fb44 	bl	8009176 <__malloc_unlock>
 8008aee:	e7e4      	b.n	8008aba <_malloc_r+0x1e>
 8008af0:	680b      	ldr	r3, [r1, #0]
 8008af2:	1b5b      	subs	r3, r3, r5
 8008af4:	d418      	bmi.n	8008b28 <_malloc_r+0x8c>
 8008af6:	2b0b      	cmp	r3, #11
 8008af8:	d90f      	bls.n	8008b1a <_malloc_r+0x7e>
 8008afa:	600b      	str	r3, [r1, #0]
 8008afc:	50cd      	str	r5, [r1, r3]
 8008afe:	18cc      	adds	r4, r1, r3
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 fb38 	bl	8009176 <__malloc_unlock>
 8008b06:	f104 000b 	add.w	r0, r4, #11
 8008b0a:	1d23      	adds	r3, r4, #4
 8008b0c:	f020 0007 	bic.w	r0, r0, #7
 8008b10:	1ac3      	subs	r3, r0, r3
 8008b12:	d0d3      	beq.n	8008abc <_malloc_r+0x20>
 8008b14:	425a      	negs	r2, r3
 8008b16:	50e2      	str	r2, [r4, r3]
 8008b18:	e7d0      	b.n	8008abc <_malloc_r+0x20>
 8008b1a:	428c      	cmp	r4, r1
 8008b1c:	684b      	ldr	r3, [r1, #4]
 8008b1e:	bf16      	itet	ne
 8008b20:	6063      	strne	r3, [r4, #4]
 8008b22:	6013      	streq	r3, [r2, #0]
 8008b24:	460c      	movne	r4, r1
 8008b26:	e7eb      	b.n	8008b00 <_malloc_r+0x64>
 8008b28:	460c      	mov	r4, r1
 8008b2a:	6849      	ldr	r1, [r1, #4]
 8008b2c:	e7cc      	b.n	8008ac8 <_malloc_r+0x2c>
 8008b2e:	1cc4      	adds	r4, r0, #3
 8008b30:	f024 0403 	bic.w	r4, r4, #3
 8008b34:	42a0      	cmp	r0, r4
 8008b36:	d005      	beq.n	8008b44 <_malloc_r+0xa8>
 8008b38:	1a21      	subs	r1, r4, r0
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f86c 	bl	8008c18 <_sbrk_r>
 8008b40:	3001      	adds	r0, #1
 8008b42:	d0cf      	beq.n	8008ae4 <_malloc_r+0x48>
 8008b44:	6025      	str	r5, [r4, #0]
 8008b46:	e7db      	b.n	8008b00 <_malloc_r+0x64>
 8008b48:	20000208 	.word	0x20000208
 8008b4c:	2000020c 	.word	0x2000020c

08008b50 <_puts_r>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	460e      	mov	r6, r1
 8008b54:	4605      	mov	r5, r0
 8008b56:	b118      	cbz	r0, 8008b60 <_puts_r+0x10>
 8008b58:	6983      	ldr	r3, [r0, #24]
 8008b5a:	b90b      	cbnz	r3, 8008b60 <_puts_r+0x10>
 8008b5c:	f000 fa1c 	bl	8008f98 <__sinit>
 8008b60:	69ab      	ldr	r3, [r5, #24]
 8008b62:	68ac      	ldr	r4, [r5, #8]
 8008b64:	b913      	cbnz	r3, 8008b6c <_puts_r+0x1c>
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fa16 	bl	8008f98 <__sinit>
 8008b6c:	4b23      	ldr	r3, [pc, #140]	; (8008bfc <_puts_r+0xac>)
 8008b6e:	429c      	cmp	r4, r3
 8008b70:	d117      	bne.n	8008ba2 <_puts_r+0x52>
 8008b72:	686c      	ldr	r4, [r5, #4]
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	071b      	lsls	r3, r3, #28
 8008b78:	d51d      	bpl.n	8008bb6 <_puts_r+0x66>
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	b1db      	cbz	r3, 8008bb6 <_puts_r+0x66>
 8008b7e:	3e01      	subs	r6, #1
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b86:	3b01      	subs	r3, #1
 8008b88:	60a3      	str	r3, [r4, #8]
 8008b8a:	b9e9      	cbnz	r1, 8008bc8 <_puts_r+0x78>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	da2e      	bge.n	8008bee <_puts_r+0x9e>
 8008b90:	4622      	mov	r2, r4
 8008b92:	210a      	movs	r1, #10
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 f84f 	bl	8008c38 <__swbuf_r>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d011      	beq.n	8008bc2 <_puts_r+0x72>
 8008b9e:	200a      	movs	r0, #10
 8008ba0:	e011      	b.n	8008bc6 <_puts_r+0x76>
 8008ba2:	4b17      	ldr	r3, [pc, #92]	; (8008c00 <_puts_r+0xb0>)
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	d101      	bne.n	8008bac <_puts_r+0x5c>
 8008ba8:	68ac      	ldr	r4, [r5, #8]
 8008baa:	e7e3      	b.n	8008b74 <_puts_r+0x24>
 8008bac:	4b15      	ldr	r3, [pc, #84]	; (8008c04 <_puts_r+0xb4>)
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	bf08      	it	eq
 8008bb2:	68ec      	ldreq	r4, [r5, #12]
 8008bb4:	e7de      	b.n	8008b74 <_puts_r+0x24>
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f000 f88f 	bl	8008cdc <__swsetup_r>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d0dd      	beq.n	8008b7e <_puts_r+0x2e>
 8008bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da04      	bge.n	8008bd6 <_puts_r+0x86>
 8008bcc:	69a2      	ldr	r2, [r4, #24]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	dc06      	bgt.n	8008be0 <_puts_r+0x90>
 8008bd2:	290a      	cmp	r1, #10
 8008bd4:	d004      	beq.n	8008be0 <_puts_r+0x90>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	6022      	str	r2, [r4, #0]
 8008bdc:	7019      	strb	r1, [r3, #0]
 8008bde:	e7cf      	b.n	8008b80 <_puts_r+0x30>
 8008be0:	4622      	mov	r2, r4
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 f828 	bl	8008c38 <__swbuf_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d1c9      	bne.n	8008b80 <_puts_r+0x30>
 8008bec:	e7e9      	b.n	8008bc2 <_puts_r+0x72>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	200a      	movs	r0, #10
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	6022      	str	r2, [r4, #0]
 8008bf6:	7018      	strb	r0, [r3, #0]
 8008bf8:	e7e5      	b.n	8008bc6 <_puts_r+0x76>
 8008bfa:	bf00      	nop
 8008bfc:	08009430 	.word	0x08009430
 8008c00:	08009450 	.word	0x08009450
 8008c04:	08009410 	.word	0x08009410

08008c08 <puts>:
 8008c08:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <puts+0xc>)
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	f7ff bf9f 	b.w	8008b50 <_puts_r>
 8008c12:	bf00      	nop
 8008c14:	2000017c 	.word	0x2000017c

08008c18 <_sbrk_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4c06      	ldr	r4, [pc, #24]	; (8008c34 <_sbrk_r+0x1c>)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4605      	mov	r5, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	f7fe fe3e 	bl	80078a4 <_sbrk>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_sbrk_r+0x1a>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_sbrk_r+0x1a>
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	20001cb0 	.word	0x20001cb0

08008c38 <__swbuf_r>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	460e      	mov	r6, r1
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	4605      	mov	r5, r0
 8008c40:	b118      	cbz	r0, 8008c4a <__swbuf_r+0x12>
 8008c42:	6983      	ldr	r3, [r0, #24]
 8008c44:	b90b      	cbnz	r3, 8008c4a <__swbuf_r+0x12>
 8008c46:	f000 f9a7 	bl	8008f98 <__sinit>
 8008c4a:	4b21      	ldr	r3, [pc, #132]	; (8008cd0 <__swbuf_r+0x98>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	d12a      	bne.n	8008ca6 <__swbuf_r+0x6e>
 8008c50:	686c      	ldr	r4, [r5, #4]
 8008c52:	69a3      	ldr	r3, [r4, #24]
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	071a      	lsls	r2, r3, #28
 8008c5a:	d52e      	bpl.n	8008cba <__swbuf_r+0x82>
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	b363      	cbz	r3, 8008cba <__swbuf_r+0x82>
 8008c60:	6923      	ldr	r3, [r4, #16]
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	1ac0      	subs	r0, r0, r3
 8008c66:	6963      	ldr	r3, [r4, #20]
 8008c68:	b2f6      	uxtb	r6, r6
 8008c6a:	4283      	cmp	r3, r0
 8008c6c:	4637      	mov	r7, r6
 8008c6e:	dc04      	bgt.n	8008c7a <__swbuf_r+0x42>
 8008c70:	4621      	mov	r1, r4
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 f926 	bl	8008ec4 <_fflush_r>
 8008c78:	bb28      	cbnz	r0, 8008cc6 <__swbuf_r+0x8e>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	60a3      	str	r3, [r4, #8]
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	701e      	strb	r6, [r3, #0]
 8008c88:	6963      	ldr	r3, [r4, #20]
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	4283      	cmp	r3, r0
 8008c8e:	d004      	beq.n	8008c9a <__swbuf_r+0x62>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d519      	bpl.n	8008cca <__swbuf_r+0x92>
 8008c96:	2e0a      	cmp	r6, #10
 8008c98:	d117      	bne.n	8008cca <__swbuf_r+0x92>
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 f911 	bl	8008ec4 <_fflush_r>
 8008ca2:	b190      	cbz	r0, 8008cca <__swbuf_r+0x92>
 8008ca4:	e00f      	b.n	8008cc6 <__swbuf_r+0x8e>
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <__swbuf_r+0x9c>)
 8008ca8:	429c      	cmp	r4, r3
 8008caa:	d101      	bne.n	8008cb0 <__swbuf_r+0x78>
 8008cac:	68ac      	ldr	r4, [r5, #8]
 8008cae:	e7d0      	b.n	8008c52 <__swbuf_r+0x1a>
 8008cb0:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <__swbuf_r+0xa0>)
 8008cb2:	429c      	cmp	r4, r3
 8008cb4:	bf08      	it	eq
 8008cb6:	68ec      	ldreq	r4, [r5, #12]
 8008cb8:	e7cb      	b.n	8008c52 <__swbuf_r+0x1a>
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 f80d 	bl	8008cdc <__swsetup_r>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d0cc      	beq.n	8008c60 <__swbuf_r+0x28>
 8008cc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008cca:	4638      	mov	r0, r7
 8008ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	08009430 	.word	0x08009430
 8008cd4:	08009450 	.word	0x08009450
 8008cd8:	08009410 	.word	0x08009410

08008cdc <__swsetup_r>:
 8008cdc:	4b32      	ldr	r3, [pc, #200]	; (8008da8 <__swsetup_r+0xcc>)
 8008cde:	b570      	push	{r4, r5, r6, lr}
 8008ce0:	681d      	ldr	r5, [r3, #0]
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	b125      	cbz	r5, 8008cf2 <__swsetup_r+0x16>
 8008ce8:	69ab      	ldr	r3, [r5, #24]
 8008cea:	b913      	cbnz	r3, 8008cf2 <__swsetup_r+0x16>
 8008cec:	4628      	mov	r0, r5
 8008cee:	f000 f953 	bl	8008f98 <__sinit>
 8008cf2:	4b2e      	ldr	r3, [pc, #184]	; (8008dac <__swsetup_r+0xd0>)
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	d10f      	bne.n	8008d18 <__swsetup_r+0x3c>
 8008cf8:	686c      	ldr	r4, [r5, #4]
 8008cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	0715      	lsls	r5, r2, #28
 8008d02:	d42c      	bmi.n	8008d5e <__swsetup_r+0x82>
 8008d04:	06d0      	lsls	r0, r2, #27
 8008d06:	d411      	bmi.n	8008d2c <__swsetup_r+0x50>
 8008d08:	2209      	movs	r2, #9
 8008d0a:	6032      	str	r2, [r6, #0]
 8008d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d16:	e03e      	b.n	8008d96 <__swsetup_r+0xba>
 8008d18:	4b25      	ldr	r3, [pc, #148]	; (8008db0 <__swsetup_r+0xd4>)
 8008d1a:	429c      	cmp	r4, r3
 8008d1c:	d101      	bne.n	8008d22 <__swsetup_r+0x46>
 8008d1e:	68ac      	ldr	r4, [r5, #8]
 8008d20:	e7eb      	b.n	8008cfa <__swsetup_r+0x1e>
 8008d22:	4b24      	ldr	r3, [pc, #144]	; (8008db4 <__swsetup_r+0xd8>)
 8008d24:	429c      	cmp	r4, r3
 8008d26:	bf08      	it	eq
 8008d28:	68ec      	ldreq	r4, [r5, #12]
 8008d2a:	e7e6      	b.n	8008cfa <__swsetup_r+0x1e>
 8008d2c:	0751      	lsls	r1, r2, #29
 8008d2e:	d512      	bpl.n	8008d56 <__swsetup_r+0x7a>
 8008d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d32:	b141      	cbz	r1, 8008d46 <__swsetup_r+0x6a>
 8008d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d38:	4299      	cmp	r1, r3
 8008d3a:	d002      	beq.n	8008d42 <__swsetup_r+0x66>
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7ff fe5f 	bl	8008a00 <_free_r>
 8008d42:	2300      	movs	r3, #0
 8008d44:	6363      	str	r3, [r4, #52]	; 0x34
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6063      	str	r3, [r4, #4]
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f043 0308 	orr.w	r3, r3, #8
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	b94b      	cbnz	r3, 8008d76 <__swsetup_r+0x9a>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6c:	d003      	beq.n	8008d76 <__swsetup_r+0x9a>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4630      	mov	r0, r6
 8008d72:	f000 f9bf 	bl	80090f4 <__smakebuf_r>
 8008d76:	89a2      	ldrh	r2, [r4, #12]
 8008d78:	f012 0301 	ands.w	r3, r2, #1
 8008d7c:	d00c      	beq.n	8008d98 <__swsetup_r+0xbc>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60a3      	str	r3, [r4, #8]
 8008d82:	6963      	ldr	r3, [r4, #20]
 8008d84:	425b      	negs	r3, r3
 8008d86:	61a3      	str	r3, [r4, #24]
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	b953      	cbnz	r3, 8008da2 <__swsetup_r+0xc6>
 8008d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008d94:	d1ba      	bne.n	8008d0c <__swsetup_r+0x30>
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	0792      	lsls	r2, r2, #30
 8008d9a:	bf58      	it	pl
 8008d9c:	6963      	ldrpl	r3, [r4, #20]
 8008d9e:	60a3      	str	r3, [r4, #8]
 8008da0:	e7f2      	b.n	8008d88 <__swsetup_r+0xac>
 8008da2:	2000      	movs	r0, #0
 8008da4:	e7f7      	b.n	8008d96 <__swsetup_r+0xba>
 8008da6:	bf00      	nop
 8008da8:	2000017c 	.word	0x2000017c
 8008dac:	08009430 	.word	0x08009430
 8008db0:	08009450 	.word	0x08009450
 8008db4:	08009410 	.word	0x08009410

08008db8 <__sflush_r>:
 8008db8:	898a      	ldrh	r2, [r1, #12]
 8008dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	0710      	lsls	r0, r2, #28
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	d458      	bmi.n	8008e78 <__sflush_r+0xc0>
 8008dc6:	684b      	ldr	r3, [r1, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc05      	bgt.n	8008dd8 <__sflush_r+0x20>
 8008dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dc02      	bgt.n	8008dd8 <__sflush_r+0x20>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	d0f9      	beq.n	8008dd2 <__sflush_r+0x1a>
 8008dde:	2300      	movs	r3, #0
 8008de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008de4:	682f      	ldr	r7, [r5, #0]
 8008de6:	6a21      	ldr	r1, [r4, #32]
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	d032      	beq.n	8008e52 <__sflush_r+0x9a>
 8008dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	075a      	lsls	r2, r3, #29
 8008df2:	d505      	bpl.n	8008e00 <__sflush_r+0x48>
 8008df4:	6863      	ldr	r3, [r4, #4]
 8008df6:	1ac0      	subs	r0, r0, r3
 8008df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dfa:	b10b      	cbz	r3, 8008e00 <__sflush_r+0x48>
 8008dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dfe:	1ac0      	subs	r0, r0, r3
 8008e00:	2300      	movs	r3, #0
 8008e02:	4602      	mov	r2, r0
 8008e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e06:	6a21      	ldr	r1, [r4, #32]
 8008e08:	4628      	mov	r0, r5
 8008e0a:	47b0      	blx	r6
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	d106      	bne.n	8008e20 <__sflush_r+0x68>
 8008e12:	6829      	ldr	r1, [r5, #0]
 8008e14:	291d      	cmp	r1, #29
 8008e16:	d848      	bhi.n	8008eaa <__sflush_r+0xf2>
 8008e18:	4a29      	ldr	r2, [pc, #164]	; (8008ec0 <__sflush_r+0x108>)
 8008e1a:	40ca      	lsrs	r2, r1
 8008e1c:	07d6      	lsls	r6, r2, #31
 8008e1e:	d544      	bpl.n	8008eaa <__sflush_r+0xf2>
 8008e20:	2200      	movs	r2, #0
 8008e22:	6062      	str	r2, [r4, #4]
 8008e24:	04d9      	lsls	r1, r3, #19
 8008e26:	6922      	ldr	r2, [r4, #16]
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	d504      	bpl.n	8008e36 <__sflush_r+0x7e>
 8008e2c:	1c42      	adds	r2, r0, #1
 8008e2e:	d101      	bne.n	8008e34 <__sflush_r+0x7c>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b903      	cbnz	r3, 8008e36 <__sflush_r+0x7e>
 8008e34:	6560      	str	r0, [r4, #84]	; 0x54
 8008e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e38:	602f      	str	r7, [r5, #0]
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	d0c9      	beq.n	8008dd2 <__sflush_r+0x1a>
 8008e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e42:	4299      	cmp	r1, r3
 8008e44:	d002      	beq.n	8008e4c <__sflush_r+0x94>
 8008e46:	4628      	mov	r0, r5
 8008e48:	f7ff fdda 	bl	8008a00 <_free_r>
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8008e50:	e7c0      	b.n	8008dd4 <__sflush_r+0x1c>
 8008e52:	2301      	movs	r3, #1
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b0      	blx	r6
 8008e58:	1c41      	adds	r1, r0, #1
 8008e5a:	d1c8      	bne.n	8008dee <__sflush_r+0x36>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0c5      	beq.n	8008dee <__sflush_r+0x36>
 8008e62:	2b1d      	cmp	r3, #29
 8008e64:	d001      	beq.n	8008e6a <__sflush_r+0xb2>
 8008e66:	2b16      	cmp	r3, #22
 8008e68:	d101      	bne.n	8008e6e <__sflush_r+0xb6>
 8008e6a:	602f      	str	r7, [r5, #0]
 8008e6c:	e7b1      	b.n	8008dd2 <__sflush_r+0x1a>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	e7ad      	b.n	8008dd4 <__sflush_r+0x1c>
 8008e78:	690f      	ldr	r7, [r1, #16]
 8008e7a:	2f00      	cmp	r7, #0
 8008e7c:	d0a9      	beq.n	8008dd2 <__sflush_r+0x1a>
 8008e7e:	0793      	lsls	r3, r2, #30
 8008e80:	680e      	ldr	r6, [r1, #0]
 8008e82:	bf08      	it	eq
 8008e84:	694b      	ldreq	r3, [r1, #20]
 8008e86:	600f      	str	r7, [r1, #0]
 8008e88:	bf18      	it	ne
 8008e8a:	2300      	movne	r3, #0
 8008e8c:	eba6 0807 	sub.w	r8, r6, r7
 8008e90:	608b      	str	r3, [r1, #8]
 8008e92:	f1b8 0f00 	cmp.w	r8, #0
 8008e96:	dd9c      	ble.n	8008dd2 <__sflush_r+0x1a>
 8008e98:	4643      	mov	r3, r8
 8008e9a:	463a      	mov	r2, r7
 8008e9c:	6a21      	ldr	r1, [r4, #32]
 8008e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b0      	blx	r6
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	dc06      	bgt.n	8008eb6 <__sflush_r+0xfe>
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb4:	e78e      	b.n	8008dd4 <__sflush_r+0x1c>
 8008eb6:	4407      	add	r7, r0
 8008eb8:	eba8 0800 	sub.w	r8, r8, r0
 8008ebc:	e7e9      	b.n	8008e92 <__sflush_r+0xda>
 8008ebe:	bf00      	nop
 8008ec0:	20400001 	.word	0x20400001

08008ec4 <_fflush_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	690b      	ldr	r3, [r1, #16]
 8008ec8:	4605      	mov	r5, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	b1db      	cbz	r3, 8008f06 <_fflush_r+0x42>
 8008ece:	b118      	cbz	r0, 8008ed8 <_fflush_r+0x14>
 8008ed0:	6983      	ldr	r3, [r0, #24]
 8008ed2:	b90b      	cbnz	r3, 8008ed8 <_fflush_r+0x14>
 8008ed4:	f000 f860 	bl	8008f98 <__sinit>
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <_fflush_r+0x48>)
 8008eda:	429c      	cmp	r4, r3
 8008edc:	d109      	bne.n	8008ef2 <_fflush_r+0x2e>
 8008ede:	686c      	ldr	r4, [r5, #4]
 8008ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee4:	b17b      	cbz	r3, 8008f06 <_fflush_r+0x42>
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eee:	f7ff bf63 	b.w	8008db8 <__sflush_r>
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <_fflush_r+0x4c>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	d101      	bne.n	8008efc <_fflush_r+0x38>
 8008ef8:	68ac      	ldr	r4, [r5, #8]
 8008efa:	e7f1      	b.n	8008ee0 <_fflush_r+0x1c>
 8008efc:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <_fflush_r+0x50>)
 8008efe:	429c      	cmp	r4, r3
 8008f00:	bf08      	it	eq
 8008f02:	68ec      	ldreq	r4, [r5, #12]
 8008f04:	e7ec      	b.n	8008ee0 <_fflush_r+0x1c>
 8008f06:	2000      	movs	r0, #0
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	bf00      	nop
 8008f0c:	08009430 	.word	0x08009430
 8008f10:	08009450 	.word	0x08009450
 8008f14:	08009410 	.word	0x08009410

08008f18 <std>:
 8008f18:	2300      	movs	r3, #0
 8008f1a:	b510      	push	{r4, lr}
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f22:	6083      	str	r3, [r0, #8]
 8008f24:	8181      	strh	r1, [r0, #12]
 8008f26:	6643      	str	r3, [r0, #100]	; 0x64
 8008f28:	81c2      	strh	r2, [r0, #14]
 8008f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f2e:	6183      	str	r3, [r0, #24]
 8008f30:	4619      	mov	r1, r3
 8008f32:	2208      	movs	r2, #8
 8008f34:	305c      	adds	r0, #92	; 0x5c
 8008f36:	f7ff fd5b 	bl	80089f0 <memset>
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <std+0x38>)
 8008f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <std+0x3c>)
 8008f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f42:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <std+0x40>)
 8008f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <std+0x44>)
 8008f48:	6224      	str	r4, [r4, #32]
 8008f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	bf00      	nop
 8008f50:	08009179 	.word	0x08009179
 8008f54:	0800919b 	.word	0x0800919b
 8008f58:	080091d3 	.word	0x080091d3
 8008f5c:	080091f7 	.word	0x080091f7

08008f60 <_cleanup_r>:
 8008f60:	4901      	ldr	r1, [pc, #4]	; (8008f68 <_cleanup_r+0x8>)
 8008f62:	f000 b885 	b.w	8009070 <_fwalk_reent>
 8008f66:	bf00      	nop
 8008f68:	08008ec5 	.word	0x08008ec5

08008f6c <__sfmoreglue>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	1e4a      	subs	r2, r1, #1
 8008f70:	2568      	movs	r5, #104	; 0x68
 8008f72:	4355      	muls	r5, r2
 8008f74:	460e      	mov	r6, r1
 8008f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f7a:	f7ff fd8f 	bl	8008a9c <_malloc_r>
 8008f7e:	4604      	mov	r4, r0
 8008f80:	b140      	cbz	r0, 8008f94 <__sfmoreglue+0x28>
 8008f82:	2100      	movs	r1, #0
 8008f84:	e9c0 1600 	strd	r1, r6, [r0]
 8008f88:	300c      	adds	r0, #12
 8008f8a:	60a0      	str	r0, [r4, #8]
 8008f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f90:	f7ff fd2e 	bl	80089f0 <memset>
 8008f94:	4620      	mov	r0, r4
 8008f96:	bd70      	pop	{r4, r5, r6, pc}

08008f98 <__sinit>:
 8008f98:	6983      	ldr	r3, [r0, #24]
 8008f9a:	b510      	push	{r4, lr}
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	bb33      	cbnz	r3, 8008fee <__sinit+0x56>
 8008fa0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008fa4:	6503      	str	r3, [r0, #80]	; 0x50
 8008fa6:	4b12      	ldr	r3, [pc, #72]	; (8008ff0 <__sinit+0x58>)
 8008fa8:	4a12      	ldr	r2, [pc, #72]	; (8008ff4 <__sinit+0x5c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6282      	str	r2, [r0, #40]	; 0x28
 8008fae:	4298      	cmp	r0, r3
 8008fb0:	bf04      	itt	eq
 8008fb2:	2301      	moveq	r3, #1
 8008fb4:	6183      	streq	r3, [r0, #24]
 8008fb6:	f000 f81f 	bl	8008ff8 <__sfp>
 8008fba:	6060      	str	r0, [r4, #4]
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 f81b 	bl	8008ff8 <__sfp>
 8008fc2:	60a0      	str	r0, [r4, #8]
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 f817 	bl	8008ff8 <__sfp>
 8008fca:	2200      	movs	r2, #0
 8008fcc:	60e0      	str	r0, [r4, #12]
 8008fce:	2104      	movs	r1, #4
 8008fd0:	6860      	ldr	r0, [r4, #4]
 8008fd2:	f7ff ffa1 	bl	8008f18 <std>
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	2109      	movs	r1, #9
 8008fda:	68a0      	ldr	r0, [r4, #8]
 8008fdc:	f7ff ff9c 	bl	8008f18 <std>
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	2112      	movs	r1, #18
 8008fe4:	68e0      	ldr	r0, [r4, #12]
 8008fe6:	f7ff ff97 	bl	8008f18 <std>
 8008fea:	2301      	movs	r3, #1
 8008fec:	61a3      	str	r3, [r4, #24]
 8008fee:	bd10      	pop	{r4, pc}
 8008ff0:	0800940c 	.word	0x0800940c
 8008ff4:	08008f61 	.word	0x08008f61

08008ff8 <__sfp>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <__sfp+0x70>)
 8008ffc:	681e      	ldr	r6, [r3, #0]
 8008ffe:	69b3      	ldr	r3, [r6, #24]
 8009000:	4607      	mov	r7, r0
 8009002:	b913      	cbnz	r3, 800900a <__sfp+0x12>
 8009004:	4630      	mov	r0, r6
 8009006:	f7ff ffc7 	bl	8008f98 <__sinit>
 800900a:	3648      	adds	r6, #72	; 0x48
 800900c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009010:	3b01      	subs	r3, #1
 8009012:	d503      	bpl.n	800901c <__sfp+0x24>
 8009014:	6833      	ldr	r3, [r6, #0]
 8009016:	b133      	cbz	r3, 8009026 <__sfp+0x2e>
 8009018:	6836      	ldr	r6, [r6, #0]
 800901a:	e7f7      	b.n	800900c <__sfp+0x14>
 800901c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009020:	b16d      	cbz	r5, 800903e <__sfp+0x46>
 8009022:	3468      	adds	r4, #104	; 0x68
 8009024:	e7f4      	b.n	8009010 <__sfp+0x18>
 8009026:	2104      	movs	r1, #4
 8009028:	4638      	mov	r0, r7
 800902a:	f7ff ff9f 	bl	8008f6c <__sfmoreglue>
 800902e:	6030      	str	r0, [r6, #0]
 8009030:	2800      	cmp	r0, #0
 8009032:	d1f1      	bne.n	8009018 <__sfp+0x20>
 8009034:	230c      	movs	r3, #12
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	4604      	mov	r4, r0
 800903a:	4620      	mov	r0, r4
 800903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <__sfp+0x74>)
 8009040:	6665      	str	r5, [r4, #100]	; 0x64
 8009042:	e9c4 5500 	strd	r5, r5, [r4]
 8009046:	60a5      	str	r5, [r4, #8]
 8009048:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800904c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009050:	2208      	movs	r2, #8
 8009052:	4629      	mov	r1, r5
 8009054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009058:	f7ff fcca 	bl	80089f0 <memset>
 800905c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009064:	e7e9      	b.n	800903a <__sfp+0x42>
 8009066:	bf00      	nop
 8009068:	0800940c 	.word	0x0800940c
 800906c:	ffff0001 	.word	0xffff0001

08009070 <_fwalk_reent>:
 8009070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009074:	4680      	mov	r8, r0
 8009076:	4689      	mov	r9, r1
 8009078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800907c:	2600      	movs	r6, #0
 800907e:	b914      	cbnz	r4, 8009086 <_fwalk_reent+0x16>
 8009080:	4630      	mov	r0, r6
 8009082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009086:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800908a:	3f01      	subs	r7, #1
 800908c:	d501      	bpl.n	8009092 <_fwalk_reent+0x22>
 800908e:	6824      	ldr	r4, [r4, #0]
 8009090:	e7f5      	b.n	800907e <_fwalk_reent+0xe>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d907      	bls.n	80090a8 <_fwalk_reent+0x38>
 8009098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800909c:	3301      	adds	r3, #1
 800909e:	d003      	beq.n	80090a8 <_fwalk_reent+0x38>
 80090a0:	4629      	mov	r1, r5
 80090a2:	4640      	mov	r0, r8
 80090a4:	47c8      	blx	r9
 80090a6:	4306      	orrs	r6, r0
 80090a8:	3568      	adds	r5, #104	; 0x68
 80090aa:	e7ee      	b.n	800908a <_fwalk_reent+0x1a>

080090ac <__swhatbuf_r>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	460e      	mov	r6, r1
 80090b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b4:	2900      	cmp	r1, #0
 80090b6:	b096      	sub	sp, #88	; 0x58
 80090b8:	4614      	mov	r4, r2
 80090ba:	461d      	mov	r5, r3
 80090bc:	da07      	bge.n	80090ce <__swhatbuf_r+0x22>
 80090be:	2300      	movs	r3, #0
 80090c0:	602b      	str	r3, [r5, #0]
 80090c2:	89b3      	ldrh	r3, [r6, #12]
 80090c4:	061a      	lsls	r2, r3, #24
 80090c6:	d410      	bmi.n	80090ea <__swhatbuf_r+0x3e>
 80090c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090cc:	e00e      	b.n	80090ec <__swhatbuf_r+0x40>
 80090ce:	466a      	mov	r2, sp
 80090d0:	f000 f8b8 	bl	8009244 <_fstat_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	dbf2      	blt.n	80090be <__swhatbuf_r+0x12>
 80090d8:	9a01      	ldr	r2, [sp, #4]
 80090da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090e2:	425a      	negs	r2, r3
 80090e4:	415a      	adcs	r2, r3
 80090e6:	602a      	str	r2, [r5, #0]
 80090e8:	e7ee      	b.n	80090c8 <__swhatbuf_r+0x1c>
 80090ea:	2340      	movs	r3, #64	; 0x40
 80090ec:	2000      	movs	r0, #0
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	b016      	add	sp, #88	; 0x58
 80090f2:	bd70      	pop	{r4, r5, r6, pc}

080090f4 <__smakebuf_r>:
 80090f4:	898b      	ldrh	r3, [r1, #12]
 80090f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090f8:	079d      	lsls	r5, r3, #30
 80090fa:	4606      	mov	r6, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	d507      	bpl.n	8009110 <__smakebuf_r+0x1c>
 8009100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	2301      	movs	r3, #1
 800910a:	6163      	str	r3, [r4, #20]
 800910c:	b002      	add	sp, #8
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	ab01      	add	r3, sp, #4
 8009112:	466a      	mov	r2, sp
 8009114:	f7ff ffca 	bl	80090ac <__swhatbuf_r>
 8009118:	9900      	ldr	r1, [sp, #0]
 800911a:	4605      	mov	r5, r0
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff fcbd 	bl	8008a9c <_malloc_r>
 8009122:	b948      	cbnz	r0, 8009138 <__smakebuf_r+0x44>
 8009124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009128:	059a      	lsls	r2, r3, #22
 800912a:	d4ef      	bmi.n	800910c <__smakebuf_r+0x18>
 800912c:	f023 0303 	bic.w	r3, r3, #3
 8009130:	f043 0302 	orr.w	r3, r3, #2
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	e7e3      	b.n	8009100 <__smakebuf_r+0xc>
 8009138:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <__smakebuf_r+0x7c>)
 800913a:	62b3      	str	r3, [r6, #40]	; 0x28
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	6020      	str	r0, [r4, #0]
 8009140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	9b00      	ldr	r3, [sp, #0]
 8009148:	6163      	str	r3, [r4, #20]
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	6120      	str	r0, [r4, #16]
 800914e:	b15b      	cbz	r3, 8009168 <__smakebuf_r+0x74>
 8009150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009154:	4630      	mov	r0, r6
 8009156:	f000 f887 	bl	8009268 <_isatty_r>
 800915a:	b128      	cbz	r0, 8009168 <__smakebuf_r+0x74>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	f043 0301 	orr.w	r3, r3, #1
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	431d      	orrs	r5, r3
 800916c:	81a5      	strh	r5, [r4, #12]
 800916e:	e7cd      	b.n	800910c <__smakebuf_r+0x18>
 8009170:	08008f61 	.word	0x08008f61

08009174 <__malloc_lock>:
 8009174:	4770      	bx	lr

08009176 <__malloc_unlock>:
 8009176:	4770      	bx	lr

08009178 <__sread>:
 8009178:	b510      	push	{r4, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	f000 f894 	bl	80092ac <_read_r>
 8009184:	2800      	cmp	r0, #0
 8009186:	bfab      	itete	ge
 8009188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800918a:	89a3      	ldrhlt	r3, [r4, #12]
 800918c:	181b      	addge	r3, r3, r0
 800918e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009192:	bfac      	ite	ge
 8009194:	6563      	strge	r3, [r4, #84]	; 0x54
 8009196:	81a3      	strhlt	r3, [r4, #12]
 8009198:	bd10      	pop	{r4, pc}

0800919a <__swrite>:
 800919a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	461f      	mov	r7, r3
 80091a0:	898b      	ldrh	r3, [r1, #12]
 80091a2:	05db      	lsls	r3, r3, #23
 80091a4:	4605      	mov	r5, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	4616      	mov	r6, r2
 80091aa:	d505      	bpl.n	80091b8 <__swrite+0x1e>
 80091ac:	2302      	movs	r3, #2
 80091ae:	2200      	movs	r2, #0
 80091b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b4:	f000 f868 	bl	8009288 <_lseek_r>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	4632      	mov	r2, r6
 80091c6:	463b      	mov	r3, r7
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ce:	f000 b817 	b.w	8009200 <_write_r>

080091d2 <__sseek>:
 80091d2:	b510      	push	{r4, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091da:	f000 f855 	bl	8009288 <_lseek_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	bf15      	itete	ne
 80091e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ee:	81a3      	strheq	r3, [r4, #12]
 80091f0:	bf18      	it	ne
 80091f2:	81a3      	strhne	r3, [r4, #12]
 80091f4:	bd10      	pop	{r4, pc}

080091f6 <__sclose>:
 80091f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fa:	f000 b813 	b.w	8009224 <_close_r>
	...

08009200 <_write_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4c07      	ldr	r4, [pc, #28]	; (8009220 <_write_r+0x20>)
 8009204:	4605      	mov	r5, r0
 8009206:	4608      	mov	r0, r1
 8009208:	4611      	mov	r1, r2
 800920a:	2200      	movs	r2, #0
 800920c:	6022      	str	r2, [r4, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	f7fe fb03 	bl	800781a <_write>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_write_r+0x1e>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	b103      	cbz	r3, 800921e <_write_r+0x1e>
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	20001cb0 	.word	0x20001cb0

08009224 <_close_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4c06      	ldr	r4, [pc, #24]	; (8009240 <_close_r+0x1c>)
 8009228:	2300      	movs	r3, #0
 800922a:	4605      	mov	r5, r0
 800922c:	4608      	mov	r0, r1
 800922e:	6023      	str	r3, [r4, #0]
 8009230:	f7fe fb04 	bl	800783c <_close>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_close_r+0x1a>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	b103      	cbz	r3, 800923e <_close_r+0x1a>
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	20001cb0 	.word	0x20001cb0

08009244 <_fstat_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4c07      	ldr	r4, [pc, #28]	; (8009264 <_fstat_r+0x20>)
 8009248:	2300      	movs	r3, #0
 800924a:	4605      	mov	r5, r0
 800924c:	4608      	mov	r0, r1
 800924e:	4611      	mov	r1, r2
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	f7fe faff 	bl	8007854 <_fstat>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d102      	bne.n	8009260 <_fstat_r+0x1c>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	b103      	cbz	r3, 8009260 <_fstat_r+0x1c>
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	20001cb0 	.word	0x20001cb0

08009268 <_isatty_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4c06      	ldr	r4, [pc, #24]	; (8009284 <_isatty_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4605      	mov	r5, r0
 8009270:	4608      	mov	r0, r1
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	f7fe fafe 	bl	8007874 <_isatty>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_isatty_r+0x1a>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	b103      	cbz	r3, 8009282 <_isatty_r+0x1a>
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20001cb0 	.word	0x20001cb0

08009288 <_lseek_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4c07      	ldr	r4, [pc, #28]	; (80092a8 <_lseek_r+0x20>)
 800928c:	4605      	mov	r5, r0
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	2200      	movs	r2, #0
 8009294:	6022      	str	r2, [r4, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7fe faf7 	bl	800788a <_lseek>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_lseek_r+0x1e>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_lseek_r+0x1e>
 80092a4:	602b      	str	r3, [r5, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20001cb0 	.word	0x20001cb0

080092ac <_read_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4c07      	ldr	r4, [pc, #28]	; (80092cc <_read_r+0x20>)
 80092b0:	4605      	mov	r5, r0
 80092b2:	4608      	mov	r0, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7fe fa90 	bl	80077e0 <_read>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_read_r+0x1e>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_read_r+0x1e>
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	20001cb0 	.word	0x20001cb0

080092d0 <_init>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr

080092dc <_fini>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr
