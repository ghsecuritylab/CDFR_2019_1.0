
CDFR release 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016318  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024ac  080164c8  080164c8  000264c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018974  08018974  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08018974  08018974  00028974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801897c  0801897c  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801897c  0801897c  0002897c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018980  08018980  00028980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018984  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000830c  200001f0  08018b74  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200084fc  08018b74  000384fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047e69  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008734  00000000  00000000  00078089  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023f0  00000000  00000000  000807c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  00082bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003595d  00000000  00000000  00084d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000327ef  00000000  00000000  000ba65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6fc8  00000000  00000000  000ece4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3e14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000994c  00000000  00000000  001e3e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080164b0 	.word	0x080164b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	080164b0 	.word	0x080164b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(VL53L1_Dev_t dev, uint8_t new_address)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	VL53L1X_ERROR status = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	085b      	lsrs	r3, r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f99c 	bl	80008e8 <VL53L1_WrByte>
 80005b0:	4603      	mov	r3, r0
 80005b2:	73fb      	strb	r3, [r7, #15]
	return status;
 80005b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_Dev_t dev)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp=0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	2300      	movs	r3, #0
 80005d2:	737b      	strb	r3, [r7, #13]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80005d4:	232d      	movs	r3, #45	; 0x2d
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	e00e      	b.n	80005f8 <VL53L1X_SensorInit+0x38>
		status = VL53L1_WrByte(&dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	b299      	uxth	r1, r3
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3b2d      	subs	r3, #45	; 0x2d
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <VL53L1X_SensorInit+0xa4>)
 80005e4:	5cd2      	ldrb	r2, [r2, r3]
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f97d 	bl	80008e8 <VL53L1_WrByte>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	3301      	adds	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b87      	cmp	r3, #135	; 0x87
 80005fc:	d9ed      	bls.n	80005da <VL53L1X_SensorInit+0x1a>
	}
	status = VL53L1X_StartRanging(dev);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f86c 	bl	80006dc <VL53L1X_StartRanging>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8000608:	e007      	b.n	800061a <VL53L1X_SensorInit+0x5a>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 800060a:	f107 030d 	add.w	r3, r7, #13
 800060e:	4619      	mov	r1, r3
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 f88b 	bl	800072c <VL53L1X_CheckForDataReady>
 8000616:	4603      	mov	r3, r0
 8000618:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f4      	beq.n	800060a <VL53L1X_SensorInit+0x4a>
	}
	tmp  = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	737b      	strb	r3, [r7, #13]
	status = VL53L1X_ClearInterrupt(dev);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f81f 	bl	8000668 <VL53L1X_ClearInterrupt>
 800062a:	4603      	mov	r3, r0
 800062c:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f868 	bl	8000704 <VL53L1X_StopRanging>
 8000634:	4603      	mov	r3, r0
 8000636:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2209      	movs	r2, #9
 800063c:	2108      	movs	r1, #8
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f952 	bl	80008e8 <VL53L1_WrByte>
 8000644:	4603      	mov	r3, r0
 8000646:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	210b      	movs	r1, #11
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f94a 	bl	80008e8 <VL53L1_WrByte>
 8000654:	4603      	mov	r3, r0
 8000656:	73bb      	strb	r3, [r7, #14]
	return status;
 8000658:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	08018770 	.word	0x08018770

08000668 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_Dev_t dev)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2201      	movs	r2, #1
 8000678:	2186      	movs	r1, #134	; 0x86
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f934 	bl	80008e8 <VL53L1_WrByte>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
	return status;
 8000684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(&dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_Dev_t dev, uint8_t *pInterruptPolarity)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(&dev, GPIO_HV_MUX__CTRL, &Temp);
 800069e:	f107 020e 	add.w	r2, r7, #14
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2130      	movs	r1, #48	; 0x30
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f938 	bl	800091c <VL53L1_RdByte>
 80006ac:	4603      	mov	r3, r0
 80006ae:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	091b      	lsrs	r3, r3, #4
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	bf0c      	ite	eq
 80006c4:	2301      	moveq	r3, #1
 80006c6:	2300      	movne	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	701a      	strb	r2, [r3, #0]
	return status;
 80006d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_Dev_t dev)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2240      	movs	r2, #64	; 0x40
 80006ec:	2187      	movs	r1, #135	; 0x87
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f8fa 	bl	80008e8 <VL53L1_WrByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]
	return status;
 80006f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_Dev_t dev)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	2187      	movs	r1, #135	; 0x87
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f8e6 	bl	80008e8 <VL53L1_WrByte>
 800071c:	4603      	mov	r3, r0
 800071e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_Dev_t dev, uint8_t *isDataReady)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 800073a:	f107 030d 	add.w	r3, r7, #13
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ffa5 	bl	8000690 <VL53L1X_GetInterruptPolarity>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(&dev, GPIO__TIO_HV_STATUS, &Temp);
 800074a:	f107 020e 	add.w	r2, r7, #14
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2131      	movs	r1, #49	; 0x31
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f8e2 	bl	800091c <VL53L1_RdByte>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 800075c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10c      	bne.n	800077e <VL53L1X_CheckForDataReady+0x52>
		if ((Temp & 1) == IntPol)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	7b7a      	ldrb	r2, [r7, #13]
 800076c:	4293      	cmp	r3, r2
 800076e:	d103      	bne.n	8000778 <VL53L1X_CheckForDataReady+0x4c>
			*isDataReady = 1;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e002      	b.n	800077e <VL53L1X_CheckForDataReady+0x52>
		else
			*isDataReady = 0;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_Dev_t dev, uint8_t *state)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(&dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 800079c:	f107 020e 	add.w	r2, r7, #14
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	21e5      	movs	r1, #229	; 0xe5
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f8b9 	bl	800091c <VL53L1_RdByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 80007ae:	7bba      	ldrb	r2, [r7, #14]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	701a      	strb	r2, [r3, #0]
	return status;
 80007b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_Dev_t dev, uint16_t *distance)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(&dev,
 80007ce:	f107 020c 	add.w	r2, r7, #12
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2196      	movs	r1, #150	; 0x96
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f8b9 	bl	800094e <VL53L1_RdWord>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 80007e0:	89ba      	ldrh	r2, [r7, #12]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	801a      	strh	r2, [r3, #0]
	return status;
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(VL53L1_Dev_t dev, uint8_t *rangeStatus)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	status = VL53L1_RdByte(&dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8000802:	f107 020e 	add.w	r2, r7, #14
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2189      	movs	r1, #137	; 0x89
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f886 	bl	800091c <VL53L1_RdByte>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt&0x1F;
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	f003 031f 	and.w	r3, r3, #31
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73bb      	strb	r3, [r7, #14]
	switch (RgSt) {
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	3b03      	subs	r3, #3
 8000822:	2b14      	cmp	r3, #20
 8000824:	d853      	bhi.n	80008ce <VL53L1X_GetRangeStatus+0xda>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <VL53L1X_GetRangeStatus+0x38>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	0800089f 	.word	0x0800089f
 8000830:	0800088d 	.word	0x0800088d
 8000834:	08000899 	.word	0x08000899
 8000838:	08000887 	.word	0x08000887
 800083c:	080008ab 	.word	0x080008ab
 8000840:	08000893 	.word	0x08000893
 8000844:	08000881 	.word	0x08000881
 8000848:	080008cf 	.word	0x080008cf
 800084c:	080008cf 	.word	0x080008cf
 8000850:	080008b1 	.word	0x080008b1
 8000854:	080008c9 	.word	0x080008c9
 8000858:	080008cf 	.word	0x080008cf
 800085c:	080008cf 	.word	0x080008cf
 8000860:	080008cf 	.word	0x080008cf
 8000864:	080008cf 	.word	0x080008cf
 8000868:	080008b7 	.word	0x080008b7
 800086c:	080008a5 	.word	0x080008a5
 8000870:	080008cf 	.word	0x080008cf
 8000874:	080008cf 	.word	0x080008cf
 8000878:	080008bd 	.word	0x080008bd
 800087c:	080008c3 	.word	0x080008c3
	case 9:
		RgSt = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73bb      	strb	r3, [r7, #14]
		break;
 8000884:	e026      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 6:
		RgSt = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	73bb      	strb	r3, [r7, #14]
		break;
 800088a:	e023      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 4:
		RgSt = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	73bb      	strb	r3, [r7, #14]
		break;
 8000890:	e020      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 8:
		RgSt = 3;
 8000892:	2303      	movs	r3, #3
 8000894:	73bb      	strb	r3, [r7, #14]
		break;
 8000896:	e01d      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 5:
		RgSt = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	73bb      	strb	r3, [r7, #14]
		break;
 800089c:	e01a      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 3:
		RgSt = 5;
 800089e:	2305      	movs	r3, #5
 80008a0:	73bb      	strb	r3, [r7, #14]
		break;
 80008a2:	e017      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 19:
		RgSt = 6;
 80008a4:	2306      	movs	r3, #6
 80008a6:	73bb      	strb	r3, [r7, #14]
		break;
 80008a8:	e014      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 7:
		RgSt = 7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	73bb      	strb	r3, [r7, #14]
		break;
 80008ae:	e011      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 12:
		RgSt = 9;
 80008b0:	2309      	movs	r3, #9
 80008b2:	73bb      	strb	r3, [r7, #14]
		break;
 80008b4:	e00e      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 18:
		RgSt = 10;
 80008b6:	230a      	movs	r3, #10
 80008b8:	73bb      	strb	r3, [r7, #14]
		break;
 80008ba:	e00b      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 22:
		RgSt = 11;
 80008bc:	230b      	movs	r3, #11
 80008be:	73bb      	strb	r3, [r7, #14]
		break;
 80008c0:	e008      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 23:
		RgSt = 12;
 80008c2:	230c      	movs	r3, #12
 80008c4:	73bb      	strb	r3, [r7, #14]
		break;
 80008c6:	e005      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	case 13:
		RgSt = 13;
 80008c8:	230d      	movs	r3, #13
 80008ca:	73bb      	strb	r3, [r7, #14]
		break;
 80008cc:	e002      	b.n	80008d4 <VL53L1X_GetRangeStatus+0xe0>
	default:
		RgSt = 255;
 80008ce:	23ff      	movs	r3, #255	; 0xff
 80008d0:	73bb      	strb	r3, [r7, #14]
		break;
 80008d2:	bf00      	nop
	}
	*rangeStatus = RgSt;
 80008d4:	7bba      	ldrb	r2, [r7, #14]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	701a      	strb	r2, [r3, #0]
	return status;
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop

080008e8 <VL53L1_WrByte>:
#include <math.h>


#include "i2c.h"

int8_t VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
 80008f4:	4613      	mov	r3, r2
 80008f6:	707b      	strb	r3, [r7, #1]

	uint8_t status = I2C_STATUS_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
	status = F_I2C2_WriteRegister(Dev->addr, index, &data, 1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	b2d8      	uxtb	r0, r3
 8000902:	1c7a      	adds	r2, r7, #1
 8000904:	8879      	ldrh	r1, [r7, #2]
 8000906:	2301      	movs	r3, #1
 8000908:	f012 ff66 	bl	80137d8 <F_I2C2_WriteRegister>
 800090c:	4603      	mov	r3, r0
 800090e:	73fb      	strb	r3, [r7, #15]

	return status; // to be implemented
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <VL53L1_RdByte>:
	status = F_I2C2_WriteRegister(Dev->addr, index, &to_send[3], 1);

	return status; // to be implemented
}

int8_t VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	460b      	mov	r3, r1
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	817b      	strh	r3, [r7, #10]

	uint8_t status = I2C_STATUS_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	75fb      	strb	r3, [r7, #23]
	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 1, data);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	8979      	ldrh	r1, [r7, #10]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	f012 ffd1 	bl	80138e0 <F_I2C2_ReadRegisterVL53L1X>
 800093e:	4603      	mov	r3, r0
 8000940:	75fb      	strb	r3, [r7, #23]

	return status; // to be implemented
 8000942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <VL53L1_RdWord>:

int8_t VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	460b      	mov	r3, r1
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	817b      	strh	r3, [r7, #10]

	uint8_t read_values[2] = {0,0};
 800095c:	2300      	movs	r3, #0
 800095e:	753b      	strb	r3, [r7, #20]
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]
	uint8_t status = I2C_STATUS_OK;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]

	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 2, read_values);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	b2d8      	uxtb	r0, r3
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	8979      	ldrh	r1, [r7, #10]
 8000974:	2202      	movs	r2, #2
 8000976:	f012 ffb3 	bl	80138e0 <F_I2C2_ReadRegisterVL53L1X>
 800097a:	4603      	mov	r3, r0
 800097c:	75fb      	strb	r3, [r7, #23]

	*data = (read_values[0] << 8) + read_values[1];
 800097e:	7d3b      	ldrb	r3, [r7, #20]
 8000980:	b29b      	uxth	r3, r3
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b29a      	uxth	r2, r3
 8000986:	7d7b      	ldrb	r3, [r7, #21]
 8000988:	b29b      	uxth	r3, r3
 800098a:	4413      	add	r3, r2
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	801a      	strh	r2, [r3, #0]

	return status; // to be implemented
 8000992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f94d 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f013 fa22 	bl	8013e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f965 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a20:	f000 f92d 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000128 	.word	0x20000128
 8000a3c:	20000004 	.word	0x20000004
 8000a40:	20000000 	.word	0x20000000

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000004 	.word	0x20000004
 8000a68:	2000039c 	.word	0x2000039c

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2000039c 	.word	0x2000039c

08000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a8c:	f7ff ffee 	bl	8000a6c <HAL_GetTick>
 8000a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a9c:	d005      	beq.n	8000aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_Delay+0x40>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aaa:	bf00      	nop
 8000aac:	f7ff ffde 	bl	8000a6c <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d8f7      	bhi.n	8000aac <HAL_Delay+0x28>
  {
  }
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	; (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff31 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000cfc:	4baa      	ldr	r3, [pc, #680]	; (8000fa8 <HAL_ETH_Init+0x2bc>)
 8000cfe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e185      	b.n	800101e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f011 ff7c 	bl	8012c24 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b9e      	ldr	r3, [pc, #632]	; (8000fac <HAL_ETH_Init+0x2c0>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a9d      	ldr	r2, [pc, #628]	; (8000fac <HAL_ETH_Init+0x2c0>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b9b      	ldr	r3, [pc, #620]	; (8000fac <HAL_ETH_Init+0x2c0>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d48:	4b99      	ldr	r3, [pc, #612]	; (8000fb0 <HAL_ETH_Init+0x2c4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	4a98      	ldr	r2, [pc, #608]	; (8000fb0 <HAL_ETH_Init+0x2c4>)
 8000d4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d52:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000d54:	4b96      	ldr	r3, [pc, #600]	; (8000fb0 <HAL_ETH_Init+0x2c4>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4994      	ldr	r1, [pc, #592]	; (8000fb0 <HAL_ETH_Init+0x2c4>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0201 	orr.w	r2, r2, #1
 8000d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d78:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d7a:	f7ff fe77 	bl	8000a6c <HAL_GetTick>
 8000d7e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d80:	e011      	b.n	8000da6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d82:	f7ff fe73 	bl	8000a6c <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d90:	d909      	bls.n	8000da6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2203      	movs	r2, #3
 8000d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e13b      	b.n	800101e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1e4      	bne.n	8000d82 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f023 031c 	bic.w	r3, r3, #28
 8000dc6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000dc8:	f003 f812 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8000dcc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4a78      	ldr	r2, [pc, #480]	; (8000fb4 <HAL_ETH_Init+0x2c8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d908      	bls.n	8000de8 <HAL_ETH_Init+0xfc>
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4a77      	ldr	r2, [pc, #476]	; (8000fb8 <HAL_ETH_Init+0x2cc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d804      	bhi.n	8000de8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e027      	b.n	8000e38 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	4a73      	ldr	r2, [pc, #460]	; (8000fb8 <HAL_ETH_Init+0x2cc>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d908      	bls.n	8000e02 <HAL_ETH_Init+0x116>
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	4a72      	ldr	r2, [pc, #456]	; (8000fbc <HAL_ETH_Init+0x2d0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d804      	bhi.n	8000e02 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f043 030c 	orr.w	r3, r3, #12
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e01a      	b.n	8000e38 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <HAL_ETH_Init+0x2d0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d903      	bls.n	8000e12 <HAL_ETH_Init+0x126>
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	4a6c      	ldr	r2, [pc, #432]	; (8000fc0 <HAL_ETH_Init+0x2d4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d911      	bls.n	8000e36 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4a6a      	ldr	r2, [pc, #424]	; (8000fc0 <HAL_ETH_Init+0x2d4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d908      	bls.n	8000e2c <HAL_ETH_Init+0x140>
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4a69      	ldr	r2, [pc, #420]	; (8000fc4 <HAL_ETH_Init+0x2d8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d804      	bhi.n	8000e2c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e005      	b.n	8000e38 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	e000      	b.n	8000e38 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000e36:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000e40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e44:	2100      	movs	r1, #0
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 fb9a 	bl	8001580 <HAL_ETH_WritePHYRegister>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000e56:	6939      	ldr	r1, [r7, #16]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 fc27 	bl	80016ac <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e0d9      	b.n	800101e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000e6a:	20ff      	movs	r0, #255	; 0xff
 8000e6c:	f7ff fe0a 	bl	8000a84 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 80a7 	beq.w	8000fc8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e7a:	f7ff fdf7 	bl	8000a6c <HAL_GetTick>
 8000e7e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	461a      	mov	r2, r3
 8000e86:	2101      	movs	r1, #1
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 fb11 	bl	80014b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e8e:	f7ff fded 	bl	8000a6c <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d90f      	bls.n	8000ec0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ea4:	6939      	ldr	r1, [r7, #16]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 fc00 	bl	80016ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0ae      	b.n	800101e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0da      	beq.n	8000e80 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ece:	2100      	movs	r1, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 fb55 	bl	8001580 <HAL_ETH_WritePHYRegister>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 fbe2 	bl	80016ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e094      	b.n	800101e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ef4:	f7ff fdba 	bl	8000a6c <HAL_GetTick>
 8000ef8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	461a      	mov	r2, r3
 8000f00:	2101      	movs	r1, #1
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 fad4 	bl	80014b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000f08:	f7ff fdb0 	bl	8000a6c <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d90f      	bls.n	8000f3a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f1e:	6939      	ldr	r1, [r7, #16]
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 fbc3 	bl	80016ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e071      	b.n	800101e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0da      	beq.n	8000efa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	461a      	mov	r2, r3
 8000f4a:	211f      	movs	r1, #31
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 faaf 	bl	80014b0 <HAL_ETH_ReadPHYRegister>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00b      	beq.n	8000f70 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fba4 	bl	80016ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e056      	b.n	800101e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	e002      	b.n	8000f8a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	e037      	b.n	800100c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	e032      	b.n	800100c <HAL_ETH_Init+0x320>
 8000fa6:	bf00      	nop
 8000fa8:	03938700 	.word	0x03938700
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	01312cff 	.word	0x01312cff
 8000fb8:	02160ebf 	.word	0x02160ebf
 8000fbc:	039386ff 	.word	0x039386ff
 8000fc0:	05f5e0ff 	.word	0x05f5e0ff
 8000fc4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	085b      	lsrs	r3, r3, #1
 8000fd6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 facd 	bl	8001580 <HAL_ETH_WritePHYRegister>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00b      	beq.n	8001004 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ff0:	6939      	ldr	r1, [r7, #16]
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fb5a 	bl	80016ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e00c      	b.n	800101e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001004:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001008:	f7ff fd3c 	bl	8000a84 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fb4c 	bl	80016ac <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop

08001028 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_ETH_DMATxDescListInit+0x20>
 8001044:	2302      	movs	r3, #2
 8001046:	e052      	b.n	80010ee <HAL_ETH_DMATxDescListInit+0xc6>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e030      	b.n	80010c6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	015b      	lsls	r3, r3, #5
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	461a      	mov	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d208      	bcs.n	80010ba <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	015b      	lsls	r3, r3, #5
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	461a      	mov	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	e002      	b.n	80010c0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3ca      	bcc.n	8001064 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d8:	3310      	adds	r3, #16
 80010da:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b087      	sub	sp, #28
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_ETH_DMARxDescListInit+0x20>
 8001116:	2302      	movs	r3, #2
 8001118:	e056      	b.n	80011c8 <HAL_ETH_DMARxDescListInit+0xce>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2202      	movs	r2, #2
 8001126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e034      	b.n	80011a0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	015b      	lsls	r3, r3, #5
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	4413      	add	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001146:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800114e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	461a      	mov	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3b01      	subs	r3, #1
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	429a      	cmp	r2, r3
 8001180:	d208      	bcs.n	8001194 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	4413      	add	r3, r2
 800118c:	461a      	mov	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	e002      	b.n	800119a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d3c6      	bcc.n	8001136 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b2:	330c      	adds	r3, #12
 80011b4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_ETH_TransmitFrame+0x24>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e0cd      	b.n	8001394 <HAL_ETH_TransmitFrame+0x1c0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800121e:	2301      	movs	r3, #1
 8001220:	e0b8      	b.n	8001394 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da09      	bge.n	8001240 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2212      	movs	r2, #18
 8001230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0a9      	b.n	8001394 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001246:	4293      	cmp	r3, r2
 8001248:	d915      	bls.n	8001276 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	4a54      	ldr	r2, [pc, #336]	; (80013a0 <HAL_ETH_TransmitFrame+0x1cc>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0a9b      	lsrs	r3, r3, #10
 8001254:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <HAL_ETH_TransmitFrame+0x1cc>)
 800125a:	fba3 1302 	umull	r1, r3, r3, r2
 800125e:	0a9b      	lsrs	r3, r3, #10
 8001260:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e001      	b.n	800127a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d11c      	bne.n	80012ba <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800128e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800129a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012aa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b8:	e04b      	b.n	8001352 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	e044      	b.n	800134a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ce:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012e4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ee:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d116      	bne.n	8001328 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001308:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4a25      	ldr	r2, [pc, #148]	; (80013a4 <HAL_ETH_TransmitFrame+0x1d0>)
 800130e:	fb02 f203 	mul.w	r2, r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800131a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001326:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001336:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	3301      	adds	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	429a      	cmp	r2, r3
 8001350:	d3b6      	bcc.n	80012c0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135a:	3314      	adds	r3, #20
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00d      	beq.n	8001382 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136e:	3314      	adds	r3, #20
 8001370:	2204      	movs	r2, #4
 8001372:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137c:	3304      	adds	r3, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	ac02b00b 	.word	0xac02b00b
 80013a4:	fffffa0c 	.word	0xfffffa0c

080013a8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_GetReceivedFrame+0x1a>
 80013be:	2302      	movs	r3, #2
 80013c0:	e070      	b.n	80014a4 <HAL_ETH_GetReceivedFrame+0xfc>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db5a      	blt.n	8001492 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d030      	beq.n	800144c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d103      	bne.n	8001404 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0c1b      	lsrs	r3, r3, #16
 8001414:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001418:	3b04      	subs	r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	e02b      	b.n	80014a4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001456:	2b00      	cmp	r3, #0
 8001458:	d010      	beq.n	800147c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	461a      	mov	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
 800147a:	e00a      	b.n	8001492 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	460b      	mov	r3, r1
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b82      	cmp	r3, #130	; 0x82
 80014d0:	d101      	bne.n	80014d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80014d2:	2302      	movs	r3, #2
 80014d4:	e050      	b.n	8001578 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2282      	movs	r2, #130	; 0x82
 80014da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 031c 	and.w	r3, r3, #28
 80014ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8a1b      	ldrh	r3, [r3, #16]
 80014f2:	02db      	lsls	r3, r3, #11
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	019b      	lsls	r3, r3, #6
 8001500:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f023 0302 	bic.w	r3, r3, #2
 8001510:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001522:	f7ff faa3 	bl	8000a6c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001528:	e015      	b.n	8001556 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800152a:	f7ff fa9f 	bl	8000a6c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d309      	bcc.n	800154e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e014      	b.n	8001578 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e4      	bne.n	800152a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	b29b      	uxth	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	460b      	mov	r3, r1
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b42      	cmp	r3, #66	; 0x42
 80015a0:	d101      	bne.n	80015a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
 80015a4:	e04e      	b.n	8001644 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2242      	movs	r2, #66	; 0x42
 80015aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 031c 	and.w	r3, r3, #28
 80015bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8a1b      	ldrh	r3, [r3, #16]
 80015c2:	02db      	lsls	r3, r3, #11
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015cc:	897b      	ldrh	r3, [r7, #10]
 80015ce:	019b      	lsls	r3, r3, #6
 80015d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015fc:	f7ff fa36 	bl	8000a6c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001602:	e015      	b.n	8001630 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001604:	f7ff fa32 	bl	8000a6c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d309      	bcc.n	8001628 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e00d      	b.n	8001644 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1e4      	bne.n	8001604 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_ETH_Start+0x16>
 800165e:	2302      	movs	r3, #2
 8001660:	e01f      	b.n	80016a2 <HAL_ETH_Start+0x56>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2202      	movs	r2, #2
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fa1c 	bl	8001ab0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fa36 	bl	8001aea <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fa80 	bl	8001b84 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fa4d 	bl	8001b24 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fa62 	bl	8001b54 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0b0      	sub	sp, #192	; 0xc0
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80016da:	2300      	movs	r3, #0
 80016dc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	663b      	str	r3, [r7, #96]	; 0x60
 80016f8:	e001      	b.n	80016fe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80016fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001702:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001708:	2300      	movs	r3, #0
 800170a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001718:	2340      	movs	r3, #64	; 0x40
 800171a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001780:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001784:	4bac      	ldr	r3, [pc, #688]	; (8001a38 <ETH_MACDMAConfig+0x38c>)
 8001786:	4013      	ands	r3, r2
 8001788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800178c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800178e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001790:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001794:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001798:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800179e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80017a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80017a2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80017a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80017a6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80017ac:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80017ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80017b0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80017b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80017b4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80017b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80017b8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80017ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80017bc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80017be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80017c0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80017c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017c6:	4313      	orrs	r3, r2
 80017c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff f94f 	bl	8000a84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017ee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80017f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017f4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80017f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80017f8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80017fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80017fe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001804:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800180a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800180c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001810:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001814:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800181c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800181e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800182a:	2001      	movs	r0, #1
 800182c:	f7ff f92a 	bl	8000a84 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001838:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001842:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800184c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001858:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800185c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001860:	4013      	ands	r3, r2
 8001862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800186a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800186c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001870:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001876:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800187c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800187e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001882:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001888:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800188a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188e:	4313      	orrs	r3, r2
 8001890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800189c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff f8eb 	bl	8000a84 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80018b8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80018bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff f8d6 	bl	8000a84 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018e0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80018f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018f4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001906:	2304      	movs	r3, #4
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800190a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800191c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001926:	2300      	movs	r3, #0
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800192a:	2300      	movs	r3, #0
 800192c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001936:	3318      	adds	r3, #24
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800193e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <ETH_MACDMAConfig+0x390>)
 8001944:	4013      	ands	r3, r2
 8001946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800194a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800194c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800194e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001950:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001952:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001954:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001956:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001958:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800195a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800195c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800195e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001960:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001962:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001966:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800196a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800196c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001970:	4313      	orrs	r3, r2
 8001972:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	3318      	adds	r3, #24
 8001980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001984:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198e:	3318      	adds	r3, #24
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff f874 	bl	8000a84 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	3318      	adds	r3, #24
 80019a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019aa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80019b0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80019b4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80019b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80019b8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80019ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80019bc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80019be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80019c2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80019c6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff f84d 	bl	8000a84 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d10f      	bne.n	8001a20 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a08:	331c      	adds	r3, #28
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1c:	331c      	adds	r3, #28
 8001a1e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	461a      	mov	r2, r3
 8001a26:	2100      	movs	r1, #0
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f809 	bl	8001a40 <ETH_MACAddressConfig>
}
 8001a2e:	bf00      	nop
 8001a30:	37c0      	adds	r7, #192	; 0xc0
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	ff20810f 	.word	0xff20810f
 8001a3c:	f8de3f23 	.word	0xf8de3f23

08001a40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3305      	adds	r3, #5
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	3204      	adds	r2, #4
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <ETH_MACAddressConfig+0x68>)
 8001a62:	4413      	add	r3, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	061a      	lsls	r2, r3, #24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3302      	adds	r3, #2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	4313      	orrs	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <ETH_MACAddressConfig+0x6c>)
 8001a92:	4413      	add	r3, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40028040 	.word	0x40028040
 8001aac:	40028044 	.word	0x40028044

08001ab0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0208 	orr.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f000 f87f 	bl	8001bd8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0204 	orr.w	r2, r2, #4
 8001b04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f000 f862 	bl	8001bd8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	601a      	str	r2, [r3, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b34:	3318      	adds	r3, #24
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	3318      	adds	r3, #24
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b64:	3318      	adds	r3, #24
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0202 	orr.w	r2, r2, #2
 8001b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b74:	3318      	adds	r3, #24
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	3318      	adds	r3, #24
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba8:	3318      	adds	r3, #24
 8001baa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	3318      	adds	r3, #24
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 f80c 	bl	8001bd8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	3318      	adds	r3, #24
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <ETH_Delay+0x34>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <ETH_Delay+0x38>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0a5b      	lsrs	r3, r3, #9
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001bf4:	bf00      	nop
  } 
  while (Delay --);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	60fa      	str	r2, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <ETH_Delay+0x1c>
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000128 	.word	0x20000128
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e177      	b.n	8001f20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8166 	bne.w	8001f1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x4a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d123      	bne.n	8001ca6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	69b9      	ldr	r1, [r7, #24]
 8001ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0203 	and.w	r2, r3, #3
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d00b      	beq.n	8001cfa <HAL_GPIO_Init+0xe6>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d130      	bne.n	8001d5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80c0 	beq.w	8001f1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a64      	ldr	r2, [pc, #400]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db6:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a57      	ldr	r2, [pc, #348]	; (8001f3c <HAL_GPIO_Init+0x328>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d037      	beq.n	8001e52 <HAL_GPIO_Init+0x23e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a56      	ldr	r2, [pc, #344]	; (8001f40 <HAL_GPIO_Init+0x32c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d031      	beq.n	8001e4e <HAL_GPIO_Init+0x23a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_GPIO_Init+0x330>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <HAL_GPIO_Init+0x236>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a54      	ldr	r2, [pc, #336]	; (8001f48 <HAL_GPIO_Init+0x334>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x232>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a53      	ldr	r2, [pc, #332]	; (8001f4c <HAL_GPIO_Init+0x338>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x22e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_GPIO_Init+0x33c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x22a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a51      	ldr	r2, [pc, #324]	; (8001f54 <HAL_GPIO_Init+0x340>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a50      	ldr	r2, [pc, #320]	; (8001f58 <HAL_GPIO_Init+0x344>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4f      	ldr	r2, [pc, #316]	; (8001f5c <HAL_GPIO_Init+0x348>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <HAL_GPIO_Init+0x34c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001e2a:	2309      	movs	r3, #9
 8001e2c:	e012      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e2e:	230a      	movs	r3, #10
 8001e30:	e010      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e00e      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e00c      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e00a      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e64:	4934      	ldr	r1, [pc, #208]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e96:	4a33      	ldr	r2, [pc, #204]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec0:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f ae84 	bls.w	8001c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3724      	adds	r7, #36	; 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40022400 	.word	0x40022400
 8001f64:	40013c00 	.word	0x40013c00

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	041a      	lsls	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e10f      	b.n	80021ce <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f011 fb8a 	bl	80136dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f001 ff12 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a7b      	ldr	r2, [pc, #492]	; (80021d8 <HAL_I2C_Init+0x23c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d807      	bhi.n	8002000 <HAL_I2C_Init+0x64>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a7a      	ldr	r2, [pc, #488]	; (80021dc <HAL_I2C_Init+0x240>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e006      	b.n	800200e <HAL_I2C_Init+0x72>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_I2C_Init+0x244>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0db      	b.n	80021ce <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a72      	ldr	r2, [pc, #456]	; (80021e4 <HAL_I2C_Init+0x248>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a64      	ldr	r2, [pc, #400]	; (80021d8 <HAL_I2C_Init+0x23c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d802      	bhi.n	8002050 <HAL_I2C_Init+0xb4>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	e009      	b.n	8002064 <HAL_I2C_Init+0xc8>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_I2C_Init+0x24c>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	3301      	adds	r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4956      	ldr	r1, [pc, #344]	; (80021d8 <HAL_I2C_Init+0x23c>)
 8002080:	428b      	cmp	r3, r1
 8002082:	d80d      	bhi.n	80020a0 <HAL_I2C_Init+0x104>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	bf38      	it	cc
 800209c:	2304      	movcc	r3, #4
 800209e:	e04f      	b.n	8002140 <HAL_I2C_Init+0x1a4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d111      	bne.n	80020cc <HAL_I2C_Init+0x130>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e012      	b.n	80020f2 <HAL_I2C_Init+0x156>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Init+0x15e>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e022      	b.n	8002140 <HAL_I2C_Init+0x1a4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <HAL_I2C_Init+0x184>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e58      	subs	r0, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	fbb0 f3f3 	udiv	r3, r0, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211e:	e00f      	b.n	8002140 <HAL_I2C_Init+0x1a4>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	6809      	ldr	r1, [r1, #0]
 8002144:	4313      	orrs	r3, r2
 8002146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800216e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6911      	ldr	r1, [r2, #16]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68d2      	ldr	r2, [r2, #12]
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	430b      	orrs	r3, r1
 8002182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	000186a0 	.word	0x000186a0
 80021dc:	001e847f 	.word	0x001e847f
 80021e0:	003d08ff 	.word	0x003d08ff
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d129      	bne.n	8002256 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2224      	movs	r2, #36	; 0x24
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0210 	bic.w	r2, r2, #16
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b20      	cmp	r3, #32
 800227c:	d12a      	bne.n	80022d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2224      	movs	r2, #36	; 0x24
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800229e:	89fb      	ldrh	r3, [r7, #14]
 80022a0:	f023 030f 	bic.w	r3, r3, #15
 80022a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	89fb      	ldrh	r3, [r7, #14]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	89fa      	ldrh	r2, [r7, #14]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e4:	b08f      	sub	sp, #60	; 0x3c
 80022e6:	af0a      	add	r7, sp, #40	; 0x28
 80022e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e10f      	b.n	8002514 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f012 fcb6 	bl	8014c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2203      	movs	r2, #3
 8002318:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f002 ffed 	bl	8005312 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	687e      	ldr	r6, [r7, #4]
 8002340:	466d      	mov	r5, sp
 8002342:	f106 0410 	add.w	r4, r6, #16
 8002346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002352:	e885 0003 	stmia.w	r5, {r0, r1}
 8002356:	1d33      	adds	r3, r6, #4
 8002358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235a:	6838      	ldr	r0, [r7, #0]
 800235c:	f002 fec4 	bl	80050e8 <USB_CoreInit>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0d0      	b.n	8002514 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f002 ffdb 	bl	8005334 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e04a      	b.n	800241a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	333d      	adds	r3, #61	; 0x3d
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	333c      	adds	r3, #60	; 0x3c
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	b298      	uxth	r0, r3
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3342      	adds	r3, #66	; 0x42
 80023c0:	4602      	mov	r2, r0
 80023c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	333f      	adds	r3, #63	; 0x3f
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3344      	adds	r3, #68	; 0x44
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3348      	adds	r3, #72	; 0x48
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3350      	adds	r3, #80	; 0x50
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	3301      	adds	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	d3af      	bcc.n	8002384 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e044      	b.n	80024b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	3301      	adds	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d3b5      	bcc.n	800242a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	687e      	ldr	r6, [r7, #4]
 80024c6:	466d      	mov	r5, sp
 80024c8:	f106 0410 	add.w	r4, r6, #16
 80024cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80024dc:	1d33      	adds	r3, r6, #4
 80024de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e0:	6838      	ldr	r0, [r7, #0]
 80024e2:	f002 ff51 	bl	8005388 <USB_DevInit>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e00d      	b.n	8002514 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 ff46 	bl	800639e <USB_DevDisconnect>

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800251c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_PCD_Start+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e020      	b.n	800257a <HAL_PCD_Start+0x5e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	2b01      	cmp	r3, #1
 8002546:	d109      	bne.n	800255c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800254c:	2b01      	cmp	r3, #1
 800254e:	d005      	beq.n	800255c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f003 ff04 	bl	800636e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f002 fec0 	bl	80052f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002582:	b590      	push	{r4, r7, lr}
 8002584:	b08d      	sub	sp, #52	; 0x34
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 ffab 	bl	80064f4 <USB_GetMode>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 838e 	bne.w	8002cc2 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 ff0f 	bl	80063ce <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8384 	beq.w	8002cc0 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 ff06 	bl	80063ce <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d107      	bne.n	80025dc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f002 0202 	and.w	r2, r2, #2
 80025da:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fef4 	bl	80063ce <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025f0:	d17b      	bne.n	80026ea <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fefa 	bl	80063f4 <USB_ReadDevAllOutEpInterrupt>
 8002600:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002602:	e06f      	b.n	80026e4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d064      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f003 ff1f 	bl	800645c <USB_ReadDevOutEPInterrupt>
 800261e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002636:	461a      	mov	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fe0e 	bl	8003260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800264e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 ff0d 	bl	8003470 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002662:	461a      	mov	r2, r3
 8002664:	2308      	movs	r3, #8
 8002666:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267e:	461a      	mov	r2, r3
 8002680:	2310      	movs	r3, #16
 8002682:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d015      	beq.n	80026ba <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d108      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026a0:	461a      	mov	r2, r3
 80026a2:	2101      	movs	r1, #1
 80026a4:	f003 ff6a 	bl	800657c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b4:	461a      	mov	r2, r3
 80026b6:	2320      	movs	r3, #32
 80026b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d0:	461a      	mov	r2, r3
 80026d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	3301      	adds	r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d18c      	bne.n	8002604 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fe6d 	bl	80063ce <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026fe:	f040 80c4 	bne.w	800288a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fe8e 	bl	8006428 <USB_ReadDevAllInEpInterrupt>
 800270c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002712:	e0b6      	b.n	8002882 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80ab 	beq.w	8002876 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f003 feb4 	bl	8006498 <USB_ReadDevInEPInterrupt>
 8002730:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d05b      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	2201      	movs	r2, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	43db      	mvns	r3, r3
 8002756:	69f9      	ldr	r1, [r7, #28]
 8002758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800275c:	4013      	ands	r3, r2
 800275e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800276c:	461a      	mov	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d11b      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3348      	adds	r3, #72	; 0x48
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4403      	add	r3, r0
 800279a:	3344      	adds	r3, #68	; 0x44
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4419      	add	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4403      	add	r3, r0
 80027ae:	3348      	adds	r3, #72	; 0x48
 80027b0:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f012 faf0 	bl	8014d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d116      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d113      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x272>
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3350      	adds	r3, #80	; 0x50
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ec:	461a      	mov	r2, r3
 80027ee:	2101      	movs	r1, #1
 80027f0:	f003 fec4 	bl	800657c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280a:	461a      	mov	r2, r3
 800280c:	2308      	movs	r3, #8
 800280e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002826:	461a      	mov	r2, r3
 8002828:	2310      	movs	r3, #16
 800282a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002842:	461a      	mov	r2, r3
 8002844:	2340      	movs	r3, #64	; 0x40
 8002846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285e:	461a      	mov	r2, r3
 8002860:	2302      	movs	r3, #2
 8002862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800286e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fc67 	bl	8003144 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	3301      	adds	r3, #1
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f af45 	bne.w	8002714 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fd9d 	bl	80063ce <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800289a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800289e:	d122      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028c6:	2100      	movs	r1, #0
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fe89 	bl	80035e0 <HAL_PCDEx_LPM_Callback>
 80028ce:	e002      	b.n	80028d6 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f012 fadb 	bl	8014e8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fd6f 	bl	80063ce <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fa:	d112      	bne.n	8002922 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f012 fa97 	bl	8014e40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002920:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f003 fd51 	bl	80063ce <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	f040 80a7 	bne.w	8002a88 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2110      	movs	r1, #16
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fe89 	bl	800566c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295e:	e036      	b.n	80029ce <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296c:	461a      	mov	r2, r3
 800296e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002972:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002984:	0151      	lsls	r1, r2, #5
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	440a      	add	r2, r1
 800298a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800298e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002992:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a0:	461a      	mov	r2, r3
 80029a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b8:	0151      	lsls	r1, r2, #5
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	440a      	add	r2, r1
 80029be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	3301      	adds	r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3c3      	bcc.n	8002960 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d016      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a04:	f043 030b 	orr.w	r3, r3, #11
 8002a08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1a:	f043 030b 	orr.w	r3, r3, #11
 8002a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a20:	e015      	b.n	8002a4e <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a34:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a38:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a48:	f043 030b 	orr.w	r3, r3, #11
 8002a4c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a60:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a72:	461a      	mov	r2, r3
 8002a74:	f003 fd82 	bl	800657c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fc9e 	bl	80063ce <USB_ReadInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9c:	d124      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 fd34 	bl	8006510 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fe3e 	bl	800572e <USB_GetDevSpeed>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681c      	ldr	r4, [r3, #0]
 8002abe:	f001 f997 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8002ac2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	4620      	mov	r0, r4
 8002ace:	f002 fb6d 	bl	80051ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f012 f98b 	bl	8014dee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fc6e 	bl	80063ce <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d161      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0210 	bic.w	r2, r2, #16
 8002b0a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	0c5b      	lsrs	r3, r3, #17
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d124      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d035      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6a38      	ldr	r0, [r7, #32]
 8002b58:	f003 fae6 	bl	8006128 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b68:	441a      	add	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	e016      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	0c5b      	lsrs	r3, r3, #17
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d110      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b94:	2208      	movs	r2, #8
 8002b96:	4619      	mov	r1, r3
 8002b98:	6a38      	ldr	r0, [r7, #32]
 8002b9a:	f003 fac5 	bl	8006128 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002baa:	441a      	add	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0210 	orr.w	r2, r2, #16
 8002bbe:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fc02 	bl	80063ce <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d10a      	bne.n	8002bea <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f012 f8fc 	bl	8014dd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f002 0208 	and.w	r2, r2, #8
 8002be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fbed 	bl	80063ce <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bfe:	d10f      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f012 f95e 	bl	8014ecc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fbd2 	bl	80063ce <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c34:	d10f      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f012 f931 	bl	8014ea8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 fbb7 	bl	80063ce <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6a:	d10a      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f012 f93f 	bl	8014ef0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fba1 	bl	80063ce <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d115      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f012 f92f 	bl	8014f0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	e000      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x740>
      return;
 8002cc0:	bf00      	nop
    }
  }
}
 8002cc2:	3734      	adds	r7, #52	; 0x34
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}

08002cc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_PCD_SetAddress+0x1a>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e013      	b.n	8002d0a <HAL_PCD_SetAddress+0x42>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fb11 	bl	8006322 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	4608      	mov	r0, r1
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	70fb      	strb	r3, [r7, #3]
 8002d24:	460b      	mov	r3, r1
 8002d26:	803b      	strh	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0f      	bge.n	8002d58 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3338      	adds	r3, #56	; 0x38
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	705a      	strb	r2, [r3, #1]
 8002d56:	e00f      	b.n	8002d78 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d84:	883a      	ldrh	r2, [r7, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	78ba      	ldrb	r2, [r7, #2]
 8002d8e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002da2:	78bb      	ldrb	r3, [r7, #2]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d102      	bne.n	8002dae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_PCD_EP_Open+0xaa>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e00e      	b.n	8002dda <HAL_PCD_EP_Open+0xc8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68f9      	ldr	r1, [r7, #12]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fcd4 	bl	8005778 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da0f      	bge.n	8002e16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	3338      	adds	r3, #56	; 0x38
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	705a      	strb	r2, [r3, #1]
 8002e14:	e00f      	b.n	8002e36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_PCD_EP_Close+0x6e>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e00e      	b.n	8002e6e <HAL_PCD_EP_Close+0x8c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fd12 	bl	8005888 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	460b      	mov	r3, r1
 8002e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	7afb      	ldrb	r3, [r7, #11]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d102      	bne.n	8002ed2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed2:	7afb      	ldrb	r3, [r7, #11]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6979      	ldr	r1, [r7, #20]
 8002eea:	f002 ff95 	bl	8005e18 <USB_EP0StartXfer>
 8002eee:	e008      	b.n	8002f02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	6979      	ldr	r1, [r7, #20]
 8002efe:	f002 fd47 	bl	8005990 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	7afb      	ldrb	r3, [r7, #11]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	3338      	adds	r3, #56	; 0x38
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d102      	bne.n	8002f96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f96:	7afb      	ldrb	r3, [r7, #11]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	6979      	ldr	r1, [r7, #20]
 8002fae:	f002 ff33 	bl	8005e18 <USB_EP0StartXfer>
 8002fb2:	e008      	b.n	8002fc6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6979      	ldr	r1, [r7, #20]
 8002fc2:	f002 fce5 	bl	8005990 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d901      	bls.n	8002fee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e050      	b.n	8003090 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da0f      	bge.n	8003016 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	3338      	adds	r3, #56	; 0x38
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	705a      	strb	r2, [r3, #1]
 8003014:	e00d      	b.n	8003032 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_PCD_EP_SetStall+0x82>
 800304e:	2302      	movs	r3, #2
 8003050:	e01e      	b.n	8003090 <HAL_PCD_EP_SetStall+0xc0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	4618      	mov	r0, r3
 8003062:	f003 f88a 	bl	800617a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	b2d9      	uxtb	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003080:	461a      	mov	r2, r3
 8003082:	f003 fa7b 	bl	800657c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 020f 	and.w	r2, r3, #15
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d901      	bls.n	80030b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e042      	b.n	800313c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da0f      	bge.n	80030de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3338      	adds	r3, #56	; 0x38
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	705a      	strb	r2, [r3, #1]
 80030dc:	e00f      	b.n	80030fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 020f 	and.w	r2, r3, #15
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_PCD_EP_ClrStall+0x86>
 800311a:	2302      	movs	r3, #2
 800311c:	e00e      	b.n	800313c <HAL_PCD_EP_ClrStall+0xa4>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 f892 	bl	8006256 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3338      	adds	r3, #56	; 0x38
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	d901      	bls.n	800317c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e06c      	b.n	8003256 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	429a      	cmp	r2, r3
 8003190:	d902      	bls.n	8003198 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3303      	adds	r3, #3
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031a0:	e02b      	b.n	80031fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d902      	bls.n	80031be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3303      	adds	r3, #3
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68d9      	ldr	r1, [r3, #12]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	4603      	mov	r3, r0
 80031dc:	6978      	ldr	r0, [r7, #20]
 80031de:	f002 ff6e 	bl	80060be <USB_WritePacket>

    ep->xfer_buff  += len;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	441a      	add	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	441a      	add	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	b29b      	uxth	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	429a      	cmp	r2, r3
 800320e:	d809      	bhi.n	8003224 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003218:	429a      	cmp	r2, r3
 800321a:	d203      	bcs.n	8003224 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1be      	bne.n	80031a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	429a      	cmp	r2, r3
 800322e:	d811      	bhi.n	8003254 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	2201      	movs	r2, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	43db      	mvns	r3, r3
 800324a:	6939      	ldr	r1, [r7, #16]
 800324c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003250:	4013      	ands	r3, r2
 8003252:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	3304      	adds	r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 80b3 	bne.w	80033fe <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d028      	beq.n	80032f4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a70      	ldr	r2, [pc, #448]	; (8003468 <PCD_EP_OutXfrComplete_int+0x208>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d90e      	bls.n	80032c8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f011 fd3b 	bl	8014d44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032d8:	461a      	mov	r2, r3
 80032da:	2101      	movs	r1, #1
 80032dc:	f003 f94e 	bl	800657c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	2308      	movs	r3, #8
 80032f0:	6093      	str	r3, [r2, #8]
 80032f2:	e0b3      	b.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330a:	461a      	mov	r2, r3
 800330c:	2320      	movs	r3, #32
 800330e:	6093      	str	r3, [r2, #8]
 8003310:	e0a4      	b.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 809f 	bne.w	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a51      	ldr	r2, [pc, #324]	; (8003468 <PCD_EP_OutXfrComplete_int+0x208>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d90f      	bls.n	8003346 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	461a      	mov	r2, r3
 800333e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	e08a      	b.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003358:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	0159      	lsls	r1, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	440b      	add	r3, r1
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800336c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4403      	add	r3, r0
 800337c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003380:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4403      	add	r3, r0
 80033a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4419      	add	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4403      	add	r3, r0
 80033ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033be:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f011 fcce 	bl	8014d68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d144      	bne.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d138      	bne.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033f4:	461a      	mov	r2, r3
 80033f6:	2101      	movs	r1, #1
 80033f8:	f003 f8c0 	bl	800657c <USB_EP0_OutStart>
 80033fc:	e02e      	b.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a1a      	ldr	r2, [pc, #104]	; (800346c <PCD_EP_OutXfrComplete_int+0x20c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d124      	bne.n	8003450 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341c:	461a      	mov	r2, r3
 800341e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003422:	6093      	str	r3, [r2, #8]
 8003424:	e01a      	b.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	461a      	mov	r2, r3
 800343e:	2320      	movs	r3, #32
 8003440:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f011 fc8d 	bl	8014d68 <HAL_PCD_DataOutStageCallback>
 800344e:	e005      	b.n	800345c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f011 fc86 	bl	8014d68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	4f54300a 	.word	0x4f54300a
 800346c:	4f54310a 	.word	0x4f54310a

08003470 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	333c      	adds	r3, #60	; 0x3c
 8003488:	3304      	adds	r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d113      	bne.n	80034ce <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <PCD_EP_OutSetupPacket_int+0xb8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d922      	bls.n	80034f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01d      	beq.n	80034f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	461a      	mov	r2, r3
 80034c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ca:	6093      	str	r3, [r2, #8]
 80034cc:	e012      	b.n	80034f4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a16      	ldr	r2, [pc, #88]	; (800352c <PCD_EP_OutSetupPacket_int+0xbc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10e      	bne.n	80034f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	461a      	mov	r2, r3
 80034ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f011 fc25 	bl	8014d44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <PCD_EP_OutSetupPacket_int+0xb8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d90c      	bls.n	800351c <PCD_EP_OutSetupPacket_int+0xac>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003514:	461a      	mov	r2, r3
 8003516:	2101      	movs	r1, #1
 8003518:	f003 f830 	bl	800657c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	4f54300a 	.word	0x4f54300a
 800352c:	4f54310a 	.word	0x4f54310a

08003530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
 800353c:	4613      	mov	r3, r2
 800353e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800354e:	883b      	ldrh	r3, [r7, #0]
 8003550:	0419      	lsls	r1, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	430a      	orrs	r2, r1
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
 800355c:	e028      	b.n	80035b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e00d      	b.n	800358e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	3340      	adds	r3, #64	; 0x40
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4413      	add	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	3b01      	subs	r3, #1
 8003594:	429a      	cmp	r2, r3
 8003596:	d3ec      	bcc.n	8003572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003598:	883b      	ldrh	r3, [r7, #0]
 800359a:	0418      	lsls	r0, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4302      	orrs	r2, r0
 80035a8:	3340      	adds	r3, #64	; 0x40
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e22d      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d075      	beq.n	8003702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	4ba3      	ldr	r3, [pc, #652]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00c      	beq.n	800363c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4ba0      	ldr	r3, [pc, #640]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b9d      	ldr	r3, [pc, #628]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d10b      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	4b99      	ldr	r3, [pc, #612]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05b      	beq.n	8003700 <HAL_RCC_OscConfig+0x108>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d157      	bne.n	8003700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e208      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x74>
 800365e:	4b91      	ldr	r3, [pc, #580]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a90      	ldr	r2, [pc, #576]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x98>
 8003676:	4b8b      	ldr	r3, [pc, #556]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a8a      	ldr	r2, [pc, #552]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a87      	ldr	r2, [pc, #540]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 8003690:	4b84      	ldr	r3, [pc, #528]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a83      	ldr	r2, [pc, #524]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b81      	ldr	r3, [pc, #516]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a80      	ldr	r2, [pc, #512]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd f9dc 	bl	8000a6c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fd f9d8 	bl	8000a6c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1cd      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xc0>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd f9c8 	bl	8000a6c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fd f9c4 	bl	8000a6c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1b9      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0xe8>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	4b65      	ldr	r3, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371a:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b5f      	ldr	r3, [pc, #380]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b5c      	ldr	r3, [pc, #368]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e18d      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4952      	ldr	r1, [pc, #328]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b4f      	ldr	r3, [pc, #316]	; (80038a8 <HAL_RCC_OscConfig+0x2b0>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd f97d 	bl	8000a6c <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003776:	f7fd f979 	bl	8000a6c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e16e      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b43      	ldr	r3, [pc, #268]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4940      	ldr	r1, [pc, #256]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_OscConfig+0x2b0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd f95c 	bl	8000a6c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd f958 	bl	8000a6c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e14d      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d030      	beq.n	8003844 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_OscConfig+0x2b4>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fd f93c 	bl	8000a6c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fd f938 	bl	8000a6c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e12d      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800380c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x200>
 8003816:	e015      	b.n	8003844 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003818:	4b24      	ldr	r3, [pc, #144]	; (80038ac <HAL_RCC_OscConfig+0x2b4>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7fd f925 	bl	8000a6c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003826:	f7fd f921 	bl	8000a6c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e116      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a0 	beq.w	8003992 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_OscConfig+0x2b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d121      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_RCC_OscConfig+0x2b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HAL_RCC_OscConfig+0x2b8>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389a:	f7fd f8e7 	bl	8000a6c <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	e011      	b.n	80038c6 <HAL_RCC_OscConfig+0x2ce>
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470000 	.word	0x42470000
 80038ac:	42470e80 	.word	0x42470e80
 80038b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b4:	f7fd f8da 	bl	8000a6c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0cf      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x2f0>
 80038da:	4b66      	ldr	r3, [pc, #408]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6713      	str	r3, [r2, #112]	; 0x70
 80038e6:	e01c      	b.n	8003922 <HAL_RCC_OscConfig+0x32a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_OscConfig+0x312>
 80038f0:	4b60      	ldr	r3, [pc, #384]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a5f      	ldr	r2, [pc, #380]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
 8003908:	e00b      	b.n	8003922 <HAL_RCC_OscConfig+0x32a>
 800390a:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a59      	ldr	r2, [pc, #356]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d015      	beq.n	8003956 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fd f89f 	bl	8000a6c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fd f89b 	bl	8000a6c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e08e      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	4b4a      	ldr	r3, [pc, #296]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ee      	beq.n	8003932 <HAL_RCC_OscConfig+0x33a>
 8003954:	e014      	b.n	8003980 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003956:	f7fd f889 	bl	8000a6c <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd f885 	bl	8000a6c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e078      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	4b3f      	ldr	r3, [pc, #252]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ee      	bne.n	800395e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d064      	beq.n	8003a64 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800399a:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d05c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d141      	bne.n	8003a32 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <HAL_RCC_OscConfig+0x480>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd f85a 	bl	8000a6c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd f856 	bl	8000a6c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04b      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	019b      	lsls	r3, r3, #6
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	3b01      	subs	r3, #1
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	491d      	ldr	r1, [pc, #116]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_RCC_OscConfig+0x480>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fd f82f 	bl	8000a6c <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a12:	f7fd f82b 	bl	8000a6c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e020      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x41a>
 8003a30:	e018      	b.n	8003a64 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_RCC_OscConfig+0x480>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fd f818 	bl	8000a6c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd f814 	bl	8000a6c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCC_OscConfig+0x47c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x448>
 8003a5e:	e001      	b.n	8003a64 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40007000 	.word	0x40007000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470060 	.word	0x42470060

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0ca      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b67      	ldr	r3, [pc, #412]	; (8003c30 <HAL_RCC_ClockConfig+0x1b4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90c      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b64      	ldr	r3, [pc, #400]	; (8003c30 <HAL_RCC_ClockConfig+0x1b4>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b62      	ldr	r3, [pc, #392]	; (8003c30 <HAL_RCC_ClockConfig+0x1b4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b6      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b58      	ldr	r3, [pc, #352]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b52      	ldr	r3, [pc, #328]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a51      	ldr	r2, [pc, #324]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494c      	ldr	r1, [pc, #304]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d044      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07d      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06d      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e065      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4933      	ldr	r1, [pc, #204]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fc ff7e 	bl	8000a6c <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fc ff7a 	bl	8000a6c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04d      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_RCC_ClockConfig+0x1b4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d20c      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <HAL_RCC_ClockConfig+0x1b4>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b1f      	ldr	r3, [pc, #124]	; (8003c30 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e030      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4915      	ldr	r1, [pc, #84]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490d      	ldr	r1, [pc, #52]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f81d 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003c06:	4601      	mov	r1, r0
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	5cd3      	ldrb	r3, [r2, r3]
 8003c16:	fa21 f303 	lsr.w	r3, r1, r3
 8003c1a:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f7fc fee0 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023c00 	.word	0x40023c00
 8003c34:	40023800 	.word	0x40023800
 8003c38:	080188c4 	.word	0x080188c4
 8003c3c:	20000128 	.word	0x20000128

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d007      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x32>
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d008      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x38>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 80b4 	bne.w	8003dd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c6e:	60bb      	str	r3, [r7, #8]
       break;
 8003c70:	e0b3      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c72:	4b5e      	ldr	r3, [pc, #376]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c74:	60bb      	str	r3, [r7, #8]
      break;
 8003c76:	e0b0      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c78:	4b5a      	ldr	r3, [pc, #360]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c82:	4b58      	ldr	r3, [pc, #352]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d04a      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8e:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	f04f 0400 	mov.w	r4, #0
 8003c98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	ea03 0501 	and.w	r5, r3, r1
 8003ca4:	ea04 0602 	and.w	r6, r4, r2
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4632      	mov	r2, r6
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	f04f 0400 	mov.w	r4, #0
 8003cb4:	0154      	lsls	r4, r2, #5
 8003cb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cba:	014b      	lsls	r3, r1, #5
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	1b49      	subs	r1, r1, r5
 8003cc2:	eb62 0206 	sbc.w	r2, r2, r6
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	f04f 0400 	mov.w	r4, #0
 8003cce:	0194      	lsls	r4, r2, #6
 8003cd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cd4:	018b      	lsls	r3, r1, #6
 8003cd6:	1a5b      	subs	r3, r3, r1
 8003cd8:	eb64 0402 	sbc.w	r4, r4, r2
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	00e2      	lsls	r2, r4, #3
 8003ce6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cea:	00d9      	lsls	r1, r3, #3
 8003cec:	460b      	mov	r3, r1
 8003cee:	4614      	mov	r4, r2
 8003cf0:	195b      	adds	r3, r3, r5
 8003cf2:	eb44 0406 	adc.w	r4, r4, r6
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	0262      	lsls	r2, r4, #9
 8003d00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d04:	0259      	lsls	r1, r3, #9
 8003d06:	460b      	mov	r3, r1
 8003d08:	4614      	mov	r4, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f04f 0400 	mov.w	r4, #0
 8003d14:	461a      	mov	r2, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	f7fc faba 	bl	8000290 <__aeabi_uldivmod>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e049      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d24:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	f04f 0400 	mov.w	r4, #0
 8003d2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	ea03 0501 	and.w	r5, r3, r1
 8003d3a:	ea04 0602 	and.w	r6, r4, r2
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4632      	mov	r2, r6
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	f04f 0400 	mov.w	r4, #0
 8003d4a:	0154      	lsls	r4, r2, #5
 8003d4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d50:	014b      	lsls	r3, r1, #5
 8003d52:	4619      	mov	r1, r3
 8003d54:	4622      	mov	r2, r4
 8003d56:	1b49      	subs	r1, r1, r5
 8003d58:	eb62 0206 	sbc.w	r2, r2, r6
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	f04f 0400 	mov.w	r4, #0
 8003d64:	0194      	lsls	r4, r2, #6
 8003d66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d6a:	018b      	lsls	r3, r1, #6
 8003d6c:	1a5b      	subs	r3, r3, r1
 8003d6e:	eb64 0402 	sbc.w	r4, r4, r2
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	00e2      	lsls	r2, r4, #3
 8003d7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d80:	00d9      	lsls	r1, r3, #3
 8003d82:	460b      	mov	r3, r1
 8003d84:	4614      	mov	r4, r2
 8003d86:	195b      	adds	r3, r3, r5
 8003d88:	eb44 0406 	adc.w	r4, r4, r6
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	02a2      	lsls	r2, r4, #10
 8003d96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d9a:	0299      	lsls	r1, r3, #10
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4614      	mov	r4, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	4621      	mov	r1, r4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	461a      	mov	r2, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	f7fc fa6f 	bl	8000290 <__aeabi_uldivmod>
 8003db2:	4603      	mov	r3, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	60bb      	str	r3, [r7, #8]
      break;
 8003dd2:	e002      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003dd6:	60bb      	str	r3, [r7, #8]
      break;
 8003dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dda:	68bb      	ldr	r3, [r7, #8]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	007a1200 	.word	0x007a1200

08003df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000128 	.word	0x20000128

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e0c:	f7ff fff0 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e10:	4601      	mov	r1, r0
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	080188d4 	.word	0x080188d4

08003e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e34:	f7ff ffdc 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e38:	4601      	mov	r1, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0b5b      	lsrs	r3, r3, #13
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4a03      	ldr	r2, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e46:	5cd3      	ldrb	r3, [r2, r3]
 8003e48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	080188d4 	.word	0x080188d4

08003e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e01d      	b.n	8003ea6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f010 fd34 	bl	80148ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f000 fafc 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e01d      	b.n	8003efc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f010 fce7 	bl	80148a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f000 fad1 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e01d      	b.n	8003f52 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f010 fc22 	bl	8014774 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 faa6 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d122      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d11b      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0202 	mvn.w	r2, #2
 8003f86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fa5b 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 8003fa2:	e005      	b.n	8003fb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fa4d 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa5e 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d122      	bne.n	800400a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d11b      	bne.n	800400a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0204 	mvn.w	r2, #4
 8003fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fa31 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 8003ff6:	e005      	b.n	8004004 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa23 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa34 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b08      	cmp	r3, #8
 8004016:	d122      	bne.n	800405e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b08      	cmp	r3, #8
 8004024:	d11b      	bne.n	800405e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0208 	mvn.w	r2, #8
 800402e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2204      	movs	r2, #4
 8004034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fa07 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 800404a:	e005      	b.n	8004058 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f9f9 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa0a 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b10      	cmp	r3, #16
 800406a:	d122      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b10      	cmp	r3, #16
 8004078:	d11b      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0210 	mvn.w	r2, #16
 8004082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2208      	movs	r2, #8
 8004088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f9dd 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 800409e:	e005      	b.n	80040ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f9cf 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9e0 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10e      	bne.n	80040de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0201 	mvn.w	r2, #1
 80040d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f9a9 	bl	8004430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e8:	2b80      	cmp	r3, #128	; 0x80
 80040ea:	d10e      	bne.n	800410a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b80      	cmp	r3, #128	; 0x80
 80040f8:	d107      	bne.n	800410a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fd8e 	bl	8004c26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d10e      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d107      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f9a5 	bl	8004480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b20      	cmp	r3, #32
 8004142:	d10e      	bne.n	8004162 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b20      	cmp	r3, #32
 8004150:	d107      	bne.n	8004162 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0220 	mvn.w	r2, #32
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fd58 	bl	8004c12 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004180:	2302      	movs	r3, #2
 8004182:	e08a      	b.n	800429a <HAL_TIM_IC_ConfigChannel+0x130>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11b      	bne.n	80041d2 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f000 fbc3 	bl	8004934 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 020c 	bic.w	r2, r2, #12
 80041bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6999      	ldr	r1, [r3, #24]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	619a      	str	r2, [r3, #24]
 80041d0:	e05a      	b.n	8004288 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d11c      	bne.n	8004212 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f000 fc18 	bl	8004a1c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6999      	ldr	r1, [r3, #24]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	619a      	str	r2, [r3, #24]
 8004210:	e03a      	b.n	8004288 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f000 fc35 	bl	8004a96 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 020c 	bic.w	r2, r2, #12
 800423a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69d9      	ldr	r1, [r3, #28]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	61da      	str	r2, [r3, #28]
 800424e:	e01b      	b.n	8004288 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f000 fc55 	bl	8004b0e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004272:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69d9      	ldr	r1, [r3, #28]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	021a      	lsls	r2, r3, #8
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0b4      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x184>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	f200 809f 	bhi.w	8004414 <HAL_TIM_PWM_ConfigChannel+0x170>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004415 	.word	0x08004415
 80042e4:	08004415 	.word	0x08004415
 80042e8:	08004415 	.word	0x08004415
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004415 	.word	0x08004415
 80042f4:	08004415 	.word	0x08004415
 80042f8:	08004415 	.word	0x08004415
 80042fc:	08004393 	.word	0x08004393
 8004300:	08004415 	.word	0x08004415
 8004304:	08004415 	.word	0x08004415
 8004308:	08004415 	.word	0x08004415
 800430c:	080043d3 	.word	0x080043d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f95c 	bl	80045d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6999      	ldr	r1, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	619a      	str	r2, [r3, #24]
      break;
 800434e:	e062      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f9ac 	bl	80046b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6999      	ldr	r1, [r3, #24]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	619a      	str	r2, [r3, #24]
      break;
 8004390:	e041      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fa01 	bl	80047a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0208 	orr.w	r2, r2, #8
 80043ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0204 	bic.w	r2, r2, #4
 80043bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69d9      	ldr	r1, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	61da      	str	r2, [r3, #28]
      break;
 80043d0:	e021      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fa55 	bl	8004888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69d9      	ldr	r1, [r3, #28]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	021a      	lsls	r2, r3, #8
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	61da      	str	r2, [r3, #28]
      break;
 8004412:	e000      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004414:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a40      	ldr	r2, [pc, #256]	; (80045a8 <TIM_Base_SetConfig+0x114>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d00f      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3d      	ldr	r2, [pc, #244]	; (80045ac <TIM_Base_SetConfig+0x118>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a3c      	ldr	r2, [pc, #240]	; (80045b0 <TIM_Base_SetConfig+0x11c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <TIM_Base_SetConfig+0x120>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3a      	ldr	r2, [pc, #232]	; (80045b8 <TIM_Base_SetConfig+0x124>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d108      	bne.n	80044e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2f      	ldr	r2, [pc, #188]	; (80045a8 <TIM_Base_SetConfig+0x114>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d02b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f4:	d027      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2c      	ldr	r2, [pc, #176]	; (80045ac <TIM_Base_SetConfig+0x118>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d023      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <TIM_Base_SetConfig+0x11c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01f      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <TIM_Base_SetConfig+0x120>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <TIM_Base_SetConfig+0x124>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d017      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a28      	ldr	r2, [pc, #160]	; (80045bc <TIM_Base_SetConfig+0x128>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a27      	ldr	r2, [pc, #156]	; (80045c0 <TIM_Base_SetConfig+0x12c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00f      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <TIM_Base_SetConfig+0x130>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <TIM_Base_SetConfig+0x134>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a24      	ldr	r2, [pc, #144]	; (80045cc <TIM_Base_SetConfig+0x138>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <TIM_Base_SetConfig+0x13c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <TIM_Base_SetConfig+0x114>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_Base_SetConfig+0xf8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <TIM_Base_SetConfig+0x124>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	615a      	str	r2, [r3, #20]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40014400 	.word	0x40014400
 80045c4:	40014800 	.word	0x40014800
 80045c8:	40001800 	.word	0x40001800
 80045cc:	40001c00 	.word	0x40001c00
 80045d0:	40002000 	.word	0x40002000

080045d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 0302 	bic.w	r3, r3, #2
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a20      	ldr	r2, [pc, #128]	; (80046ac <TIM_OC1_SetConfig+0xd8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC1_SetConfig+0x64>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <TIM_OC1_SetConfig+0xdc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10c      	bne.n	8004652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0308 	bic.w	r3, r3, #8
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a15      	ldr	r2, [pc, #84]	; (80046ac <TIM_OC1_SetConfig+0xd8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_OC1_SetConfig+0x8e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <TIM_OC1_SetConfig+0xdc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d111      	bne.n	8004686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40010400 	.word	0x40010400

080046b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f023 0210 	bic.w	r2, r3, #16
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0320 	bic.w	r3, r3, #32
 80046fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a22      	ldr	r2, [pc, #136]	; (8004798 <TIM_OC2_SetConfig+0xe4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_OC2_SetConfig+0x68>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a21      	ldr	r2, [pc, #132]	; (800479c <TIM_OC2_SetConfig+0xe8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10d      	bne.n	8004738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <TIM_OC2_SetConfig+0xe4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_OC2_SetConfig+0x94>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <TIM_OC2_SetConfig+0xe8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d113      	bne.n	8004770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800474e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40010400 	.word	0x40010400

080047a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a21      	ldr	r2, [pc, #132]	; (8004880 <TIM_OC3_SetConfig+0xe0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC3_SetConfig+0x66>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a20      	ldr	r2, [pc, #128]	; (8004884 <TIM_OC3_SetConfig+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <TIM_OC3_SetConfig+0xe0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_OC3_SetConfig+0x92>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a15      	ldr	r2, [pc, #84]	; (8004884 <TIM_OC3_SetConfig+0xe4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d113      	bne.n	800485a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40010000 	.word	0x40010000
 8004884:	40010400 	.word	0x40010400

08004888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	031b      	lsls	r3, r3, #12
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <TIM_OC4_SetConfig+0xa4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC4_SetConfig+0x68>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <TIM_OC4_SetConfig+0xa8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d109      	bne.n	8004904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40010400 	.word	0x40010400

08004934 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <TIM_TI1_SetConfig+0xcc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d017      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <TIM_TI1_SetConfig+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a24      	ldr	r2, [pc, #144]	; (8004a08 <TIM_TI1_SetConfig+0xd4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <TIM_TI1_SetConfig+0xd8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <TIM_TI1_SetConfig+0xdc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <TIM_TI1_SetConfig+0xe0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a20      	ldr	r2, [pc, #128]	; (8004a18 <TIM_TI1_SetConfig+0xe4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <TIM_TI1_SetConfig+0x6a>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <TIM_TI1_SetConfig+0x6c>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e003      	b.n	80049be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f023 030a 	bic.w	r3, r3, #10
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 030a 	and.w	r3, r3, #10
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40001800 	.word	0x40001800

08004a1c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0210 	bic.w	r2, r3, #16
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	031b      	lsls	r3, r3, #12
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0303 	bic.w	r3, r3, #3
 8004ac2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b087      	sub	sp, #28
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	031b      	lsls	r3, r3, #12
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e032      	b.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e03f      	b.n	8004ccc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f00f fecf 	bl	8014a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2224      	movs	r2, #36	; 0x24
 8004c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f828 	bl	8004cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	b5b0      	push	{r4, r5, r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d14:	f023 030c 	bic.w	r3, r3, #12
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699a      	ldr	r2, [r3, #24]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	f040 80e4 	bne.w	8004f0c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4aab      	ldr	r2, [pc, #684]	; (8004ff8 <UART_SetConfig+0x324>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <UART_SetConfig+0x84>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4aaa      	ldr	r2, [pc, #680]	; (8004ffc <UART_SetConfig+0x328>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d16c      	bne.n	8004e32 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004d58:	f7ff f86a 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009a      	lsls	r2, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	4aa3      	ldr	r2, [pc, #652]	; (8005000 <UART_SetConfig+0x32c>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	011c      	lsls	r4, r3, #4
 8004d7c:	f7ff f858 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009a      	lsls	r2, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d96:	f7ff f84b 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009a      	lsls	r2, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	4a93      	ldr	r2, [pc, #588]	; (8005000 <UART_SetConfig+0x32c>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2264      	movs	r2, #100	; 0x64
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	1aeb      	subs	r3, r5, r3
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	3332      	adds	r3, #50	; 0x32
 8004dc4:	4a8e      	ldr	r2, [pc, #568]	; (8005000 <UART_SetConfig+0x32c>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dd2:	441c      	add	r4, r3
 8004dd4:	f7ff f82c 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009a      	lsls	r2, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	fbb2 f5f3 	udiv	r5, r2, r3
 8004dee:	f7ff f81f 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009a      	lsls	r2, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	4a7d      	ldr	r2, [pc, #500]	; (8005000 <UART_SetConfig+0x32c>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2264      	movs	r2, #100	; 0x64
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	1aeb      	subs	r3, r5, r3
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	3332      	adds	r3, #50	; 0x32
 8004e1c:	4a78      	ldr	r2, [pc, #480]	; (8005000 <UART_SetConfig+0x32c>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	f003 0207 	and.w	r2, r3, #7
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4422      	add	r2, r4
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	e154      	b.n	80050dc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004e32:	f7fe ffe9 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004e36:	4602      	mov	r2, r0
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009a      	lsls	r2, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	4a6c      	ldr	r2, [pc, #432]	; (8005000 <UART_SetConfig+0x32c>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	011c      	lsls	r4, r3, #4
 8004e56:	f7fe ffd7 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009a      	lsls	r2, r3, #2
 8004e64:	441a      	add	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e70:	f7fe ffca 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009a      	lsls	r2, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8a:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <UART_SetConfig+0x32c>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2264      	movs	r2, #100	; 0x64
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	1aeb      	subs	r3, r5, r3
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	3332      	adds	r3, #50	; 0x32
 8004e9e:	4a58      	ldr	r2, [pc, #352]	; (8005000 <UART_SetConfig+0x32c>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eac:	441c      	add	r4, r3
 8004eae:	f7fe ffab 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009a      	lsls	r2, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ec8:	f7fe ff9e 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009a      	lsls	r2, r3, #2
 8004ed6:	441a      	add	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	4a47      	ldr	r2, [pc, #284]	; (8005000 <UART_SetConfig+0x32c>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2264      	movs	r2, #100	; 0x64
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	1aeb      	subs	r3, r5, r3
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	3332      	adds	r3, #50	; 0x32
 8004ef6:	4a42      	ldr	r2, [pc, #264]	; (8005000 <UART_SetConfig+0x32c>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	f003 0207 	and.w	r2, r3, #7
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4422      	add	r2, r4
 8004f08:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004f0a:	e0e7      	b.n	80050dc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <UART_SetConfig+0x324>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <UART_SetConfig+0x24c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <UART_SetConfig+0x328>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d171      	bne.n	8005004 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004f20:	f7fe ff86 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	4a31      	ldr	r2, [pc, #196]	; (8005000 <UART_SetConfig+0x32c>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	011c      	lsls	r4, r3, #4
 8004f44:	f7fe ff74 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009a      	lsls	r2, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f5e:	f7fe ff67 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004f62:	4602      	mov	r2, r0
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	4a21      	ldr	r2, [pc, #132]	; (8005000 <UART_SetConfig+0x32c>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2264      	movs	r2, #100	; 0x64
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	1aeb      	subs	r3, r5, r3
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	3332      	adds	r3, #50	; 0x32
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	; (8005000 <UART_SetConfig+0x32c>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f98:	441c      	add	r4, r3
 8004f9a:	f7fe ff49 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009a      	lsls	r2, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	fbb2 f5f3 	udiv	r5, r2, r3
 8004fb4:	f7fe ff3c 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009a      	lsls	r2, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <UART_SetConfig+0x32c>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2264      	movs	r2, #100	; 0x64
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	1aeb      	subs	r3, r5, r3
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	3332      	adds	r3, #50	; 0x32
 8004fe2:	4a07      	ldr	r2, [pc, #28]	; (8005000 <UART_SetConfig+0x32c>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4422      	add	r2, r4
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	e071      	b.n	80050dc <UART_SetConfig+0x408>
 8004ff8:	40011000 	.word	0x40011000
 8004ffc:	40011400 	.word	0x40011400
 8005000:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005004:	f7fe ff00 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8005008:	4602      	mov	r2, r0
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009a      	lsls	r2, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	4a31      	ldr	r2, [pc, #196]	; (80050e4 <UART_SetConfig+0x410>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	011c      	lsls	r4, r3, #4
 8005028:	f7fe feee 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 800502c:	4602      	mov	r2, r0
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009a      	lsls	r2, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005042:	f7fe fee1 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8005046:	4602      	mov	r2, r0
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	4a21      	ldr	r2, [pc, #132]	; (80050e4 <UART_SetConfig+0x410>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2264      	movs	r2, #100	; 0x64
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	1aeb      	subs	r3, r5, r3
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	3332      	adds	r3, #50	; 0x32
 8005070:	4a1c      	ldr	r2, [pc, #112]	; (80050e4 <UART_SetConfig+0x410>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800507c:	441c      	add	r4, r3
 800507e:	f7fe fec3 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8005082:	4602      	mov	r2, r0
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fbb2 f5f3 	udiv	r5, r2, r3
 8005098:	f7fe feb6 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 800509c:	4602      	mov	r2, r0
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009a      	lsls	r2, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <UART_SetConfig+0x410>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	2264      	movs	r2, #100	; 0x64
 80050bc:	fb02 f303 	mul.w	r3, r2, r3
 80050c0:	1aeb      	subs	r3, r5, r3
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	3332      	adds	r3, #50	; 0x32
 80050c6:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <UART_SetConfig+0x410>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	f003 020f 	and.w	r2, r3, #15
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4422      	add	r2, r4
 80050d8:	609a      	str	r2, [r3, #8]
}
 80050da:	e7ff      	b.n	80050dc <UART_SetConfig+0x408>
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bdb0      	pop	{r4, r5, r7, pc}
 80050e4:	51eb851f 	.word	0x51eb851f

080050e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e8:	b084      	sub	sp, #16
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	f107 001c 	add.w	r0, r7, #28
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d122      	bne.n	8005146 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d105      	bne.n	800513a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 fa7c 	bl	8006638 <USB_CoreReset>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e01a      	b.n	800517c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fa70 	bl	8006638 <USB_CoreReset>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800515c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
 800516e:	e005      	b.n	800517c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10b      	bne.n	800519a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f043 0206 	orr.w	r2, r3, #6
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a6:	b004      	add	sp, #16
 80051a8:	4770      	bx	lr
	...

080051ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d165      	bne.n	800528c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a41      	ldr	r2, [pc, #260]	; (80052c8 <USB_SetTurnaroundTime+0x11c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d906      	bls.n	80051d6 <USB_SetTurnaroundTime+0x2a>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a40      	ldr	r2, [pc, #256]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d802      	bhi.n	80051d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051d0:	230f      	movs	r3, #15
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e062      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d906      	bls.n	80051ec <USB_SetTurnaroundTime+0x40>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d802      	bhi.n	80051ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051e6:	230e      	movs	r3, #14
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e057      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d906      	bls.n	8005202 <USB_SetTurnaroundTime+0x56>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a37      	ldr	r2, [pc, #220]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d802      	bhi.n	8005202 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051fc:	230d      	movs	r3, #13
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e04c      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a33      	ldr	r2, [pc, #204]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d906      	bls.n	8005218 <USB_SetTurnaroundTime+0x6c>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a32      	ldr	r2, [pc, #200]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005212:	230c      	movs	r3, #12
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e041      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d906      	bls.n	800522e <USB_SetTurnaroundTime+0x82>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a2e      	ldr	r2, [pc, #184]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d802      	bhi.n	800522e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005228:	230b      	movs	r3, #11
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e036      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d906      	bls.n	8005244 <USB_SetTurnaroundTime+0x98>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <USB_SetTurnaroundTime+0x134>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d802      	bhi.n	8005244 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800523e:	230a      	movs	r3, #10
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e02b      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <USB_SetTurnaroundTime+0x134>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d906      	bls.n	800525a <USB_SetTurnaroundTime+0xae>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <USB_SetTurnaroundTime+0x138>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d802      	bhi.n	800525a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005254:	2309      	movs	r3, #9
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e020      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <USB_SetTurnaroundTime+0x138>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d906      	bls.n	8005270 <USB_SetTurnaroundTime+0xc4>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <USB_SetTurnaroundTime+0x13c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d802      	bhi.n	8005270 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800526a:	2308      	movs	r3, #8
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e015      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <USB_SetTurnaroundTime+0x13c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d906      	bls.n	8005286 <USB_SetTurnaroundTime+0xda>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <USB_SetTurnaroundTime+0x140>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d802      	bhi.n	8005286 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005280:	2307      	movs	r3, #7
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e00a      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005286:	2306      	movs	r3, #6
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e007      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005292:	2309      	movs	r3, #9
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e001      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005298:	2309      	movs	r3, #9
 800529a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00d8acbf 	.word	0x00d8acbf
 80052cc:	00e4e1bf 	.word	0x00e4e1bf
 80052d0:	00f423ff 	.word	0x00f423ff
 80052d4:	0106737f 	.word	0x0106737f
 80052d8:	011a499f 	.word	0x011a499f
 80052dc:	01312cff 	.word	0x01312cff
 80052e0:	014ca43f 	.word	0x014ca43f
 80052e4:	016e35ff 	.word	0x016e35ff
 80052e8:	01a6ab1f 	.word	0x01a6ab1f
 80052ec:	01e847ff 	.word	0x01e847ff

080052f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d106      	bne.n	8005360 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	e00b      	b.n	8005378 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	e001      	b.n	8005378 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e003      	b.n	8005380 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005378:	2032      	movs	r0, #50	; 0x32
 800537a:	f7fb fb83 	bl	8000a84 <HAL_Delay>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005388:	b084      	sub	sp, #16
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	e009      	b.n	80053bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3340      	adds	r3, #64	; 0x40
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	2200      	movs	r2, #0
 80053b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3301      	adds	r3, #1
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b0e      	cmp	r3, #14
 80053c0:	d9f2      	bls.n	80053a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d112      	bne.n	80053ee <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
 80053ec:	e00b      	b.n	8005406 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	4619      	mov	r1, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	461a      	mov	r2, r3
 8005422:	680b      	ldr	r3, [r1, #0]
 8005424:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	2b01      	cmp	r3, #1
 800542a:	d10c      	bne.n	8005446 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005432:	2100      	movs	r1, #0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f961 	bl	80056fc <USB_SetDevSpeed>
 800543a:	e008      	b.n	800544e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800543c:	2101      	movs	r1, #1
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f95c 	bl	80056fc <USB_SetDevSpeed>
 8005444:	e003      	b.n	800544e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005446:	2103      	movs	r1, #3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f957 	bl	80056fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800544e:	2110      	movs	r1, #16
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f90b 	bl	800566c <USB_FlushTxFifo>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f929 	bl	80056b8 <USB_FlushRxFifo>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	461a      	mov	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	461a      	mov	r2, r3
 8005484:	2300      	movs	r3, #0
 8005486:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e043      	b.n	8005522 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b0:	d118      	bne.n	80054e4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	461a      	mov	r2, r3
 80054c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	e013      	b.n	80054f6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	461a      	mov	r2, r3
 80054dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e008      	b.n	80054f6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	461a      	mov	r2, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	461a      	mov	r2, r3
 8005504:	2300      	movs	r3, #0
 8005506:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	461a      	mov	r2, r3
 8005516:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800551a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	3301      	adds	r3, #1
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	429a      	cmp	r2, r3
 8005528:	d3b7      	bcc.n	800549a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e043      	b.n	80055b8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005546:	d118      	bne.n	800557a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555a:	461a      	mov	r2, r3
 800555c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e013      	b.n	800558c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e008      	b.n	800558c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	461a      	mov	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3301      	adds	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3b7      	bcc.n	8005530 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d111      	bne.n	80055fe <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <USB_DevInit+0x2dc>)
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f8:	f043 0303 	orr.w	r3, r3, #3
 80055fc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800560a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f043 0210 	orr.w	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <USB_DevInit+0x2e0>)
 8005624:	4313      	orrs	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800562a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f043 0208 	orr.w	r2, r3, #8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800563c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563e:	2b01      	cmp	r3, #1
 8005640:	d107      	bne.n	8005652 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565e:	b004      	add	sp, #16
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	00800100 	.word	0x00800100
 8005668:	803c3800 	.word	0x803c3800

0800566c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	f043 0220 	orr.w	r2, r3, #32
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <USB_FlushTxFifo+0x48>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e006      	b.n	80056a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d0f0      	beq.n	8005686 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	00030d40 	.word	0x00030d40

080056b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2210      	movs	r2, #16
 80056c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3301      	adds	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <USB_FlushRxFifo+0x40>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e006      	b.n	80056ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d0f0      	beq.n	80056ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	00030d40 	.word	0x00030d40

080056fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800571c:	4313      	orrs	r3, r2
 800571e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b087      	sub	sp, #28
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0306 	and.w	r3, r3, #6
 8005746:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
 8005752:	e00a      	b.n	800576a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d002      	beq.n	8005760 <USB_GetDevSpeed+0x32>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b06      	cmp	r3, #6
 800575e:	d102      	bne.n	8005766 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005760:	2302      	movs	r3, #2
 8005762:	75fb      	strb	r3, [r7, #23]
 8005764:	e001      	b.n	800576a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005766:	230f      	movs	r3, #15
 8005768:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
}
 800576c:	4618      	mov	r0, r3
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d13a      	bne.n	800580a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	2101      	movs	r1, #1
 80057a6:	fa01 f303 	lsl.w	r3, r1, r3
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	68f9      	ldr	r1, [r7, #12]
 80057ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d155      	bne.n	8005878 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	78db      	ldrb	r3, [r3, #3]
 80057e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	059b      	lsls	r3, r3, #22
 80057ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057f0:	4313      	orrs	r3, r2
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e036      	b.n	8005878 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	041b      	lsls	r3, r3, #16
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005828:	4313      	orrs	r3, r2
 800582a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d11a      	bne.n	8005878 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	78db      	ldrb	r3, [r3, #3]
 800585c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800585e:	430b      	orrs	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d135      	bne.n	8005910 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c4:	4013      	ands	r3, r2
 80058c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	2101      	movs	r1, #1
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e8:	4013      	ands	r3, r2
 80058ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	0159      	lsls	r1, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	440b      	add	r3, r1
 8005902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005906:	4619      	mov	r1, r3
 8005908:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <USB_DeactivateEndpoint+0x100>)
 800590a:	4013      	ands	r3, r2
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	e034      	b.n	800597a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	2101      	movs	r1, #1
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	43db      	mvns	r3, r3
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005930:	4013      	ands	r3, r2
 8005932:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	2101      	movs	r1, #1
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	43db      	mvns	r3, r3
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005954:	4013      	ands	r3, r2
 8005956:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	0159      	lsls	r1, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	440b      	add	r3, r1
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	4619      	mov	r1, r3
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <USB_DeactivateEndpoint+0x104>)
 8005976:	4013      	ands	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	ec337800 	.word	0xec337800
 800598c:	eff37800 	.word	0xeff37800

08005990 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 815c 	bne.w	8005c6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d132      	bne.n	8005a20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a18:	0cdb      	lsrs	r3, r3, #19
 8005a1a:	04db      	lsls	r3, r3, #19
 8005a1c:	6113      	str	r3, [r2, #16]
 8005a1e:	e074      	b.n	8005b0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3a:	0cdb      	lsrs	r3, r3, #19
 8005a3c:	04db      	lsls	r3, r3, #19
 8005a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6959      	ldr	r1, [r3, #20]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	440b      	add	r3, r1
 8005a7c:	1e59      	subs	r1, r3, #1
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a86:	04d9      	lsls	r1, r3, #19
 8005a88:	4b9d      	ldr	r3, [pc, #628]	; (8005d00 <USB_EPStartXfer+0x370>)
 8005a8a:	400b      	ands	r3, r1
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	0148      	lsls	r0, r1, #5
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	4401      	add	r1, r0
 8005a94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab2:	69b9      	ldr	r1, [r7, #24]
 8005ab4:	0148      	lsls	r0, r1, #5
 8005ab6:	69f9      	ldr	r1, [r7, #28]
 8005ab8:	4401      	add	r1, r0
 8005aba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	78db      	ldrb	r3, [r3, #3]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d11f      	bne.n	8005b0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ae8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d14b      	bne.n	8005ba8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	461a      	mov	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	78db      	ldrb	r3, [r3, #3]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d128      	bne.n	8005b86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d110      	bne.n	8005b66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e00f      	b.n	8005b86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e12f      	b.n	8005e08 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	78db      	ldrb	r3, [r3, #3]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d015      	beq.n	8005bfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8117 	beq.w	8005e08 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	2101      	movs	r1, #1
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	69f9      	ldr	r1, [r7, #28]
 8005bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	634b      	str	r3, [r1, #52]	; 0x34
 8005bfa:	e105      	b.n	8005e08 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d110      	bne.n	8005c2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e00f      	b.n	8005c4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68d9      	ldr	r1, [r3, #12]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	b298      	uxth	r0, r3
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4603      	mov	r3, r0
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fa2b 	bl	80060be <USB_WritePacket>
 8005c68:	e0ce      	b.n	8005e08 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c84:	0cdb      	lsrs	r3, r3, #19
 8005c86:	04db      	lsls	r3, r3, #19
 8005c88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ca8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d126      	bne.n	8005d04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	0148      	lsls	r0, r1, #5
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	4401      	add	r1, r0
 8005cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cfa:	6113      	str	r3, [r2, #16]
 8005cfc:	e036      	b.n	8005d6c <USB_EPStartXfer+0x3dc>
 8005cfe:	bf00      	nop
 8005d00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	1e5a      	subs	r2, r3, #1
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	8afb      	ldrh	r3, [r7, #22]
 8005d2a:	04d9      	lsls	r1, r3, #19
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <USB_EPStartXfer+0x484>)
 8005d2e:	400b      	ands	r3, r1
 8005d30:	69b9      	ldr	r1, [r7, #24]
 8005d32:	0148      	lsls	r0, r1, #5
 8005d34:	69f9      	ldr	r1, [r7, #28]
 8005d36:	4401      	add	r1, r0
 8005d38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	8af9      	ldrh	r1, [r7, #22]
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5c:	69b9      	ldr	r1, [r7, #24]
 8005d5e:	0148      	lsls	r0, r1, #5
 8005d60:	69f9      	ldr	r1, [r7, #28]
 8005d62:	4401      	add	r1, r0
 8005d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10d      	bne.n	8005d8e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68d9      	ldr	r1, [r3, #12]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	460a      	mov	r2, r1
 8005d8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	78db      	ldrb	r3, [r3, #3]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d128      	bne.n	8005de8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d110      	bne.n	8005dc8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e00f      	b.n	8005de8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	1ff80000 	.word	0x1ff80000

08005e18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	4613      	mov	r3, r2
 8005e24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	f040 80cd 	bne.w	8005fd4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d132      	bne.n	8005ea8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea0:	0cdb      	lsrs	r3, r3, #19
 8005ea2:	04db      	lsls	r3, r3, #19
 8005ea4:	6113      	str	r3, [r2, #16]
 8005ea6:	e04e      	b.n	8005f46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec2:	0cdb      	lsrs	r3, r3, #19
 8005ec4:	04db      	lsls	r3, r3, #19
 8005ec6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ee6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d903      	bls.n	8005f00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f36:	6939      	ldr	r1, [r7, #16]
 8005f38:	0148      	lsls	r0, r1, #5
 8005f3a:	6979      	ldr	r1, [r7, #20]
 8005f3c:	4401      	add	r1, r0
 8005f3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f42:	4313      	orrs	r3, r2
 8005f44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d11e      	bne.n	8005f8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	461a      	mov	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e092      	b.n	80060b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fa8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d07e      	beq.n	80060b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	6979      	ldr	r1, [r7, #20]
 8005fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	634b      	str	r3, [r1, #52]	; 0x34
 8005fd2:	e06d      	b.n	80060b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	0cdb      	lsrs	r3, r3, #19
 8005ff0:	04db      	lsls	r3, r3, #19
 8005ff2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006012:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006016:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	440a      	add	r2, r1
 800603e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006042:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006046:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800605e:	6939      	ldr	r1, [r7, #16]
 8006060:	0148      	lsls	r0, r1, #5
 8006062:	6979      	ldr	r1, [r7, #20]
 8006064:	4401      	add	r1, r0
 8006066:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800606a:	4313      	orrs	r3, r2
 800606c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d10d      	bne.n	8006090 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	68d9      	ldr	r1, [r3, #12]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	460a      	mov	r2, r1
 800608e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060be:	b480      	push	{r7}
 80060c0:	b089      	sub	sp, #36	; 0x24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	4611      	mov	r1, r2
 80060ca:	461a      	mov	r2, r3
 80060cc:	460b      	mov	r3, r1
 80060ce:	71fb      	strb	r3, [r7, #7]
 80060d0:	4613      	mov	r3, r2
 80060d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80060dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11a      	bne.n	800611a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060e4:	88bb      	ldrh	r3, [r7, #4]
 80060e6:	3303      	adds	r3, #3
 80060e8:	089b      	lsrs	r3, r3, #2
 80060ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	e00f      	b.n	8006112 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	031a      	lsls	r2, r3, #12
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fe:	461a      	mov	r2, r3
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3304      	adds	r3, #4
 800610a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3301      	adds	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d3eb      	bcc.n	80060f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3724      	adds	r7, #36	; 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006128:	b480      	push	{r7}
 800612a:	b089      	sub	sp, #36	; 0x24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	3303      	adds	r3, #3
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	e00b      	b.n	8006164 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	601a      	str	r2, [r3, #0]
    pDest++;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	3304      	adds	r3, #4
 800615c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	3301      	adds	r3, #1
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	429a      	cmp	r2, r3
 800616a:	d3ef      	bcc.n	800614c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800616c:	69fb      	ldr	r3, [r7, #28]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3724      	adds	r7, #36	; 0x24
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d12c      	bne.n	80061f0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	db12      	blt.n	80061ce <USB_EPSetStall+0x54>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061cc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e02b      	b.n	8006248 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	db12      	blt.n	8006228 <USB_EPSetStall+0xae>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006222:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006226:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d128      	bne.n	80062c4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006290:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d003      	beq.n	80062a2 <USB_EPClearStall+0x4c>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	78db      	ldrb	r3, [r3, #3]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d138      	bne.n	8006314 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e027      	b.n	8006314 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	78db      	ldrb	r3, [r3, #3]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d003      	beq.n	80062f4 <USB_EPClearStall+0x9e>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	78db      	ldrb	r3, [r3, #3]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d10f      	bne.n	8006314 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006312:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	460b      	mov	r3, r1
 800632c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006340:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006344:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800638e:	2003      	movs	r0, #3
 8006390:	f7fa fb78 	bl	8000a84 <HAL_Delay>

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80063be:	2003      	movs	r0, #3
 80063c0:	f7fa fb60 	bl	8000a84 <HAL_Delay>

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4013      	ands	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063e6:	68fb      	ldr	r3, [r7, #12]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	0c1b      	lsrs	r3, r3, #16
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	4013      	ands	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	b29b      	uxth	r3, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	4013      	ands	r3, r2
 8006488:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800648a:	68bb      	ldr	r3, [r7, #8]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
 80064c8:	01db      	lsls	r3, r3, #7
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4013      	ands	r3, r2
 80064e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064e6:	68bb      	ldr	r3, [r7, #8]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0301 	and.w	r3, r3, #1
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0306 	and.w	r3, r3, #6
 8006540:	2b04      	cmp	r3, #4
 8006542:	d109      	bne.n	8006558 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f043 0303 	orr.w	r3, r3, #3
 8006556:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800656a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	460b      	mov	r3, r1
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	333c      	adds	r3, #60	; 0x3c
 8006592:	3304      	adds	r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4a26      	ldr	r2, [pc, #152]	; (8006634 <USB_EP0_OutStart+0xb8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d90a      	bls.n	80065b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b0:	d101      	bne.n	80065b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e037      	b.n	8006626 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e4:	f043 0318 	orr.w	r3, r3, #24
 80065e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065fe:	7afb      	ldrb	r3, [r7, #11]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10f      	bne.n	8006624 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	4f54300a 	.word	0x4f54300a

08006638 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3301      	adds	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4a13      	ldr	r2, [pc, #76]	; (800669c <USB_CoreReset+0x64>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e01b      	b.n	800668e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	daf2      	bge.n	8006644 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f043 0201 	orr.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <USB_CoreReset+0x64>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e006      	b.n	800668e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d0f0      	beq.n	800666e <USB_CoreReset+0x36>

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	00030d40 	.word	0x00030d40

080066a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7c1b      	ldrb	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d115      	bne.n	80066e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066bc:	2202      	movs	r2, #2
 80066be:	2181      	movs	r1, #129	; 0x81
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f00e fc98 	bl	8014ff6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d0:	2202      	movs	r2, #2
 80066d2:	2101      	movs	r1, #1
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f00e fc8e 	bl	8014ff6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80066e2:	e012      	b.n	800670a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066e4:	2340      	movs	r3, #64	; 0x40
 80066e6:	2202      	movs	r2, #2
 80066e8:	2181      	movs	r1, #129	; 0x81
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f00e fc83 	bl	8014ff6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	2202      	movs	r2, #2
 80066fa:	2101      	movs	r1, #1
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f00e fc7a 	bl	8014ff6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800670a:	2308      	movs	r3, #8
 800670c:	2203      	movs	r2, #3
 800670e:	2182      	movs	r1, #130	; 0x82
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f00e fc70 	bl	8014ff6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800671c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006720:	f00e ff18 	bl	8015554 <malloc>
 8006724:	4603      	mov	r3, r0
 8006726:	461a      	mov	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e026      	b.n	800678c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006744:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	7c1b      	ldrb	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800676e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006772:	2101      	movs	r1, #1
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f00e fd2f 	bl	80151d8 <USBD_LL_PrepareReceive>
 800677a:	e007      	b.n	800678c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006782:	2340      	movs	r3, #64	; 0x40
 8006784:	2101      	movs	r1, #1
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f00e fd26 	bl	80151d8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067a6:	2181      	movs	r1, #129	; 0x81
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f00e fc4a 	bl	8015042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f00e fc43 	bl	8015042 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067c4:	2182      	movs	r1, #130	; 0x82
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f00e fc3b 	bl	8015042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00e      	beq.n	80067fa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80067ec:	4618      	mov	r0, r3
 80067ee:	f00e feb9 	bl	8015564 <free>
    pdev->pClassData = NULL;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006814:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800682a:	2b00      	cmp	r3, #0
 800682c:	d039      	beq.n	80068a2 <USBD_CDC_Setup+0x9e>
 800682e:	2b20      	cmp	r3, #32
 8006830:	d17c      	bne.n	800692c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88db      	ldrh	r3, [r3, #6]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d029      	beq.n	800688e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b25b      	sxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	da11      	bge.n	8006868 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006850:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	88d2      	ldrh	r2, [r2, #6]
 8006856:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006858:	6939      	ldr	r1, [r7, #16]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	88db      	ldrh	r3, [r3, #6]
 800685e:	461a      	mov	r2, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f9c9 	bl	8007bf8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006866:	e068      	b.n	800693a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	785a      	ldrb	r2, [r3, #1]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	88db      	ldrh	r3, [r3, #6]
 8006876:	b2da      	uxtb	r2, r3
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800687e:	6939      	ldr	r1, [r7, #16]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	88db      	ldrh	r3, [r3, #6]
 8006884:	461a      	mov	r2, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 f9e4 	bl	8007c54 <USBD_CtlPrepareRx>
    break;
 800688c:	e055      	b.n	800693a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	7850      	ldrb	r0, [r2, #1]
 800689a:	2200      	movs	r2, #0
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	4798      	blx	r3
    break;
 80068a0:	e04b      	b.n	800693a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b0a      	cmp	r3, #10
 80068a8:	d017      	beq.n	80068da <USBD_CDC_Setup+0xd6>
 80068aa:	2b0b      	cmp	r3, #11
 80068ac:	d029      	beq.n	8006902 <USBD_CDC_Setup+0xfe>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d133      	bne.n	800691a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d107      	bne.n	80068cc <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80068bc:	f107 030c 	add.w	r3, r7, #12
 80068c0:	2202      	movs	r2, #2
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f997 	bl	8007bf8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80068ca:	e02e      	b.n	800692a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 f927 	bl	8007b22 <USBD_CtlError>
			  ret = USBD_FAIL;
 80068d4:	2302      	movs	r3, #2
 80068d6:	75fb      	strb	r3, [r7, #23]
      break;
 80068d8:	e027      	b.n	800692a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d107      	bne.n	80068f4 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80068e4:	f107 030f 	add.w	r3, r7, #15
 80068e8:	2201      	movs	r2, #1
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 f983 	bl	8007bf8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80068f2:	e01a      	b.n	800692a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 f913 	bl	8007b22 <USBD_CtlError>
			  ret = USBD_FAIL;
 80068fc:	2302      	movs	r3, #2
 80068fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006900:	e013      	b.n	800692a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006908:	2b03      	cmp	r3, #3
 800690a:	d00d      	beq.n	8006928 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f907 	bl	8007b22 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006914:	2302      	movs	r3, #2
 8006916:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006918:	e006      	b.n	8006928 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f900 	bl	8007b22 <USBD_CtlError>
      ret = USBD_FAIL;
 8006922:	2302      	movs	r3, #2
 8006924:	75fb      	strb	r3, [r7, #23]
      break;
 8006926:	e000      	b.n	800692a <USBD_CDC_Setup+0x126>
      break;
 8006928:	bf00      	nop
    }
    break;
 800692a:	e006      	b.n	800693a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 f8f7 	bl	8007b22 <USBD_CtlError>
    ret = USBD_FAIL;
 8006934:	2302      	movs	r3, #2
 8006936:	75fb      	strb	r3, [r7, #23]
    break;
 8006938:	bf00      	nop
  }

  return ret;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006956:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800695e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006966:	2b00      	cmp	r3, #0
 8006968:	d03a      	beq.n	80069e0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	331c      	adds	r3, #28
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d029      	beq.n	80069d4 <USBD_CDC_DataIn+0x90>
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	4613      	mov	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	331c      	adds	r3, #28
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	78f9      	ldrb	r1, [r7, #3]
 8006994:	68b8      	ldr	r0, [r7, #8]
 8006996:	460b      	mov	r3, r1
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	1a5b      	subs	r3, r3, r1
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4403      	add	r3, r0
 80069a0:	3344      	adds	r3, #68	; 0x44
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069a8:	fb03 f301 	mul.w	r3, r3, r1
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d110      	bne.n	80069d4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80069b2:	78fa      	ldrb	r2, [r7, #3]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	331c      	adds	r3, #28
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80069c6:	78f9      	ldrb	r1, [r7, #3]
 80069c8:	2300      	movs	r3, #0
 80069ca:	2200      	movs	r2, #0
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f00e fbe0 	bl	8015192 <USBD_LL_Transmit>
 80069d2:	e003      	b.n	80069dc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	e000      	b.n	80069e2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80069e0:	2302      	movs	r3, #2
  }
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f00e fc0b 	bl	801521e <USBD_LL_GetRxDataSize>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a2e:	4611      	mov	r1, r2
 8006a30:	4798      	blx	r3

    return USBD_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a4e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d015      	beq.n	8006a86 <USBD_CDC_EP0_RxReady+0x46>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a60:	2bff      	cmp	r3, #255	; 0xff
 8006a62:	d010      	beq.n	8006a86 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a72:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a7a:	b292      	uxth	r2, r2
 8006a7c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	22ff      	movs	r2, #255	; 0xff
 8006a82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2243      	movs	r2, #67	; 0x43
 8006a9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006a9e:	4b03      	ldr	r3, [pc, #12]	; (8006aac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20000090 	.word	0x20000090

08006ab0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2243      	movs	r2, #67	; 0x43
 8006abc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006abe:	4b03      	ldr	r3, [pc, #12]	; (8006acc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	2000004c 	.word	0x2000004c

08006ad0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2243      	movs	r2, #67	; 0x43
 8006adc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006ade:	4b03      	ldr	r3, [pc, #12]	; (8006aec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	200000d4 	.word	0x200000d4

08006af0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	220a      	movs	r2, #10
 8006afc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006afe:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	20000008 	.word	0x20000008

08006b10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b52:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b5c:	88fa      	ldrh	r2, [r7, #6]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ba8:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01c      	beq.n	8006bee <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d115      	bne.n	8006bea <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2181      	movs	r1, #129	; 0x81
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f00e fad6 	bl	8015192 <USBD_LL_Transmit>

      return USBD_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e002      	b.n	8006bf0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006bee:	2302      	movs	r3, #2
  }
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d017      	beq.n	8006c42 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7c1b      	ldrb	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c24:	2101      	movs	r1, #1
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f00e fad6 	bl	80151d8 <USBD_LL_PrepareReceive>
 8006c2c:	e007      	b.n	8006c3e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	2101      	movs	r1, #1
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f00e facd 	bl	80151d8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c60:	2302      	movs	r3, #2
 8006c62:	e01a      	b.n	8006c9a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	79fa      	ldrb	r2, [r7, #7]
 8006c90:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f00e f948 	bl	8014f28 <USBD_LL_Init>

  return USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d006      	beq.n	8006cc4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e001      	b.n	8006cc8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f00e f96e 	bl	8014fc0 <USBD_LL_Start>

  return USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006d10:	2302      	movs	r3, #2
 8006d12:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fe94 	bl	8007aa8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d00c      	beq.n	8006dbe <USBD_LL_SetupStage+0x56>
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d302      	bcc.n	8006dae <USBD_LL_SetupStage+0x46>
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d010      	beq.n	8006dce <USBD_LL_SetupStage+0x66>
 8006dac:	e017      	b.n	8006dde <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa04 	bl	80071c4 <USBD_StdDevReq>
    break;
 8006dbc:	e01a      	b.n	8006df4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa66 	bl	8007298 <USBD_StdItfReq>
    break;
 8006dcc:	e012      	b.n	8006df4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 faa4 	bl	8007324 <USBD_StdEPReq>
    break;
 8006ddc:	e00a      	b.n	8006df4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006de4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f00e f947 	bl	8015080 <USBD_LL_StallEP>
    break;
 8006df2:	bf00      	nop
  }

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	460b      	mov	r3, r1
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006e0c:	7afb      	ldrb	r3, [r7, #11]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d14b      	bne.n	8006eaa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006e18:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d134      	bne.n	8006e8e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d919      	bls.n	8006e64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	1ad2      	subs	r2, r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d203      	bcs.n	8006e52 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	e002      	b.n	8006e58 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 ff17 	bl	8007c90 <USBD_CtlContinueRx>
 8006e62:	e038      	b.n	8006ed6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d105      	bne.n	8006e86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 ff14 	bl	8007cb4 <USBD_CtlSendStatus>
 8006e8c:	e023      	b.n	8006ed6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d11e      	bne.n	8006ed6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f00e f8ec 	bl	8015080 <USBD_LL_StallEP>
 8006ea8:	e015      	b.n	8006ed6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00d      	beq.n	8006ed2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d108      	bne.n	8006ed2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	7afa      	ldrb	r2, [r7, #11]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	4798      	blx	r3
 8006ed0:	e001      	b.n	8006ed6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e000      	b.n	8006ed8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d17f      	bne.n	8006ff4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d15c      	bne.n	8006fbe <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d915      	bls.n	8006f3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	1ad2      	subs	r2, r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fe81 	bl	8007c30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f00e f94f 	bl	80151d8 <USBD_LL_PrepareReceive>
 8006f3a:	e04e      	b.n	8006fda <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	6912      	ldr	r2, [r2, #16]
 8006f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f48:	fb02 f201 	mul.w	r2, r2, r1
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d11c      	bne.n	8006f8c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d316      	bcc.n	8006f8c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d20f      	bcs.n	8006f8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fe5d 	bl	8007c30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2200      	movs	r2, #0
 8006f82:	2100      	movs	r1, #0
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f00e f927 	bl	80151d8 <USBD_LL_PrepareReceive>
 8006f8a:	e026      	b.n	8006fda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d105      	bne.n	8006fae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fae:	2180      	movs	r1, #128	; 0x80
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f00e f865 	bl	8015080 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fe8f 	bl	8007cda <USBD_CtlReceiveStatus>
 8006fbc:	e00d      	b.n	8006fda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d004      	beq.n	8006fd2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d103      	bne.n	8006fda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fd2:	2180      	movs	r1, #128	; 0x80
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f00e f853 	bl	8015080 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d11d      	bne.n	8007020 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7ff fe82 	bl	8006cee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006ff2:	e015      	b.n	8007020 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00d      	beq.n	800701c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007006:	2b03      	cmp	r3, #3
 8007008:	d108      	bne.n	800701c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	7afa      	ldrb	r2, [r7, #11]
 8007014:	4611      	mov	r1, r2
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	4798      	blx	r3
 800701a:	e001      	b.n	8007020 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	e000      	b.n	8007022 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	2200      	movs	r2, #0
 8007036:	2100      	movs	r1, #0
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f00d ffdc 	bl	8014ff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2240      	movs	r2, #64	; 0x40
 800704a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	2200      	movs	r2, #0
 8007052:	2180      	movs	r1, #128	; 0x80
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f00d ffce 	bl	8014ff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2240      	movs	r2, #64	; 0x40
 8007064:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6852      	ldr	r2, [r2, #4]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	4611      	mov	r1, r2
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
  }

  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2204      	movs	r2, #4
 80070e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007126:	2b03      	cmp	r3, #3
 8007128:	d10b      	bne.n	8007142 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6852      	ldr	r2, [r2, #4]
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	4611      	mov	r1, r2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d004      	beq.n	80071e8 <USBD_StdDevReq+0x24>
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d002      	beq.n	80071e8 <USBD_StdDevReq+0x24>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <USBD_StdDevReq+0x34>
 80071e6:	e04c      	b.n	8007282 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    break;
 80071f6:	e049      	b.n	800728c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	2b09      	cmp	r3, #9
 80071fe:	d83a      	bhi.n	8007276 <USBD_StdDevReq+0xb2>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <USBD_StdDevReq+0x44>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	08007259 	.word	0x08007259
 800720c:	0800726d 	.word	0x0800726d
 8007210:	08007277 	.word	0x08007277
 8007214:	08007263 	.word	0x08007263
 8007218:	08007277 	.word	0x08007277
 800721c:	0800723b 	.word	0x0800723b
 8007220:	08007231 	.word	0x08007231
 8007224:	08007277 	.word	0x08007277
 8007228:	0800724f 	.word	0x0800724f
 800722c:	08007245 	.word	0x08007245
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f9d2 	bl	80075dc <USBD_GetDescriptor>
      break;
 8007238:	e022      	b.n	8007280 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fac7 	bl	80077d0 <USBD_SetAddress>
      break;
 8007242:	e01d      	b.n	8007280 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fb04 	bl	8007854 <USBD_SetConfig>
      break;
 800724c:	e018      	b.n	8007280 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fb8d 	bl	8007970 <USBD_GetConfig>
      break;
 8007256:	e013      	b.n	8007280 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fbbc 	bl	80079d8 <USBD_GetStatus>
      break;
 8007260:	e00e      	b.n	8007280 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fbea 	bl	8007a3e <USBD_SetFeature>
      break;
 800726a:	e009      	b.n	8007280 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fbf9 	bl	8007a66 <USBD_ClrFeature>
      break;
 8007274:	e004      	b.n	8007280 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc52 	bl	8007b22 <USBD_CtlError>
      break;
 800727e:	bf00      	nop
    }
    break;
 8007280:	e004      	b.n	800728c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fc4c 	bl	8007b22 <USBD_CtlError>
    break;
 800728a:	bf00      	nop
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop

08007298 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d003      	beq.n	80072ba <USBD_StdItfReq+0x22>
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d001      	beq.n	80072ba <USBD_StdItfReq+0x22>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d12a      	bne.n	8007310 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072c0:	3b01      	subs	r3, #1
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d81d      	bhi.n	8007302 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	889b      	ldrh	r3, [r3, #4]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d813      	bhi.n	80072f8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d110      	bne.n	800730c <USBD_StdItfReq+0x74>
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10d      	bne.n	800730c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fcdf 	bl	8007cb4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80072f6:	e009      	b.n	800730c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fc11 	bl	8007b22 <USBD_CtlError>
      break;
 8007300:	e004      	b.n	800730c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fc0c 	bl	8007b22 <USBD_CtlError>
      break;
 800730a:	e000      	b.n	800730e <USBD_StdItfReq+0x76>
      break;
 800730c:	bf00      	nop
    }
    break;
 800730e:	e004      	b.n	800731a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc05 	bl	8007b22 <USBD_CtlError>
    break;
 8007318:	bf00      	nop
  }

  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	889b      	ldrh	r3, [r3, #4]
 8007336:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007340:	2b20      	cmp	r3, #32
 8007342:	d004      	beq.n	800734e <USBD_StdEPReq+0x2a>
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d002      	beq.n	800734e <USBD_StdEPReq+0x2a>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <USBD_StdEPReq+0x3a>
 800734c:	e13b      	b.n	80075c6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
    break;
 800735c:	e138      	b.n	80075d0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007366:	2b20      	cmp	r3, #32
 8007368:	d10a      	bne.n	8007380 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	e128      	b.n	80075d2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d03e      	beq.n	8007406 <USBD_StdEPReq+0xe2>
 8007388:	2b03      	cmp	r3, #3
 800738a:	d002      	beq.n	8007392 <USBD_StdEPReq+0x6e>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d070      	beq.n	8007472 <USBD_StdEPReq+0x14e>
 8007390:	e113      	b.n	80075ba <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007398:	2b02      	cmp	r3, #2
 800739a:	d002      	beq.n	80073a2 <USBD_StdEPReq+0x7e>
 800739c:	2b03      	cmp	r3, #3
 800739e:	d015      	beq.n	80073cc <USBD_StdEPReq+0xa8>
 80073a0:	e02b      	b.n	80073fa <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00c      	beq.n	80073c2 <USBD_StdEPReq+0x9e>
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b80      	cmp	r3, #128	; 0x80
 80073ac:	d009      	beq.n	80073c2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f00d fe64 	bl	8015080 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80073b8:	2180      	movs	r1, #128	; 0x80
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f00d fe60 	bl	8015080 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80073c0:	e020      	b.n	8007404 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fbac 	bl	8007b22 <USBD_CtlError>
        break;
 80073ca:	e01b      	b.n	8007404 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	885b      	ldrh	r3, [r3, #2]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10e      	bne.n	80073f2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <USBD_StdEPReq+0xce>
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b80      	cmp	r3, #128	; 0x80
 80073de:	d008      	beq.n	80073f2 <USBD_StdEPReq+0xce>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	88db      	ldrh	r3, [r3, #6]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f00d fe47 	bl	8015080 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fc5e 	bl	8007cb4 <USBD_CtlSendStatus>

        break;
 80073f8:	e004      	b.n	8007404 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb90 	bl	8007b22 <USBD_CtlError>
        break;
 8007402:	bf00      	nop
      }
      break;
 8007404:	e0de      	b.n	80075c4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800740c:	2b02      	cmp	r3, #2
 800740e:	d002      	beq.n	8007416 <USBD_StdEPReq+0xf2>
 8007410:	2b03      	cmp	r3, #3
 8007412:	d015      	beq.n	8007440 <USBD_StdEPReq+0x11c>
 8007414:	e026      	b.n	8007464 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00c      	beq.n	8007436 <USBD_StdEPReq+0x112>
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b80      	cmp	r3, #128	; 0x80
 8007420:	d009      	beq.n	8007436 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f00d fe2a 	bl	8015080 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f00d fe26 	bl	8015080 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007434:	e01c      	b.n	8007470 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb72 	bl	8007b22 <USBD_CtlError>
        break;
 800743e:	e017      	b.n	8007470 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	885b      	ldrh	r3, [r3, #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d112      	bne.n	800746e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744e:	2b00      	cmp	r3, #0
 8007450:	d004      	beq.n	800745c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f00d fe31 	bl	80150be <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc29 	bl	8007cb4 <USBD_CtlSendStatus>
        }
        break;
 8007462:	e004      	b.n	800746e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb5b 	bl	8007b22 <USBD_CtlError>
        break;
 800746c:	e000      	b.n	8007470 <USBD_StdEPReq+0x14c>
        break;
 800746e:	bf00      	nop
      }
      break;
 8007470:	e0a8      	b.n	80075c4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007478:	2b02      	cmp	r3, #2
 800747a:	d002      	beq.n	8007482 <USBD_StdEPReq+0x15e>
 800747c:	2b03      	cmp	r3, #3
 800747e:	d031      	beq.n	80074e4 <USBD_StdEPReq+0x1c0>
 8007480:	e095      	b.n	80075ae <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <USBD_StdEPReq+0x174>
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b80      	cmp	r3, #128	; 0x80
 800748c:	d004      	beq.n	8007498 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fb46 	bl	8007b22 <USBD_CtlError>
          break;
 8007496:	e08f      	b.n	80075b8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da0b      	bge.n	80074b8 <USBD_StdEPReq+0x194>
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	3310      	adds	r3, #16
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	3304      	adds	r3, #4
 80074b6:	e00a      	b.n	80074ce <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4413      	add	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2202      	movs	r2, #2
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fb8b 	bl	8007bf8 <USBD_CtlSendData>
          break;
 80074e2:	e069      	b.n	80075b8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80074e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da11      	bge.n	8007510 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	f003 020f 	and.w	r2, r3, #15
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	3318      	adds	r3, #24
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d117      	bne.n	8007536 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb0a 	bl	8007b22 <USBD_CtlError>
            break;
 800750e:	e053      	b.n	80075b8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 020f 	and.w	r2, r3, #15
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 faf7 	bl	8007b22 <USBD_CtlError>
            break;
 8007534:	e040      	b.n	80075b8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800753a:	2b00      	cmp	r3, #0
 800753c:	da0b      	bge.n	8007556 <USBD_StdEPReq+0x232>
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	3310      	adds	r3, #16
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	3304      	adds	r3, #4
 8007554:	e00a      	b.n	800756c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <USBD_StdEPReq+0x256>
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b80      	cmp	r3, #128	; 0x80
 8007578:	d103      	bne.n	8007582 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e00e      	b.n	80075a0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f00d fdb8 	bl	80150fc <USBD_LL_IsStallEP>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e002      	b.n	80075a0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2202      	movs	r2, #2
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb26 	bl	8007bf8 <USBD_CtlSendData>
          break;
 80075ac:	e004      	b.n	80075b8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fab6 	bl	8007b22 <USBD_CtlError>
        break;
 80075b6:	bf00      	nop
      }
      break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fab0 	bl	8007b22 <USBD_CtlError>
      break;
 80075c2:	bf00      	nop
    }
    break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 faaa 	bl	8007b22 <USBD_CtlError>
    break;
 80075ce:	bf00      	nop
  }

  return ret;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	2b06      	cmp	r3, #6
 80075f2:	f200 80c9 	bhi.w	8007788 <USBD_GetDescriptor+0x1ac>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <USBD_GetDescriptor+0x20>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007619 	.word	0x08007619
 8007600:	08007631 	.word	0x08007631
 8007604:	08007671 	.word	0x08007671
 8007608:	08007789 	.word	0x08007789
 800760c:	08007789 	.word	0x08007789
 8007610:	08007735 	.word	0x08007735
 8007614:	0800775b 	.word	0x0800775b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	7c12      	ldrb	r2, [r2, #16]
 8007624:	f107 010a 	add.w	r1, r7, #10
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
    break;
 800762e:	e0b0      	b.n	8007792 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	7c1b      	ldrb	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	f107 020a 	add.w	r2, r7, #10
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3
 8007648:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	2202      	movs	r2, #2
 8007650:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007652:	e09e      	b.n	8007792 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	f107 020a 	add.w	r2, r7, #10
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	2202      	movs	r2, #2
 800766c:	701a      	strb	r2, [r3, #0]
    break;
 800766e:	e090      	b.n	8007792 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	885b      	ldrh	r3, [r3, #2]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b05      	cmp	r3, #5
 8007678:	d856      	bhi.n	8007728 <USBD_GetDescriptor+0x14c>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <USBD_GetDescriptor+0xa4>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	08007699 	.word	0x08007699
 8007684:	080076b1 	.word	0x080076b1
 8007688:	080076c9 	.word	0x080076c9
 800768c:	080076e1 	.word	0x080076e1
 8007690:	080076f9 	.word	0x080076f9
 8007694:	08007711 	.word	0x08007711
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	7c12      	ldrb	r2, [r2, #16]
 80076a4:	f107 010a 	add.w	r1, r7, #10
 80076a8:	4610      	mov	r0, r2
 80076aa:	4798      	blx	r3
 80076ac:	60f8      	str	r0, [r7, #12]
      break;
 80076ae:	e040      	b.n	8007732 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7c12      	ldrb	r2, [r2, #16]
 80076bc:	f107 010a 	add.w	r1, r7, #10
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
 80076c4:	60f8      	str	r0, [r7, #12]
      break;
 80076c6:	e034      	b.n	8007732 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	f107 010a 	add.w	r1, r7, #10
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
      break;
 80076de:	e028      	b.n	8007732 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7c12      	ldrb	r2, [r2, #16]
 80076ec:	f107 010a 	add.w	r1, r7, #10
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
 80076f4:	60f8      	str	r0, [r7, #12]
      break;
 80076f6:	e01c      	b.n	8007732 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 010a 	add.w	r1, r7, #10
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
      break;
 800770e:	e010      	b.n	8007732 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	7c12      	ldrb	r2, [r2, #16]
 800771c:	f107 010a 	add.w	r1, r7, #10
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	60f8      	str	r0, [r7, #12]
      break;
 8007726:	e004      	b.n	8007732 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9f9 	bl	8007b22 <USBD_CtlError>
      return;
 8007730:	e04b      	b.n	80077ca <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007732:	e02e      	b.n	8007792 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7c1b      	ldrb	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d109      	bne.n	8007750 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007744:	f107 020a 	add.w	r2, r7, #10
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
      break;
 800774e:	e020      	b.n	8007792 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9e5 	bl	8007b22 <USBD_CtlError>
      return;
 8007758:	e037      	b.n	80077ca <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7c1b      	ldrb	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10d      	bne.n	800777e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	f107 020a 	add.w	r2, r7, #10
 800776e:	4610      	mov	r0, r2
 8007770:	4798      	blx	r3
 8007772:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3301      	adds	r3, #1
 8007778:	2207      	movs	r2, #7
 800777a:	701a      	strb	r2, [r3, #0]
      break;
 800777c:	e009      	b.n	8007792 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f9ce 	bl	8007b22 <USBD_CtlError>
      return;
 8007786:	e020      	b.n	80077ca <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9c9 	bl	8007b22 <USBD_CtlError>
    return;
 8007790:	e01b      	b.n	80077ca <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007792:	897b      	ldrh	r3, [r7, #10]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d011      	beq.n	80077bc <USBD_GetDescriptor+0x1e0>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	88db      	ldrh	r3, [r3, #6]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00d      	beq.n	80077bc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	88da      	ldrh	r2, [r3, #6]
 80077a4:	897b      	ldrh	r3, [r7, #10]
 80077a6:	4293      	cmp	r3, r2
 80077a8:	bf28      	it	cs
 80077aa:	4613      	movcs	r3, r2
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80077b0:	897b      	ldrh	r3, [r7, #10]
 80077b2:	461a      	mov	r2, r3
 80077b4:	68f9      	ldr	r1, [r7, #12]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa1e 	bl	8007bf8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	88db      	ldrh	r3, [r3, #6]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa75 	bl	8007cb4 <USBD_CtlSendStatus>
  }
}
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	889b      	ldrh	r3, [r3, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d130      	bne.n	8007844 <USBD_SetAddress+0x74>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d12c      	bne.n	8007844 <USBD_SetAddress+0x74>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	885b      	ldrh	r3, [r3, #2]
 80077ee:	2b7f      	cmp	r3, #127	; 0x7f
 80077f0:	d828      	bhi.n	8007844 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	885b      	ldrh	r3, [r3, #2]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007804:	2b03      	cmp	r3, #3
 8007806:	d104      	bne.n	8007812 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f989 	bl	8007b22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007810:	e01c      	b.n	800784c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7bfa      	ldrb	r2, [r7, #15]
 8007816:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f00d fc98 	bl	8015154 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fa45 	bl	8007cb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007838:	e008      	b.n	800784c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007842:	e003      	b.n	800784c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f96b 	bl	8007b22 <USBD_CtlError>
  }
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	885b      	ldrh	r3, [r3, #2]
 8007862:	b2da      	uxtb	r2, r3
 8007864:	4b41      	ldr	r3, [pc, #260]	; (800796c <USBD_SetConfig+0x118>)
 8007866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007868:	4b40      	ldr	r3, [pc, #256]	; (800796c <USBD_SetConfig+0x118>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d904      	bls.n	800787a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f955 	bl	8007b22 <USBD_CtlError>
 8007878:	e075      	b.n	8007966 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007880:	2b02      	cmp	r3, #2
 8007882:	d002      	beq.n	800788a <USBD_SetConfig+0x36>
 8007884:	2b03      	cmp	r3, #3
 8007886:	d023      	beq.n	80078d0 <USBD_SetConfig+0x7c>
 8007888:	e062      	b.n	8007950 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800788a:	4b38      	ldr	r3, [pc, #224]	; (800796c <USBD_SetConfig+0x118>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01a      	beq.n	80078c8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007892:	4b36      	ldr	r3, [pc, #216]	; (800796c <USBD_SetConfig+0x118>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2203      	movs	r2, #3
 80078a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078a4:	4b31      	ldr	r3, [pc, #196]	; (800796c <USBD_SetConfig+0x118>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fa2a 	bl	8006d04 <USBD_SetClassConfig>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d104      	bne.n	80078c0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f932 	bl	8007b22 <USBD_CtlError>
          return;
 80078be:	e052      	b.n	8007966 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9f7 	bl	8007cb4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80078c6:	e04e      	b.n	8007966 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f9f3 	bl	8007cb4 <USBD_CtlSendStatus>
      break;
 80078ce:	e04a      	b.n	8007966 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078d0:	4b26      	ldr	r3, [pc, #152]	; (800796c <USBD_SetConfig+0x118>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d112      	bne.n	80078fe <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80078e0:	4b22      	ldr	r3, [pc, #136]	; (800796c <USBD_SetConfig+0x118>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80078ea:	4b20      	ldr	r3, [pc, #128]	; (800796c <USBD_SetConfig+0x118>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fa26 	bl	8006d42 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9dc 	bl	8007cb4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80078fc:	e033      	b.n	8007966 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80078fe:	4b1b      	ldr	r3, [pc, #108]	; (800796c <USBD_SetConfig+0x118>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d01d      	beq.n	8007948 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fa14 	bl	8006d42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <USBD_SetConfig+0x118>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007924:	4b11      	ldr	r3, [pc, #68]	; (800796c <USBD_SetConfig+0x118>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff f9ea 	bl	8006d04 <USBD_SetClassConfig>
 8007930:	4603      	mov	r3, r0
 8007932:	2b02      	cmp	r3, #2
 8007934:	d104      	bne.n	8007940 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f8f2 	bl	8007b22 <USBD_CtlError>
          return;
 800793e:	e012      	b.n	8007966 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f9b7 	bl	8007cb4 <USBD_CtlSendStatus>
      break;
 8007946:	e00e      	b.n	8007966 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f9b3 	bl	8007cb4 <USBD_CtlSendStatus>
      break;
 800794e:	e00a      	b.n	8007966 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8e5 	bl	8007b22 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007958:	4b04      	ldr	r3, [pc, #16]	; (800796c <USBD_SetConfig+0x118>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff f9ef 	bl	8006d42 <USBD_ClrClassConfig>
      break;
 8007964:	bf00      	nop
    }
  }
}
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	2000020c 	.word	0x2000020c

08007970 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	88db      	ldrh	r3, [r3, #6]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d004      	beq.n	800798c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f8cc 	bl	8007b22 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800798a:	e021      	b.n	80079d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007992:	2b01      	cmp	r3, #1
 8007994:	db17      	blt.n	80079c6 <USBD_GetConfig+0x56>
 8007996:	2b02      	cmp	r3, #2
 8007998:	dd02      	ble.n	80079a0 <USBD_GetConfig+0x30>
 800799a:	2b03      	cmp	r3, #3
 800799c:	d00b      	beq.n	80079b6 <USBD_GetConfig+0x46>
 800799e:	e012      	b.n	80079c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3308      	adds	r3, #8
 80079aa:	2201      	movs	r2, #1
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f922 	bl	8007bf8 <USBD_CtlSendData>
      break;
 80079b4:	e00c      	b.n	80079d0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3304      	adds	r3, #4
 80079ba:	2201      	movs	r2, #1
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f91a 	bl	8007bf8 <USBD_CtlSendData>
      break;
 80079c4:	e004      	b.n	80079d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f8aa 	bl	8007b22 <USBD_CtlError>
      break;
 80079ce:	bf00      	nop
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079e8:	3b01      	subs	r3, #1
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d81e      	bhi.n	8007a2c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88db      	ldrh	r3, [r3, #6]
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d004      	beq.n	8007a00 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f892 	bl	8007b22 <USBD_CtlError>
      break;
 80079fe:	e01a      	b.n	8007a36 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f043 0202 	orr.w	r2, r3, #2
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	330c      	adds	r3, #12
 8007a20:	2202      	movs	r2, #2
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f8e7 	bl	8007bf8 <USBD_CtlSendData>
    break;
 8007a2a:	e004      	b.n	8007a36 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f877 	bl	8007b22 <USBD_CtlError>
    break;
 8007a34:	bf00      	nop
  }
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	885b      	ldrh	r3, [r3, #2]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d106      	bne.n	8007a5e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f92b 	bl	8007cb4 <USBD_CtlSendStatus>
  }

}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a76:	3b01      	subs	r3, #1
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d80b      	bhi.n	8007a94 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	885b      	ldrh	r3, [r3, #2]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d10c      	bne.n	8007a9e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f911 	bl	8007cb4 <USBD_CtlSendStatus>
    }
    break;
 8007a92:	e004      	b.n	8007a9e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f843 	bl	8007b22 <USBD_CtlError>
    break;
 8007a9c:	e000      	b.n	8007aa0 <USBD_ClrFeature+0x3a>
    break;
 8007a9e:	bf00      	nop
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	785a      	ldrb	r2, [r3, #1]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	3302      	adds	r3, #2
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	3303      	adds	r3, #3
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	3305      	adds	r3, #5
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	3306      	adds	r3, #6
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	3307      	adds	r3, #7
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	4413      	add	r3, r2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	80da      	strh	r2, [r3, #6]

}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007b2c:	2180      	movs	r1, #128	; 0x80
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f00d faa6 	bl	8015080 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007b34:	2100      	movs	r1, #0
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f00d faa2 	bl	8015080 <USBD_LL_StallEP>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d032      	beq.n	8007bc0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 f834 	bl	8007bc8 <USBD_GetLen>
 8007b60:	4603      	mov	r3, r0
 8007b62:	3301      	adds	r3, #1
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	75fa      	strb	r2, [r7, #23]
 8007b74:	461a      	mov	r2, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4413      	add	r3, r2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	7812      	ldrb	r2, [r2, #0]
 8007b7e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	75fa      	strb	r2, [r7, #23]
 8007b86:	461a      	mov	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b90:	e012      	b.n	8007bb8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	60fa      	str	r2, [r7, #12]
 8007b98:	7dfa      	ldrb	r2, [r7, #23]
 8007b9a:	1c51      	adds	r1, r2, #1
 8007b9c:	75f9      	strb	r1, [r7, #23]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	440a      	add	r2, r1
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	75fa      	strb	r2, [r7, #23]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e8      	bne.n	8007b92 <USBD_GetString+0x4e>
    }
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007bd4:	e005      	b.n	8007be2 <USBD_GetLen+0x1a>
    {
        len++;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3301      	adds	r3, #1
 8007be0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f5      	bne.n	8007bd6 <USBD_GetLen+0xe>
    }

    return len;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c14:	88fa      	ldrh	r2, [r7, #6]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f00d fab6 	bl	8015192 <USBD_LL_Transmit>

  return USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	2100      	movs	r1, #0
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f00d faa4 	bl	8015192 <USBD_LL_Transmit>

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2203      	movs	r2, #3
 8007c66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f00d faa9 	bl	80151d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f00d fa97 	bl	80151d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f00d fa61 	bl	8015192 <USBD_LL_Transmit>

  return USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007cea:	2300      	movs	r3, #0
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f00d fa71 	bl	80151d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	ba5b      	rev16	r3, r3
 8007d0e:	b29b      	uxth	r3, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	061a      	lsls	r2, r3, #24
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	0a1b      	lsrs	r3, r3, #8
 8007d36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	0e1b      	lsrs	r3, r3, #24
 8007d40:	4313      	orrs	r3, r2
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007d58:	f000 f8a6 	bl	8007ea8 <mem_init>
  memp_init();
 8007d5c:	f000 fb3a 	bl	80083d4 <memp_init>
  pbuf_init();
  netif_init();
 8007d60:	f000 fbf2 	bl	8008548 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007d64:	f006 feac 	bl	800eac0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007d68:	f001 fb70 	bl	800944c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8007d6c:	f006 fd8a 	bl	800e884 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007d80:	4b40      	ldr	r3, [pc, #256]	; (8007e84 <plug_holes+0x10c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d206      	bcs.n	8007d98 <plug_holes+0x20>
 8007d8a:	4b3f      	ldr	r3, [pc, #252]	; (8007e88 <plug_holes+0x110>)
 8007d8c:	f240 125d 	movw	r2, #349	; 0x15d
 8007d90:	493e      	ldr	r1, [pc, #248]	; (8007e8c <plug_holes+0x114>)
 8007d92:	483f      	ldr	r0, [pc, #252]	; (8007e90 <plug_holes+0x118>)
 8007d94:	f00d fcb8 	bl	8015708 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007d98:	4b3e      	ldr	r3, [pc, #248]	; (8007e94 <plug_holes+0x11c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d306      	bcc.n	8007db0 <plug_holes+0x38>
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <plug_holes+0x110>)
 8007da4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007da8:	493b      	ldr	r1, [pc, #236]	; (8007e98 <plug_holes+0x120>)
 8007daa:	4839      	ldr	r0, [pc, #228]	; (8007e90 <plug_holes+0x118>)
 8007dac:	f00d fcac 	bl	8015708 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	791b      	ldrb	r3, [r3, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d006      	beq.n	8007dc6 <plug_holes+0x4e>
 8007db8:	4b33      	ldr	r3, [pc, #204]	; (8007e88 <plug_holes+0x110>)
 8007dba:	f240 125f 	movw	r2, #351	; 0x15f
 8007dbe:	4937      	ldr	r1, [pc, #220]	; (8007e9c <plug_holes+0x124>)
 8007dc0:	4833      	ldr	r0, [pc, #204]	; (8007e90 <plug_holes+0x118>)
 8007dc2:	f00d fca1 	bl	8015708 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007dce:	d906      	bls.n	8007dde <plug_holes+0x66>
 8007dd0:	4b2d      	ldr	r3, [pc, #180]	; (8007e88 <plug_holes+0x110>)
 8007dd2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8007dd6:	4932      	ldr	r1, [pc, #200]	; (8007ea0 <plug_holes+0x128>)
 8007dd8:	482d      	ldr	r0, [pc, #180]	; (8007e90 <plug_holes+0x118>)
 8007dda:	f00d fc95 	bl	8015708 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8007dde:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <plug_holes+0x10c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	8812      	ldrh	r2, [r2, #0]
 8007de6:	4413      	add	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d01f      	beq.n	8007e32 <plug_holes+0xba>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	791b      	ldrb	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d11b      	bne.n	8007e32 <plug_holes+0xba>
 8007dfa:	4b26      	ldr	r3, [pc, #152]	; (8007e94 <plug_holes+0x11c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d016      	beq.n	8007e32 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007e04:	4b27      	ldr	r3, [pc, #156]	; (8007ea4 <plug_holes+0x12c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d102      	bne.n	8007e14 <plug_holes+0x9c>
      lfree = mem;
 8007e0e:	4a25      	ldr	r2, [pc, #148]	; (8007ea4 <plug_holes+0x12c>)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	881a      	ldrh	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <plug_holes+0x10c>)
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	1a99      	subs	r1, r3, r2
 8007e24:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <plug_holes+0x10c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	b28a      	uxth	r2, r1
 8007e30:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8007e32:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <plug_holes+0x10c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	8852      	ldrh	r2, [r2, #2]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d01a      	beq.n	8007e7c <plug_holes+0x104>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	791b      	ldrb	r3, [r3, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d116      	bne.n	8007e7c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007e4e:	4b15      	ldr	r3, [pc, #84]	; (8007ea4 <plug_holes+0x12c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d102      	bne.n	8007e5e <plug_holes+0xe6>
      lfree = pmem;
 8007e58:	4a12      	ldr	r2, [pc, #72]	; (8007ea4 <plug_holes+0x12c>)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	881a      	ldrh	r2, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	4a06      	ldr	r2, [pc, #24]	; (8007e84 <plug_holes+0x10c>)
 8007e6a:	6812      	ldr	r2, [r2, #0]
 8007e6c:	1a99      	subs	r1, r3, r2
 8007e6e:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <plug_holes+0x10c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	8812      	ldrh	r2, [r2, #0]
 8007e76:	4413      	add	r3, r2
 8007e78:	b28a      	uxth	r2, r1
 8007e7a:	805a      	strh	r2, [r3, #2]
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000210 	.word	0x20000210
 8007e88:	080164c8 	.word	0x080164c8
 8007e8c:	080164f8 	.word	0x080164f8
 8007e90:	08016510 	.word	0x08016510
 8007e94:	20000214 	.word	0x20000214
 8007e98:	08016538 	.word	0x08016538
 8007e9c:	08016554 	.word	0x08016554
 8007ea0:	08016570 	.word	0x08016570
 8007ea4:	20000218 	.word	0x20000218

08007ea8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007eae:	4b19      	ldr	r3, [pc, #100]	; (8007f14 <mem_init+0x6c>)
 8007eb0:	3303      	adds	r3, #3
 8007eb2:	f023 0303 	bic.w	r3, r3, #3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <mem_init+0x70>)
 8007eba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007ebc:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <mem_init+0x70>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007ec8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007ed6:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <mem_init+0x70>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8007ede:	4a0f      	ldr	r2, [pc, #60]	; (8007f1c <mem_init+0x74>)
 8007ee0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007ee2:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <mem_init+0x74>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007eea:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <mem_init+0x74>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007ef2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007ef4:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <mem_init+0x74>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007efc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007efe:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <mem_init+0x70>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a07      	ldr	r2, [pc, #28]	; (8007f20 <mem_init+0x78>)
 8007f04:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	200003b8 	.word	0x200003b8
 8007f18:	20000210 	.word	0x20000210
 8007f1c:	20000214 	.word	0x20000214
 8007f20:	20000218 	.word	0x20000218

08007f24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d043      	beq.n	8007fba <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <mem_free+0x26>
 8007f3c:	4b22      	ldr	r3, [pc, #136]	; (8007fc8 <mem_free+0xa4>)
 8007f3e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8007f42:	4922      	ldr	r1, [pc, #136]	; (8007fcc <mem_free+0xa8>)
 8007f44:	4822      	ldr	r0, [pc, #136]	; (8007fd0 <mem_free+0xac>)
 8007f46:	f00d fbdf 	bl	8015708 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007f4a:	4b22      	ldr	r3, [pc, #136]	; (8007fd4 <mem_free+0xb0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d304      	bcc.n	8007f5e <mem_free+0x3a>
 8007f54:	4b20      	ldr	r3, [pc, #128]	; (8007fd8 <mem_free+0xb4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d306      	bcc.n	8007f6c <mem_free+0x48>
 8007f5e:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <mem_free+0xa4>)
 8007f60:	f240 12af 	movw	r2, #431	; 0x1af
 8007f64:	491d      	ldr	r1, [pc, #116]	; (8007fdc <mem_free+0xb8>)
 8007f66:	481a      	ldr	r0, [pc, #104]	; (8007fd0 <mem_free+0xac>)
 8007f68:	f00d fbce 	bl	8015708 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007f6c:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <mem_free+0xb0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d323      	bcc.n	8007fbe <mem_free+0x9a>
 8007f76:	4b18      	ldr	r3, [pc, #96]	; (8007fd8 <mem_free+0xb4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d21e      	bcs.n	8007fbe <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3b08      	subs	r3, #8
 8007f84:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	791b      	ldrb	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <mem_free+0x78>
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <mem_free+0xa4>)
 8007f90:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007f94:	4912      	ldr	r1, [pc, #72]	; (8007fe0 <mem_free+0xbc>)
 8007f96:	480e      	ldr	r0, [pc, #56]	; (8007fd0 <mem_free+0xac>)
 8007f98:	f00d fbb6 	bl	8015708 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <mem_free+0xc0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d202      	bcs.n	8007fb2 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007fac:	4a0d      	ldr	r2, [pc, #52]	; (8007fe4 <mem_free+0xc0>)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff fee0 	bl	8007d78 <plug_holes>
 8007fb8:	e002      	b.n	8007fc0 <mem_free+0x9c>
    return;
 8007fba:	bf00      	nop
 8007fbc:	e000      	b.n	8007fc0 <mem_free+0x9c>
    return;
 8007fbe:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	080164c8 	.word	0x080164c8
 8007fcc:	0801659c 	.word	0x0801659c
 8007fd0:	08016510 	.word	0x08016510
 8007fd4:	20000210 	.word	0x20000210
 8007fd8:	20000214 	.word	0x20000214
 8007fdc:	080165c0 	.word	0x080165c0
 8007fe0:	080165d8 	.word	0x080165d8
 8007fe4:	20000218 	.word	0x20000218

08007fe8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007ff4:	887b      	ldrh	r3, [r7, #2]
 8007ff6:	3303      	adds	r3, #3
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8008000:	887b      	ldrh	r3, [r7, #2]
 8008002:	2b0b      	cmp	r3, #11
 8008004:	d801      	bhi.n	800800a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008006:	230c      	movs	r3, #12
 8008008:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800800a:	887b      	ldrh	r3, [r7, #2]
 800800c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008010:	d901      	bls.n	8008016 <mem_trim+0x2e>
    return NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	e0b1      	b.n	800817a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008016:	4b5b      	ldr	r3, [pc, #364]	; (8008184 <mem_trim+0x19c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	d304      	bcc.n	800802a <mem_trim+0x42>
 8008020:	4b59      	ldr	r3, [pc, #356]	; (8008188 <mem_trim+0x1a0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d306      	bcc.n	8008038 <mem_trim+0x50>
 800802a:	4b58      	ldr	r3, [pc, #352]	; (800818c <mem_trim+0x1a4>)
 800802c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008030:	4957      	ldr	r1, [pc, #348]	; (8008190 <mem_trim+0x1a8>)
 8008032:	4858      	ldr	r0, [pc, #352]	; (8008194 <mem_trim+0x1ac>)
 8008034:	f00d fb68 	bl	8015708 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008038:	4b52      	ldr	r3, [pc, #328]	; (8008184 <mem_trim+0x19c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	429a      	cmp	r2, r3
 8008040:	d304      	bcc.n	800804c <mem_trim+0x64>
 8008042:	4b51      	ldr	r3, [pc, #324]	; (8008188 <mem_trim+0x1a0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	429a      	cmp	r2, r3
 800804a:	d301      	bcc.n	8008050 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	e094      	b.n	800817a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3b08      	subs	r3, #8
 8008054:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	4a4a      	ldr	r2, [pc, #296]	; (8008184 <mem_trim+0x19c>)
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	881a      	ldrh	r2, [r3, #0]
 8008064:	8a7b      	ldrh	r3, [r7, #18]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b08      	subs	r3, #8
 800806c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800806e:	887a      	ldrh	r2, [r7, #2]
 8008070:	8a3b      	ldrh	r3, [r7, #16]
 8008072:	429a      	cmp	r2, r3
 8008074:	d906      	bls.n	8008084 <mem_trim+0x9c>
 8008076:	4b45      	ldr	r3, [pc, #276]	; (800818c <mem_trim+0x1a4>)
 8008078:	f240 2206 	movw	r2, #518	; 0x206
 800807c:	4946      	ldr	r1, [pc, #280]	; (8008198 <mem_trim+0x1b0>)
 800807e:	4845      	ldr	r0, [pc, #276]	; (8008194 <mem_trim+0x1ac>)
 8008080:	f00d fb42 	bl	8015708 <iprintf>
  if (newsize > size) {
 8008084:	887a      	ldrh	r2, [r7, #2]
 8008086:	8a3b      	ldrh	r3, [r7, #16]
 8008088:	429a      	cmp	r2, r3
 800808a:	d901      	bls.n	8008090 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	e074      	b.n	800817a <mem_trim+0x192>
  }
  if (newsize == size) {
 8008090:	887a      	ldrh	r2, [r7, #2]
 8008092:	8a3b      	ldrh	r3, [r7, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	d101      	bne.n	800809c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	e06e      	b.n	800817a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800809c:	4b39      	ldr	r3, [pc, #228]	; (8008184 <mem_trim+0x19c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	8812      	ldrh	r2, [r2, #0]
 80080a4:	4413      	add	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	791b      	ldrb	r3, [r3, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d131      	bne.n	8008114 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80080b6:	8a7a      	ldrh	r2, [r7, #18]
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	4413      	add	r3, r2
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3308      	adds	r3, #8
 80080c0:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80080c2:	4b36      	ldr	r3, [pc, #216]	; (800819c <mem_trim+0x1b4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d105      	bne.n	80080d8 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80080cc:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <mem_trim+0x19c>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	897b      	ldrh	r3, [r7, #10]
 80080d2:	4413      	add	r3, r2
 80080d4:	4a31      	ldr	r2, [pc, #196]	; (800819c <mem_trim+0x1b4>)
 80080d6:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80080d8:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <mem_trim+0x19c>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	897b      	ldrh	r3, [r7, #10]
 80080de:	4413      	add	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	893a      	ldrh	r2, [r7, #8]
 80080ec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8a7a      	ldrh	r2, [r7, #18]
 80080f2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	897a      	ldrh	r2, [r7, #10]
 80080f8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008102:	d039      	beq.n	8008178 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008104:	4b1f      	ldr	r3, [pc, #124]	; (8008184 <mem_trim+0x19c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	8812      	ldrh	r2, [r2, #0]
 800810c:	4413      	add	r3, r2
 800810e:	897a      	ldrh	r2, [r7, #10]
 8008110:	805a      	strh	r2, [r3, #2]
 8008112:	e031      	b.n	8008178 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008114:	887b      	ldrh	r3, [r7, #2]
 8008116:	f103 0214 	add.w	r2, r3, #20
 800811a:	8a3b      	ldrh	r3, [r7, #16]
 800811c:	429a      	cmp	r2, r3
 800811e:	d82b      	bhi.n	8008178 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008120:	8a7a      	ldrh	r2, [r7, #18]
 8008122:	887b      	ldrh	r3, [r7, #2]
 8008124:	4413      	add	r3, r2
 8008126:	b29b      	uxth	r3, r3
 8008128:	3308      	adds	r3, #8
 800812a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800812c:	4b15      	ldr	r3, [pc, #84]	; (8008184 <mem_trim+0x19c>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	897b      	ldrh	r3, [r7, #10]
 8008132:	4413      	add	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8008136:	4b19      	ldr	r3, [pc, #100]	; (800819c <mem_trim+0x1b4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	429a      	cmp	r2, r3
 800813e:	d202      	bcs.n	8008146 <mem_trim+0x15e>
      lfree = mem2;
 8008140:	4a16      	ldr	r2, [pc, #88]	; (800819c <mem_trim+0x1b4>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	881a      	ldrh	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8a7a      	ldrh	r2, [r7, #18]
 8008158:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	897a      	ldrh	r2, [r7, #10]
 800815e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008168:	d006      	beq.n	8008178 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800816a:	4b06      	ldr	r3, [pc, #24]	; (8008184 <mem_trim+0x19c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	8812      	ldrh	r2, [r2, #0]
 8008172:	4413      	add	r3, r2
 8008174:	897a      	ldrh	r2, [r7, #10]
 8008176:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008178:	687b      	ldr	r3, [r7, #4]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000210 	.word	0x20000210
 8008188:	20000214 	.word	0x20000214
 800818c:	080164c8 	.word	0x080164c8
 8008190:	080165ec 	.word	0x080165ec
 8008194:	08016510 	.word	0x08016510
 8008198:	08016604 	.word	0x08016604
 800819c:	20000218 	.word	0x20000218

080081a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <mem_malloc+0x14>
    return NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	e0c8      	b.n	8008346 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	3303      	adds	r3, #3
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80081c0:	88fb      	ldrh	r3, [r7, #6]
 80081c2:	2b0b      	cmp	r3, #11
 80081c4:	d801      	bhi.n	80081ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80081c6:	230c      	movs	r3, #12
 80081c8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081d0:	d901      	bls.n	80081d6 <mem_malloc+0x36>
    return NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e0b7      	b.n	8008346 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80081d6:	4b5e      	ldr	r3, [pc, #376]	; (8008350 <mem_malloc+0x1b0>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	4b5d      	ldr	r3, [pc, #372]	; (8008354 <mem_malloc+0x1b4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	83fb      	strh	r3, [r7, #30]
 80081e4:	e0a7      	b.n	8008336 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80081e6:	4b5b      	ldr	r3, [pc, #364]	; (8008354 <mem_malloc+0x1b4>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	8bfb      	ldrh	r3, [r7, #30]
 80081ec:	4413      	add	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	791b      	ldrb	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f040 8098 	bne.w	800832a <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	8bfb      	ldrh	r3, [r7, #30]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f1a3 0208 	sub.w	r2, r3, #8
 8008208:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800820a:	429a      	cmp	r2, r3
 800820c:	f0c0 808d 	bcc.w	800832a <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	8bfb      	ldrh	r3, [r7, #30]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	f1a3 0208 	sub.w	r2, r3, #8
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	3314      	adds	r3, #20
 8008222:	429a      	cmp	r2, r3
 8008224:	d327      	bcc.n	8008276 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8008226:	8bfa      	ldrh	r2, [r7, #30]
 8008228:	88fb      	ldrh	r3, [r7, #6]
 800822a:	4413      	add	r3, r2
 800822c:	b29b      	uxth	r3, r3
 800822e:	3308      	adds	r3, #8
 8008230:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8008232:	4b48      	ldr	r3, [pc, #288]	; (8008354 <mem_malloc+0x1b4>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	8a7b      	ldrh	r3, [r7, #18]
 8008238:	4413      	add	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	881a      	ldrh	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8bfa      	ldrh	r2, [r7, #30]
 800824e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	8a7a      	ldrh	r2, [r7, #18]
 8008254:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2201      	movs	r2, #1
 800825a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008264:	d00a      	beq.n	800827c <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008266:	4b3b      	ldr	r3, [pc, #236]	; (8008354 <mem_malloc+0x1b4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	8812      	ldrh	r2, [r2, #0]
 800826e:	4413      	add	r3, r2
 8008270:	8a7a      	ldrh	r2, [r7, #18]
 8008272:	805a      	strh	r2, [r3, #2]
 8008274:	e002      	b.n	800827c <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2201      	movs	r2, #1
 800827a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800827c:	4b34      	ldr	r3, [pc, #208]	; (8008350 <mem_malloc+0x1b0>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	429a      	cmp	r2, r3
 8008284:	d127      	bne.n	80082d6 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8008286:	4b32      	ldr	r3, [pc, #200]	; (8008350 <mem_malloc+0x1b0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800828c:	e005      	b.n	800829a <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800828e:	4b31      	ldr	r3, [pc, #196]	; (8008354 <mem_malloc+0x1b4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	8812      	ldrh	r2, [r2, #0]
 8008296:	4413      	add	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	791b      	ldrb	r3, [r3, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <mem_malloc+0x10c>
 80082a2:	4b2d      	ldr	r3, [pc, #180]	; (8008358 <mem_malloc+0x1b8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d1f0      	bne.n	800828e <mem_malloc+0xee>
          }
          lfree = cur;
 80082ac:	4a28      	ldr	r2, [pc, #160]	; (8008350 <mem_malloc+0x1b0>)
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80082b2:	4b27      	ldr	r3, [pc, #156]	; (8008350 <mem_malloc+0x1b0>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b28      	ldr	r3, [pc, #160]	; (8008358 <mem_malloc+0x1b8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d00b      	beq.n	80082d6 <mem_malloc+0x136>
 80082be:	4b24      	ldr	r3, [pc, #144]	; (8008350 <mem_malloc+0x1b0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d006      	beq.n	80082d6 <mem_malloc+0x136>
 80082c8:	4b24      	ldr	r3, [pc, #144]	; (800835c <mem_malloc+0x1bc>)
 80082ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80082ce:	4924      	ldr	r1, [pc, #144]	; (8008360 <mem_malloc+0x1c0>)
 80082d0:	4824      	ldr	r0, [pc, #144]	; (8008364 <mem_malloc+0x1c4>)
 80082d2:	f00d fa19 	bl	8015708 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	4413      	add	r3, r2
 80082dc:	3308      	adds	r3, #8
 80082de:	4a1e      	ldr	r2, [pc, #120]	; (8008358 <mem_malloc+0x1b8>)
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d906      	bls.n	80082f4 <mem_malloc+0x154>
 80082e6:	4b1d      	ldr	r3, [pc, #116]	; (800835c <mem_malloc+0x1bc>)
 80082e8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80082ec:	491e      	ldr	r1, [pc, #120]	; (8008368 <mem_malloc+0x1c8>)
 80082ee:	481d      	ldr	r0, [pc, #116]	; (8008364 <mem_malloc+0x1c4>)
 80082f0:	f00d fa0a 	bl	8015708 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <mem_malloc+0x16c>
 80082fe:	4b17      	ldr	r3, [pc, #92]	; (800835c <mem_malloc+0x1bc>)
 8008300:	f240 22d6 	movw	r2, #726	; 0x2d6
 8008304:	4919      	ldr	r1, [pc, #100]	; (800836c <mem_malloc+0x1cc>)
 8008306:	4817      	ldr	r0, [pc, #92]	; (8008364 <mem_malloc+0x1c4>)
 8008308:	f00d f9fe 	bl	8015708 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d006      	beq.n	8008324 <mem_malloc+0x184>
 8008316:	4b11      	ldr	r3, [pc, #68]	; (800835c <mem_malloc+0x1bc>)
 8008318:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800831c:	4914      	ldr	r1, [pc, #80]	; (8008370 <mem_malloc+0x1d0>)
 800831e:	4811      	ldr	r0, [pc, #68]	; (8008364 <mem_malloc+0x1c4>)
 8008320:	f00d f9f2 	bl	8015708 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	3308      	adds	r3, #8
 8008328:	e00d      	b.n	8008346 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800832a:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <mem_malloc+0x1b4>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	8bfb      	ldrh	r3, [r7, #30]
 8008330:	4413      	add	r3, r2
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008336:	8bfa      	ldrh	r2, [r7, #30]
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800833e:	429a      	cmp	r2, r3
 8008340:	f4ff af51 	bcc.w	80081e6 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000218 	.word	0x20000218
 8008354:	20000210 	.word	0x20000210
 8008358:	20000214 	.word	0x20000214
 800835c:	080164c8 	.word	0x080164c8
 8008360:	08016624 	.word	0x08016624
 8008364:	08016510 	.word	0x08016510
 8008368:	08016640 	.word	0x08016640
 800836c:	08016670 	.word	0x08016670
 8008370:	080166a0 	.word	0x080166a0

08008374 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	3303      	adds	r3, #3
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e011      	b.n	80083ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	885b      	ldrh	r3, [r3, #2]
 80083be:	461a      	mov	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4293      	cmp	r3, r2
 80083c4:	dbe7      	blt.n	8008396 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80083da:	2300      	movs	r3, #0
 80083dc:	80fb      	strh	r3, [r7, #6]
 80083de:	e009      	b.n	80083f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80083e0:	88fb      	ldrh	r3, [r7, #6]
 80083e2:	4a08      	ldr	r2, [pc, #32]	; (8008404 <memp_init+0x30>)
 80083e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff ffc3 	bl	8008374 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	3301      	adds	r3, #1
 80083f2:	80fb      	strh	r3, [r7, #6]
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d9f2      	bls.n	80083e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	08018838 	.word	0x08018838

08008408 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d012      	beq.n	8008444 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d006      	beq.n	8008440 <do_memp_malloc_pool+0x38>
 8008432:	4b07      	ldr	r3, [pc, #28]	; (8008450 <do_memp_malloc_pool+0x48>)
 8008434:	f240 1249 	movw	r2, #329	; 0x149
 8008438:	4906      	ldr	r1, [pc, #24]	; (8008454 <do_memp_malloc_pool+0x4c>)
 800843a:	4807      	ldr	r0, [pc, #28]	; (8008458 <do_memp_malloc_pool+0x50>)
 800843c:	f00d f964 	bl	8015708 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	e000      	b.n	8008446 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	080166c4 	.word	0x080166c4
 8008454:	080166f4 	.word	0x080166f4
 8008458:	08016718 	.word	0x08016718

0800845c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008466:	79fb      	ldrb	r3, [r7, #7]
 8008468:	2b08      	cmp	r3, #8
 800846a:	d908      	bls.n	800847e <memp_malloc+0x22>
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <memp_malloc+0x3c>)
 800846e:	f240 1287 	movw	r2, #391	; 0x187
 8008472:	490a      	ldr	r1, [pc, #40]	; (800849c <memp_malloc+0x40>)
 8008474:	480a      	ldr	r0, [pc, #40]	; (80084a0 <memp_malloc+0x44>)
 8008476:	f00d f947 	bl	8015708 <iprintf>
 800847a:	2300      	movs	r3, #0
 800847c:	e008      	b.n	8008490 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	4a08      	ldr	r2, [pc, #32]	; (80084a4 <memp_malloc+0x48>)
 8008482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff ffbe 	bl	8008408 <do_memp_malloc_pool>
 800848c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800848e:	68fb      	ldr	r3, [r7, #12]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	080166c4 	.word	0x080166c4
 800849c:	08016754 	.word	0x08016754
 80084a0:	08016718 	.word	0x08016718
 80084a4:	08018838 	.word	0x08018838

080084a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	f003 0303 	and.w	r3, r3, #3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d006      	beq.n	80084ca <do_memp_free_pool+0x22>
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <do_memp_free_pool+0x40>)
 80084be:	f240 129d 	movw	r2, #413	; 0x19d
 80084c2:	490a      	ldr	r1, [pc, #40]	; (80084ec <do_memp_free_pool+0x44>)
 80084c4:	480a      	ldr	r0, [pc, #40]	; (80084f0 <do_memp_free_pool+0x48>)
 80084c6:	f00d f91f 	bl	8015708 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	080166c4 	.word	0x080166c4
 80084ec:	08016774 	.word	0x08016774
 80084f0:	08016718 	.word	0x08016718

080084f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b08      	cmp	r3, #8
 8008504:	d907      	bls.n	8008516 <memp_free+0x22>
 8008506:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <memp_free+0x44>)
 8008508:	f240 12db 	movw	r2, #475	; 0x1db
 800850c:	490b      	ldr	r1, [pc, #44]	; (800853c <memp_free+0x48>)
 800850e:	480c      	ldr	r0, [pc, #48]	; (8008540 <memp_free+0x4c>)
 8008510:	f00d f8fa 	bl	8015708 <iprintf>
 8008514:	e00c      	b.n	8008530 <memp_free+0x3c>

  if (mem == NULL) {
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	4a09      	ldr	r2, [pc, #36]	; (8008544 <memp_free+0x50>)
 8008520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff ffbe 	bl	80084a8 <do_memp_free_pool>
 800852c:	e000      	b.n	8008530 <memp_free+0x3c>
    return;
 800852e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	080166c4 	.word	0x080166c4
 800853c:	08016794 	.word	0x08016794
 8008540:	08016718 	.word	0x08016718
 8008544:	08018838 	.word	0x08018838

08008548 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <netif_add+0x20>
 800856c:	4b23      	ldr	r3, [pc, #140]	; (80085fc <netif_add+0xa4>)
 800856e:	22fb      	movs	r2, #251	; 0xfb
 8008570:	4923      	ldr	r1, [pc, #140]	; (8008600 <netif_add+0xa8>)
 8008572:	4824      	ldr	r0, [pc, #144]	; (8008604 <netif_add+0xac>)
 8008574:	f00d f8c8 	bl	8015708 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3320      	adds	r3, #32
 8008596:	2204      	movs	r2, #4
 8008598:	2100      	movs	r1, #0
 800859a:	4618      	mov	r0, r3
 800859c:	f00d f804 	bl	80155a8 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2203      	movs	r2, #3
 80085a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80085ae:	4b16      	ldr	r3, [pc, #88]	; (8008608 <netif_add+0xb0>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	b2d1      	uxtb	r1, r2
 80085b6:	4a14      	ldr	r2, [pc, #80]	; (8008608 <netif_add+0xb0>)
 80085b8:	7011      	strb	r1, [r2, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a3a      	ldr	r2, [r7, #32]
 80085c4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f81f 	bl	8008610 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	4798      	blx	r3
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <netif_add+0x8a>
    return NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	e007      	b.n	80085f2 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <netif_add+0xb4>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80085ea:	4a08      	ldr	r2, [pc, #32]	; (800860c <netif_add+0xb4>)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80085f0:	68fb      	ldr	r3, [r7, #12]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	080167b0 	.word	0x080167b0
 8008600:	080167e4 	.word	0x080167e4
 8008604:	080167fc 	.word	0x080167fc
 8008608:	20000240 	.word	0x20000240
 800860c:	200038e0 	.word	0x200038e0

08008610 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <netif_set_addr+0x1c>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10c      	bne.n	8008646 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f81a 	bl	8008668 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f862 	bl	8008700 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 f84a 	bl	80086d8 <netif_set_gw>
 8008644:	e00b      	b.n	800865e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f859 	bl	8008700 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f841 	bl	80086d8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f805 	bl	8008668 <netif_set_ipaddr>
  }
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <netif_set_ipaddr+0x18>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	e002      	b.n	8008686 <netif_set_ipaddr+0x1e>
 8008680:	4b14      	ldr	r3, [pc, #80]	; (80086d4 <netif_set_ipaddr+0x6c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3304      	adds	r3, #4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d01c      	beq.n	80086cc <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3304      	adds	r3, #4
 8008696:	f107 020c 	add.w	r2, r7, #12
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f002 fabb 	bl	800ac18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3304      	adds	r3, #4
 80086a6:	f107 020c 	add.w	r2, r7, #12
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f006 fcb1 	bl	800f014 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <netif_set_ipaddr+0x56>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	e000      	b.n	80086c0 <netif_set_ipaddr+0x58>
 80086be:	2300      	movs	r3, #0
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80086c4:	2101      	movs	r1, #1
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f861 	bl	800878e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	080188ac 	.word	0x080188ac

080086d8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <netif_set_gw+0x16>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	e000      	b.n	80086f0 <netif_set_gw+0x18>
 80086ee:	2300      	movs	r3, #0
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <netif_set_netmask+0x16>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	e000      	b.n	8008718 <netif_set_netmask+0x18>
 8008716:	2300      	movs	r3, #0
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008730:	4a04      	ldr	r2, [pc, #16]	; (8008744 <netif_set_default+0x1c>)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	200038e4 	.word	0x200038e4

08008748 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d113      	bne.n	8008786 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008764:	f043 0301 	orr.w	r3, r3, #1
 8008768:	b2da      	uxtb	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800877e:	2103      	movs	r1, #3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f804 	bl	800878e <netif_issue_reports>
    }
  }
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d011      	beq.n	80087c8 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3304      	adds	r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f008 fcbc 	bl	8011140 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d012      	beq.n	800880c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087fe:	f003 0308 	and.w	r3, r3, #8
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f008 f85c 	bl	80108c4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800881a:	4b0e      	ldr	r3, [pc, #56]	; (8008854 <pbuf_free_ooseq+0x40>)
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008820:	4b0d      	ldr	r3, [pc, #52]	; (8008858 <pbuf_free_ooseq+0x44>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	e00f      	b.n	8008848 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008834:	4618      	mov	r0, r3
 8008836:	f001 fe62 	bl	800a4fe <tcp_segs_free>
      pcb->ooseq = NULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8008840:	e005      	b.n	800884e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	607b      	str	r3, [r7, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1ec      	bne.n	8008828 <pbuf_free_ooseq+0x14>
    }
  }
}
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	200038e8 	.word	0x200038e8
 8008858:	200038f0 	.word	0x200038f0

0800885c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008860:	4b03      	ldr	r3, [pc, #12]	; (8008870 <pbuf_pool_is_empty+0x14>)
 8008862:	2201      	movs	r2, #1
 8008864:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008866:	bf00      	nop
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	200038e8 	.word	0x200038e8

08008874 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
 800887e:	460b      	mov	r3, r1
 8008880:	80bb      	strh	r3, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	2b04      	cmp	r3, #4
 800888a:	d81c      	bhi.n	80088c6 <pbuf_alloc+0x52>
 800888c:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <pbuf_alloc+0x20>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088a9 	.word	0x080088a9
 8008898:	080088af 	.word	0x080088af
 800889c:	080088b5 	.word	0x080088b5
 80088a0:	080088bb 	.word	0x080088bb
 80088a4:	080088c1 	.word	0x080088c1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80088a8:	2336      	movs	r3, #54	; 0x36
 80088aa:	82fb      	strh	r3, [r7, #22]
    break;
 80088ac:	e014      	b.n	80088d8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80088ae:	2322      	movs	r3, #34	; 0x22
 80088b0:	82fb      	strh	r3, [r7, #22]
    break;
 80088b2:	e011      	b.n	80088d8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80088b4:	230e      	movs	r3, #14
 80088b6:	82fb      	strh	r3, [r7, #22]
    break;
 80088b8:	e00e      	b.n	80088d8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80088ba:	2300      	movs	r3, #0
 80088bc:	82fb      	strh	r3, [r7, #22]
    break;
 80088be:	e00b      	b.n	80088d8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	82fb      	strh	r3, [r7, #22]
    break;
 80088c4:	e008      	b.n	80088d8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80088c6:	4ba5      	ldr	r3, [pc, #660]	; (8008b5c <pbuf_alloc+0x2e8>)
 80088c8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80088cc:	49a4      	ldr	r1, [pc, #656]	; (8008b60 <pbuf_alloc+0x2ec>)
 80088ce:	48a5      	ldr	r0, [pc, #660]	; (8008b64 <pbuf_alloc+0x2f0>)
 80088d0:	f00c ff1a 	bl	8015708 <iprintf>
    return NULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e15d      	b.n	8008b94 <pbuf_alloc+0x320>
  }

  switch (type) {
 80088d8:	79bb      	ldrb	r3, [r7, #6]
 80088da:	2b03      	cmp	r3, #3
 80088dc:	f200 8134 	bhi.w	8008b48 <pbuf_alloc+0x2d4>
 80088e0:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <pbuf_alloc+0x74>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	08008a89 	.word	0x08008a89
 80088ec:	08008b15 	.word	0x08008b15
 80088f0:	08008b15 	.word	0x08008b15
 80088f4:	080088f9 	.word	0x080088f9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80088f8:	2008      	movs	r0, #8
 80088fa:	f7ff fdaf 	bl	800845c <memp_malloc>
 80088fe:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8008906:	f7ff ffa9 	bl	800885c <pbuf_pool_is_empty>
      return NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	e142      	b.n	8008b94 <pbuf_alloc+0x320>
    }
    p->type = type;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	79ba      	ldrb	r2, [r7, #6]
 8008912:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800891a:	8afb      	ldrh	r3, [r7, #22]
 800891c:	3310      	adds	r3, #16
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	4413      	add	r3, r2
 8008922:	3303      	adds	r3, #3
 8008924:	f023 0303 	bic.w	r3, r3, #3
 8008928:	461a      	mov	r2, r3
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d006      	beq.n	8008948 <pbuf_alloc+0xd4>
 800893a:	4b88      	ldr	r3, [pc, #544]	; (8008b5c <pbuf_alloc+0x2e8>)
 800893c:	f240 1229 	movw	r2, #297	; 0x129
 8008940:	4989      	ldr	r1, [pc, #548]	; (8008b68 <pbuf_alloc+0x2f4>)
 8008942:	4888      	ldr	r0, [pc, #544]	; (8008b64 <pbuf_alloc+0x2f0>)
 8008944:	f00c fee0 	bl	8015708 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	88ba      	ldrh	r2, [r7, #4]
 800894c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800894e:	8afb      	ldrh	r3, [r7, #22]
 8008950:	3303      	adds	r3, #3
 8008952:	f023 0303 	bic.w	r3, r3, #3
 8008956:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800895a:	88bb      	ldrh	r3, [r7, #4]
 800895c:	4293      	cmp	r3, r2
 800895e:	bf28      	it	cs
 8008960:	4613      	movcs	r3, r2
 8008962:	b29a      	uxth	r2, r3
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	8952      	ldrh	r2, [r2, #10]
 8008970:	441a      	add	r2, r3
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008978:	429a      	cmp	r2, r3
 800897a:	d906      	bls.n	800898a <pbuf_alloc+0x116>
 800897c:	4b77      	ldr	r3, [pc, #476]	; (8008b5c <pbuf_alloc+0x2e8>)
 800897e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8008982:	497a      	ldr	r1, [pc, #488]	; (8008b6c <pbuf_alloc+0x2f8>)
 8008984:	4877      	ldr	r0, [pc, #476]	; (8008b64 <pbuf_alloc+0x2f0>)
 8008986:	f00c febf 	bl	8015708 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800898a:	8afb      	ldrh	r3, [r7, #22]
 800898c:	3303      	adds	r3, #3
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008996:	d106      	bne.n	80089a6 <pbuf_alloc+0x132>
 8008998:	4b70      	ldr	r3, [pc, #448]	; (8008b5c <pbuf_alloc+0x2e8>)
 800899a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800899e:	4974      	ldr	r1, [pc, #464]	; (8008b70 <pbuf_alloc+0x2fc>)
 80089a0:	4870      	ldr	r0, [pc, #448]	; (8008b64 <pbuf_alloc+0x2f0>)
 80089a2:	f00c feb1 	bl	8015708 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	2201      	movs	r2, #1
 80089aa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80089b0:	88bb      	ldrh	r3, [r7, #4]
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	8952      	ldrh	r2, [r2, #10]
 80089b6:	1a9b      	subs	r3, r3, r2
 80089b8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80089ba:	e061      	b.n	8008a80 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80089bc:	2008      	movs	r0, #8
 80089be:	f7ff fd4d 	bl	800845c <memp_malloc>
 80089c2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 80089ca:	f7ff ff47 	bl	800885c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80089ce:	69f8      	ldr	r0, [r7, #28]
 80089d0:	f000 fac2 	bl	8008f58 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	e0dd      	b.n	8008b94 <pbuf_alloc+0x320>
      }
      q->type = type;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	79ba      	ldrb	r2, [r7, #6]
 80089dc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089f6:	4293      	cmp	r3, r2
 80089f8:	dd06      	ble.n	8008a08 <pbuf_alloc+0x194>
 80089fa:	4b58      	ldr	r3, [pc, #352]	; (8008b5c <pbuf_alloc+0x2e8>)
 80089fc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008a00:	495c      	ldr	r1, [pc, #368]	; (8008b74 <pbuf_alloc+0x300>)
 8008a02:	4858      	ldr	r0, [pc, #352]	; (8008b64 <pbuf_alloc+0x2f0>)
 8008a04:	f00c fe80 	bl	8015708 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008a18:	bf28      	it	cs
 8008a1a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f103 0210 	add.w	r2, r3, #16
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d006      	beq.n	8008a48 <pbuf_alloc+0x1d4>
 8008a3a:	4b48      	ldr	r3, [pc, #288]	; (8008b5c <pbuf_alloc+0x2e8>)
 8008a3c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8008a40:	494d      	ldr	r1, [pc, #308]	; (8008b78 <pbuf_alloc+0x304>)
 8008a42:	4848      	ldr	r0, [pc, #288]	; (8008b64 <pbuf_alloc+0x2f0>)
 8008a44:	f00c fe60 	bl	8015708 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	8952      	ldrh	r2, [r2, #10]
 8008a50:	441a      	add	r2, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d906      	bls.n	8008a6a <pbuf_alloc+0x1f6>
 8008a5c:	4b3f      	ldr	r3, [pc, #252]	; (8008b5c <pbuf_alloc+0x2e8>)
 8008a5e:	f240 1255 	movw	r2, #341	; 0x155
 8008a62:	4942      	ldr	r1, [pc, #264]	; (8008b6c <pbuf_alloc+0x2f8>)
 8008a64:	483f      	ldr	r0, [pc, #252]	; (8008b64 <pbuf_alloc+0x2f0>)
 8008a66:	f00c fe4f 	bl	8015708 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	895b      	ldrh	r3, [r3, #10]
 8008a74:	461a      	mov	r2, r3
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc9a      	bgt.n	80089bc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008a86:	e07e      	b.n	8008b86 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8008a88:	8afb      	ldrh	r3, [r7, #22]
 8008a8a:	3313      	adds	r3, #19
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	88bb      	ldrh	r3, [r7, #4]
 8008a96:	3303      	adds	r3, #3
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8008aa4:	897a      	ldrh	r2, [r7, #10]
 8008aa6:	88bb      	ldrh	r3, [r7, #4]
 8008aa8:	3303      	adds	r3, #3
 8008aaa:	f023 0303 	bic.w	r3, r3, #3
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d201      	bcs.n	8008ab6 <pbuf_alloc+0x242>
        return NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e06e      	b.n	8008b94 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008ab6:	897b      	ldrh	r3, [r7, #10]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fb71 	bl	80081a0 <mem_malloc>
 8008abe:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <pbuf_alloc+0x256>
      return NULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e064      	b.n	8008b94 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008aca:	8afb      	ldrh	r3, [r7, #22]
 8008acc:	3310      	adds	r3, #16
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	3303      	adds	r3, #3
 8008ad4:	f023 0303 	bic.w	r3, r3, #3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	88ba      	ldrh	r2, [r7, #4]
 8008ae2:	811a      	strh	r2, [r3, #8]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	891a      	ldrh	r2, [r3, #8]
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	79ba      	ldrb	r2, [r7, #6]
 8008af6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d03f      	beq.n	8008b84 <pbuf_alloc+0x310>
 8008b04:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <pbuf_alloc+0x2e8>)
 8008b06:	f240 1277 	movw	r2, #375	; 0x177
 8008b0a:	491c      	ldr	r1, [pc, #112]	; (8008b7c <pbuf_alloc+0x308>)
 8008b0c:	4815      	ldr	r0, [pc, #84]	; (8008b64 <pbuf_alloc+0x2f0>)
 8008b0e:	f00c fdfb 	bl	8015708 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8008b12:	e037      	b.n	8008b84 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008b14:	2007      	movs	r0, #7
 8008b16:	f7ff fca1 	bl	800845c <memp_malloc>
 8008b1a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e036      	b.n	8008b94 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	88ba      	ldrh	r2, [r7, #4]
 8008b30:	811a      	strh	r2, [r3, #8]
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	891a      	ldrh	r2, [r3, #8]
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	79ba      	ldrb	r2, [r7, #6]
 8008b44:	731a      	strb	r2, [r3, #12]
    break;
 8008b46:	e01e      	b.n	8008b86 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008b48:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <pbuf_alloc+0x2e8>)
 8008b4a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008b4e:	490c      	ldr	r1, [pc, #48]	; (8008b80 <pbuf_alloc+0x30c>)
 8008b50:	4804      	ldr	r0, [pc, #16]	; (8008b64 <pbuf_alloc+0x2f0>)
 8008b52:	f00c fdd9 	bl	8015708 <iprintf>
    return NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e01c      	b.n	8008b94 <pbuf_alloc+0x320>
 8008b5a:	bf00      	nop
 8008b5c:	08016824 	.word	0x08016824
 8008b60:	08016854 	.word	0x08016854
 8008b64:	08016870 	.word	0x08016870
 8008b68:	08016898 	.word	0x08016898
 8008b6c:	080168c8 	.word	0x080168c8
 8008b70:	080168fc 	.word	0x080168fc
 8008b74:	08016930 	.word	0x08016930
 8008b78:	08016944 	.word	0x08016944
 8008b7c:	08016974 	.word	0x08016974
 8008b80:	080169a0 	.word	0x080169a0
    break;
 8008b84:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008b92:	69fb      	ldr	r3, [r7, #28]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3720      	adds	r7, #32
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	71fb      	strb	r3, [r7, #7]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	80bb      	strh	r3, [r7, #4]
 8008bac:	4613      	mov	r3, r2
 8008bae:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d81b      	bhi.n	8008bee <pbuf_alloced_custom+0x52>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <pbuf_alloced_custom+0x20>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bd1 	.word	0x08008bd1
 8008bc0:	08008bd7 	.word	0x08008bd7
 8008bc4:	08008bdd 	.word	0x08008bdd
 8008bc8:	08008be3 	.word	0x08008be3
 8008bcc:	08008be9 	.word	0x08008be9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008bd0:	2336      	movs	r3, #54	; 0x36
 8008bd2:	81fb      	strh	r3, [r7, #14]
    break;
 8008bd4:	e014      	b.n	8008c00 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008bd6:	2322      	movs	r3, #34	; 0x22
 8008bd8:	81fb      	strh	r3, [r7, #14]
    break;
 8008bda:	e011      	b.n	8008c00 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008bdc:	230e      	movs	r3, #14
 8008bde:	81fb      	strh	r3, [r7, #14]
    break;
 8008be0:	e00e      	b.n	8008c00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008be2:	2300      	movs	r3, #0
 8008be4:	81fb      	strh	r3, [r7, #14]
    break;
 8008be6:	e00b      	b.n	8008c00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	81fb      	strh	r3, [r7, #14]
    break;
 8008bec:	e008      	b.n	8008c00 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8008bee:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <pbuf_alloced_custom+0xc8>)
 8008bf0:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008bf4:	491c      	ldr	r1, [pc, #112]	; (8008c68 <pbuf_alloced_custom+0xcc>)
 8008bf6:	481d      	ldr	r0, [pc, #116]	; (8008c6c <pbuf_alloced_custom+0xd0>)
 8008bf8:	f00c fd86 	bl	8015708 <iprintf>
    return NULL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e02d      	b.n	8008c5c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c00:	89fb      	ldrh	r3, [r7, #14]
 8008c02:	3303      	adds	r3, #3
 8008c04:	f023 0203 	bic.w	r2, r3, #3
 8008c08:	88bb      	ldrh	r3, [r7, #4]
 8008c0a:	441a      	add	r2, r3
 8008c0c:	8bbb      	ldrh	r3, [r7, #28]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d901      	bls.n	8008c16 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e022      	b.n	8008c5c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d008      	beq.n	8008c34 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008c22:	89fb      	ldrh	r3, [r7, #14]
 8008c24:	3303      	adds	r3, #3
 8008c26:	f023 0303 	bic.w	r3, r3, #3
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	441a      	add	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	e002      	b.n	8008c3a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2200      	movs	r2, #0
 8008c38:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	88ba      	ldrh	r2, [r7, #4]
 8008c44:	811a      	strh	r2, [r3, #8]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	891a      	ldrh	r2, [r3, #8]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	79ba      	ldrb	r2, [r7, #6]
 8008c52:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2201      	movs	r2, #1
 8008c58:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8008c5a:	683b      	ldr	r3, [r7, #0]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	08016824 	.word	0x08016824
 8008c68:	080169bc 	.word	0x080169bc
 8008c6c:	08016870 	.word	0x08016870

08008c70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d106      	bne.n	8008c90 <pbuf_realloc+0x20>
 8008c82:	4b4b      	ldr	r3, [pc, #300]	; (8008db0 <pbuf_realloc+0x140>)
 8008c84:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008c88:	494a      	ldr	r1, [pc, #296]	; (8008db4 <pbuf_realloc+0x144>)
 8008c8a:	484b      	ldr	r0, [pc, #300]	; (8008db8 <pbuf_realloc+0x148>)
 8008c8c:	f00c fd3c 	bl	8015708 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7b1b      	ldrb	r3, [r3, #12]
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d012      	beq.n	8008cbe <pbuf_realloc+0x4e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7b1b      	ldrb	r3, [r3, #12]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d00e      	beq.n	8008cbe <pbuf_realloc+0x4e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	7b1b      	ldrb	r3, [r3, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <pbuf_realloc+0x4e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7b1b      	ldrb	r3, [r3, #12]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d006      	beq.n	8008cbe <pbuf_realloc+0x4e>
 8008cb0:	4b3f      	ldr	r3, [pc, #252]	; (8008db0 <pbuf_realloc+0x140>)
 8008cb2:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008cb6:	4941      	ldr	r1, [pc, #260]	; (8008dbc <pbuf_realloc+0x14c>)
 8008cb8:	483f      	ldr	r0, [pc, #252]	; (8008db8 <pbuf_realloc+0x148>)
 8008cba:	f00c fd25 	bl	8015708 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	891b      	ldrh	r3, [r3, #8]
 8008cc2:	887a      	ldrh	r2, [r7, #2]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d26f      	bcs.n	8008da8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8008cc8:	887b      	ldrh	r3, [r7, #2]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	8912      	ldrh	r2, [r2, #8]
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008cd2:	887b      	ldrh	r3, [r7, #2]
 8008cd4:	827b      	strh	r3, [r7, #18]
  q = p;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008cda:	e025      	b.n	8008d28 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	895b      	ldrh	r3, [r3, #10]
 8008ce0:	8a7a      	ldrh	r2, [r7, #18]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cec:	4293      	cmp	r3, r2
 8008cee:	dd06      	ble.n	8008cfe <pbuf_realloc+0x8e>
 8008cf0:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <pbuf_realloc+0x140>)
 8008cf2:	f240 220b 	movw	r2, #523	; 0x20b
 8008cf6:	4932      	ldr	r1, [pc, #200]	; (8008dc0 <pbuf_realloc+0x150>)
 8008cf8:	482f      	ldr	r0, [pc, #188]	; (8008db8 <pbuf_realloc+0x148>)
 8008cfa:	f00c fd05 	bl	8015708 <iprintf>
    q->tot_len += (u16_t)grow;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	891a      	ldrh	r2, [r3, #8]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	4413      	add	r3, r2
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <pbuf_realloc+0xb8>
 8008d1a:	4b25      	ldr	r3, [pc, #148]	; (8008db0 <pbuf_realloc+0x140>)
 8008d1c:	f240 220f 	movw	r2, #527	; 0x20f
 8008d20:	4928      	ldr	r1, [pc, #160]	; (8008dc4 <pbuf_realloc+0x154>)
 8008d22:	4825      	ldr	r0, [pc, #148]	; (8008db8 <pbuf_realloc+0x148>)
 8008d24:	f00c fcf0 	bl	8015708 <iprintf>
  while (rem_len > q->len) {
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	895b      	ldrh	r3, [r3, #10]
 8008d2c:	8a7a      	ldrh	r2, [r7, #18]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d8d4      	bhi.n	8008cdc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	7b1b      	ldrb	r3, [r3, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d122      	bne.n	8008d80 <pbuf_realloc+0x110>
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	895b      	ldrh	r3, [r3, #10]
 8008d3e:	8a7a      	ldrh	r2, [r7, #18]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d01d      	beq.n	8008d80 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	7b5b      	ldrb	r3, [r3, #13]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d117      	bne.n	8008d80 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	461a      	mov	r2, r3
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	8a7b      	ldrh	r3, [r7, #18]
 8008d5e:	4413      	add	r3, r2
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	4619      	mov	r1, r3
 8008d64:	6978      	ldr	r0, [r7, #20]
 8008d66:	f7ff f93f 	bl	8007fe8 <mem_trim>
 8008d6a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <pbuf_realloc+0x110>
 8008d72:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <pbuf_realloc+0x140>)
 8008d74:	f240 221d 	movw	r2, #541	; 0x21d
 8008d78:	4913      	ldr	r1, [pc, #76]	; (8008dc8 <pbuf_realloc+0x158>)
 8008d7a:	480f      	ldr	r0, [pc, #60]	; (8008db8 <pbuf_realloc+0x148>)
 8008d7c:	f00c fcc4 	bl	8015708 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	8a7a      	ldrh	r2, [r7, #18]
 8008d84:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	895a      	ldrh	r2, [r3, #10]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f8dc 	bl	8008f58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	e000      	b.n	8008daa <pbuf_realloc+0x13a>
    return;
 8008da8:	bf00      	nop

}
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	08016824 	.word	0x08016824
 8008db4:	080169e0 	.word	0x080169e0
 8008db8:	08016870 	.word	0x08016870
 8008dbc:	080169f8 	.word	0x080169f8
 8008dc0:	08016a14 	.word	0x08016a14
 8008dc4:	08016a28 	.word	0x08016a28
 8008dc8:	08016a40 	.word	0x08016a40

08008dcc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	807b      	strh	r3, [r7, #2]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d106      	bne.n	8008df0 <pbuf_header_impl+0x24>
 8008de2:	4b46      	ldr	r3, [pc, #280]	; (8008efc <pbuf_header_impl+0x130>)
 8008de4:	f240 223f 	movw	r2, #575	; 0x23f
 8008de8:	4945      	ldr	r1, [pc, #276]	; (8008f00 <pbuf_header_impl+0x134>)
 8008dea:	4846      	ldr	r0, [pc, #280]	; (8008f04 <pbuf_header_impl+0x138>)
 8008dec:	f00c fc8c 	bl	8015708 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8008df0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <pbuf_header_impl+0x32>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <pbuf_header_impl+0x36>
    return 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e078      	b.n	8008ef4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8008e02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da10      	bge.n	8008e2c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8008e0a:	887b      	ldrh	r3, [r7, #2]
 8008e0c:	425b      	negs	r3, r3
 8008e0e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	895b      	ldrh	r3, [r3, #10]
 8008e14:	89fa      	ldrh	r2, [r7, #14]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d90a      	bls.n	8008e30 <pbuf_header_impl+0x64>
 8008e1a:	4b38      	ldr	r3, [pc, #224]	; (8008efc <pbuf_header_impl+0x130>)
 8008e1c:	f240 2247 	movw	r2, #583	; 0x247
 8008e20:	4939      	ldr	r1, [pc, #228]	; (8008f08 <pbuf_header_impl+0x13c>)
 8008e22:	4838      	ldr	r0, [pc, #224]	; (8008f04 <pbuf_header_impl+0x138>)
 8008e24:	f00c fc70 	bl	8015708 <iprintf>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e063      	b.n	8008ef4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8008e2c:	887b      	ldrh	r3, [r7, #2]
 8008e2e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7b1b      	ldrb	r3, [r3, #12]
 8008e34:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008e3c:	89bb      	ldrh	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <pbuf_header_impl+0x7c>
 8008e42:	89bb      	ldrh	r3, [r7, #12]
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d112      	bne.n	8008e6e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e50:	425b      	negs	r3, r3
 8008e52:	441a      	add	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3310      	adds	r3, #16
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d238      	bcs.n	8008ed6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e042      	b.n	8008ef4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8008e6e:	89bb      	ldrh	r3, [r7, #12]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d002      	beq.n	8008e7a <pbuf_header_impl+0xae>
 8008e74:	89bb      	ldrh	r3, [r7, #12]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d124      	bne.n	8008ec4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008e7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da0d      	bge.n	8008e9e <pbuf_header_impl+0xd2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	895b      	ldrh	r3, [r3, #10]
 8008e86:	89fa      	ldrh	r2, [r7, #14]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d808      	bhi.n	8008e9e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e94:	425b      	negs	r3, r3
 8008e96:	441a      	add	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	605a      	str	r2, [r3, #4]
 8008e9c:	e011      	b.n	8008ec2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8008e9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	dd0b      	ble.n	8008ebe <pbuf_header_impl+0xf2>
 8008ea6:	787b      	ldrb	r3, [r7, #1]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008eb4:	425b      	negs	r3, r3
 8008eb6:	441a      	add	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]
 8008ebc:	e001      	b.n	8008ec2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e018      	b.n	8008ef4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008ec2:	e008      	b.n	8008ed6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <pbuf_header_impl+0x130>)
 8008ec6:	f240 2277 	movw	r2, #631	; 0x277
 8008eca:	4910      	ldr	r1, [pc, #64]	; (8008f0c <pbuf_header_impl+0x140>)
 8008ecc:	480d      	ldr	r0, [pc, #52]	; (8008f04 <pbuf_header_impl+0x138>)
 8008ece:	f00c fc1b 	bl	8015708 <iprintf>
    return 1;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e00e      	b.n	8008ef4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	895a      	ldrh	r2, [r3, #10]
 8008eda:	887b      	ldrh	r3, [r7, #2]
 8008edc:	4413      	add	r3, r2
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	891a      	ldrh	r2, [r3, #8]
 8008ee8:	887b      	ldrh	r3, [r7, #2]
 8008eea:	4413      	add	r3, r2
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	08016824 	.word	0x08016824
 8008f00:	08016a5c 	.word	0x08016a5c
 8008f04:	08016870 	.word	0x08016870
 8008f08:	08016a68 	.word	0x08016a68
 8008f0c:	08016a88 	.word	0x08016a88

08008f10 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8008f1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f20:	2200      	movs	r2, #0
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff ff51 	bl	8008dcc <pbuf_header_impl>
 8008f2a:	4603      	mov	r3, r0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8008f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f44:	2201      	movs	r2, #1
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ff3f 	bl	8008dcc <pbuf_header_impl>
 8008f4e:	4603      	mov	r3, r0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10b      	bne.n	8008f7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d106      	bne.n	8008f7a <pbuf_free+0x22>
 8008f6c:	4b3e      	ldr	r3, [pc, #248]	; (8009068 <pbuf_free+0x110>)
 8008f6e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008f72:	493e      	ldr	r1, [pc, #248]	; (800906c <pbuf_free+0x114>)
 8008f74:	483e      	ldr	r0, [pc, #248]	; (8009070 <pbuf_free+0x118>)
 8008f76:	f00c fbc7 	bl	8015708 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e070      	b.n	8009060 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	7b1b      	ldrb	r3, [r3, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d012      	beq.n	8008fac <pbuf_free+0x54>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7b1b      	ldrb	r3, [r3, #12]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d00e      	beq.n	8008fac <pbuf_free+0x54>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	7b1b      	ldrb	r3, [r3, #12]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d00a      	beq.n	8008fac <pbuf_free+0x54>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7b1b      	ldrb	r3, [r3, #12]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d006      	beq.n	8008fac <pbuf_free+0x54>
 8008f9e:	4b32      	ldr	r3, [pc, #200]	; (8009068 <pbuf_free+0x110>)
 8008fa0:	f240 22de 	movw	r2, #734	; 0x2de
 8008fa4:	4933      	ldr	r1, [pc, #204]	; (8009074 <pbuf_free+0x11c>)
 8008fa6:	4832      	ldr	r0, [pc, #200]	; (8009070 <pbuf_free+0x118>)
 8008fa8:	f00c fbae 	bl	8015708 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008fb0:	e052      	b.n	8009058 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	89db      	ldrh	r3, [r3, #14]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <pbuf_free+0x70>
 8008fba:	4b2b      	ldr	r3, [pc, #172]	; (8009068 <pbuf_free+0x110>)
 8008fbc:	f240 22eb 	movw	r2, #747	; 0x2eb
 8008fc0:	492d      	ldr	r1, [pc, #180]	; (8009078 <pbuf_free+0x120>)
 8008fc2:	482b      	ldr	r0, [pc, #172]	; (8009070 <pbuf_free+0x118>)
 8008fc4:	f00c fba0 	bl	8015708 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	89db      	ldrh	r3, [r3, #14]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	81da      	strh	r2, [r3, #14]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	89db      	ldrh	r3, [r3, #14]
 8008fd8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008fda:	8abb      	ldrh	r3, [r7, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d139      	bne.n	8009054 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7b1b      	ldrb	r3, [r3, #12]
 8008fea:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	7b5b      	ldrb	r3, [r3, #13]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d011      	beq.n	800901c <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <pbuf_free+0xba>
 8009004:	4b18      	ldr	r3, [pc, #96]	; (8009068 <pbuf_free+0x110>)
 8009006:	f240 22f9 	movw	r2, #761	; 0x2f9
 800900a:	491c      	ldr	r1, [pc, #112]	; (800907c <pbuf_free+0x124>)
 800900c:	4818      	ldr	r0, [pc, #96]	; (8009070 <pbuf_free+0x118>)
 800900e:	f00c fb7b 	bl	8015708 <iprintf>
        pc->custom_free_function(p);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
 800901a:	e015      	b.n	8009048 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800901c:	89fb      	ldrh	r3, [r7, #14]
 800901e:	2b03      	cmp	r3, #3
 8009020:	d104      	bne.n	800902c <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	2008      	movs	r0, #8
 8009026:	f7ff fa65 	bl	80084f4 <memp_free>
 800902a:	e00d      	b.n	8009048 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800902c:	89fb      	ldrh	r3, [r7, #14]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d002      	beq.n	8009038 <pbuf_free+0xe0>
 8009032:	89fb      	ldrh	r3, [r7, #14]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d104      	bne.n	8009042 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	2007      	movs	r0, #7
 800903c:	f7ff fa5a 	bl	80084f4 <memp_free>
 8009040:	e002      	b.n	8009048 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7fe ff6e 	bl	8007f24 <mem_free>
        }
      }
      count++;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	3301      	adds	r3, #1
 800904c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	e001      	b.n	8009058 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8009054:	2300      	movs	r3, #0
 8009056:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1a9      	bne.n	8008fb2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	08016824 	.word	0x08016824
 800906c:	08016a5c 	.word	0x08016a5c
 8009070:	08016870 	.word	0x08016870
 8009074:	08016a98 	.word	0x08016a98
 8009078:	08016ab0 	.word	0x08016ab0
 800907c:	08016ac8 	.word	0x08016ac8

08009080 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800908c:	e005      	b.n	800909a <pbuf_clen+0x1a>
    ++len;
 800908e:	89fb      	ldrh	r3, [r7, #14]
 8009090:	3301      	adds	r3, #1
 8009092:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f6      	bne.n	800908e <pbuf_clen+0xe>
  }
  return len;
 80090a0:	89fb      	ldrh	r3, [r7, #14]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d010      	beq.n	80090e0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	89db      	ldrh	r3, [r3, #14]
 80090c2:	3301      	adds	r3, #1
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	89db      	ldrh	r3, [r3, #14]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d106      	bne.n	80090e0 <pbuf_ref+0x30>
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <pbuf_ref+0x38>)
 80090d4:	f240 3239 	movw	r2, #825	; 0x339
 80090d8:	4904      	ldr	r1, [pc, #16]	; (80090ec <pbuf_ref+0x3c>)
 80090da:	4805      	ldr	r0, [pc, #20]	; (80090f0 <pbuf_ref+0x40>)
 80090dc:	f00c fb14 	bl	8015708 <iprintf>
  }
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	08016824 	.word	0x08016824
 80090ec:	08016aec 	.word	0x08016aec
 80090f0:	08016870 	.word	0x08016870

080090f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <pbuf_cat+0x16>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d107      	bne.n	800911a <pbuf_cat+0x26>
 800910a:	4b20      	ldr	r3, [pc, #128]	; (800918c <pbuf_cat+0x98>)
 800910c:	f240 324d 	movw	r2, #845	; 0x34d
 8009110:	491f      	ldr	r1, [pc, #124]	; (8009190 <pbuf_cat+0x9c>)
 8009112:	4820      	ldr	r0, [pc, #128]	; (8009194 <pbuf_cat+0xa0>)
 8009114:	f00c faf8 	bl	8015708 <iprintf>
 8009118:	e034      	b.n	8009184 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	e00a      	b.n	8009136 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	891a      	ldrh	r2, [r3, #8]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	891b      	ldrh	r3, [r3, #8]
 8009128:	4413      	add	r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f0      	bne.n	8009120 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	891a      	ldrh	r2, [r3, #8]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	895b      	ldrh	r3, [r3, #10]
 8009146:	429a      	cmp	r2, r3
 8009148:	d006      	beq.n	8009158 <pbuf_cat+0x64>
 800914a:	4b10      	ldr	r3, [pc, #64]	; (800918c <pbuf_cat+0x98>)
 800914c:	f240 3255 	movw	r2, #853	; 0x355
 8009150:	4911      	ldr	r1, [pc, #68]	; (8009198 <pbuf_cat+0xa4>)
 8009152:	4810      	ldr	r0, [pc, #64]	; (8009194 <pbuf_cat+0xa0>)
 8009154:	f00c fad8 	bl	8015708 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d006      	beq.n	800916e <pbuf_cat+0x7a>
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <pbuf_cat+0x98>)
 8009162:	f240 3256 	movw	r2, #854	; 0x356
 8009166:	490d      	ldr	r1, [pc, #52]	; (800919c <pbuf_cat+0xa8>)
 8009168:	480a      	ldr	r0, [pc, #40]	; (8009194 <pbuf_cat+0xa0>)
 800916a:	f00c facd 	bl	8015708 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	891a      	ldrh	r2, [r3, #8]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	891b      	ldrh	r3, [r3, #8]
 8009176:	4413      	add	r3, r2
 8009178:	b29a      	uxth	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	08016824 	.word	0x08016824
 8009190:	08016b00 	.word	0x08016b00
 8009194:	08016870 	.word	0x08016870
 8009198:	08016b38 	.word	0x08016b38
 800919c:	08016b68 	.word	0x08016b68

080091a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff ffa1 	bl	80090f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80091b2:	6838      	ldr	r0, [r7, #0]
 80091b4:	f7ff ff7c 	bl	80090b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80091ca:	2300      	movs	r3, #0
 80091cc:	81fb      	strh	r3, [r7, #14]
 80091ce:	2300      	movs	r3, #0
 80091d0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d008      	beq.n	80091ea <pbuf_copy+0x2a>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <pbuf_copy+0x2a>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	891a      	ldrh	r2, [r3, #8]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	891b      	ldrh	r3, [r3, #8]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d209      	bcs.n	80091fe <pbuf_copy+0x3e>
 80091ea:	4b54      	ldr	r3, [pc, #336]	; (800933c <pbuf_copy+0x17c>)
 80091ec:	f240 32bd 	movw	r2, #957	; 0x3bd
 80091f0:	4953      	ldr	r1, [pc, #332]	; (8009340 <pbuf_copy+0x180>)
 80091f2:	4854      	ldr	r0, [pc, #336]	; (8009344 <pbuf_copy+0x184>)
 80091f4:	f00c fa88 	bl	8015708 <iprintf>
 80091f8:	f06f 030f 	mvn.w	r3, #15
 80091fc:	e099      	b.n	8009332 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	461a      	mov	r2, r3
 8009204:	89fb      	ldrh	r3, [r7, #14]
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	895b      	ldrh	r3, [r3, #10]
 800920c:	4619      	mov	r1, r3
 800920e:	89bb      	ldrh	r3, [r7, #12]
 8009210:	1acb      	subs	r3, r1, r3
 8009212:	429a      	cmp	r2, r3
 8009214:	db05      	blt.n	8009222 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	895a      	ldrh	r2, [r3, #10]
 800921a:	89bb      	ldrh	r3, [r7, #12]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	817b      	strh	r3, [r7, #10]
 8009220:	e004      	b.n	800922c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	895a      	ldrh	r2, [r3, #10]
 8009226:	89fb      	ldrh	r3, [r7, #14]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	18d0      	adds	r0, r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	89bb      	ldrh	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	897a      	ldrh	r2, [r7, #10]
 800923e:	4619      	mov	r1, r3
 8009240:	f00c f9a7 	bl	8015592 <memcpy>
    offset_to += len;
 8009244:	89fa      	ldrh	r2, [r7, #14]
 8009246:	897b      	ldrh	r3, [r7, #10]
 8009248:	4413      	add	r3, r2
 800924a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800924c:	89ba      	ldrh	r2, [r7, #12]
 800924e:	897b      	ldrh	r3, [r7, #10]
 8009250:	4413      	add	r3, r2
 8009252:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	895b      	ldrh	r3, [r3, #10]
 8009258:	89fa      	ldrh	r2, [r7, #14]
 800925a:	429a      	cmp	r2, r3
 800925c:	d906      	bls.n	800926c <pbuf_copy+0xac>
 800925e:	4b37      	ldr	r3, [pc, #220]	; (800933c <pbuf_copy+0x17c>)
 8009260:	f240 32cd 	movw	r2, #973	; 0x3cd
 8009264:	4938      	ldr	r1, [pc, #224]	; (8009348 <pbuf_copy+0x188>)
 8009266:	4837      	ldr	r0, [pc, #220]	; (8009344 <pbuf_copy+0x184>)
 8009268:	f00c fa4e 	bl	8015708 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	895b      	ldrh	r3, [r3, #10]
 8009270:	89ba      	ldrh	r2, [r7, #12]
 8009272:	429a      	cmp	r2, r3
 8009274:	d906      	bls.n	8009284 <pbuf_copy+0xc4>
 8009276:	4b31      	ldr	r3, [pc, #196]	; (800933c <pbuf_copy+0x17c>)
 8009278:	f240 32ce 	movw	r2, #974	; 0x3ce
 800927c:	4933      	ldr	r1, [pc, #204]	; (800934c <pbuf_copy+0x18c>)
 800927e:	4831      	ldr	r0, [pc, #196]	; (8009344 <pbuf_copy+0x184>)
 8009280:	f00c fa42 	bl	8015708 <iprintf>
    if (offset_from >= p_from->len) {
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	895b      	ldrh	r3, [r3, #10]
 8009288:	89ba      	ldrh	r2, [r7, #12]
 800928a:	429a      	cmp	r2, r3
 800928c:	d304      	bcc.n	8009298 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	895b      	ldrh	r3, [r3, #10]
 800929c:	89fa      	ldrh	r2, [r7, #14]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d114      	bne.n	80092cc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10c      	bne.n	80092cc <pbuf_copy+0x10c>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <pbuf_copy+0x10c>
 80092b8:	4b20      	ldr	r3, [pc, #128]	; (800933c <pbuf_copy+0x17c>)
 80092ba:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80092be:	4924      	ldr	r1, [pc, #144]	; (8009350 <pbuf_copy+0x190>)
 80092c0:	4820      	ldr	r0, [pc, #128]	; (8009344 <pbuf_copy+0x184>)
 80092c2:	f00c fa21 	bl	8015708 <iprintf>
 80092c6:	f06f 030f 	mvn.w	r3, #15
 80092ca:	e032      	b.n	8009332 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d013      	beq.n	80092fa <pbuf_copy+0x13a>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	895a      	ldrh	r2, [r3, #10]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	891b      	ldrh	r3, [r3, #8]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d10d      	bne.n	80092fa <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d009      	beq.n	80092fa <pbuf_copy+0x13a>
 80092e6:	4b15      	ldr	r3, [pc, #84]	; (800933c <pbuf_copy+0x17c>)
 80092e8:	f240 32de 	movw	r2, #990	; 0x3de
 80092ec:	4919      	ldr	r1, [pc, #100]	; (8009354 <pbuf_copy+0x194>)
 80092ee:	4815      	ldr	r0, [pc, #84]	; (8009344 <pbuf_copy+0x184>)
 80092f0:	f00c fa0a 	bl	8015708 <iprintf>
 80092f4:	f06f 0305 	mvn.w	r3, #5
 80092f8:	e01b      	b.n	8009332 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d013      	beq.n	8009328 <pbuf_copy+0x168>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	895a      	ldrh	r2, [r3, #10]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	891b      	ldrh	r3, [r3, #8]
 8009308:	429a      	cmp	r2, r3
 800930a:	d10d      	bne.n	8009328 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d009      	beq.n	8009328 <pbuf_copy+0x168>
 8009314:	4b09      	ldr	r3, [pc, #36]	; (800933c <pbuf_copy+0x17c>)
 8009316:	f240 32e3 	movw	r2, #995	; 0x3e3
 800931a:	490e      	ldr	r1, [pc, #56]	; (8009354 <pbuf_copy+0x194>)
 800931c:	4809      	ldr	r0, [pc, #36]	; (8009344 <pbuf_copy+0x184>)
 800931e:	f00c f9f3 	bl	8015708 <iprintf>
 8009322:	f06f 0305 	mvn.w	r3, #5
 8009326:	e004      	b.n	8009332 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f47f af67 	bne.w	80091fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	08016824 	.word	0x08016824
 8009340:	08016bb4 	.word	0x08016bb4
 8009344:	08016870 	.word	0x08016870
 8009348:	08016be4 	.word	0x08016be4
 800934c:	08016bfc 	.word	0x08016bfc
 8009350:	08016c18 	.word	0x08016c18
 8009354:	08016c28 	.word	0x08016c28

08009358 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4611      	mov	r1, r2
 8009364:	461a      	mov	r2, r3
 8009366:	460b      	mov	r3, r1
 8009368:	80fb      	strh	r3, [r7, #6]
 800936a:	4613      	mov	r3, r2
 800936c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d108      	bne.n	800938a <pbuf_copy_partial+0x32>
 8009378:	4b30      	ldr	r3, [pc, #192]	; (800943c <pbuf_copy_partial+0xe4>)
 800937a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800937e:	4930      	ldr	r1, [pc, #192]	; (8009440 <pbuf_copy_partial+0xe8>)
 8009380:	4830      	ldr	r0, [pc, #192]	; (8009444 <pbuf_copy_partial+0xec>)
 8009382:	f00c f9c1 	bl	8015708 <iprintf>
 8009386:	2300      	movs	r3, #0
 8009388:	e054      	b.n	8009434 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d108      	bne.n	80093a2 <pbuf_copy_partial+0x4a>
 8009390:	4b2a      	ldr	r3, [pc, #168]	; (800943c <pbuf_copy_partial+0xe4>)
 8009392:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009396:	492c      	ldr	r1, [pc, #176]	; (8009448 <pbuf_copy_partial+0xf0>)
 8009398:	482a      	ldr	r0, [pc, #168]	; (8009444 <pbuf_copy_partial+0xec>)
 800939a:	f00c f9b5 	bl	8015708 <iprintf>
 800939e:	2300      	movs	r3, #0
 80093a0:	e048      	b.n	8009434 <pbuf_copy_partial+0xdc>

  left = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <pbuf_copy_partial+0x5a>
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <pbuf_copy_partial+0x5e>
    return 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e03e      	b.n	8009434 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	e034      	b.n	8009426 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80093bc:	88bb      	ldrh	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <pbuf_copy_partial+0x80>
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	895b      	ldrh	r3, [r3, #10]
 80093c6:	88ba      	ldrh	r2, [r7, #4]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d305      	bcc.n	80093d8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	895b      	ldrh	r3, [r3, #10]
 80093d0:	88ba      	ldrh	r2, [r7, #4]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	80bb      	strh	r3, [r7, #4]
 80093d6:	e023      	b.n	8009420 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	895a      	ldrh	r2, [r3, #10]
 80093dc:	88bb      	ldrh	r3, [r7, #4]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80093e2:	8b3a      	ldrh	r2, [r7, #24]
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d901      	bls.n	80093ee <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80093ee:	8b7b      	ldrh	r3, [r7, #26]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	18d0      	adds	r0, r2, r3
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	88bb      	ldrh	r3, [r7, #4]
 80093fa:	4413      	add	r3, r2
 80093fc:	8b3a      	ldrh	r2, [r7, #24]
 80093fe:	4619      	mov	r1, r3
 8009400:	f00c f8c7 	bl	8015592 <memcpy>
      copied_total += buf_copy_len;
 8009404:	8afa      	ldrh	r2, [r7, #22]
 8009406:	8b3b      	ldrh	r3, [r7, #24]
 8009408:	4413      	add	r3, r2
 800940a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800940c:	8b7a      	ldrh	r2, [r7, #26]
 800940e:	8b3b      	ldrh	r3, [r7, #24]
 8009410:	4413      	add	r3, r2
 8009412:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8009414:	88fa      	ldrh	r2, [r7, #6]
 8009416:	8b3b      	ldrh	r3, [r7, #24]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <pbuf_copy_partial+0xda>
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1c4      	bne.n	80093bc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8009432:	8afb      	ldrh	r3, [r7, #22]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	08016824 	.word	0x08016824
 8009440:	08016c54 	.word	0x08016c54
 8009444:	08016870 	.word	0x08016870
 8009448:	08016c74 	.word	0x08016c74

0800944c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009450:	bf00      	nop
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
	...

0800945c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009460:	f000 ff80 	bl	800a364 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009464:	4b07      	ldr	r3, [pc, #28]	; (8009484 <tcp_tmr+0x28>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	b2da      	uxtb	r2, r3
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <tcp_tmr+0x28>)
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	4b04      	ldr	r3, [pc, #16]	; (8009484 <tcp_tmr+0x28>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800947c:	f000 fcb2 	bl	8009de4 <tcp_slowtmr>
  }
}
 8009480:	bf00      	nop
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20000241 	.word	0x20000241

08009488 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	e00a      	b.n	80094ae <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d102      	bne.n	80094a8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1f1      	bne.n	8009498 <tcp_remove_listener+0x10>
      }
   }
}
 80094b4:	bf00      	nop
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <tcp_listen_closed+0x1a>
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <tcp_listen_closed+0x5c>)
 80094d0:	22c0      	movs	r2, #192	; 0xc0
 80094d2:	4913      	ldr	r1, [pc, #76]	; (8009520 <tcp_listen_closed+0x60>)
 80094d4:	4813      	ldr	r0, [pc, #76]	; (8009524 <tcp_listen_closed+0x64>)
 80094d6:	f00c f917 	bl	8015708 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7d1b      	ldrb	r3, [r3, #20]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d005      	beq.n	80094ee <tcp_listen_closed+0x2e>
 80094e2:	4b0e      	ldr	r3, [pc, #56]	; (800951c <tcp_listen_closed+0x5c>)
 80094e4:	22c1      	movs	r2, #193	; 0xc1
 80094e6:	4910      	ldr	r1, [pc, #64]	; (8009528 <tcp_listen_closed+0x68>)
 80094e8:	480e      	ldr	r0, [pc, #56]	; (8009524 <tcp_listen_closed+0x64>)
 80094ea:	f00c f90d 	bl	8015708 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80094ee:	2301      	movs	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	e00b      	b.n	800950c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80094f4:	4a0d      	ldr	r2, [pc, #52]	; (800952c <tcp_listen_closed+0x6c>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ffc1 	bl	8009488 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b03      	cmp	r3, #3
 8009510:	d9f0      	bls.n	80094f4 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	08016da8 	.word	0x08016da8
 8009520:	08016dd8 	.word	0x08016dd8
 8009524:	08016de4 	.word	0x08016de4
 8009528:	08016e0c 	.word	0x08016e0c
 800952c:	08018874 	.word	0x08018874

08009530 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009530:	b5b0      	push	{r4, r5, r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af02      	add	r7, sp, #8
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d075      	beq.n	800962e <tcp_close_shutdown+0xfe>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	7d1b      	ldrb	r3, [r3, #20]
 8009546:	2b04      	cmp	r3, #4
 8009548:	d003      	beq.n	8009552 <tcp_close_shutdown+0x22>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7d1b      	ldrb	r3, [r3, #20]
 800954e:	2b07      	cmp	r3, #7
 8009550:	d16d      	bne.n	800962e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009556:	2b00      	cmp	r3, #0
 8009558:	d104      	bne.n	8009564 <tcp_close_shutdown+0x34>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009562:	d064      	beq.n	800962e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7e9b      	ldrb	r3, [r3, #26]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d106      	bne.n	800957e <tcp_close_shutdown+0x4e>
 8009570:	4b59      	ldr	r3, [pc, #356]	; (80096d8 <tcp_close_shutdown+0x1a8>)
 8009572:	f240 120f 	movw	r2, #271	; 0x10f
 8009576:	4959      	ldr	r1, [pc, #356]	; (80096dc <tcp_close_shutdown+0x1ac>)
 8009578:	4859      	ldr	r0, [pc, #356]	; (80096e0 <tcp_close_shutdown+0x1b0>)
 800957a:	f00c f8c5 	bl	8015708 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009586:	687c      	ldr	r4, [r7, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	1d1d      	adds	r5, r3, #4
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	8adb      	ldrh	r3, [r3, #22]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	8b12      	ldrh	r2, [r2, #24]
 8009594:	9201      	str	r2, [sp, #4]
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462b      	mov	r3, r5
 800959a:	4622      	mov	r2, r4
 800959c:	f004 feec 	bl	800e378 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fa1d 	bl	800a9e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80095a6:	4b4f      	ldr	r3, [pc, #316]	; (80096e4 <tcp_close_shutdown+0x1b4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d105      	bne.n	80095bc <tcp_close_shutdown+0x8c>
 80095b0:	4b4c      	ldr	r3, [pc, #304]	; (80096e4 <tcp_close_shutdown+0x1b4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	4a4b      	ldr	r2, [pc, #300]	; (80096e4 <tcp_close_shutdown+0x1b4>)
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	e013      	b.n	80095e4 <tcp_close_shutdown+0xb4>
 80095bc:	4b49      	ldr	r3, [pc, #292]	; (80096e4 <tcp_close_shutdown+0x1b4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	e00c      	b.n	80095de <tcp_close_shutdown+0xae>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d104      	bne.n	80095d8 <tcp_close_shutdown+0xa8>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	60da      	str	r2, [r3, #12]
 80095d6:	e005      	b.n	80095e4 <tcp_close_shutdown+0xb4>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1ef      	bne.n	80095c4 <tcp_close_shutdown+0x94>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	4b3f      	ldr	r3, [pc, #252]	; (80096e8 <tcp_close_shutdown+0x1b8>)
 80095ec:	2201      	movs	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7d1b      	ldrb	r3, [r3, #20]
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d10c      	bne.n	8009612 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	220a      	movs	r2, #10
 80095fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80095fe:	4b3b      	ldr	r3, [pc, #236]	; (80096ec <tcp_close_shutdown+0x1bc>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60da      	str	r2, [r3, #12]
 8009606:	4a39      	ldr	r2, [pc, #228]	; (80096ec <tcp_close_shutdown+0x1bc>)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	f005 f904 	bl	800e818 <tcp_timer_needed>
 8009610:	e00b      	b.n	800962a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8009612:	4b37      	ldr	r3, [pc, #220]	; (80096f0 <tcp_close_shutdown+0x1c0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	429a      	cmp	r2, r3
 800961a:	d102      	bne.n	8009622 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800961c:	f003 fd44 	bl	800d0a8 <tcp_trigger_input_pcb_close>
 8009620:	e003      	b.n	800962a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	2001      	movs	r0, #1
 8009626:	f7fe ff65 	bl	80084f4 <memp_free>
        }
      }
      return ERR_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	e050      	b.n	80096d0 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	7d1b      	ldrb	r3, [r3, #20]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d02e      	beq.n	8009694 <tcp_close_shutdown+0x164>
 8009636:	2b02      	cmp	r3, #2
 8009638:	d038      	beq.n	80096ac <tcp_close_shutdown+0x17c>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d142      	bne.n	80096c4 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	8adb      	ldrh	r3, [r3, #22]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d021      	beq.n	800968a <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009646:	4b2b      	ldr	r3, [pc, #172]	; (80096f4 <tcp_close_shutdown+0x1c4>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d105      	bne.n	800965c <tcp_close_shutdown+0x12c>
 8009650:	4b28      	ldr	r3, [pc, #160]	; (80096f4 <tcp_close_shutdown+0x1c4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	4a27      	ldr	r2, [pc, #156]	; (80096f4 <tcp_close_shutdown+0x1c4>)
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	e013      	b.n	8009684 <tcp_close_shutdown+0x154>
 800965c:	4b25      	ldr	r3, [pc, #148]	; (80096f4 <tcp_close_shutdown+0x1c4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60bb      	str	r3, [r7, #8]
 8009662:	e00c      	b.n	800967e <tcp_close_shutdown+0x14e>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	429a      	cmp	r2, r3
 800966c:	d104      	bne.n	8009678 <tcp_close_shutdown+0x148>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	60da      	str	r2, [r3, #12]
 8009676:	e005      	b.n	8009684 <tcp_close_shutdown+0x154>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	60bb      	str	r3, [r7, #8]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1ef      	bne.n	8009664 <tcp_close_shutdown+0x134>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	2001      	movs	r0, #1
 800968e:	f7fe ff31 	bl	80084f4 <memp_free>
    break;
 8009692:	e01c      	b.n	80096ce <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ff13 	bl	80094c0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4816      	ldr	r0, [pc, #88]	; (80096f8 <tcp_close_shutdown+0x1c8>)
 800969e:	f001 f9e1 	bl	800aa64 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	2002      	movs	r0, #2
 80096a6:	f7fe ff25 	bl	80084f4 <memp_free>
    break;
 80096aa:	e010      	b.n	80096ce <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	480d      	ldr	r0, [pc, #52]	; (80096e4 <tcp_close_shutdown+0x1b4>)
 80096b0:	f001 f9d8 	bl	800aa64 <tcp_pcb_remove>
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <tcp_close_shutdown+0x1b8>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	2001      	movs	r0, #1
 80096be:	f7fe ff19 	bl	80084f4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80096c2:	e004      	b.n	80096ce <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f819 	bl	80096fc <tcp_close_shutdown_fin>
 80096ca:	4603      	mov	r3, r0
 80096cc:	e000      	b.n	80096d0 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bdb0      	pop	{r4, r5, r7, pc}
 80096d8:	08016da8 	.word	0x08016da8
 80096dc:	08016e24 	.word	0x08016e24
 80096e0:	08016de4 	.word	0x08016de4
 80096e4:	200038f0 	.word	0x200038f0
 80096e8:	200038ec 	.word	0x200038ec
 80096ec:	20003900 	.word	0x20003900
 80096f0:	20003904 	.word	0x20003904
 80096f4:	200038fc 	.word	0x200038fc
 80096f8:	200038f8 	.word	0x200038f8

080096fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d106      	bne.n	8009718 <tcp_close_shutdown_fin+0x1c>
 800970a:	4b2c      	ldr	r3, [pc, #176]	; (80097bc <tcp_close_shutdown_fin+0xc0>)
 800970c:	f240 124d 	movw	r2, #333	; 0x14d
 8009710:	492b      	ldr	r1, [pc, #172]	; (80097c0 <tcp_close_shutdown_fin+0xc4>)
 8009712:	482c      	ldr	r0, [pc, #176]	; (80097c4 <tcp_close_shutdown_fin+0xc8>)
 8009714:	f00b fff8 	bl	8015708 <iprintf>

  switch (pcb->state) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7d1b      	ldrb	r3, [r3, #20]
 800971c:	2b04      	cmp	r3, #4
 800971e:	d010      	beq.n	8009742 <tcp_close_shutdown_fin+0x46>
 8009720:	2b07      	cmp	r3, #7
 8009722:	d01b      	beq.n	800975c <tcp_close_shutdown_fin+0x60>
 8009724:	2b03      	cmp	r3, #3
 8009726:	d126      	bne.n	8009776 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f003 fd49 	bl	800d1c0 <tcp_send_fin>
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11f      	bne.n	800977a <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2205      	movs	r2, #5
 800973e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009740:	e01b      	b.n	800977a <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f003 fd3c 	bl	800d1c0 <tcp_send_fin>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800974c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d114      	bne.n	800977e <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2205      	movs	r2, #5
 8009758:	751a      	strb	r2, [r3, #20]
    }
    break;
 800975a:	e010      	b.n	800977e <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f003 fd2f 	bl	800d1c0 <tcp_send_fin>
 8009762:	4603      	mov	r3, r0
 8009764:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2209      	movs	r2, #9
 8009772:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009774:	e005      	b.n	8009782 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	e01c      	b.n	80097b4 <tcp_close_shutdown_fin+0xb8>
    break;
 800977a:	bf00      	nop
 800977c:	e002      	b.n	8009784 <tcp_close_shutdown_fin+0x88>
    break;
 800977e:	bf00      	nop
 8009780:	e000      	b.n	8009784 <tcp_close_shutdown_fin+0x88>
    break;
 8009782:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d103      	bne.n	8009794 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f004 fb69 	bl	800de64 <tcp_output>
 8009792:	e00d      	b.n	80097b0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800979c:	d108      	bne.n	80097b0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	7e9b      	ldrb	r3, [r3, #26]
 80097a2:	f043 0308 	orr.w	r3, r3, #8
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e001      	b.n	80097b4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80097b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	08016da8 	.word	0x08016da8
 80097c0:	08016dd8 	.word	0x08016dd8
 80097c4:	08016de4 	.word	0x08016de4

080097c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	7d1b      	ldrb	r3, [r3, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d006      	beq.n	80097e6 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	7e9b      	ldrb	r3, [r3, #26]
 80097dc:	f043 0310 	orr.w	r3, r3, #16
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80097e6:	2101      	movs	r1, #1
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fea1 	bl	8009530 <tcp_close_shutdown>
 80097ee:	4603      	mov	r3, r0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08c      	sub	sp, #48	; 0x30
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	7d1b      	ldrb	r3, [r3, #20]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d106      	bne.n	8009818 <tcp_abandon+0x20>
 800980a:	4b4d      	ldr	r3, [pc, #308]	; (8009940 <tcp_abandon+0x148>)
 800980c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009810:	494c      	ldr	r1, [pc, #304]	; (8009944 <tcp_abandon+0x14c>)
 8009812:	484d      	ldr	r0, [pc, #308]	; (8009948 <tcp_abandon+0x150>)
 8009814:	f00b ff78 	bl	8015708 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7d1b      	ldrb	r3, [r3, #20]
 800981c:	2b0a      	cmp	r3, #10
 800981e:	d108      	bne.n	8009832 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	484a      	ldr	r0, [pc, #296]	; (800994c <tcp_abandon+0x154>)
 8009824:	f001 f91e 	bl	800aa64 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	2001      	movs	r0, #1
 800982c:	f7fe fe62 	bl	80084f4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8009830:	e081      	b.n	8009936 <tcp_abandon+0x13e>
    int send_rst = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800984c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7d1b      	ldrb	r3, [r3, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d126      	bne.n	80098aa <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8adb      	ldrh	r3, [r3, #22]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d02e      	beq.n	80098c2 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009864:	4b3a      	ldr	r3, [pc, #232]	; (8009950 <tcp_abandon+0x158>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	429a      	cmp	r2, r3
 800986c:	d105      	bne.n	800987a <tcp_abandon+0x82>
 800986e:	4b38      	ldr	r3, [pc, #224]	; (8009950 <tcp_abandon+0x158>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	4a36      	ldr	r2, [pc, #216]	; (8009950 <tcp_abandon+0x158>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	e013      	b.n	80098a2 <tcp_abandon+0xaa>
 800987a:	4b35      	ldr	r3, [pc, #212]	; (8009950 <tcp_abandon+0x158>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	61fb      	str	r3, [r7, #28]
 8009880:	e00c      	b.n	800989c <tcp_abandon+0xa4>
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	429a      	cmp	r2, r3
 800988a:	d104      	bne.n	8009896 <tcp_abandon+0x9e>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	60da      	str	r2, [r3, #12]
 8009894:	e005      	b.n	80098a2 <tcp_abandon+0xaa>
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1ef      	bne.n	8009882 <tcp_abandon+0x8a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	60da      	str	r2, [r3, #12]
 80098a8:	e00b      	b.n	80098c2 <tcp_abandon+0xca>
      send_rst = reset;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	8adb      	ldrh	r3, [r3, #22]
 80098b2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	4827      	ldr	r0, [pc, #156]	; (8009954 <tcp_abandon+0x15c>)
 80098b8:	f001 f8d4 	bl	800aa64 <tcp_pcb_remove>
 80098bc:	4b26      	ldr	r3, [pc, #152]	; (8009958 <tcp_abandon+0x160>)
 80098be:	2201      	movs	r2, #1
 80098c0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fe15 	bl	800a4fe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d004      	beq.n	80098e6 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 fe0c 	bl	800a4fe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fe03 	bl	800a4fe <tcp_segs_free>
    if (send_rst) {
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	1d19      	adds	r1, r3, #4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8b1b      	ldrh	r3, [r3, #24]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	460b      	mov	r3, r1
 8009910:	6979      	ldr	r1, [r7, #20]
 8009912:	69b8      	ldr	r0, [r7, #24]
 8009914:	f004 fd30 	bl	800e378 <tcp_rst>
    last_state = pcb->state;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	7d1b      	ldrb	r3, [r3, #20]
 800991c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	2001      	movs	r0, #1
 8009922:	f7fe fde7 	bl	80084f4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d004      	beq.n	8009936 <tcp_abandon+0x13e>
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f06f 010c 	mvn.w	r1, #12
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	4798      	blx	r3
}
 8009936:	bf00      	nop
 8009938:	3728      	adds	r7, #40	; 0x28
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	08016da8 	.word	0x08016da8
 8009944:	08016e40 	.word	0x08016e40
 8009948:	08016de4 	.word	0x08016de4
 800994c:	20003900 	.word	0x20003900
 8009950:	200038fc 	.word	0x200038fc
 8009954:	200038f0 	.word	0x200038f0
 8009958:	200038ec 	.word	0x200038ec

0800995c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009964:	2101      	movs	r1, #1
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff ff46 	bl	80097f8 <tcp_abandon>
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009982:	2304      	movs	r3, #4
 8009984:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800998c:	4b3c      	ldr	r3, [pc, #240]	; (8009a80 <tcp_bind+0x10c>)
 800998e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <tcp_bind+0x28>
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <tcp_bind+0x2e>
    return ERR_VAL;
 800999c:	f06f 0305 	mvn.w	r3, #5
 80099a0:	e06a      	b.n	8009a78 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	7d1b      	ldrb	r3, [r3, #20]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d009      	beq.n	80099be <tcp_bind+0x4a>
 80099aa:	4b36      	ldr	r3, [pc, #216]	; (8009a84 <tcp_bind+0x110>)
 80099ac:	f44f 7211 	mov.w	r2, #580	; 0x244
 80099b0:	4935      	ldr	r1, [pc, #212]	; (8009a88 <tcp_bind+0x114>)
 80099b2:	4836      	ldr	r0, [pc, #216]	; (8009a8c <tcp_bind+0x118>)
 80099b4:	f00b fea8 	bl	8015708 <iprintf>
 80099b8:	f06f 0305 	mvn.w	r3, #5
 80099bc:	e05c      	b.n	8009a78 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d109      	bne.n	80099d8 <tcp_bind+0x64>
    port = tcp_new_port();
 80099c4:	f000 f9ca 	bl	8009d5c <tcp_new_port>
 80099c8:	4603      	mov	r3, r0
 80099ca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d135      	bne.n	8009a3e <tcp_bind+0xca>
      return ERR_BUF;
 80099d2:	f06f 0301 	mvn.w	r3, #1
 80099d6:	e04f      	b.n	8009a78 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80099d8:	2300      	movs	r3, #0
 80099da:	61fb      	str	r3, [r7, #28]
 80099dc:	e02b      	b.n	8009a36 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80099de:	4a2c      	ldr	r2, [pc, #176]	; (8009a90 <tcp_bind+0x11c>)
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	e01e      	b.n	8009a2a <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	8adb      	ldrh	r3, [r3, #22]
 80099f0:	88fa      	ldrh	r2, [r7, #6]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d116      	bne.n	8009a24 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80099f6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d010      	beq.n	8009a1e <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00c      	beq.n	8009a1e <tcp_bind+0xaa>
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d009      	beq.n	8009a1e <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d005      	beq.n	8009a1e <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d102      	bne.n	8009a24 <tcp_bind+0xb0>
              return ERR_USE;
 8009a1e:	f06f 0307 	mvn.w	r3, #7
 8009a22:	e029      	b.n	8009a78 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1dd      	bne.n	80099ec <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	3301      	adds	r3, #1
 8009a34:	61fb      	str	r3, [r7, #28]
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	dbcf      	blt.n	80099de <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00c      	beq.n	8009a5e <tcp_bind+0xea>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <tcp_bind+0xe4>
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	e000      	b.n	8009a5a <tcp_bind+0xe6>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	88fa      	ldrh	r2, [r7, #6]
 8009a62:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009a64:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <tcp_bind+0x120>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	60da      	str	r2, [r3, #12]
 8009a6c:	4a09      	ldr	r2, [pc, #36]	; (8009a94 <tcp_bind+0x120>)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	f004 fed1 	bl	800e818 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	080188ac 	.word	0x080188ac
 8009a84:	08016da8 	.word	0x08016da8
 8009a88:	08016e74 	.word	0x08016e74
 8009a8c:	08016de4 	.word	0x08016de4
 8009a90:	08018874 	.word	0x08018874
 8009a94:	200038fc 	.word	0x200038fc

08009a98 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8009aa6:	68b8      	ldr	r0, [r7, #8]
 8009aa8:	f7ff ff58 	bl	800995c <tcp_abort>

  return ERR_ABRT;
 8009aac:	f06f 030c 	mvn.w	r3, #12
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f806 	bl	8009adc <tcp_listen_with_backlog_and_err>
 8009ad0:	4603      	mov	r3, r0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	7d1b      	ldrb	r3, [r3, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d009      	beq.n	8009b0a <tcp_listen_with_backlog_and_err+0x2e>
 8009af6:	4b3f      	ldr	r3, [pc, #252]	; (8009bf4 <tcp_listen_with_backlog_and_err+0x118>)
 8009af8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8009afc:	493e      	ldr	r1, [pc, #248]	; (8009bf8 <tcp_listen_with_backlog_and_err+0x11c>)
 8009afe:	483f      	ldr	r0, [pc, #252]	; (8009bfc <tcp_listen_with_backlog_and_err+0x120>)
 8009b00:	f00b fe02 	bl	8015708 <iprintf>
 8009b04:	23f1      	movs	r3, #241	; 0xf1
 8009b06:	76fb      	strb	r3, [r7, #27]
 8009b08:	e069      	b.n	8009bde <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	7d1b      	ldrb	r3, [r3, #20]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d104      	bne.n	8009b1c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009b16:	23f7      	movs	r3, #247	; 0xf7
 8009b18:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009b1a:	e060      	b.n	8009bde <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009b1c:	2002      	movs	r0, #2
 8009b1e:	f7fe fc9d 	bl	800845c <memp_malloc>
 8009b22:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8009b2a:	23ff      	movs	r3, #255	; 0xff
 8009b2c:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009b2e:	e056      	b.n	8009bde <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	691a      	ldr	r2, [r3, #16]
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8ada      	ldrh	r2, [r3, #22]
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	2201      	movs	r2, #1
 8009b44:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	7d5a      	ldrb	r2, [r3, #21]
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	7a1a      	ldrb	r2, [r3, #8]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	7a9a      	ldrb	r2, [r3, #10]
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	7a5a      	ldrb	r2, [r3, #9]
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8adb      	ldrh	r3, [r3, #22]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d021      	beq.n	8009bba <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b76:	4b22      	ldr	r3, [pc, #136]	; (8009c00 <tcp_listen_with_backlog_and_err+0x124>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d105      	bne.n	8009b8c <tcp_listen_with_backlog_and_err+0xb0>
 8009b80:	4b1f      	ldr	r3, [pc, #124]	; (8009c00 <tcp_listen_with_backlog_and_err+0x124>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	4a1e      	ldr	r2, [pc, #120]	; (8009c00 <tcp_listen_with_backlog_and_err+0x124>)
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	e013      	b.n	8009bb4 <tcp_listen_with_backlog_and_err+0xd8>
 8009b8c:	4b1c      	ldr	r3, [pc, #112]	; (8009c00 <tcp_listen_with_backlog_and_err+0x124>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	617b      	str	r3, [r7, #20]
 8009b92:	e00c      	b.n	8009bae <tcp_listen_with_backlog_and_err+0xd2>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d104      	bne.n	8009ba8 <tcp_listen_with_backlog_and_err+0xcc>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	60da      	str	r2, [r3, #12]
 8009ba6:	e005      	b.n	8009bb4 <tcp_listen_with_backlog_and_err+0xd8>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1ef      	bne.n	8009b94 <tcp_listen_with_backlog_and_err+0xb8>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f7fe fc99 	bl	80084f4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4a0f      	ldr	r2, [pc, #60]	; (8009c04 <tcp_listen_with_backlog_and_err+0x128>)
 8009bc6:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009bc8:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <tcp_listen_with_backlog_and_err+0x12c>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	60da      	str	r2, [r3, #12]
 8009bd0:	4a0d      	ldr	r2, [pc, #52]	; (8009c08 <tcp_listen_with_backlog_and_err+0x12c>)
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	f004 fe1f 	bl	800e818 <tcp_timer_needed>
  res = ERR_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	7efa      	ldrb	r2, [r7, #27]
 8009be8:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009bea:	69fb      	ldr	r3, [r7, #28]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	08016da8 	.word	0x08016da8
 8009bf8:	08016e9c 	.word	0x08016e9c
 8009bfc:	08016de4 	.word	0x08016de4
 8009c00:	200038fc 	.word	0x200038fc
 8009c04:	08009a99 	.word	0x08009a99
 8009c08:	200038f8 	.word	0x200038f8

08009c0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009c1c:	4413      	add	r3, r2
 8009c1e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009c28:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009c2c:	bf28      	it	cs
 8009c2e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009c32:	b292      	uxth	r2, r2
 8009c34:	4413      	add	r3, r2
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	db08      	blt.n	8009c50 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	e020      	b.n	8009c92 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	dd03      	ble.n	8009c66 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c64:	e014      	b.n	8009c90 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c78:	d306      	bcc.n	8009c88 <tcp_update_rcv_ann_wnd+0x7c>
 8009c7a:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <tcp_update_rcv_ann_wnd+0x90>)
 8009c7c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009c80:	4907      	ldr	r1, [pc, #28]	; (8009ca0 <tcp_update_rcv_ann_wnd+0x94>)
 8009c82:	4808      	ldr	r0, [pc, #32]	; (8009ca4 <tcp_update_rcv_ann_wnd+0x98>)
 8009c84:	f00b fd40 	bl	8015708 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009c90:	2300      	movs	r3, #0
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	08016da8 	.word	0x08016da8
 8009ca0:	08016ec0 	.word	0x08016ec0
 8009ca4:	08016de4 	.word	0x08016de4

08009ca8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	7d1b      	ldrb	r3, [r3, #20]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d106      	bne.n	8009cca <tcp_recved+0x22>
 8009cbc:	4b23      	ldr	r3, [pc, #140]	; (8009d4c <tcp_recved+0xa4>)
 8009cbe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009cc2:	4923      	ldr	r1, [pc, #140]	; (8009d50 <tcp_recved+0xa8>)
 8009cc4:	4823      	ldr	r0, [pc, #140]	; (8009d54 <tcp_recved+0xac>)
 8009cc6:	f00b fd1f 	bl	8015708 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009cce:	887b      	ldrh	r3, [r7, #2]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cdc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009ce0:	d904      	bls.n	8009cec <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009ce8:	851a      	strh	r2, [r3, #40]	; 0x28
 8009cea:	e017      	b.n	8009d1c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d113      	bne.n	8009d1c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7d1b      	ldrb	r3, [r3, #20]
 8009cf8:	2b07      	cmp	r3, #7
 8009cfa:	d003      	beq.n	8009d04 <tcp_recved+0x5c>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7d1b      	ldrb	r3, [r3, #20]
 8009d00:	2b09      	cmp	r3, #9
 8009d02:	d104      	bne.n	8009d0e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009d0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8009d0c:	e006      	b.n	8009d1c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <tcp_recved+0xa4>)
 8009d10:	f240 322d 	movw	r2, #813	; 0x32d
 8009d14:	4910      	ldr	r1, [pc, #64]	; (8009d58 <tcp_recved+0xb0>)
 8009d16:	480f      	ldr	r0, [pc, #60]	; (8009d54 <tcp_recved+0xac>)
 8009d18:	f00b fcf6 	bl	8015708 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff ff75 	bl	8009c0c <tcp_update_rcv_ann_wnd>
 8009d22:	4603      	mov	r3, r0
 8009d24:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009d2c:	db09      	blt.n	8009d42 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7e9b      	ldrb	r3, [r3, #26]
 8009d32:	f043 0302 	orr.w	r3, r3, #2
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f004 f891 	bl	800de64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	08016da8 	.word	0x08016da8
 8009d50:	08016edc 	.word	0x08016edc
 8009d54:	08016de4 	.word	0x08016de4
 8009d58:	08016f04 	.word	0x08016f04

08009d5c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8009d66:	4b1d      	ldr	r3, [pc, #116]	; (8009ddc <tcp_new_port+0x80>)
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	b291      	uxth	r1, r2
 8009d6e:	4a1b      	ldr	r2, [pc, #108]	; (8009ddc <tcp_new_port+0x80>)
 8009d70:	8011      	strh	r1, [r2, #0]
 8009d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d103      	bne.n	8009d82 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009d7a:	4b18      	ldr	r3, [pc, #96]	; (8009ddc <tcp_new_port+0x80>)
 8009d7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009d80:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009d82:	2300      	movs	r3, #0
 8009d84:	71fb      	strb	r3, [r7, #7]
 8009d86:	e01e      	b.n	8009dc6 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	4a15      	ldr	r2, [pc, #84]	; (8009de0 <tcp_new_port+0x84>)
 8009d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	e011      	b.n	8009dba <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	8ada      	ldrh	r2, [r3, #22]
 8009d9a:	4b10      	ldr	r3, [pc, #64]	; (8009ddc <tcp_new_port+0x80>)
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d108      	bne.n	8009db4 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009da2:	88bb      	ldrh	r3, [r7, #4]
 8009da4:	3301      	adds	r3, #1
 8009da6:	80bb      	strh	r3, [r7, #4]
 8009da8:	88bb      	ldrh	r3, [r7, #4]
 8009daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dae:	d3da      	bcc.n	8009d66 <tcp_new_port+0xa>
          return 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	e00d      	b.n	8009dd0 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	603b      	str	r3, [r7, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1ea      	bne.n	8009d96 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	71fb      	strb	r3, [r7, #7]
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d9dd      	bls.n	8009d88 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009dcc:	4b03      	ldr	r3, [pc, #12]	; (8009ddc <tcp_new_port+0x80>)
 8009dce:	881b      	ldrh	r3, [r3, #0]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	20000118 	.word	0x20000118
 8009de0:	08018874 	.word	0x08018874

08009de4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009de4:	b5b0      	push	{r4, r5, r7, lr}
 8009de6:	b08c      	sub	sp, #48	; 0x30
 8009de8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8009dee:	4b97      	ldr	r3, [pc, #604]	; (800a04c <tcp_slowtmr+0x268>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	4a95      	ldr	r2, [pc, #596]	; (800a04c <tcp_slowtmr+0x268>)
 8009df6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009df8:	4b95      	ldr	r3, [pc, #596]	; (800a050 <tcp_slowtmr+0x26c>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	4b93      	ldr	r3, [pc, #588]	; (800a050 <tcp_slowtmr+0x26c>)
 8009e02:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8009e08:	4b92      	ldr	r3, [pc, #584]	; (800a054 <tcp_slowtmr+0x270>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009e0e:	e227      	b.n	800a260 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	7d1b      	ldrb	r3, [r3, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d106      	bne.n	8009e26 <tcp_slowtmr+0x42>
 8009e18:	4b8f      	ldr	r3, [pc, #572]	; (800a058 <tcp_slowtmr+0x274>)
 8009e1a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8009e1e:	498f      	ldr	r1, [pc, #572]	; (800a05c <tcp_slowtmr+0x278>)
 8009e20:	488f      	ldr	r0, [pc, #572]	; (800a060 <tcp_slowtmr+0x27c>)
 8009e22:	f00b fc71 	bl	8015708 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	7d1b      	ldrb	r3, [r3, #20]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d106      	bne.n	8009e3c <tcp_slowtmr+0x58>
 8009e2e:	4b8a      	ldr	r3, [pc, #552]	; (800a058 <tcp_slowtmr+0x274>)
 8009e30:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009e34:	498b      	ldr	r1, [pc, #556]	; (800a064 <tcp_slowtmr+0x280>)
 8009e36:	488a      	ldr	r0, [pc, #552]	; (800a060 <tcp_slowtmr+0x27c>)
 8009e38:	f00b fc66 	bl	8015708 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	7d1b      	ldrb	r3, [r3, #20]
 8009e40:	2b0a      	cmp	r3, #10
 8009e42:	d106      	bne.n	8009e52 <tcp_slowtmr+0x6e>
 8009e44:	4b84      	ldr	r3, [pc, #528]	; (800a058 <tcp_slowtmr+0x274>)
 8009e46:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8009e4a:	4987      	ldr	r1, [pc, #540]	; (800a068 <tcp_slowtmr+0x284>)
 8009e4c:	4884      	ldr	r0, [pc, #528]	; (800a060 <tcp_slowtmr+0x27c>)
 8009e4e:	f00b fc5b 	bl	8015708 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	7f5a      	ldrb	r2, [r3, #29]
 8009e56:	4b7e      	ldr	r3, [pc, #504]	; (800a050 <tcp_slowtmr+0x26c>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d103      	bne.n	8009e66 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009e64:	e1fc      	b.n	800a260 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009e66:	4b7a      	ldr	r3, [pc, #488]	; (800a050 <tcp_slowtmr+0x26c>)
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	7d1b      	ldrb	r3, [r3, #20]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d108      	bne.n	8009e90 <tcp_slowtmr+0xac>
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e84:	2b05      	cmp	r3, #5
 8009e86:	d903      	bls.n	8009e90 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8009e88:	7ffb      	ldrb	r3, [r7, #31]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	77fb      	strb	r3, [r7, #31]
 8009e8e:	e0a2      	b.n	8009fd6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e96:	2b0b      	cmp	r3, #11
 8009e98:	d903      	bls.n	8009ea2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009e9a:	7ffb      	ldrb	r3, [r7, #31]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	77fb      	strb	r3, [r7, #31]
 8009ea0:	e099      	b.n	8009fd6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d032      	beq.n	8009f12 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	4a6d      	ldr	r2, [pc, #436]	; (800a06c <tcp_slowtmr+0x288>)
 8009eb6:	5cd3      	ldrb	r3, [r2, r3]
 8009eb8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009ec0:	7cfa      	ldrb	r2, [r7, #19]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d907      	bls.n	8009ed6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009ecc:	3301      	adds	r3, #1
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009edc:	7cfa      	ldrb	r2, [r7, #19]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d879      	bhi.n	8009fd6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8009ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ee4:	f004 fbd8 	bl	800e698 <tcp_zero_window_probe>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d173      	bne.n	8009fd6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009efc:	2b06      	cmp	r3, #6
 8009efe:	d86a      	bhi.n	8009fd6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009f06:	3301      	adds	r3, #1
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009f10:	e061      	b.n	8009fd6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	db08      	blt.n	8009f2e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	3301      	adds	r3, #1
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	b21a      	sxth	r2, r3
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d04f      	beq.n	8009fd6 <tcp_slowtmr+0x1f2>
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009f42:	429a      	cmp	r2, r3
 8009f44:	db47      	blt.n	8009fd6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	7d1b      	ldrb	r3, [r3, #20]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d018      	beq.n	8009f80 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f54:	2b0c      	cmp	r3, #12
 8009f56:	bf28      	it	cs
 8009f58:	230c      	movcs	r3, #12
 8009f5a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009f62:	10db      	asrs	r3, r3, #3
 8009f64:	b21b      	sxth	r3, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009f6e:	4413      	add	r3, r2
 8009f70:	7dfa      	ldrb	r2, [r7, #23]
 8009f72:	493f      	ldr	r1, [pc, #252]	; (800a070 <tcp_slowtmr+0x28c>)
 8009f74:	5c8a      	ldrb	r2, [r1, r2]
 8009f76:	4093      	lsls	r3, r2
 8009f78:	b21a      	sxth	r2, r3
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	2200      	movs	r2, #0
 8009f84:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009f92:	4293      	cmp	r3, r2
 8009f94:	bf28      	it	cs
 8009f96:	4613      	movcs	r3, r2
 8009f98:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8009f9a:	8abb      	ldrh	r3, [r7, #20]
 8009f9c:	085b      	lsrs	r3, r3, #1
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d206      	bcs.n	8009fc6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8009fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fd2:	f004 fa47 	bl	800e464 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	7d1b      	ldrb	r3, [r3, #20]
 8009fda:	2b06      	cmp	r3, #6
 8009fdc:	d10f      	bne.n	8009ffe <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	7e9b      	ldrb	r3, [r3, #26]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d009      	beq.n	8009ffe <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009fea:	4b18      	ldr	r3, [pc, #96]	; (800a04c <tcp_slowtmr+0x268>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b28      	cmp	r3, #40	; 0x28
 8009ff6:	d902      	bls.n	8009ffe <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009ff8:	7ffb      	ldrb	r3, [r7, #31]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	7a1b      	ldrb	r3, [r3, #8]
 800a002:	f003 0308 	and.w	r3, r3, #8
 800a006:	2b00      	cmp	r3, #0
 800a008:	d05d      	beq.n	800a0c6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d003      	beq.n	800a01a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800a016:	2b07      	cmp	r3, #7
 800a018:	d155      	bne.n	800a0c6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a01a:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <tcp_slowtmr+0x268>)
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a02a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a02e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a032:	4910      	ldr	r1, [pc, #64]	; (800a074 <tcp_slowtmr+0x290>)
 800a034:	fba1 1303 	umull	r1, r3, r1, r3
 800a038:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d91c      	bls.n	800a078 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a03e:	7ffb      	ldrb	r3, [r7, #31]
 800a040:	3301      	adds	r3, #1
 800a042:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800a044:	7fbb      	ldrb	r3, [r7, #30]
 800a046:	3301      	adds	r3, #1
 800a048:	77bb      	strb	r3, [r7, #30]
 800a04a:	e03c      	b.n	800a0c6 <tcp_slowtmr+0x2e2>
 800a04c:	200038f4 	.word	0x200038f4
 800a050:	20000242 	.word	0x20000242
 800a054:	200038f0 	.word	0x200038f0
 800a058:	08016da8 	.word	0x08016da8
 800a05c:	08016f58 	.word	0x08016f58
 800a060:	08016de4 	.word	0x08016de4
 800a064:	08016f84 	.word	0x08016f84
 800a068:	08016fb0 	.word	0x08016fb0
 800a06c:	0801886c 	.word	0x0801886c
 800a070:	0801885c 	.word	0x0801885c
 800a074:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a078:	4b97      	ldr	r3, [pc, #604]	; (800a2d8 <tcp_slowtmr+0x4f4>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a08e:	4618      	mov	r0, r3
 800a090:	4b92      	ldr	r3, [pc, #584]	; (800a2dc <tcp_slowtmr+0x4f8>)
 800a092:	fb03 f300 	mul.w	r3, r3, r0
 800a096:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800a098:	4991      	ldr	r1, [pc, #580]	; (800a2e0 <tcp_slowtmr+0x4fc>)
 800a09a:	fba1 1303 	umull	r1, r3, r1, r3
 800a09e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d910      	bls.n	800a0c6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800a0a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0a6:	f004 faba 	bl	800e61e <tcp_keepalive>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800a0ae:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d107      	bne.n	800a0c6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a0bc:	3301      	adds	r3, #1
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d016      	beq.n	800a0fc <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800a0ce:	4b82      	ldr	r3, [pc, #520]	; (800a2d8 <tcp_slowtmr+0x4f4>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	1ad2      	subs	r2, r2, r3
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a0de:	4619      	mov	r1, r3
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	440b      	add	r3, r1
 800a0e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d307      	bcc.n	800a0fc <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fa04 	bl	800a4fe <tcp_segs_free>
      pcb->ooseq = NULL;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	7d1b      	ldrb	r3, [r3, #20]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d109      	bne.n	800a118 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a104:	4b74      	ldr	r3, [pc, #464]	; (800a2d8 <tcp_slowtmr+0x4f4>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	2b28      	cmp	r3, #40	; 0x28
 800a110:	d902      	bls.n	800a118 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a112:	7ffb      	ldrb	r3, [r7, #31]
 800a114:	3301      	adds	r3, #1
 800a116:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	7d1b      	ldrb	r3, [r3, #20]
 800a11c:	2b09      	cmp	r3, #9
 800a11e:	d109      	bne.n	800a134 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a120:	4b6d      	ldr	r3, [pc, #436]	; (800a2d8 <tcp_slowtmr+0x4f4>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	2bf0      	cmp	r3, #240	; 0xf0
 800a12c:	d902      	bls.n	800a134 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800a12e:	7ffb      	ldrb	r3, [r7, #31]
 800a130:	3301      	adds	r3, #1
 800a132:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a134:	7ffb      	ldrb	r3, [r7, #31]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d05d      	beq.n	800a1f6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a140:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a144:	f000 fc4c 	bl	800a9e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d010      	beq.n	800a170 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a14e:	4b65      	ldr	r3, [pc, #404]	; (800a2e4 <tcp_slowtmr+0x500>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a154:	429a      	cmp	r2, r3
 800a156:	d106      	bne.n	800a166 <tcp_slowtmr+0x382>
 800a158:	4b63      	ldr	r3, [pc, #396]	; (800a2e8 <tcp_slowtmr+0x504>)
 800a15a:	f240 4289 	movw	r2, #1161	; 0x489
 800a15e:	4963      	ldr	r1, [pc, #396]	; (800a2ec <tcp_slowtmr+0x508>)
 800a160:	4863      	ldr	r0, [pc, #396]	; (800a2f0 <tcp_slowtmr+0x50c>)
 800a162:	f00b fad1 	bl	8015708 <iprintf>
        prev->next = pcb->next;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	60da      	str	r2, [r3, #12]
 800a16e:	e00f      	b.n	800a190 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a170:	4b5c      	ldr	r3, [pc, #368]	; (800a2e4 <tcp_slowtmr+0x500>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a176:	429a      	cmp	r2, r3
 800a178:	d006      	beq.n	800a188 <tcp_slowtmr+0x3a4>
 800a17a:	4b5b      	ldr	r3, [pc, #364]	; (800a2e8 <tcp_slowtmr+0x504>)
 800a17c:	f240 428d 	movw	r2, #1165	; 0x48d
 800a180:	495c      	ldr	r1, [pc, #368]	; (800a2f4 <tcp_slowtmr+0x510>)
 800a182:	485b      	ldr	r0, [pc, #364]	; (800a2f0 <tcp_slowtmr+0x50c>)
 800a184:	f00b fac0 	bl	8015708 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	4a55      	ldr	r2, [pc, #340]	; (800a2e4 <tcp_slowtmr+0x500>)
 800a18e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a190:	7fbb      	ldrb	r3, [r7, #30]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d010      	beq.n	800a1b8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a19e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	1d1d      	adds	r5, r3, #4
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	8adb      	ldrh	r3, [r3, #22]
 800a1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1aa:	8b12      	ldrh	r2, [r2, #24]
 800a1ac:	9201      	str	r2, [sp, #4]
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	462b      	mov	r3, r5
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	f004 f8e0 	bl	800e378 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	7d1b      	ldrb	r3, [r3, #20]
 800a1c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	f7fe f98f 	bl	80084f4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800a1d6:	4b48      	ldr	r3, [pc, #288]	; (800a2f8 <tcp_slowtmr+0x514>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d004      	beq.n	800a1ec <tcp_slowtmr+0x408>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f06f 010c 	mvn.w	r1, #12
 800a1e8:	68b8      	ldr	r0, [r7, #8]
 800a1ea:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a1ec:	4b42      	ldr	r3, [pc, #264]	; (800a2f8 <tcp_slowtmr+0x514>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d035      	beq.n	800a260 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800a1f4:	e606      	b.n	8009e04 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	7edb      	ldrb	r3, [r3, #27]
 800a204:	3301      	adds	r3, #1
 800a206:	b2da      	uxtb	r2, r3
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	7eda      	ldrb	r2, [r3, #27]
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	7f1b      	ldrb	r3, [r3, #28]
 800a214:	429a      	cmp	r2, r3
 800a216:	d323      	bcc.n	800a260 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	2200      	movs	r2, #0
 800a21c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a21e:	4b36      	ldr	r3, [pc, #216]	; (800a2f8 <tcp_slowtmr+0x514>)
 800a220:	2200      	movs	r2, #0
 800a222:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <tcp_slowtmr+0x460>
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a234:	6a3a      	ldr	r2, [r7, #32]
 800a236:	6912      	ldr	r2, [r2, #16]
 800a238:	6a39      	ldr	r1, [r7, #32]
 800a23a:	4610      	mov	r0, r2
 800a23c:	4798      	blx	r3
 800a23e:	4603      	mov	r3, r0
 800a240:	777b      	strb	r3, [r7, #29]
 800a242:	e001      	b.n	800a248 <tcp_slowtmr+0x464>
 800a244:	2300      	movs	r3, #0
 800a246:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800a248:	4b2b      	ldr	r3, [pc, #172]	; (800a2f8 <tcp_slowtmr+0x514>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d000      	beq.n	800a252 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800a250:	e5d8      	b.n	8009e04 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a252:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d102      	bne.n	800a260 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800a25a:	6a38      	ldr	r0, [r7, #32]
 800a25c:	f003 fe02 	bl	800de64 <tcp_output>
  while (pcb != NULL) {
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	2b00      	cmp	r3, #0
 800a264:	f47f add4 	bne.w	8009e10 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a268:	2300      	movs	r3, #0
 800a26a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800a26c:	4b23      	ldr	r3, [pc, #140]	; (800a2fc <tcp_slowtmr+0x518>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a272:	e068      	b.n	800a346 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	7d1b      	ldrb	r3, [r3, #20]
 800a278:	2b0a      	cmp	r3, #10
 800a27a:	d006      	beq.n	800a28a <tcp_slowtmr+0x4a6>
 800a27c:	4b1a      	ldr	r3, [pc, #104]	; (800a2e8 <tcp_slowtmr+0x504>)
 800a27e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a282:	491f      	ldr	r1, [pc, #124]	; (800a300 <tcp_slowtmr+0x51c>)
 800a284:	481a      	ldr	r0, [pc, #104]	; (800a2f0 <tcp_slowtmr+0x50c>)
 800a286:	f00b fa3f 	bl	8015708 <iprintf>
    pcb_remove = 0;
 800a28a:	2300      	movs	r3, #0
 800a28c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a28e:	4b12      	ldr	r3, [pc, #72]	; (800a2d8 <tcp_slowtmr+0x4f4>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	2bf0      	cmp	r3, #240	; 0xf0
 800a29a:	d902      	bls.n	800a2a2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800a29c:	7ffb      	ldrb	r3, [r7, #31]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a2a2:	7ffb      	ldrb	r3, [r7, #31]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d049      	beq.n	800a33c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a2a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2aa:	f000 fb99 	bl	800a9e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d029      	beq.n	800a308 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a2b4:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <tcp_slowtmr+0x518>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d106      	bne.n	800a2cc <tcp_slowtmr+0x4e8>
 800a2be:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <tcp_slowtmr+0x504>)
 800a2c0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a2c4:	490f      	ldr	r1, [pc, #60]	; (800a304 <tcp_slowtmr+0x520>)
 800a2c6:	480a      	ldr	r0, [pc, #40]	; (800a2f0 <tcp_slowtmr+0x50c>)
 800a2c8:	f00b fa1e 	bl	8015708 <iprintf>
        prev->next = pcb->next;
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	60da      	str	r2, [r3, #12]
 800a2d4:	e028      	b.n	800a328 <tcp_slowtmr+0x544>
 800a2d6:	bf00      	nop
 800a2d8:	200038f4 	.word	0x200038f4
 800a2dc:	000124f8 	.word	0x000124f8
 800a2e0:	10624dd3 	.word	0x10624dd3
 800a2e4:	200038f0 	.word	0x200038f0
 800a2e8:	08016da8 	.word	0x08016da8
 800a2ec:	08016fe0 	.word	0x08016fe0
 800a2f0:	08016de4 	.word	0x08016de4
 800a2f4:	0801700c 	.word	0x0801700c
 800a2f8:	200038ec 	.word	0x200038ec
 800a2fc:	20003900 	.word	0x20003900
 800a300:	08017038 	.word	0x08017038
 800a304:	08017068 	.word	0x08017068
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a308:	4b12      	ldr	r3, [pc, #72]	; (800a354 <tcp_slowtmr+0x570>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30e:	429a      	cmp	r2, r3
 800a310:	d006      	beq.n	800a320 <tcp_slowtmr+0x53c>
 800a312:	4b11      	ldr	r3, [pc, #68]	; (800a358 <tcp_slowtmr+0x574>)
 800a314:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800a318:	4910      	ldr	r1, [pc, #64]	; (800a35c <tcp_slowtmr+0x578>)
 800a31a:	4811      	ldr	r0, [pc, #68]	; (800a360 <tcp_slowtmr+0x57c>)
 800a31c:	f00b f9f4 	bl	8015708 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	4a0b      	ldr	r2, [pc, #44]	; (800a354 <tcp_slowtmr+0x570>)
 800a326:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a332:	69b9      	ldr	r1, [r7, #24]
 800a334:	2001      	movs	r0, #1
 800a336:	f7fe f8dd 	bl	80084f4 <memp_free>
 800a33a:	e004      	b.n	800a346 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d193      	bne.n	800a274 <tcp_slowtmr+0x490>
    }
  }
}
 800a34c:	bf00      	nop
 800a34e:	3728      	adds	r7, #40	; 0x28
 800a350:	46bd      	mov	sp, r7
 800a352:	bdb0      	pop	{r4, r5, r7, pc}
 800a354:	20003900 	.word	0x20003900
 800a358:	08016da8 	.word	0x08016da8
 800a35c:	08017090 	.word	0x08017090
 800a360:	08016de4 	.word	0x08016de4

0800a364 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a36a:	4b2d      	ldr	r3, [pc, #180]	; (800a420 <tcp_fasttmr+0xbc>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	3301      	adds	r3, #1
 800a370:	b2da      	uxtb	r2, r3
 800a372:	4b2b      	ldr	r3, [pc, #172]	; (800a420 <tcp_fasttmr+0xbc>)
 800a374:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a376:	4b2b      	ldr	r3, [pc, #172]	; (800a424 <tcp_fasttmr+0xc0>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a37c:	e048      	b.n	800a410 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	7f5a      	ldrb	r2, [r3, #29]
 800a382:	4b27      	ldr	r3, [pc, #156]	; (800a420 <tcp_fasttmr+0xbc>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d03f      	beq.n	800a40a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a38a:	4b25      	ldr	r3, [pc, #148]	; (800a420 <tcp_fasttmr+0xbc>)
 800a38c:	781a      	ldrb	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7e9b      	ldrb	r3, [r3, #26]
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d010      	beq.n	800a3c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	7e9b      	ldrb	r3, [r3, #26]
 800a3a2:	f043 0302 	orr.w	r3, r3, #2
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f003 fd59 	bl	800de64 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	7e9b      	ldrb	r3, [r3, #26]
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7e9b      	ldrb	r3, [r3, #26]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	7e9b      	ldrb	r3, [r3, #26]
 800a3d0:	f023 0308 	bic.w	r3, r3, #8
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7ff f98e 	bl	80096fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a3ee:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <tcp_fasttmr+0xc4>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f819 	bl	800a42c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <tcp_fasttmr+0xc4>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d000      	beq.n	800a404 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a402:	e7b8      	b.n	800a376 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	607b      	str	r3, [r7, #4]
 800a408:	e002      	b.n	800a410 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1b3      	bne.n	800a37e <tcp_fasttmr+0x1a>
    }
  }
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000242 	.word	0x20000242
 800a424:	200038f0 	.word	0x200038f0
 800a428:	200038ec 	.word	0x200038ec

0800a42c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a438:	7b5b      	ldrb	r3, [r3, #13]
 800a43a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a440:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <tcp_process_refused_data+0x3e>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6918      	ldr	r0, [r3, #16]
 800a45c:	2300      	movs	r3, #0
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	47a0      	blx	r4
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
 800a468:	e007      	b.n	800a47a <tcp_process_refused_data+0x4e>
 800a46a:	2300      	movs	r3, #0
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	2000      	movs	r0, #0
 800a472:	f000 f89b 	bl	800a5ac <tcp_recv_null>
 800a476:	4603      	mov	r3, r0
 800a478:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d12a      	bne.n	800a4d8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	f003 0320 	and.w	r3, r3, #32
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d033      	beq.n	800a4f4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a490:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a494:	d005      	beq.n	800a4a2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49a:	3301      	adds	r3, #1
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <tcp_process_refused_data+0x98>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6918      	ldr	r0, [r3, #16]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	47a0      	blx	r4
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]
 800a4c2:	e001      	b.n	800a4c8 <tcp_process_refused_data+0x9c>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4cc:	f113 0f0d 	cmn.w	r3, #13
 800a4d0:	d110      	bne.n	800a4f4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800a4d2:	f06f 030c 	mvn.w	r3, #12
 800a4d6:	e00e      	b.n	800a4f6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800a4d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4dc:	f113 0f0d 	cmn.w	r3, #13
 800a4e0:	d102      	bne.n	800a4e8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a4e2:	f06f 030c 	mvn.w	r3, #12
 800a4e6:	e006      	b.n	800a4f6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800a4ee:	f06f 0304 	mvn.w	r3, #4
 800a4f2:	e000      	b.n	800a4f6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd90      	pop	{r4, r7, pc}

0800a4fe <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a506:	e007      	b.n	800a518 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f809 	bl	800a526 <tcp_seg_free>
    seg = next;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1f4      	bne.n	800a508 <tcp_segs_free+0xa>
  }
}
 800a51e:	bf00      	nop
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00c      	beq.n	800a54e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fd09 	bl	8008f58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	2003      	movs	r0, #3
 800a54a:	f7fd ffd3 	bl	80084f4 <memp_free>
  }
}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	78fa      	ldrb	r2, [r7, #3]
 800a566:	755a      	strb	r2, [r3, #21]
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a57c:	2003      	movs	r0, #3
 800a57e:	f7fd ff6d 	bl	800845c <memp_malloc>
 800a582:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <tcp_seg_copy+0x1a>
    return NULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	e00a      	b.n	800a5a4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a58e:	2210      	movs	r2, #16
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f00a fffd 	bl	8015592 <memcpy>
  pbuf_ref(cseg->p);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe fd87 	bl	80090b0 <pbuf_ref>
  return cseg;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d009      	beq.n	800a5d4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	891b      	ldrh	r3, [r3, #8]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	68b8      	ldr	r0, [r7, #8]
 800a5c8:	f7ff fb6e 	bl	8009ca8 <tcp_recved>
    pbuf_free(p);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fe fcc3 	bl	8008f58 <pbuf_free>
 800a5d2:	e008      	b.n	800a5e6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800a5d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d104      	bne.n	800a5e6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800a5dc:	68b8      	ldr	r0, [r7, #8]
 800a5de:	f7ff f8f3 	bl	80097c8 <tcp_close>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	e000      	b.n	800a5e8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	db01      	blt.n	800a606 <tcp_kill_prio+0x16>
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	e000      	b.n	800a608 <tcp_kill_prio+0x18>
 800a606:	237f      	movs	r3, #127	; 0x7f
 800a608:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <tcp_kill_prio+0x7c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e01a      	b.n	800a650 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	7d5b      	ldrb	r3, [r3, #21]
 800a61e:	7afa      	ldrb	r2, [r7, #11]
 800a620:	429a      	cmp	r2, r3
 800a622:	d312      	bcc.n	800a64a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a624:	4b12      	ldr	r3, [pc, #72]	; (800a670 <tcp_kill_prio+0x80>)
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	429a      	cmp	r2, r3
 800a632:	d80a      	bhi.n	800a64a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800a634:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <tcp_kill_prio+0x80>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	7d5b      	ldrb	r3, [r3, #21]
 800a648:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1e1      	bne.n	800a61a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a65c:	6938      	ldr	r0, [r7, #16]
 800a65e:	f7ff f97d 	bl	800995c <tcp_abort>
  }
}
 800a662:	bf00      	nop
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	200038f0 	.word	0x200038f0
 800a670:	200038f4 	.word	0x200038f4

0800a674 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	2b08      	cmp	r3, #8
 800a682:	d009      	beq.n	800a698 <tcp_kill_state+0x24>
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b09      	cmp	r3, #9
 800a688:	d006      	beq.n	800a698 <tcp_kill_state+0x24>
 800a68a:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <tcp_kill_state+0x80>)
 800a68c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a690:	4919      	ldr	r1, [pc, #100]	; (800a6f8 <tcp_kill_state+0x84>)
 800a692:	481a      	ldr	r0, [pc, #104]	; (800a6fc <tcp_kill_state+0x88>)
 800a694:	f00b f838 	bl	8015708 <iprintf>

  inactivity = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a69c:	2300      	movs	r3, #0
 800a69e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6a0:	4b17      	ldr	r3, [pc, #92]	; (800a700 <tcp_kill_state+0x8c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	617b      	str	r3, [r7, #20]
 800a6a6:	e017      	b.n	800a6d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	7d1b      	ldrb	r3, [r3, #20]
 800a6ac:	79fa      	ldrb	r2, [r7, #7]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d10f      	bne.n	800a6d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a6b2:	4b14      	ldr	r3, [pc, #80]	; (800a704 <tcp_kill_state+0x90>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d807      	bhi.n	800a6d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a6c2:	4b10      	ldr	r3, [pc, #64]	; (800a704 <tcp_kill_state+0x90>)
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e4      	bne.n	800a6a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6938      	ldr	r0, [r7, #16]
 800a6e8:	f7ff f886 	bl	80097f8 <tcp_abandon>
  }
}
 800a6ec:	bf00      	nop
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	08016da8 	.word	0x08016da8
 800a6f8:	080170b8 	.word	0x080170b8
 800a6fc:	08016de4 	.word	0x08016de4
 800a700:	200038f0 	.word	0x200038f0
 800a704:	200038f4 	.word	0x200038f4

0800a708 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a716:	4b12      	ldr	r3, [pc, #72]	; (800a760 <tcp_kill_timewait+0x58>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	e012      	b.n	800a744 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a71e:	4b11      	ldr	r3, [pc, #68]	; (800a764 <tcp_kill_timewait+0x5c>)
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d807      	bhi.n	800a73e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a72e:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <tcp_kill_timewait+0x5c>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1e9      	bne.n	800a71e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a750:	68b8      	ldr	r0, [r7, #8]
 800a752:	f7ff f903 	bl	800995c <tcp_abort>
  }
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20003900 	.word	0x20003900
 800a764:	200038f4 	.word	0x200038f4

0800a768 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a772:	2001      	movs	r0, #1
 800a774:	f7fd fe72 	bl	800845c <memp_malloc>
 800a778:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d124      	bne.n	800a7ca <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a780:	f7ff ffc2 	bl	800a708 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a784:	2001      	movs	r0, #1
 800a786:	f7fd fe69 	bl	800845c <memp_malloc>
 800a78a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d11b      	bne.n	800a7ca <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a792:	2009      	movs	r0, #9
 800a794:	f7ff ff6e 	bl	800a674 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a798:	2001      	movs	r0, #1
 800a79a:	f7fd fe5f 	bl	800845c <memp_malloc>
 800a79e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d111      	bne.n	800a7ca <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a7a6:	2008      	movs	r0, #8
 800a7a8:	f7ff ff64 	bl	800a674 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	f7fd fe55 	bl	800845c <memp_malloc>
 800a7b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d107      	bne.n	800a7ca <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff ff17 	bl	800a5f0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	f7fd fe4a 	bl	800845c <memp_malloc>
 800a7c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d03f      	beq.n	800a850 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a7d0:	2298      	movs	r2, #152	; 0x98
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f00a fee7 	bl	80155a8 <memset>
    pcb->prio = prio;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	79fa      	ldrb	r2, [r7, #7]
 800a7de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a7e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	22ff      	movs	r2, #255	; 0xff
 800a7fe:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a806:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2206      	movs	r2, #6
 800a80c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2206      	movs	r2, #6
 800a814:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a81c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2201      	movs	r2, #1
 800a822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a826:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <tcp_alloc+0xf4>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a82e:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <tcp_alloc+0xf8>)
 800a830:	781a      	ldrb	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a83c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4a08      	ldr	r2, [pc, #32]	; (800a864 <tcp_alloc+0xfc>)
 800a844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4a07      	ldr	r2, [pc, #28]	; (800a868 <tcp_alloc+0x100>)
 800a84c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a850:	68fb      	ldr	r3, [r7, #12]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	200038f4 	.word	0x200038f4
 800a860:	20000242 	.word	0x20000242
 800a864:	0800a5ad 	.word	0x0800a5ad
 800a868:	006ddd00 	.word	0x006ddd00

0800a86c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a870:	2040      	movs	r0, #64	; 0x40
 800a872:	f7ff ff79 	bl	800a768 <tcp_alloc>
 800a876:	4603      	mov	r3, r0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	611a      	str	r2, [r3, #16]
  }
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00e      	beq.n	800a8ce <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d106      	bne.n	800a8c6 <tcp_recv+0x26>
 800a8b8:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <tcp_recv+0x38>)
 800a8ba:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800a8be:	4907      	ldr	r1, [pc, #28]	; (800a8dc <tcp_recv+0x3c>)
 800a8c0:	4807      	ldr	r0, [pc, #28]	; (800a8e0 <tcp_recv+0x40>)
 800a8c2:	f00a ff21 	bl	8015708 <iprintf>
    pcb->recv = recv;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a8ce:	bf00      	nop
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	08016da8 	.word	0x08016da8
 800a8dc:	080170c8 	.word	0x080170c8
 800a8e0:	08016de4 	.word	0x08016de4

0800a8e4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00d      	beq.n	800a910 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7d1b      	ldrb	r3, [r3, #20]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d106      	bne.n	800a90a <tcp_sent+0x26>
 800a8fc:	4b06      	ldr	r3, [pc, #24]	; (800a918 <tcp_sent+0x34>)
 800a8fe:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800a902:	4906      	ldr	r1, [pc, #24]	; (800a91c <tcp_sent+0x38>)
 800a904:	4806      	ldr	r0, [pc, #24]	; (800a920 <tcp_sent+0x3c>)
 800a906:	f00a feff 	bl	8015708 <iprintf>
    pcb->sent = sent;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	08016da8 	.word	0x08016da8
 800a91c:	080170f0 	.word	0x080170f0
 800a920:	08016de4 	.word	0x08016de4

0800a924 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00e      	beq.n	800a952 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	7d1b      	ldrb	r3, [r3, #20]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d106      	bne.n	800a94a <tcp_err+0x26>
 800a93c:	4b07      	ldr	r3, [pc, #28]	; (800a95c <tcp_err+0x38>)
 800a93e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800a942:	4907      	ldr	r1, [pc, #28]	; (800a960 <tcp_err+0x3c>)
 800a944:	4807      	ldr	r0, [pc, #28]	; (800a964 <tcp_err+0x40>)
 800a946:	f00a fedf 	bl	8015708 <iprintf>
    pcb->errf = err;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800a952:	bf00      	nop
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	08016da8 	.word	0x08016da8
 800a960:	08017118 	.word	0x08017118
 800a964:	08016de4 	.word	0x08016de4

0800a968 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d008      	beq.n	800a98a <tcp_accept+0x22>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7d1b      	ldrb	r3, [r3, #20]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d104      	bne.n	800a98a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	619a      	str	r2, [r3, #24]
  }
}
 800a98a:	bf00      	nop
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
	...

0800a998 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	7d1b      	ldrb	r3, [r3, #20]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d106      	bne.n	800a9bc <tcp_poll+0x24>
 800a9ae:	4b09      	ldr	r3, [pc, #36]	; (800a9d4 <tcp_poll+0x3c>)
 800a9b0:	f240 7203 	movw	r2, #1795	; 0x703
 800a9b4:	4908      	ldr	r1, [pc, #32]	; (800a9d8 <tcp_poll+0x40>)
 800a9b6:	4809      	ldr	r0, [pc, #36]	; (800a9dc <tcp_poll+0x44>)
 800a9b8:	f00a fea6 	bl	8015708 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	79fa      	ldrb	r2, [r7, #7]
 800a9c8:	771a      	strb	r2, [r3, #28]
}
 800a9ca:	bf00      	nop
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	08016da8 	.word	0x08016da8
 800a9d8:	08017140 	.word	0x08017140
 800a9dc:	08016de4 	.word	0x08016de4

0800a9e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	7d1b      	ldrb	r3, [r3, #20]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d034      	beq.n	800aa5a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a9f4:	2b0a      	cmp	r3, #10
 800a9f6:	d030      	beq.n	800aa5a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d02c      	beq.n	800aa5a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe faa3 	bl	8008f58 <pbuf_free>
      pcb->refused_data = NULL;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fd6e 	bl	800a4fe <tcp_segs_free>
    pcb->ooseq = NULL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa2e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff fd62 	bl	800a4fe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff fd5d 	bl	800a4fe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	669a      	str	r2, [r3, #104]	; 0x68
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d105      	bne.n	800aa84 <tcp_pcb_remove+0x20>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	e013      	b.n	800aaac <tcp_pcb_remove+0x48>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	e00c      	b.n	800aaa6 <tcp_pcb_remove+0x42>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d104      	bne.n	800aaa0 <tcp_pcb_remove+0x3c>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	60da      	str	r2, [r3, #12]
 800aa9e:	e005      	b.n	800aaac <tcp_pcb_remove+0x48>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1ef      	bne.n	800aa8c <tcp_pcb_remove+0x28>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2200      	movs	r2, #0
 800aab0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800aab2:	6838      	ldr	r0, [r7, #0]
 800aab4:	f7ff ff94 	bl	800a9e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	7d1b      	ldrb	r3, [r3, #20]
 800aabc:	2b0a      	cmp	r3, #10
 800aabe:	d013      	beq.n	800aae8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d00f      	beq.n	800aae8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	7e9b      	ldrb	r3, [r3, #26]
 800aacc:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d009      	beq.n	800aae8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	7e9b      	ldrb	r3, [r3, #26]
 800aad8:	f043 0302 	orr.w	r3, r3, #2
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800aae2:	6838      	ldr	r0, [r7, #0]
 800aae4:	f003 f9be 	bl	800de64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	7d1b      	ldrb	r3, [r3, #20]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d020      	beq.n	800ab32 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d006      	beq.n	800ab06 <tcp_pcb_remove+0xa2>
 800aaf8:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <tcp_pcb_remove+0xe4>)
 800aafa:	f240 7253 	movw	r2, #1875	; 0x753
 800aafe:	4913      	ldr	r1, [pc, #76]	; (800ab4c <tcp_pcb_remove+0xe8>)
 800ab00:	4813      	ldr	r0, [pc, #76]	; (800ab50 <tcp_pcb_remove+0xec>)
 800ab02:	f00a fe01 	bl	8015708 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d006      	beq.n	800ab1c <tcp_pcb_remove+0xb8>
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <tcp_pcb_remove+0xe4>)
 800ab10:	f240 7254 	movw	r2, #1876	; 0x754
 800ab14:	490f      	ldr	r1, [pc, #60]	; (800ab54 <tcp_pcb_remove+0xf0>)
 800ab16:	480e      	ldr	r0, [pc, #56]	; (800ab50 <tcp_pcb_remove+0xec>)
 800ab18:	f00a fdf6 	bl	8015708 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d006      	beq.n	800ab32 <tcp_pcb_remove+0xce>
 800ab24:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <tcp_pcb_remove+0xe4>)
 800ab26:	f240 7256 	movw	r2, #1878	; 0x756
 800ab2a:	490b      	ldr	r1, [pc, #44]	; (800ab58 <tcp_pcb_remove+0xf4>)
 800ab2c:	4808      	ldr	r0, [pc, #32]	; (800ab50 <tcp_pcb_remove+0xec>)
 800ab2e:	f00a fdeb 	bl	8015708 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2200      	movs	r2, #0
 800ab36:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	08016da8 	.word	0x08016da8
 800ab4c:	08017160 	.word	0x08017160
 800ab50:	08016de4 	.word	0x08016de4
 800ab54:	08017178 	.word	0x08017178
 800ab58:	08017194 	.word	0x08017194

0800ab5c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ab64:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <tcp_next_iss+0x28>)
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	4b07      	ldr	r3, [pc, #28]	; (800ab88 <tcp_next_iss+0x2c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	4a05      	ldr	r2, [pc, #20]	; (800ab84 <tcp_next_iss+0x28>)
 800ab70:	6013      	str	r3, [r2, #0]
  return iss;
 800ab72:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <tcp_next_iss+0x28>)
 800ab74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	2000011c 	.word	0x2000011c
 800ab88:	200038f4 	.word	0x200038f4

0800ab8c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800ab98:	6838      	ldr	r0, [r7, #0]
 800ab9a:	f006 fc71 	bl	8011480 <ip4_route>
 800ab9e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800aba6:	88fb      	ldrh	r3, [r7, #6]
 800aba8:	e010      	b.n	800abcc <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abae:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800abb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d008      	beq.n	800abca <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800abb8:	897b      	ldrh	r3, [r7, #10]
 800abba:	3b28      	subs	r3, #40	; 0x28
 800abbc:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800abbe:	893a      	ldrh	r2, [r7, #8]
 800abc0:	88fb      	ldrh	r3, [r7, #6]
 800abc2:	4293      	cmp	r3, r2
 800abc4:	bf28      	it	cs
 800abc6:	4613      	movcs	r3, r2
 800abc8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800abca:	88fb      	ldrh	r3, [r7, #6]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800abe2:	e011      	b.n	800ac08 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d108      	bne.n	800ac02 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7fe feb0 	bl	800995c <tcp_abort>
      pcb = next;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	e002      	b.n	800ac08 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1ea      	bne.n	800abe4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800ac0e:	bf00      	nop
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d02c      	beq.n	800ac82 <tcp_netif_ip_addr_changed+0x6a>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d028      	beq.n	800ac82 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ac30:	4b16      	ldr	r3, [pc, #88]	; (800ac8c <tcp_netif_ip_addr_changed+0x74>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff ffcc 	bl	800abd4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ac3c:	4b14      	ldr	r3, [pc, #80]	; (800ac90 <tcp_netif_ip_addr_changed+0x78>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff ffc6 	bl	800abd4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d019      	beq.n	800ac82 <tcp_netif_ip_addr_changed+0x6a>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d015      	beq.n	800ac82 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <tcp_netif_ip_addr_changed+0x7c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	e00e      	b.n	800ac7c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d103      	bne.n	800ac78 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1ed      	bne.n	800ac5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ac82:	bf00      	nop
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	200038f0 	.word	0x200038f0
 800ac90:	200038fc 	.word	0x200038fc
 800ac94:	200038f8 	.word	0x200038f8

0800ac98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ac98:	b590      	push	{r4, r7, lr}
 800ac9a:	b08b      	sub	sp, #44	; 0x2c
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	4a82      	ldr	r2, [pc, #520]	; (800aeb0 <tcp_input+0x218>)
 800aca8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	895b      	ldrh	r3, [r3, #10]
 800acae:	2b13      	cmp	r3, #19
 800acb0:	f240 838a 	bls.w	800b3c8 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800acb4:	4b7f      	ldr	r3, [pc, #508]	; (800aeb4 <tcp_input+0x21c>)
 800acb6:	695a      	ldr	r2, [r3, #20]
 800acb8:	4b7e      	ldr	r3, [pc, #504]	; (800aeb4 <tcp_input+0x21c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f006 fe76 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f040 8380 	bne.w	800b3cc <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800accc:	4b79      	ldr	r3, [pc, #484]	; (800aeb4 <tcp_input+0x21c>)
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800acd4:	2be0      	cmp	r3, #224	; 0xe0
 800acd6:	f000 8379 	beq.w	800b3cc <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800acda:	4b75      	ldr	r3, [pc, #468]	; (800aeb0 <tcp_input+0x218>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	899b      	ldrh	r3, [r3, #12]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fd f80c 	bl	8007d00 <lwip_htons>
 800ace8:	4603      	mov	r3, r0
 800acea:	0b1b      	lsrs	r3, r3, #12
 800acec:	b29b      	uxth	r3, r3
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800acf4:	7cbb      	ldrb	r3, [r7, #18]
 800acf6:	2b13      	cmp	r3, #19
 800acf8:	f240 8368 	bls.w	800b3cc <tcp_input+0x734>
 800acfc:	7cbb      	ldrb	r3, [r7, #18]
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	891b      	ldrh	r3, [r3, #8]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	f200 8361 	bhi.w	800b3cc <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800ad0a:	7cbb      	ldrb	r3, [r7, #18]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	3b14      	subs	r3, #20
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	4b69      	ldr	r3, [pc, #420]	; (800aeb8 <tcp_input+0x220>)
 800ad14:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ad16:	4b69      	ldr	r3, [pc, #420]	; (800aebc <tcp_input+0x224>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	895a      	ldrh	r2, [r3, #10]
 800ad20:	7cbb      	ldrb	r3, [r7, #18]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d30d      	bcc.n	800ad44 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ad28:	4b63      	ldr	r3, [pc, #396]	; (800aeb8 <tcp_input+0x220>)
 800ad2a:	881a      	ldrh	r2, [r3, #0]
 800ad2c:	4b64      	ldr	r3, [pc, #400]	; (800aec0 <tcp_input+0x228>)
 800ad2e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800ad30:	7cbb      	ldrb	r3, [r7, #18]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	425b      	negs	r3, r3
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	b21b      	sxth	r3, r3
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7fe f8e7 	bl	8008f10 <pbuf_header>
 800ad42:	e055      	b.n	800adf0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d105      	bne.n	800ad58 <tcp_input+0xc0>
 800ad4c:	4b5d      	ldr	r3, [pc, #372]	; (800aec4 <tcp_input+0x22c>)
 800ad4e:	22b2      	movs	r2, #178	; 0xb2
 800ad50:	495d      	ldr	r1, [pc, #372]	; (800aec8 <tcp_input+0x230>)
 800ad52:	485e      	ldr	r0, [pc, #376]	; (800aecc <tcp_input+0x234>)
 800ad54:	f00a fcd8 	bl	8015708 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800ad58:	f06f 0113 	mvn.w	r1, #19
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7fe f8d7 	bl	8008f10 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	895a      	ldrh	r2, [r3, #10]
 800ad66:	4b56      	ldr	r3, [pc, #344]	; (800aec0 <tcp_input+0x228>)
 800ad68:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800ad6a:	4b53      	ldr	r3, [pc, #332]	; (800aeb8 <tcp_input+0x220>)
 800ad6c:	881a      	ldrh	r2, [r3, #0]
 800ad6e:	4b54      	ldr	r3, [pc, #336]	; (800aec0 <tcp_input+0x228>)
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800ad76:	4b52      	ldr	r3, [pc, #328]	; (800aec0 <tcp_input+0x228>)
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	425b      	negs	r3, r3
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	b21b      	sxth	r3, r3
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7fe f8c4 	bl	8008f10 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	895b      	ldrh	r3, [r3, #10]
 800ad8e:	8a3a      	ldrh	r2, [r7, #16]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	f200 831d 	bhi.w	800b3d0 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4a47      	ldr	r2, [pc, #284]	; (800aebc <tcp_input+0x224>)
 800ad9e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	8a3b      	ldrh	r3, [r7, #16]
 800ada6:	425b      	negs	r3, r3
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	b21b      	sxth	r3, r3
 800adac:	4619      	mov	r1, r3
 800adae:	4610      	mov	r0, r2
 800adb0:	f7fe f8ae 	bl	8008f10 <pbuf_header>
    p->tot_len -= opt2len;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	891a      	ldrh	r2, [r3, #8]
 800adb8:	8a3b      	ldrh	r3, [r7, #16]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	895b      	ldrh	r3, [r3, #10]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d005      	beq.n	800add6 <tcp_input+0x13e>
 800adca:	4b3e      	ldr	r3, [pc, #248]	; (800aec4 <tcp_input+0x22c>)
 800adcc:	22cf      	movs	r2, #207	; 0xcf
 800adce:	4940      	ldr	r1, [pc, #256]	; (800aed0 <tcp_input+0x238>)
 800add0:	483e      	ldr	r0, [pc, #248]	; (800aecc <tcp_input+0x234>)
 800add2:	f00a fc99 	bl	8015708 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	891a      	ldrh	r2, [r3, #8]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	891b      	ldrh	r3, [r3, #8]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d005      	beq.n	800adf0 <tcp_input+0x158>
 800ade4:	4b37      	ldr	r3, [pc, #220]	; (800aec4 <tcp_input+0x22c>)
 800ade6:	22d0      	movs	r2, #208	; 0xd0
 800ade8:	493a      	ldr	r1, [pc, #232]	; (800aed4 <tcp_input+0x23c>)
 800adea:	4838      	ldr	r0, [pc, #224]	; (800aecc <tcp_input+0x234>)
 800adec:	f00a fc8c 	bl	8015708 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800adf0:	4b2f      	ldr	r3, [pc, #188]	; (800aeb0 <tcp_input+0x218>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	881b      	ldrh	r3, [r3, #0]
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	4b2d      	ldr	r3, [pc, #180]	; (800aeb0 <tcp_input+0x218>)
 800adfa:	681c      	ldr	r4, [r3, #0]
 800adfc:	4610      	mov	r0, r2
 800adfe:	f7fc ff7f 	bl	8007d00 <lwip_htons>
 800ae02:	4603      	mov	r3, r0
 800ae04:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ae06:	4b2a      	ldr	r3, [pc, #168]	; (800aeb0 <tcp_input+0x218>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	885b      	ldrh	r3, [r3, #2]
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	4b28      	ldr	r3, [pc, #160]	; (800aeb0 <tcp_input+0x218>)
 800ae10:	681c      	ldr	r4, [r3, #0]
 800ae12:	4610      	mov	r0, r2
 800ae14:	f7fc ff74 	bl	8007d00 <lwip_htons>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae1c:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <tcp_input+0x218>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685a      	ldr	r2, [r3, #4]
 800ae22:	4b23      	ldr	r3, [pc, #140]	; (800aeb0 <tcp_input+0x218>)
 800ae24:	681c      	ldr	r4, [r3, #0]
 800ae26:	4610      	mov	r0, r2
 800ae28:	f7fc ff78 	bl	8007d1c <lwip_htonl>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6863      	ldr	r3, [r4, #4]
 800ae32:	4a29      	ldr	r2, [pc, #164]	; (800aed8 <tcp_input+0x240>)
 800ae34:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae36:	4b1e      	ldr	r3, [pc, #120]	; (800aeb0 <tcp_input+0x218>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	4b1c      	ldr	r3, [pc, #112]	; (800aeb0 <tcp_input+0x218>)
 800ae3e:	681c      	ldr	r4, [r3, #0]
 800ae40:	4610      	mov	r0, r2
 800ae42:	f7fc ff6b 	bl	8007d1c <lwip_htonl>
 800ae46:	4603      	mov	r3, r0
 800ae48:	60a3      	str	r3, [r4, #8]
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	4a23      	ldr	r2, [pc, #140]	; (800aedc <tcp_input+0x244>)
 800ae4e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ae50:	4b17      	ldr	r3, [pc, #92]	; (800aeb0 <tcp_input+0x218>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	89db      	ldrh	r3, [r3, #14]
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <tcp_input+0x218>)
 800ae5a:	681c      	ldr	r4, [r3, #0]
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	f7fc ff4f 	bl	8007d00 <lwip_htons>
 800ae62:	4603      	mov	r3, r0
 800ae64:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ae66:	4b12      	ldr	r3, [pc, #72]	; (800aeb0 <tcp_input+0x218>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	899b      	ldrh	r3, [r3, #12]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fc ff46 	bl	8007d00 <lwip_htons>
 800ae74:	4603      	mov	r3, r0
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	4b18      	ldr	r3, [pc, #96]	; (800aee0 <tcp_input+0x248>)
 800ae80:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	891a      	ldrh	r2, [r3, #8]
 800ae86:	4b16      	ldr	r3, [pc, #88]	; (800aee0 <tcp_input+0x248>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	bf14      	ite	ne
 800ae92:	2301      	movne	r3, #1
 800ae94:	2300      	moveq	r3, #0
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	4413      	add	r3, r2
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <tcp_input+0x24c>)
 800aea0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aea6:	4b10      	ldr	r3, [pc, #64]	; (800aee8 <tcp_input+0x250>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	e082      	b.n	800afb4 <tcp_input+0x31c>
 800aeae:	bf00      	nop
 800aeb0:	20000254 	.word	0x20000254
 800aeb4:	200003a0 	.word	0x200003a0
 800aeb8:	20000258 	.word	0x20000258
 800aebc:	2000025c 	.word	0x2000025c
 800aec0:	2000025a 	.word	0x2000025a
 800aec4:	080171ac 	.word	0x080171ac
 800aec8:	080171e0 	.word	0x080171e0
 800aecc:	080171f0 	.word	0x080171f0
 800aed0:	08017218 	.word	0x08017218
 800aed4:	08017224 	.word	0x08017224
 800aed8:	20000264 	.word	0x20000264
 800aedc:	20000268 	.word	0x20000268
 800aee0:	20000270 	.word	0x20000270
 800aee4:	2000026e 	.word	0x2000026e
 800aee8:	200038f0 	.word	0x200038f0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	7d1b      	ldrb	r3, [r3, #20]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d105      	bne.n	800af00 <tcp_input+0x268>
 800aef4:	4b8f      	ldr	r3, [pc, #572]	; (800b134 <tcp_input+0x49c>)
 800aef6:	22e2      	movs	r2, #226	; 0xe2
 800aef8:	498f      	ldr	r1, [pc, #572]	; (800b138 <tcp_input+0x4a0>)
 800aefa:	4890      	ldr	r0, [pc, #576]	; (800b13c <tcp_input+0x4a4>)
 800aefc:	f00a fc04 	bl	8015708 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	7d1b      	ldrb	r3, [r3, #20]
 800af04:	2b0a      	cmp	r3, #10
 800af06:	d105      	bne.n	800af14 <tcp_input+0x27c>
 800af08:	4b8a      	ldr	r3, [pc, #552]	; (800b134 <tcp_input+0x49c>)
 800af0a:	22e3      	movs	r2, #227	; 0xe3
 800af0c:	498c      	ldr	r1, [pc, #560]	; (800b140 <tcp_input+0x4a8>)
 800af0e:	488b      	ldr	r0, [pc, #556]	; (800b13c <tcp_input+0x4a4>)
 800af10:	f00a fbfa 	bl	8015708 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	7d1b      	ldrb	r3, [r3, #20]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d105      	bne.n	800af28 <tcp_input+0x290>
 800af1c:	4b85      	ldr	r3, [pc, #532]	; (800b134 <tcp_input+0x49c>)
 800af1e:	22e4      	movs	r2, #228	; 0xe4
 800af20:	4988      	ldr	r1, [pc, #544]	; (800b144 <tcp_input+0x4ac>)
 800af22:	4886      	ldr	r0, [pc, #536]	; (800b13c <tcp_input+0x4a4>)
 800af24:	f00a fbf0 	bl	8015708 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	8b1a      	ldrh	r2, [r3, #24]
 800af2c:	4b86      	ldr	r3, [pc, #536]	; (800b148 <tcp_input+0x4b0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	b29b      	uxth	r3, r3
 800af34:	429a      	cmp	r2, r3
 800af36:	d138      	bne.n	800afaa <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	8ada      	ldrh	r2, [r3, #22]
 800af3c:	4b82      	ldr	r3, [pc, #520]	; (800b148 <tcp_input+0x4b0>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	885b      	ldrh	r3, [r3, #2]
 800af42:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800af44:	429a      	cmp	r2, r3
 800af46:	d130      	bne.n	800afaa <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	4b7f      	ldr	r3, [pc, #508]	; (800b14c <tcp_input+0x4b4>)
 800af4e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800af50:	429a      	cmp	r2, r3
 800af52:	d12a      	bne.n	800afaa <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	4b7c      	ldr	r3, [pc, #496]	; (800b14c <tcp_input+0x4b4>)
 800af5a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d124      	bne.n	800afaa <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	69fa      	ldr	r2, [r7, #28]
 800af66:	429a      	cmp	r2, r3
 800af68:	d105      	bne.n	800af76 <tcp_input+0x2de>
 800af6a:	4b72      	ldr	r3, [pc, #456]	; (800b134 <tcp_input+0x49c>)
 800af6c:	22ec      	movs	r2, #236	; 0xec
 800af6e:	4978      	ldr	r1, [pc, #480]	; (800b150 <tcp_input+0x4b8>)
 800af70:	4872      	ldr	r0, [pc, #456]	; (800b13c <tcp_input+0x4a4>)
 800af72:	f00a fbc9 	bl	8015708 <iprintf>
      if (prev != NULL) {
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00a      	beq.n	800af92 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800af84:	4b73      	ldr	r3, [pc, #460]	; (800b154 <tcp_input+0x4bc>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800af8c:	4a71      	ldr	r2, [pc, #452]	; (800b154 <tcp_input+0x4bc>)
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	69fa      	ldr	r2, [r7, #28]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d10f      	bne.n	800afbc <tcp_input+0x324>
 800af9c:	4b65      	ldr	r3, [pc, #404]	; (800b134 <tcp_input+0x49c>)
 800af9e:	22f4      	movs	r2, #244	; 0xf4
 800afa0:	496d      	ldr	r1, [pc, #436]	; (800b158 <tcp_input+0x4c0>)
 800afa2:	4866      	ldr	r0, [pc, #408]	; (800b13c <tcp_input+0x4a4>)
 800afa4:	f00a fbb0 	bl	8015708 <iprintf>
      break;
 800afa8:	e008      	b.n	800afbc <tcp_input+0x324>
    }
    prev = pcb;
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	61fb      	str	r3, [r7, #28]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d198      	bne.n	800aeec <tcp_input+0x254>
 800afba:	e000      	b.n	800afbe <tcp_input+0x326>
      break;
 800afbc:	bf00      	nop
  }

  if (pcb == NULL) {
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d173      	bne.n	800b0ac <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800afc4:	4b65      	ldr	r3, [pc, #404]	; (800b15c <tcp_input+0x4c4>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	61fb      	str	r3, [r7, #28]
 800afca:	e02f      	b.n	800b02c <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	7d1b      	ldrb	r3, [r3, #20]
 800afd0:	2b0a      	cmp	r3, #10
 800afd2:	d005      	beq.n	800afe0 <tcp_input+0x348>
 800afd4:	4b57      	ldr	r3, [pc, #348]	; (800b134 <tcp_input+0x49c>)
 800afd6:	22fe      	movs	r2, #254	; 0xfe
 800afd8:	4961      	ldr	r1, [pc, #388]	; (800b160 <tcp_input+0x4c8>)
 800afda:	4858      	ldr	r0, [pc, #352]	; (800b13c <tcp_input+0x4a4>)
 800afdc:	f00a fb94 	bl	8015708 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	8b1a      	ldrh	r2, [r3, #24]
 800afe4:	4b58      	ldr	r3, [pc, #352]	; (800b148 <tcp_input+0x4b0>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	b29b      	uxth	r3, r3
 800afec:	429a      	cmp	r2, r3
 800afee:	d11a      	bne.n	800b026 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	8ada      	ldrh	r2, [r3, #22]
 800aff4:	4b54      	ldr	r3, [pc, #336]	; (800b148 <tcp_input+0x4b0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	885b      	ldrh	r3, [r3, #2]
 800affa:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800affc:	429a      	cmp	r2, r3
 800affe:	d112      	bne.n	800b026 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	4b51      	ldr	r3, [pc, #324]	; (800b14c <tcp_input+0x4b4>)
 800b006:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b008:	429a      	cmp	r2, r3
 800b00a:	d10c      	bne.n	800b026 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	4b4e      	ldr	r3, [pc, #312]	; (800b14c <tcp_input+0x4b4>)
 800b012:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b014:	429a      	cmp	r2, r3
 800b016:	d106      	bne.n	800b026 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800b018:	69f8      	ldr	r0, [r7, #28]
 800b01a:	f000 fb15 	bl	800b648 <tcp_timewait_input>
        pbuf_free(p);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7fd ff9a 	bl	8008f58 <pbuf_free>
        return;
 800b024:	e1da      	b.n	800b3dc <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	61fb      	str	r3, [r7, #28]
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1cc      	bne.n	800afcc <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b032:	2300      	movs	r3, #0
 800b034:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b036:	4b4b      	ldr	r3, [pc, #300]	; (800b164 <tcp_input+0x4cc>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e019      	b.n	800b072 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	8ada      	ldrh	r2, [r3, #22]
 800b042:	4b41      	ldr	r3, [pc, #260]	; (800b148 <tcp_input+0x4b0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	885b      	ldrh	r3, [r3, #2]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d10c      	bne.n	800b068 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	4b3e      	ldr	r3, [pc, #248]	; (800b14c <tcp_input+0x4b4>)
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	429a      	cmp	r2, r3
 800b058:	d00f      	beq.n	800b07a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00d      	beq.n	800b07c <tcp_input+0x3e4>
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d009      	beq.n	800b07c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	617b      	str	r3, [r7, #20]
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e2      	bne.n	800b03e <tcp_input+0x3a6>
 800b078:	e000      	b.n	800b07c <tcp_input+0x3e4>
            break;
 800b07a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d014      	beq.n	800b0ac <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b090:	4b34      	ldr	r3, [pc, #208]	; (800b164 <tcp_input+0x4cc>)
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b098:	4a32      	ldr	r2, [pc, #200]	; (800b164 <tcp_input+0x4cc>)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800b09e:	6978      	ldr	r0, [r7, #20]
 800b0a0:	f000 f9f0 	bl	800b484 <tcp_listen_input>
      pbuf_free(p);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fd ff57 	bl	8008f58 <pbuf_free>
      return;
 800b0aa:	e197      	b.n	800b3dc <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 8164 	beq.w	800b37c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b0b4:	4b2c      	ldr	r3, [pc, #176]	; (800b168 <tcp_input+0x4d0>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	891a      	ldrh	r2, [r3, #8]
 800b0be:	4b2a      	ldr	r3, [pc, #168]	; (800b168 <tcp_input+0x4d0>)
 800b0c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b0c2:	4a29      	ldr	r2, [pc, #164]	; (800b168 <tcp_input+0x4d0>)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b0c8:	4b1f      	ldr	r3, [pc, #124]	; (800b148 <tcp_input+0x4b0>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a26      	ldr	r2, [pc, #152]	; (800b168 <tcp_input+0x4d0>)
 800b0ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b0d0:	4b26      	ldr	r3, [pc, #152]	; (800b16c <tcp_input+0x4d4>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b0d6:	4b26      	ldr	r3, [pc, #152]	; (800b170 <tcp_input+0x4d8>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b0dc:	4b25      	ldr	r3, [pc, #148]	; (800b174 <tcp_input+0x4dc>)
 800b0de:	2200      	movs	r2, #0
 800b0e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b0e2:	4b25      	ldr	r3, [pc, #148]	; (800b178 <tcp_input+0x4e0>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	f003 0308 	and.w	r3, r3, #8
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d006      	beq.n	800b0fc <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	7b5b      	ldrb	r3, [r3, #13]
 800b0f2:	f043 0301 	orr.w	r3, r3, #1
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b100:	2b00      	cmp	r3, #0
 800b102:	d03d      	beq.n	800b180 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b104:	69f8      	ldr	r0, [r7, #28]
 800b106:	f7ff f991 	bl	800a42c <tcp_process_refused_data>
 800b10a:	4603      	mov	r3, r0
 800b10c:	f113 0f0d 	cmn.w	r3, #13
 800b110:	d007      	beq.n	800b122 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b116:	2b00      	cmp	r3, #0
 800b118:	d032      	beq.n	800b180 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b11a:	4b18      	ldr	r3, [pc, #96]	; (800b17c <tcp_input+0x4e4>)
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d02e      	beq.n	800b180 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b126:	2b00      	cmp	r3, #0
 800b128:	f040 8108 	bne.w	800b33c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b12c:	69f8      	ldr	r0, [r7, #28]
 800b12e:	f002 fe3d 	bl	800ddac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b132:	e103      	b.n	800b33c <tcp_input+0x6a4>
 800b134:	080171ac 	.word	0x080171ac
 800b138:	08017244 	.word	0x08017244
 800b13c:	080171f0 	.word	0x080171f0
 800b140:	0801726c 	.word	0x0801726c
 800b144:	08017298 	.word	0x08017298
 800b148:	20000254 	.word	0x20000254
 800b14c:	200003a0 	.word	0x200003a0
 800b150:	080172c0 	.word	0x080172c0
 800b154:	200038f0 	.word	0x200038f0
 800b158:	080172ec 	.word	0x080172ec
 800b15c:	20003900 	.word	0x20003900
 800b160:	08017318 	.word	0x08017318
 800b164:	200038f8 	.word	0x200038f8
 800b168:	20000244 	.word	0x20000244
 800b16c:	20000274 	.word	0x20000274
 800b170:	20000271 	.word	0x20000271
 800b174:	2000026c 	.word	0x2000026c
 800b178:	20000270 	.word	0x20000270
 800b17c:	2000026e 	.word	0x2000026e
      }
    }
    tcp_input_pcb = pcb;
 800b180:	4a98      	ldr	r2, [pc, #608]	; (800b3e4 <tcp_input+0x74c>)
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b186:	69f8      	ldr	r0, [r7, #28]
 800b188:	f000 fac6 	bl	800b718 <tcp_process>
 800b18c:	4603      	mov	r3, r0
 800b18e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b194:	f113 0f0d 	cmn.w	r3, #13
 800b198:	f000 80d2 	beq.w	800b340 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800b19c:	4b92      	ldr	r3, [pc, #584]	; (800b3e8 <tcp_input+0x750>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d016      	beq.n	800b1d6 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d008      	beq.n	800b1c4 <tcp_input+0x52c>
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1b8:	69fa      	ldr	r2, [r7, #28]
 800b1ba:	6912      	ldr	r2, [r2, #16]
 800b1bc:	f06f 010d 	mvn.w	r1, #13
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b1c4:	69f9      	ldr	r1, [r7, #28]
 800b1c6:	4889      	ldr	r0, [pc, #548]	; (800b3ec <tcp_input+0x754>)
 800b1c8:	f7ff fc4c 	bl	800aa64 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800b1cc:	69f9      	ldr	r1, [r7, #28]
 800b1ce:	2001      	movs	r0, #1
 800b1d0:	f7fd f990 	bl	80084f4 <memp_free>
 800b1d4:	e0bf      	b.n	800b356 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b1da:	4b85      	ldr	r3, [pc, #532]	; (800b3f0 <tcp_input+0x758>)
 800b1dc:	881b      	ldrh	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01b      	beq.n	800b21a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b1e2:	4b83      	ldr	r3, [pc, #524]	; (800b3f0 <tcp_input+0x758>)
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <tcp_input+0x56c>
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	6910      	ldr	r0, [r2, #16]
 800b1f8:	89fa      	ldrh	r2, [r7, #14]
 800b1fa:	69f9      	ldr	r1, [r7, #28]
 800b1fc:	4798      	blx	r3
 800b1fe:	4603      	mov	r3, r0
 800b200:	74fb      	strb	r3, [r7, #19]
 800b202:	e001      	b.n	800b208 <tcp_input+0x570>
 800b204:	2300      	movs	r3, #0
 800b206:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b20c:	f113 0f0d 	cmn.w	r3, #13
 800b210:	f000 8098 	beq.w	800b344 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b214:	4b76      	ldr	r3, [pc, #472]	; (800b3f0 <tcp_input+0x758>)
 800b216:	2200      	movs	r2, #0
 800b218:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b21a:	69f8      	ldr	r0, [r7, #28]
 800b21c:	f000 f900 	bl	800b420 <tcp_input_delayed_close>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	f040 8090 	bne.w	800b348 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b228:	4b72      	ldr	r3, [pc, #456]	; (800b3f4 <tcp_input+0x75c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d041      	beq.n	800b2b4 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b234:	2b00      	cmp	r3, #0
 800b236:	d006      	beq.n	800b246 <tcp_input+0x5ae>
 800b238:	4b6f      	ldr	r3, [pc, #444]	; (800b3f8 <tcp_input+0x760>)
 800b23a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b23e:	496f      	ldr	r1, [pc, #444]	; (800b3fc <tcp_input+0x764>)
 800b240:	486f      	ldr	r0, [pc, #444]	; (800b400 <tcp_input+0x768>)
 800b242:	f00a fa61 	bl	8015708 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	7e9b      	ldrb	r3, [r3, #26]
 800b24a:	f003 0310 	and.w	r3, r3, #16
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d008      	beq.n	800b264 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b252:	4b68      	ldr	r3, [pc, #416]	; (800b3f4 <tcp_input+0x75c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4618      	mov	r0, r3
 800b258:	f7fd fe7e 	bl	8008f58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b25c:	69f8      	ldr	r0, [r7, #28]
 800b25e:	f7fe fb7d 	bl	800995c <tcp_abort>
            goto aborted;
 800b262:	e078      	b.n	800b356 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00c      	beq.n	800b288 <tcp_input+0x5f0>
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	6918      	ldr	r0, [r3, #16]
 800b278:	4b5e      	ldr	r3, [pc, #376]	; (800b3f4 <tcp_input+0x75c>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	2300      	movs	r3, #0
 800b27e:	69f9      	ldr	r1, [r7, #28]
 800b280:	47a0      	blx	r4
 800b282:	4603      	mov	r3, r0
 800b284:	74fb      	strb	r3, [r7, #19]
 800b286:	e008      	b.n	800b29a <tcp_input+0x602>
 800b288:	4b5a      	ldr	r3, [pc, #360]	; (800b3f4 <tcp_input+0x75c>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	2300      	movs	r3, #0
 800b28e:	69f9      	ldr	r1, [r7, #28]
 800b290:	2000      	movs	r0, #0
 800b292:	f7ff f98b 	bl	800a5ac <tcp_recv_null>
 800b296:	4603      	mov	r3, r0
 800b298:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b29a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b29e:	f113 0f0d 	cmn.w	r3, #13
 800b2a2:	d053      	beq.n	800b34c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b2a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b2ac:	4b51      	ldr	r3, [pc, #324]	; (800b3f4 <tcp_input+0x75c>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b2b4:	4b4c      	ldr	r3, [pc, #304]	; (800b3e8 <tcp_input+0x750>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d030      	beq.n	800b322 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d009      	beq.n	800b2dc <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2cc:	7b5a      	ldrb	r2, [r3, #13]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d2:	f042 0220 	orr.w	r2, r2, #32
 800b2d6:	b2d2      	uxtb	r2, r2
 800b2d8:	735a      	strb	r2, [r3, #13]
 800b2da:	e022      	b.n	800b322 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b2e4:	d005      	beq.n	800b2f2 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00b      	beq.n	800b314 <tcp_input+0x67c>
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	6918      	ldr	r0, [r3, #16]
 800b306:	2300      	movs	r3, #0
 800b308:	2200      	movs	r2, #0
 800b30a:	69f9      	ldr	r1, [r7, #28]
 800b30c:	47a0      	blx	r4
 800b30e:	4603      	mov	r3, r0
 800b310:	74fb      	strb	r3, [r7, #19]
 800b312:	e001      	b.n	800b318 <tcp_input+0x680>
 800b314:	2300      	movs	r3, #0
 800b316:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b318:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b31c:	f113 0f0d 	cmn.w	r3, #13
 800b320:	d016      	beq.n	800b350 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b322:	4b30      	ldr	r3, [pc, #192]	; (800b3e4 <tcp_input+0x74c>)
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b328:	69f8      	ldr	r0, [r7, #28]
 800b32a:	f000 f879 	bl	800b420 <tcp_input_delayed_close>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10f      	bne.n	800b354 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b334:	69f8      	ldr	r0, [r7, #28]
 800b336:	f002 fd95 	bl	800de64 <tcp_output>
 800b33a:	e00c      	b.n	800b356 <tcp_input+0x6be>
        goto aborted;
 800b33c:	bf00      	nop
 800b33e:	e00a      	b.n	800b356 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b340:	bf00      	nop
 800b342:	e008      	b.n	800b356 <tcp_input+0x6be>
              goto aborted;
 800b344:	bf00      	nop
 800b346:	e006      	b.n	800b356 <tcp_input+0x6be>
          goto aborted;
 800b348:	bf00      	nop
 800b34a:	e004      	b.n	800b356 <tcp_input+0x6be>
            goto aborted;
 800b34c:	bf00      	nop
 800b34e:	e002      	b.n	800b356 <tcp_input+0x6be>
              goto aborted;
 800b350:	bf00      	nop
 800b352:	e000      	b.n	800b356 <tcp_input+0x6be>
          goto aborted;
 800b354:	bf00      	nop
    tcp_input_pcb = NULL;
 800b356:	4b23      	ldr	r3, [pc, #140]	; (800b3e4 <tcp_input+0x74c>)
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b35c:	4b25      	ldr	r3, [pc, #148]	; (800b3f4 <tcp_input+0x75c>)
 800b35e:	2200      	movs	r2, #0
 800b360:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800b362:	4b28      	ldr	r3, [pc, #160]	; (800b404 <tcp_input+0x76c>)
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d037      	beq.n	800b3da <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800b36a:	4b26      	ldr	r3, [pc, #152]	; (800b404 <tcp_input+0x76c>)
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fd fdf2 	bl	8008f58 <pbuf_free>
      inseg.p = NULL;
 800b374:	4b23      	ldr	r3, [pc, #140]	; (800b404 <tcp_input+0x76c>)
 800b376:	2200      	movs	r2, #0
 800b378:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b37a:	e02e      	b.n	800b3da <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b37c:	4b22      	ldr	r3, [pc, #136]	; (800b408 <tcp_input+0x770>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	899b      	ldrh	r3, [r3, #12]
 800b382:	b29b      	uxth	r3, r3
 800b384:	4618      	mov	r0, r3
 800b386:	f7fc fcbb 	bl	8007d00 <lwip_htons>
 800b38a:	4603      	mov	r3, r0
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d115      	bne.n	800b3c0 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b394:	4b1d      	ldr	r3, [pc, #116]	; (800b40c <tcp_input+0x774>)
 800b396:	6818      	ldr	r0, [r3, #0]
 800b398:	4b1d      	ldr	r3, [pc, #116]	; (800b410 <tcp_input+0x778>)
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	4b1d      	ldr	r3, [pc, #116]	; (800b414 <tcp_input+0x77c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3a4:	4b18      	ldr	r3, [pc, #96]	; (800b408 <tcp_input+0x770>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3a8:	885b      	ldrh	r3, [r3, #2]
 800b3aa:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3ac:	4a16      	ldr	r2, [pc, #88]	; (800b408 <tcp_input+0x770>)
 800b3ae:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3b0:	8812      	ldrh	r2, [r2, #0]
 800b3b2:	b292      	uxth	r2, r2
 800b3b4:	9201      	str	r2, [sp, #4]
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	4b17      	ldr	r3, [pc, #92]	; (800b418 <tcp_input+0x780>)
 800b3ba:	4a18      	ldr	r2, [pc, #96]	; (800b41c <tcp_input+0x784>)
 800b3bc:	f002 ffdc 	bl	800e378 <tcp_rst>
    pbuf_free(p);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7fd fdc9 	bl	8008f58 <pbuf_free>
  return;
 800b3c6:	e008      	b.n	800b3da <tcp_input+0x742>
    goto dropped;
 800b3c8:	bf00      	nop
 800b3ca:	e002      	b.n	800b3d2 <tcp_input+0x73a>
dropped:
 800b3cc:	bf00      	nop
 800b3ce:	e000      	b.n	800b3d2 <tcp_input+0x73a>
      goto dropped;
 800b3d0:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7fd fdc0 	bl	8008f58 <pbuf_free>
 800b3d8:	e000      	b.n	800b3dc <tcp_input+0x744>
  return;
 800b3da:	bf00      	nop
}
 800b3dc:	3724      	adds	r7, #36	; 0x24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd90      	pop	{r4, r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20003904 	.word	0x20003904
 800b3e8:	20000271 	.word	0x20000271
 800b3ec:	200038f0 	.word	0x200038f0
 800b3f0:	2000026c 	.word	0x2000026c
 800b3f4:	20000274 	.word	0x20000274
 800b3f8:	080171ac 	.word	0x080171ac
 800b3fc:	08017348 	.word	0x08017348
 800b400:	080171f0 	.word	0x080171f0
 800b404:	20000244 	.word	0x20000244
 800b408:	20000254 	.word	0x20000254
 800b40c:	20000268 	.word	0x20000268
 800b410:	2000026e 	.word	0x2000026e
 800b414:	20000264 	.word	0x20000264
 800b418:	200003b0 	.word	0x200003b0
 800b41c:	200003b4 	.word	0x200003b4

0800b420 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800b428:	4b14      	ldr	r3, [pc, #80]	; (800b47c <tcp_input_delayed_close+0x5c>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	f003 0310 	and.w	r3, r3, #16
 800b430:	2b00      	cmp	r3, #0
 800b432:	d01d      	beq.n	800b470 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	7e9b      	ldrb	r3, [r3, #26]
 800b438:	f003 0310 	and.w	r3, r3, #16
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10d      	bne.n	800b45c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d008      	beq.n	800b45c <tcp_input_delayed_close+0x3c>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	6912      	ldr	r2, [r2, #16]
 800b454:	f06f 010e 	mvn.w	r1, #14
 800b458:	4610      	mov	r0, r2
 800b45a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b45c:	6879      	ldr	r1, [r7, #4]
 800b45e:	4808      	ldr	r0, [pc, #32]	; (800b480 <tcp_input_delayed_close+0x60>)
 800b460:	f7ff fb00 	bl	800aa64 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800b464:	6879      	ldr	r1, [r7, #4]
 800b466:	2001      	movs	r0, #1
 800b468:	f7fd f844 	bl	80084f4 <memp_free>
    return 1;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e000      	b.n	800b472 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20000271 	.word	0x20000271
 800b480:	200038f0 	.word	0x200038f0

0800b484 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af02      	add	r7, sp, #8
 800b48a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b48c:	4b64      	ldr	r3, [pc, #400]	; (800b620 <tcp_listen_input+0x19c>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b00      	cmp	r3, #0
 800b496:	f040 80bc 	bne.w	800b612 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b49a:	4b61      	ldr	r3, [pc, #388]	; (800b620 <tcp_listen_input+0x19c>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	f003 0310 	and.w	r3, r3, #16
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d016      	beq.n	800b4d4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4a6:	4b5f      	ldr	r3, [pc, #380]	; (800b624 <tcp_listen_input+0x1a0>)
 800b4a8:	6818      	ldr	r0, [r3, #0]
 800b4aa:	4b5f      	ldr	r3, [pc, #380]	; (800b628 <tcp_listen_input+0x1a4>)
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	4b5e      	ldr	r3, [pc, #376]	; (800b62c <tcp_listen_input+0x1a8>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4b6:	4b5e      	ldr	r3, [pc, #376]	; (800b630 <tcp_listen_input+0x1ac>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4ba:	885b      	ldrh	r3, [r3, #2]
 800b4bc:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4be:	4a5c      	ldr	r2, [pc, #368]	; (800b630 <tcp_listen_input+0x1ac>)
 800b4c0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4c2:	8812      	ldrh	r2, [r2, #0]
 800b4c4:	b292      	uxth	r2, r2
 800b4c6:	9201      	str	r2, [sp, #4]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	4b5a      	ldr	r3, [pc, #360]	; (800b634 <tcp_listen_input+0x1b0>)
 800b4cc:	4a5a      	ldr	r2, [pc, #360]	; (800b638 <tcp_listen_input+0x1b4>)
 800b4ce:	f002 ff53 	bl	800e378 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b4d2:	e0a0      	b.n	800b616 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800b4d4:	4b52      	ldr	r3, [pc, #328]	; (800b620 <tcp_listen_input+0x19c>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 809a 	beq.w	800b616 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7d5b      	ldrb	r3, [r3, #21]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff f93e 	bl	800a768 <tcp_alloc>
 800b4ec:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d111      	bne.n	800b518 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00a      	beq.n	800b512 <tcp_listen_input+0x8e>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6910      	ldr	r0, [r2, #16]
 800b504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b508:	2100      	movs	r1, #0
 800b50a:	4798      	blx	r3
 800b50c:	4603      	mov	r3, r0
 800b50e:	73bb      	strb	r3, [r7, #14]
      return;
 800b510:	e082      	b.n	800b618 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b512:	23f0      	movs	r3, #240	; 0xf0
 800b514:	73bb      	strb	r3, [r7, #14]
      return;
 800b516:	e07f      	b.n	800b618 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b518:	4b48      	ldr	r3, [pc, #288]	; (800b63c <tcp_listen_input+0x1b8>)
 800b51a:	695a      	ldr	r2, [r3, #20]
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b520:	4b46      	ldr	r3, [pc, #280]	; (800b63c <tcp_listen_input+0x1b8>)
 800b522:	691a      	ldr	r2, [r3, #16]
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	8ada      	ldrh	r2, [r3, #22]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b530:	4b3f      	ldr	r3, [pc, #252]	; (800b630 <tcp_listen_input+0x1ac>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	b29a      	uxth	r2, r3
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2203      	movs	r2, #3
 800b540:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b542:	4b3a      	ldr	r3, [pc, #232]	; (800b62c <tcp_listen_input+0x1a8>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b554:	6978      	ldr	r0, [r7, #20]
 800b556:	f7ff fb01 	bl	800ab5c <tcp_next_iss>
 800b55a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b574:	4b2d      	ldr	r3, [pc, #180]	; (800b62c <tcp_listen_input+0x1a8>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	1e5a      	subs	r2, r3, #1
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691a      	ldr	r2, [r3, #16]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	7a1b      	ldrb	r3, [r3, #8]
 800b590:	f003 030c 	and.w	r3, r3, #12
 800b594:	b2da      	uxtb	r2, r3
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b59a:	4b29      	ldr	r3, [pc, #164]	; (800b640 <tcp_listen_input+0x1bc>)
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	60da      	str	r2, [r3, #12]
 800b5a2:	4a27      	ldr	r2, [pc, #156]	; (800b640 <tcp_listen_input+0x1bc>)
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	f003 f936 	bl	800e818 <tcp_timer_needed>
 800b5ac:	4b25      	ldr	r3, [pc, #148]	; (800b644 <tcp_listen_input+0x1c0>)
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b5b2:	6978      	ldr	r0, [r7, #20]
 800b5b4:	f001 fd14 	bl	800cfe0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b5b8:	4b1d      	ldr	r3, [pc, #116]	; (800b630 <tcp_listen_input+0x1ac>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	89db      	ldrh	r3, [r3, #14]
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4610      	mov	r0, r2
 800b5de:	f7ff fad5 	bl	800ab8c <tcp_eff_send_mss_impl>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b5ea:	2112      	movs	r1, #18
 800b5ec:	6978      	ldr	r0, [r7, #20]
 800b5ee:	f002 fae1 	bl	800dbb4 <tcp_enqueue_flags>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800b5fe:	2100      	movs	r1, #0
 800b600:	6978      	ldr	r0, [r7, #20]
 800b602:	f7fe f8f9 	bl	80097f8 <tcp_abandon>
      return;
 800b606:	e007      	b.n	800b618 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800b608:	6978      	ldr	r0, [r7, #20]
 800b60a:	f002 fc2b 	bl	800de64 <tcp_output>
  return;
 800b60e:	bf00      	nop
 800b610:	e001      	b.n	800b616 <tcp_listen_input+0x192>
    return;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <tcp_listen_input+0x194>
  return;
 800b616:	bf00      	nop
}
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000270 	.word	0x20000270
 800b624:	20000268 	.word	0x20000268
 800b628:	2000026e 	.word	0x2000026e
 800b62c:	20000264 	.word	0x20000264
 800b630:	20000254 	.word	0x20000254
 800b634:	200003b0 	.word	0x200003b0
 800b638:	200003b4 	.word	0x200003b4
 800b63c:	200003a0 	.word	0x200003a0
 800b640:	200038f0 	.word	0x200038f0
 800b644:	200038ec 	.word	0x200038ec

0800b648 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af02      	add	r7, sp, #8
 800b64e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b650:	4b29      	ldr	r3, [pc, #164]	; (800b6f8 <tcp_timewait_input+0xb0>)
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	f003 0304 	and.w	r3, r3, #4
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d147      	bne.n	800b6ec <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b65c:	4b26      	ldr	r3, [pc, #152]	; (800b6f8 <tcp_timewait_input+0xb0>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	f003 0302 	and.w	r3, r3, #2
 800b664:	2b00      	cmp	r3, #0
 800b666:	d027      	beq.n	800b6b8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b668:	4b24      	ldr	r3, [pc, #144]	; (800b6fc <tcp_timewait_input+0xb4>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	db2a      	blt.n	800b6cc <tcp_timewait_input+0x84>
 800b676:	4b21      	ldr	r3, [pc, #132]	; (800b6fc <tcp_timewait_input+0xb4>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b682:	440b      	add	r3, r1
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	dc20      	bgt.n	800b6cc <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b68a:	4b1d      	ldr	r3, [pc, #116]	; (800b700 <tcp_timewait_input+0xb8>)
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	4b1d      	ldr	r3, [pc, #116]	; (800b704 <tcp_timewait_input+0xbc>)
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	4b19      	ldr	r3, [pc, #100]	; (800b6fc <tcp_timewait_input+0xb4>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b69a:	4b1b      	ldr	r3, [pc, #108]	; (800b708 <tcp_timewait_input+0xc0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b69e:	885b      	ldrh	r3, [r3, #2]
 800b6a0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6a2:	4a19      	ldr	r2, [pc, #100]	; (800b708 <tcp_timewait_input+0xc0>)
 800b6a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6a6:	8812      	ldrh	r2, [r2, #0]
 800b6a8:	b292      	uxth	r2, r2
 800b6aa:	9201      	str	r2, [sp, #4]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	4b17      	ldr	r3, [pc, #92]	; (800b70c <tcp_timewait_input+0xc4>)
 800b6b0:	4a17      	ldr	r2, [pc, #92]	; (800b710 <tcp_timewait_input+0xc8>)
 800b6b2:	f002 fe61 	bl	800e378 <tcp_rst>
      return;
 800b6b6:	e01c      	b.n	800b6f2 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800b6b8:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <tcp_timewait_input+0xb0>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b6c4:	4b13      	ldr	r3, [pc, #76]	; (800b714 <tcp_timewait_input+0xcc>)
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b6cc:	4b0d      	ldr	r3, [pc, #52]	; (800b704 <tcp_timewait_input+0xbc>)
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00d      	beq.n	800b6f0 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	7e9b      	ldrb	r3, [r3, #26]
 800b6d8:	f043 0302 	orr.w	r3, r3, #2
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f002 fbbe 	bl	800de64 <tcp_output>
  }
  return;
 800b6e8:	bf00      	nop
 800b6ea:	e001      	b.n	800b6f0 <tcp_timewait_input+0xa8>
    return;
 800b6ec:	bf00      	nop
 800b6ee:	e000      	b.n	800b6f2 <tcp_timewait_input+0xaa>
  return;
 800b6f0:	bf00      	nop
}
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	20000270 	.word	0x20000270
 800b6fc:	20000264 	.word	0x20000264
 800b700:	20000268 	.word	0x20000268
 800b704:	2000026e 	.word	0x2000026e
 800b708:	20000254 	.word	0x20000254
 800b70c:	200003b0 	.word	0x200003b0
 800b710:	200003b4 	.word	0x200003b4
 800b714:	200038f4 	.word	0x200038f4

0800b718 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08a      	sub	sp, #40	; 0x28
 800b71c:	af02      	add	r7, sp, #8
 800b71e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b720:	2300      	movs	r3, #0
 800b722:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b724:	2300      	movs	r3, #0
 800b726:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b728:	4ba4      	ldr	r3, [pc, #656]	; (800b9bc <tcp_process+0x2a4>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	d04e      	beq.n	800b7d2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	7d1b      	ldrb	r3, [r3, #20]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d108      	bne.n	800b74e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b740:	4b9f      	ldr	r3, [pc, #636]	; (800b9c0 <tcp_process+0x2a8>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d123      	bne.n	800b790 <tcp_process+0x78>
        acceptable = 1;
 800b748:	2301      	movs	r3, #1
 800b74a:	76fb      	strb	r3, [r7, #27]
 800b74c:	e020      	b.n	800b790 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b752:	4b9c      	ldr	r3, [pc, #624]	; (800b9c4 <tcp_process+0x2ac>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d102      	bne.n	800b760 <tcp_process+0x48>
        acceptable = 1;
 800b75a:	2301      	movs	r3, #1
 800b75c:	76fb      	strb	r3, [r7, #27]
 800b75e:	e017      	b.n	800b790 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b760:	4b98      	ldr	r3, [pc, #608]	; (800b9c4 <tcp_process+0x2ac>)
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	db10      	blt.n	800b790 <tcp_process+0x78>
 800b76e:	4b95      	ldr	r3, [pc, #596]	; (800b9c4 <tcp_process+0x2ac>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	6879      	ldr	r1, [r7, #4]
 800b778:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b77a:	440b      	add	r3, r1
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dc06      	bgt.n	800b790 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7e9b      	ldrb	r3, [r3, #26]
 800b786:	f043 0302 	orr.w	r3, r3, #2
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b790:	7efb      	ldrb	r3, [r7, #27]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d01b      	beq.n	800b7ce <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	7d1b      	ldrb	r3, [r3, #20]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d106      	bne.n	800b7ac <tcp_process+0x94>
 800b79e:	4b8a      	ldr	r3, [pc, #552]	; (800b9c8 <tcp_process+0x2b0>)
 800b7a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b7a4:	4989      	ldr	r1, [pc, #548]	; (800b9cc <tcp_process+0x2b4>)
 800b7a6:	488a      	ldr	r0, [pc, #552]	; (800b9d0 <tcp_process+0x2b8>)
 800b7a8:	f009 ffae 	bl	8015708 <iprintf>
      recv_flags |= TF_RESET;
 800b7ac:	4b89      	ldr	r3, [pc, #548]	; (800b9d4 <tcp_process+0x2bc>)
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	f043 0308 	orr.w	r3, r3, #8
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	4b87      	ldr	r3, [pc, #540]	; (800b9d4 <tcp_process+0x2bc>)
 800b7b8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	7e9b      	ldrb	r3, [r3, #26]
 800b7be:	f023 0301 	bic.w	r3, r3, #1
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800b7c8:	f06f 030d 	mvn.w	r3, #13
 800b7cc:	e34d      	b.n	800be6a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e34b      	b.n	800be6a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b7d2:	4b7a      	ldr	r3, [pc, #488]	; (800b9bc <tcp_process+0x2a4>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	f003 0302 	and.w	r3, r3, #2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d010      	beq.n	800b800 <tcp_process+0xe8>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	7d1b      	ldrb	r3, [r3, #20]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d00c      	beq.n	800b800 <tcp_process+0xe8>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d008      	beq.n	800b800 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	7e9b      	ldrb	r3, [r3, #26]
 800b7f2:	f043 0302 	orr.w	r3, r3, #2
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e334      	b.n	800be6a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	7e9b      	ldrb	r3, [r3, #26]
 800b804:	f003 0310 	and.w	r3, r3, #16
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d103      	bne.n	800b814 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b80c:	4b72      	ldr	r3, [pc, #456]	; (800b9d8 <tcp_process+0x2c0>)
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f001 fbdf 	bl	800cfe0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	7d1b      	ldrb	r3, [r3, #20]
 800b826:	3b02      	subs	r3, #2
 800b828:	2b07      	cmp	r3, #7
 800b82a:	f200 830e 	bhi.w	800be4a <tcp_process+0x732>
 800b82e:	a201      	add	r2, pc, #4	; (adr r2, 800b834 <tcp_process+0x11c>)
 800b830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b834:	0800b855 	.word	0x0800b855
 800b838:	0800ba4d 	.word	0x0800ba4d
 800b83c:	0800bba5 	.word	0x0800bba5
 800b840:	0800bbcf 	.word	0x0800bbcf
 800b844:	0800bcf9 	.word	0x0800bcf9
 800b848:	0800bba5 	.word	0x0800bba5
 800b84c:	0800bd85 	.word	0x0800bd85
 800b850:	0800be15 	.word	0x0800be15
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b854:	4b59      	ldr	r3, [pc, #356]	; (800b9bc <tcp_process+0x2a4>)
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	f003 0310 	and.w	r3, r3, #16
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 80cb 	beq.w	800b9f8 <tcp_process+0x2e0>
 800b862:	4b56      	ldr	r3, [pc, #344]	; (800b9bc <tcp_process+0x2a4>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	f003 0302 	and.w	r3, r3, #2
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 80c4 	beq.w	800b9f8 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	4b52      	ldr	r3, [pc, #328]	; (800b9c0 <tcp_process+0x2a8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	f040 80bc 	bne.w	800b9f8 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800b880:	4b50      	ldr	r3, [pc, #320]	; (800b9c4 <tcp_process+0x2ac>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800b892:	4b4b      	ldr	r3, [pc, #300]	; (800b9c0 <tcp_process+0x2a8>)
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800b89a:	4b50      	ldr	r3, [pc, #320]	; (800b9dc <tcp_process+0x2c4>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	89db      	ldrh	r3, [r3, #14]
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b8b4:	4b43      	ldr	r3, [pc, #268]	; (800b9c4 <tcp_process+0x2ac>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	1e5a      	subs	r2, r3, #1
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2204      	movs	r2, #4
 800b8c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	f7ff f95c 	bl	800ab8c <tcp_eff_send_mss_impl>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	f241 121c 	movw	r2, #4380	; 0x111c
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	bf38      	it	cc
 800b8ea:	461a      	movcc	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	bf28      	it	cs
 800b8f6:	4613      	movcs	r3, r2
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <tcp_process+0x200>
 800b90a:	4b2f      	ldr	r3, [pc, #188]	; (800b9c8 <tcp_process+0x2b0>)
 800b90c:	f240 321a 	movw	r2, #794	; 0x31a
 800b910:	4933      	ldr	r1, [pc, #204]	; (800b9e0 <tcp_process+0x2c8>)
 800b912:	482f      	ldr	r0, [pc, #188]	; (800b9d0 <tcp_process+0x2b8>)
 800b914:	f009 fef8 	bl	8015708 <iprintf>
      --pcb->snd_queuelen;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b91e:	3b01      	subs	r3, #1
 800b920:	b29a      	uxth	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b92c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d111      	bne.n	800b958 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b938:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d106      	bne.n	800b94e <tcp_process+0x236>
 800b940:	4b21      	ldr	r3, [pc, #132]	; (800b9c8 <tcp_process+0x2b0>)
 800b942:	f240 3222 	movw	r2, #802	; 0x322
 800b946:	4927      	ldr	r1, [pc, #156]	; (800b9e4 <tcp_process+0x2cc>)
 800b948:	4821      	ldr	r0, [pc, #132]	; (800b9d0 <tcp_process+0x2b8>)
 800b94a:	f009 fedd 	bl	8015708 <iprintf>
        pcb->unsent = rseg->next;
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	669a      	str	r2, [r3, #104]	; 0x68
 800b956:	e003      	b.n	800b960 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800b960:	69f8      	ldr	r0, [r7, #28]
 800b962:	f7fe fde0 	bl	800a526 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d104      	bne.n	800b978 <tcp_process+0x260>
        pcb->rtime = -1;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b974:	861a      	strh	r2, [r3, #48]	; 0x30
 800b976:	e006      	b.n	800b986 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <tcp_process+0x28e>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	6910      	ldr	r0, [r2, #16]
 800b99a:	2200      	movs	r2, #0
 800b99c:	6879      	ldr	r1, [r7, #4]
 800b99e:	4798      	blx	r3
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	76bb      	strb	r3, [r7, #26]
 800b9a4:	e001      	b.n	800b9aa <tcp_process+0x292>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800b9aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9ae:	f113 0f0d 	cmn.w	r3, #13
 800b9b2:	d119      	bne.n	800b9e8 <tcp_process+0x2d0>
        return ERR_ABRT;
 800b9b4:	f06f 030c 	mvn.w	r3, #12
 800b9b8:	e257      	b.n	800be6a <tcp_process+0x752>
 800b9ba:	bf00      	nop
 800b9bc:	20000270 	.word	0x20000270
 800b9c0:	20000268 	.word	0x20000268
 800b9c4:	20000264 	.word	0x20000264
 800b9c8:	080171ac 	.word	0x080171ac
 800b9cc:	08017364 	.word	0x08017364
 800b9d0:	080171f0 	.word	0x080171f0
 800b9d4:	20000271 	.word	0x20000271
 800b9d8:	200038f4 	.word	0x200038f4
 800b9dc:	20000254 	.word	0x20000254
 800b9e0:	08017384 	.word	0x08017384
 800b9e4:	0801739c 	.word	0x0801739c
      }
      tcp_ack_now(pcb);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	7e9b      	ldrb	r3, [r3, #26]
 800b9ec:	f043 0302 	orr.w	r3, r3, #2
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800b9f6:	e22a      	b.n	800be4e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800b9f8:	4b9f      	ldr	r3, [pc, #636]	; (800bc78 <tcp_process+0x560>)
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	f003 0310 	and.w	r3, r3, #16
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 8224 	beq.w	800be4e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba06:	4b9d      	ldr	r3, [pc, #628]	; (800bc7c <tcp_process+0x564>)
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	4b9d      	ldr	r3, [pc, #628]	; (800bc80 <tcp_process+0x568>)
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	4b9c      	ldr	r3, [pc, #624]	; (800bc84 <tcp_process+0x56c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba16:	4b9c      	ldr	r3, [pc, #624]	; (800bc88 <tcp_process+0x570>)
 800ba18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba1a:	885b      	ldrh	r3, [r3, #2]
 800ba1c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba1e:	4a9a      	ldr	r2, [pc, #616]	; (800bc88 <tcp_process+0x570>)
 800ba20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba22:	8812      	ldrh	r2, [r2, #0]
 800ba24:	b292      	uxth	r2, r2
 800ba26:	9201      	str	r2, [sp, #4]
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	4b98      	ldr	r3, [pc, #608]	; (800bc8c <tcp_process+0x574>)
 800ba2c:	4a98      	ldr	r2, [pc, #608]	; (800bc90 <tcp_process+0x578>)
 800ba2e:	f002 fca3 	bl	800e378 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba38:	2b05      	cmp	r3, #5
 800ba3a:	f200 8208 	bhi.w	800be4e <tcp_process+0x736>
        pcb->rtime = 0;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f002 fd0d 	bl	800e464 <tcp_rexmit_rto>
    break;
 800ba4a:	e200      	b.n	800be4e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800ba4c:	4b8a      	ldr	r3, [pc, #552]	; (800bc78 <tcp_process+0x560>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8091 	beq.w	800bb7c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ba5a:	4b88      	ldr	r3, [pc, #544]	; (800bc7c <tcp_process+0x564>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	3b01      	subs	r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	db71      	blt.n	800bb4e <tcp_process+0x436>
 800ba6a:	4b84      	ldr	r3, [pc, #528]	; (800bc7c <tcp_process+0x564>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	dc6a      	bgt.n	800bb4e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00b      	beq.n	800ba9e <tcp_process+0x386>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <tcp_process+0x386>
 800ba90:	4b80      	ldr	r3, [pc, #512]	; (800bc94 <tcp_process+0x57c>)
 800ba92:	f240 3251 	movw	r2, #849	; 0x351
 800ba96:	4980      	ldr	r1, [pc, #512]	; (800bc98 <tcp_process+0x580>)
 800ba98:	4880      	ldr	r0, [pc, #512]	; (800bc9c <tcp_process+0x584>)
 800ba9a:	f009 fe35 	bl	8015708 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d102      	bne.n	800baac <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800baa6:	23fa      	movs	r3, #250	; 0xfa
 800baa8:	76bb      	strb	r3, [r7, #26]
 800baaa:	e011      	b.n	800bad0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00a      	beq.n	800bacc <tcp_process+0x3b4>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	6910      	ldr	r0, [r2, #16]
 800bac0:	2200      	movs	r2, #0
 800bac2:	6879      	ldr	r1, [r7, #4]
 800bac4:	4798      	blx	r3
 800bac6:	4603      	mov	r3, r0
 800bac8:	76bb      	strb	r3, [r7, #26]
 800baca:	e001      	b.n	800bad0 <tcp_process+0x3b8>
 800bacc:	23f0      	movs	r3, #240	; 0xf0
 800bace:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800bad0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00a      	beq.n	800baee <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800bad8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800badc:	f113 0f0d 	cmn.w	r3, #13
 800bae0:	d002      	beq.n	800bae8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7fd ff3a 	bl	800995c <tcp_abort>
          }
          return ERR_ABRT;
 800bae8:	f06f 030c 	mvn.w	r3, #12
 800baec:	e1bd      	b.n	800be6a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fa42 	bl	800bf78 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800baf4:	4b6a      	ldr	r3, [pc, #424]	; (800bca0 <tcp_process+0x588>)
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d005      	beq.n	800bb08 <tcp_process+0x3f0>
          recv_acked--;
 800bafc:	4b68      	ldr	r3, [pc, #416]	; (800bca0 <tcp_process+0x588>)
 800bafe:	881b      	ldrh	r3, [r3, #0]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	4b66      	ldr	r3, [pc, #408]	; (800bca0 <tcp_process+0x588>)
 800bb06:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	f241 121c 	movw	r2, #4380	; 0x111c
 800bb12:	429a      	cmp	r2, r3
 800bb14:	bf38      	it	cc
 800bb16:	461a      	movcc	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	bf28      	it	cs
 800bb22:	4613      	movcs	r3, r2
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800bb2c:	4b5d      	ldr	r3, [pc, #372]	; (800bca4 <tcp_process+0x58c>)
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	f003 0320 	and.w	r3, r3, #32
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d034      	beq.n	800bba2 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	7e9b      	ldrb	r3, [r3, #26]
 800bb3c:	f043 0302 	orr.w	r3, r3, #2
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2207      	movs	r2, #7
 800bb4a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800bb4c:	e029      	b.n	800bba2 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb4e:	4b4b      	ldr	r3, [pc, #300]	; (800bc7c <tcp_process+0x564>)
 800bb50:	6818      	ldr	r0, [r3, #0]
 800bb52:	4b4b      	ldr	r3, [pc, #300]	; (800bc80 <tcp_process+0x568>)
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	4b4a      	ldr	r3, [pc, #296]	; (800bc84 <tcp_process+0x56c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb5e:	4b4a      	ldr	r3, [pc, #296]	; (800bc88 <tcp_process+0x570>)
 800bb60:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb62:	885b      	ldrh	r3, [r3, #2]
 800bb64:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb66:	4a48      	ldr	r2, [pc, #288]	; (800bc88 <tcp_process+0x570>)
 800bb68:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb6a:	8812      	ldrh	r2, [r2, #0]
 800bb6c:	b292      	uxth	r2, r2
 800bb6e:	9201      	str	r2, [sp, #4]
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	4b46      	ldr	r3, [pc, #280]	; (800bc8c <tcp_process+0x574>)
 800bb74:	4a46      	ldr	r2, [pc, #280]	; (800bc90 <tcp_process+0x578>)
 800bb76:	f002 fbff 	bl	800e378 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800bb7a:	e16a      	b.n	800be52 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bb7c:	4b3e      	ldr	r3, [pc, #248]	; (800bc78 <tcp_process+0x560>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	f003 0302 	and.w	r3, r3, #2
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 8164 	beq.w	800be52 <tcp_process+0x73a>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	1e5a      	subs	r2, r3, #1
 800bb90:	4b3c      	ldr	r3, [pc, #240]	; (800bc84 <tcp_process+0x56c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	f040 815c 	bne.w	800be52 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f002 fc98 	bl	800e4d0 <tcp_rexmit>
    break;
 800bba0:	e157      	b.n	800be52 <tcp_process+0x73a>
 800bba2:	e156      	b.n	800be52 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f9e7 	bl	800bf78 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bbaa:	4b3e      	ldr	r3, [pc, #248]	; (800bca4 <tcp_process+0x58c>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 814f 	beq.w	800be56 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	7e9b      	ldrb	r3, [r3, #26]
 800bbbc:	f043 0302 	orr.w	r3, r3, #2
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2207      	movs	r2, #7
 800bbca:	751a      	strb	r2, [r3, #20]
    }
    break;
 800bbcc:	e143      	b.n	800be56 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f9d2 	bl	800bf78 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800bbd4:	4b33      	ldr	r3, [pc, #204]	; (800bca4 <tcp_process+0x58c>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f003 0320 	and.w	r3, r3, #32
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d074      	beq.n	800bcca <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bbe0:	4b25      	ldr	r3, [pc, #148]	; (800bc78 <tcp_process+0x560>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	f003 0310 	and.w	r3, r3, #16
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d063      	beq.n	800bcb4 <tcp_process+0x59c>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbf0:	4b22      	ldr	r3, [pc, #136]	; (800bc7c <tcp_process+0x564>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d15d      	bne.n	800bcb4 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d159      	bne.n	800bcb4 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7e9b      	ldrb	r3, [r3, #26]
 800bc04:	f043 0302 	orr.w	r3, r3, #2
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fe fee6 	bl	800a9e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bc14:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <tcp_process+0x590>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d105      	bne.n	800bc2a <tcp_process+0x512>
 800bc1e:	4b22      	ldr	r3, [pc, #136]	; (800bca8 <tcp_process+0x590>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	4a20      	ldr	r2, [pc, #128]	; (800bca8 <tcp_process+0x590>)
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	e013      	b.n	800bc52 <tcp_process+0x53a>
 800bc2a:	4b1f      	ldr	r3, [pc, #124]	; (800bca8 <tcp_process+0x590>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	e00c      	b.n	800bc4c <tcp_process+0x534>
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d104      	bne.n	800bc46 <tcp_process+0x52e>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68da      	ldr	r2, [r3, #12]
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	60da      	str	r2, [r3, #12]
 800bc44:	e005      	b.n	800bc52 <tcp_process+0x53a>
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1ef      	bne.n	800bc32 <tcp_process+0x51a>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	60da      	str	r2, [r3, #12]
 800bc58:	4b14      	ldr	r3, [pc, #80]	; (800bcac <tcp_process+0x594>)
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	220a      	movs	r2, #10
 800bc62:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bc64:	4b12      	ldr	r3, [pc, #72]	; (800bcb0 <tcp_process+0x598>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	60da      	str	r2, [r3, #12]
 800bc6c:	4a10      	ldr	r2, [pc, #64]	; (800bcb0 <tcp_process+0x598>)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6013      	str	r3, [r2, #0]
 800bc72:	f002 fdd1 	bl	800e818 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800bc76:	e0f0      	b.n	800be5a <tcp_process+0x742>
 800bc78:	20000270 	.word	0x20000270
 800bc7c:	20000268 	.word	0x20000268
 800bc80:	2000026e 	.word	0x2000026e
 800bc84:	20000264 	.word	0x20000264
 800bc88:	20000254 	.word	0x20000254
 800bc8c:	200003b0 	.word	0x200003b0
 800bc90:	200003b4 	.word	0x200003b4
 800bc94:	080171ac 	.word	0x080171ac
 800bc98:	080173b0 	.word	0x080173b0
 800bc9c:	080171f0 	.word	0x080171f0
 800bca0:	2000026c 	.word	0x2000026c
 800bca4:	20000271 	.word	0x20000271
 800bca8:	200038f0 	.word	0x200038f0
 800bcac:	200038ec 	.word	0x200038ec
 800bcb0:	20003900 	.word	0x20003900
        tcp_ack_now(pcb);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	7e9b      	ldrb	r3, [r3, #26]
 800bcb8:	f043 0302 	orr.w	r3, r3, #2
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2208      	movs	r2, #8
 800bcc6:	751a      	strb	r2, [r3, #20]
    break;
 800bcc8:	e0c7      	b.n	800be5a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bcca:	4b6a      	ldr	r3, [pc, #424]	; (800be74 <tcp_process+0x75c>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	f003 0310 	and.w	r3, r3, #16
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80c1 	beq.w	800be5a <tcp_process+0x742>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcdc:	4b66      	ldr	r3, [pc, #408]	; (800be78 <tcp_process+0x760>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	f040 80ba 	bne.w	800be5a <tcp_process+0x742>
               pcb->unsent == NULL) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f040 80b5 	bne.w	800be5a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2206      	movs	r2, #6
 800bcf4:	751a      	strb	r2, [r3, #20]
    break;
 800bcf6:	e0b0      	b.n	800be5a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f93d 	bl	800bf78 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800bcfe:	4b5f      	ldr	r3, [pc, #380]	; (800be7c <tcp_process+0x764>)
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	f003 0320 	and.w	r3, r3, #32
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 80a9 	beq.w	800be5e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	7e9b      	ldrb	r3, [r3, #26]
 800bd10:	f043 0302 	orr.w	r3, r3, #2
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7fe fe60 	bl	800a9e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bd20:	4b57      	ldr	r3, [pc, #348]	; (800be80 <tcp_process+0x768>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d105      	bne.n	800bd36 <tcp_process+0x61e>
 800bd2a:	4b55      	ldr	r3, [pc, #340]	; (800be80 <tcp_process+0x768>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	4a53      	ldr	r2, [pc, #332]	; (800be80 <tcp_process+0x768>)
 800bd32:	6013      	str	r3, [r2, #0]
 800bd34:	e013      	b.n	800bd5e <tcp_process+0x646>
 800bd36:	4b52      	ldr	r3, [pc, #328]	; (800be80 <tcp_process+0x768>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	613b      	str	r3, [r7, #16]
 800bd3c:	e00c      	b.n	800bd58 <tcp_process+0x640>
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d104      	bne.n	800bd52 <tcp_process+0x63a>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	60da      	str	r2, [r3, #12]
 800bd50:	e005      	b.n	800bd5e <tcp_process+0x646>
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	613b      	str	r3, [r7, #16]
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1ef      	bne.n	800bd3e <tcp_process+0x626>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	60da      	str	r2, [r3, #12]
 800bd64:	4b47      	ldr	r3, [pc, #284]	; (800be84 <tcp_process+0x76c>)
 800bd66:	2201      	movs	r2, #1
 800bd68:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	220a      	movs	r2, #10
 800bd6e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800bd70:	4b45      	ldr	r3, [pc, #276]	; (800be88 <tcp_process+0x770>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	60da      	str	r2, [r3, #12]
 800bd78:	4a43      	ldr	r2, [pc, #268]	; (800be88 <tcp_process+0x770>)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	f002 fd4b 	bl	800e818 <tcp_timer_needed>
    }
    break;
 800bd82:	e06c      	b.n	800be5e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f8f7 	bl	800bf78 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bd8a:	4b3a      	ldr	r3, [pc, #232]	; (800be74 <tcp_process+0x75c>)
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	f003 0310 	and.w	r3, r3, #16
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d065      	beq.n	800be62 <tcp_process+0x74a>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd9a:	4b37      	ldr	r3, [pc, #220]	; (800be78 <tcp_process+0x760>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d15f      	bne.n	800be62 <tcp_process+0x74a>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d15b      	bne.n	800be62 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7fe fe18 	bl	800a9e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bdb0:	4b33      	ldr	r3, [pc, #204]	; (800be80 <tcp_process+0x768>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d105      	bne.n	800bdc6 <tcp_process+0x6ae>
 800bdba:	4b31      	ldr	r3, [pc, #196]	; (800be80 <tcp_process+0x768>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	4a2f      	ldr	r2, [pc, #188]	; (800be80 <tcp_process+0x768>)
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	e013      	b.n	800bdee <tcp_process+0x6d6>
 800bdc6:	4b2e      	ldr	r3, [pc, #184]	; (800be80 <tcp_process+0x768>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	e00c      	b.n	800bde8 <tcp_process+0x6d0>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d104      	bne.n	800bde2 <tcp_process+0x6ca>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	60da      	str	r2, [r3, #12]
 800bde0:	e005      	b.n	800bdee <tcp_process+0x6d6>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1ef      	bne.n	800bdce <tcp_process+0x6b6>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	60da      	str	r2, [r3, #12]
 800bdf4:	4b23      	ldr	r3, [pc, #140]	; (800be84 <tcp_process+0x76c>)
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800be00:	4b21      	ldr	r3, [pc, #132]	; (800be88 <tcp_process+0x770>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	60da      	str	r2, [r3, #12]
 800be08:	4a1f      	ldr	r2, [pc, #124]	; (800be88 <tcp_process+0x770>)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	f002 fd03 	bl	800e818 <tcp_timer_needed>
    }
    break;
 800be12:	e026      	b.n	800be62 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f8af 	bl	800bf78 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800be1a:	4b16      	ldr	r3, [pc, #88]	; (800be74 <tcp_process+0x75c>)
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	f003 0310 	and.w	r3, r3, #16
 800be22:	2b00      	cmp	r3, #0
 800be24:	d01f      	beq.n	800be66 <tcp_process+0x74e>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be2a:	4b13      	ldr	r3, [pc, #76]	; (800be78 <tcp_process+0x760>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d119      	bne.n	800be66 <tcp_process+0x74e>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be36:	2b00      	cmp	r3, #0
 800be38:	d115      	bne.n	800be66 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800be3a:	4b10      	ldr	r3, [pc, #64]	; (800be7c <tcp_process+0x764>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	f043 0310 	orr.w	r3, r3, #16
 800be42:	b2da      	uxtb	r2, r3
 800be44:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <tcp_process+0x764>)
 800be46:	701a      	strb	r2, [r3, #0]
    }
    break;
 800be48:	e00d      	b.n	800be66 <tcp_process+0x74e>
  default:
    break;
 800be4a:	bf00      	nop
 800be4c:	e00c      	b.n	800be68 <tcp_process+0x750>
    break;
 800be4e:	bf00      	nop
 800be50:	e00a      	b.n	800be68 <tcp_process+0x750>
    break;
 800be52:	bf00      	nop
 800be54:	e008      	b.n	800be68 <tcp_process+0x750>
    break;
 800be56:	bf00      	nop
 800be58:	e006      	b.n	800be68 <tcp_process+0x750>
    break;
 800be5a:	bf00      	nop
 800be5c:	e004      	b.n	800be68 <tcp_process+0x750>
    break;
 800be5e:	bf00      	nop
 800be60:	e002      	b.n	800be68 <tcp_process+0x750>
    break;
 800be62:	bf00      	nop
 800be64:	e000      	b.n	800be68 <tcp_process+0x750>
    break;
 800be66:	bf00      	nop
  }
  return ERR_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3720      	adds	r7, #32
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20000270 	.word	0x20000270
 800be78:	20000268 	.word	0x20000268
 800be7c:	20000271 	.word	0x20000271
 800be80:	200038f0 	.word	0x200038f0
 800be84:	200038ec 	.word	0x200038ec
 800be88:	20003900 	.word	0x20003900

0800be8c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800be8c:	b590      	push	{r4, r7, lr}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	899b      	ldrh	r3, [r3, #12]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fb ff2e 	bl	8007d00 <lwip_htons>
 800bea4:	4603      	mov	r3, r0
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d027      	beq.n	800befe <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800beae:	6838      	ldr	r0, [r7, #0]
 800beb0:	f7fe fb25 	bl	800a4fe <tcp_segs_free>
    next = NULL;
 800beb4:	2300      	movs	r3, #0
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	e055      	b.n	800bf66 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	899b      	ldrh	r3, [r3, #12]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fb ff1c 	bl	8007d00 <lwip_htons>
 800bec8:	4603      	mov	r3, r0
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00d      	beq.n	800beee <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	899b      	ldrh	r3, [r3, #12]
 800bed8:	b29c      	uxth	r4, r3
 800beda:	2001      	movs	r0, #1
 800bedc:	f7fb ff10 	bl	8007d00 <lwip_htons>
 800bee0:	4603      	mov	r3, r0
 800bee2:	461a      	mov	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	4322      	orrs	r2, r4
 800beea:	b292      	uxth	r2, r2
 800beec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f7fe fb14 	bl	800a526 <tcp_seg_free>
    while (next &&
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00e      	beq.n	800bf22 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	891b      	ldrh	r3, [r3, #8]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	4b1a      	ldr	r3, [pc, #104]	; (800bf74 <tcp_oos_insert_segment+0xe8>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	441a      	add	r2, r3
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	8909      	ldrh	r1, [r1, #8]
 800bf1a:	440b      	add	r3, r1
 800bf1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	dacb      	bge.n	800beba <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d01e      	beq.n	800bf66 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	891b      	ldrh	r3, [r3, #8]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <tcp_oos_insert_segment+0xe8>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	441a      	add	r2, r3
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd12      	ble.n	800bf66 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <tcp_oos_insert_segment+0xe8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	891b      	ldrh	r3, [r3, #8]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4610      	mov	r0, r2
 800bf62:	f7fc fe85 	bl	8008c70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	601a      	str	r2, [r3, #0]
}
 800bf6c:	bf00      	nop
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd90      	pop	{r4, r7, pc}
 800bf74:	20000264 	.word	0x20000264

0800bf78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7a:	b08d      	sub	sp, #52	; 0x34
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	7d1b      	ldrb	r3, [r3, #20]
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d806      	bhi.n	800bf9a <tcp_receive+0x22>
 800bf8c:	4ba6      	ldr	r3, [pc, #664]	; (800c228 <tcp_receive+0x2b0>)
 800bf8e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800bf92:	49a6      	ldr	r1, [pc, #664]	; (800c22c <tcp_receive+0x2b4>)
 800bf94:	48a6      	ldr	r0, [pc, #664]	; (800c230 <tcp_receive+0x2b8>)
 800bf96:	f009 fbb7 	bl	8015708 <iprintf>

  if (flags & TCP_ACK) {
 800bf9a:	4ba6      	ldr	r3, [pc, #664]	; (800c234 <tcp_receive+0x2bc>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	f003 0310 	and.w	r3, r3, #16
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 82bf 	beq.w	800c526 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfae:	461a      	mov	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb4:	4413      	add	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfbc:	4b9e      	ldr	r3, [pc, #632]	; (800c238 <tcp_receive+0x2c0>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	db1b      	blt.n	800bffe <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfca:	4b9b      	ldr	r3, [pc, #620]	; (800c238 <tcp_receive+0x2c0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d106      	bne.n	800bfe0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfd6:	4b99      	ldr	r3, [pc, #612]	; (800c23c <tcp_receive+0x2c4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	db0e      	blt.n	800bffe <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfe4:	4b95      	ldr	r3, [pc, #596]	; (800c23c <tcp_receive+0x2c4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d141      	bne.n	800c070 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bfec:	4b94      	ldr	r3, [pc, #592]	; (800c240 <tcp_receive+0x2c8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	89db      	ldrh	r3, [r3, #14]
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d938      	bls.n	800c070 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bffe:	4b90      	ldr	r3, [pc, #576]	; (800c240 <tcp_receive+0x2c8>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	89db      	ldrh	r3, [r3, #14]
 800c004:	b29a      	uxth	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c018:	429a      	cmp	r2, r3
 800c01a:	d205      	bcs.n	800c028 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800c028:	4b83      	ldr	r3, [pc, #524]	; (800c238 <tcp_receive+0x2c0>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800c030:	4b82      	ldr	r3, [pc, #520]	; (800c23c <tcp_receive+0x2c4>)
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10d      	bne.n	800c05e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d111      	bne.n	800c070 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800c05c:	e008      	b.n	800c070 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c064:	2b00      	cmp	r3, #0
 800c066:	d003      	beq.n	800c070 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c070:	4b72      	ldr	r3, [pc, #456]	; (800c23c <tcp_receive+0x2c4>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dc53      	bgt.n	800c126 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800c07e:	4b71      	ldr	r3, [pc, #452]	; (800c244 <tcp_receive+0x2cc>)
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d146      	bne.n	800c114 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c090:	4413      	add	r3, r2
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	429a      	cmp	r2, r3
 800c096:	d13d      	bne.n	800c114 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	db38      	blt.n	800c114 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0a6:	4b65      	ldr	r3, [pc, #404]	; (800c23c <tcp_receive+0x2c4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d132      	bne.n	800c114 <tcp_receive+0x19c>
              found_dupack = 1;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c0b8:	2bff      	cmp	r3, #255	; 0xff
 800c0ba:	d007      	beq.n	800c0cc <tcp_receive+0x154>
                ++pcb->dupacks;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	b2da      	uxtb	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d916      	bls.n	800c104 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0e0:	4413      	add	r3, r2
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d912      	bls.n	800c114 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0f8:	4413      	add	r3, r2
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c102:	e007      	b.n	800c114 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d102      	bne.n	800c114 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f002 fa2e 	bl	800e570 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	f040 8169 	bne.w	800c3ee <tcp_receive+0x476>
        pcb->dupacks = 0;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c124:	e163      	b.n	800c3ee <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c126:	4b45      	ldr	r3, [pc, #276]	; (800c23c <tcp_receive+0x2c4>)
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	3b01      	subs	r3, #1
 800c132:	2b00      	cmp	r3, #0
 800c134:	f2c0 8107 	blt.w	800c346 <tcp_receive+0x3ce>
 800c138:	4b40      	ldr	r3, [pc, #256]	; (800c23c <tcp_receive+0x2c4>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	f300 80ff 	bgt.w	800c346 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	7e9b      	ldrb	r3, [r3, #26]
 800c14c:	f003 0304 	and.w	r3, r3, #4
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00c      	beq.n	800c16e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	7e9b      	ldrb	r3, [r3, #26]
 800c158:	f023 0304 	bic.w	r3, r3, #4
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c17c:	10db      	asrs	r3, r3, #3
 800c17e:	b21b      	sxth	r3, r3
 800c180:	b29a      	uxth	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c188:	b29b      	uxth	r3, r3
 800c18a:	4413      	add	r3, r2
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	b21a      	sxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c19e:	4b27      	ldr	r3, [pc, #156]	; (800c23c <tcp_receive+0x2c4>)
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7d1b      	ldrb	r3, [r3, #20]
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	f240 8094 	bls.w	800c2d8 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d216      	bcs.n	800c1ee <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1ca:	4413      	add	r3, r2
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d97f      	bls.n	800c2d8 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1e2:	4413      	add	r3, r2
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c1ec:	e074      	b.n	800c2d8 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1fe:	fb03 f301 	mul.w	r3, r3, r1
 800c202:	6879      	ldr	r1, [r7, #4]
 800c204:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800c208:	fb93 f3f1 	sdiv	r3, r3, r1
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	4413      	add	r3, r2
 800c210:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c218:	8a7a      	ldrh	r2, [r7, #18]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d95c      	bls.n	800c2d8 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	8a7a      	ldrh	r2, [r7, #18]
 800c222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c226:	e057      	b.n	800c2d8 <tcp_receive+0x360>
 800c228:	080171ac 	.word	0x080171ac
 800c22c:	080173d0 	.word	0x080173d0
 800c230:	080171f0 	.word	0x080171f0
 800c234:	20000270 	.word	0x20000270
 800c238:	20000264 	.word	0x20000264
 800c23c:	20000268 	.word	0x20000268
 800c240:	20000254 	.word	0x20000254
 800c244:	2000026e 	.word	0x2000026e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c24c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	4618      	mov	r0, r3
 800c264:	f7fc ff0c 	bl	8009080 <pbuf_clen>
 800c268:	4603      	mov	r3, r0
 800c26a:	429c      	cmp	r4, r3
 800c26c:	d206      	bcs.n	800c27c <tcp_receive+0x304>
 800c26e:	4b70      	ldr	r3, [pc, #448]	; (800c430 <tcp_receive+0x4b8>)
 800c270:	f240 429e 	movw	r2, #1182	; 0x49e
 800c274:	496f      	ldr	r1, [pc, #444]	; (800c434 <tcp_receive+0x4bc>)
 800c276:	4870      	ldr	r0, [pc, #448]	; (800c438 <tcp_receive+0x4c0>)
 800c278:	f009 fa46 	bl	8015708 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	4618      	mov	r0, r3
 800c282:	f7fc fefd 	bl	8009080 <pbuf_clen>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c290:	1a9b      	subs	r3, r3, r2
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	891a      	ldrh	r2, [r3, #8]
 800c29e:	4b67      	ldr	r3, [pc, #412]	; (800c43c <tcp_receive+0x4c4>)
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	4b65      	ldr	r3, [pc, #404]	; (800c43c <tcp_receive+0x4c4>)
 800c2a8:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800c2aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2ac:	f7fe f93b 	bl	800a526 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00e      	beq.n	800c2d8 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10a      	bne.n	800c2d8 <tcp_receive+0x360>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d106      	bne.n	800c2d8 <tcp_receive+0x360>
 800c2ca:	4b59      	ldr	r3, [pc, #356]	; (800c430 <tcp_receive+0x4b8>)
 800c2cc:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800c2d0:	495b      	ldr	r1, [pc, #364]	; (800c440 <tcp_receive+0x4c8>)
 800c2d2:	4859      	ldr	r0, [pc, #356]	; (800c438 <tcp_receive+0x4c0>)
 800c2d4:	f009 fa18 	bl	8015708 <iprintf>
      while (pcb->unacked != NULL &&
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d022      	beq.n	800c326 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fb fd17 	bl	8007d1c <lwip_htonl>
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f4:	891b      	ldrh	r3, [r3, #8]
 800c2f6:	461d      	mov	r5, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	899b      	ldrh	r3, [r3, #12]
 800c300:	b29b      	uxth	r3, r3
 800c302:	4618      	mov	r0, r3
 800c304:	f7fb fcfc 	bl	8007d00 <lwip_htons>
 800c308:	4603      	mov	r3, r0
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <tcp_receive+0x39e>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <tcp_receive+0x3a0>
 800c316:	2300      	movs	r3, #0
 800c318:	442b      	add	r3, r5
 800c31a:	18e2      	adds	r2, r4, r3
 800c31c:	4b49      	ldr	r3, [pc, #292]	; (800c444 <tcp_receive+0x4cc>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800c322:	2b00      	cmp	r3, #0
 800c324:	dd90      	ble.n	800c248 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d104      	bne.n	800c338 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c334:	861a      	strh	r2, [r3, #48]	; 0x30
 800c336:	e002      	b.n	800c33e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	76da      	strb	r2, [r3, #27]
 800c344:	e002      	b.n	800c34c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f001 fd30 	bl	800ddac <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c34c:	e04f      	b.n	800c3ee <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c352:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c362:	2b00      	cmp	r3, #0
 800c364:	d103      	bne.n	800c36e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fc fe81 	bl	8009080 <pbuf_clen>
 800c37e:	4603      	mov	r3, r0
 800c380:	429c      	cmp	r4, r3
 800c382:	d206      	bcs.n	800c392 <tcp_receive+0x41a>
 800c384:	4b2a      	ldr	r3, [pc, #168]	; (800c430 <tcp_receive+0x4b8>)
 800c386:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c38a:	492a      	ldr	r1, [pc, #168]	; (800c434 <tcp_receive+0x4bc>)
 800c38c:	482a      	ldr	r0, [pc, #168]	; (800c438 <tcp_receive+0x4c0>)
 800c38e:	f009 f9bb 	bl	8015708 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	4618      	mov	r0, r3
 800c398:	f7fc fe72 	bl	8009080 <pbuf_clen>
 800c39c:	4603      	mov	r3, r0
 800c39e:	461a      	mov	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3a6:	1a9b      	subs	r3, r3, r2
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	891a      	ldrh	r2, [r3, #8]
 800c3b4:	4b21      	ldr	r3, [pc, #132]	; (800c43c <tcp_receive+0x4c4>)
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	4b1f      	ldr	r3, [pc, #124]	; (800c43c <tcp_receive+0x4c4>)
 800c3be:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800c3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3c2:	f7fe f8b0 	bl	800a526 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00e      	beq.n	800c3ee <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10a      	bne.n	800c3ee <tcp_receive+0x476>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <tcp_receive+0x476>
 800c3e0:	4b13      	ldr	r3, [pc, #76]	; (800c430 <tcp_receive+0x4b8>)
 800c3e2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800c3e6:	4916      	ldr	r1, [pc, #88]	; (800c440 <tcp_receive+0x4c8>)
 800c3e8:	4813      	ldr	r0, [pc, #76]	; (800c438 <tcp_receive+0x4c0>)
 800c3ea:	f009 f98d 	bl	8015708 <iprintf>
    while (pcb->unsent != NULL &&
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d036      	beq.n	800c464 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c3f6:	4b13      	ldr	r3, [pc, #76]	; (800c444 <tcp_receive+0x4cc>)
 800c3f8:	681c      	ldr	r4, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	f7fb fc8a 	bl	8007d1c <lwip_htonl>
 800c408:	4605      	mov	r5, r0
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c40e:	891b      	ldrh	r3, [r3, #8]
 800c410:	461e      	mov	r6, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	899b      	ldrh	r3, [r3, #12]
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fb fc6f 	bl	8007d00 <lwip_htons>
 800c422:	4603      	mov	r3, r0
 800c424:	f003 0303 	and.w	r3, r3, #3
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00d      	beq.n	800c448 <tcp_receive+0x4d0>
 800c42c:	2301      	movs	r3, #1
 800c42e:	e00c      	b.n	800c44a <tcp_receive+0x4d2>
 800c430:	080171ac 	.word	0x080171ac
 800c434:	080173ec 	.word	0x080173ec
 800c438:	080171f0 	.word	0x080171f0
 800c43c:	2000026c 	.word	0x2000026c
 800c440:	08017414 	.word	0x08017414
 800c444:	20000268 	.word	0x20000268
 800c448:	2300      	movs	r3, #0
 800c44a:	4433      	add	r3, r6
 800c44c:	442b      	add	r3, r5
 800c44e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800c450:	2b00      	cmp	r3, #0
 800c452:	db07      	blt.n	800c464 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c454:	4b8d      	ldr	r3, [pc, #564]	; (800c68c <tcp_receive+0x714>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f77f af75 	ble.w	800c34e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c46a:	4b89      	ldr	r3, [pc, #548]	; (800c690 <tcp_receive+0x718>)
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	4413      	add	r3, r2
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d052      	beq.n	800c526 <tcp_receive+0x5ae>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c484:	4b81      	ldr	r3, [pc, #516]	; (800c68c <tcp_receive+0x714>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	da4b      	bge.n	800c526 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c48e:	4b81      	ldr	r3, [pc, #516]	; (800c694 <tcp_receive+0x71c>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	b29a      	uxth	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c498:	b29b      	uxth	r3, r3
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800c4a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c4a8:	10db      	asrs	r3, r3, #3
 800c4aa:	b21b      	sxth	r3, r3
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4be:	4413      	add	r3, r2
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	b21a      	sxth	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c4c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	da03      	bge.n	800c4d8 <tcp_receive+0x560>
        m = -m;
 800c4d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4d2:	425b      	negs	r3, r3
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800c4d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c4e0:	109b      	asrs	r3, r3, #2
 800c4e2:	b21b      	sxth	r3, r3
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4f6:	4413      	add	r3, r2
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	b21a      	sxth	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c506:	10db      	asrs	r3, r3, #3
 800c508:	b21b      	sxth	r3, r3
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c512:	b29b      	uxth	r3, r3
 800c514:	4413      	add	r3, r2
 800c516:	b29b      	uxth	r3, r3
 800c518:	b21a      	sxth	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c526:	4b5c      	ldr	r3, [pc, #368]	; (800c698 <tcp_receive+0x720>)
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 84f1 	beq.w	800cf12 <tcp_receive+0xf9a>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7d1b      	ldrb	r3, [r3, #20]
 800c534:	2b06      	cmp	r3, #6
 800c536:	f200 84ec 	bhi.w	800cf12 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c53e:	4b57      	ldr	r3, [pc, #348]	; (800c69c <tcp_receive+0x724>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	3b01      	subs	r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	f2c0 80b8 	blt.w	800c6bc <tcp_receive+0x744>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c550:	4b51      	ldr	r3, [pc, #324]	; (800c698 <tcp_receive+0x720>)
 800c552:	881b      	ldrh	r3, [r3, #0]
 800c554:	4619      	mov	r1, r3
 800c556:	4b51      	ldr	r3, [pc, #324]	; (800c69c <tcp_receive+0x724>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	440b      	add	r3, r1
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	3301      	adds	r3, #1
 800c560:	2b00      	cmp	r3, #0
 800c562:	f300 80ab 	bgt.w	800c6bc <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c566:	4b4e      	ldr	r3, [pc, #312]	; (800c6a0 <tcp_receive+0x728>)
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c570:	4b4a      	ldr	r3, [pc, #296]	; (800c69c <tcp_receive+0x724>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c578:	4b49      	ldr	r3, [pc, #292]	; (800c6a0 <tcp_receive+0x728>)
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <tcp_receive+0x616>
 800c580:	4b48      	ldr	r3, [pc, #288]	; (800c6a4 <tcp_receive+0x72c>)
 800c582:	f240 523c 	movw	r2, #1340	; 0x53c
 800c586:	4948      	ldr	r1, [pc, #288]	; (800c6a8 <tcp_receive+0x730>)
 800c588:	4848      	ldr	r0, [pc, #288]	; (800c6ac <tcp_receive+0x734>)
 800c58a:	f009 f8bd 	bl	8015708 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c594:	4293      	cmp	r3, r2
 800c596:	dd06      	ble.n	800c5a6 <tcp_receive+0x62e>
 800c598:	4b42      	ldr	r3, [pc, #264]	; (800c6a4 <tcp_receive+0x72c>)
 800c59a:	f240 523d 	movw	r2, #1341	; 0x53d
 800c59e:	4944      	ldr	r1, [pc, #272]	; (800c6b0 <tcp_receive+0x738>)
 800c5a0:	4842      	ldr	r0, [pc, #264]	; (800c6ac <tcp_receive+0x734>)
 800c5a2:	f009 f8b1 	bl	8015708 <iprintf>
      if (inseg.p->len < off) {
 800c5a6:	4b3e      	ldr	r3, [pc, #248]	; (800c6a0 <tcp_receive+0x728>)
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	895b      	ldrh	r3, [r3, #10]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	dd3e      	ble.n	800c632 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c5b4:	4b3a      	ldr	r3, [pc, #232]	; (800c6a0 <tcp_receive+0x728>)
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	891b      	ldrh	r3, [r3, #8]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	dd06      	ble.n	800c5d0 <tcp_receive+0x658>
 800c5c2:	4b38      	ldr	r3, [pc, #224]	; (800c6a4 <tcp_receive+0x72c>)
 800c5c4:	f240 523f 	movw	r2, #1343	; 0x53f
 800c5c8:	493a      	ldr	r1, [pc, #232]	; (800c6b4 <tcp_receive+0x73c>)
 800c5ca:	4838      	ldr	r0, [pc, #224]	; (800c6ac <tcp_receive+0x734>)
 800c5cc:	f009 f89c 	bl	8015708 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c5d0:	4b33      	ldr	r3, [pc, #204]	; (800c6a0 <tcp_receive+0x728>)
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	891a      	ldrh	r2, [r3, #8]
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800c5de:	e00e      	b.n	800c5fe <tcp_receive+0x686>
          off -= p->len;
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	895b      	ldrh	r3, [r3, #10]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	1a9b      	subs	r3, r3, r2
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	8a3a      	ldrh	r2, [r7, #16]
 800c5f0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	895b      	ldrh	r3, [r3, #10]
 800c602:	461a      	mov	r2, r3
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	4293      	cmp	r3, r2
 800c608:	dcea      	bgt.n	800c5e0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	425b      	negs	r3, r3
 800c610:	b29b      	uxth	r3, r3
 800c612:	b21b      	sxth	r3, r3
 800c614:	4619      	mov	r1, r3
 800c616:	69b8      	ldr	r0, [r7, #24]
 800c618:	f7fc fc7a 	bl	8008f10 <pbuf_header>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d01c      	beq.n	800c65c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c622:	4b20      	ldr	r3, [pc, #128]	; (800c6a4 <tcp_receive+0x72c>)
 800c624:	f240 524c 	movw	r2, #1356	; 0x54c
 800c628:	4923      	ldr	r1, [pc, #140]	; (800c6b8 <tcp_receive+0x740>)
 800c62a:	4820      	ldr	r0, [pc, #128]	; (800c6ac <tcp_receive+0x734>)
 800c62c:	f009 f86c 	bl	8015708 <iprintf>
 800c630:	e014      	b.n	800c65c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800c632:	4b1b      	ldr	r3, [pc, #108]	; (800c6a0 <tcp_receive+0x728>)
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c638:	b292      	uxth	r2, r2
 800c63a:	4252      	negs	r2, r2
 800c63c:	b292      	uxth	r2, r2
 800c63e:	b212      	sxth	r2, r2
 800c640:	4611      	mov	r1, r2
 800c642:	4618      	mov	r0, r3
 800c644:	f7fc fc64 	bl	8008f10 <pbuf_header>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c64e:	4b15      	ldr	r3, [pc, #84]	; (800c6a4 <tcp_receive+0x72c>)
 800c650:	f240 5251 	movw	r2, #1361	; 0x551
 800c654:	4918      	ldr	r1, [pc, #96]	; (800c6b8 <tcp_receive+0x740>)
 800c656:	4815      	ldr	r0, [pc, #84]	; (800c6ac <tcp_receive+0x734>)
 800c658:	f009 f856 	bl	8015708 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c65c:	4b10      	ldr	r3, [pc, #64]	; (800c6a0 <tcp_receive+0x728>)
 800c65e:	891a      	ldrh	r2, [r3, #8]
 800c660:	4b0e      	ldr	r3, [pc, #56]	; (800c69c <tcp_receive+0x724>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	b299      	uxth	r1, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	1acb      	subs	r3, r1, r3
 800c66e:	b29b      	uxth	r3, r3
 800c670:	4413      	add	r3, r2
 800c672:	b29a      	uxth	r2, r3
 800c674:	4b0a      	ldr	r3, [pc, #40]	; (800c6a0 <tcp_receive+0x728>)
 800c676:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67c:	4a07      	ldr	r2, [pc, #28]	; (800c69c <tcp_receive+0x724>)
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	4b07      	ldr	r3, [pc, #28]	; (800c6a0 <tcp_receive+0x728>)
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	4a05      	ldr	r2, [pc, #20]	; (800c69c <tcp_receive+0x724>)
 800c686:	6812      	ldr	r2, [r2, #0]
 800c688:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c68a:	e025      	b.n	800c6d8 <tcp_receive+0x760>
 800c68c:	20000268 	.word	0x20000268
 800c690:	2000026c 	.word	0x2000026c
 800c694:	200038f4 	.word	0x200038f4
 800c698:	2000026e 	.word	0x2000026e
 800c69c:	20000264 	.word	0x20000264
 800c6a0:	20000244 	.word	0x20000244
 800c6a4:	080171ac 	.word	0x080171ac
 800c6a8:	08017434 	.word	0x08017434
 800c6ac:	080171f0 	.word	0x080171f0
 800c6b0:	08017444 	.word	0x08017444
 800c6b4:	08017454 	.word	0x08017454
 800c6b8:	08017464 	.word	0x08017464
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c6bc:	4b87      	ldr	r3, [pc, #540]	; (800c8dc <tcp_receive+0x964>)
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	da06      	bge.n	800c6d8 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	7e9b      	ldrb	r3, [r3, #26]
 800c6ce:	f043 0302 	orr.w	r3, r3, #2
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c6d8:	4b80      	ldr	r3, [pc, #512]	; (800c8dc <tcp_receive+0x964>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f2c0 8410 	blt.w	800cf08 <tcp_receive+0xf90>
 800c6e8:	4b7c      	ldr	r3, [pc, #496]	; (800c8dc <tcp_receive+0x964>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f0:	6879      	ldr	r1, [r7, #4]
 800c6f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6f4:	440b      	add	r3, r1
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f300 8404 	bgt.w	800cf08 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c704:	4b75      	ldr	r3, [pc, #468]	; (800c8dc <tcp_receive+0x964>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	429a      	cmp	r2, r3
 800c70a:	f040 8287 	bne.w	800cc1c <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c70e:	4b74      	ldr	r3, [pc, #464]	; (800c8e0 <tcp_receive+0x968>)
 800c710:	891c      	ldrh	r4, [r3, #8]
 800c712:	4b73      	ldr	r3, [pc, #460]	; (800c8e0 <tcp_receive+0x968>)
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	899b      	ldrh	r3, [r3, #12]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fb faf0 	bl	8007d00 <lwip_htons>
 800c720:	4603      	mov	r3, r0
 800c722:	f003 0303 	and.w	r3, r3, #3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <tcp_receive+0x7b6>
 800c72a:	2301      	movs	r3, #1
 800c72c:	e000      	b.n	800c730 <tcp_receive+0x7b8>
 800c72e:	2300      	movs	r3, #0
 800c730:	4423      	add	r3, r4
 800c732:	b29a      	uxth	r2, r3
 800c734:	4b6b      	ldr	r3, [pc, #428]	; (800c8e4 <tcp_receive+0x96c>)
 800c736:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c73c:	4b69      	ldr	r3, [pc, #420]	; (800c8e4 <tcp_receive+0x96c>)
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d26e      	bcs.n	800c822 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c744:	4b66      	ldr	r3, [pc, #408]	; (800c8e0 <tcp_receive+0x968>)
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	899b      	ldrh	r3, [r3, #12]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fb fad7 	bl	8007d00 <lwip_htons>
 800c752:	4603      	mov	r3, r0
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01b      	beq.n	800c794 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c75c:	4b60      	ldr	r3, [pc, #384]	; (800c8e0 <tcp_receive+0x968>)
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	899b      	ldrh	r3, [r3, #12]
 800c762:	b29b      	uxth	r3, r3
 800c764:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c768:	b29c      	uxth	r4, r3
 800c76a:	4b5d      	ldr	r3, [pc, #372]	; (800c8e0 <tcp_receive+0x968>)
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	899b      	ldrh	r3, [r3, #12]
 800c770:	b29b      	uxth	r3, r3
 800c772:	4618      	mov	r0, r3
 800c774:	f7fb fac4 	bl	8007d00 <lwip_htons>
 800c778:	4603      	mov	r3, r0
 800c77a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c77e:	b29b      	uxth	r3, r3
 800c780:	4618      	mov	r0, r3
 800c782:	f7fb fabd 	bl	8007d00 <lwip_htons>
 800c786:	4603      	mov	r3, r0
 800c788:	461a      	mov	r2, r3
 800c78a:	4b55      	ldr	r3, [pc, #340]	; (800c8e0 <tcp_receive+0x968>)
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	4322      	orrs	r2, r4
 800c790:	b292      	uxth	r2, r2
 800c792:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c798:	4b51      	ldr	r3, [pc, #324]	; (800c8e0 <tcp_receive+0x968>)
 800c79a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c79c:	4b50      	ldr	r3, [pc, #320]	; (800c8e0 <tcp_receive+0x968>)
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	899b      	ldrh	r3, [r3, #12]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fb faab 	bl	8007d00 <lwip_htons>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f003 0302 	and.w	r3, r3, #2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d005      	beq.n	800c7c0 <tcp_receive+0x848>
            inseg.len -= 1;
 800c7b4:	4b4a      	ldr	r3, [pc, #296]	; (800c8e0 <tcp_receive+0x968>)
 800c7b6:	891b      	ldrh	r3, [r3, #8]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	4b48      	ldr	r3, [pc, #288]	; (800c8e0 <tcp_receive+0x968>)
 800c7be:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c7c0:	4b47      	ldr	r3, [pc, #284]	; (800c8e0 <tcp_receive+0x968>)
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	4b46      	ldr	r3, [pc, #280]	; (800c8e0 <tcp_receive+0x968>)
 800c7c6:	891b      	ldrh	r3, [r3, #8]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	f7fc fa50 	bl	8008c70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c7d0:	4b43      	ldr	r3, [pc, #268]	; (800c8e0 <tcp_receive+0x968>)
 800c7d2:	891c      	ldrh	r4, [r3, #8]
 800c7d4:	4b42      	ldr	r3, [pc, #264]	; (800c8e0 <tcp_receive+0x968>)
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	899b      	ldrh	r3, [r3, #12]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fb fa8f 	bl	8007d00 <lwip_htons>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	f003 0303 	and.w	r3, r3, #3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <tcp_receive+0x878>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e000      	b.n	800c7f2 <tcp_receive+0x87a>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4423      	add	r3, r4
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	4b3b      	ldr	r3, [pc, #236]	; (800c8e4 <tcp_receive+0x96c>)
 800c7f8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c7fa:	4b3a      	ldr	r3, [pc, #232]	; (800c8e4 <tcp_receive+0x96c>)
 800c7fc:	881b      	ldrh	r3, [r3, #0]
 800c7fe:	461a      	mov	r2, r3
 800c800:	4b36      	ldr	r3, [pc, #216]	; (800c8dc <tcp_receive+0x964>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	441a      	add	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c80e:	440b      	add	r3, r1
 800c810:	429a      	cmp	r2, r3
 800c812:	d006      	beq.n	800c822 <tcp_receive+0x8aa>
 800c814:	4b34      	ldr	r3, [pc, #208]	; (800c8e8 <tcp_receive+0x970>)
 800c816:	f240 527f 	movw	r2, #1407	; 0x57f
 800c81a:	4934      	ldr	r1, [pc, #208]	; (800c8ec <tcp_receive+0x974>)
 800c81c:	4834      	ldr	r0, [pc, #208]	; (800c8f0 <tcp_receive+0x978>)
 800c81e:	f008 ff73 	bl	8015708 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 80e1 	beq.w	800c9ee <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c82c:	4b2c      	ldr	r3, [pc, #176]	; (800c8e0 <tcp_receive+0x968>)
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	899b      	ldrh	r3, [r3, #12]
 800c832:	b29b      	uxth	r3, r3
 800c834:	4618      	mov	r0, r3
 800c836:	f7fb fa63 	bl	8007d00 <lwip_htons>
 800c83a:	4603      	mov	r3, r0
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d010      	beq.n	800c866 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c844:	e00a      	b.n	800c85c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800c856:	68b8      	ldr	r0, [r7, #8]
 800c858:	f7fd fe65 	bl	800a526 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1f0      	bne.n	800c846 <tcp_receive+0x8ce>
 800c864:	e0c3      	b.n	800c9ee <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c86a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c86c:	e04f      	b.n	800c90e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	899b      	ldrh	r3, [r3, #12]
 800c874:	b29b      	uxth	r3, r3
 800c876:	4618      	mov	r0, r3
 800c878:	f7fb fa42 	bl	8007d00 <lwip_htons>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	2b00      	cmp	r3, #0
 800c884:	d03b      	beq.n	800c8fe <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c886:	4b16      	ldr	r3, [pc, #88]	; (800c8e0 <tcp_receive+0x968>)
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	899b      	ldrh	r3, [r3, #12]
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fb fa36 	bl	8007d00 <lwip_htons>
 800c894:	4603      	mov	r3, r0
 800c896:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d12f      	bne.n	800c8fe <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c89e:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <tcp_receive+0x968>)
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	899b      	ldrh	r3, [r3, #12]
 800c8a4:	b29c      	uxth	r4, r3
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	f7fb fa2a 	bl	8007d00 <lwip_htons>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <tcp_receive+0x968>)
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	4322      	orrs	r2, r4
 800c8b6:	b292      	uxth	r2, r2
 800c8b8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c8ba:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <tcp_receive+0x968>)
 800c8bc:	891c      	ldrh	r4, [r3, #8]
 800c8be:	4b08      	ldr	r3, [pc, #32]	; (800c8e0 <tcp_receive+0x968>)
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	899b      	ldrh	r3, [r3, #12]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fb fa1a 	bl	8007d00 <lwip_htons>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00e      	beq.n	800c8f4 <tcp_receive+0x97c>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e00d      	b.n	800c8f6 <tcp_receive+0x97e>
 800c8da:	bf00      	nop
 800c8dc:	20000264 	.word	0x20000264
 800c8e0:	20000244 	.word	0x20000244
 800c8e4:	2000026e 	.word	0x2000026e
 800c8e8:	080171ac 	.word	0x080171ac
 800c8ec:	08017478 	.word	0x08017478
 800c8f0:	080171f0 	.word	0x080171f0
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4423      	add	r3, r4
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	4b95      	ldr	r3, [pc, #596]	; (800cb50 <tcp_receive+0xbd8>)
 800c8fc:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800c908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c90a:	f7fd fe0c 	bl	800a526 <tcp_seg_free>
            while (next &&
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00e      	beq.n	800c932 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c914:	4b8e      	ldr	r3, [pc, #568]	; (800cb50 <tcp_receive+0xbd8>)
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	461a      	mov	r2, r3
 800c91a:	4b8e      	ldr	r3, [pc, #568]	; (800cb54 <tcp_receive+0xbdc>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	441a      	add	r2, r3
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c928:	8909      	ldrh	r1, [r1, #8]
 800c92a:	440b      	add	r3, r1
 800c92c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da9d      	bge.n	800c86e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c934:	2b00      	cmp	r3, #0
 800c936:	d057      	beq.n	800c9e8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800c938:	4b85      	ldr	r3, [pc, #532]	; (800cb50 <tcp_receive+0xbd8>)
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	4b85      	ldr	r3, [pc, #532]	; (800cb54 <tcp_receive+0xbdc>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	441a      	add	r2, r3
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	dd4b      	ble.n	800c9e8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	b29a      	uxth	r2, r3
 800c958:	4b7e      	ldr	r3, [pc, #504]	; (800cb54 <tcp_receive+0xbdc>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	b29a      	uxth	r2, r3
 800c962:	4b7d      	ldr	r3, [pc, #500]	; (800cb58 <tcp_receive+0xbe0>)
 800c964:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c966:	4b7c      	ldr	r3, [pc, #496]	; (800cb58 <tcp_receive+0xbe0>)
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	899b      	ldrh	r3, [r3, #12]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fb f9c6 	bl	8007d00 <lwip_htons>
 800c974:	4603      	mov	r3, r0
 800c976:	f003 0302 	and.w	r3, r3, #2
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d005      	beq.n	800c98a <tcp_receive+0xa12>
                inseg.len -= 1;
 800c97e:	4b76      	ldr	r3, [pc, #472]	; (800cb58 <tcp_receive+0xbe0>)
 800c980:	891b      	ldrh	r3, [r3, #8]
 800c982:	3b01      	subs	r3, #1
 800c984:	b29a      	uxth	r2, r3
 800c986:	4b74      	ldr	r3, [pc, #464]	; (800cb58 <tcp_receive+0xbe0>)
 800c988:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c98a:	4b73      	ldr	r3, [pc, #460]	; (800cb58 <tcp_receive+0xbe0>)
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	4b72      	ldr	r3, [pc, #456]	; (800cb58 <tcp_receive+0xbe0>)
 800c990:	891b      	ldrh	r3, [r3, #8]
 800c992:	4619      	mov	r1, r3
 800c994:	4610      	mov	r0, r2
 800c996:	f7fc f96b 	bl	8008c70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c99a:	4b6f      	ldr	r3, [pc, #444]	; (800cb58 <tcp_receive+0xbe0>)
 800c99c:	891c      	ldrh	r4, [r3, #8]
 800c99e:	4b6e      	ldr	r3, [pc, #440]	; (800cb58 <tcp_receive+0xbe0>)
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	899b      	ldrh	r3, [r3, #12]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fb f9aa 	bl	8007d00 <lwip_htons>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	f003 0303 	and.w	r3, r3, #3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <tcp_receive+0xa42>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e000      	b.n	800c9bc <tcp_receive+0xa44>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4423      	add	r3, r4
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	4b63      	ldr	r3, [pc, #396]	; (800cb50 <tcp_receive+0xbd8>)
 800c9c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c9c4:	4b62      	ldr	r3, [pc, #392]	; (800cb50 <tcp_receive+0xbd8>)
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	4b62      	ldr	r3, [pc, #392]	; (800cb54 <tcp_receive+0xbdc>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	441a      	add	r2, r3
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d006      	beq.n	800c9e8 <tcp_receive+0xa70>
 800c9da:	4b60      	ldr	r3, [pc, #384]	; (800cb5c <tcp_receive+0xbe4>)
 800c9dc:	f240 52af 	movw	r2, #1455	; 0x5af
 800c9e0:	495f      	ldr	r1, [pc, #380]	; (800cb60 <tcp_receive+0xbe8>)
 800c9e2:	4860      	ldr	r0, [pc, #384]	; (800cb64 <tcp_receive+0xbec>)
 800c9e4:	f008 fe90 	bl	8015708 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ec:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c9ee:	4b58      	ldr	r3, [pc, #352]	; (800cb50 <tcp_receive+0xbd8>)
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4b57      	ldr	r3, [pc, #348]	; (800cb54 <tcp_receive+0xbdc>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	441a      	add	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca02:	4b53      	ldr	r3, [pc, #332]	; (800cb50 <tcp_receive+0xbd8>)
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d206      	bcs.n	800ca18 <tcp_receive+0xaa0>
 800ca0a:	4b54      	ldr	r3, [pc, #336]	; (800cb5c <tcp_receive+0xbe4>)
 800ca0c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ca10:	4955      	ldr	r1, [pc, #340]	; (800cb68 <tcp_receive+0xbf0>)
 800ca12:	4854      	ldr	r0, [pc, #336]	; (800cb64 <tcp_receive+0xbec>)
 800ca14:	f008 fe78 	bl	8015708 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca1c:	4b4c      	ldr	r3, [pc, #304]	; (800cb50 <tcp_receive+0xbd8>)
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7fd f8ef 	bl	8009c0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ca2e:	4b4a      	ldr	r3, [pc, #296]	; (800cb58 <tcp_receive+0xbe0>)
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	891b      	ldrh	r3, [r3, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d006      	beq.n	800ca46 <tcp_receive+0xace>
          recv_data = inseg.p;
 800ca38:	4b47      	ldr	r3, [pc, #284]	; (800cb58 <tcp_receive+0xbe0>)
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	4a4b      	ldr	r2, [pc, #300]	; (800cb6c <tcp_receive+0xbf4>)
 800ca3e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ca40:	4b45      	ldr	r3, [pc, #276]	; (800cb58 <tcp_receive+0xbe0>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca46:	4b44      	ldr	r3, [pc, #272]	; (800cb58 <tcp_receive+0xbe0>)
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	899b      	ldrh	r3, [r3, #12]
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fb f956 	bl	8007d00 <lwip_htons>
 800ca54:	4603      	mov	r3, r0
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f000 80b4 	beq.w	800cbc8 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ca60:	4b43      	ldr	r3, [pc, #268]	; (800cb70 <tcp_receive+0xbf8>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	f043 0320 	orr.w	r3, r3, #32
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	4b41      	ldr	r3, [pc, #260]	; (800cb70 <tcp_receive+0xbf8>)
 800ca6c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ca6e:	e0ab      	b.n	800cbc8 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca74:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	4a35      	ldr	r2, [pc, #212]	; (800cb54 <tcp_receive+0xbdc>)
 800ca80:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	891b      	ldrh	r3, [r3, #8]
 800ca86:	461c      	mov	r4, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	899b      	ldrh	r3, [r3, #12]
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fb f935 	bl	8007d00 <lwip_htons>
 800ca96:	4603      	mov	r3, r0
 800ca98:	f003 0303 	and.w	r3, r3, #3
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <tcp_receive+0xb2c>
 800caa0:	2301      	movs	r3, #1
 800caa2:	e000      	b.n	800caa6 <tcp_receive+0xb2e>
 800caa4:	2300      	movs	r3, #0
 800caa6:	191a      	adds	r2, r3, r4
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caac:	441a      	add	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cab6:	461c      	mov	r4, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	891b      	ldrh	r3, [r3, #8]
 800cabc:	461d      	mov	r5, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	899b      	ldrh	r3, [r3, #12]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fb f91a 	bl	8007d00 <lwip_htons>
 800cacc:	4603      	mov	r3, r0
 800cace:	f003 0303 	and.w	r3, r3, #3
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <tcp_receive+0xb62>
 800cad6:	2301      	movs	r3, #1
 800cad8:	e000      	b.n	800cadc <tcp_receive+0xb64>
 800cada:	2300      	movs	r3, #0
 800cadc:	442b      	add	r3, r5
 800cade:	429c      	cmp	r4, r3
 800cae0:	d206      	bcs.n	800caf0 <tcp_receive+0xb78>
 800cae2:	4b1e      	ldr	r3, [pc, #120]	; (800cb5c <tcp_receive+0xbe4>)
 800cae4:	f240 52de 	movw	r2, #1502	; 0x5de
 800cae8:	4922      	ldr	r1, [pc, #136]	; (800cb74 <tcp_receive+0xbfc>)
 800caea:	481e      	ldr	r0, [pc, #120]	; (800cb64 <tcp_receive+0xbec>)
 800caec:	f008 fe0c 	bl	8015708 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	891b      	ldrh	r3, [r3, #8]
 800caf4:	461c      	mov	r4, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	899b      	ldrh	r3, [r3, #12]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fb f8fe 	bl	8007d00 <lwip_htons>
 800cb04:	4603      	mov	r3, r0
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <tcp_receive+0xb9a>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e000      	b.n	800cb14 <tcp_receive+0xb9c>
 800cb12:	2300      	movs	r3, #0
 800cb14:	1919      	adds	r1, r3, r4
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cb1a:	b28b      	uxth	r3, r1
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7fd f871 	bl	8009c0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	891b      	ldrh	r3, [r3, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d028      	beq.n	800cb86 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cb34:	4b0d      	ldr	r3, [pc, #52]	; (800cb6c <tcp_receive+0xbf4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d01d      	beq.n	800cb78 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800cb3c:	4b0b      	ldr	r3, [pc, #44]	; (800cb6c <tcp_receive+0xbf4>)
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	4619      	mov	r1, r3
 800cb46:	4610      	mov	r0, r2
 800cb48:	f7fc fad4 	bl	80090f4 <pbuf_cat>
 800cb4c:	e018      	b.n	800cb80 <tcp_receive+0xc08>
 800cb4e:	bf00      	nop
 800cb50:	2000026e 	.word	0x2000026e
 800cb54:	20000264 	.word	0x20000264
 800cb58:	20000244 	.word	0x20000244
 800cb5c:	080171ac 	.word	0x080171ac
 800cb60:	080174b0 	.word	0x080174b0
 800cb64:	080171f0 	.word	0x080171f0
 800cb68:	080174ec 	.word	0x080174ec
 800cb6c:	20000274 	.word	0x20000274
 800cb70:	20000271 	.word	0x20000271
 800cb74:	0801750c 	.word	0x0801750c
            } else {
              recv_data = cseg->p;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	4a71      	ldr	r2, [pc, #452]	; (800cd44 <tcp_receive+0xdcc>)
 800cb7e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2200      	movs	r2, #0
 800cb84:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	899b      	ldrh	r3, [r3, #12]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fb f8b6 	bl	8007d00 <lwip_htons>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00d      	beq.n	800cbba <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cb9e:	4b6a      	ldr	r3, [pc, #424]	; (800cd48 <tcp_receive+0xdd0>)
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	f043 0320 	orr.w	r3, r3, #32
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	4b67      	ldr	r3, [pc, #412]	; (800cd48 <tcp_receive+0xdd0>)
 800cbaa:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7d1b      	ldrb	r3, [r3, #20]
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d102      	bne.n	800cbba <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2207      	movs	r2, #7
 800cbb8:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f7fd fcaf 	bl	800a526 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d008      	beq.n	800cbe2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	f43f af47 	beq.w	800ca70 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	7e9b      	ldrb	r3, [r3, #26]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00e      	beq.n	800cc0c <tcp_receive+0xc94>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	7e9b      	ldrb	r3, [r3, #26]
 800cbf2:	f023 0301 	bic.w	r3, r3, #1
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	769a      	strb	r2, [r3, #26]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7e9b      	ldrb	r3, [r3, #26]
 800cc00:	f043 0302 	orr.w	r3, r3, #2
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cc0a:	e181      	b.n	800cf10 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	7e9b      	ldrb	r3, [r3, #26]
 800cc10:	f043 0301 	orr.w	r3, r3, #1
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cc1a:	e179      	b.n	800cf10 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f001 f8c5 	bl	800ddac <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cc2a:	4848      	ldr	r0, [pc, #288]	; (800cd4c <tcp_receive+0xdd4>)
 800cc2c:	f7fd fca2 	bl	800a574 <tcp_seg_copy>
 800cc30:	4602      	mov	r2, r0
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800cc36:	e16b      	b.n	800cf10 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc42:	e150      	b.n	800cee6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	4b41      	ldr	r3, [pc, #260]	; (800cd50 <tcp_receive+0xdd8>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d11d      	bne.n	800cc8e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cc52:	4b3e      	ldr	r3, [pc, #248]	; (800cd4c <tcp_receive+0xdd4>)
 800cc54:	891a      	ldrh	r2, [r3, #8]
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	891b      	ldrh	r3, [r3, #8]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	f240 8148 	bls.w	800cef0 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800cc60:	483a      	ldr	r0, [pc, #232]	; (800cd4c <tcp_receive+0xdd4>)
 800cc62:	f7fd fc87 	bl	800a574 <tcp_seg_copy>
 800cc66:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f000 8142 	beq.w	800cef4 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <tcp_receive+0xd06>
                    prev->next = cseg;
 800cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	e002      	b.n	800cc84 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cc84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7ff f900 	bl	800be8c <tcp_oos_insert_segment>
                }
                break;
 800cc8c:	e132      	b.n	800cef4 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d117      	bne.n	800ccc4 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cc94:	4b2e      	ldr	r3, [pc, #184]	; (800cd50 <tcp_receive+0xdd8>)
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	da57      	bge.n	800cd54 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800cca4:	4829      	ldr	r0, [pc, #164]	; (800cd4c <tcp_receive+0xdd4>)
 800cca6:	f7fd fc65 	bl	800a574 <tcp_seg_copy>
 800ccaa:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f000 8122 	beq.w	800cef8 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800ccba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f7ff f8e5 	bl	800be8c <tcp_oos_insert_segment>
                  }
                  break;
 800ccc2:	e119      	b.n	800cef8 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800ccc4:	4b22      	ldr	r3, [pc, #136]	; (800cd50 <tcp_receive+0xdd8>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	db3e      	blt.n	800cd54 <tcp_receive+0xddc>
 800ccd6:	4b1e      	ldr	r3, [pc, #120]	; (800cd50 <tcp_receive+0xdd8>)
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	3301      	adds	r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dc35      	bgt.n	800cd54 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800cce8:	4818      	ldr	r0, [pc, #96]	; (800cd4c <tcp_receive+0xdd4>)
 800ccea:	f7fd fc43 	bl	800a574 <tcp_seg_copy>
 800ccee:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 8102 	beq.w	800cefc <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd00:	8912      	ldrh	r2, [r2, #8]
 800cd02:	441a      	add	r2, r3
 800cd04:	4b12      	ldr	r3, [pc, #72]	; (800cd50 <tcp_receive+0xdd8>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dd12      	ble.n	800cd34 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cd0e:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <tcp_receive+0xdd8>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	891b      	ldrh	r3, [r3, #8]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4610      	mov	r0, r2
 800cd30:	f7fb ff9e 	bl	8008c70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cd3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f7ff f8a5 	bl	800be8c <tcp_oos_insert_segment>
                  }
                  break;
 800cd42:	e0db      	b.n	800cefc <tcp_receive+0xf84>
 800cd44:	20000274 	.word	0x20000274
 800cd48:	20000271 	.word	0x20000271
 800cd4c:	20000244 	.word	0x20000244
 800cd50:	20000264 	.word	0x20000264
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f040 80bf 	bne.w	800cedc <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cd5e:	4b7c      	ldr	r3, [pc, #496]	; (800cf50 <tcp_receive+0xfd8>)
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f340 80b6 	ble.w	800cedc <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	899b      	ldrh	r3, [r3, #12]
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fa ffc1 	bl	8007d00 <lwip_htons>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 80bb 	bne.w	800cf00 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cd8a:	4872      	ldr	r0, [pc, #456]	; (800cf54 <tcp_receive+0xfdc>)
 800cd8c:	f7fd fbf2 	bl	800a574 <tcp_seg_copy>
 800cd90:	4602      	mov	r2, r0
 800cd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd94:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 80b2 	beq.w	800cf04 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cda8:	8912      	ldrh	r2, [r2, #8]
 800cdaa:	441a      	add	r2, r3
 800cdac:	4b68      	ldr	r3, [pc, #416]	; (800cf50 <tcp_receive+0xfd8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dd12      	ble.n	800cddc <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cdb6:	4b66      	ldr	r3, [pc, #408]	; (800cf50 <tcp_receive+0xfd8>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	1ad3      	subs	r3, r2, r3
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdce:	685a      	ldr	r2, [r3, #4]
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	891b      	ldrh	r3, [r3, #8]
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	f7fb ff4a 	bl	8008c70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cddc:	4b5e      	ldr	r3, [pc, #376]	; (800cf58 <tcp_receive+0xfe0>)
 800cdde:	881b      	ldrh	r3, [r3, #0]
 800cde0:	461a      	mov	r2, r3
 800cde2:	4b5b      	ldr	r3, [pc, #364]	; (800cf50 <tcp_receive+0xfd8>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	441a      	add	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	6879      	ldr	r1, [r7, #4]
 800cdee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdf0:	440b      	add	r3, r1
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f340 8085 	ble.w	800cf04 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	899b      	ldrh	r3, [r3, #12]
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fa ff7b 	bl	8007d00 <lwip_htons>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d01e      	beq.n	800ce52 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	899b      	ldrh	r3, [r3, #12]
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ce22:	b29c      	uxth	r4, r3
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	899b      	ldrh	r3, [r3, #12]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fa ff66 	bl	8007d00 <lwip_htons>
 800ce34:	4603      	mov	r3, r0
 800ce36:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fa ff5f 	bl	8007d00 <lwip_htons>
 800ce42:	4603      	mov	r3, r0
 800ce44:	461a      	mov	r2, r3
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	4322      	orrs	r2, r4
 800ce4e:	b292      	uxth	r2, r2
 800ce50:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce5c:	4413      	add	r3, r2
 800ce5e:	b299      	uxth	r1, r3
 800ce60:	4b3b      	ldr	r3, [pc, #236]	; (800cf50 <tcp_receive+0xfd8>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	1a8a      	subs	r2, r1, r2
 800ce6c:	b292      	uxth	r2, r2
 800ce6e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	891b      	ldrh	r3, [r3, #8]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4610      	mov	r0, r2
 800ce80:	f7fb fef6 	bl	8008c70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	891c      	ldrh	r4, [r3, #8]
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	899b      	ldrh	r3, [r3, #12]
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fa ff33 	bl	8007d00 <lwip_htons>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	f003 0303 	and.w	r3, r3, #3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <tcp_receive+0xf30>
 800cea4:	2301      	movs	r3, #1
 800cea6:	e000      	b.n	800ceaa <tcp_receive+0xf32>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	4423      	add	r3, r4
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	4b2a      	ldr	r3, [pc, #168]	; (800cf58 <tcp_receive+0xfe0>)
 800ceb0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ceb2:	4b29      	ldr	r3, [pc, #164]	; (800cf58 <tcp_receive+0xfe0>)
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	4b25      	ldr	r3, [pc, #148]	; (800cf50 <tcp_receive+0xfd8>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	441a      	add	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	6879      	ldr	r1, [r7, #4]
 800cec4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cec6:	440b      	add	r3, r1
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d01b      	beq.n	800cf04 <tcp_receive+0xf8c>
 800cecc:	4b23      	ldr	r3, [pc, #140]	; (800cf5c <tcp_receive+0xfe4>)
 800cece:	f240 627b 	movw	r2, #1659	; 0x67b
 800ced2:	4923      	ldr	r1, [pc, #140]	; (800cf60 <tcp_receive+0xfe8>)
 800ced4:	4823      	ldr	r0, [pc, #140]	; (800cf64 <tcp_receive+0xfec>)
 800ced6:	f008 fc17 	bl	8015708 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ceda:	e013      	b.n	800cf04 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cede:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f47f aeab 	bne.w	800cc44 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800ceee:	e00f      	b.n	800cf10 <tcp_receive+0xf98>
                break;
 800cef0:	bf00      	nop
 800cef2:	e00d      	b.n	800cf10 <tcp_receive+0xf98>
                break;
 800cef4:	bf00      	nop
 800cef6:	e00b      	b.n	800cf10 <tcp_receive+0xf98>
                  break;
 800cef8:	bf00      	nop
 800cefa:	e009      	b.n	800cf10 <tcp_receive+0xf98>
                  break;
 800cefc:	bf00      	nop
 800cefe:	e007      	b.n	800cf10 <tcp_receive+0xf98>
                  break;
 800cf00:	bf00      	nop
 800cf02:	e005      	b.n	800cf10 <tcp_receive+0xf98>
                break;
 800cf04:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800cf06:	e003      	b.n	800cf10 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 ff4f 	bl	800ddac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cf0e:	e01a      	b.n	800cf46 <tcp_receive+0xfce>
 800cf10:	e019      	b.n	800cf46 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cf12:	4b0f      	ldr	r3, [pc, #60]	; (800cf50 <tcp_receive+0xfd8>)
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	db0a      	blt.n	800cf36 <tcp_receive+0xfbe>
 800cf20:	4b0b      	ldr	r3, [pc, #44]	; (800cf50 <tcp_receive+0xfd8>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf2c:	440b      	add	r3, r1
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	3301      	adds	r3, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	dd07      	ble.n	800cf46 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	7e9b      	ldrb	r3, [r3, #26]
 800cf3a:	f043 0302 	orr.w	r3, r3, #2
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800cf44:	e7ff      	b.n	800cf46 <tcp_receive+0xfce>
 800cf46:	bf00      	nop
 800cf48:	3734      	adds	r7, #52	; 0x34
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20000264 	.word	0x20000264
 800cf54:	20000244 	.word	0x20000244
 800cf58:	2000026e 	.word	0x2000026e
 800cf5c:	080171ac 	.word	0x080171ac
 800cf60:	08017478 	.word	0x08017478
 800cf64:	080171f0 	.word	0x080171f0

0800cf68 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800cf6e:	4b18      	ldr	r3, [pc, #96]	; (800cfd0 <tcp_getoptbyte+0x68>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d005      	beq.n	800cf82 <tcp_getoptbyte+0x1a>
 800cf76:	4b17      	ldr	r3, [pc, #92]	; (800cfd4 <tcp_getoptbyte+0x6c>)
 800cf78:	881a      	ldrh	r2, [r3, #0]
 800cf7a:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <tcp_getoptbyte+0x70>)
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d20e      	bcs.n	800cfa0 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800cf82:	4b16      	ldr	r3, [pc, #88]	; (800cfdc <tcp_getoptbyte+0x74>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3314      	adds	r3, #20
 800cf88:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800cf8a:	4b12      	ldr	r3, [pc, #72]	; (800cfd4 <tcp_getoptbyte+0x6c>)
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	b291      	uxth	r1, r2
 800cf92:	4a10      	ldr	r2, [pc, #64]	; (800cfd4 <tcp_getoptbyte+0x6c>)
 800cf94:	8011      	strh	r1, [r2, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	e010      	b.n	800cfc2 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800cfa0:	4b0c      	ldr	r3, [pc, #48]	; (800cfd4 <tcp_getoptbyte+0x6c>)
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	b291      	uxth	r1, r2
 800cfa8:	4a0a      	ldr	r2, [pc, #40]	; (800cfd4 <tcp_getoptbyte+0x6c>)
 800cfaa:	8011      	strh	r1, [r2, #0]
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	4b0a      	ldr	r3, [pc, #40]	; (800cfd8 <tcp_getoptbyte+0x70>)
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800cfb8:	4b05      	ldr	r3, [pc, #20]	; (800cfd0 <tcp_getoptbyte+0x68>)
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	370c      	adds	r7, #12
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	2000025c 	.word	0x2000025c
 800cfd4:	20000260 	.word	0x20000260
 800cfd8:	2000025a 	.word	0x2000025a
 800cfdc:	20000254 	.word	0x20000254

0800cfe0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cfe8:	4b2d      	ldr	r3, [pc, #180]	; (800d0a0 <tcp_parseopt+0xc0>)
 800cfea:	881b      	ldrh	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d053      	beq.n	800d098 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cff0:	4b2c      	ldr	r3, [pc, #176]	; (800d0a4 <tcp_parseopt+0xc4>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	801a      	strh	r2, [r3, #0]
 800cff6:	e043      	b.n	800d080 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800cff8:	f7ff ffb6 	bl	800cf68 <tcp_getoptbyte>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d03c      	beq.n	800d080 <tcp_parseopt+0xa0>
 800d006:	2b02      	cmp	r3, #2
 800d008:	d002      	beq.n	800d010 <tcp_parseopt+0x30>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d03f      	beq.n	800d08e <tcp_parseopt+0xae>
 800d00e:	e026      	b.n	800d05e <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d010:	f7ff ffaa 	bl	800cf68 <tcp_getoptbyte>
 800d014:	4603      	mov	r3, r0
 800d016:	2b04      	cmp	r3, #4
 800d018:	d13b      	bne.n	800d092 <tcp_parseopt+0xb2>
 800d01a:	4b22      	ldr	r3, [pc, #136]	; (800d0a4 <tcp_parseopt+0xc4>)
 800d01c:	881b      	ldrh	r3, [r3, #0]
 800d01e:	3302      	adds	r3, #2
 800d020:	4a1f      	ldr	r2, [pc, #124]	; (800d0a0 <tcp_parseopt+0xc0>)
 800d022:	8812      	ldrh	r2, [r2, #0]
 800d024:	4293      	cmp	r3, r2
 800d026:	dc34      	bgt.n	800d092 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800d028:	f7ff ff9e 	bl	800cf68 <tcp_getoptbyte>
 800d02c:	4603      	mov	r3, r0
 800d02e:	b29b      	uxth	r3, r3
 800d030:	021b      	lsls	r3, r3, #8
 800d032:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800d034:	f7ff ff98 	bl	800cf68 <tcp_getoptbyte>
 800d038:	4603      	mov	r3, r0
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	89bb      	ldrh	r3, [r7, #12]
 800d03e:	4313      	orrs	r3, r2
 800d040:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d042:	89bb      	ldrh	r3, [r7, #12]
 800d044:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d048:	d804      	bhi.n	800d054 <tcp_parseopt+0x74>
 800d04a:	89bb      	ldrh	r3, [r7, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d001      	beq.n	800d054 <tcp_parseopt+0x74>
 800d050:	89ba      	ldrh	r2, [r7, #12]
 800d052:	e001      	b.n	800d058 <tcp_parseopt+0x78>
 800d054:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800d05c:	e010      	b.n	800d080 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800d05e:	f7ff ff83 	bl	800cf68 <tcp_getoptbyte>
 800d062:	4603      	mov	r3, r0
 800d064:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800d066:	7afb      	ldrb	r3, [r7, #11]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d914      	bls.n	800d096 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800d06c:	7afb      	ldrb	r3, [r7, #11]
 800d06e:	b29a      	uxth	r2, r3
 800d070:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <tcp_parseopt+0xc4>)
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	4413      	add	r3, r2
 800d076:	b29b      	uxth	r3, r3
 800d078:	3b02      	subs	r3, #2
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	4b09      	ldr	r3, [pc, #36]	; (800d0a4 <tcp_parseopt+0xc4>)
 800d07e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d080:	4b08      	ldr	r3, [pc, #32]	; (800d0a4 <tcp_parseopt+0xc4>)
 800d082:	881a      	ldrh	r2, [r3, #0]
 800d084:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <tcp_parseopt+0xc0>)
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d3b5      	bcc.n	800cff8 <tcp_parseopt+0x18>
 800d08c:	e004      	b.n	800d098 <tcp_parseopt+0xb8>
        return;
 800d08e:	bf00      	nop
 800d090:	e002      	b.n	800d098 <tcp_parseopt+0xb8>
          return;
 800d092:	bf00      	nop
 800d094:	e000      	b.n	800d098 <tcp_parseopt+0xb8>
          return;
 800d096:	bf00      	nop
      }
    }
  }
}
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000258 	.word	0x20000258
 800d0a4:	20000260 	.word	0x20000260

0800d0a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d0ac:	4b05      	ldr	r3, [pc, #20]	; (800d0c4 <tcp_trigger_input_pcb_close+0x1c>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	f043 0310 	orr.w	r3, r3, #16
 800d0b4:	b2da      	uxtb	r2, r3
 800d0b6:	4b03      	ldr	r3, [pc, #12]	; (800d0c4 <tcp_trigger_input_pcb_close+0x1c>)
 800d0b8:	701a      	strb	r2, [r3, #0]
}
 800d0ba:	bf00      	nop
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr
 800d0c4:	20000271 	.word	0x20000271

0800d0c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	607b      	str	r3, [r7, #4]
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	817b      	strh	r3, [r7, #10]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d0da:	897a      	ldrh	r2, [r7, #10]
 800d0dc:	893b      	ldrh	r3, [r7, #8]
 800d0de:	4413      	add	r3, r2
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	3314      	adds	r3, #20
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	f7fb fbc2 	bl	8008874 <pbuf_alloc>
 800d0f0:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d057      	beq.n	800d1a8 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	895b      	ldrh	r3, [r3, #10]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	897b      	ldrh	r3, [r7, #10]
 800d100:	3314      	adds	r3, #20
 800d102:	429a      	cmp	r2, r3
 800d104:	da05      	bge.n	800d112 <tcp_output_alloc_header+0x4a>
 800d106:	4b2b      	ldr	r3, [pc, #172]	; (800d1b4 <tcp_output_alloc_header+0xec>)
 800d108:	2273      	movs	r2, #115	; 0x73
 800d10a:	492b      	ldr	r1, [pc, #172]	; (800d1b8 <tcp_output_alloc_header+0xf0>)
 800d10c:	482b      	ldr	r0, [pc, #172]	; (800d1bc <tcp_output_alloc_header+0xf4>)
 800d10e:	f008 fafb 	bl	8015708 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	8adb      	ldrh	r3, [r3, #22]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fa fdef 	bl	8007d00 <lwip_htons>
 800d122:	4603      	mov	r3, r0
 800d124:	461a      	mov	r2, r3
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	8b1b      	ldrh	r3, [r3, #24]
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fa fde6 	bl	8007d00 <lwip_htons>
 800d134:	4603      	mov	r3, r0
 800d136:	461a      	mov	r2, r3
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d146:	4618      	mov	r0, r3
 800d148:	f7fa fde8 	bl	8007d1c <lwip_htonl>
 800d14c:	4602      	mov	r2, r0
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800d152:	897b      	ldrh	r3, [r7, #10]
 800d154:	089b      	lsrs	r3, r3, #2
 800d156:	b29b      	uxth	r3, r3
 800d158:	3305      	adds	r3, #5
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	031b      	lsls	r3, r3, #12
 800d15e:	b29b      	uxth	r3, r3
 800d160:	f043 0310 	orr.w	r3, r3, #16
 800d164:	b29b      	uxth	r3, r3
 800d166:	4618      	mov	r0, r3
 800d168:	f7fa fdca 	bl	8007d00 <lwip_htons>
 800d16c:	4603      	mov	r3, r0
 800d16e:	461a      	mov	r2, r3
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fa fdc1 	bl	8007d00 <lwip_htons>
 800d17e:	4603      	mov	r3, r0
 800d180:	461a      	mov	r2, r3
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	2200      	movs	r2, #0
 800d18a:	741a      	strb	r2, [r3, #16]
 800d18c:	2200      	movs	r2, #0
 800d18e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2200      	movs	r2, #0
 800d194:	749a      	strb	r2, [r3, #18]
 800d196:	2200      	movs	r2, #0
 800d198:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d1a2:	441a      	add	r2, r3
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d1a8:	697b      	ldr	r3, [r7, #20]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	08017534 	.word	0x08017534
 800d1b8:	08017568 	.word	0x08017568
 800d1bc:	08017598 	.word	0x08017598

0800d1c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d1c0:	b590      	push	{r4, r7, lr}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d02d      	beq.n	800d22c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1d4:	60fb      	str	r3, [r7, #12]
 800d1d6:	e002      	b.n	800d1de <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1f8      	bne.n	800d1d8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	899b      	ldrh	r3, [r3, #12]
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fa fd86 	bl	8007d00 <lwip_htons>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d116      	bne.n	800d22c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	899b      	ldrh	r3, [r3, #12]
 800d204:	b29c      	uxth	r4, r3
 800d206:	2001      	movs	r0, #1
 800d208:	f7fa fd7a 	bl	8007d00 <lwip_htons>
 800d20c:	4603      	mov	r3, r0
 800d20e:	461a      	mov	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	4322      	orrs	r2, r4
 800d216:	b292      	uxth	r2, r2
 800d218:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	7e9b      	ldrb	r3, [r3, #26]
 800d21e:	f043 0320 	orr.w	r3, r3, #32
 800d222:	b2da      	uxtb	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	e004      	b.n	800d236 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d22c:	2101      	movs	r1, #1
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fcc0 	bl	800dbb4 <tcp_enqueue_flags>
 800d234:	4603      	mov	r3, r0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd90      	pop	{r4, r7, pc}
	...

0800d240 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800d240:	b590      	push	{r4, r7, lr}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	603b      	str	r3, [r7, #0]
 800d24c:	4613      	mov	r3, r2
 800d24e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d250:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	b2db      	uxtb	r3, r3
 800d258:	f003 0304 	and.w	r3, r3, #4
 800d25c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d25e:	2003      	movs	r0, #3
 800d260:	f7fb f8fc 	bl	800845c <memp_malloc>
 800d264:	6138      	str	r0, [r7, #16]
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d104      	bne.n	800d276 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d26c:	68b8      	ldr	r0, [r7, #8]
 800d26e:	f7fb fe73 	bl	8008f58 <pbuf_free>
    return NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	e061      	b.n	800d33a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d27c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	2200      	movs	r2, #0
 800d282:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	891a      	ldrh	r2, [r3, #8]
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	b29b      	uxth	r3, r3
 800d292:	429a      	cmp	r2, r3
 800d294:	d205      	bcs.n	800d2a2 <tcp_create_segment+0x62>
 800d296:	4b2b      	ldr	r3, [pc, #172]	; (800d344 <tcp_create_segment+0x104>)
 800d298:	22ba      	movs	r2, #186	; 0xba
 800d29a:	492b      	ldr	r1, [pc, #172]	; (800d348 <tcp_create_segment+0x108>)
 800d29c:	482b      	ldr	r0, [pc, #172]	; (800d34c <tcp_create_segment+0x10c>)
 800d29e:	f008 fa33 	bl	8015708 <iprintf>
  seg->len = p->tot_len - optlen;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	891a      	ldrh	r2, [r3, #8]
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800d2b2:	2114      	movs	r1, #20
 800d2b4:	68b8      	ldr	r0, [r7, #8]
 800d2b6:	f7fb fe2b 	bl	8008f10 <pbuf_header>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d004      	beq.n	800d2ca <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d2c0:	6938      	ldr	r0, [r7, #16]
 800d2c2:	f7fd f930 	bl	800a526 <tcp_seg_free>
    return NULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e037      	b.n	800d33a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	685a      	ldr	r2, [r3, #4]
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	8ada      	ldrh	r2, [r3, #22]
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	68dc      	ldr	r4, [r3, #12]
 800d2dc:	4610      	mov	r0, r2
 800d2de:	f7fa fd0f 	bl	8007d00 <lwip_htons>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8b1a      	ldrh	r2, [r3, #24]
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	68dc      	ldr	r4, [r3, #12]
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	f7fa fd06 	bl	8007d00 <lwip_htons>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	68dc      	ldr	r4, [r3, #12]
 800d2fc:	6838      	ldr	r0, [r7, #0]
 800d2fe:	f7fa fd0d 	bl	8007d1c <lwip_htonl>
 800d302:	4603      	mov	r3, r0
 800d304:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800d306:	7dfb      	ldrb	r3, [r7, #23]
 800d308:	089b      	lsrs	r3, r3, #2
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	3305      	adds	r3, #5
 800d310:	b29b      	uxth	r3, r3
 800d312:	031b      	lsls	r3, r3, #12
 800d314:	b29a      	uxth	r2, r3
 800d316:	79fb      	ldrb	r3, [r7, #7]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	4313      	orrs	r3, r2
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	68dc      	ldr	r4, [r3, #12]
 800d322:	4610      	mov	r0, r2
 800d324:	f7fa fcec 	bl	8007d00 <lwip_htons>
 800d328:	4603      	mov	r3, r0
 800d32a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	749a      	strb	r2, [r3, #18]
 800d334:	2200      	movs	r2, #0
 800d336:	74da      	strb	r2, [r3, #19]
  return seg;
 800d338:	693b      	ldr	r3, [r7, #16]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	371c      	adds	r7, #28
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd90      	pop	{r4, r7, pc}
 800d342:	bf00      	nop
 800d344:	08017534 	.word	0x08017534
 800d348:	080175c0 	.word	0x080175c0
 800d34c:	08017598 	.word	0x08017598

0800d350 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	607b      	str	r3, [r7, #4]
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]
 800d35c:	460b      	mov	r3, r1
 800d35e:	81bb      	strh	r3, [r7, #12]
 800d360:	4613      	mov	r3, r2
 800d362:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d364:	89bb      	ldrh	r3, [r7, #12]
 800d366:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d368:	89ba      	ldrh	r2, [r7, #12]
 800d36a:	897b      	ldrh	r3, [r7, #10]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d221      	bcs.n	800d3b4 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d374:	f003 0302 	and.w	r3, r3, #2
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d111      	bne.n	800d3a0 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	7e9b      	ldrb	r3, [r3, #26]
 800d380:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d384:	2b00      	cmp	r3, #0
 800d386:	d115      	bne.n	800d3b4 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800d388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d007      	beq.n	800d3a0 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800d394:	2b00      	cmp	r3, #0
 800d396:	d103      	bne.n	800d3a0 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d009      	beq.n	800d3b4 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d3a0:	89bb      	ldrh	r3, [r7, #12]
 800d3a2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d3a6:	f023 0203 	bic.w	r2, r3, #3
 800d3aa:	897b      	ldrh	r3, [r7, #10]
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	bf28      	it	cs
 800d3b0:	4613      	movcs	r3, r2
 800d3b2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d3b4:	8af9      	ldrh	r1, [r7, #22]
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fb fa5a 	bl	8008874 <pbuf_alloc>
 800d3c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d101      	bne.n	800d3cc <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	e019      	b.n	800d400 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d006      	beq.n	800d3e2 <tcp_pbuf_prealloc+0x92>
 800d3d4:	4b0c      	ldr	r3, [pc, #48]	; (800d408 <tcp_pbuf_prealloc+0xb8>)
 800d3d6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d3da:	490c      	ldr	r1, [pc, #48]	; (800d40c <tcp_pbuf_prealloc+0xbc>)
 800d3dc:	480c      	ldr	r0, [pc, #48]	; (800d410 <tcp_pbuf_prealloc+0xc0>)
 800d3de:	f008 f993 	bl	8015708 <iprintf>
  *oversize = p->len - length;
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	895a      	ldrh	r2, [r3, #10]
 800d3e6:	89bb      	ldrh	r3, [r7, #12]
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	89ba      	ldrh	r2, [r7, #12]
 800d3f4:	811a      	strh	r2, [r3, #8]
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	891a      	ldrh	r2, [r3, #8]
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	815a      	strh	r2, [r3, #10]
  return p;
 800d3fe:	693b      	ldr	r3, [r7, #16]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	08017534 	.word	0x08017534
 800d40c:	080175d8 	.word	0x080175d8
 800d410:	08017598 	.word	0x08017598

0800d414 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	460b      	mov	r3, r1
 800d41e:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	7d1b      	ldrb	r3, [r3, #20]
 800d424:	2b04      	cmp	r3, #4
 800d426:	d00e      	beq.n	800d446 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d42c:	2b07      	cmp	r3, #7
 800d42e:	d00a      	beq.n	800d446 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d434:	2b02      	cmp	r3, #2
 800d436:	d006      	beq.n	800d446 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d002      	beq.n	800d446 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d440:	f06f 030a 	mvn.w	r3, #10
 800d444:	e04f      	b.n	800d4e6 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800d446:	887b      	ldrh	r3, [r7, #2]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d101      	bne.n	800d450 <tcp_write_checks+0x3c>
    return ERR_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	e04a      	b.n	800d4e6 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d456:	887a      	ldrh	r2, [r7, #2]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d909      	bls.n	800d470 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7e9b      	ldrb	r3, [r3, #26]
 800d460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d464:	b2da      	uxtb	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d46a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d46e:	e03a      	b.n	800d4e6 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d476:	2b08      	cmp	r3, #8
 800d478:	d806      	bhi.n	800d488 <tcp_write_checks+0x74>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d480:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d484:	4293      	cmp	r3, r2
 800d486:	d909      	bls.n	800d49c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7e9b      	ldrb	r3, [r3, #26]
 800d48c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d490:	b2da      	uxtb	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d49a:	e024      	b.n	800d4e6 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00f      	beq.n	800d4c6 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d11a      	bne.n	800d4e4 <tcp_write_checks+0xd0>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d116      	bne.n	800d4e4 <tcp_write_checks+0xd0>
 800d4b6:	4b0e      	ldr	r3, [pc, #56]	; (800d4f0 <tcp_write_checks+0xdc>)
 800d4b8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800d4bc:	490d      	ldr	r1, [pc, #52]	; (800d4f4 <tcp_write_checks+0xe0>)
 800d4be:	480e      	ldr	r0, [pc, #56]	; (800d4f8 <tcp_write_checks+0xe4>)
 800d4c0:	f008 f922 	bl	8015708 <iprintf>
 800d4c4:	e00e      	b.n	800d4e4 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d103      	bne.n	800d4d6 <tcp_write_checks+0xc2>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d006      	beq.n	800d4e4 <tcp_write_checks+0xd0>
 800d4d6:	4b06      	ldr	r3, [pc, #24]	; (800d4f0 <tcp_write_checks+0xdc>)
 800d4d8:	f240 1259 	movw	r2, #345	; 0x159
 800d4dc:	4907      	ldr	r1, [pc, #28]	; (800d4fc <tcp_write_checks+0xe8>)
 800d4de:	4806      	ldr	r0, [pc, #24]	; (800d4f8 <tcp_write_checks+0xe4>)
 800d4e0:	f008 f912 	bl	8015708 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	08017534 	.word	0x08017534
 800d4f4:	080175ec 	.word	0x080175ec
 800d4f8:	08017598 	.word	0x08017598
 800d4fc:	08017628 	.word	0x08017628

0800d500 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d500:	b590      	push	{r4, r7, lr}
 800d502:	b09b      	sub	sp, #108	; 0x6c
 800d504:	af04      	add	r7, sp, #16
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	4611      	mov	r1, r2
 800d50c:	461a      	mov	r2, r3
 800d50e:	460b      	mov	r3, r1
 800d510:	80fb      	strh	r3, [r7, #6]
 800d512:	4613      	mov	r3, r2
 800d514:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d516:	2300      	movs	r3, #0
 800d518:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d51a:	2300      	movs	r3, #0
 800d51c:	653b      	str	r3, [r7, #80]	; 0x50
 800d51e:	2300      	movs	r3, #0
 800d520:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d522:	2300      	movs	r3, #0
 800d524:	64bb      	str	r3, [r7, #72]	; 0x48
 800d526:	2300      	movs	r3, #0
 800d528:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d52a:	2300      	movs	r3, #0
 800d52c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d54e:	085b      	lsrs	r3, r3, #1
 800d550:	b29a      	uxth	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d556:	4293      	cmp	r3, r2
 800d558:	bf28      	it	cs
 800d55a:	4613      	movcs	r3, r2
 800d55c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d55e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d560:	2b00      	cmp	r3, #0
 800d562:	d102      	bne.n	800d56a <tcp_write+0x6a>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d568:	e000      	b.n	800d56c <tcp_write+0x6c>
 800d56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d56c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d109      	bne.n	800d588 <tcp_write+0x88>
 800d574:	4b92      	ldr	r3, [pc, #584]	; (800d7c0 <tcp_write+0x2c0>)
 800d576:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800d57a:	4992      	ldr	r1, [pc, #584]	; (800d7c4 <tcp_write+0x2c4>)
 800d57c:	4892      	ldr	r0, [pc, #584]	; (800d7c8 <tcp_write+0x2c8>)
 800d57e:	f008 f8c3 	bl	8015708 <iprintf>
 800d582:	f06f 030f 	mvn.w	r3, #15
 800d586:	e30a      	b.n	800db9e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d588:	88fb      	ldrh	r3, [r7, #6]
 800d58a:	4619      	mov	r1, r3
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f7ff ff41 	bl	800d414 <tcp_write_checks>
 800d592:	4603      	mov	r3, r0
 800d594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d598:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <tcp_write+0xa6>
    return err;
 800d5a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d5a4:	e2fb      	b.n	800db9e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80f5 	beq.w	800d7a4 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5be:	653b      	str	r3, [r7, #80]	; 0x50
 800d5c0:	e002      	b.n	800d5c8 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800d5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1f8      	bne.n	800d5c2 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800d5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5d2:	7a9b      	ldrb	r3, [r3, #10]
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	f003 0304 	and.w	r3, r3, #4
 800d5dc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d5de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e2:	891b      	ldrh	r3, [r3, #8]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	8c3b      	ldrh	r3, [r7, #32]
 800d5e8:	440b      	add	r3, r1
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	da06      	bge.n	800d5fc <tcp_write+0xfc>
 800d5ee:	4b74      	ldr	r3, [pc, #464]	; (800d7c0 <tcp_write+0x2c0>)
 800d5f0:	f240 12c7 	movw	r2, #455	; 0x1c7
 800d5f4:	4975      	ldr	r1, [pc, #468]	; (800d7cc <tcp_write+0x2cc>)
 800d5f6:	4874      	ldr	r0, [pc, #464]	; (800d7c8 <tcp_write+0x2c8>)
 800d5f8:	f008 f886 	bl	8015708 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5fe:	891a      	ldrh	r2, [r3, #8]
 800d600:	8c3b      	ldrh	r3, [r7, #32]
 800d602:	4413      	add	r3, r2
 800d604:	b29b      	uxth	r3, r3
 800d606:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d612:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d614:	8a7b      	ldrh	r3, [r7, #18]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d027      	beq.n	800d66a <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d61a:	8a7b      	ldrh	r3, [r7, #18]
 800d61c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d61e:	429a      	cmp	r2, r3
 800d620:	d206      	bcs.n	800d630 <tcp_write+0x130>
 800d622:	4b67      	ldr	r3, [pc, #412]	; (800d7c0 <tcp_write+0x2c0>)
 800d624:	f240 12d9 	movw	r2, #473	; 0x1d9
 800d628:	4969      	ldr	r1, [pc, #420]	; (800d7d0 <tcp_write+0x2d0>)
 800d62a:	4867      	ldr	r0, [pc, #412]	; (800d7c8 <tcp_write+0x2c8>)
 800d62c:	f008 f86c 	bl	8015708 <iprintf>
      seg = last_unsent;
 800d630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d632:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d634:	8a7b      	ldrh	r3, [r7, #18]
 800d636:	88fa      	ldrh	r2, [r7, #6]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d901      	bls.n	800d640 <tcp_write+0x140>
 800d63c:	8a7b      	ldrh	r3, [r7, #18]
 800d63e:	e000      	b.n	800d642 <tcp_write+0x142>
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d644:	4293      	cmp	r3, r2
 800d646:	bfa8      	it	ge
 800d648:	4613      	movge	r3, r2
 800d64a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d64c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d652:	4413      	add	r3, r2
 800d654:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d658:	8a7a      	ldrh	r2, [r7, #18]
 800d65a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	b29b      	uxth	r3, r3
 800d660:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d662:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d664:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d666:	1ad3      	subs	r3, r2, r3
 800d668:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d66a:	8a7b      	ldrh	r3, [r7, #18]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00b      	beq.n	800d688 <tcp_write+0x188>
 800d670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d674:	88fb      	ldrh	r3, [r7, #6]
 800d676:	429a      	cmp	r2, r3
 800d678:	d006      	beq.n	800d688 <tcp_write+0x188>
 800d67a:	4b51      	ldr	r3, [pc, #324]	; (800d7c0 <tcp_write+0x2c0>)
 800d67c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d680:	4954      	ldr	r1, [pc, #336]	; (800d7d4 <tcp_write+0x2d4>)
 800d682:	4851      	ldr	r0, [pc, #324]	; (800d7c8 <tcp_write+0x2c8>)
 800d684:	f008 f840 	bl	8015708 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d688:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d68c:	88fb      	ldrh	r3, [r7, #6]
 800d68e:	429a      	cmp	r2, r3
 800d690:	f080 8168 	bcs.w	800d964 <tcp_write+0x464>
 800d694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 8164 	beq.w	800d964 <tcp_write+0x464>
 800d69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d69e:	891b      	ldrh	r3, [r3, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 815f 	beq.w	800d964 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d6a6:	88fa      	ldrh	r2, [r7, #6]
 800d6a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d6ac:	1ad2      	subs	r2, r2, r3
 800d6ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	bfa8      	it	ge
 800d6b4:	4613      	movge	r3, r2
 800d6b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d6b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d6bc:	797b      	ldrb	r3, [r7, #5]
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d027      	beq.n	800d716 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d6c6:	f107 0012 	add.w	r0, r7, #18
 800d6ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d6cc:	8bf9      	ldrh	r1, [r7, #30]
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	9302      	str	r3, [sp, #8]
 800d6d2:	797b      	ldrb	r3, [r7, #5]
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2004      	movs	r0, #4
 800d6de:	f7ff fe37 	bl	800d350 <tcp_pbuf_prealloc>
 800d6e2:	6578      	str	r0, [r7, #84]	; 0x54
 800d6e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f000 8227 	beq.w	800db3a <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6ee:	6858      	ldr	r0, [r3, #4]
 800d6f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	8bfa      	ldrh	r2, [r7, #30]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f007 ff49 	bl	8015592 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d700:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d702:	f7fb fcbd 	bl	8009080 <pbuf_clen>
 800d706:	4603      	mov	r3, r0
 800d708:	461a      	mov	r2, r3
 800d70a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d70e:	4413      	add	r3, r2
 800d710:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d714:	e03f      	b.n	800d796 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	637b      	str	r3, [r7, #52]	; 0x34
 800d71c:	e002      	b.n	800d724 <tcp_write+0x224>
 800d71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	637b      	str	r3, [r7, #52]	; 0x34
 800d724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1f8      	bne.n	800d71e <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72e:	7b1b      	ldrb	r3, [r3, #12]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d115      	bne.n	800d760 <tcp_write+0x260>
 800d734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d73a:	8952      	ldrh	r2, [r2, #10]
 800d73c:	4413      	add	r3, r2
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	429a      	cmp	r2, r3
 800d742:	d10d      	bne.n	800d760 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d744:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d006      	beq.n	800d75a <tcp_write+0x25a>
 800d74c:	4b1c      	ldr	r3, [pc, #112]	; (800d7c0 <tcp_write+0x2c0>)
 800d74e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800d752:	4921      	ldr	r1, [pc, #132]	; (800d7d8 <tcp_write+0x2d8>)
 800d754:	481c      	ldr	r0, [pc, #112]	; (800d7c8 <tcp_write+0x2c8>)
 800d756:	f007 ffd7 	bl	8015708 <iprintf>
          extendlen = seglen;
 800d75a:	8bfb      	ldrh	r3, [r7, #30]
 800d75c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d75e:	e01a      	b.n	800d796 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d760:	8bfb      	ldrh	r3, [r7, #30]
 800d762:	2201      	movs	r2, #1
 800d764:	4619      	mov	r1, r3
 800d766:	2004      	movs	r0, #4
 800d768:	f7fb f884 	bl	8008874 <pbuf_alloc>
 800d76c:	6578      	str	r0, [r7, #84]	; 0x54
 800d76e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 81e4 	beq.w	800db3e <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800d776:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	441a      	add	r2, r3
 800d77e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d780:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d782:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d784:	f7fb fc7c 	bl	8009080 <pbuf_clen>
 800d788:	4603      	mov	r3, r0
 800d78a:	461a      	mov	r2, r3
 800d78c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d790:	4413      	add	r3, r2
 800d792:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d796:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d79a:	8bfb      	ldrh	r3, [r7, #30]
 800d79c:	4413      	add	r3, r2
 800d79e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d7a2:	e0df      	b.n	800d964 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f000 80da 	beq.w	800d964 <tcp_write+0x464>
 800d7b0:	4b03      	ldr	r3, [pc, #12]	; (800d7c0 <tcp_write+0x2c0>)
 800d7b2:	f240 2225 	movw	r2, #549	; 0x225
 800d7b6:	4909      	ldr	r1, [pc, #36]	; (800d7dc <tcp_write+0x2dc>)
 800d7b8:	4803      	ldr	r0, [pc, #12]	; (800d7c8 <tcp_write+0x2c8>)
 800d7ba:	f007 ffa5 	bl	8015708 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d7be:	e0d1      	b.n	800d964 <tcp_write+0x464>
 800d7c0:	08017534 	.word	0x08017534
 800d7c4:	0801765c 	.word	0x0801765c
 800d7c8:	08017598 	.word	0x08017598
 800d7cc:	08017690 	.word	0x08017690
 800d7d0:	080176a8 	.word	0x080176a8
 800d7d4:	080176c8 	.word	0x080176c8
 800d7d8:	080176e8 	.word	0x080176e8
 800d7dc:	08017714 	.word	0x08017714
    struct pbuf *p;
    u16_t left = len - pos;
 800d7e0:	88fa      	ldrh	r2, [r7, #6]
 800d7e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d7f6:	8b7a      	ldrh	r2, [r7, #26]
 800d7f8:	8bbb      	ldrh	r3, [r7, #28]
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	bf28      	it	cs
 800d7fe:	4613      	movcs	r3, r2
 800d800:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d802:	797b      	ldrb	r3, [r7, #5]
 800d804:	f003 0301 	and.w	r3, r3, #1
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d036      	beq.n	800d87a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d810:	b29a      	uxth	r2, r3
 800d812:	8b3b      	ldrh	r3, [r7, #24]
 800d814:	4413      	add	r3, r2
 800d816:	b299      	uxth	r1, r3
 800d818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	bf0c      	ite	eq
 800d81e:	2301      	moveq	r3, #1
 800d820:	2300      	movne	r3, #0
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f107 0012 	add.w	r0, r7, #18
 800d828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d82a:	9302      	str	r3, [sp, #8]
 800d82c:	797b      	ldrb	r3, [r7, #5]
 800d82e:	9301      	str	r3, [sp, #4]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	4603      	mov	r3, r0
 800d836:	2000      	movs	r0, #0
 800d838:	f7ff fd8a 	bl	800d350 <tcp_pbuf_prealloc>
 800d83c:	6338      	str	r0, [r7, #48]	; 0x30
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 817e 	beq.w	800db42 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	895b      	ldrh	r3, [r3, #10]
 800d84a:	8b3a      	ldrh	r2, [r7, #24]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d906      	bls.n	800d85e <tcp_write+0x35e>
 800d850:	4b8f      	ldr	r3, [pc, #572]	; (800da90 <tcp_write+0x590>)
 800d852:	f240 2241 	movw	r2, #577	; 0x241
 800d856:	498f      	ldr	r1, [pc, #572]	; (800da94 <tcp_write+0x594>)
 800d858:	488f      	ldr	r0, [pc, #572]	; (800da98 <tcp_write+0x598>)
 800d85a:	f007 ff55 	bl	8015708 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	685a      	ldr	r2, [r3, #4]
 800d862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d866:	18d0      	adds	r0, r2, r3
 800d868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	4413      	add	r3, r2
 800d870:	8b3a      	ldrh	r2, [r7, #24]
 800d872:	4619      	mov	r1, r3
 800d874:	f007 fe8d 	bl	8015592 <memcpy>
 800d878:	e02e      	b.n	800d8d8 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d87a:	8a7b      	ldrh	r3, [r7, #18]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d006      	beq.n	800d88e <tcp_write+0x38e>
 800d880:	4b83      	ldr	r3, [pc, #524]	; (800da90 <tcp_write+0x590>)
 800d882:	f240 224b 	movw	r2, #587	; 0x24b
 800d886:	4985      	ldr	r1, [pc, #532]	; (800da9c <tcp_write+0x59c>)
 800d888:	4883      	ldr	r0, [pc, #524]	; (800da98 <tcp_write+0x598>)
 800d88a:	f007 ff3d 	bl	8015708 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d88e:	8b3b      	ldrh	r3, [r7, #24]
 800d890:	2201      	movs	r2, #1
 800d892:	4619      	mov	r1, r3
 800d894:	2000      	movs	r0, #0
 800d896:	f7fa ffed 	bl	8008874 <pbuf_alloc>
 800d89a:	6178      	str	r0, [r7, #20]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 8151 	beq.w	800db46 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800d8a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	441a      	add	r2, r3
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	f7fa ffda 	bl	8008874 <pbuf_alloc>
 800d8c0:	6338      	str	r0, [r7, #48]	; 0x30
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d103      	bne.n	800d8d0 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d8c8:	6978      	ldr	r0, [r7, #20]
 800d8ca:	f7fb fb45 	bl	8008f58 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d8ce:	e13d      	b.n	800db4c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d8d0:	6979      	ldr	r1, [r7, #20]
 800d8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d4:	f7fb fc0e 	bl	80090f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d8d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8da:	f7fb fbd1 	bl	8009080 <pbuf_clen>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d8ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d8f0:	2b09      	cmp	r3, #9
 800d8f2:	d805      	bhi.n	800d900 <tcp_write+0x400>
 800d8f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d8f8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d903      	bls.n	800d908 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d902:	f7fb fb29 	bl	8008f58 <pbuf_free>
      goto memerr;
 800d906:	e121      	b.n	800db4c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d90c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d910:	441a      	add	r2, r3
 800d912:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	4613      	mov	r3, r2
 800d91a:	2200      	movs	r2, #0
 800d91c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f7ff fc8e 	bl	800d240 <tcp_create_segment>
 800d924:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f000 810e 	beq.w	800db4a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d92e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <tcp_write+0x43a>
      queue = seg;
 800d934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d936:	647b      	str	r3, [r7, #68]	; 0x44
 800d938:	e00c      	b.n	800d954 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d106      	bne.n	800d94e <tcp_write+0x44e>
 800d940:	4b53      	ldr	r3, [pc, #332]	; (800da90 <tcp_write+0x590>)
 800d942:	f240 2285 	movw	r2, #645	; 0x285
 800d946:	4956      	ldr	r1, [pc, #344]	; (800daa0 <tcp_write+0x5a0>)
 800d948:	4853      	ldr	r0, [pc, #332]	; (800da98 <tcp_write+0x598>)
 800d94a:	f007 fedd 	bl	8015708 <iprintf>
      prev_seg->next = seg;
 800d94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d952:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d956:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d958:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d95c:	8b3b      	ldrh	r3, [r7, #24]
 800d95e:	4413      	add	r3, r2
 800d960:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d964:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d968:	88fb      	ldrh	r3, [r7, #6]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	f4ff af38 	bcc.w	800d7e0 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d970:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d972:	2b00      	cmp	r3, #0
 800d974:	d02c      	beq.n	800d9d0 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d97c:	e01e      	b.n	800d9bc <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	891a      	ldrh	r2, [r3, #8]
 800d982:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d984:	4413      	add	r3, r2
 800d986:	b29a      	uxth	r2, r3
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d110      	bne.n	800d9b6 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d99a:	8952      	ldrh	r2, [r2, #10]
 800d99c:	4413      	add	r3, r2
 800d99e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d9a0:	68b9      	ldr	r1, [r7, #8]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f007 fdf5 	bl	8015592 <memcpy>
        p->len += oversize_used;
 800d9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9aa:	895a      	ldrh	r2, [r3, #10]
 800d9ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9ae:	4413      	add	r3, r2
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1dd      	bne.n	800d97e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800d9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c4:	891a      	ldrh	r2, [r3, #8]
 800d9c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9c8:	4413      	add	r3, r2
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ce:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d9d0:	8a7a      	ldrh	r2, [r7, #18]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d018      	beq.n	800da10 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <tcp_write+0x4f2>
 800d9e4:	4b2a      	ldr	r3, [pc, #168]	; (800da90 <tcp_write+0x590>)
 800d9e6:	f240 22bb 	movw	r2, #699	; 0x2bb
 800d9ea:	492e      	ldr	r1, [pc, #184]	; (800daa4 <tcp_write+0x5a4>)
 800d9ec:	482a      	ldr	r0, [pc, #168]	; (800da98 <tcp_write+0x598>)
 800d9ee:	f007 fe8b 	bl	8015708 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fb fb7b 	bl	80090f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da00:	891a      	ldrh	r2, [r3, #8]
 800da02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da04:	891b      	ldrh	r3, [r3, #8]
 800da06:	4413      	add	r3, r2
 800da08:	b29a      	uxth	r2, r3
 800da0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da0c:	811a      	strh	r2, [r3, #8]
 800da0e:	e037      	b.n	800da80 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800da10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da12:	2b00      	cmp	r3, #0
 800da14:	d034      	beq.n	800da80 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800da16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <tcp_write+0x524>
 800da1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <tcp_write+0x532>
 800da24:	4b1a      	ldr	r3, [pc, #104]	; (800da90 <tcp_write+0x590>)
 800da26:	f240 22c1 	movw	r2, #705	; 0x2c1
 800da2a:	491f      	ldr	r1, [pc, #124]	; (800daa8 <tcp_write+0x5a8>)
 800da2c:	481a      	ldr	r0, [pc, #104]	; (800da98 <tcp_write+0x598>)
 800da2e:	f007 fe6b 	bl	8015708 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800da32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	62bb      	str	r3, [r7, #40]	; 0x28
 800da38:	e009      	b.n	800da4e <tcp_write+0x54e>
      p->tot_len += extendlen;
 800da3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3c:	891a      	ldrh	r2, [r3, #8]
 800da3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da40:	4413      	add	r3, r2
 800da42:	b29a      	uxth	r2, r3
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800da4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1f1      	bne.n	800da3a <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800da56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da58:	891a      	ldrh	r2, [r3, #8]
 800da5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da5c:	4413      	add	r3, r2
 800da5e:	b29a      	uxth	r2, r3
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	895a      	ldrh	r2, [r3, #10]
 800da68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da6a:	4413      	add	r3, r2
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800da72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da74:	891a      	ldrh	r2, [r3, #8]
 800da76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da78:	4413      	add	r3, r2
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da7e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800da80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da82:	2b00      	cmp	r3, #0
 800da84:	d112      	bne.n	800daac <tcp_write+0x5ac>
    pcb->unsent = queue;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da8a:	669a      	str	r2, [r3, #104]	; 0x68
 800da8c:	e011      	b.n	800dab2 <tcp_write+0x5b2>
 800da8e:	bf00      	nop
 800da90:	08017534 	.word	0x08017534
 800da94:	08017744 	.word	0x08017744
 800da98:	08017598 	.word	0x08017598
 800da9c:	08017784 	.word	0x08017784
 800daa0:	08017794 	.word	0x08017794
 800daa4:	080177a8 	.word	0x080177a8
 800daa8:	080177e0 	.word	0x080177e0
  } else {
    last_unsent->next = queue;
 800daac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dab0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dab6:	88fb      	ldrh	r3, [r7, #6]
 800dab8:	441a      	add	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dac4:	88fb      	ldrh	r3, [r7, #6]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	b29a      	uxth	r2, r3
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dad6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00e      	beq.n	800db02 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d10a      	bne.n	800db02 <tcp_write+0x602>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d106      	bne.n	800db02 <tcp_write+0x602>
 800daf4:	4b2c      	ldr	r3, [pc, #176]	; (800dba8 <tcp_write+0x6a8>)
 800daf6:	f240 22ed 	movw	r2, #749	; 0x2ed
 800dafa:	492c      	ldr	r1, [pc, #176]	; (800dbac <tcp_write+0x6ac>)
 800dafc:	482c      	ldr	r0, [pc, #176]	; (800dbb0 <tcp_write+0x6b0>)
 800dafe:	f007 fe03 	bl	8015708 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800db02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db04:	2b00      	cmp	r3, #0
 800db06:	d016      	beq.n	800db36 <tcp_write+0x636>
 800db08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d012      	beq.n	800db36 <tcp_write+0x636>
 800db10:	797b      	ldrb	r3, [r7, #5]
 800db12:	f003 0302 	and.w	r3, r3, #2
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10d      	bne.n	800db36 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800db1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	899b      	ldrh	r3, [r3, #12]
 800db20:	b29c      	uxth	r4, r3
 800db22:	2008      	movs	r0, #8
 800db24:	f7fa f8ec 	bl	8007d00 <lwip_htons>
 800db28:	4603      	mov	r3, r0
 800db2a:	461a      	mov	r2, r3
 800db2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	4322      	orrs	r2, r4
 800db32:	b292      	uxth	r2, r2
 800db34:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	e031      	b.n	800db9e <tcp_write+0x69e>
          goto memerr;
 800db3a:	bf00      	nop
 800db3c:	e006      	b.n	800db4c <tcp_write+0x64c>
            goto memerr;
 800db3e:	bf00      	nop
 800db40:	e004      	b.n	800db4c <tcp_write+0x64c>
        goto memerr;
 800db42:	bf00      	nop
 800db44:	e002      	b.n	800db4c <tcp_write+0x64c>
        goto memerr;
 800db46:	bf00      	nop
 800db48:	e000      	b.n	800db4c <tcp_write+0x64c>
      goto memerr;
 800db4a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	7e9b      	ldrb	r3, [r3, #26]
 800db50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db54:	b2da      	uxtb	r2, r3
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800db5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <tcp_write+0x666>
    pbuf_free(concat_p);
 800db60:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800db62:	f7fb f9f9 	bl	8008f58 <pbuf_free>
  }
  if (queue != NULL) {
 800db66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d002      	beq.n	800db72 <tcp_write+0x672>
    tcp_segs_free(queue);
 800db6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800db6e:	f7fc fcc6 	bl	800a4fe <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00e      	beq.n	800db9a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <tcp_write+0x69a>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d106      	bne.n	800db9a <tcp_write+0x69a>
 800db8c:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <tcp_write+0x6a8>)
 800db8e:	f240 3202 	movw	r2, #770	; 0x302
 800db92:	4906      	ldr	r1, [pc, #24]	; (800dbac <tcp_write+0x6ac>)
 800db94:	4806      	ldr	r0, [pc, #24]	; (800dbb0 <tcp_write+0x6b0>)
 800db96:	f007 fdb7 	bl	8015708 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800db9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	375c      	adds	r7, #92	; 0x5c
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd90      	pop	{r4, r7, pc}
 800dba6:	bf00      	nop
 800dba8:	08017534 	.word	0x08017534
 800dbac:	08017818 	.word	0x08017818
 800dbb0:	08017598 	.word	0x08017598

0800dbb4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08a      	sub	sp, #40	; 0x28
 800dbb8:	af02      	add	r7, sp, #8
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	f003 0303 	and.w	r3, r3, #3
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d106      	bne.n	800dbe0 <tcp_enqueue_flags+0x2c>
 800dbd2:	4b6f      	ldr	r3, [pc, #444]	; (800dd90 <tcp_enqueue_flags+0x1dc>)
 800dbd4:	f240 321b 	movw	r2, #795	; 0x31b
 800dbd8:	496e      	ldr	r1, [pc, #440]	; (800dd94 <tcp_enqueue_flags+0x1e0>)
 800dbda:	486f      	ldr	r0, [pc, #444]	; (800dd98 <tcp_enqueue_flags+0x1e4>)
 800dbdc:	f007 fd94 	bl	8015708 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbe6:	2b08      	cmp	r3, #8
 800dbe8:	d806      	bhi.n	800dbf8 <tcp_enqueue_flags+0x44>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbf0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d90e      	bls.n	800dc16 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800dbf8:	78fb      	ldrb	r3, [r7, #3]
 800dbfa:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d109      	bne.n	800dc16 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	7e9b      	ldrb	r3, [r3, #26]
 800dc06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800dc10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc14:	e0b7      	b.n	800dd86 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800dc16:	78fb      	ldrb	r3, [r7, #3]
 800dc18:	f003 0302 	and.w	r3, r3, #2
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800dc20:	2301      	movs	r3, #1
 800dc22:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dc24:	7ffb      	ldrb	r3, [r7, #31]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	f003 0304 	and.w	r3, r3, #4
 800dc2e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	2200      	movs	r2, #0
 800dc36:	4619      	mov	r1, r3
 800dc38:	2000      	movs	r0, #0
 800dc3a:	f7fa fe1b 	bl	8008874 <pbuf_alloc>
 800dc3e:	6138      	str	r0, [r7, #16]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d109      	bne.n	800dc5a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	7e9b      	ldrb	r3, [r3, #26]
 800dc4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dc54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc58:	e095      	b.n	800dd86 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	895a      	ldrh	r2, [r3, #10]
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d206      	bcs.n	800dc74 <tcp_enqueue_flags+0xc0>
 800dc66:	4b4a      	ldr	r3, [pc, #296]	; (800dd90 <tcp_enqueue_flags+0x1dc>)
 800dc68:	f240 3241 	movw	r2, #833	; 0x341
 800dc6c:	494b      	ldr	r1, [pc, #300]	; (800dd9c <tcp_enqueue_flags+0x1e8>)
 800dc6e:	484a      	ldr	r0, [pc, #296]	; (800dd98 <tcp_enqueue_flags+0x1e4>)
 800dc70:	f007 fd4a 	bl	8015708 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800dc78:	78fa      	ldrb	r2, [r7, #3]
 800dc7a:	7ffb      	ldrb	r3, [r7, #31]
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	460b      	mov	r3, r1
 800dc80:	6939      	ldr	r1, [r7, #16]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7ff fadc 	bl	800d240 <tcp_create_segment>
 800dc88:	60f8      	str	r0, [r7, #12]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d109      	bne.n	800dca4 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	7e9b      	ldrb	r3, [r3, #26]
 800dc94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dc9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dca2:	e070      	b.n	800dd86 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	f003 0303 	and.w	r3, r3, #3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d006      	beq.n	800dcbe <tcp_enqueue_flags+0x10a>
 800dcb0:	4b37      	ldr	r3, [pc, #220]	; (800dd90 <tcp_enqueue_flags+0x1dc>)
 800dcb2:	f240 3249 	movw	r2, #841	; 0x349
 800dcb6:	493a      	ldr	r1, [pc, #232]	; (800dda0 <tcp_enqueue_flags+0x1ec>)
 800dcb8:	4837      	ldr	r0, [pc, #220]	; (800dd98 <tcp_enqueue_flags+0x1e4>)
 800dcba:	f007 fd25 	bl	8015708 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	891b      	ldrh	r3, [r3, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <tcp_enqueue_flags+0x120>
 800dcc6:	4b32      	ldr	r3, [pc, #200]	; (800dd90 <tcp_enqueue_flags+0x1dc>)
 800dcc8:	f240 324a 	movw	r2, #842	; 0x34a
 800dccc:	4935      	ldr	r1, [pc, #212]	; (800dda4 <tcp_enqueue_flags+0x1f0>)
 800dcce:	4832      	ldr	r0, [pc, #200]	; (800dd98 <tcp_enqueue_flags+0x1e4>)
 800dcd0:	f007 fd1a 	bl	8015708 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d103      	bne.n	800dce4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	669a      	str	r2, [r3, #104]	; 0x68
 800dce2:	e00d      	b.n	800dd00 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dce8:	61bb      	str	r3, [r7, #24]
 800dcea:	e002      	b.n	800dcf2 <tcp_enqueue_flags+0x13e>
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	61bb      	str	r3, [r7, #24]
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1f8      	bne.n	800dcec <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dd08:	78fb      	ldrb	r3, [r7, #3]
 800dd0a:	f003 0302 	and.w	r3, r3, #2
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d104      	bne.n	800dd1c <tcp_enqueue_flags+0x168>
 800dd12:	78fb      	ldrb	r3, [r7, #3]
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d004      	beq.n	800dd26 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dd26:	78fb      	ldrb	r3, [r7, #3]
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d006      	beq.n	800dd3e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	7e9b      	ldrb	r3, [r3, #26]
 800dd34:	f043 0320 	orr.w	r3, r3, #32
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fb f99c 	bl	8009080 <pbuf_clen>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd52:	4413      	add	r3, r2
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00e      	beq.n	800dd84 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10a      	bne.n	800dd84 <tcp_enqueue_flags+0x1d0>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d106      	bne.n	800dd84 <tcp_enqueue_flags+0x1d0>
 800dd76:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <tcp_enqueue_flags+0x1dc>)
 800dd78:	f240 326d 	movw	r2, #877	; 0x36d
 800dd7c:	490a      	ldr	r1, [pc, #40]	; (800dda8 <tcp_enqueue_flags+0x1f4>)
 800dd7e:	4806      	ldr	r0, [pc, #24]	; (800dd98 <tcp_enqueue_flags+0x1e4>)
 800dd80:	f007 fcc2 	bl	8015708 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3720      	adds	r7, #32
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	08017534 	.word	0x08017534
 800dd94:	08017838 	.word	0x08017838
 800dd98:	08017598 	.word	0x08017598
 800dd9c:	08017890 	.word	0x08017890
 800dda0:	080178cc 	.word	0x080178cc
 800dda4:	080178e4 	.word	0x080178e4
 800dda8:	08017910 	.word	0x08017910

0800ddac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ddac:	b590      	push	{r4, r7, lr}
 800ddae:	b08b      	sub	sp, #44	; 0x2c
 800ddb0:	af04      	add	r7, sp, #16
 800ddb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ddb8:	7dbb      	ldrb	r3, [r7, #22]
 800ddba:	b29c      	uxth	r4, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7f9 ffab 	bl	8007d1c <lwip_htonl>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2200      	movs	r2, #0
 800ddca:	4621      	mov	r1, r4
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff f97b 	bl	800d0c8 <tcp_output_alloc_header>
 800ddd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d109      	bne.n	800ddee <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	7e9b      	ldrb	r3, [r3, #26]
 800ddde:	f043 0303 	orr.w	r3, r3, #3
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dde8:	f06f 0301 	mvn.w	r3, #1
 800ddec:	e036      	b.n	800de5c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f003 fb44 	bl	8011480 <ip4_route>
 800ddf8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d102      	bne.n	800de06 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800de00:	23fc      	movs	r3, #252	; 0xfc
 800de02:	75fb      	strb	r3, [r7, #23]
 800de04:	e012      	b.n	800de2c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800de06:	6879      	ldr	r1, [r7, #4]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	1d18      	adds	r0, r3, #4
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	7a9c      	ldrb	r4, [r3, #10]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	7a5b      	ldrb	r3, [r3, #9]
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	9202      	str	r2, [sp, #8]
 800de18:	2206      	movs	r2, #6
 800de1a:	9201      	str	r2, [sp, #4]
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	4623      	mov	r3, r4
 800de20:	4602      	mov	r2, r0
 800de22:	6938      	ldr	r0, [r7, #16]
 800de24:	f003 fcf2 	bl	801180c <ip4_output_if>
 800de28:	4603      	mov	r3, r0
 800de2a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800de2c:	6938      	ldr	r0, [r7, #16]
 800de2e:	f7fb f893 	bl	8008f58 <pbuf_free>

  if (err != ERR_OK) {
 800de32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d007      	beq.n	800de4a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	7e9b      	ldrb	r3, [r3, #26]
 800de3e:	f043 0303 	orr.w	r3, r3, #3
 800de42:	b2da      	uxtb	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	769a      	strb	r2, [r3, #26]
 800de48:	e006      	b.n	800de58 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7e9b      	ldrb	r3, [r3, #26]
 800de4e:	f023 0303 	bic.w	r3, r3, #3
 800de52:	b2da      	uxtb	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800de58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	371c      	adds	r7, #28
 800de60:	46bd      	mov	sp, r7
 800de62:	bd90      	pop	{r4, r7, pc}

0800de64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800de64:	b5b0      	push	{r4, r5, r7, lr}
 800de66:	b08a      	sub	sp, #40	; 0x28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7d1b      	ldrb	r3, [r3, #20]
 800de70:	2b01      	cmp	r3, #1
 800de72:	d106      	bne.n	800de82 <tcp_output+0x1e>
 800de74:	4b9b      	ldr	r3, [pc, #620]	; (800e0e4 <tcp_output+0x280>)
 800de76:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800de7a:	499b      	ldr	r1, [pc, #620]	; (800e0e8 <tcp_output+0x284>)
 800de7c:	489b      	ldr	r0, [pc, #620]	; (800e0ec <tcp_output+0x288>)
 800de7e:	f007 fc43 	bl	8015708 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800de82:	4b9b      	ldr	r3, [pc, #620]	; (800e0f0 <tcp_output+0x28c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d101      	bne.n	800de90 <tcp_output+0x2c>
    return ERR_OK;
 800de8c:	2300      	movs	r3, #0
 800de8e:	e1cf      	b.n	800e230 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d203      	bcs.n	800dea8 <tcp_output+0x44>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dea6:	e002      	b.n	800deae <tcp_output+0x4a>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800deae:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deb4:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	7e9b      	ldrb	r3, [r3, #26]
 800deba:	f003 0302 	and.w	r3, r3, #2
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d017      	beq.n	800def2 <tcp_output+0x8e>
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00f      	beq.n	800dee8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f9 ff24 	bl	8007d1c <lwip_htonl>
 800ded4:	4602      	mov	r2, r0
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dede:	8912      	ldrh	r2, [r2, #8]
 800dee0:	4413      	add	r3, r2
     (seg == NULL ||
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d204      	bcs.n	800def2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f7ff ff5f 	bl	800ddac <tcp_send_empty_ack>
 800deee:	4603      	mov	r3, r0
 800def0:	e19e      	b.n	800e230 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800def6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d007      	beq.n	800df0e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800defe:	e002      	b.n	800df06 <tcp_output+0xa2>
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	623b      	str	r3, [r7, #32]
 800df06:	6a3b      	ldr	r3, [r7, #32]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1f8      	bne.n	800df00 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	3304      	adds	r3, #4
 800df12:	4618      	mov	r0, r3
 800df14:	f003 fab4 	bl	8011480 <ip4_route>
 800df18:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d102      	bne.n	800df26 <tcp_output+0xc2>
    return ERR_RTE;
 800df20:	f06f 0303 	mvn.w	r3, #3
 800df24:	e184      	b.n	800e230 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <tcp_output+0xd0>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d111      	bne.n	800df58 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d002      	beq.n	800df40 <tcp_output+0xdc>
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	3304      	adds	r3, #4
 800df3e:	e000      	b.n	800df42 <tcp_output+0xde>
 800df40:	2300      	movs	r3, #0
 800df42:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d102      	bne.n	800df50 <tcp_output+0xec>
      return ERR_RTE;
 800df4a:	f06f 0303 	mvn.w	r3, #3
 800df4e:	e16f      	b.n	800e230 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800df58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 813e 	beq.w	800e1dc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4618      	mov	r0, r3
 800df68:	f7f9 fed8 	bl	8007d1c <lwip_htonl>
 800df6c:	4602      	mov	r2, r0
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df76:	8912      	ldrh	r2, [r2, #8]
 800df78:	4413      	add	r3, r2
  if (seg != NULL &&
 800df7a:	69ba      	ldr	r2, [r7, #24]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	f080 812d 	bcs.w	800e1dc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 8129 	beq.w	800e1dc <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df90:	461a      	mov	r2, r3
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	4293      	cmp	r3, r2
 800df96:	f040 8121 	bne.w	800e1dc <tcp_output+0x378>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f040 811c 	bne.w	800e1dc <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f040 812b 	bne.w	800e206 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800dfc0:	e121      	b.n	800e206 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	899b      	ldrh	r3, [r3, #12]
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7f9 fe98 	bl	8007d00 <lwip_htons>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	f003 0304 	and.w	r3, r3, #4
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d006      	beq.n	800dfe8 <tcp_output+0x184>
 800dfda:	4b42      	ldr	r3, [pc, #264]	; (800e0e4 <tcp_output+0x280>)
 800dfdc:	f240 4246 	movw	r2, #1094	; 0x446
 800dfe0:	4944      	ldr	r1, [pc, #272]	; (800e0f4 <tcp_output+0x290>)
 800dfe2:	4842      	ldr	r0, [pc, #264]	; (800e0ec <tcp_output+0x288>)
 800dfe4:	f007 fb90 	bl	8015708 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d01f      	beq.n	800e030 <tcp_output+0x1cc>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7e9b      	ldrb	r3, [r3, #26]
 800dff4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d119      	bne.n	800e030 <tcp_output+0x1cc>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00b      	beq.n	800e01c <tcp_output+0x1b8>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d110      	bne.n	800e030 <tcp_output+0x1cc>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e012:	891a      	ldrh	r2, [r3, #8]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e018:	429a      	cmp	r2, r3
 800e01a:	d209      	bcs.n	800e030 <tcp_output+0x1cc>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e022:	2b00      	cmp	r3, #0
 800e024:	d004      	beq.n	800e030 <tcp_output+0x1cc>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e02c:	2b08      	cmp	r3, #8
 800e02e:	d901      	bls.n	800e034 <tcp_output+0x1d0>
 800e030:	2301      	movs	r3, #1
 800e032:	e000      	b.n	800e036 <tcp_output+0x1d2>
 800e034:	2300      	movs	r3, #0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d106      	bne.n	800e048 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	7e9b      	ldrb	r3, [r3, #26]
 800e03e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e042:	2b00      	cmp	r3, #0
 800e044:	f000 80e1 	beq.w	800e20a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	7d1b      	ldrb	r3, [r3, #20]
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	d00d      	beq.n	800e06c <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	899b      	ldrh	r3, [r3, #12]
 800e056:	b29c      	uxth	r4, r3
 800e058:	2010      	movs	r0, #16
 800e05a:	f7f9 fe51 	bl	8007d00 <lwip_htons>
 800e05e:	4603      	mov	r3, r0
 800e060:	461a      	mov	r2, r3
 800e062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	4322      	orrs	r2, r4
 800e068:	b292      	uxth	r2, r2
 800e06a:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e072:	f000 f8e1 	bl	800e238 <tcp_output_segment>
 800e076:	4603      	mov	r3, r0
 800e078:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d009      	beq.n	800e096 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	7e9b      	ldrb	r3, [r3, #26]
 800e086:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	769a      	strb	r2, [r3, #26]
      return err;
 800e090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e094:	e0cc      	b.n	800e230 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	7d1b      	ldrb	r3, [r3, #20]
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	d006      	beq.n	800e0b4 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7e9b      	ldrb	r3, [r3, #26]
 800e0aa:	f023 0303 	bic.w	r3, r3, #3
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7f9 fe2e 	bl	8007d1c <lwip_htonl>
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c4:	891b      	ldrh	r3, [r3, #8]
 800e0c6:	461d      	mov	r5, r3
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	899b      	ldrh	r3, [r3, #12]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7f9 fe15 	bl	8007d00 <lwip_htons>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	f003 0303 	and.w	r3, r3, #3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <tcp_output+0x294>
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e00a      	b.n	800e0fa <tcp_output+0x296>
 800e0e4:	08017534 	.word	0x08017534
 800e0e8:	08017938 	.word	0x08017938
 800e0ec:	08017598 	.word	0x08017598
 800e0f0:	20003904 	.word	0x20003904
 800e0f4:	08017960 	.word	0x08017960
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	442b      	add	r3, r5
 800e0fc:	4423      	add	r3, r4
 800e0fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	2b00      	cmp	r3, #0
 800e10a:	da02      	bge.n	800e112 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	68ba      	ldr	r2, [r7, #8]
 800e110:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e114:	891b      	ldrh	r3, [r3, #8]
 800e116:	461c      	mov	r4, r3
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	899b      	ldrh	r3, [r3, #12]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	4618      	mov	r0, r3
 800e122:	f7f9 fded 	bl	8007d00 <lwip_htons>
 800e126:	4603      	mov	r3, r0
 800e128:	f003 0303 	and.w	r3, r3, #3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <tcp_output+0x2d0>
 800e130:	2301      	movs	r3, #1
 800e132:	e000      	b.n	800e136 <tcp_output+0x2d2>
 800e134:	2300      	movs	r3, #0
 800e136:	4423      	add	r3, r4
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d049      	beq.n	800e1d0 <tcp_output+0x36c>
      seg->next = NULL;
 800e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d105      	bne.n	800e156 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e14e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e152:	623b      	str	r3, [r7, #32]
 800e154:	e03f      	b.n	800e1d6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f9 fddd 	bl	8007d1c <lwip_htonl>
 800e162:	4604      	mov	r4, r0
 800e164:	6a3b      	ldr	r3, [r7, #32]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f9 fdd6 	bl	8007d1c <lwip_htonl>
 800e170:	4603      	mov	r3, r0
 800e172:	1ae3      	subs	r3, r4, r3
 800e174:	2b00      	cmp	r3, #0
 800e176:	da24      	bge.n	800e1c2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	336c      	adds	r3, #108	; 0x6c
 800e17c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e17e:	e002      	b.n	800e186 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d011      	beq.n	800e1b2 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	4618      	mov	r0, r3
 800e198:	f7f9 fdc0 	bl	8007d1c <lwip_htonl>
 800e19c:	4604      	mov	r4, r0
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7f9 fdb9 	bl	8007d1c <lwip_htonl>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	dbe6      	blt.n	800e180 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1be:	601a      	str	r2, [r3, #0]
 800e1c0:	e009      	b.n	800e1d6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1c6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	623b      	str	r3, [r7, #32]
 800e1ce:	e002      	b.n	800e1d6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e1d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1d2:	f7fc f9a8 	bl	800a526 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d015      	beq.n	800e20e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7f9 fd97 	bl	8007d1c <lwip_htonl>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1f8:	8912      	ldrh	r2, [r2, #8]
 800e1fa:	4413      	add	r3, r2
  while (seg != NULL &&
 800e1fc:	69ba      	ldr	r2, [r7, #24]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	f4bf aedf 	bcs.w	800dfc2 <tcp_output+0x15e>
  }
output_done:
 800e204:	e003      	b.n	800e20e <tcp_output+0x3aa>
    goto output_done;
 800e206:	bf00      	nop
 800e208:	e002      	b.n	800e210 <tcp_output+0x3ac>
      break;
 800e20a:	bf00      	nop
 800e20c:	e000      	b.n	800e210 <tcp_output+0x3ac>
output_done:
 800e20e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e214:	2b00      	cmp	r3, #0
 800e216:	d103      	bne.n	800e220 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7e9b      	ldrb	r3, [r3, #26]
 800e224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3728      	adds	r7, #40	; 0x28
 800e234:	46bd      	mov	sp, r7
 800e236:	bdb0      	pop	{r4, r5, r7, pc}

0800e238 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e238:	b5b0      	push	{r4, r5, r7, lr}
 800e23a:	b08c      	sub	sp, #48	; 0x30
 800e23c:	af04      	add	r7, sp, #16
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	89db      	ldrh	r3, [r3, #14]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d001      	beq.n	800e252 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	e08b      	b.n	800e36a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	68dc      	ldr	r4, [r3, #12]
 800e25a:	4610      	mov	r0, r2
 800e25c:	f7f9 fd5e 	bl	8007d1c <lwip_htonl>
 800e260:	4603      	mov	r3, r0
 800e262:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	68dc      	ldr	r4, [r3, #12]
 800e26c:	4610      	mov	r0, r2
 800e26e:	f7f9 fd47 	bl	8007d00 <lwip_htons>
 800e272:	4603      	mov	r3, r0
 800e274:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e27e:	441a      	add	r2, r3
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	3314      	adds	r3, #20
 800e28a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	7a9b      	ldrb	r3, [r3, #10]
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d014      	beq.n	800e2c2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4619      	mov	r1, r3
 800e29e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e2a2:	f7fc fc73 	bl	800ab8c <tcp_eff_send_mss_impl>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e2aa:	8b7b      	ldrh	r3, [r7, #26]
 800e2ac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f9 fd33 	bl	8007d1c <lwip_htonl>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	da02      	bge.n	800e2d2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10c      	bne.n	800e2f4 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800e2da:	4b26      	ldr	r3, [pc, #152]	; (800e374 <tcp_output_segment+0x13c>)
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7f9 fd17 	bl	8007d1c <lwip_htonl>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	1ad3      	subs	r3, r2, r3
 800e302:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	8959      	ldrh	r1, [r3, #10]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	8b3a      	ldrh	r2, [r7, #24]
 800e310:	1a8a      	subs	r2, r1, r2
 800e312:	b292      	uxth	r2, r2
 800e314:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	8919      	ldrh	r1, [r3, #8]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	8b3a      	ldrh	r2, [r7, #24]
 800e322:	1a8a      	subs	r2, r1, r2
 800e324:	b292      	uxth	r2, r2
 800e326:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	68d2      	ldr	r2, [r2, #12]
 800e330:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	2200      	movs	r2, #0
 800e338:	741a      	strb	r2, [r3, #16]
 800e33a:	2200      	movs	r2, #0
 800e33c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6858      	ldr	r0, [r3, #4]
 800e342:	68b9      	ldr	r1, [r7, #8]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	1d1c      	adds	r4, r3, #4
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	7a9d      	ldrb	r5, [r3, #10]
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	7a5b      	ldrb	r3, [r3, #9]
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	9202      	str	r2, [sp, #8]
 800e354:	2206      	movs	r2, #6
 800e356:	9201      	str	r2, [sp, #4]
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	462b      	mov	r3, r5
 800e35c:	4622      	mov	r2, r4
 800e35e:	f003 fa55 	bl	801180c <ip4_output_if>
 800e362:	4603      	mov	r3, r0
 800e364:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800e366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3720      	adds	r7, #32
 800e36e:	46bd      	mov	sp, r7
 800e370:	bdb0      	pop	{r4, r5, r7, pc}
 800e372:	bf00      	nop
 800e374:	200038f4 	.word	0x200038f4

0800e378 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08c      	sub	sp, #48	; 0x30
 800e37c:	af04      	add	r7, sp, #16
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e386:	2200      	movs	r2, #0
 800e388:	2114      	movs	r1, #20
 800e38a:	2001      	movs	r0, #1
 800e38c:	f7fa fa72 	bl	8008874 <pbuf_alloc>
 800e390:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d05b      	beq.n	800e450 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	895b      	ldrh	r3, [r3, #10]
 800e39c:	2b13      	cmp	r3, #19
 800e39e:	d806      	bhi.n	800e3ae <tcp_rst+0x36>
 800e3a0:	4b2d      	ldr	r3, [pc, #180]	; (800e458 <tcp_rst+0xe0>)
 800e3a2:	f240 524d 	movw	r2, #1357	; 0x54d
 800e3a6:	492d      	ldr	r1, [pc, #180]	; (800e45c <tcp_rst+0xe4>)
 800e3a8:	482d      	ldr	r0, [pc, #180]	; (800e460 <tcp_rst+0xe8>)
 800e3aa:	f007 f9ad 	bl	8015708 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800e3b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7f9 fca2 	bl	8007d00 <lwip_htons>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	461a      	mov	r2, r3
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800e3c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7f9 fc9a 	bl	8007d00 <lwip_htons>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f7f9 fca1 	bl	8007d1c <lwip_htonl>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800e3e0:	68b8      	ldr	r0, [r7, #8]
 800e3e2:	f7f9 fc9b 	bl	8007d1c <lwip_htonl>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e3ec:	f245 0014 	movw	r0, #20500	; 0x5014
 800e3f0:	f7f9 fc86 	bl	8007d00 <lwip_htons>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	2200      	movs	r2, #0
 800e400:	f042 0208 	orr.w	r2, r2, #8
 800e404:	739a      	strb	r2, [r3, #14]
 800e406:	2200      	movs	r2, #0
 800e408:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e40c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	2200      	movs	r2, #0
 800e412:	741a      	strb	r2, [r3, #16]
 800e414:	2200      	movs	r2, #0
 800e416:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	2200      	movs	r2, #0
 800e41c:	749a      	strb	r2, [r3, #18]
 800e41e:	2200      	movs	r2, #0
 800e420:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800e422:	6838      	ldr	r0, [r7, #0]
 800e424:	f003 f82c 	bl	8011480 <ip4_route>
 800e428:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00b      	beq.n	800e448 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	9302      	str	r3, [sp, #8]
 800e434:	2306      	movs	r3, #6
 800e436:	9301      	str	r3, [sp, #4]
 800e438:	2300      	movs	r3, #0
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	23ff      	movs	r3, #255	; 0xff
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	6879      	ldr	r1, [r7, #4]
 800e442:	69f8      	ldr	r0, [r7, #28]
 800e444:	f003 f9e2 	bl	801180c <ip4_output_if>
  }
  pbuf_free(p);
 800e448:	69f8      	ldr	r0, [r7, #28]
 800e44a:	f7fa fd85 	bl	8008f58 <pbuf_free>
 800e44e:	e000      	b.n	800e452 <tcp_rst+0xda>
    return;
 800e450:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e452:	3720      	adds	r7, #32
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	08017534 	.word	0x08017534
 800e45c:	08017568 	.word	0x08017568
 800e460:	08017598 	.word	0x08017598

0800e464 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e470:	2b00      	cmp	r3, #0
 800e472:	d029      	beq.n	800e4c8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e478:	60fb      	str	r3, [r7, #12]
 800e47a:	e002      	b.n	800e482 <tcp_rexmit_rto+0x1e>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	60fb      	str	r3, [r7, #12]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1f8      	bne.n	800e47c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4a6:	2bff      	cmp	r3, #255	; 0xff
 800e4a8:	d007      	beq.n	800e4ba <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7ff fccf 	bl	800de64 <tcp_output>
 800e4c6:	e000      	b.n	800e4ca <tcp_rexmit_rto+0x66>
    return;
 800e4c8:	bf00      	nop
}
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d043      	beq.n	800e568 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4e4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3368      	adds	r3, #104	; 0x68
 800e4f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e4f4:	e002      	b.n	800e4fc <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d011      	beq.n	800e528 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7f9 fc05 	bl	8007d1c <lwip_htonl>
 800e512:	4604      	mov	r4, r0
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7f9 fbfe 	bl	8007d1c <lwip_htonl>
 800e520:	4603      	mov	r3, r0
 800e522:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e524:	2b00      	cmp	r3, #0
 800e526:	dbe6      	blt.n	800e4f6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d103      	bne.n	800e546 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e54c:	2bff      	cmp	r3, #255	; 0xff
 800e54e:	d007      	beq.n	800e560 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e556:	3301      	adds	r3, #1
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	635a      	str	r2, [r3, #52]	; 0x34
 800e566:	e000      	b.n	800e56a <tcp_rexmit+0x9a>
    return;
 800e568:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800e56a:	3714      	adds	r7, #20
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd90      	pop	{r4, r7, pc}

0800e570 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d04a      	beq.n	800e616 <tcp_rexmit_fast+0xa6>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	7e9b      	ldrb	r3, [r3, #26]
 800e584:	f003 0304 	and.w	r3, r3, #4
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d144      	bne.n	800e616 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7ff ff9f 	bl	800e4d0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d207      	bcs.n	800e5b2 <tcp_rexmit_fast+0x42>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5a8:	0fda      	lsrs	r2, r3, #31
 800e5aa:	4413      	add	r3, r2
 800e5ac:	105b      	asrs	r3, r3, #1
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	e006      	b.n	800e5c0 <tcp_rexmit_fast+0x50>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5b8:	0fda      	lsrs	r2, r3, #31
 800e5ba:	4413      	add	r3, r2
 800e5bc:	105b      	asrs	r3, r3, #1
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5d2:	005b      	lsls	r3, r3, #1
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d206      	bcs.n	800e5e6 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5dc:	005b      	lsls	r3, r3, #1
 800e5de:	b29a      	uxth	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	0049      	lsls	r1, r1, #1
 800e5f4:	440b      	add	r3, r1
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	4413      	add	r3, r2
 800e5fa:	b29a      	uxth	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	7e9b      	ldrb	r3, [r3, #26]
 800e606:	f043 0304 	orr.w	r3, r3, #4
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800e616:	bf00      	nop
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b08a      	sub	sp, #40	; 0x28
 800e622:	af04      	add	r7, sp, #16
 800e624:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e62a:	3b01      	subs	r3, #1
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7f9 fb75 	bl	8007d1c <lwip_htonl>
 800e632:	4603      	mov	r3, r0
 800e634:	2200      	movs	r2, #0
 800e636:	2100      	movs	r1, #0
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7fe fd45 	bl	800d0c8 <tcp_output_alloc_header>
 800e63e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d102      	bne.n	800e64c <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e64a:	e021      	b.n	800e690 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3304      	adds	r3, #4
 800e650:	4618      	mov	r0, r3
 800e652:	f002 ff15 	bl	8011480 <ip4_route>
 800e656:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d102      	bne.n	800e664 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800e65e:	23fc      	movs	r3, #252	; 0xfc
 800e660:	75fb      	strb	r3, [r7, #23]
 800e662:	e010      	b.n	800e686 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800e664:	6879      	ldr	r1, [r7, #4]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	1d1a      	adds	r2, r3, #4
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	7a98      	ldrb	r0, [r3, #10]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	9302      	str	r3, [sp, #8]
 800e672:	2306      	movs	r3, #6
 800e674:	9301      	str	r3, [sp, #4]
 800e676:	2300      	movs	r3, #0
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	4603      	mov	r3, r0
 800e67c:	6938      	ldr	r0, [r7, #16]
 800e67e:	f003 f8c5 	bl	801180c <ip4_output_if>
 800e682:	4603      	mov	r3, r0
 800e684:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e686:	6938      	ldr	r0, [r7, #16]
 800e688:	f7fa fc66 	bl	8008f58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e698:	b590      	push	{r4, r7, lr}
 800e69a:	b08f      	sub	sp, #60	; 0x3c
 800e69c:	af04      	add	r7, sp, #16
 800e69e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6a4:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d102      	bne.n	800e6b2 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6b0:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e085      	b.n	800e7c8 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	899b      	ldrh	r3, [r3, #12]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f9 fb1b 	bl	8007d00 <lwip_htons>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f003 0301 	and.w	r3, r3, #1
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <tcp_zero_window_probe+0x48>
 800e6d4:	6a3b      	ldr	r3, [r7, #32]
 800e6d6:	891b      	ldrh	r3, [r3, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d101      	bne.n	800e6e0 <tcp_zero_window_probe+0x48>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e000      	b.n	800e6e2 <tcp_zero_window_probe+0x4a>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e6e4:	7ffb      	ldrb	r3, [r7, #31]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	bf0c      	ite	eq
 800e6ea:	2301      	moveq	r3, #1
 800e6ec:	2300      	movne	r3, #0
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e6f2:	6a3b      	ldr	r3, [r7, #32]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	8bba      	ldrh	r2, [r7, #28]
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7fe fce3 	bl	800d0c8 <tcp_output_alloc_header>
 800e702:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d102      	bne.n	800e710 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e70e:	e05b      	b.n	800e7c8 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e716:	7ffb      	ldrb	r3, [r7, #31]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00e      	beq.n	800e73a <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	899b      	ldrh	r3, [r3, #12]
 800e720:	b29b      	uxth	r3, r3
 800e722:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e726:	b29c      	uxth	r4, r3
 800e728:	2011      	movs	r0, #17
 800e72a:	f7f9 fae9 	bl	8007d00 <lwip_htons>
 800e72e:	4603      	mov	r3, r0
 800e730:	4323      	orrs	r3, r4
 800e732:	b29a      	uxth	r2, r3
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	819a      	strh	r2, [r3, #12]
 800e738:	e010      	b.n	800e75c <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	3314      	adds	r3, #20
 800e740:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	6858      	ldr	r0, [r3, #4]
 800e746:	6a3b      	ldr	r3, [r7, #32]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	891a      	ldrh	r2, [r3, #8]
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	891b      	ldrh	r3, [r3, #8]
 800e750:	1ad3      	subs	r3, r2, r3
 800e752:	b29b      	uxth	r3, r3
 800e754:	2201      	movs	r2, #1
 800e756:	6939      	ldr	r1, [r7, #16]
 800e758:	f7fa fdfe 	bl	8009358 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	4618      	mov	r0, r3
 800e764:	f7f9 fada 	bl	8007d1c <lwip_htonl>
 800e768:	4603      	mov	r3, r0
 800e76a:	3301      	adds	r3, #1
 800e76c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	da02      	bge.n	800e780 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	3304      	adds	r3, #4
 800e784:	4618      	mov	r0, r3
 800e786:	f002 fe7b 	bl	8011480 <ip4_route>
 800e78a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800e792:	23fc      	movs	r3, #252	; 0xfc
 800e794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e798:	e011      	b.n	800e7be <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	1d1a      	adds	r2, r3, #4
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7a98      	ldrb	r0, [r3, #10]
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	9302      	str	r3, [sp, #8]
 800e7a8:	2306      	movs	r3, #6
 800e7aa:	9301      	str	r3, [sp, #4]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	69b8      	ldr	r0, [r7, #24]
 800e7b4:	f003 f82a 	bl	801180c <ip4_output_if>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800e7be:	69b8      	ldr	r0, [r7, #24]
 800e7c0:	f7fa fbca 	bl	8008f58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e7c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	372c      	adds	r7, #44	; 0x2c
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd90      	pop	{r4, r7, pc}

0800e7d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e7d8:	f7fa fe40 	bl	800945c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e7dc:	4b0a      	ldr	r3, [pc, #40]	; (800e808 <tcpip_tcp_timer+0x38>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d103      	bne.n	800e7ec <tcpip_tcp_timer+0x1c>
 800e7e4:	4b09      	ldr	r3, [pc, #36]	; (800e80c <tcpip_tcp_timer+0x3c>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d005      	beq.n	800e7f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4908      	ldr	r1, [pc, #32]	; (800e810 <tcpip_tcp_timer+0x40>)
 800e7f0:	20fa      	movs	r0, #250	; 0xfa
 800e7f2:	f000 f86f 	bl	800e8d4 <sys_timeout>
 800e7f6:	e002      	b.n	800e7fe <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e7f8:	4b06      	ldr	r3, [pc, #24]	; (800e814 <tcpip_tcp_timer+0x44>)
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	601a      	str	r2, [r3, #0]
  }
}
 800e7fe:	bf00      	nop
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	200038f0 	.word	0x200038f0
 800e80c:	20003900 	.word	0x20003900
 800e810:	0800e7d1 	.word	0x0800e7d1
 800e814:	20000280 	.word	0x20000280

0800e818 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e81c:	4b0a      	ldr	r3, [pc, #40]	; (800e848 <tcp_timer_needed+0x30>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d10f      	bne.n	800e844 <tcp_timer_needed+0x2c>
 800e824:	4b09      	ldr	r3, [pc, #36]	; (800e84c <tcp_timer_needed+0x34>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d103      	bne.n	800e834 <tcp_timer_needed+0x1c>
 800e82c:	4b08      	ldr	r3, [pc, #32]	; (800e850 <tcp_timer_needed+0x38>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d007      	beq.n	800e844 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e834:	4b04      	ldr	r3, [pc, #16]	; (800e848 <tcp_timer_needed+0x30>)
 800e836:	2201      	movs	r2, #1
 800e838:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e83a:	2200      	movs	r2, #0
 800e83c:	4905      	ldr	r1, [pc, #20]	; (800e854 <tcp_timer_needed+0x3c>)
 800e83e:	20fa      	movs	r0, #250	; 0xfa
 800e840:	f000 f848 	bl	800e8d4 <sys_timeout>
  }
}
 800e844:	bf00      	nop
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20000280 	.word	0x20000280
 800e84c:	200038f0 	.word	0x200038f0
 800e850:	20003900 	.word	0x20003900
 800e854:	0800e7d1 	.word	0x0800e7d1

0800e858 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	4903      	ldr	r1, [pc, #12]	; (800e880 <cyclic_timer+0x28>)
 800e872:	4618      	mov	r0, r3
 800e874:	f000 f82e 	bl	800e8d4 <sys_timeout>
}
 800e878:	bf00      	nop
 800e87a:	3710      	adds	r7, #16
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	0800e859 	.word	0x0800e859

0800e884 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e88a:	2301      	movs	r3, #1
 800e88c:	607b      	str	r3, [r7, #4]
 800e88e:	e00e      	b.n	800e8ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800e890:	4a0d      	ldr	r2, [pc, #52]	; (800e8c8 <sys_timeouts_init+0x44>)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	00db      	lsls	r3, r3, #3
 800e89c:	4a0a      	ldr	r2, [pc, #40]	; (800e8c8 <sys_timeouts_init+0x44>)
 800e89e:	4413      	add	r3, r2
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	490a      	ldr	r1, [pc, #40]	; (800e8cc <sys_timeouts_init+0x48>)
 800e8a4:	f000 f816 	bl	800e8d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	607b      	str	r3, [r7, #4]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b04      	cmp	r3, #4
 800e8b2:	d9ed      	bls.n	800e890 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800e8b4:	f004 fcc0 	bl	8013238 <sys_now>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	4b05      	ldr	r3, [pc, #20]	; (800e8d0 <sys_timeouts_init+0x4c>)
 800e8bc:	601a      	str	r2, [r3, #0]
}
 800e8be:	bf00      	nop
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	08018884 	.word	0x08018884
 800e8cc:	0800e859 	.word	0x0800e859
 800e8d0:	2000027c 	.word	0x2000027c

0800e8d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e8e0:	2006      	movs	r0, #6
 800e8e2:	f7f9 fdbb 	bl	800845c <memp_malloc>
 800e8e6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10a      	bne.n	800e904 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f040 8084 	bne.w	800e9fe <sys_timeout+0x12a>
 800e8f6:	4b44      	ldr	r3, [pc, #272]	; (800ea08 <sys_timeout+0x134>)
 800e8f8:	22d4      	movs	r2, #212	; 0xd4
 800e8fa:	4944      	ldr	r1, [pc, #272]	; (800ea0c <sys_timeout+0x138>)
 800e8fc:	4844      	ldr	r0, [pc, #272]	; (800ea10 <sys_timeout+0x13c>)
 800e8fe:	f006 ff03 	bl	8015708 <iprintf>
    return;
 800e902:	e07c      	b.n	800e9fe <sys_timeout+0x12a>
  }

  now = sys_now();
 800e904:	f004 fc98 	bl	8013238 <sys_now>
 800e908:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800e90a:	4b42      	ldr	r3, [pc, #264]	; (800ea14 <sys_timeout+0x140>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d105      	bne.n	800e91e <sys_timeout+0x4a>
    diff = 0;
 800e912:	2300      	movs	r3, #0
 800e914:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800e916:	4a40      	ldr	r2, [pc, #256]	; (800ea18 <sys_timeout+0x144>)
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	6013      	str	r3, [r2, #0]
 800e91c:	e004      	b.n	800e928 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800e91e:	4b3e      	ldr	r3, [pc, #248]	; (800ea18 <sys_timeout+0x144>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	693a      	ldr	r2, [r7, #16]
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	441a      	add	r2, r3
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e944:	4b33      	ldr	r3, [pc, #204]	; (800ea14 <sys_timeout+0x140>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d103      	bne.n	800e954 <sys_timeout+0x80>
    next_timeout = timeout;
 800e94c:	4a31      	ldr	r2, [pc, #196]	; (800ea14 <sys_timeout+0x140>)
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	6013      	str	r3, [r2, #0]
    return;
 800e952:	e055      	b.n	800ea00 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800e954:	4b2f      	ldr	r3, [pc, #188]	; (800ea14 <sys_timeout+0x140>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d20f      	bcs.n	800e980 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800e960:	4b2c      	ldr	r3, [pc, #176]	; (800ea14 <sys_timeout+0x140>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	6859      	ldr	r1, [r3, #4]
 800e966:	4b2b      	ldr	r3, [pc, #172]	; (800ea14 <sys_timeout+0x140>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	1a8a      	subs	r2, r1, r2
 800e96e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800e970:	4b28      	ldr	r3, [pc, #160]	; (800ea14 <sys_timeout+0x140>)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e978:	4a26      	ldr	r2, [pc, #152]	; (800ea14 <sys_timeout+0x140>)
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	e03f      	b.n	800ea00 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e980:	4b24      	ldr	r3, [pc, #144]	; (800ea14 <sys_timeout+0x140>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	61fb      	str	r3, [r7, #28]
 800e986:	e036      	b.n	800e9f6 <sys_timeout+0x122>
      timeout->time -= t->time;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	685a      	ldr	r2, [r3, #4]
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	1ad2      	subs	r2, r2, r3
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d006      	beq.n	800e9ac <sys_timeout+0xd8>
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	685a      	ldr	r2, [r3, #4]
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d921      	bls.n	800e9f0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d009      	beq.n	800e9c8 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6859      	ldr	r1, [r3, #4]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	1a8a      	subs	r2, r1, r2
 800e9c4:	605a      	str	r2, [r3, #4]
 800e9c6:	e00b      	b.n	800e9e0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d206      	bcs.n	800e9e0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800e9d2:	4b10      	ldr	r3, [pc, #64]	; (800ea14 <sys_timeout+0x140>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	685a      	ldr	r2, [r3, #4]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	441a      	add	r2, r3
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	601a      	str	r2, [r3, #0]
        break;
 800e9ee:	e007      	b.n	800ea00 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	61fb      	str	r3, [r7, #28]
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1c5      	bne.n	800e988 <sys_timeout+0xb4>
 800e9fc:	e000      	b.n	800ea00 <sys_timeout+0x12c>
    return;
 800e9fe:	bf00      	nop
      }
    }
  }
}
 800ea00:	3720      	adds	r7, #32
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	08017978 	.word	0x08017978
 800ea0c:	080179ac 	.word	0x080179ac
 800ea10:	080179ec 	.word	0x080179ec
 800ea14:	20000278 	.word	0x20000278
 800ea18:	2000027c 	.word	0x2000027c

0800ea1c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800ea22:	4b24      	ldr	r3, [pc, #144]	; (800eab4 <sys_check_timeouts+0x98>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d040      	beq.n	800eaac <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800ea2a:	f004 fc05 	bl	8013238 <sys_now>
 800ea2e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ea30:	4b21      	ldr	r3, [pc, #132]	; (800eab8 <sys_check_timeouts+0x9c>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800ea3a:	4b20      	ldr	r3, [pc, #128]	; (800eabc <sys_check_timeouts+0xa0>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <sys_check_timeouts+0x2c>
 800ea44:	f7f9 fee6 	bl	8008814 <pbuf_free_ooseq>
      had_one = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800ea4c:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <sys_check_timeouts+0x98>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d026      	beq.n	800eaa6 <sys_check_timeouts+0x8a>
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	697a      	ldr	r2, [r7, #20]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d321      	bcc.n	800eaa6 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800ea62:	2301      	movs	r3, #1
 800ea64:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	685a      	ldr	r2, [r3, #4]
 800ea6a:	4b13      	ldr	r3, [pc, #76]	; (800eab8 <sys_check_timeouts+0x9c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4413      	add	r3, r2
 800ea70:	4a11      	ldr	r2, [pc, #68]	; (800eab8 <sys_check_timeouts+0x9c>)
 800ea72:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	697a      	ldr	r2, [r7, #20]
 800ea7a:	1ad3      	subs	r3, r2, r3
 800ea7c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4a0c      	ldr	r2, [pc, #48]	; (800eab4 <sys_check_timeouts+0x98>)
 800ea84:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ea92:	68b9      	ldr	r1, [r7, #8]
 800ea94:	2006      	movs	r0, #6
 800ea96:	f7f9 fd2d 	bl	80084f4 <memp_free>
        if (handler != NULL) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6838      	ldr	r0, [r7, #0]
 800eaa4:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800eaa6:	7cfb      	ldrb	r3, [r7, #19]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1c6      	bne.n	800ea3a <sys_check_timeouts+0x1e>
  }
}
 800eaac:	bf00      	nop
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20000278 	.word	0x20000278
 800eab8:	2000027c 	.word	0x2000027c
 800eabc:	200038e8 	.word	0x200038e8

0800eac0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eac0:	b480      	push	{r7}
 800eac2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800eac4:	bf00      	nop
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
	...

0800ead0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ead6:	2300      	movs	r3, #0
 800ead8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800eada:	4b17      	ldr	r3, [pc, #92]	; (800eb38 <udp_new_port+0x68>)
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	1c5a      	adds	r2, r3, #1
 800eae0:	b291      	uxth	r1, r2
 800eae2:	4a15      	ldr	r2, [pc, #84]	; (800eb38 <udp_new_port+0x68>)
 800eae4:	8011      	strh	r1, [r2, #0]
 800eae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d103      	bne.n	800eaf6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800eaee:	4b12      	ldr	r3, [pc, #72]	; (800eb38 <udp_new_port+0x68>)
 800eaf0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eaf4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaf6:	4b11      	ldr	r3, [pc, #68]	; (800eb3c <udp_new_port+0x6c>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	603b      	str	r3, [r7, #0]
 800eafc:	e011      	b.n	800eb22 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	8a5a      	ldrh	r2, [r3, #18]
 800eb02:	4b0d      	ldr	r3, [pc, #52]	; (800eb38 <udp_new_port+0x68>)
 800eb04:	881b      	ldrh	r3, [r3, #0]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d108      	bne.n	800eb1c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800eb0a:	88fb      	ldrh	r3, [r7, #6]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	80fb      	strh	r3, [r7, #6]
 800eb10:	88fb      	ldrh	r3, [r7, #6]
 800eb12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb16:	d3e0      	bcc.n	800eada <udp_new_port+0xa>
        return 0;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	e007      	b.n	800eb2c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	603b      	str	r3, [r7, #0]
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1ea      	bne.n	800eafe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800eb28:	4b03      	ldr	r3, [pc, #12]	; (800eb38 <udp_new_port+0x68>)
 800eb2a:	881b      	ldrh	r3, [r3, #0]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	20000120 	.word	0x20000120
 800eb3c:	20003908 	.word	0x20003908

0800eb40 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800eb4e:	79fb      	ldrb	r3, [r7, #7]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d018      	beq.n	800eb86 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d013      	beq.n	800eb82 <udp_input_local_match+0x42>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00f      	beq.n	800eb82 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eb62:	4b14      	ldr	r3, [pc, #80]	; (800ebb4 <udp_input_local_match+0x74>)
 800eb64:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb6a:	d00a      	beq.n	800eb82 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	4b10      	ldr	r3, [pc, #64]	; (800ebb4 <udp_input_local_match+0x74>)
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	405a      	eors	r2, r3
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	3308      	adds	r3, #8
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d110      	bne.n	800eba4 <udp_input_local_match+0x64>
          return 1;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e00f      	b.n	800eba6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d009      	beq.n	800eba0 <udp_input_local_match+0x60>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d005      	beq.n	800eba0 <udp_input_local_match+0x60>
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	4b06      	ldr	r3, [pc, #24]	; (800ebb4 <udp_input_local_match+0x74>)
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d101      	bne.n	800eba4 <udp_input_local_match+0x64>
      return 1;
 800eba0:	2301      	movs	r3, #1
 800eba2:	e000      	b.n	800eba6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	200003a0 	.word	0x200003a0

0800ebb8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ebb8:	b590      	push	{r4, r7, lr}
 800ebba:	b08d      	sub	sp, #52	; 0x34
 800ebbc:	af02      	add	r7, sp, #8
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	895b      	ldrh	r3, [r3, #10]
 800ebca:	2b07      	cmp	r3, #7
 800ebcc:	d803      	bhi.n	800ebd6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7fa f9c2 	bl	8008f58 <pbuf_free>
    goto end;
 800ebd4:	e0c6      	b.n	800ed64 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ebdc:	4b63      	ldr	r3, [pc, #396]	; (800ed6c <udp_input+0x1b4>)
 800ebde:	695a      	ldr	r2, [r3, #20]
 800ebe0:	4b62      	ldr	r3, [pc, #392]	; (800ed6c <udp_input+0x1b4>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	f002 fee2 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 800ebec:	4603      	mov	r3, r0
 800ebee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	881b      	ldrh	r3, [r3, #0]
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7f9 f882 	bl	8007d00 <lwip_htons>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	885b      	ldrh	r3, [r3, #2]
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7f9 f87a 	bl	8007d00 <lwip_htons>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ec10:	2300      	movs	r3, #0
 800ec12:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ec14:	2300      	movs	r3, #0
 800ec16:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec1c:	4b54      	ldr	r3, [pc, #336]	; (800ed70 <udp_input+0x1b8>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	627b      	str	r3, [r7, #36]	; 0x24
 800ec22:	e03b      	b.n	800ec9c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ec24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec26:	8a5b      	ldrh	r3, [r3, #18]
 800ec28:	89fa      	ldrh	r2, [r7, #14]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d131      	bne.n	800ec92 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ec2e:	7cfb      	ldrb	r3, [r7, #19]
 800ec30:	461a      	mov	r2, r3
 800ec32:	6839      	ldr	r1, [r7, #0]
 800ec34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec36:	f7ff ff83 	bl	800eb40 <udp_input_local_match>
 800ec3a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d028      	beq.n	800ec92 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	7c1b      	ldrb	r3, [r3, #16]
 800ec44:	f003 0304 	and.w	r3, r3, #4
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d104      	bne.n	800ec56 <udp_input+0x9e>
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d101      	bne.n	800ec56 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ec52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec54:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ec56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec58:	8a9b      	ldrh	r3, [r3, #20]
 800ec5a:	8a3a      	ldrh	r2, [r7, #16]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d118      	bne.n	800ec92 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d005      	beq.n	800ec74 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	4b3f      	ldr	r3, [pc, #252]	; (800ed6c <udp_input+0x1b4>)
 800ec6e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d10e      	bne.n	800ec92 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d014      	beq.n	800eca4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	68da      	ldr	r2, [r3, #12]
 800ec7e:	6a3b      	ldr	r3, [r7, #32]
 800ec80:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ec82:	4b3b      	ldr	r3, [pc, #236]	; (800ed70 <udp_input+0x1b8>)
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec88:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ec8a:	4a39      	ldr	r2, [pc, #228]	; (800ed70 <udp_input+0x1b8>)
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ec90:	e008      	b.n	800eca4 <udp_input+0xec>
      }
    }

    prev = pcb;
 800ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec94:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1c0      	bne.n	800ec24 <udp_input+0x6c>
 800eca2:	e000      	b.n	800eca6 <udp_input+0xee>
        break;
 800eca4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <udp_input+0xf8>
    pcb = uncon_pcb;
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d002      	beq.n	800ecbc <udp_input+0x104>
    for_us = 1;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	76fb      	strb	r3, [r7, #27]
 800ecba:	e00a      	b.n	800ecd2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	4b2a      	ldr	r3, [pc, #168]	; (800ed6c <udp_input+0x1b4>)
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	bf0c      	ite	eq
 800ecca:	2301      	moveq	r3, #1
 800eccc:	2300      	movne	r3, #0
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ecd2:	7efb      	ldrb	r3, [r7, #27]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d042      	beq.n	800ed5e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800ecd8:	f06f 0107 	mvn.w	r1, #7
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7fa f917 	bl	8008f10 <pbuf_header>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00a      	beq.n	800ecfe <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800ece8:	4b22      	ldr	r3, [pc, #136]	; (800ed74 <udp_input+0x1bc>)
 800ecea:	f240 1255 	movw	r2, #341	; 0x155
 800ecee:	4922      	ldr	r1, [pc, #136]	; (800ed78 <udp_input+0x1c0>)
 800ecf0:	4822      	ldr	r0, [pc, #136]	; (800ed7c <udp_input+0x1c4>)
 800ecf2:	f006 fd09 	bl	8015708 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f7fa f92e 	bl	8008f58 <pbuf_free>
      goto end;
 800ecfc:	e032      	b.n	800ed64 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800ecfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d012      	beq.n	800ed2a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed06:	699b      	ldr	r3, [r3, #24]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00a      	beq.n	800ed22 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ed0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0e:	699c      	ldr	r4, [r3, #24]
 800ed10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed12:	69d8      	ldr	r0, [r3, #28]
 800ed14:	8a3b      	ldrh	r3, [r7, #16]
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	4b19      	ldr	r3, [pc, #100]	; (800ed80 <udp_input+0x1c8>)
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ed20:	e021      	b.n	800ed66 <udp_input+0x1ae>
        pbuf_free(p);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7fa f918 	bl	8008f58 <pbuf_free>
        goto end;
 800ed28:	e01c      	b.n	800ed64 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ed2a:	7cfb      	ldrb	r3, [r7, #19]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d112      	bne.n	800ed56 <udp_input+0x19e>
 800ed30:	4b0e      	ldr	r3, [pc, #56]	; (800ed6c <udp_input+0x1b4>)
 800ed32:	695b      	ldr	r3, [r3, #20]
 800ed34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed38:	2be0      	cmp	r3, #224	; 0xe0
 800ed3a:	d00c      	beq.n	800ed56 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ed3c:	4b0b      	ldr	r3, [pc, #44]	; (800ed6c <udp_input+0x1b4>)
 800ed3e:	899b      	ldrh	r3, [r3, #12]
 800ed40:	3308      	adds	r3, #8
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	b21b      	sxth	r3, r3
 800ed46:	4619      	mov	r1, r3
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7fa f8f3 	bl	8008f34 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ed4e:	2103      	movs	r1, #3
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f002 fb0d 	bl	8011370 <icmp_dest_unreach>
      pbuf_free(p);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7fa f8fe 	bl	8008f58 <pbuf_free>
  return;
 800ed5c:	e003      	b.n	800ed66 <udp_input+0x1ae>
    pbuf_free(p);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7fa f8fa 	bl	8008f58 <pbuf_free>
  return;
 800ed64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ed66:	372c      	adds	r7, #44	; 0x2c
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd90      	pop	{r4, r7, pc}
 800ed6c:	200003a0 	.word	0x200003a0
 800ed70:	20003908 	.word	0x20003908
 800ed74:	08017a14 	.word	0x08017a14
 800ed78:	08017a44 	.word	0x08017a44
 800ed7c:	08017a58 	.word	0x08017a58
 800ed80:	200003b0 	.word	0x200003b0

0800ed84 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b088      	sub	sp, #32
 800ed88:	af02      	add	r7, sp, #8
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
 800ed90:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <udp_sendto_if+0x1a>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d102      	bne.n	800eda4 <udp_sendto_if+0x20>
    return ERR_VAL;
 800ed9e:	f06f 0305 	mvn.w	r3, #5
 800eda2:	e028      	b.n	800edf6 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d009      	beq.n	800edbe <udp_sendto_if+0x3a>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d005      	beq.n	800edbe <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800edba:	2be0      	cmp	r3, #224	; 0xe0
 800edbc:	d103      	bne.n	800edc6 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800edbe:	6a3b      	ldr	r3, [r7, #32]
 800edc0:	3304      	adds	r3, #4
 800edc2:	617b      	str	r3, [r7, #20]
 800edc4:	e00b      	b.n	800edde <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	3304      	adds	r3, #4
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d002      	beq.n	800edda <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800edd4:	f06f 0303 	mvn.w	r3, #3
 800edd8:	e00d      	b.n	800edf6 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800edde:	887a      	ldrh	r2, [r7, #2]
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	4613      	mov	r3, r2
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	68b9      	ldr	r1, [r7, #8]
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f000 f806 	bl	800ee00 <udp_sendto_if_src>
 800edf4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3718      	adds	r7, #24
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
	...

0800ee00 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08c      	sub	sp, #48	; 0x30
 800ee04:	af04      	add	r7, sp, #16
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]
 800ee0c:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <udp_sendto_if_src+0x1a>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d102      	bne.n	800ee20 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800ee1a:	f06f 0305 	mvn.w	r3, #5
 800ee1e:	e07e      	b.n	800ef1e <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	8a5b      	ldrh	r3, [r3, #18]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10f      	bne.n	800ee48 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ee28:	68f9      	ldr	r1, [r7, #12]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	8a5b      	ldrh	r3, [r3, #18]
 800ee2e:	461a      	mov	r2, r3
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f000 f87f 	bl	800ef34 <udp_bind>
 800ee36:	4603      	mov	r3, r0
 800ee38:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ee3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d002      	beq.n	800ee48 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ee42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ee46:	e06a      	b.n	800ef1e <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800ee48:	2108      	movs	r1, #8
 800ee4a:	68b8      	ldr	r0, [r7, #8]
 800ee4c:	f7fa f860 	bl	8008f10 <pbuf_header>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d014      	beq.n	800ee80 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ee56:	2200      	movs	r2, #0
 800ee58:	2108      	movs	r1, #8
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	f7f9 fd0a 	bl	8008874 <pbuf_alloc>
 800ee60:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d102      	bne.n	800ee6e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ee68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee6c:	e057      	b.n	800ef1e <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	891b      	ldrh	r3, [r3, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d006      	beq.n	800ee84 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ee76:	68b9      	ldr	r1, [r7, #8]
 800ee78:	69f8      	ldr	r0, [r7, #28]
 800ee7a:	f7fa f991 	bl	80091a0 <pbuf_chain>
 800ee7e:	e001      	b.n	800ee84 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	895b      	ldrh	r3, [r3, #10]
 800ee88:	2b07      	cmp	r3, #7
 800ee8a:	d806      	bhi.n	800ee9a <udp_sendto_if_src+0x9a>
 800ee8c:	4b26      	ldr	r3, [pc, #152]	; (800ef28 <udp_sendto_if_src+0x128>)
 800ee8e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ee92:	4926      	ldr	r1, [pc, #152]	; (800ef2c <udp_sendto_if_src+0x12c>)
 800ee94:	4826      	ldr	r0, [pc, #152]	; (800ef30 <udp_sendto_if_src+0x130>)
 800ee96:	f006 fc37 	bl	8015708 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	8a5b      	ldrh	r3, [r3, #18]
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7f8 ff2b 	bl	8007d00 <lwip_htons>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	461a      	mov	r2, r3
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800eeb2:	887b      	ldrh	r3, [r7, #2]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7f8 ff23 	bl	8007d00 <lwip_htons>
 800eeba:	4603      	mov	r3, r0
 800eebc:	461a      	mov	r2, r3
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	2200      	movs	r2, #0
 800eec6:	719a      	strb	r2, [r3, #6]
 800eec8:	2200      	movs	r2, #0
 800eeca:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	891b      	ldrh	r3, [r3, #8]
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7f8 ff15 	bl	8007d00 <lwip_htons>
 800eed6:	4603      	mov	r3, r0
 800eed8:	461a      	mov	r2, r3
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800eede:	2311      	movs	r3, #17
 800eee0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	7a9b      	ldrb	r3, [r3, #10]
 800eee6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	7a5b      	ldrb	r3, [r3, #9]
 800eeec:	7cb9      	ldrb	r1, [r7, #18]
 800eeee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eef0:	9202      	str	r2, [sp, #8]
 800eef2:	7cfa      	ldrb	r2, [r7, #19]
 800eef4:	9201      	str	r2, [sp, #4]
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	460b      	mov	r3, r1
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eefe:	69f8      	ldr	r0, [r7, #28]
 800ef00:	f002 fcae 	bl	8011860 <ip4_output_if_src>
 800ef04:	4603      	mov	r3, r0
 800ef06:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ef08:	69fa      	ldr	r2, [r7, #28]
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d004      	beq.n	800ef1a <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800ef10:	69f8      	ldr	r0, [r7, #28]
 800ef12:	f7fa f821 	bl	8008f58 <pbuf_free>
    q = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ef1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3720      	adds	r7, #32
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	08017a14 	.word	0x08017a14
 800ef2c:	08017a80 	.word	0x08017a80
 800ef30:	08017a58 	.word	0x08017a58

0800ef34 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ef48:	4b30      	ldr	r3, [pc, #192]	; (800f00c <udp_bind+0xd8>)
 800ef4a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d002      	beq.n	800ef58 <udp_bind+0x24>
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d102      	bne.n	800ef5e <udp_bind+0x2a>
    return ERR_VAL;
 800ef58:	f06f 0305 	mvn.w	r3, #5
 800ef5c:	e052      	b.n	800f004 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ef62:	4b2b      	ldr	r3, [pc, #172]	; (800f010 <udp_bind+0xdc>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	e009      	b.n	800ef7e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d102      	bne.n	800ef78 <udp_bind+0x44>
      rebind = 1;
 800ef72:	2301      	movs	r3, #1
 800ef74:	74fb      	strb	r3, [r7, #19]
      break;
 800ef76:	e005      	b.n	800ef84 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	617b      	str	r3, [r7, #20]
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1f2      	bne.n	800ef6a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800ef84:	88fb      	ldrh	r3, [r7, #6]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d109      	bne.n	800ef9e <udp_bind+0x6a>
    port = udp_new_port();
 800ef8a:	f7ff fda1 	bl	800ead0 <udp_new_port>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ef92:	88fb      	ldrh	r3, [r7, #6]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d11e      	bne.n	800efd6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ef98:	f06f 0307 	mvn.w	r3, #7
 800ef9c:	e032      	b.n	800f004 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ef9e:	4b1c      	ldr	r3, [pc, #112]	; (800f010 <udp_bind+0xdc>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	617b      	str	r3, [r7, #20]
 800efa4:	e014      	b.n	800efd0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d00d      	beq.n	800efca <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	8a5b      	ldrh	r3, [r3, #18]
 800efb2:	88fa      	ldrh	r2, [r7, #6]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d108      	bne.n	800efca <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d102      	bne.n	800efca <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800efc4:	f06f 0307 	mvn.w	r3, #7
 800efc8:	e01c      	b.n	800f004 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	617b      	str	r3, [r7, #20]
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1e7      	bne.n	800efa6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d002      	beq.n	800efe2 <udp_bind+0xae>
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	e000      	b.n	800efe4 <udp_bind+0xb0>
 800efe2:	2300      	movs	r3, #0
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	88fa      	ldrh	r2, [r7, #6]
 800efec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800efee:	7cfb      	ldrb	r3, [r7, #19]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d106      	bne.n	800f002 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800eff4:	4b06      	ldr	r3, [pc, #24]	; (800f010 <udp_bind+0xdc>)
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800effc:	4a04      	ldr	r2, [pc, #16]	; (800f010 <udp_bind+0xdc>)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3718      	adds	r7, #24
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	080188ac 	.word	0x080188ac
 800f010:	20003908 	.word	0x20003908

0800f014 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d01e      	beq.n	800f062 <udp_netif_ip_addr_changed+0x4e>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d01a      	beq.n	800f062 <udp_netif_ip_addr_changed+0x4e>
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d017      	beq.n	800f062 <udp_netif_ip_addr_changed+0x4e>
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d013      	beq.n	800f062 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f03a:	4b0d      	ldr	r3, [pc, #52]	; (800f070 <udp_netif_ip_addr_changed+0x5c>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	60fb      	str	r3, [r7, #12]
 800f040:	e00c      	b.n	800f05c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d103      	bne.n	800f056 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	60fb      	str	r3, [r7, #12]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1ef      	bne.n	800f042 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f062:	bf00      	nop
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	20003908 	.word	0x20003908

0800f074 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a1b      	ldr	r3, [r3, #32]
 800f080:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f082:	2108      	movs	r1, #8
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	f000 fe23 	bl	800fcd0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	3328      	adds	r3, #40	; 0x28
 800f08e:	2200      	movs	r2, #0
 800f090:	4619      	mov	r1, r3
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f001 fe5c 	bl	8010d50 <etharp_query>
 800f098:	4603      	mov	r3, r0
 800f09a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	7a9b      	ldrb	r3, [r3, #10]
 800f0a0:	2bff      	cmp	r3, #255	; 0xff
 800f0a2:	d005      	beq.n	800f0b0 <dhcp_check+0x3c>
    dhcp->tries++;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	7a9b      	ldrb	r3, [r3, #10]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800f0b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f0b4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f0b6:	893b      	ldrh	r3, [r7, #8]
 800f0b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0bc:	4a06      	ldr	r2, [pc, #24]	; (800f0d8 <dhcp_check+0x64>)
 800f0be:	fb82 1203 	smull	r1, r2, r2, r3
 800f0c2:	1152      	asrs	r2, r2, #5
 800f0c4:	17db      	asrs	r3, r3, #31
 800f0c6:	1ad3      	subs	r3, r2, r3
 800f0c8:	b29a      	uxth	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f0ce:	bf00      	nop
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	10624dd3 	.word	0x10624dd3

0800f0dc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6a1b      	ldr	r3, [r3, #32]
 800f0e8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	6938      	ldr	r0, [r7, #16]
 800f0ee:	f000 fdef 	bl	800fcd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f0f2:	2203      	movs	r2, #3
 800f0f4:	6939      	ldr	r1, [r7, #16]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 fef6 	bl	800fee8 <dhcp_create_msg>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d159      	bne.n	800f1bc <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f108:	2202      	movs	r2, #2
 800f10a:	2139      	movs	r1, #57	; 0x39
 800f10c:	6938      	ldr	r0, [r7, #16]
 800f10e:	f000 fdf9 	bl	800fd04 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f116:	4619      	mov	r1, r3
 800f118:	6938      	ldr	r0, [r7, #16]
 800f11a:	f000 fe55 	bl	800fdc8 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f11e:	2204      	movs	r2, #4
 800f120:	2132      	movs	r1, #50	; 0x32
 800f122:	6938      	ldr	r0, [r7, #16]
 800f124:	f000 fdee 	bl	800fd04 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7f8 fdf5 	bl	8007d1c <lwip_htonl>
 800f132:	4603      	mov	r3, r0
 800f134:	4619      	mov	r1, r3
 800f136:	6938      	ldr	r0, [r7, #16]
 800f138:	f000 fe80 	bl	800fe3c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800f13c:	2204      	movs	r2, #4
 800f13e:	2136      	movs	r1, #54	; 0x36
 800f140:	6938      	ldr	r0, [r7, #16]
 800f142:	f000 fddf 	bl	800fd04 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7f8 fde6 	bl	8007d1c <lwip_htonl>
 800f150:	4603      	mov	r3, r0
 800f152:	4619      	mov	r1, r3
 800f154:	6938      	ldr	r0, [r7, #16]
 800f156:	f000 fe71 	bl	800fe3c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f15a:	2203      	movs	r2, #3
 800f15c:	2137      	movs	r1, #55	; 0x37
 800f15e:	6938      	ldr	r0, [r7, #16]
 800f160:	f000 fdd0 	bl	800fd04 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f164:	2300      	movs	r3, #0
 800f166:	75fb      	strb	r3, [r7, #23]
 800f168:	e009      	b.n	800f17e <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f16a:	7dfb      	ldrb	r3, [r7, #23]
 800f16c:	4a29      	ldr	r2, [pc, #164]	; (800f214 <dhcp_select+0x138>)
 800f16e:	5cd3      	ldrb	r3, [r2, r3]
 800f170:	4619      	mov	r1, r3
 800f172:	6938      	ldr	r0, [r7, #16]
 800f174:	f000 fe00 	bl	800fd78 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f178:	7dfb      	ldrb	r3, [r7, #23]
 800f17a:	3301      	adds	r3, #1
 800f17c:	75fb      	strb	r3, [r7, #23]
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	2b02      	cmp	r3, #2
 800f182:	d9f2      	bls.n	800f16a <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f184:	6938      	ldr	r0, [r7, #16]
 800f186:	f001 f853 	bl	8010230 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	68da      	ldr	r2, [r3, #12]
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	8a9b      	ldrh	r3, [r3, #20]
 800f192:	33f0      	adds	r3, #240	; 0xf0
 800f194:	b29b      	uxth	r3, r3
 800f196:	4619      	mov	r1, r3
 800f198:	4610      	mov	r0, r2
 800f19a:	f7f9 fd69 	bl	8008c70 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f19e:	4b1e      	ldr	r3, [pc, #120]	; (800f218 <dhcp_select+0x13c>)
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	68d9      	ldr	r1, [r3, #12]
 800f1a6:	4b1d      	ldr	r3, [pc, #116]	; (800f21c <dhcp_select+0x140>)
 800f1a8:	9301      	str	r3, [sp, #4]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	2343      	movs	r3, #67	; 0x43
 800f1b0:	4a1b      	ldr	r2, [pc, #108]	; (800f220 <dhcp_select+0x144>)
 800f1b2:	f7ff fe25 	bl	800ee00 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f1b6:	6938      	ldr	r0, [r7, #16]
 800f1b8:	f000 fff8 	bl	80101ac <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	7a9b      	ldrb	r3, [r3, #10]
 800f1c0:	2bff      	cmp	r3, #255	; 0xff
 800f1c2:	d005      	beq.n	800f1d0 <dhcp_select+0xf4>
    dhcp->tries++;
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	7a9b      	ldrb	r3, [r3, #10]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	7a9b      	ldrb	r3, [r3, #10]
 800f1d4:	2b05      	cmp	r3, #5
 800f1d6:	d807      	bhi.n	800f1e8 <dhcp_select+0x10c>
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	7a9b      	ldrb	r3, [r3, #10]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1e2:	4093      	lsls	r3, r2
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	e001      	b.n	800f1ec <dhcp_select+0x110>
 800f1e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f1ec:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f1ee:	89bb      	ldrh	r3, [r7, #12]
 800f1f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f1f4:	4a0b      	ldr	r2, [pc, #44]	; (800f224 <dhcp_select+0x148>)
 800f1f6:	fb82 1203 	smull	r1, r2, r2, r3
 800f1fa:	1152      	asrs	r2, r2, #5
 800f1fc:	17db      	asrs	r3, r3, #31
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	b29a      	uxth	r2, r3
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3718      	adds	r7, #24
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	20000124 	.word	0x20000124
 800f218:	20000284 	.word	0x20000284
 800f21c:	080188ac 	.word	0x080188ac
 800f220:	080188b0 	.word	0x080188b0
 800f224:	10624dd3 	.word	0x10624dd3

0800f228 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f22e:	4b27      	ldr	r3, [pc, #156]	; (800f2cc <dhcp_coarse_tmr+0xa4>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800f234:	e042      	b.n	800f2bc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d039      	beq.n	800f2b6 <dhcp_coarse_tmr+0x8e>
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	7a5b      	ldrb	r3, [r3, #9]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d035      	beq.n	800f2b6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d012      	beq.n	800f278 <dhcp_coarse_tmr+0x50>
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	8c1b      	ldrh	r3, [r3, #32]
 800f256:	3301      	adds	r3, #1
 800f258:	b29a      	uxth	r2, r3
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	841a      	strh	r2, [r3, #32]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	8c1a      	ldrh	r2, [r3, #32]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f266:	429a      	cmp	r2, r3
 800f268:	d106      	bne.n	800f278 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 fca8 	bl	800fbc0 <dhcp_release>
        dhcp_discover(netif);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f99f 	bl	800f5b4 <dhcp_discover>
 800f276:	e01e      	b.n	800f2b6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	8bdb      	ldrh	r3, [r3, #30]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00b      	beq.n	800f298 <dhcp_coarse_tmr+0x70>
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	8bdb      	ldrh	r3, [r3, #30]
 800f284:	1e5a      	subs	r2, r3, #1
 800f286:	b291      	uxth	r1, r2
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	83d1      	strh	r1, [r2, #30]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d103      	bne.n	800f298 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 f8c6 	bl	800f422 <dhcp_t2_timeout>
 800f296:	e00e      	b.n	800f2b6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	8b9b      	ldrh	r3, [r3, #28]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00a      	beq.n	800f2b6 <dhcp_coarse_tmr+0x8e>
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	8b9b      	ldrh	r3, [r3, #28]
 800f2a4:	1e5a      	subs	r2, r3, #1
 800f2a6:	b291      	uxth	r1, r2
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	8391      	strh	r1, [r2, #28]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d102      	bne.n	800f2b6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f888 	bl	800f3c6 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1b9      	bne.n	800f236 <dhcp_coarse_tmr+0xe>
  }
}
 800f2c2:	bf00      	nop
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	200038e0 	.word	0x200038e0

0800f2d0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f2d6:	4b16      	ldr	r3, [pc, #88]	; (800f330 <dhcp_fine_tmr+0x60>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800f2dc:	e020      	b.n	800f320 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6a1b      	ldr	r3, [r3, #32]
 800f2e2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d017      	beq.n	800f31a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	8adb      	ldrh	r3, [r3, #22]
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d906      	bls.n	800f300 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	8adb      	ldrh	r3, [r3, #22]
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	82da      	strh	r2, [r3, #22]
 800f2fe:	e00c      	b.n	800f31a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	8adb      	ldrh	r3, [r3, #22]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d108      	bne.n	800f31a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	8adb      	ldrh	r3, [r3, #22]
 800f30c:	3b01      	subs	r3, #1
 800f30e:	b29a      	uxth	r2, r3
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f80d 	bl	800f334 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1db      	bne.n	800f2de <dhcp_fine_tmr+0xe>
  }
}
 800f326:	bf00      	nop
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	200038e0 	.word	0x200038e0

0800f334 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a1b      	ldr	r3, [r3, #32]
 800f340:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	7a5b      	ldrb	r3, [r3, #9]
 800f346:	2b0c      	cmp	r3, #12
 800f348:	d003      	beq.n	800f352 <dhcp_timeout+0x1e>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	7a5b      	ldrb	r3, [r3, #9]
 800f34e:	2b06      	cmp	r3, #6
 800f350:	d103      	bne.n	800f35a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 f92e 	bl	800f5b4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f358:	e031      	b.n	800f3be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	7a5b      	ldrb	r3, [r3, #9]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d10e      	bne.n	800f380 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	7a9b      	ldrb	r3, [r3, #10]
 800f366:	2b05      	cmp	r3, #5
 800f368:	d803      	bhi.n	800f372 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7ff feb6 	bl	800f0dc <dhcp_select>
}
 800f370:	e025      	b.n	800f3be <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fc24 	bl	800fbc0 <dhcp_release>
      dhcp_discover(netif);
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f000 f91b 	bl	800f5b4 <dhcp_discover>
}
 800f37e:	e01e      	b.n	800f3be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	7a5b      	ldrb	r3, [r3, #9]
 800f384:	2b08      	cmp	r3, #8
 800f386:	d10b      	bne.n	800f3a0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	7a9b      	ldrb	r3, [r3, #10]
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d803      	bhi.n	800f398 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f7ff fe6f 	bl	800f074 <dhcp_check>
}
 800f396:	e012      	b.n	800f3be <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f997 	bl	800f6cc <dhcp_bind>
}
 800f39e:	e00e      	b.n	800f3be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	7a5b      	ldrb	r3, [r3, #9]
 800f3a4:	2b03      	cmp	r3, #3
 800f3a6:	d10a      	bne.n	800f3be <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	7a9b      	ldrb	r3, [r3, #10]
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d803      	bhi.n	800f3b8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fb71 	bl	800fa98 <dhcp_reboot>
}
 800f3b6:	e002      	b.n	800f3be <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 f8fb 	bl	800f5b4 <dhcp_discover>
}
 800f3be:	bf00      	nop
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b084      	sub	sp, #16
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	7a5b      	ldrb	r3, [r3, #9]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d007      	beq.n	800f3ec <dhcp_t1_timeout+0x26>
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	7a5b      	ldrb	r3, [r3, #9]
 800f3e0:	2b0a      	cmp	r3, #10
 800f3e2:	d003      	beq.n	800f3ec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f3e8:	2b05      	cmp	r3, #5
 800f3ea:	d116      	bne.n	800f41a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 fa47 	bl	800f880 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	8b5b      	ldrh	r3, [r3, #26]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	8c1b      	ldrh	r3, [r3, #32]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	dd0b      	ble.n	800f41a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	8b5b      	ldrh	r3, [r3, #26]
 800f406:	461a      	mov	r2, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	8c1b      	ldrh	r3, [r3, #32]
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	0fda      	lsrs	r2, r3, #31
 800f410:	4413      	add	r3, r2
 800f412:	105b      	asrs	r3, r3, #1
 800f414:	b29a      	uxth	r2, r3
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800f41a:	bf00      	nop
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b084      	sub	sp, #16
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a1b      	ldr	r3, [r3, #32]
 800f42e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	7a5b      	ldrb	r3, [r3, #9]
 800f434:	2b01      	cmp	r3, #1
 800f436:	d00b      	beq.n	800f450 <dhcp_t2_timeout+0x2e>
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	7a5b      	ldrb	r3, [r3, #9]
 800f43c:	2b0a      	cmp	r3, #10
 800f43e:	d007      	beq.n	800f450 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f444:	2b05      	cmp	r3, #5
 800f446:	d003      	beq.n	800f450 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	7a5b      	ldrb	r3, [r3, #9]
 800f44c:	2b04      	cmp	r3, #4
 800f44e:	d116      	bne.n	800f47e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 fa9b 	bl	800f98c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f45a:	461a      	mov	r2, r3
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	8c1b      	ldrh	r3, [r3, #32]
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	2b01      	cmp	r3, #1
 800f464:	dd0b      	ble.n	800f47e <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f46a:	461a      	mov	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	8c1b      	ldrh	r3, [r3, #32]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	0fda      	lsrs	r2, r3, #31
 800f474:	4413      	add	r3, r2
 800f476:	105b      	asrs	r3, r3, #1
 800f478:	b29a      	uxth	r2, r3
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800f47e:	bf00      	nop
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
	...

0800f488 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d107      	bne.n	800f4a8 <dhcp_arp_reply+0x20>
 800f498:	4b0e      	ldr	r3, [pc, #56]	; (800f4d4 <dhcp_arp_reply+0x4c>)
 800f49a:	f240 327b 	movw	r2, #891	; 0x37b
 800f49e:	490e      	ldr	r1, [pc, #56]	; (800f4d8 <dhcp_arp_reply+0x50>)
 800f4a0:	480e      	ldr	r0, [pc, #56]	; (800f4dc <dhcp_arp_reply+0x54>)
 800f4a2:	f006 f931 	bl	8015708 <iprintf>
 800f4a6:	e012      	b.n	800f4ce <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6a1b      	ldr	r3, [r3, #32]
 800f4ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00c      	beq.n	800f4ce <dhcp_arp_reply+0x46>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	7a5b      	ldrb	r3, [r3, #9]
 800f4b8:	2b08      	cmp	r3, #8
 800f4ba:	d108      	bne.n	800f4ce <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d102      	bne.n	800f4ce <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f809 	bl	800f4e0 <dhcp_decline>
    }
  }
}
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	08017ab0 	.word	0x08017ab0
 800f4d8:	08017b5c 	.word	0x08017b5c
 800f4dc:	08017b10 	.word	0x08017b10

0800f4e0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b086      	sub	sp, #24
 800f4e4:	af02      	add	r7, sp, #8
 800f4e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a1b      	ldr	r3, [r3, #32]
 800f4ec:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f4f2:	210c      	movs	r1, #12
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f000 fbeb 	bl	800fcd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800f4fa:	2204      	movs	r2, #4
 800f4fc:	68f9      	ldr	r1, [r7, #12]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fcf2 	bl	800fee8 <dhcp_create_msg>
 800f504:	4603      	mov	r3, r0
 800f506:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800f508:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d12a      	bne.n	800f566 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f510:	2204      	movs	r2, #4
 800f512:	2132      	movs	r1, #50	; 0x32
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f000 fbf5 	bl	800fd04 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f8 fbfc 	bl	8007d1c <lwip_htonl>
 800f524:	4603      	mov	r3, r0
 800f526:	4619      	mov	r1, r3
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	f000 fc87 	bl	800fe3c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f000 fe7e 	bl	8010230 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	68da      	ldr	r2, [r3, #12]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	8a9b      	ldrh	r3, [r3, #20]
 800f53c:	33f0      	adds	r3, #240	; 0xf0
 800f53e:	b29b      	uxth	r3, r3
 800f540:	4619      	mov	r1, r3
 800f542:	4610      	mov	r0, r2
 800f544:	f7f9 fb94 	bl	8008c70 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f548:	4b16      	ldr	r3, [pc, #88]	; (800f5a4 <dhcp_decline+0xc4>)
 800f54a:	6818      	ldr	r0, [r3, #0]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	68d9      	ldr	r1, [r3, #12]
 800f550:	4b15      	ldr	r3, [pc, #84]	; (800f5a8 <dhcp_decline+0xc8>)
 800f552:	9301      	str	r3, [sp, #4]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	9300      	str	r3, [sp, #0]
 800f558:	2343      	movs	r3, #67	; 0x43
 800f55a:	4a14      	ldr	r2, [pc, #80]	; (800f5ac <dhcp_decline+0xcc>)
 800f55c:	f7ff fc50 	bl	800ee00 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f000 fe23 	bl	80101ac <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	7a9b      	ldrb	r3, [r3, #10]
 800f56a:	2bff      	cmp	r3, #255	; 0xff
 800f56c:	d005      	beq.n	800f57a <dhcp_decline+0x9a>
    dhcp->tries++;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	7a9b      	ldrb	r3, [r3, #10]
 800f572:	3301      	adds	r3, #1
 800f574:	b2da      	uxtb	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800f57a:	f242 7310 	movw	r3, #10000	; 0x2710
 800f57e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f580:	893b      	ldrh	r3, [r7, #8]
 800f582:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f586:	4a0a      	ldr	r2, [pc, #40]	; (800f5b0 <dhcp_decline+0xd0>)
 800f588:	fb82 1203 	smull	r1, r2, r2, r3
 800f58c:	1152      	asrs	r2, r2, #5
 800f58e:	17db      	asrs	r3, r3, #31
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	b29a      	uxth	r2, r3
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f598:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	20000284 	.word	0x20000284
 800f5a8:	080188ac 	.word	0x080188ac
 800f5ac:	080188b0 	.word	0x080188b0
 800f5b0:	10624dd3 	.word	0x10624dd3

0800f5b4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b088      	sub	sp, #32
 800f5b8:	af02      	add	r7, sp, #8
 800f5ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6a1b      	ldr	r3, [r3, #32]
 800f5c0:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f5cc:	2106      	movs	r1, #6
 800f5ce:	6938      	ldr	r0, [r7, #16]
 800f5d0:	f000 fb7e 	bl	800fcd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	6939      	ldr	r1, [r7, #16]
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 fc85 	bl	800fee8 <dhcp_create_msg>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d13b      	bne.n	800f662 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	2139      	movs	r1, #57	; 0x39
 800f5ee:	6938      	ldr	r0, [r7, #16]
 800f5f0:	f000 fb88 	bl	800fd04 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	6938      	ldr	r0, [r7, #16]
 800f5fc:	f000 fbe4 	bl	800fdc8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f600:	2203      	movs	r2, #3
 800f602:	2137      	movs	r1, #55	; 0x37
 800f604:	6938      	ldr	r0, [r7, #16]
 800f606:	f000 fb7d 	bl	800fd04 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f60a:	2300      	movs	r3, #0
 800f60c:	75fb      	strb	r3, [r7, #23]
 800f60e:	e009      	b.n	800f624 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f610:	7dfb      	ldrb	r3, [r7, #23]
 800f612:	4a29      	ldr	r2, [pc, #164]	; (800f6b8 <dhcp_discover+0x104>)
 800f614:	5cd3      	ldrb	r3, [r2, r3]
 800f616:	4619      	mov	r1, r3
 800f618:	6938      	ldr	r0, [r7, #16]
 800f61a:	f000 fbad 	bl	800fd78 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	3301      	adds	r3, #1
 800f622:	75fb      	strb	r3, [r7, #23]
 800f624:	7dfb      	ldrb	r3, [r7, #23]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d9f2      	bls.n	800f610 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800f62a:	6938      	ldr	r0, [r7, #16]
 800f62c:	f000 fe00 	bl	8010230 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	68da      	ldr	r2, [r3, #12]
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	8a9b      	ldrh	r3, [r3, #20]
 800f638:	33f0      	adds	r3, #240	; 0xf0
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4619      	mov	r1, r3
 800f63e:	4610      	mov	r0, r2
 800f640:	f7f9 fb16 	bl	8008c70 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f644:	4b1d      	ldr	r3, [pc, #116]	; (800f6bc <dhcp_discover+0x108>)
 800f646:	6818      	ldr	r0, [r3, #0]
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	68d9      	ldr	r1, [r3, #12]
 800f64c:	4b1c      	ldr	r3, [pc, #112]	; (800f6c0 <dhcp_discover+0x10c>)
 800f64e:	9301      	str	r3, [sp, #4]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	2343      	movs	r3, #67	; 0x43
 800f656:	4a1b      	ldr	r2, [pc, #108]	; (800f6c4 <dhcp_discover+0x110>)
 800f658:	f7ff fbd2 	bl	800ee00 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800f65c:	6938      	ldr	r0, [r7, #16]
 800f65e:	f000 fda5 	bl	80101ac <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	7a9b      	ldrb	r3, [r3, #10]
 800f666:	2bff      	cmp	r3, #255	; 0xff
 800f668:	d005      	beq.n	800f676 <dhcp_discover+0xc2>
    dhcp->tries++;
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	7a9b      	ldrb	r3, [r3, #10]
 800f66e:	3301      	adds	r3, #1
 800f670:	b2da      	uxtb	r2, r3
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	7a9b      	ldrb	r3, [r3, #10]
 800f67a:	2b05      	cmp	r3, #5
 800f67c:	d807      	bhi.n	800f68e <dhcp_discover+0xda>
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	7a9b      	ldrb	r3, [r3, #10]
 800f682:	461a      	mov	r2, r3
 800f684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f688:	4093      	lsls	r3, r2
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	e001      	b.n	800f692 <dhcp_discover+0xde>
 800f68e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f692:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f694:	89bb      	ldrh	r3, [r7, #12]
 800f696:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f69a:	4a0b      	ldr	r2, [pc, #44]	; (800f6c8 <dhcp_discover+0x114>)
 800f69c:	fb82 1203 	smull	r1, r2, r2, r3
 800f6a0:	1152      	asrs	r2, r2, #5
 800f6a2:	17db      	asrs	r3, r3, #31
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	b29a      	uxth	r2, r3
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f6ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3718      	adds	r7, #24
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	20000124 	.word	0x20000124
 800f6bc:	20000284 	.word	0x20000284
 800f6c0:	080188ac 	.word	0x080188ac
 800f6c4:	080188b0 	.word	0x080188b0
 800f6c8:	10624dd3 	.word	0x10624dd3

0800f6cc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b088      	sub	sp, #32
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d107      	bne.n	800f6ea <dhcp_bind+0x1e>
 800f6da:	4b64      	ldr	r3, [pc, #400]	; (800f86c <dhcp_bind+0x1a0>)
 800f6dc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f6e0:	4963      	ldr	r1, [pc, #396]	; (800f870 <dhcp_bind+0x1a4>)
 800f6e2:	4864      	ldr	r0, [pc, #400]	; (800f874 <dhcp_bind+0x1a8>)
 800f6e4:	f006 f810 	bl	8015708 <iprintf>
 800f6e8:	e0bc      	b.n	800f864 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d107      	bne.n	800f706 <dhcp_bind+0x3a>
 800f6f6:	4b5d      	ldr	r3, [pc, #372]	; (800f86c <dhcp_bind+0x1a0>)
 800f6f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f6fc:	495e      	ldr	r1, [pc, #376]	; (800f878 <dhcp_bind+0x1ac>)
 800f6fe:	485d      	ldr	r0, [pc, #372]	; (800f874 <dhcp_bind+0x1a8>)
 800f700:	f006 f802 	bl	8015708 <iprintf>
 800f704:	e0ae      	b.n	800f864 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	2200      	movs	r2, #0
 800f70a:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f70c:	69bb      	ldr	r3, [r7, #24]
 800f70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f714:	d019      	beq.n	800f74a <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f71a:	331e      	adds	r3, #30
 800f71c:	4a57      	ldr	r2, [pc, #348]	; (800f87c <dhcp_bind+0x1b0>)
 800f71e:	fba2 2303 	umull	r2, r3, r2, r3
 800f722:	095b      	lsrs	r3, r3, #5
 800f724:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f72c:	d302      	bcc.n	800f734 <dhcp_bind+0x68>
       timeout = 0xffff;
 800f72e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f732:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	b29a      	uxth	r2, r3
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f740:	2b00      	cmp	r3, #0
 800f742:	d102      	bne.n	800f74a <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	2201      	movs	r2, #1
 800f748:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f74e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f752:	d01d      	beq.n	800f790 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f758:	331e      	adds	r3, #30
 800f75a:	4a48      	ldr	r2, [pc, #288]	; (800f87c <dhcp_bind+0x1b0>)
 800f75c:	fba2 2303 	umull	r2, r3, r2, r3
 800f760:	095b      	lsrs	r3, r3, #5
 800f762:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f76a:	d302      	bcc.n	800f772 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f76c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f770:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	b29a      	uxth	r2, r3
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	8b1b      	ldrh	r3, [r3, #24]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d102      	bne.n	800f788 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	2201      	movs	r2, #1
 800f786:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	8b1a      	ldrh	r2, [r3, #24]
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f798:	d01d      	beq.n	800f7d6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f79e:	331e      	adds	r3, #30
 800f7a0:	4a36      	ldr	r2, [pc, #216]	; (800f87c <dhcp_bind+0x1b0>)
 800f7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7a6:	095b      	lsrs	r3, r3, #5
 800f7a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7b0:	d302      	bcc.n	800f7b8 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f7b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	8b5b      	ldrh	r3, [r3, #26]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d102      	bne.n	800f7ce <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	8b5a      	ldrh	r2, [r3, #26]
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	8b1a      	ldrh	r2, [r3, #24]
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	8b5b      	ldrh	r3, [r3, #26]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d306      	bcc.n	800f7f0 <dhcp_bind+0x124>
 800f7e2:	69bb      	ldr	r3, [r7, #24]
 800f7e4:	8b5b      	ldrh	r3, [r3, #26]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d002      	beq.n	800f7f0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	7adb      	ldrb	r3, [r3, #11]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d003      	beq.n	800f800 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fc:	613b      	str	r3, [r7, #16]
 800f7fe:	e014      	b.n	800f82a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	3328      	adds	r3, #40	; 0x28
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	db02      	blt.n	800f816 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f810:	23ff      	movs	r3, #255	; 0xff
 800f812:	613b      	str	r3, [r7, #16]
 800f814:	e009      	b.n	800f82a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f816:	7dfb      	ldrb	r3, [r7, #23]
 800f818:	2bbf      	cmp	r3, #191	; 0xbf
 800f81a:	d903      	bls.n	800f824 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f81c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f820:	613b      	str	r3, [r7, #16]
 800f822:	e002      	b.n	800f82a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f828:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d108      	bne.n	800f848 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	4013      	ands	r3, r2
 800f83e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f846:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f848:	210a      	movs	r1, #10
 800f84a:	69b8      	ldr	r0, [r7, #24]
 800f84c:	f000 fa40 	bl	800fcd0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f856:	f107 030c 	add.w	r3, r7, #12
 800f85a:	f107 0210 	add.w	r2, r7, #16
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f7f8 fed6 	bl	8008610 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f864:	3720      	adds	r7, #32
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	08017ab0 	.word	0x08017ab0
 800f870:	08017bf0 	.word	0x08017bf0
 800f874:	08017b10 	.word	0x08017b10
 800f878:	08017c0c 	.word	0x08017c0c
 800f87c:	88888889 	.word	0x88888889

0800f880 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b088      	sub	sp, #32
 800f884:	af02      	add	r7, sp, #8
 800f886:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a1b      	ldr	r3, [r3, #32]
 800f88c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f88e:	2105      	movs	r1, #5
 800f890:	6938      	ldr	r0, [r7, #16]
 800f892:	f000 fa1d 	bl	800fcd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f896:	2203      	movs	r2, #3
 800f898:	6939      	ldr	r1, [r7, #16]
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 fb24 	bl	800fee8 <dhcp_create_msg>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d13b      	bne.n	800f924 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	2139      	movs	r1, #57	; 0x39
 800f8b0:	6938      	ldr	r0, [r7, #16]
 800f8b2:	f000 fa27 	bl	800fd04 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	6938      	ldr	r0, [r7, #16]
 800f8be:	f000 fa83 	bl	800fdc8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f8c2:	2203      	movs	r2, #3
 800f8c4:	2137      	movs	r1, #55	; 0x37
 800f8c6:	6938      	ldr	r0, [r7, #16]
 800f8c8:	f000 fa1c 	bl	800fd04 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	75fb      	strb	r3, [r7, #23]
 800f8d0:	e009      	b.n	800f8e6 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	4a2a      	ldr	r2, [pc, #168]	; (800f980 <dhcp_renew+0x100>)
 800f8d6:	5cd3      	ldrb	r3, [r2, r3]
 800f8d8:	4619      	mov	r1, r3
 800f8da:	6938      	ldr	r0, [r7, #16]
 800f8dc:	f000 fa4c 	bl	800fd78 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8e0:	7dfb      	ldrb	r3, [r7, #23]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	75fb      	strb	r3, [r7, #23]
 800f8e6:	7dfb      	ldrb	r3, [r7, #23]
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	d9f2      	bls.n	800f8d2 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800f8ec:	6938      	ldr	r0, [r7, #16]
 800f8ee:	f000 fc9f 	bl	8010230 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	68da      	ldr	r2, [r3, #12]
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	8a9b      	ldrh	r3, [r3, #20]
 800f8fa:	33f0      	adds	r3, #240	; 0xf0
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	4619      	mov	r1, r3
 800f900:	4610      	mov	r0, r2
 800f902:	f7f9 f9b5 	bl	8008c70 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800f906:	4b1f      	ldr	r3, [pc, #124]	; (800f984 <dhcp_renew+0x104>)
 800f908:	6818      	ldr	r0, [r3, #0]
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	68d9      	ldr	r1, [r3, #12]
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	2343      	movs	r3, #67	; 0x43
 800f91a:	f7ff fa33 	bl	800ed84 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f91e:	6938      	ldr	r0, [r7, #16]
 800f920:	f000 fc44 	bl	80101ac <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	7a9b      	ldrb	r3, [r3, #10]
 800f928:	2bff      	cmp	r3, #255	; 0xff
 800f92a:	d005      	beq.n	800f938 <dhcp_renew+0xb8>
    dhcp->tries++;
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	7a9b      	ldrb	r3, [r3, #10]
 800f930:	3301      	adds	r3, #1
 800f932:	b2da      	uxtb	r2, r3
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	7a9b      	ldrb	r3, [r3, #10]
 800f93c:	2b09      	cmp	r3, #9
 800f93e:	d80a      	bhi.n	800f956 <dhcp_renew+0xd6>
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	7a9b      	ldrb	r3, [r3, #10]
 800f944:	b29b      	uxth	r3, r3
 800f946:	461a      	mov	r2, r3
 800f948:	0152      	lsls	r2, r2, #5
 800f94a:	1ad2      	subs	r2, r2, r3
 800f94c:	0092      	lsls	r2, r2, #2
 800f94e:	4413      	add	r3, r2
 800f950:	011b      	lsls	r3, r3, #4
 800f952:	b29b      	uxth	r3, r3
 800f954:	e001      	b.n	800f95a <dhcp_renew+0xda>
 800f956:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f95a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f95c:	89bb      	ldrh	r3, [r7, #12]
 800f95e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f962:	4a09      	ldr	r2, [pc, #36]	; (800f988 <dhcp_renew+0x108>)
 800f964:	fb82 1203 	smull	r1, r2, r2, r3
 800f968:	1152      	asrs	r2, r2, #5
 800f96a:	17db      	asrs	r3, r3, #31
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	b29a      	uxth	r2, r3
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	20000124 	.word	0x20000124
 800f984:	20000284 	.word	0x20000284
 800f988:	10624dd3 	.word	0x10624dd3

0800f98c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b088      	sub	sp, #32
 800f990:	af02      	add	r7, sp, #8
 800f992:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a1b      	ldr	r3, [r3, #32]
 800f998:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f99a:	2104      	movs	r1, #4
 800f99c:	6938      	ldr	r0, [r7, #16]
 800f99e:	f000 f997 	bl	800fcd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f9a2:	2203      	movs	r2, #3
 800f9a4:	6939      	ldr	r1, [r7, #16]
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 fa9e 	bl	800fee8 <dhcp_create_msg>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d139      	bne.n	800fa2c <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f9b8:	2202      	movs	r2, #2
 800f9ba:	2139      	movs	r1, #57	; 0x39
 800f9bc:	6938      	ldr	r0, [r7, #16]
 800f9be:	f000 f9a1 	bl	800fd04 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	6938      	ldr	r0, [r7, #16]
 800f9ca:	f000 f9fd 	bl	800fdc8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f9ce:	2203      	movs	r2, #3
 800f9d0:	2137      	movs	r1, #55	; 0x37
 800f9d2:	6938      	ldr	r0, [r7, #16]
 800f9d4:	f000 f996 	bl	800fd04 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f9d8:	2300      	movs	r3, #0
 800f9da:	75fb      	strb	r3, [r7, #23]
 800f9dc:	e009      	b.n	800f9f2 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f9de:	7dfb      	ldrb	r3, [r7, #23]
 800f9e0:	4a29      	ldr	r2, [pc, #164]	; (800fa88 <dhcp_rebind+0xfc>)
 800f9e2:	5cd3      	ldrb	r3, [r2, r3]
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6938      	ldr	r0, [r7, #16]
 800f9e8:	f000 f9c6 	bl	800fd78 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	75fb      	strb	r3, [r7, #23]
 800f9f2:	7dfb      	ldrb	r3, [r7, #23]
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d9f2      	bls.n	800f9de <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f9f8:	6938      	ldr	r0, [r7, #16]
 800f9fa:	f000 fc19 	bl	8010230 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	68da      	ldr	r2, [r3, #12]
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	8a9b      	ldrh	r3, [r3, #20]
 800fa06:	33f0      	adds	r3, #240	; 0xf0
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7f9 f92f 	bl	8008c70 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800fa12:	4b1e      	ldr	r3, [pc, #120]	; (800fa8c <dhcp_rebind+0x100>)
 800fa14:	6818      	ldr	r0, [r3, #0]
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	68d9      	ldr	r1, [r3, #12]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	2343      	movs	r3, #67	; 0x43
 800fa20:	4a1b      	ldr	r2, [pc, #108]	; (800fa90 <dhcp_rebind+0x104>)
 800fa22:	f7ff f9af 	bl	800ed84 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fa26:	6938      	ldr	r0, [r7, #16]
 800fa28:	f000 fbc0 	bl	80101ac <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	7a9b      	ldrb	r3, [r3, #10]
 800fa30:	2bff      	cmp	r3, #255	; 0xff
 800fa32:	d005      	beq.n	800fa40 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	7a9b      	ldrb	r3, [r3, #10]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	7a9b      	ldrb	r3, [r3, #10]
 800fa44:	2b09      	cmp	r3, #9
 800fa46:	d80a      	bhi.n	800fa5e <dhcp_rebind+0xd2>
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	7a9b      	ldrb	r3, [r3, #10]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	461a      	mov	r2, r3
 800fa50:	0152      	lsls	r2, r2, #5
 800fa52:	1ad2      	subs	r2, r2, r3
 800fa54:	0092      	lsls	r2, r2, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	00db      	lsls	r3, r3, #3
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	e001      	b.n	800fa62 <dhcp_rebind+0xd6>
 800fa5e:	f242 7310 	movw	r3, #10000	; 0x2710
 800fa62:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fa64:	89bb      	ldrh	r3, [r7, #12]
 800fa66:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fa6a:	4a0a      	ldr	r2, [pc, #40]	; (800fa94 <dhcp_rebind+0x108>)
 800fa6c:	fb82 1203 	smull	r1, r2, r2, r3
 800fa70:	1152      	asrs	r2, r2, #5
 800fa72:	17db      	asrs	r3, r3, #31
 800fa74:	1ad3      	subs	r3, r2, r3
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fa7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3718      	adds	r7, #24
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	20000124 	.word	0x20000124
 800fa8c:	20000284 	.word	0x20000284
 800fa90:	080188b0 	.word	0x080188b0
 800fa94:	10624dd3 	.word	0x10624dd3

0800fa98 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b088      	sub	sp, #32
 800fa9c:	af02      	add	r7, sp, #8
 800fa9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800faa6:	2103      	movs	r1, #3
 800faa8:	6938      	ldr	r0, [r7, #16]
 800faaa:	f000 f911 	bl	800fcd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800faae:	2203      	movs	r2, #3
 800fab0:	6939      	ldr	r1, [r7, #16]
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 fa18 	bl	800fee8 <dhcp_create_msg>
 800fab8:	4603      	mov	r3, r0
 800faba:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800fabc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d147      	bne.n	800fb54 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fac4:	2202      	movs	r2, #2
 800fac6:	2139      	movs	r1, #57	; 0x39
 800fac8:	6938      	ldr	r0, [r7, #16]
 800faca:	f000 f91b 	bl	800fd04 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800face:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fad2:	6938      	ldr	r0, [r7, #16]
 800fad4:	f000 f978 	bl	800fdc8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800fad8:	2204      	movs	r2, #4
 800fada:	2132      	movs	r1, #50	; 0x32
 800fadc:	6938      	ldr	r0, [r7, #16]
 800fade:	f000 f911 	bl	800fd04 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f8 f918 	bl	8007d1c <lwip_htonl>
 800faec:	4603      	mov	r3, r0
 800faee:	4619      	mov	r1, r3
 800faf0:	6938      	ldr	r0, [r7, #16]
 800faf2:	f000 f9a3 	bl	800fe3c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800faf6:	2203      	movs	r2, #3
 800faf8:	2137      	movs	r1, #55	; 0x37
 800fafa:	6938      	ldr	r0, [r7, #16]
 800fafc:	f000 f902 	bl	800fd04 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb00:	2300      	movs	r3, #0
 800fb02:	75fb      	strb	r3, [r7, #23]
 800fb04:	e009      	b.n	800fb1a <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800fb06:	7dfb      	ldrb	r3, [r7, #23]
 800fb08:	4a29      	ldr	r2, [pc, #164]	; (800fbb0 <dhcp_reboot+0x118>)
 800fb0a:	5cd3      	ldrb	r3, [r2, r3]
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6938      	ldr	r0, [r7, #16]
 800fb10:	f000 f932 	bl	800fd78 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb14:	7dfb      	ldrb	r3, [r7, #23]
 800fb16:	3301      	adds	r3, #1
 800fb18:	75fb      	strb	r3, [r7, #23]
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	d9f2      	bls.n	800fb06 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800fb20:	6938      	ldr	r0, [r7, #16]
 800fb22:	f000 fb85 	bl	8010230 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	68da      	ldr	r2, [r3, #12]
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	8a9b      	ldrh	r3, [r3, #20]
 800fb2e:	33f0      	adds	r3, #240	; 0xf0
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	4619      	mov	r1, r3
 800fb34:	4610      	mov	r0, r2
 800fb36:	f7f9 f89b 	bl	8008c70 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800fb3a:	4b1e      	ldr	r3, [pc, #120]	; (800fbb4 <dhcp_reboot+0x11c>)
 800fb3c:	6818      	ldr	r0, [r3, #0]
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	68d9      	ldr	r1, [r3, #12]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	2343      	movs	r3, #67	; 0x43
 800fb48:	4a1b      	ldr	r2, [pc, #108]	; (800fbb8 <dhcp_reboot+0x120>)
 800fb4a:	f7ff f91b 	bl	800ed84 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fb4e:	6938      	ldr	r0, [r7, #16]
 800fb50:	f000 fb2c 	bl	80101ac <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	7a9b      	ldrb	r3, [r3, #10]
 800fb58:	2bff      	cmp	r3, #255	; 0xff
 800fb5a:	d005      	beq.n	800fb68 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	7a9b      	ldrb	r3, [r3, #10]
 800fb60:	3301      	adds	r3, #1
 800fb62:	b2da      	uxtb	r2, r3
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	7a9b      	ldrb	r3, [r3, #10]
 800fb6c:	2b09      	cmp	r3, #9
 800fb6e:	d80a      	bhi.n	800fb86 <dhcp_reboot+0xee>
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	7a9b      	ldrb	r3, [r3, #10]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	461a      	mov	r2, r3
 800fb78:	0152      	lsls	r2, r2, #5
 800fb7a:	1ad2      	subs	r2, r2, r3
 800fb7c:	0092      	lsls	r2, r2, #2
 800fb7e:	4413      	add	r3, r2
 800fb80:	00db      	lsls	r3, r3, #3
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	e001      	b.n	800fb8a <dhcp_reboot+0xf2>
 800fb86:	f242 7310 	movw	r3, #10000	; 0x2710
 800fb8a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fb8c:	89bb      	ldrh	r3, [r7, #12]
 800fb8e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fb92:	4a0a      	ldr	r2, [pc, #40]	; (800fbbc <dhcp_reboot+0x124>)
 800fb94:	fb82 1203 	smull	r1, r2, r2, r3
 800fb98:	1152      	asrs	r2, r2, #5
 800fb9a:	17db      	asrs	r3, r3, #31
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	20000124 	.word	0x20000124
 800fbb4:	20000284 	.word	0x20000284
 800fbb8:	080188b0 	.word	0x080188b0
 800fbbc:	10624dd3 	.word	0x10624dd3

0800fbc0 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b088      	sub	sp, #32
 800fbc4:	af02      	add	r7, sp, #8
 800fbc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6a1b      	ldr	r3, [r3, #32]
 800fbcc:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d102      	bne.n	800fbda <dhcp_release+0x1a>
    return ERR_ARG;
 800fbd4:	f06f 030f 	mvn.w	r3, #15
 800fbd8:	e072      	b.n	800fcc0 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbde:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 fb7f 	bl	80102e4 <dhcp_supplied_address>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fbea:	2100      	movs	r1, #0
 800fbec:	6978      	ldr	r0, [r7, #20]
 800fbee:	f000 f86f 	bl	800fcd0 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	2200      	movs	r2, #0
 800fc02:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	2200      	movs	r2, #0
 800fc08:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	639a      	str	r2, [r3, #56]	; 0x38
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	2200      	movs	r2, #0
 800fc24:	845a      	strh	r2, [r3, #34]	; 0x22
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	841a      	strh	r2, [r3, #32]
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	8c1a      	ldrh	r2, [r3, #32]
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	83da      	strh	r2, [r3, #30]
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	8bda      	ldrh	r2, [r3, #30]
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800fc3e:	7cfb      	ldrb	r3, [r7, #19]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d101      	bne.n	800fc48 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800fc44:	2300      	movs	r3, #0
 800fc46:	e03b      	b.n	800fcc0 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800fc48:	2207      	movs	r2, #7
 800fc4a:	6979      	ldr	r1, [r7, #20]
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f94b 	bl	800fee8 <dhcp_create_msg>
 800fc52:	4603      	mov	r3, r0
 800fc54:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800fc56:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d128      	bne.n	800fcb0 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800fc5e:	2204      	movs	r2, #4
 800fc60:	2136      	movs	r1, #54	; 0x36
 800fc62:	6978      	ldr	r0, [r7, #20]
 800fc64:	f000 f84e 	bl	800fd04 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7f8 f856 	bl	8007d1c <lwip_htonl>
 800fc70:	4603      	mov	r3, r0
 800fc72:	4619      	mov	r1, r3
 800fc74:	6978      	ldr	r0, [r7, #20]
 800fc76:	f000 f8e1 	bl	800fe3c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800fc7a:	6978      	ldr	r0, [r7, #20]
 800fc7c:	f000 fad8 	bl	8010230 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	68da      	ldr	r2, [r3, #12]
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	8a9b      	ldrh	r3, [r3, #20]
 800fc88:	33f0      	adds	r3, #240	; 0xf0
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	4610      	mov	r0, r2
 800fc90:	f7f8 ffee 	bl	8008c70 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800fc94:	4b0c      	ldr	r3, [pc, #48]	; (800fcc8 <dhcp_release+0x108>)
 800fc96:	6818      	ldr	r0, [r3, #0]
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	68d9      	ldr	r1, [r3, #12]
 800fc9c:	f107 020c 	add.w	r2, r7, #12
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	2343      	movs	r3, #67	; 0x43
 800fca6:	f7ff f86d 	bl	800ed84 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fcaa:	6978      	ldr	r0, [r7, #20]
 800fcac:	f000 fa7e 	bl	80101ac <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fcb0:	4b06      	ldr	r3, [pc, #24]	; (800fccc <dhcp_release+0x10c>)
 800fcb2:	4a06      	ldr	r2, [pc, #24]	; (800fccc <dhcp_release+0x10c>)
 800fcb4:	4905      	ldr	r1, [pc, #20]	; (800fccc <dhcp_release+0x10c>)
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7f8 fcaa 	bl	8008610 <netif_set_addr>

  return result;
 800fcbc:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3718      	adds	r7, #24
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	20000284 	.word	0x20000284
 800fccc:	080188ac 	.word	0x080188ac

0800fcd0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	7a5b      	ldrb	r3, [r3, #9]
 800fce0:	78fa      	ldrb	r2, [r7, #3]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d008      	beq.n	800fcf8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	78fa      	ldrb	r2, [r7, #3]
 800fcea:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	82da      	strh	r2, [r3, #22]
  }
}
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	70fb      	strb	r3, [r7, #3]
 800fd10:	4613      	mov	r3, r2
 800fd12:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	8a9b      	ldrh	r3, [r3, #20]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	78bb      	ldrb	r3, [r7, #2]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	3302      	adds	r3, #2
 800fd20:	2b44      	cmp	r3, #68	; 0x44
 800fd22:	d906      	bls.n	800fd32 <dhcp_option+0x2e>
 800fd24:	4b11      	ldr	r3, [pc, #68]	; (800fd6c <dhcp_option+0x68>)
 800fd26:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800fd2a:	4911      	ldr	r1, [pc, #68]	; (800fd70 <dhcp_option+0x6c>)
 800fd2c:	4811      	ldr	r0, [pc, #68]	; (800fd74 <dhcp_option+0x70>)
 800fd2e:	f005 fceb 	bl	8015708 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	691a      	ldr	r2, [r3, #16]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	8a9b      	ldrh	r3, [r3, #20]
 800fd3a:	1c59      	adds	r1, r3, #1
 800fd3c:	b288      	uxth	r0, r1
 800fd3e:	6879      	ldr	r1, [r7, #4]
 800fd40:	8288      	strh	r0, [r1, #20]
 800fd42:	4413      	add	r3, r2
 800fd44:	78fa      	ldrb	r2, [r7, #3]
 800fd46:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	691a      	ldr	r2, [r3, #16]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	8a9b      	ldrh	r3, [r3, #20]
 800fd52:	1c59      	adds	r1, r3, #1
 800fd54:	b288      	uxth	r0, r1
 800fd56:	6879      	ldr	r1, [r7, #4]
 800fd58:	8288      	strh	r0, [r1, #20]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	78ba      	ldrb	r2, [r7, #2]
 800fd5e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fd62:	bf00      	nop
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	08017ab0 	.word	0x08017ab0
 800fd70:	08017c40 	.word	0x08017c40
 800fd74:	08017b10 	.word	0x08017b10

0800fd78 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	460b      	mov	r3, r1
 800fd82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	8a9b      	ldrh	r3, [r3, #20]
 800fd88:	2b43      	cmp	r3, #67	; 0x43
 800fd8a:	d906      	bls.n	800fd9a <dhcp_option_byte+0x22>
 800fd8c:	4b0b      	ldr	r3, [pc, #44]	; (800fdbc <dhcp_option_byte+0x44>)
 800fd8e:	f240 527b 	movw	r2, #1403	; 0x57b
 800fd92:	490b      	ldr	r1, [pc, #44]	; (800fdc0 <dhcp_option_byte+0x48>)
 800fd94:	480b      	ldr	r0, [pc, #44]	; (800fdc4 <dhcp_option_byte+0x4c>)
 800fd96:	f005 fcb7 	bl	8015708 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	691a      	ldr	r2, [r3, #16]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	8a9b      	ldrh	r3, [r3, #20]
 800fda2:	1c59      	adds	r1, r3, #1
 800fda4:	b288      	uxth	r0, r1
 800fda6:	6879      	ldr	r1, [r7, #4]
 800fda8:	8288      	strh	r0, [r1, #20]
 800fdaa:	4413      	add	r3, r2
 800fdac:	78fa      	ldrb	r2, [r7, #3]
 800fdae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fdb2:	bf00      	nop
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	08017ab0 	.word	0x08017ab0
 800fdc0:	08017c88 	.word	0x08017c88
 800fdc4:	08017b10 	.word	0x08017b10

0800fdc8 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800fdc8:	b590      	push	{r4, r7, lr}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	8a9b      	ldrh	r3, [r3, #20]
 800fdd8:	3302      	adds	r3, #2
 800fdda:	2b44      	cmp	r3, #68	; 0x44
 800fddc:	d906      	bls.n	800fdec <dhcp_option_short+0x24>
 800fdde:	4b14      	ldr	r3, [pc, #80]	; (800fe30 <dhcp_option_short+0x68>)
 800fde0:	f240 5282 	movw	r2, #1410	; 0x582
 800fde4:	4913      	ldr	r1, [pc, #76]	; (800fe34 <dhcp_option_short+0x6c>)
 800fde6:	4814      	ldr	r0, [pc, #80]	; (800fe38 <dhcp_option_short+0x70>)
 800fde8:	f005 fc8e 	bl	8015708 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fdec:	887b      	ldrh	r3, [r7, #2]
 800fdee:	0a1b      	lsrs	r3, r3, #8
 800fdf0:	b298      	uxth	r0, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	691a      	ldr	r2, [r3, #16]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8a9b      	ldrh	r3, [r3, #20]
 800fdfa:	1c59      	adds	r1, r3, #1
 800fdfc:	b28c      	uxth	r4, r1
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	828c      	strh	r4, [r1, #20]
 800fe02:	b2c1      	uxtb	r1, r0
 800fe04:	4413      	add	r3, r2
 800fe06:	460a      	mov	r2, r1
 800fe08:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	691a      	ldr	r2, [r3, #16]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	8a9b      	ldrh	r3, [r3, #20]
 800fe14:	1c59      	adds	r1, r3, #1
 800fe16:	b288      	uxth	r0, r1
 800fe18:	6879      	ldr	r1, [r7, #4]
 800fe1a:	8288      	strh	r0, [r1, #20]
 800fe1c:	8879      	ldrh	r1, [r7, #2]
 800fe1e:	b2c9      	uxtb	r1, r1
 800fe20:	4413      	add	r3, r2
 800fe22:	460a      	mov	r2, r1
 800fe24:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fe28:	bf00      	nop
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd90      	pop	{r4, r7, pc}
 800fe30:	08017ab0 	.word	0x08017ab0
 800fe34:	08017cc4 	.word	0x08017cc4
 800fe38:	08017b10 	.word	0x08017b10

0800fe3c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800fe3c:	b590      	push	{r4, r7, lr}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	8a9b      	ldrh	r3, [r3, #20]
 800fe4a:	3304      	adds	r3, #4
 800fe4c:	2b44      	cmp	r3, #68	; 0x44
 800fe4e:	d906      	bls.n	800fe5e <dhcp_option_long+0x22>
 800fe50:	4b22      	ldr	r3, [pc, #136]	; (800fedc <dhcp_option_long+0xa0>)
 800fe52:	f240 528a 	movw	r2, #1418	; 0x58a
 800fe56:	4922      	ldr	r1, [pc, #136]	; (800fee0 <dhcp_option_long+0xa4>)
 800fe58:	4822      	ldr	r0, [pc, #136]	; (800fee4 <dhcp_option_long+0xa8>)
 800fe5a:	f005 fc55 	bl	8015708 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	0e18      	lsrs	r0, r3, #24
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	691a      	ldr	r2, [r3, #16]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	8a9b      	ldrh	r3, [r3, #20]
 800fe6a:	1c59      	adds	r1, r3, #1
 800fe6c:	b28c      	uxth	r4, r1
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	828c      	strh	r4, [r1, #20]
 800fe72:	b2c1      	uxtb	r1, r0
 800fe74:	4413      	add	r3, r2
 800fe76:	460a      	mov	r2, r1
 800fe78:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	0c18      	lsrs	r0, r3, #16
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	691a      	ldr	r2, [r3, #16]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	8a9b      	ldrh	r3, [r3, #20]
 800fe88:	1c59      	adds	r1, r3, #1
 800fe8a:	b28c      	uxth	r4, r1
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	828c      	strh	r4, [r1, #20]
 800fe90:	b2c1      	uxtb	r1, r0
 800fe92:	4413      	add	r3, r2
 800fe94:	460a      	mov	r2, r1
 800fe96:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	0a18      	lsrs	r0, r3, #8
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	691a      	ldr	r2, [r3, #16]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	8a9b      	ldrh	r3, [r3, #20]
 800fea6:	1c59      	adds	r1, r3, #1
 800fea8:	b28c      	uxth	r4, r1
 800feaa:	6879      	ldr	r1, [r7, #4]
 800feac:	828c      	strh	r4, [r1, #20]
 800feae:	b2c1      	uxtb	r1, r0
 800feb0:	4413      	add	r3, r2
 800feb2:	460a      	mov	r2, r1
 800feb4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	691a      	ldr	r2, [r3, #16]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	8a9b      	ldrh	r3, [r3, #20]
 800fec0:	1c59      	adds	r1, r3, #1
 800fec2:	b288      	uxth	r0, r1
 800fec4:	6879      	ldr	r1, [r7, #4]
 800fec6:	8288      	strh	r0, [r1, #20]
 800fec8:	6839      	ldr	r1, [r7, #0]
 800feca:	b2c9      	uxtb	r1, r1
 800fecc:	4413      	add	r3, r2
 800fece:	460a      	mov	r2, r1
 800fed0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd90      	pop	{r4, r7, pc}
 800fedc:	08017ab0 	.word	0x08017ab0
 800fee0:	08017d08 	.word	0x08017d08
 800fee4:	08017b10 	.word	0x08017b10

0800fee8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800fee8:	b590      	push	{r4, r7, lr}
 800feea:	b087      	sub	sp, #28
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	4613      	mov	r3, r2
 800fef4:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d109      	bne.n	800ff10 <dhcp_create_msg+0x28>
 800fefc:	4ba3      	ldr	r3, [pc, #652]	; (801018c <dhcp_create_msg+0x2a4>)
 800fefe:	f240 721d 	movw	r2, #1821	; 0x71d
 800ff02:	49a3      	ldr	r1, [pc, #652]	; (8010190 <dhcp_create_msg+0x2a8>)
 800ff04:	48a3      	ldr	r0, [pc, #652]	; (8010194 <dhcp_create_msg+0x2ac>)
 800ff06:	f005 fbff 	bl	8015708 <iprintf>
 800ff0a:	f06f 030f 	mvn.w	r3, #15
 800ff0e:	e138      	b.n	8010182 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d109      	bne.n	800ff2a <dhcp_create_msg+0x42>
 800ff16:	4b9d      	ldr	r3, [pc, #628]	; (801018c <dhcp_create_msg+0x2a4>)
 800ff18:	f240 721e 	movw	r2, #1822	; 0x71e
 800ff1c:	499e      	ldr	r1, [pc, #632]	; (8010198 <dhcp_create_msg+0x2b0>)
 800ff1e:	489d      	ldr	r0, [pc, #628]	; (8010194 <dhcp_create_msg+0x2ac>)
 800ff20:	f005 fbf2 	bl	8015708 <iprintf>
 800ff24:	f06f 0305 	mvn.w	r3, #5
 800ff28:	e12b      	b.n	8010182 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d006      	beq.n	800ff40 <dhcp_create_msg+0x58>
 800ff32:	4b96      	ldr	r3, [pc, #600]	; (801018c <dhcp_create_msg+0x2a4>)
 800ff34:	f240 721f 	movw	r2, #1823	; 0x71f
 800ff38:	4998      	ldr	r1, [pc, #608]	; (801019c <dhcp_create_msg+0x2b4>)
 800ff3a:	4896      	ldr	r0, [pc, #600]	; (8010194 <dhcp_create_msg+0x2ac>)
 800ff3c:	f005 fbe4 	bl	8015708 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	691b      	ldr	r3, [r3, #16]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d006      	beq.n	800ff56 <dhcp_create_msg+0x6e>
 800ff48:	4b90      	ldr	r3, [pc, #576]	; (801018c <dhcp_create_msg+0x2a4>)
 800ff4a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800ff4e:	4994      	ldr	r1, [pc, #592]	; (80101a0 <dhcp_create_msg+0x2b8>)
 800ff50:	4890      	ldr	r0, [pc, #576]	; (8010194 <dhcp_create_msg+0x2ac>)
 800ff52:	f005 fbd9 	bl	8015708 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800ff56:	2200      	movs	r2, #0
 800ff58:	f44f 719a 	mov.w	r1, #308	; 0x134
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f7f8 fc89 	bl	8008874 <pbuf_alloc>
 800ff62:	4602      	mov	r2, r0
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d102      	bne.n	800ff76 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800ff70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff74:	e105      	b.n	8010182 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	895b      	ldrh	r3, [r3, #10]
 800ff7c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800ff80:	d206      	bcs.n	800ff90 <dhcp_create_msg+0xa8>
 800ff82:	4b82      	ldr	r3, [pc, #520]	; (801018c <dhcp_create_msg+0x2a4>)
 800ff84:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ff88:	4986      	ldr	r1, [pc, #536]	; (80101a4 <dhcp_create_msg+0x2bc>)
 800ff8a:	4882      	ldr	r0, [pc, #520]	; (8010194 <dhcp_create_msg+0x2ac>)
 800ff8c:	f005 fbbc 	bl	8015708 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800ff90:	79fb      	ldrb	r3, [r7, #7]
 800ff92:	2b03      	cmp	r3, #3
 800ff94:	d103      	bne.n	800ff9e <dhcp_create_msg+0xb6>
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	7a5b      	ldrb	r3, [r3, #9]
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	d10d      	bne.n	800ffba <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	7a9b      	ldrb	r3, [r3, #10]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d105      	bne.n	800ffb2 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800ffa6:	f005 fc2b 	bl	8015800 <rand>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	461a      	mov	r2, r3
 800ffae:	4b7e      	ldr	r3, [pc, #504]	; (80101a8 <dhcp_create_msg+0x2c0>)
 800ffb0:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800ffb2:	4b7d      	ldr	r3, [pc, #500]	; (80101a8 <dhcp_create_msg+0x2c0>)
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	685a      	ldr	r2, [r3, #4]
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	691b      	ldr	r3, [r3, #16]
 800ffc8:	2201      	movs	r2, #1
 800ffca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	691b      	ldr	r3, [r3, #16]
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ffde:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	691c      	ldr	r4, [r3, #16]
 800fff0:	4610      	mov	r0, r2
 800fff2:	f7f7 fe93 	bl	8007d1c <lwip_htonl>
 800fff6:	4603      	mov	r3, r0
 800fff8:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	2200      	movs	r2, #0
 8010000:	721a      	strb	r2, [r3, #8]
 8010002:	2200      	movs	r2, #0
 8010004:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	2200      	movs	r2, #0
 801000c:	729a      	strb	r2, [r3, #10]
 801000e:	2200      	movs	r2, #0
 8010010:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	2200      	movs	r2, #0
 8010018:	731a      	strb	r2, [r3, #12]
 801001a:	2200      	movs	r2, #0
 801001c:	735a      	strb	r2, [r3, #13]
 801001e:	2200      	movs	r2, #0
 8010020:	739a      	strb	r2, [r3, #14]
 8010022:	2200      	movs	r2, #0
 8010024:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010026:	79fb      	ldrb	r3, [r7, #7]
 8010028:	2b08      	cmp	r3, #8
 801002a:	d010      	beq.n	801004e <dhcp_create_msg+0x166>
 801002c:	79fb      	ldrb	r3, [r7, #7]
 801002e:	2b04      	cmp	r3, #4
 8010030:	d00d      	beq.n	801004e <dhcp_create_msg+0x166>
 8010032:	79fb      	ldrb	r3, [r7, #7]
 8010034:	2b07      	cmp	r3, #7
 8010036:	d00a      	beq.n	801004e <dhcp_create_msg+0x166>
 8010038:	79fb      	ldrb	r3, [r7, #7]
 801003a:	2b03      	cmp	r3, #3
 801003c:	d10d      	bne.n	801005a <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010042:	2b05      	cmp	r3, #5
 8010044:	d003      	beq.n	801004e <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	7a5b      	ldrb	r3, [r3, #9]
 801004a:	2b04      	cmp	r3, #4
 801004c:	d105      	bne.n	801005a <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	1d1a      	adds	r2, r3, #4
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	691b      	ldr	r3, [r3, #16]
 8010056:	6812      	ldr	r2, [r2, #0]
 8010058:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	2200      	movs	r2, #0
 8010060:	741a      	strb	r2, [r3, #16]
 8010062:	2200      	movs	r2, #0
 8010064:	745a      	strb	r2, [r3, #17]
 8010066:	2200      	movs	r2, #0
 8010068:	749a      	strb	r2, [r3, #18]
 801006a:	2200      	movs	r2, #0
 801006c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	2200      	movs	r2, #0
 8010074:	751a      	strb	r2, [r3, #20]
 8010076:	2200      	movs	r2, #0
 8010078:	755a      	strb	r2, [r3, #21]
 801007a:	2200      	movs	r2, #0
 801007c:	759a      	strb	r2, [r3, #22]
 801007e:	2200      	movs	r2, #0
 8010080:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	691b      	ldr	r3, [r3, #16]
 8010086:	2200      	movs	r2, #0
 8010088:	761a      	strb	r2, [r3, #24]
 801008a:	2200      	movs	r2, #0
 801008c:	765a      	strb	r2, [r3, #25]
 801008e:	2200      	movs	r2, #0
 8010090:	769a      	strb	r2, [r3, #26]
 8010092:	2200      	movs	r2, #0
 8010094:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8010096:	2300      	movs	r3, #0
 8010098:	82fb      	strh	r3, [r7, #22]
 801009a:	e019      	b.n	80100d0 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	8afa      	ldrh	r2, [r7, #22]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d208      	bcs.n	80100bc <dhcp_create_msg+0x1d4>
 80100aa:	8afb      	ldrh	r3, [r7, #22]
 80100ac:	2b05      	cmp	r3, #5
 80100ae:	d805      	bhi.n	80100bc <dhcp_create_msg+0x1d4>
 80100b0:	8afb      	ldrh	r3, [r7, #22]
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	4413      	add	r3, r2
 80100b6:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 80100ba:	e000      	b.n	80100be <dhcp_create_msg+0x1d6>
 80100bc:	2100      	movs	r1, #0
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	691a      	ldr	r2, [r3, #16]
 80100c2:	8afb      	ldrh	r3, [r7, #22]
 80100c4:	4413      	add	r3, r2
 80100c6:	460a      	mov	r2, r1
 80100c8:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80100ca:	8afb      	ldrh	r3, [r7, #22]
 80100cc:	3301      	adds	r3, #1
 80100ce:	82fb      	strh	r3, [r7, #22]
 80100d0:	8afb      	ldrh	r3, [r7, #22]
 80100d2:	2b0f      	cmp	r3, #15
 80100d4:	d9e2      	bls.n	801009c <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80100d6:	2300      	movs	r3, #0
 80100d8:	82fb      	strh	r3, [r7, #22]
 80100da:	e009      	b.n	80100f0 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	691a      	ldr	r2, [r3, #16]
 80100e0:	8afb      	ldrh	r3, [r7, #22]
 80100e2:	4413      	add	r3, r2
 80100e4:	2200      	movs	r2, #0
 80100e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80100ea:	8afb      	ldrh	r3, [r7, #22]
 80100ec:	3301      	adds	r3, #1
 80100ee:	82fb      	strh	r3, [r7, #22]
 80100f0:	8afb      	ldrh	r3, [r7, #22]
 80100f2:	2b3f      	cmp	r3, #63	; 0x3f
 80100f4:	d9f2      	bls.n	80100dc <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80100f6:	2300      	movs	r3, #0
 80100f8:	82fb      	strh	r3, [r7, #22]
 80100fa:	e009      	b.n	8010110 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	691a      	ldr	r2, [r3, #16]
 8010100:	8afb      	ldrh	r3, [r7, #22]
 8010102:	4413      	add	r3, r2
 8010104:	2200      	movs	r2, #0
 8010106:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801010a:	8afb      	ldrh	r3, [r7, #22]
 801010c:	3301      	adds	r3, #1
 801010e:	82fb      	strh	r3, [r7, #22]
 8010110:	8afb      	ldrh	r3, [r7, #22]
 8010112:	2b7f      	cmp	r3, #127	; 0x7f
 8010114:	d9f2      	bls.n	80100fc <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	2200      	movs	r2, #0
 801011c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010120:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010124:	2200      	movs	r2, #0
 8010126:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801012a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801012e:	2200      	movs	r2, #0
 8010130:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010134:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010138:	2200      	movs	r2, #0
 801013a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801013e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	2200      	movs	r2, #0
 8010146:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010148:	2300      	movs	r3, #0
 801014a:	82fb      	strh	r3, [r7, #22]
 801014c:	e00b      	b.n	8010166 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	691a      	ldr	r2, [r3, #16]
 8010152:	8afb      	ldrh	r3, [r7, #22]
 8010154:	8af9      	ldrh	r1, [r7, #22]
 8010156:	b2c9      	uxtb	r1, r1
 8010158:	4413      	add	r3, r2
 801015a:	460a      	mov	r2, r1
 801015c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010160:	8afb      	ldrh	r3, [r7, #22]
 8010162:	3301      	adds	r3, #1
 8010164:	82fb      	strh	r3, [r7, #22]
 8010166:	8afb      	ldrh	r3, [r7, #22]
 8010168:	2b43      	cmp	r3, #67	; 0x43
 801016a:	d9f0      	bls.n	801014e <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801016c:	2201      	movs	r2, #1
 801016e:	2135      	movs	r1, #53	; 0x35
 8010170:	68b8      	ldr	r0, [r7, #8]
 8010172:	f7ff fdc7 	bl	800fd04 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8010176:	79fb      	ldrb	r3, [r7, #7]
 8010178:	4619      	mov	r1, r3
 801017a:	68b8      	ldr	r0, [r7, #8]
 801017c:	f7ff fdfc 	bl	800fd78 <dhcp_option_byte>
  return ERR_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	371c      	adds	r7, #28
 8010186:	46bd      	mov	sp, r7
 8010188:	bd90      	pop	{r4, r7, pc}
 801018a:	bf00      	nop
 801018c:	08017ab0 	.word	0x08017ab0
 8010190:	08017de0 	.word	0x08017de0
 8010194:	08017b10 	.word	0x08017b10
 8010198:	08017e00 	.word	0x08017e00
 801019c:	08017e20 	.word	0x08017e20
 80101a0:	08017e48 	.word	0x08017e48
 80101a4:	08017e70 	.word	0x08017e70
 80101a8:	20000288 	.word	0x20000288

080101ac <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d107      	bne.n	80101ca <dhcp_delete_msg+0x1e>
 80101ba:	4b18      	ldr	r3, [pc, #96]	; (801021c <dhcp_delete_msg+0x70>)
 80101bc:	f240 726d 	movw	r2, #1901	; 0x76d
 80101c0:	4917      	ldr	r1, [pc, #92]	; (8010220 <dhcp_delete_msg+0x74>)
 80101c2:	4818      	ldr	r0, [pc, #96]	; (8010224 <dhcp_delete_msg+0x78>)
 80101c4:	f005 faa0 	bl	8015708 <iprintf>
 80101c8:	e024      	b.n	8010214 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d106      	bne.n	80101e0 <dhcp_delete_msg+0x34>
 80101d2:	4b12      	ldr	r3, [pc, #72]	; (801021c <dhcp_delete_msg+0x70>)
 80101d4:	f240 726e 	movw	r2, #1902	; 0x76e
 80101d8:	4913      	ldr	r1, [pc, #76]	; (8010228 <dhcp_delete_msg+0x7c>)
 80101da:	4812      	ldr	r0, [pc, #72]	; (8010224 <dhcp_delete_msg+0x78>)
 80101dc:	f005 fa94 	bl	8015708 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	691b      	ldr	r3, [r3, #16]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d106      	bne.n	80101f6 <dhcp_delete_msg+0x4a>
 80101e8:	4b0c      	ldr	r3, [pc, #48]	; (801021c <dhcp_delete_msg+0x70>)
 80101ea:	f240 726f 	movw	r2, #1903	; 0x76f
 80101ee:	490f      	ldr	r1, [pc, #60]	; (801022c <dhcp_delete_msg+0x80>)
 80101f0:	480c      	ldr	r0, [pc, #48]	; (8010224 <dhcp_delete_msg+0x78>)
 80101f2:	f005 fa89 	bl	8015708 <iprintf>
  if (dhcp->p_out != NULL) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d004      	beq.n	8010208 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	4618      	mov	r0, r3
 8010204:	f7f8 fea8 	bl	8008f58 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	611a      	str	r2, [r3, #16]
}
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	08017ab0 	.word	0x08017ab0
 8010220:	08017eb0 	.word	0x08017eb0
 8010224:	08017b10 	.word	0x08017b10
 8010228:	08017ed0 	.word	0x08017ed0
 801022c:	08017ef8 	.word	0x08017ef8

08010230 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d107      	bne.n	801024e <dhcp_option_trailer+0x1e>
 801023e:	4b24      	ldr	r3, [pc, #144]	; (80102d0 <dhcp_option_trailer+0xa0>)
 8010240:	f240 7282 	movw	r2, #1922	; 0x782
 8010244:	4923      	ldr	r1, [pc, #140]	; (80102d4 <dhcp_option_trailer+0xa4>)
 8010246:	4824      	ldr	r0, [pc, #144]	; (80102d8 <dhcp_option_trailer+0xa8>)
 8010248:	f005 fa5e 	bl	8015708 <iprintf>
 801024c:	e03c      	b.n	80102c8 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <dhcp_option_trailer+0x34>
 8010256:	4b1e      	ldr	r3, [pc, #120]	; (80102d0 <dhcp_option_trailer+0xa0>)
 8010258:	f240 7283 	movw	r2, #1923	; 0x783
 801025c:	491f      	ldr	r1, [pc, #124]	; (80102dc <dhcp_option_trailer+0xac>)
 801025e:	481e      	ldr	r0, [pc, #120]	; (80102d8 <dhcp_option_trailer+0xa8>)
 8010260:	f005 fa52 	bl	8015708 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	8a9b      	ldrh	r3, [r3, #20]
 8010268:	2b43      	cmp	r3, #67	; 0x43
 801026a:	d906      	bls.n	801027a <dhcp_option_trailer+0x4a>
 801026c:	4b18      	ldr	r3, [pc, #96]	; (80102d0 <dhcp_option_trailer+0xa0>)
 801026e:	f240 7284 	movw	r2, #1924	; 0x784
 8010272:	491b      	ldr	r1, [pc, #108]	; (80102e0 <dhcp_option_trailer+0xb0>)
 8010274:	4818      	ldr	r0, [pc, #96]	; (80102d8 <dhcp_option_trailer+0xa8>)
 8010276:	f005 fa47 	bl	8015708 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	691a      	ldr	r2, [r3, #16]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	8a9b      	ldrh	r3, [r3, #20]
 8010282:	1c59      	adds	r1, r3, #1
 8010284:	b288      	uxth	r0, r1
 8010286:	6879      	ldr	r1, [r7, #4]
 8010288:	8288      	strh	r0, [r1, #20]
 801028a:	4413      	add	r3, r2
 801028c:	22ff      	movs	r2, #255	; 0xff
 801028e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8010292:	e00b      	b.n	80102ac <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	691a      	ldr	r2, [r3, #16]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	8a9b      	ldrh	r3, [r3, #20]
 801029c:	1c59      	adds	r1, r3, #1
 801029e:	b288      	uxth	r0, r1
 80102a0:	6879      	ldr	r1, [r7, #4]
 80102a2:	8288      	strh	r0, [r1, #20]
 80102a4:	4413      	add	r3, r2
 80102a6:	2200      	movs	r2, #0
 80102a8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	8a9b      	ldrh	r3, [r3, #20]
 80102b0:	2b43      	cmp	r3, #67	; 0x43
 80102b2:	d905      	bls.n	80102c0 <dhcp_option_trailer+0x90>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	8a9b      	ldrh	r3, [r3, #20]
 80102b8:	f003 0303 	and.w	r3, r3, #3
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d003      	beq.n	80102c8 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80102c4:	2b43      	cmp	r3, #67	; 0x43
 80102c6:	d9e5      	bls.n	8010294 <dhcp_option_trailer+0x64>
  }
}
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	08017ab0 	.word	0x08017ab0
 80102d4:	08017f20 	.word	0x08017f20
 80102d8:	08017b10 	.word	0x08017b10
 80102dc:	08017f44 	.word	0x08017f44
 80102e0:	08017f70 	.word	0x08017f70

080102e4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d017      	beq.n	8010322 <dhcp_supplied_address+0x3e>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d013      	beq.n	8010322 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6a1b      	ldr	r3, [r3, #32]
 80102fe:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	7a5b      	ldrb	r3, [r3, #9]
 8010304:	2b0a      	cmp	r3, #10
 8010306:	d007      	beq.n	8010318 <dhcp_supplied_address+0x34>
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	7a5b      	ldrb	r3, [r3, #9]
 801030c:	2b05      	cmp	r3, #5
 801030e:	d003      	beq.n	8010318 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010314:	2b04      	cmp	r3, #4
 8010316:	d101      	bne.n	801031c <dhcp_supplied_address+0x38>
 8010318:	2301      	movs	r3, #1
 801031a:	e000      	b.n	801031e <dhcp_supplied_address+0x3a>
 801031c:	2300      	movs	r3, #0
 801031e:	b2db      	uxtb	r3, r3
 8010320:	e000      	b.n	8010324 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3714      	adds	r7, #20
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010338:	4915      	ldr	r1, [pc, #84]	; (8010390 <etharp_free_entry+0x60>)
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	4613      	mov	r3, r2
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	4413      	add	r3, r2
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	440b      	add	r3, r1
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d013      	beq.n	8010374 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801034c:	4910      	ldr	r1, [pc, #64]	; (8010390 <etharp_free_entry+0x60>)
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	4613      	mov	r3, r2
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	4413      	add	r3, r2
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	440b      	add	r3, r1
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4618      	mov	r0, r3
 801035e:	f7f8 fdfb 	bl	8008f58 <pbuf_free>
    arp_table[i].q = NULL;
 8010362:	490b      	ldr	r1, [pc, #44]	; (8010390 <etharp_free_entry+0x60>)
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	4613      	mov	r3, r2
 8010368:	005b      	lsls	r3, r3, #1
 801036a:	4413      	add	r3, r2
 801036c:	00db      	lsls	r3, r3, #3
 801036e:	440b      	add	r3, r1
 8010370:	2200      	movs	r2, #0
 8010372:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010374:	4906      	ldr	r1, [pc, #24]	; (8010390 <etharp_free_entry+0x60>)
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	4613      	mov	r3, r2
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	4413      	add	r3, r2
 801037e:	00db      	lsls	r3, r3, #3
 8010380:	440b      	add	r3, r1
 8010382:	3314      	adds	r3, #20
 8010384:	2200      	movs	r2, #0
 8010386:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	2000028c 	.word	0x2000028c

08010394 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801039a:	2300      	movs	r3, #0
 801039c:	71fb      	strb	r3, [r7, #7]
 801039e:	e096      	b.n	80104ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80103a0:	79fa      	ldrb	r2, [r7, #7]
 80103a2:	494f      	ldr	r1, [pc, #316]	; (80104e0 <etharp_tmr+0x14c>)
 80103a4:	4613      	mov	r3, r2
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4413      	add	r3, r2
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	440b      	add	r3, r1
 80103ae:	3314      	adds	r3, #20
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80103b4:	79bb      	ldrb	r3, [r7, #6]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f000 8086 	beq.w	80104c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80103bc:	79fa      	ldrb	r2, [r7, #7]
 80103be:	4948      	ldr	r1, [pc, #288]	; (80104e0 <etharp_tmr+0x14c>)
 80103c0:	4613      	mov	r3, r2
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	4413      	add	r3, r2
 80103c6:	00db      	lsls	r3, r3, #3
 80103c8:	440b      	add	r3, r1
 80103ca:	3312      	adds	r3, #18
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	3301      	adds	r3, #1
 80103d0:	b298      	uxth	r0, r3
 80103d2:	4943      	ldr	r1, [pc, #268]	; (80104e0 <etharp_tmr+0x14c>)
 80103d4:	4613      	mov	r3, r2
 80103d6:	005b      	lsls	r3, r3, #1
 80103d8:	4413      	add	r3, r2
 80103da:	00db      	lsls	r3, r3, #3
 80103dc:	440b      	add	r3, r1
 80103de:	3312      	adds	r3, #18
 80103e0:	4602      	mov	r2, r0
 80103e2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80103e4:	79fa      	ldrb	r2, [r7, #7]
 80103e6:	493e      	ldr	r1, [pc, #248]	; (80104e0 <etharp_tmr+0x14c>)
 80103e8:	4613      	mov	r3, r2
 80103ea:	005b      	lsls	r3, r3, #1
 80103ec:	4413      	add	r3, r2
 80103ee:	00db      	lsls	r3, r3, #3
 80103f0:	440b      	add	r3, r1
 80103f2:	3312      	adds	r3, #18
 80103f4:	881b      	ldrh	r3, [r3, #0]
 80103f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80103fa:	d215      	bcs.n	8010428 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80103fc:	79fa      	ldrb	r2, [r7, #7]
 80103fe:	4938      	ldr	r1, [pc, #224]	; (80104e0 <etharp_tmr+0x14c>)
 8010400:	4613      	mov	r3, r2
 8010402:	005b      	lsls	r3, r3, #1
 8010404:	4413      	add	r3, r2
 8010406:	00db      	lsls	r3, r3, #3
 8010408:	440b      	add	r3, r1
 801040a:	3314      	adds	r3, #20
 801040c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801040e:	2b01      	cmp	r3, #1
 8010410:	d10f      	bne.n	8010432 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010412:	79fa      	ldrb	r2, [r7, #7]
 8010414:	4932      	ldr	r1, [pc, #200]	; (80104e0 <etharp_tmr+0x14c>)
 8010416:	4613      	mov	r3, r2
 8010418:	005b      	lsls	r3, r3, #1
 801041a:	4413      	add	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	440b      	add	r3, r1
 8010420:	3312      	adds	r3, #18
 8010422:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010424:	2b04      	cmp	r3, #4
 8010426:	d904      	bls.n	8010432 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010428:	79fb      	ldrb	r3, [r7, #7]
 801042a:	4618      	mov	r0, r3
 801042c:	f7ff ff80 	bl	8010330 <etharp_free_entry>
 8010430:	e04a      	b.n	80104c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010432:	79fa      	ldrb	r2, [r7, #7]
 8010434:	492a      	ldr	r1, [pc, #168]	; (80104e0 <etharp_tmr+0x14c>)
 8010436:	4613      	mov	r3, r2
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	4413      	add	r3, r2
 801043c:	00db      	lsls	r3, r3, #3
 801043e:	440b      	add	r3, r1
 8010440:	3314      	adds	r3, #20
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2b03      	cmp	r3, #3
 8010446:	d10a      	bne.n	801045e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010448:	79fa      	ldrb	r2, [r7, #7]
 801044a:	4925      	ldr	r1, [pc, #148]	; (80104e0 <etharp_tmr+0x14c>)
 801044c:	4613      	mov	r3, r2
 801044e:	005b      	lsls	r3, r3, #1
 8010450:	4413      	add	r3, r2
 8010452:	00db      	lsls	r3, r3, #3
 8010454:	440b      	add	r3, r1
 8010456:	3314      	adds	r3, #20
 8010458:	2204      	movs	r2, #4
 801045a:	701a      	strb	r2, [r3, #0]
 801045c:	e034      	b.n	80104c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801045e:	79fa      	ldrb	r2, [r7, #7]
 8010460:	491f      	ldr	r1, [pc, #124]	; (80104e0 <etharp_tmr+0x14c>)
 8010462:	4613      	mov	r3, r2
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	4413      	add	r3, r2
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	440b      	add	r3, r1
 801046c:	3314      	adds	r3, #20
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	2b04      	cmp	r3, #4
 8010472:	d10a      	bne.n	801048a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010474:	79fa      	ldrb	r2, [r7, #7]
 8010476:	491a      	ldr	r1, [pc, #104]	; (80104e0 <etharp_tmr+0x14c>)
 8010478:	4613      	mov	r3, r2
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	4413      	add	r3, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	440b      	add	r3, r1
 8010482:	3314      	adds	r3, #20
 8010484:	2202      	movs	r2, #2
 8010486:	701a      	strb	r2, [r3, #0]
 8010488:	e01e      	b.n	80104c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801048a:	79fa      	ldrb	r2, [r7, #7]
 801048c:	4914      	ldr	r1, [pc, #80]	; (80104e0 <etharp_tmr+0x14c>)
 801048e:	4613      	mov	r3, r2
 8010490:	005b      	lsls	r3, r3, #1
 8010492:	4413      	add	r3, r2
 8010494:	00db      	lsls	r3, r3, #3
 8010496:	440b      	add	r3, r1
 8010498:	3314      	adds	r3, #20
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d113      	bne.n	80104c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80104a0:	79fa      	ldrb	r2, [r7, #7]
 80104a2:	490f      	ldr	r1, [pc, #60]	; (80104e0 <etharp_tmr+0x14c>)
 80104a4:	4613      	mov	r3, r2
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	4413      	add	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	440b      	add	r3, r1
 80104ae:	3308      	adds	r3, #8
 80104b0:	6818      	ldr	r0, [r3, #0]
 80104b2:	79fa      	ldrb	r2, [r7, #7]
 80104b4:	4613      	mov	r3, r2
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	4413      	add	r3, r2
 80104ba:	00db      	lsls	r3, r3, #3
 80104bc:	4a08      	ldr	r2, [pc, #32]	; (80104e0 <etharp_tmr+0x14c>)
 80104be:	4413      	add	r3, r2
 80104c0:	3304      	adds	r3, #4
 80104c2:	4619      	mov	r1, r3
 80104c4:	f000 fe3c 	bl	8011140 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	3301      	adds	r3, #1
 80104cc:	71fb      	strb	r3, [r7, #7]
 80104ce:	79fb      	ldrb	r3, [r7, #7]
 80104d0:	2b09      	cmp	r3, #9
 80104d2:	f67f af65 	bls.w	80103a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80104d6:	bf00      	nop
 80104d8:	3708      	adds	r7, #8
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	2000028c 	.word	0x2000028c

080104e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b088      	sub	sp, #32
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	460b      	mov	r3, r1
 80104ee:	607a      	str	r2, [r7, #4]
 80104f0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80104f2:	230a      	movs	r3, #10
 80104f4:	77fb      	strb	r3, [r7, #31]
 80104f6:	230a      	movs	r3, #10
 80104f8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80104fa:	230a      	movs	r3, #10
 80104fc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80104fe:	2300      	movs	r3, #0
 8010500:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8010502:	230a      	movs	r3, #10
 8010504:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	833b      	strh	r3, [r7, #24]
 801050a:	2300      	movs	r3, #0
 801050c:	82fb      	strh	r3, [r7, #22]
 801050e:	2300      	movs	r3, #0
 8010510:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010512:	2300      	movs	r3, #0
 8010514:	773b      	strb	r3, [r7, #28]
 8010516:	e093      	b.n	8010640 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8010518:	7f3a      	ldrb	r2, [r7, #28]
 801051a:	4990      	ldr	r1, [pc, #576]	; (801075c <etharp_find_entry+0x278>)
 801051c:	4613      	mov	r3, r2
 801051e:	005b      	lsls	r3, r3, #1
 8010520:	4413      	add	r3, r2
 8010522:	00db      	lsls	r3, r3, #3
 8010524:	440b      	add	r3, r1
 8010526:	3314      	adds	r3, #20
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801052c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010530:	2b0a      	cmp	r3, #10
 8010532:	d105      	bne.n	8010540 <etharp_find_entry+0x5c>
 8010534:	7cfb      	ldrb	r3, [r7, #19]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d102      	bne.n	8010540 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801053a:	7f3b      	ldrb	r3, [r7, #28]
 801053c:	777b      	strb	r3, [r7, #29]
 801053e:	e07c      	b.n	801063a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010540:	7cfb      	ldrb	r3, [r7, #19]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d079      	beq.n	801063a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010546:	7cfb      	ldrb	r3, [r7, #19]
 8010548:	2b01      	cmp	r3, #1
 801054a:	d009      	beq.n	8010560 <etharp_find_entry+0x7c>
 801054c:	7cfb      	ldrb	r3, [r7, #19]
 801054e:	2b01      	cmp	r3, #1
 8010550:	d806      	bhi.n	8010560 <etharp_find_entry+0x7c>
 8010552:	4b83      	ldr	r3, [pc, #524]	; (8010760 <etharp_find_entry+0x27c>)
 8010554:	f44f 7293 	mov.w	r2, #294	; 0x126
 8010558:	4982      	ldr	r1, [pc, #520]	; (8010764 <etharp_find_entry+0x280>)
 801055a:	4883      	ldr	r0, [pc, #524]	; (8010768 <etharp_find_entry+0x284>)
 801055c:	f005 f8d4 	bl	8015708 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d00f      	beq.n	8010586 <etharp_find_entry+0xa2>
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6819      	ldr	r1, [r3, #0]
 801056a:	7f3a      	ldrb	r2, [r7, #28]
 801056c:	487b      	ldr	r0, [pc, #492]	; (801075c <etharp_find_entry+0x278>)
 801056e:	4613      	mov	r3, r2
 8010570:	005b      	lsls	r3, r3, #1
 8010572:	4413      	add	r3, r2
 8010574:	00db      	lsls	r3, r3, #3
 8010576:	4403      	add	r3, r0
 8010578:	3304      	adds	r3, #4
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4299      	cmp	r1, r3
 801057e:	d102      	bne.n	8010586 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010580:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010584:	e0e5      	b.n	8010752 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010586:	7cfb      	ldrb	r3, [r7, #19]
 8010588:	2b01      	cmp	r3, #1
 801058a:	d13b      	bne.n	8010604 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801058c:	7f3a      	ldrb	r2, [r7, #28]
 801058e:	4973      	ldr	r1, [pc, #460]	; (801075c <etharp_find_entry+0x278>)
 8010590:	4613      	mov	r3, r2
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	4413      	add	r3, r2
 8010596:	00db      	lsls	r3, r3, #3
 8010598:	440b      	add	r3, r1
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d018      	beq.n	80105d2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80105a0:	7f3a      	ldrb	r2, [r7, #28]
 80105a2:	496e      	ldr	r1, [pc, #440]	; (801075c <etharp_find_entry+0x278>)
 80105a4:	4613      	mov	r3, r2
 80105a6:	005b      	lsls	r3, r3, #1
 80105a8:	4413      	add	r3, r2
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	440b      	add	r3, r1
 80105ae:	3312      	adds	r3, #18
 80105b0:	881b      	ldrh	r3, [r3, #0]
 80105b2:	8b3a      	ldrh	r2, [r7, #24]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d840      	bhi.n	801063a <etharp_find_entry+0x156>
            old_queue = i;
 80105b8:	7f3b      	ldrb	r3, [r7, #28]
 80105ba:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80105bc:	7f3a      	ldrb	r2, [r7, #28]
 80105be:	4967      	ldr	r1, [pc, #412]	; (801075c <etharp_find_entry+0x278>)
 80105c0:	4613      	mov	r3, r2
 80105c2:	005b      	lsls	r3, r3, #1
 80105c4:	4413      	add	r3, r2
 80105c6:	00db      	lsls	r3, r3, #3
 80105c8:	440b      	add	r3, r1
 80105ca:	3312      	adds	r3, #18
 80105cc:	881b      	ldrh	r3, [r3, #0]
 80105ce:	833b      	strh	r3, [r7, #24]
 80105d0:	e033      	b.n	801063a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80105d2:	7f3a      	ldrb	r2, [r7, #28]
 80105d4:	4961      	ldr	r1, [pc, #388]	; (801075c <etharp_find_entry+0x278>)
 80105d6:	4613      	mov	r3, r2
 80105d8:	005b      	lsls	r3, r3, #1
 80105da:	4413      	add	r3, r2
 80105dc:	00db      	lsls	r3, r3, #3
 80105de:	440b      	add	r3, r1
 80105e0:	3312      	adds	r3, #18
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	8afa      	ldrh	r2, [r7, #22]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d827      	bhi.n	801063a <etharp_find_entry+0x156>
            old_pending = i;
 80105ea:	7f3b      	ldrb	r3, [r7, #28]
 80105ec:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80105ee:	7f3a      	ldrb	r2, [r7, #28]
 80105f0:	495a      	ldr	r1, [pc, #360]	; (801075c <etharp_find_entry+0x278>)
 80105f2:	4613      	mov	r3, r2
 80105f4:	005b      	lsls	r3, r3, #1
 80105f6:	4413      	add	r3, r2
 80105f8:	00db      	lsls	r3, r3, #3
 80105fa:	440b      	add	r3, r1
 80105fc:	3312      	adds	r3, #18
 80105fe:	881b      	ldrh	r3, [r3, #0]
 8010600:	82fb      	strh	r3, [r7, #22]
 8010602:	e01a      	b.n	801063a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010604:	7cfb      	ldrb	r3, [r7, #19]
 8010606:	2b01      	cmp	r3, #1
 8010608:	d917      	bls.n	801063a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801060a:	7f3a      	ldrb	r2, [r7, #28]
 801060c:	4953      	ldr	r1, [pc, #332]	; (801075c <etharp_find_entry+0x278>)
 801060e:	4613      	mov	r3, r2
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	4413      	add	r3, r2
 8010614:	00db      	lsls	r3, r3, #3
 8010616:	440b      	add	r3, r1
 8010618:	3312      	adds	r3, #18
 801061a:	881b      	ldrh	r3, [r3, #0]
 801061c:	8aba      	ldrh	r2, [r7, #20]
 801061e:	429a      	cmp	r2, r3
 8010620:	d80b      	bhi.n	801063a <etharp_find_entry+0x156>
            old_stable = i;
 8010622:	7f3b      	ldrb	r3, [r7, #28]
 8010624:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8010626:	7f3a      	ldrb	r2, [r7, #28]
 8010628:	494c      	ldr	r1, [pc, #304]	; (801075c <etharp_find_entry+0x278>)
 801062a:	4613      	mov	r3, r2
 801062c:	005b      	lsls	r3, r3, #1
 801062e:	4413      	add	r3, r2
 8010630:	00db      	lsls	r3, r3, #3
 8010632:	440b      	add	r3, r1
 8010634:	3312      	adds	r3, #18
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801063a:	7f3b      	ldrb	r3, [r7, #28]
 801063c:	3301      	adds	r3, #1
 801063e:	773b      	strb	r3, [r7, #28]
 8010640:	7f3b      	ldrb	r3, [r7, #28]
 8010642:	2b09      	cmp	r3, #9
 8010644:	f67f af68 	bls.w	8010518 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010648:	7afb      	ldrb	r3, [r7, #11]
 801064a:	f003 0302 	and.w	r3, r3, #2
 801064e:	2b00      	cmp	r3, #0
 8010650:	d108      	bne.n	8010664 <etharp_find_entry+0x180>
 8010652:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010656:	2b0a      	cmp	r3, #10
 8010658:	d107      	bne.n	801066a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801065a:	7afb      	ldrb	r3, [r7, #11]
 801065c:	f003 0301 	and.w	r3, r3, #1
 8010660:	2b00      	cmp	r3, #0
 8010662:	d102      	bne.n	801066a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010668:	e073      	b.n	8010752 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801066a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801066e:	2b09      	cmp	r3, #9
 8010670:	dc02      	bgt.n	8010678 <etharp_find_entry+0x194>
    i = empty;
 8010672:	7f7b      	ldrb	r3, [r7, #29]
 8010674:	773b      	strb	r3, [r7, #28]
 8010676:	e036      	b.n	80106e6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010678:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801067c:	2b09      	cmp	r3, #9
 801067e:	dc13      	bgt.n	80106a8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8010680:	7fbb      	ldrb	r3, [r7, #30]
 8010682:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010684:	7f3a      	ldrb	r2, [r7, #28]
 8010686:	4935      	ldr	r1, [pc, #212]	; (801075c <etharp_find_entry+0x278>)
 8010688:	4613      	mov	r3, r2
 801068a:	005b      	lsls	r3, r3, #1
 801068c:	4413      	add	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	440b      	add	r3, r1
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d018      	beq.n	80106ca <etharp_find_entry+0x1e6>
 8010698:	4b31      	ldr	r3, [pc, #196]	; (8010760 <etharp_find_entry+0x27c>)
 801069a:	f240 126f 	movw	r2, #367	; 0x16f
 801069e:	4933      	ldr	r1, [pc, #204]	; (801076c <etharp_find_entry+0x288>)
 80106a0:	4831      	ldr	r0, [pc, #196]	; (8010768 <etharp_find_entry+0x284>)
 80106a2:	f005 f831 	bl	8015708 <iprintf>
 80106a6:	e010      	b.n	80106ca <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80106a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80106ac:	2b09      	cmp	r3, #9
 80106ae:	dc02      	bgt.n	80106b6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80106b0:	7ffb      	ldrb	r3, [r7, #31]
 80106b2:	773b      	strb	r3, [r7, #28]
 80106b4:	e009      	b.n	80106ca <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80106b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80106ba:	2b09      	cmp	r3, #9
 80106bc:	dc02      	bgt.n	80106c4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80106be:	7efb      	ldrb	r3, [r7, #27]
 80106c0:	773b      	strb	r3, [r7, #28]
 80106c2:	e002      	b.n	80106ca <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80106c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106c8:	e043      	b.n	8010752 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80106ca:	7f3b      	ldrb	r3, [r7, #28]
 80106cc:	2b09      	cmp	r3, #9
 80106ce:	d906      	bls.n	80106de <etharp_find_entry+0x1fa>
 80106d0:	4b23      	ldr	r3, [pc, #140]	; (8010760 <etharp_find_entry+0x27c>)
 80106d2:	f240 1281 	movw	r2, #385	; 0x181
 80106d6:	4926      	ldr	r1, [pc, #152]	; (8010770 <etharp_find_entry+0x28c>)
 80106d8:	4823      	ldr	r0, [pc, #140]	; (8010768 <etharp_find_entry+0x284>)
 80106da:	f005 f815 	bl	8015708 <iprintf>
    etharp_free_entry(i);
 80106de:	7f3b      	ldrb	r3, [r7, #28]
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7ff fe25 	bl	8010330 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80106e6:	7f3b      	ldrb	r3, [r7, #28]
 80106e8:	2b09      	cmp	r3, #9
 80106ea:	d906      	bls.n	80106fa <etharp_find_entry+0x216>
 80106ec:	4b1c      	ldr	r3, [pc, #112]	; (8010760 <etharp_find_entry+0x27c>)
 80106ee:	f240 1285 	movw	r2, #389	; 0x185
 80106f2:	491f      	ldr	r1, [pc, #124]	; (8010770 <etharp_find_entry+0x28c>)
 80106f4:	481c      	ldr	r0, [pc, #112]	; (8010768 <etharp_find_entry+0x284>)
 80106f6:	f005 f807 	bl	8015708 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80106fa:	7f3a      	ldrb	r2, [r7, #28]
 80106fc:	4917      	ldr	r1, [pc, #92]	; (801075c <etharp_find_entry+0x278>)
 80106fe:	4613      	mov	r3, r2
 8010700:	005b      	lsls	r3, r3, #1
 8010702:	4413      	add	r3, r2
 8010704:	00db      	lsls	r3, r3, #3
 8010706:	440b      	add	r3, r1
 8010708:	3314      	adds	r3, #20
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d006      	beq.n	801071e <etharp_find_entry+0x23a>
 8010710:	4b13      	ldr	r3, [pc, #76]	; (8010760 <etharp_find_entry+0x27c>)
 8010712:	f240 1287 	movw	r2, #391	; 0x187
 8010716:	4917      	ldr	r1, [pc, #92]	; (8010774 <etharp_find_entry+0x290>)
 8010718:	4813      	ldr	r0, [pc, #76]	; (8010768 <etharp_find_entry+0x284>)
 801071a:	f004 fff5 	bl	8015708 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d00a      	beq.n	801073a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010724:	7f3a      	ldrb	r2, [r7, #28]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	6819      	ldr	r1, [r3, #0]
 801072a:	480c      	ldr	r0, [pc, #48]	; (801075c <etharp_find_entry+0x278>)
 801072c:	4613      	mov	r3, r2
 801072e:	005b      	lsls	r3, r3, #1
 8010730:	4413      	add	r3, r2
 8010732:	00db      	lsls	r3, r3, #3
 8010734:	4403      	add	r3, r0
 8010736:	3304      	adds	r3, #4
 8010738:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801073a:	7f3a      	ldrb	r2, [r7, #28]
 801073c:	4907      	ldr	r1, [pc, #28]	; (801075c <etharp_find_entry+0x278>)
 801073e:	4613      	mov	r3, r2
 8010740:	005b      	lsls	r3, r3, #1
 8010742:	4413      	add	r3, r2
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	440b      	add	r3, r1
 8010748:	3312      	adds	r3, #18
 801074a:	2200      	movs	r2, #0
 801074c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801074e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3720      	adds	r7, #32
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	2000028c 	.word	0x2000028c
 8010760:	08017fb0 	.word	0x08017fb0
 8010764:	08017fe8 	.word	0x08017fe8
 8010768:	08018028 	.word	0x08018028
 801076c:	08018050 	.word	0x08018050
 8010770:	08018068 	.word	0x08018068
 8010774:	0801807c 	.word	0x0801807c

08010778 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b088      	sub	sp, #32
 801077c:	af02      	add	r7, sp, #8
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
 8010784:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801078c:	2b06      	cmp	r3, #6
 801078e:	d006      	beq.n	801079e <etharp_update_arp_entry+0x26>
 8010790:	4b48      	ldr	r3, [pc, #288]	; (80108b4 <etharp_update_arp_entry+0x13c>)
 8010792:	f240 12ab 	movw	r2, #427	; 0x1ab
 8010796:	4948      	ldr	r1, [pc, #288]	; (80108b8 <etharp_update_arp_entry+0x140>)
 8010798:	4848      	ldr	r0, [pc, #288]	; (80108bc <etharp_update_arp_entry+0x144>)
 801079a:	f004 ffb5 	bl	8015708 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d012      	beq.n	80107ca <etharp_update_arp_entry+0x52>
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00e      	beq.n	80107ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	68f9      	ldr	r1, [r7, #12]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f001 f8fc 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 80107b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d105      	bne.n	80107ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80107c6:	2be0      	cmp	r3, #224	; 0xe0
 80107c8:	d102      	bne.n	80107d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80107ca:	f06f 030f 	mvn.w	r3, #15
 80107ce:	e06c      	b.n	80108aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80107d0:	78fb      	ldrb	r3, [r7, #3]
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	4619      	mov	r1, r3
 80107d6:	68b8      	ldr	r0, [r7, #8]
 80107d8:	f7ff fe84 	bl	80104e4 <etharp_find_entry>
 80107dc:	4603      	mov	r3, r0
 80107de:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80107e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	da02      	bge.n	80107ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80107e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107ec:	e05d      	b.n	80108aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80107ee:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80107f2:	4933      	ldr	r1, [pc, #204]	; (80108c0 <etharp_update_arp_entry+0x148>)
 80107f4:	4613      	mov	r3, r2
 80107f6:	005b      	lsls	r3, r3, #1
 80107f8:	4413      	add	r3, r2
 80107fa:	00db      	lsls	r3, r3, #3
 80107fc:	440b      	add	r3, r1
 80107fe:	3314      	adds	r3, #20
 8010800:	2202      	movs	r2, #2
 8010802:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010804:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010808:	492d      	ldr	r1, [pc, #180]	; (80108c0 <etharp_update_arp_entry+0x148>)
 801080a:	4613      	mov	r3, r2
 801080c:	005b      	lsls	r3, r3, #1
 801080e:	4413      	add	r3, r2
 8010810:	00db      	lsls	r3, r3, #3
 8010812:	440b      	add	r3, r1
 8010814:	3308      	adds	r3, #8
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801081a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801081e:	4613      	mov	r3, r2
 8010820:	005b      	lsls	r3, r3, #1
 8010822:	4413      	add	r3, r2
 8010824:	00db      	lsls	r3, r3, #3
 8010826:	3308      	adds	r3, #8
 8010828:	4a25      	ldr	r2, [pc, #148]	; (80108c0 <etharp_update_arp_entry+0x148>)
 801082a:	4413      	add	r3, r2
 801082c:	3304      	adds	r3, #4
 801082e:	2206      	movs	r2, #6
 8010830:	6879      	ldr	r1, [r7, #4]
 8010832:	4618      	mov	r0, r3
 8010834:	f004 fead 	bl	8015592 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010838:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801083c:	4920      	ldr	r1, [pc, #128]	; (80108c0 <etharp_update_arp_entry+0x148>)
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	440b      	add	r3, r1
 8010848:	3312      	adds	r3, #18
 801084a:	2200      	movs	r2, #0
 801084c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801084e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010852:	491b      	ldr	r1, [pc, #108]	; (80108c0 <etharp_update_arp_entry+0x148>)
 8010854:	4613      	mov	r3, r2
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	4413      	add	r3, r2
 801085a:	00db      	lsls	r3, r3, #3
 801085c:	440b      	add	r3, r1
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d021      	beq.n	80108a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010864:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010868:	4915      	ldr	r1, [pc, #84]	; (80108c0 <etharp_update_arp_entry+0x148>)
 801086a:	4613      	mov	r3, r2
 801086c:	005b      	lsls	r3, r3, #1
 801086e:	4413      	add	r3, r2
 8010870:	00db      	lsls	r3, r3, #3
 8010872:	440b      	add	r3, r1
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010878:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801087c:	4910      	ldr	r1, [pc, #64]	; (80108c0 <etharp_update_arp_entry+0x148>)
 801087e:	4613      	mov	r3, r2
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	4413      	add	r3, r2
 8010884:	00db      	lsls	r3, r3, #3
 8010886:	440b      	add	r3, r1
 8010888:	2200      	movs	r2, #0
 801088a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6939      	ldr	r1, [r7, #16]
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f001 ff29 	bl	80126f4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80108a2:	6938      	ldr	r0, [r7, #16]
 80108a4:	f7f8 fb58 	bl	8008f58 <pbuf_free>
  }
  return ERR_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3718      	adds	r7, #24
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	08017fb0 	.word	0x08017fb0
 80108b8:	080180a8 	.word	0x080180a8
 80108bc:	08018028 	.word	0x08018028
 80108c0:	2000028c 	.word	0x2000028c

080108c4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80108cc:	2300      	movs	r3, #0
 80108ce:	73fb      	strb	r3, [r7, #15]
 80108d0:	e01f      	b.n	8010912 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80108d2:	7bfa      	ldrb	r2, [r7, #15]
 80108d4:	4912      	ldr	r1, [pc, #72]	; (8010920 <etharp_cleanup_netif+0x5c>)
 80108d6:	4613      	mov	r3, r2
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	4413      	add	r3, r2
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	440b      	add	r3, r1
 80108e0:	3314      	adds	r3, #20
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00f      	beq.n	801090c <etharp_cleanup_netif+0x48>
 80108ec:	7bfa      	ldrb	r2, [r7, #15]
 80108ee:	490c      	ldr	r1, [pc, #48]	; (8010920 <etharp_cleanup_netif+0x5c>)
 80108f0:	4613      	mov	r3, r2
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	4413      	add	r3, r2
 80108f6:	00db      	lsls	r3, r3, #3
 80108f8:	440b      	add	r3, r1
 80108fa:	3308      	adds	r3, #8
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	429a      	cmp	r2, r3
 8010902:	d103      	bne.n	801090c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8010904:	7bfb      	ldrb	r3, [r7, #15]
 8010906:	4618      	mov	r0, r3
 8010908:	f7ff fd12 	bl	8010330 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801090c:	7bfb      	ldrb	r3, [r7, #15]
 801090e:	3301      	adds	r3, #1
 8010910:	73fb      	strb	r3, [r7, #15]
 8010912:	7bfb      	ldrb	r3, [r7, #15]
 8010914:	2b09      	cmp	r3, #9
 8010916:	d9dc      	bls.n	80108d2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010918:	bf00      	nop
 801091a:	3710      	adds	r7, #16
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	2000028c 	.word	0x2000028c

08010924 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010924:	b5b0      	push	{r4, r5, r7, lr}
 8010926:	b08a      	sub	sp, #40	; 0x28
 8010928:	af04      	add	r7, sp, #16
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d107      	bne.n	8010944 <etharp_input+0x20>
 8010934:	4b3f      	ldr	r3, [pc, #252]	; (8010a34 <etharp_input+0x110>)
 8010936:	f44f 7222 	mov.w	r2, #648	; 0x288
 801093a:	493f      	ldr	r1, [pc, #252]	; (8010a38 <etharp_input+0x114>)
 801093c:	483f      	ldr	r0, [pc, #252]	; (8010a3c <etharp_input+0x118>)
 801093e:	f004 fee3 	bl	8015708 <iprintf>
 8010942:	e074      	b.n	8010a2e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	b29b      	uxth	r3, r3
 8010950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010954:	d10c      	bne.n	8010970 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801095a:	2b06      	cmp	r3, #6
 801095c:	d108      	bne.n	8010970 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010962:	2b04      	cmp	r3, #4
 8010964:	d104      	bne.n	8010970 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	885b      	ldrh	r3, [r3, #2]
 801096a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801096c:	2b08      	cmp	r3, #8
 801096e:	d003      	beq.n	8010978 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7f8 faf1 	bl	8008f58 <pbuf_free>
    return;
 8010976:	e05a      	b.n	8010a2e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	330e      	adds	r3, #14
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	3318      	adds	r3, #24
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	3304      	adds	r3, #4
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d102      	bne.n	8010998 <etharp_input+0x74>
    for_us = 0;
 8010992:	2300      	movs	r3, #0
 8010994:	75fb      	strb	r3, [r7, #23]
 8010996:	e009      	b.n	80109ac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010998:	68ba      	ldr	r2, [r7, #8]
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	3304      	adds	r3, #4
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	bf0c      	ite	eq
 80109a4:	2301      	moveq	r3, #1
 80109a6:	2300      	movne	r3, #0
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	f103 0208 	add.w	r2, r3, #8
 80109b2:	7dfb      	ldrb	r3, [r7, #23]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d001      	beq.n	80109bc <etharp_input+0x98>
 80109b8:	2301      	movs	r3, #1
 80109ba:	e000      	b.n	80109be <etharp_input+0x9a>
 80109bc:	2302      	movs	r3, #2
 80109be:	f107 010c 	add.w	r1, r7, #12
 80109c2:	6838      	ldr	r0, [r7, #0]
 80109c4:	f7ff fed8 	bl	8010778 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	88db      	ldrh	r3, [r3, #6]
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109d2:	d003      	beq.n	80109dc <etharp_input+0xb8>
 80109d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109d8:	d01e      	beq.n	8010a18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80109da:	e025      	b.n	8010a28 <etharp_input+0x104>
    if (for_us) {
 80109dc:	7dfb      	ldrb	r3, [r7, #23]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d021      	beq.n	8010a26 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	3208      	adds	r2, #8
      etharp_raw(netif,
 80109fc:	2102      	movs	r1, #2
 80109fe:	9103      	str	r1, [sp, #12]
 8010a00:	f107 010c 	add.w	r1, r7, #12
 8010a04:	9102      	str	r1, [sp, #8]
 8010a06:	9201      	str	r2, [sp, #4]
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	462b      	mov	r3, r5
 8010a0c:	4622      	mov	r2, r4
 8010a0e:	4601      	mov	r1, r0
 8010a10:	6838      	ldr	r0, [r7, #0]
 8010a12:	f000 fae7 	bl	8010fe4 <etharp_raw>
    break;
 8010a16:	e006      	b.n	8010a26 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8010a18:	f107 030c 	add.w	r3, r7, #12
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6838      	ldr	r0, [r7, #0]
 8010a20:	f7fe fd32 	bl	800f488 <dhcp_arp_reply>
    break;
 8010a24:	e000      	b.n	8010a28 <etharp_input+0x104>
    break;
 8010a26:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7f8 fa95 	bl	8008f58 <pbuf_free>
}
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bdb0      	pop	{r4, r5, r7, pc}
 8010a34:	08017fb0 	.word	0x08017fb0
 8010a38:	08018100 	.word	0x08018100
 8010a3c:	08018028 	.word	0x08018028

08010a40 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af02      	add	r7, sp, #8
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010a4e:	79fa      	ldrb	r2, [r7, #7]
 8010a50:	4944      	ldr	r1, [pc, #272]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010a52:	4613      	mov	r3, r2
 8010a54:	005b      	lsls	r3, r3, #1
 8010a56:	4413      	add	r3, r2
 8010a58:	00db      	lsls	r3, r3, #3
 8010a5a:	440b      	add	r3, r1
 8010a5c:	3314      	adds	r3, #20
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d806      	bhi.n	8010a72 <etharp_output_to_arp_index+0x32>
 8010a64:	4b40      	ldr	r3, [pc, #256]	; (8010b68 <etharp_output_to_arp_index+0x128>)
 8010a66:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010a6a:	4940      	ldr	r1, [pc, #256]	; (8010b6c <etharp_output_to_arp_index+0x12c>)
 8010a6c:	4840      	ldr	r0, [pc, #256]	; (8010b70 <etharp_output_to_arp_index+0x130>)
 8010a6e:	f004 fe4b 	bl	8015708 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010a72:	79fa      	ldrb	r2, [r7, #7]
 8010a74:	493b      	ldr	r1, [pc, #236]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010a76:	4613      	mov	r3, r2
 8010a78:	005b      	lsls	r3, r3, #1
 8010a7a:	4413      	add	r3, r2
 8010a7c:	00db      	lsls	r3, r3, #3
 8010a7e:	440b      	add	r3, r1
 8010a80:	3314      	adds	r3, #20
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	2b02      	cmp	r3, #2
 8010a86:	d153      	bne.n	8010b30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010a88:	79fa      	ldrb	r2, [r7, #7]
 8010a8a:	4936      	ldr	r1, [pc, #216]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	4413      	add	r3, r2
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	440b      	add	r3, r1
 8010a96:	3312      	adds	r3, #18
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010a9e:	d919      	bls.n	8010ad4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010aa0:	79fa      	ldrb	r2, [r7, #7]
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	005b      	lsls	r3, r3, #1
 8010aa6:	4413      	add	r3, r2
 8010aa8:	00db      	lsls	r3, r3, #3
 8010aaa:	4a2e      	ldr	r2, [pc, #184]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010aac:	4413      	add	r3, r2
 8010aae:	3304      	adds	r3, #4
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f000 fb44 	bl	8011140 <etharp_request>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d138      	bne.n	8010b30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010abe:	79fa      	ldrb	r2, [r7, #7]
 8010ac0:	4928      	ldr	r1, [pc, #160]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	4413      	add	r3, r2
 8010ac8:	00db      	lsls	r3, r3, #3
 8010aca:	440b      	add	r3, r1
 8010acc:	3314      	adds	r3, #20
 8010ace:	2203      	movs	r2, #3
 8010ad0:	701a      	strb	r2, [r3, #0]
 8010ad2:	e02d      	b.n	8010b30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010ad4:	79fa      	ldrb	r2, [r7, #7]
 8010ad6:	4923      	ldr	r1, [pc, #140]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010ad8:	4613      	mov	r3, r2
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	4413      	add	r3, r2
 8010ade:	00db      	lsls	r3, r3, #3
 8010ae0:	440b      	add	r3, r1
 8010ae2:	3312      	adds	r3, #18
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010aea:	d321      	bcc.n	8010b30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010aec:	79fa      	ldrb	r2, [r7, #7]
 8010aee:	4613      	mov	r3, r2
 8010af0:	005b      	lsls	r3, r3, #1
 8010af2:	4413      	add	r3, r2
 8010af4:	00db      	lsls	r3, r3, #3
 8010af6:	4a1b      	ldr	r2, [pc, #108]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010af8:	4413      	add	r3, r2
 8010afa:	1d19      	adds	r1, r3, #4
 8010afc:	79fa      	ldrb	r2, [r7, #7]
 8010afe:	4613      	mov	r3, r2
 8010b00:	005b      	lsls	r3, r3, #1
 8010b02:	4413      	add	r3, r2
 8010b04:	00db      	lsls	r3, r3, #3
 8010b06:	3308      	adds	r3, #8
 8010b08:	4a16      	ldr	r2, [pc, #88]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010b0a:	4413      	add	r3, r2
 8010b0c:	3304      	adds	r3, #4
 8010b0e:	461a      	mov	r2, r3
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f000 faf3 	bl	80110fc <etharp_request_dst>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d109      	bne.n	8010b30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010b1c:	79fa      	ldrb	r2, [r7, #7]
 8010b1e:	4911      	ldr	r1, [pc, #68]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010b20:	4613      	mov	r3, r2
 8010b22:	005b      	lsls	r3, r3, #1
 8010b24:	4413      	add	r3, r2
 8010b26:	00db      	lsls	r3, r3, #3
 8010b28:	440b      	add	r3, r1
 8010b2a:	3314      	adds	r3, #20
 8010b2c:	2203      	movs	r2, #3
 8010b2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8010b36:	79fa      	ldrb	r2, [r7, #7]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	4413      	add	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	3308      	adds	r3, #8
 8010b42:	4a08      	ldr	r2, [pc, #32]	; (8010b64 <etharp_output_to_arp_index+0x124>)
 8010b44:	4413      	add	r3, r2
 8010b46:	1d1a      	adds	r2, r3, #4
 8010b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b4c:	9300      	str	r3, [sp, #0]
 8010b4e:	4613      	mov	r3, r2
 8010b50:	460a      	mov	r2, r1
 8010b52:	68b9      	ldr	r1, [r7, #8]
 8010b54:	68f8      	ldr	r0, [r7, #12]
 8010b56:	f001 fdcd 	bl	80126f4 <ethernet_output>
 8010b5a:	4603      	mov	r3, r0
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3710      	adds	r7, #16
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	2000028c 	.word	0x2000028c
 8010b68:	08017fb0 	.word	0x08017fb0
 8010b6c:	08018120 	.word	0x08018120
 8010b70:	08018028 	.word	0x08018028

08010b74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b08a      	sub	sp, #40	; 0x28
 8010b78:	af02      	add	r7, sp, #8
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <etharp_output+0x24>
 8010b8a:	4b69      	ldr	r3, [pc, #420]	; (8010d30 <etharp_output+0x1bc>)
 8010b8c:	f240 321b 	movw	r2, #795	; 0x31b
 8010b90:	4968      	ldr	r1, [pc, #416]	; (8010d34 <etharp_output+0x1c0>)
 8010b92:	4869      	ldr	r0, [pc, #420]	; (8010d38 <etharp_output+0x1c4>)
 8010b94:	f004 fdb8 	bl	8015708 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d106      	bne.n	8010bac <etharp_output+0x38>
 8010b9e:	4b64      	ldr	r3, [pc, #400]	; (8010d30 <etharp_output+0x1bc>)
 8010ba0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010ba4:	4965      	ldr	r1, [pc, #404]	; (8010d3c <etharp_output+0x1c8>)
 8010ba6:	4864      	ldr	r0, [pc, #400]	; (8010d38 <etharp_output+0x1c4>)
 8010ba8:	f004 fdae 	bl	8015708 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d106      	bne.n	8010bc0 <etharp_output+0x4c>
 8010bb2:	4b5f      	ldr	r3, [pc, #380]	; (8010d30 <etharp_output+0x1bc>)
 8010bb4:	f240 321d 	movw	r2, #797	; 0x31d
 8010bb8:	4961      	ldr	r1, [pc, #388]	; (8010d40 <etharp_output+0x1cc>)
 8010bba:	485f      	ldr	r0, [pc, #380]	; (8010d38 <etharp_output+0x1c4>)
 8010bbc:	f004 fda4 	bl	8015708 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68f9      	ldr	r1, [r7, #12]
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f000 fef2 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d002      	beq.n	8010bd8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010bd2:	4b5c      	ldr	r3, [pc, #368]	; (8010d44 <etharp_output+0x1d0>)
 8010bd4:	61fb      	str	r3, [r7, #28]
 8010bd6:	e09b      	b.n	8010d10 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010be0:	2be0      	cmp	r3, #224	; 0xe0
 8010be2:	d118      	bne.n	8010c16 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010be4:	2301      	movs	r3, #1
 8010be6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010be8:	2300      	movs	r3, #0
 8010bea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010bec:	235e      	movs	r3, #94	; 0x5e
 8010bee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	3302      	adds	r3, #2
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3303      	adds	r3, #3
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010c0e:	f107 0310 	add.w	r3, r7, #16
 8010c12:	61fb      	str	r3, [r7, #28]
 8010c14:	e07c      	b.n	8010d10 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	3304      	adds	r3, #4
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	405a      	eors	r2, r3
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	3308      	adds	r3, #8
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	4013      	ands	r3, r2
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d012      	beq.n	8010c54 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010c34:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	d00b      	beq.n	8010c54 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	330c      	adds	r3, #12
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d003      	beq.n	8010c4e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	330c      	adds	r3, #12
 8010c4a:	61bb      	str	r3, [r7, #24]
 8010c4c:	e002      	b.n	8010c54 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010c4e:	f06f 0303 	mvn.w	r3, #3
 8010c52:	e069      	b.n	8010d28 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010c54:	4b3c      	ldr	r3, [pc, #240]	; (8010d48 <etharp_output+0x1d4>)
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	4619      	mov	r1, r3
 8010c5a:	4a3c      	ldr	r2, [pc, #240]	; (8010d4c <etharp_output+0x1d8>)
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	005b      	lsls	r3, r3, #1
 8010c60:	440b      	add	r3, r1
 8010c62:	00db      	lsls	r3, r3, #3
 8010c64:	4413      	add	r3, r2
 8010c66:	3314      	adds	r3, #20
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d917      	bls.n	8010c9e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	4b35      	ldr	r3, [pc, #212]	; (8010d48 <etharp_output+0x1d4>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	4618      	mov	r0, r3
 8010c78:	4934      	ldr	r1, [pc, #208]	; (8010d4c <etharp_output+0x1d8>)
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	005b      	lsls	r3, r3, #1
 8010c7e:	4403      	add	r3, r0
 8010c80:	00db      	lsls	r3, r3, #3
 8010c82:	440b      	add	r3, r1
 8010c84:	3304      	adds	r3, #4
 8010c86:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d108      	bne.n	8010c9e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010c8c:	4b2e      	ldr	r3, [pc, #184]	; (8010d48 <etharp_output+0x1d4>)
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	461a      	mov	r2, r3
 8010c92:	68b9      	ldr	r1, [r7, #8]
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f7ff fed3 	bl	8010a40 <etharp_output_to_arp_index>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	e044      	b.n	8010d28 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	75fb      	strb	r3, [r7, #23]
 8010ca2:	e02a      	b.n	8010cfa <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010ca4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010ca8:	4928      	ldr	r1, [pc, #160]	; (8010d4c <etharp_output+0x1d8>)
 8010caa:	4613      	mov	r3, r2
 8010cac:	005b      	lsls	r3, r3, #1
 8010cae:	4413      	add	r3, r2
 8010cb0:	00db      	lsls	r3, r3, #3
 8010cb2:	440b      	add	r3, r1
 8010cb4:	3314      	adds	r3, #20
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d918      	bls.n	8010cee <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	6819      	ldr	r1, [r3, #0]
 8010cc0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010cc4:	4821      	ldr	r0, [pc, #132]	; (8010d4c <etharp_output+0x1d8>)
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	005b      	lsls	r3, r3, #1
 8010cca:	4413      	add	r3, r2
 8010ccc:	00db      	lsls	r3, r3, #3
 8010cce:	4403      	add	r3, r0
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010cd4:	4299      	cmp	r1, r3
 8010cd6:	d10a      	bne.n	8010cee <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010cd8:	7dfa      	ldrb	r2, [r7, #23]
 8010cda:	4b1b      	ldr	r3, [pc, #108]	; (8010d48 <etharp_output+0x1d4>)
 8010cdc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010cde:	7dfb      	ldrb	r3, [r7, #23]
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	68b9      	ldr	r1, [r7, #8]
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	f7ff feab 	bl	8010a40 <etharp_output_to_arp_index>
 8010cea:	4603      	mov	r3, r0
 8010cec:	e01c      	b.n	8010d28 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	75fb      	strb	r3, [r7, #23]
 8010cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cfe:	2b09      	cmp	r3, #9
 8010d00:	ddd0      	ble.n	8010ca4 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	69b9      	ldr	r1, [r7, #24]
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f000 f822 	bl	8010d50 <etharp_query>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	e00b      	b.n	8010d28 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d1a:	9300      	str	r3, [sp, #0]
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	68b9      	ldr	r1, [r7, #8]
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f001 fce7 	bl	80126f4 <ethernet_output>
 8010d26:	4603      	mov	r3, r0
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3720      	adds	r7, #32
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	08017fb0 	.word	0x08017fb0
 8010d34:	08018100 	.word	0x08018100
 8010d38:	08018028 	.word	0x08018028
 8010d3c:	08018150 	.word	0x08018150
 8010d40:	080180f0 	.word	0x080180f0
 8010d44:	080188b4 	.word	0x080188b4
 8010d48:	2000037c 	.word	0x2000037c
 8010d4c:	2000028c 	.word	0x2000028c

08010d50 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b08c      	sub	sp, #48	; 0x30
 8010d54:	af02      	add	r7, sp, #8
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	3329      	adds	r3, #41	; 0x29
 8010d60:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010d62:	23ff      	movs	r3, #255	; 0xff
 8010d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	68f9      	ldr	r1, [r7, #12]
 8010d72:	4618      	mov	r0, r3
 8010d74:	f000 fe1c 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d10c      	bne.n	8010d98 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d86:	2be0      	cmp	r3, #224	; 0xe0
 8010d88:	d006      	beq.n	8010d98 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d003      	beq.n	8010d98 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d102      	bne.n	8010d9e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d98:	f06f 030f 	mvn.w	r3, #15
 8010d9c:	e10f      	b.n	8010fbe <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	2101      	movs	r1, #1
 8010da2:	68b8      	ldr	r0, [r7, #8]
 8010da4:	f7ff fb9e 	bl	80104e4 <etharp_find_entry>
 8010da8:	4603      	mov	r3, r0
 8010daa:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010dac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	da02      	bge.n	8010dba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010db4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010db8:	e101      	b.n	8010fbe <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010dba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010dbe:	4982      	ldr	r1, [pc, #520]	; (8010fc8 <etharp_query+0x278>)
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	005b      	lsls	r3, r3, #1
 8010dc4:	4413      	add	r3, r2
 8010dc6:	00db      	lsls	r3, r3, #3
 8010dc8:	440b      	add	r3, r1
 8010dca:	3314      	adds	r3, #20
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d117      	bne.n	8010e02 <etharp_query+0xb2>
    is_new_entry = 1;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010dd6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010dda:	497b      	ldr	r1, [pc, #492]	; (8010fc8 <etharp_query+0x278>)
 8010ddc:	4613      	mov	r3, r2
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	4413      	add	r3, r2
 8010de2:	00db      	lsls	r3, r3, #3
 8010de4:	440b      	add	r3, r1
 8010de6:	3314      	adds	r3, #20
 8010de8:	2201      	movs	r2, #1
 8010dea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010dec:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010df0:	4975      	ldr	r1, [pc, #468]	; (8010fc8 <etharp_query+0x278>)
 8010df2:	4613      	mov	r3, r2
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	00db      	lsls	r3, r3, #3
 8010dfa:	440b      	add	r3, r1
 8010dfc:	3308      	adds	r3, #8
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010e02:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e06:	4970      	ldr	r1, [pc, #448]	; (8010fc8 <etharp_query+0x278>)
 8010e08:	4613      	mov	r3, r2
 8010e0a:	005b      	lsls	r3, r3, #1
 8010e0c:	4413      	add	r3, r2
 8010e0e:	00db      	lsls	r3, r3, #3
 8010e10:	440b      	add	r3, r1
 8010e12:	3314      	adds	r3, #20
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d012      	beq.n	8010e40 <etharp_query+0xf0>
 8010e1a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e1e:	496a      	ldr	r1, [pc, #424]	; (8010fc8 <etharp_query+0x278>)
 8010e20:	4613      	mov	r3, r2
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	4413      	add	r3, r2
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	440b      	add	r3, r1
 8010e2a:	3314      	adds	r3, #20
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d806      	bhi.n	8010e40 <etharp_query+0xf0>
 8010e32:	4b66      	ldr	r3, [pc, #408]	; (8010fcc <etharp_query+0x27c>)
 8010e34:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010e38:	4965      	ldr	r1, [pc, #404]	; (8010fd0 <etharp_query+0x280>)
 8010e3a:	4866      	ldr	r0, [pc, #408]	; (8010fd4 <etharp_query+0x284>)
 8010e3c:	f004 fc64 	bl	8015708 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010e40:	6a3b      	ldr	r3, [r7, #32]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d102      	bne.n	8010e4c <etharp_query+0xfc>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d10c      	bne.n	8010e66 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010e4c:	68b9      	ldr	r1, [r7, #8]
 8010e4e:	68f8      	ldr	r0, [r7, #12]
 8010e50:	f000 f976 	bl	8011140 <etharp_request>
 8010e54:	4603      	mov	r3, r0
 8010e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d102      	bne.n	8010e66 <etharp_query+0x116>
      return result;
 8010e60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e64:	e0ab      	b.n	8010fbe <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d106      	bne.n	8010e7a <etharp_query+0x12a>
 8010e6c:	4b57      	ldr	r3, [pc, #348]	; (8010fcc <etharp_query+0x27c>)
 8010e6e:	f240 32db 	movw	r2, #987	; 0x3db
 8010e72:	4959      	ldr	r1, [pc, #356]	; (8010fd8 <etharp_query+0x288>)
 8010e74:	4857      	ldr	r0, [pc, #348]	; (8010fd4 <etharp_query+0x284>)
 8010e76:	f004 fc47 	bl	8015708 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010e7a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e7e:	4952      	ldr	r1, [pc, #328]	; (8010fc8 <etharp_query+0x278>)
 8010e80:	4613      	mov	r3, r2
 8010e82:	005b      	lsls	r3, r3, #1
 8010e84:	4413      	add	r3, r2
 8010e86:	00db      	lsls	r3, r3, #3
 8010e88:	440b      	add	r3, r1
 8010e8a:	3314      	adds	r3, #20
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d919      	bls.n	8010ec6 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8010e92:	7cfa      	ldrb	r2, [r7, #19]
 8010e94:	4b51      	ldr	r3, [pc, #324]	; (8010fdc <etharp_query+0x28c>)
 8010e96:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010e98:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	005b      	lsls	r3, r3, #1
 8010ea0:	4413      	add	r3, r2
 8010ea2:	00db      	lsls	r3, r3, #3
 8010ea4:	3308      	adds	r3, #8
 8010ea6:	4a48      	ldr	r2, [pc, #288]	; (8010fc8 <etharp_query+0x278>)
 8010ea8:	4413      	add	r3, r2
 8010eaa:	1d1a      	adds	r2, r3, #4
 8010eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010eb0:	9300      	str	r3, [sp, #0]
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	697a      	ldr	r2, [r7, #20]
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f001 fc1b 	bl	80126f4 <ethernet_output>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ec4:	e079      	b.n	8010fba <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010ec6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010eca:	493f      	ldr	r1, [pc, #252]	; (8010fc8 <etharp_query+0x278>)
 8010ecc:	4613      	mov	r3, r2
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	4413      	add	r3, r2
 8010ed2:	00db      	lsls	r3, r3, #3
 8010ed4:	440b      	add	r3, r1
 8010ed6:	3314      	adds	r3, #20
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d16d      	bne.n	8010fba <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ee6:	e01a      	b.n	8010f1e <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	895a      	ldrh	r2, [r3, #10]
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	891b      	ldrh	r3, [r3, #8]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d10a      	bne.n	8010f0a <etharp_query+0x1ba>
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d006      	beq.n	8010f0a <etharp_query+0x1ba>
 8010efc:	4b33      	ldr	r3, [pc, #204]	; (8010fcc <etharp_query+0x27c>)
 8010efe:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8010f02:	4937      	ldr	r1, [pc, #220]	; (8010fe0 <etharp_query+0x290>)
 8010f04:	4833      	ldr	r0, [pc, #204]	; (8010fd4 <etharp_query+0x284>)
 8010f06:	f004 fbff 	bl	8015708 <iprintf>
      if (p->type != PBUF_ROM) {
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	7b1b      	ldrb	r3, [r3, #12]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d002      	beq.n	8010f18 <etharp_query+0x1c8>
        copy_needed = 1;
 8010f12:	2301      	movs	r3, #1
 8010f14:	61bb      	str	r3, [r7, #24]
        break;
 8010f16:	e005      	b.n	8010f24 <etharp_query+0x1d4>
      }
      p = p->next;
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1e1      	bne.n	8010ee8 <etharp_query+0x198>
    }
    if (copy_needed) {
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d017      	beq.n	8010f5a <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	891b      	ldrh	r3, [r3, #8]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	4619      	mov	r1, r3
 8010f32:	2002      	movs	r0, #2
 8010f34:	f7f7 fc9e 	bl	8008874 <pbuf_alloc>
 8010f38:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d011      	beq.n	8010f64 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8010f40:	6879      	ldr	r1, [r7, #4]
 8010f42:	69f8      	ldr	r0, [r7, #28]
 8010f44:	f7f8 f93c 	bl	80091c0 <pbuf_copy>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d00a      	beq.n	8010f64 <etharp_query+0x214>
          pbuf_free(p);
 8010f4e:	69f8      	ldr	r0, [r7, #28]
 8010f50:	f7f8 f802 	bl	8008f58 <pbuf_free>
          p = NULL;
 8010f54:	2300      	movs	r3, #0
 8010f56:	61fb      	str	r3, [r7, #28]
 8010f58:	e004      	b.n	8010f64 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010f5e:	69f8      	ldr	r0, [r7, #28]
 8010f60:	f7f8 f8a6 	bl	80090b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d024      	beq.n	8010fb4 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010f6a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010f6e:	4916      	ldr	r1, [pc, #88]	; (8010fc8 <etharp_query+0x278>)
 8010f70:	4613      	mov	r3, r2
 8010f72:	005b      	lsls	r3, r3, #1
 8010f74:	4413      	add	r3, r2
 8010f76:	00db      	lsls	r3, r3, #3
 8010f78:	440b      	add	r3, r1
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00b      	beq.n	8010f98 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8010f80:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010f84:	4910      	ldr	r1, [pc, #64]	; (8010fc8 <etharp_query+0x278>)
 8010f86:	4613      	mov	r3, r2
 8010f88:	005b      	lsls	r3, r3, #1
 8010f8a:	4413      	add	r3, r2
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	440b      	add	r3, r1
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7f7 ffe0 	bl	8008f58 <pbuf_free>
      }
      arp_table[i].q = p;
 8010f98:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010f9c:	490a      	ldr	r1, [pc, #40]	; (8010fc8 <etharp_query+0x278>)
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	005b      	lsls	r3, r3, #1
 8010fa2:	4413      	add	r3, r2
 8010fa4:	00db      	lsls	r3, r3, #3
 8010fa6:	440b      	add	r3, r1
 8010fa8:	69fa      	ldr	r2, [r7, #28]
 8010faa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010fac:	2300      	movs	r3, #0
 8010fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fb2:	e002      	b.n	8010fba <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010fb4:	23ff      	movs	r3, #255	; 0xff
 8010fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010fba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3728      	adds	r7, #40	; 0x28
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	2000028c 	.word	0x2000028c
 8010fcc:	08017fb0 	.word	0x08017fb0
 8010fd0:	0801815c 	.word	0x0801815c
 8010fd4:	08018028 	.word	0x08018028
 8010fd8:	08018150 	.word	0x08018150
 8010fdc:	2000037c 	.word	0x2000037c
 8010fe0:	08018184 	.word	0x08018184

08010fe4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b08a      	sub	sp, #40	; 0x28
 8010fe8:	af02      	add	r7, sp, #8
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	607a      	str	r2, [r7, #4]
 8010ff0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d106      	bne.n	801100a <etharp_raw+0x26>
 8010ffc:	4b3a      	ldr	r3, [pc, #232]	; (80110e8 <etharp_raw+0x104>)
 8010ffe:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8011002:	493a      	ldr	r1, [pc, #232]	; (80110ec <etharp_raw+0x108>)
 8011004:	483a      	ldr	r0, [pc, #232]	; (80110f0 <etharp_raw+0x10c>)
 8011006:	f004 fb7f 	bl	8015708 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801100a:	2200      	movs	r2, #0
 801100c:	211c      	movs	r1, #28
 801100e:	2002      	movs	r0, #2
 8011010:	f7f7 fc30 	bl	8008874 <pbuf_alloc>
 8011014:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d102      	bne.n	8011022 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801101c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011020:	e05d      	b.n	80110de <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011022:	69bb      	ldr	r3, [r7, #24]
 8011024:	895b      	ldrh	r3, [r3, #10]
 8011026:	2b1b      	cmp	r3, #27
 8011028:	d806      	bhi.n	8011038 <etharp_raw+0x54>
 801102a:	4b2f      	ldr	r3, [pc, #188]	; (80110e8 <etharp_raw+0x104>)
 801102c:	f240 4264 	movw	r2, #1124	; 0x464
 8011030:	4930      	ldr	r1, [pc, #192]	; (80110f4 <etharp_raw+0x110>)
 8011032:	482f      	ldr	r0, [pc, #188]	; (80110f0 <etharp_raw+0x10c>)
 8011034:	f004 fb68 	bl	8015708 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801103e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011040:	4618      	mov	r0, r3
 8011042:	f7f6 fe5d 	bl	8007d00 <lwip_htons>
 8011046:	4603      	mov	r3, r0
 8011048:	461a      	mov	r2, r3
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011054:	2b06      	cmp	r3, #6
 8011056:	d006      	beq.n	8011066 <etharp_raw+0x82>
 8011058:	4b23      	ldr	r3, [pc, #140]	; (80110e8 <etharp_raw+0x104>)
 801105a:	f240 426b 	movw	r2, #1131	; 0x46b
 801105e:	4926      	ldr	r1, [pc, #152]	; (80110f8 <etharp_raw+0x114>)
 8011060:	4823      	ldr	r0, [pc, #140]	; (80110f0 <etharp_raw+0x10c>)
 8011062:	f004 fb51 	bl	8015708 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	3308      	adds	r3, #8
 801106a:	2206      	movs	r2, #6
 801106c:	6839      	ldr	r1, [r7, #0]
 801106e:	4618      	mov	r0, r3
 8011070:	f004 fa8f 	bl	8015592 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	3312      	adds	r3, #18
 8011078:	2206      	movs	r2, #6
 801107a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801107c:	4618      	mov	r0, r3
 801107e:	f004 fa88 	bl	8015592 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	330e      	adds	r3, #14
 8011086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011088:	6812      	ldr	r2, [r2, #0]
 801108a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	3318      	adds	r3, #24
 8011090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011092:	6812      	ldr	r2, [r2, #0]
 8011094:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	2200      	movs	r2, #0
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	2200      	movs	r2, #0
 801109e:	f042 0201 	orr.w	r2, r2, #1
 80110a2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	2200      	movs	r2, #0
 80110a8:	f042 0208 	orr.w	r2, r2, #8
 80110ac:	709a      	strb	r2, [r3, #2]
 80110ae:	2200      	movs	r2, #0
 80110b0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	2206      	movs	r2, #6
 80110b6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	2204      	movs	r2, #4
 80110bc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80110be:	f640 0306 	movw	r3, #2054	; 0x806
 80110c2:	9300      	str	r3, [sp, #0]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	68ba      	ldr	r2, [r7, #8]
 80110c8:	69b9      	ldr	r1, [r7, #24]
 80110ca:	68f8      	ldr	r0, [r7, #12]
 80110cc:	f001 fb12 	bl	80126f4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80110d0:	69b8      	ldr	r0, [r7, #24]
 80110d2:	f7f7 ff41 	bl	8008f58 <pbuf_free>
  p = NULL;
 80110d6:	2300      	movs	r3, #0
 80110d8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80110da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3720      	adds	r7, #32
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	08017fb0 	.word	0x08017fb0
 80110ec:	08018100 	.word	0x08018100
 80110f0:	08018028 	.word	0x08018028
 80110f4:	080181a0 	.word	0x080181a0
 80110f8:	080181d4 	.word	0x080181d4

080110fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b088      	sub	sp, #32
 8011100:	af04      	add	r7, sp, #16
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011118:	2201      	movs	r2, #1
 801111a:	9203      	str	r2, [sp, #12]
 801111c:	68ba      	ldr	r2, [r7, #8]
 801111e:	9202      	str	r2, [sp, #8]
 8011120:	4a06      	ldr	r2, [pc, #24]	; (801113c <etharp_request_dst+0x40>)
 8011122:	9201      	str	r2, [sp, #4]
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	4603      	mov	r3, r0
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f7ff ff5a 	bl	8010fe4 <etharp_raw>
 8011130:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	080188bc 	.word	0x080188bc

08011140 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801114a:	4a05      	ldr	r2, [pc, #20]	; (8011160 <etharp_request+0x20>)
 801114c:	6839      	ldr	r1, [r7, #0]
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff ffd4 	bl	80110fc <etharp_request_dst>
 8011154:	4603      	mov	r3, r0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3708      	adds	r7, #8
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	080188b4 	.word	0x080188b4

08011164 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08e      	sub	sp, #56	; 0x38
 8011168:	af04      	add	r7, sp, #16
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801116e:	4b7a      	ldr	r3, [pc, #488]	; (8011358 <icmp_input+0x1f4>)
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	b29b      	uxth	r3, r3
 801117a:	f003 030f 	and.w	r3, r3, #15
 801117e:	b29b      	uxth	r3, r3
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011186:	2b13      	cmp	r3, #19
 8011188:	f240 80d1 	bls.w	801132e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	895b      	ldrh	r3, [r3, #10]
 8011190:	2b03      	cmp	r3, #3
 8011192:	f240 80ce 	bls.w	8011332 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80111a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 80bb 	beq.w	8011320 <icmp_input+0x1bc>
 80111aa:	2b08      	cmp	r3, #8
 80111ac:	f040 80bb 	bne.w	8011326 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80111b0:	4b6a      	ldr	r3, [pc, #424]	; (801135c <icmp_input+0x1f8>)
 80111b2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80111b4:	4b68      	ldr	r3, [pc, #416]	; (8011358 <icmp_input+0x1f4>)
 80111b6:	695b      	ldr	r3, [r3, #20]
 80111b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80111bc:	2be0      	cmp	r3, #224	; 0xe0
 80111be:	f000 80bf 	beq.w	8011340 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80111c2:	4b65      	ldr	r3, [pc, #404]	; (8011358 <icmp_input+0x1f4>)
 80111c4:	695a      	ldr	r2, [r3, #20]
 80111c6:	4b64      	ldr	r3, [pc, #400]	; (8011358 <icmp_input+0x1f4>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4619      	mov	r1, r3
 80111cc:	4610      	mov	r0, r2
 80111ce:	f000 fbef 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 80111d2:	4603      	mov	r3, r0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	f040 80b5 	bne.w	8011344 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	891b      	ldrh	r3, [r3, #8]
 80111de:	2b07      	cmp	r3, #7
 80111e0:	f240 80a9 	bls.w	8011336 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80111e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111e6:	330e      	adds	r3, #14
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	b21b      	sxth	r3, r3
 80111ec:	4619      	mov	r1, r3
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f7f7 fe8e 	bl	8008f10 <pbuf_header>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d046      	beq.n	8011288 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	891a      	ldrh	r2, [r3, #8]
 80111fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011200:	4413      	add	r3, r2
 8011202:	b29b      	uxth	r3, r3
 8011204:	2200      	movs	r2, #0
 8011206:	4619      	mov	r1, r3
 8011208:	2002      	movs	r0, #2
 801120a:	f7f7 fb33 	bl	8008874 <pbuf_alloc>
 801120e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 8098 	beq.w	8011348 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	895b      	ldrh	r3, [r3, #10]
 801121c:	461a      	mov	r2, r3
 801121e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011220:	3308      	adds	r3, #8
 8011222:	429a      	cmp	r2, r3
 8011224:	d203      	bcs.n	801122e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8011226:	69b8      	ldr	r0, [r7, #24]
 8011228:	f7f7 fe96 	bl	8008f58 <pbuf_free>
        goto icmperr;
 801122c:	e08d      	b.n	801134a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011236:	4618      	mov	r0, r3
 8011238:	f004 f9ab 	bl	8015592 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801123c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801123e:	425b      	negs	r3, r3
 8011240:	b29b      	uxth	r3, r3
 8011242:	b21b      	sxth	r3, r3
 8011244:	4619      	mov	r1, r3
 8011246:	69b8      	ldr	r0, [r7, #24]
 8011248:	f7f7 fe62 	bl	8008f10 <pbuf_header>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d009      	beq.n	8011266 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011252:	4b43      	ldr	r3, [pc, #268]	; (8011360 <icmp_input+0x1fc>)
 8011254:	22af      	movs	r2, #175	; 0xaf
 8011256:	4943      	ldr	r1, [pc, #268]	; (8011364 <icmp_input+0x200>)
 8011258:	4843      	ldr	r0, [pc, #268]	; (8011368 <icmp_input+0x204>)
 801125a:	f004 fa55 	bl	8015708 <iprintf>
        pbuf_free(r);
 801125e:	69b8      	ldr	r0, [r7, #24]
 8011260:	f7f7 fe7a 	bl	8008f58 <pbuf_free>
        goto icmperr;
 8011264:	e071      	b.n	801134a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011266:	6879      	ldr	r1, [r7, #4]
 8011268:	69b8      	ldr	r0, [r7, #24]
 801126a:	f7f7 ffa9 	bl	80091c0 <pbuf_copy>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d003      	beq.n	801127c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8011274:	69b8      	ldr	r0, [r7, #24]
 8011276:	f7f7 fe6f 	bl	8008f58 <pbuf_free>
        goto icmperr;
 801127a:	e066      	b.n	801134a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7f7 fe6b 	bl	8008f58 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	607b      	str	r3, [r7, #4]
 8011286:	e015      	b.n	80112b4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801128a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801128e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011292:	33f2      	adds	r3, #242	; 0xf2
 8011294:	b29b      	uxth	r3, r3
 8011296:	b21b      	sxth	r3, r3
 8011298:	4619      	mov	r1, r3
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7f7 fe38 	bl	8008f10 <pbuf_header>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d006      	beq.n	80112b4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80112a6:	4b2e      	ldr	r3, [pc, #184]	; (8011360 <icmp_input+0x1fc>)
 80112a8:	22c0      	movs	r2, #192	; 0xc0
 80112aa:	4930      	ldr	r1, [pc, #192]	; (801136c <icmp_input+0x208>)
 80112ac:	482e      	ldr	r0, [pc, #184]	; (8011368 <icmp_input+0x204>)
 80112ae:	f004 fa2b 	bl	8015708 <iprintf>
        goto icmperr;
 80112b2:	e04a      	b.n	801134a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80112ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80112be:	4619      	mov	r1, r3
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7f7 fe25 	bl	8008f10 <pbuf_header>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d12b      	bne.n	8011324 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80112da:	4b1f      	ldr	r3, [pc, #124]	; (8011358 <icmp_input+0x1f4>)
 80112dc:	691a      	ldr	r2, [r3, #16]
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2200      	movs	r2, #0
 80112e6:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	2200      	movs	r2, #0
 80112ec:	709a      	strb	r2, [r3, #2]
 80112ee:	2200      	movs	r2, #0
 80112f0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	22ff      	movs	r2, #255	; 0xff
 80112f6:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	2200      	movs	r2, #0
 80112fc:	729a      	strb	r2, [r3, #10]
 80112fe:	2200      	movs	r2, #0
 8011300:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	9302      	str	r3, [sp, #8]
 8011306:	2301      	movs	r3, #1
 8011308:	9301      	str	r3, [sp, #4]
 801130a:	2300      	movs	r3, #0
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	23ff      	movs	r3, #255	; 0xff
 8011310:	2200      	movs	r2, #0
 8011312:	69f9      	ldr	r1, [r7, #28]
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f000 fa79 	bl	801180c <ip4_output_if>
 801131a:	4603      	mov	r3, r0
 801131c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801131e:	e001      	b.n	8011324 <icmp_input+0x1c0>
    break;
 8011320:	bf00      	nop
 8011322:	e000      	b.n	8011326 <icmp_input+0x1c2>
    break;
 8011324:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7f7 fe16 	bl	8008f58 <pbuf_free>
  return;
 801132c:	e011      	b.n	8011352 <icmp_input+0x1ee>
    goto lenerr;
 801132e:	bf00      	nop
 8011330:	e002      	b.n	8011338 <icmp_input+0x1d4>
    goto lenerr;
 8011332:	bf00      	nop
 8011334:	e000      	b.n	8011338 <icmp_input+0x1d4>
      goto lenerr;
 8011336:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7f7 fe0d 	bl	8008f58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801133e:	e008      	b.n	8011352 <icmp_input+0x1ee>
      goto icmperr;
 8011340:	bf00      	nop
 8011342:	e002      	b.n	801134a <icmp_input+0x1e6>
      goto icmperr;
 8011344:	bf00      	nop
 8011346:	e000      	b.n	801134a <icmp_input+0x1e6>
        goto icmperr;
 8011348:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7f7 fe04 	bl	8008f58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011350:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011352:	3728      	adds	r7, #40	; 0x28
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	200003a0 	.word	0x200003a0
 801135c:	200003b4 	.word	0x200003b4
 8011360:	08018218 	.word	0x08018218
 8011364:	08018250 	.word	0x08018250
 8011368:	08018288 	.word	0x08018288
 801136c:	080182b0 	.word	0x080182b0

08011370 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	460b      	mov	r3, r1
 801137a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801137c:	78fb      	ldrb	r3, [r7, #3]
 801137e:	461a      	mov	r2, r3
 8011380:	2103      	movs	r1, #3
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 f814 	bl	80113b0 <icmp_send_response>
}
 8011388:	bf00      	nop
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	460b      	mov	r3, r1
 801139a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801139c:	78fb      	ldrb	r3, [r7, #3]
 801139e:	461a      	mov	r2, r3
 80113a0:	210b      	movs	r1, #11
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f000 f804 	bl	80113b0 <icmp_send_response>
}
 80113a8:	bf00      	nop
 80113aa:	3708      	adds	r7, #8
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08c      	sub	sp, #48	; 0x30
 80113b4:	af04      	add	r7, sp, #16
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	70fb      	strb	r3, [r7, #3]
 80113bc:	4613      	mov	r3, r2
 80113be:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80113c0:	2200      	movs	r2, #0
 80113c2:	2124      	movs	r1, #36	; 0x24
 80113c4:	2001      	movs	r0, #1
 80113c6:	f7f7 fa55 	bl	8008874 <pbuf_alloc>
 80113ca:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d04c      	beq.n	801146c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	895b      	ldrh	r3, [r3, #10]
 80113d6:	2b23      	cmp	r3, #35	; 0x23
 80113d8:	d806      	bhi.n	80113e8 <icmp_send_response+0x38>
 80113da:	4b26      	ldr	r3, [pc, #152]	; (8011474 <icmp_send_response+0xc4>)
 80113dc:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80113e0:	4925      	ldr	r1, [pc, #148]	; (8011478 <icmp_send_response+0xc8>)
 80113e2:	4826      	ldr	r0, [pc, #152]	; (801147c <icmp_send_response+0xcc>)
 80113e4:	f004 f990 	bl	8015708 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80113ee:	69fb      	ldr	r3, [r7, #28]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	78fa      	ldrb	r2, [r7, #3]
 80113f8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	78ba      	ldrb	r2, [r7, #2]
 80113fe:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	2200      	movs	r2, #0
 8011404:	711a      	strb	r2, [r3, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2200      	movs	r2, #0
 801140e:	719a      	strb	r2, [r3, #6]
 8011410:	2200      	movs	r2, #0
 8011412:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	f103 0008 	add.w	r0, r3, #8
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	221c      	movs	r2, #28
 8011422:	4619      	mov	r1, r3
 8011424:	f004 f8b5 	bl	8015592 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801142e:	f107 030c 	add.w	r3, r7, #12
 8011432:	4618      	mov	r0, r3
 8011434:	f000 f824 	bl	8011480 <ip4_route>
 8011438:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d011      	beq.n	8011464 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2200      	movs	r2, #0
 8011444:	709a      	strb	r2, [r3, #2]
 8011446:	2200      	movs	r2, #0
 8011448:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801144a:	f107 020c 	add.w	r2, r7, #12
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	9302      	str	r3, [sp, #8]
 8011452:	2301      	movs	r3, #1
 8011454:	9301      	str	r3, [sp, #4]
 8011456:	2300      	movs	r3, #0
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	23ff      	movs	r3, #255	; 0xff
 801145c:	2100      	movs	r1, #0
 801145e:	69f8      	ldr	r0, [r7, #28]
 8011460:	f000 f9d4 	bl	801180c <ip4_output_if>
  }
  pbuf_free(q);
 8011464:	69f8      	ldr	r0, [r7, #28]
 8011466:	f7f7 fd77 	bl	8008f58 <pbuf_free>
 801146a:	e000      	b.n	801146e <icmp_send_response+0xbe>
    return;
 801146c:	bf00      	nop
}
 801146e:	3720      	adds	r7, #32
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	08018218 	.word	0x08018218
 8011478:	080182e4 	.word	0x080182e4
 801147c:	08018288 	.word	0x08018288

08011480 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011480:	b480      	push	{r7}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011488:	4b30      	ldr	r3, [pc, #192]	; (801154c <ip4_route+0xcc>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	60fb      	str	r3, [r7, #12]
 801148e:	e036      	b.n	80114fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011496:	f003 0301 	and.w	r3, r3, #1
 801149a:	b2db      	uxtb	r3, r3
 801149c:	2b00      	cmp	r3, #0
 801149e:	d02b      	beq.n	80114f8 <ip4_route+0x78>
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114a6:	089b      	lsrs	r3, r3, #2
 80114a8:	f003 0301 	and.w	r3, r3, #1
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d022      	beq.n	80114f8 <ip4_route+0x78>
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	3304      	adds	r3, #4
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d01d      	beq.n	80114f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	3304      	adds	r3, #4
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	405a      	eors	r2, r3
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	3308      	adds	r3, #8
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4013      	ands	r3, r2
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d101      	bne.n	80114d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	e033      	b.n	8011540 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114de:	f003 0302 	and.w	r3, r3, #2
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d108      	bne.n	80114f8 <ip4_route+0x78>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	330c      	adds	r3, #12
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d101      	bne.n	80114f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	e023      	b.n	8011540 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	60fb      	str	r3, [r7, #12]
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d1c5      	bne.n	8011490 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011504:	4b12      	ldr	r3, [pc, #72]	; (8011550 <ip4_route+0xd0>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d015      	beq.n	8011538 <ip4_route+0xb8>
 801150c:	4b10      	ldr	r3, [pc, #64]	; (8011550 <ip4_route+0xd0>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011514:	f003 0301 	and.w	r3, r3, #1
 8011518:	2b00      	cmp	r3, #0
 801151a:	d00d      	beq.n	8011538 <ip4_route+0xb8>
 801151c:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <ip4_route+0xd0>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011524:	f003 0304 	and.w	r3, r3, #4
 8011528:	2b00      	cmp	r3, #0
 801152a:	d005      	beq.n	8011538 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801152c:	4b08      	ldr	r3, [pc, #32]	; (8011550 <ip4_route+0xd0>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	3304      	adds	r3, #4
 8011532:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011534:	2b00      	cmp	r3, #0
 8011536:	d101      	bne.n	801153c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011538:	2300      	movs	r3, #0
 801153a:	e001      	b.n	8011540 <ip4_route+0xc0>
  }

  return netif_default;
 801153c:	4b04      	ldr	r3, [pc, #16]	; (8011550 <ip4_route+0xd0>)
 801153e:	681b      	ldr	r3, [r3, #0]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr
 801154c:	200038e0 	.word	0x200038e0
 8011550:	200038e4 	.word	0x200038e4

08011554 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b088      	sub	sp, #32
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801155e:	2301      	movs	r3, #1
 8011560:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	091b      	lsrs	r3, r3, #4
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b04      	cmp	r3, #4
 8011572:	d004      	beq.n	801157e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7f7 fcef 	bl	8008f58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801157a:	2300      	movs	r3, #0
 801157c:	e13e      	b.n	80117fc <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801157e:	69fb      	ldr	r3, [r7, #28]
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	b29b      	uxth	r3, r3
 8011584:	f003 030f 	and.w	r3, r3, #15
 8011588:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801158a:	89fb      	ldrh	r3, [r7, #14]
 801158c:	009b      	lsls	r3, r3, #2
 801158e:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	885b      	ldrh	r3, [r3, #2]
 8011594:	b29b      	uxth	r3, r3
 8011596:	4618      	mov	r0, r3
 8011598:	f7f6 fbb2 	bl	8007d00 <lwip_htons>
 801159c:	4603      	mov	r3, r0
 801159e:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	891b      	ldrh	r3, [r3, #8]
 80115a4:	89ba      	ldrh	r2, [r7, #12]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d204      	bcs.n	80115b4 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 80115aa:	89bb      	ldrh	r3, [r7, #12]
 80115ac:	4619      	mov	r1, r3
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7f7 fb5e 	bl	8008c70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	895b      	ldrh	r3, [r3, #10]
 80115b8:	89fa      	ldrh	r2, [r7, #14]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d807      	bhi.n	80115ce <ip4_input+0x7a>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	891b      	ldrh	r3, [r3, #8]
 80115c2:	89ba      	ldrh	r2, [r7, #12]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d802      	bhi.n	80115ce <ip4_input+0x7a>
 80115c8:	89fb      	ldrh	r3, [r7, #14]
 80115ca:	2b13      	cmp	r3, #19
 80115cc:	d804      	bhi.n	80115d8 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7f7 fcc2 	bl	8008f58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	e111      	b.n	80117fc <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	4a89      	ldr	r2, [pc, #548]	; (8011804 <ip4_input+0x2b0>)
 80115de:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	4a87      	ldr	r2, [pc, #540]	; (8011804 <ip4_input+0x2b0>)
 80115e6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80115e8:	4b86      	ldr	r3, [pc, #536]	; (8011804 <ip4_input+0x2b0>)
 80115ea:	695b      	ldr	r3, [r3, #20]
 80115ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80115f0:	2be0      	cmp	r3, #224	; 0xe0
 80115f2:	d112      	bne.n	801161a <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80115fa:	f003 0301 	and.w	r3, r3, #1
 80115fe:	b2db      	uxtb	r3, r3
 8011600:	2b00      	cmp	r3, #0
 8011602:	d007      	beq.n	8011614 <ip4_input+0xc0>
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	3304      	adds	r3, #4
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <ip4_input+0xc0>
      netif = inp;
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	61bb      	str	r3, [r7, #24]
 8011612:	e041      	b.n	8011698 <ip4_input+0x144>
    } else {
      netif = NULL;
 8011614:	2300      	movs	r3, #0
 8011616:	61bb      	str	r3, [r7, #24]
 8011618:	e03e      	b.n	8011698 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801161a:	2301      	movs	r3, #1
 801161c:	613b      	str	r3, [r7, #16]
    netif = inp;
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011628:	f003 0301 	and.w	r3, r3, #1
 801162c:	b2db      	uxtb	r3, r3
 801162e:	2b00      	cmp	r3, #0
 8011630:	d014      	beq.n	801165c <ip4_input+0x108>
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	3304      	adds	r3, #4
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00f      	beq.n	801165c <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801163c:	4b71      	ldr	r3, [pc, #452]	; (8011804 <ip4_input+0x2b0>)
 801163e:	695a      	ldr	r2, [r3, #20]
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	3304      	adds	r3, #4
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	429a      	cmp	r2, r3
 8011648:	d026      	beq.n	8011698 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801164a:	4b6e      	ldr	r3, [pc, #440]	; (8011804 <ip4_input+0x2b0>)
 801164c:	695b      	ldr	r3, [r3, #20]
 801164e:	69b9      	ldr	r1, [r7, #24]
 8011650:	4618      	mov	r0, r3
 8011652:	f000 f9ad 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 8011656:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011658:	2b00      	cmp	r3, #0
 801165a:	d11d      	bne.n	8011698 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00d      	beq.n	801167e <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8011662:	4b68      	ldr	r3, [pc, #416]	; (8011804 <ip4_input+0x2b0>)
 8011664:	695b      	ldr	r3, [r3, #20]
 8011666:	b2db      	uxtb	r3, r3
 8011668:	2b7f      	cmp	r3, #127	; 0x7f
 801166a:	d102      	bne.n	8011672 <ip4_input+0x11e>
          netif = NULL;
 801166c:	2300      	movs	r3, #0
 801166e:	61bb      	str	r3, [r7, #24]
          break;
 8011670:	e012      	b.n	8011698 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8011672:	2300      	movs	r3, #0
 8011674:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8011676:	4b64      	ldr	r3, [pc, #400]	; (8011808 <ip4_input+0x2b4>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	61bb      	str	r3, [r7, #24]
 801167c:	e002      	b.n	8011684 <ip4_input+0x130>
      } else {
        netif = netif->next;
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8011684:	69ba      	ldr	r2, [r7, #24]
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	429a      	cmp	r2, r3
 801168a:	d102      	bne.n	8011692 <ip4_input+0x13e>
        netif = netif->next;
 801168c:	69bb      	ldr	r3, [r7, #24]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d1c4      	bne.n	8011622 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d111      	bne.n	80116c2 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	7a5b      	ldrb	r3, [r3, #9]
 80116a2:	2b11      	cmp	r3, #17
 80116a4:	d10d      	bne.n	80116c2 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 80116a6:	89fb      	ldrh	r3, [r7, #14]
 80116a8:	69fa      	ldr	r2, [r7, #28]
 80116aa:	4413      	add	r3, r2
 80116ac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	885b      	ldrh	r3, [r3, #2]
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80116b8:	d103      	bne.n	80116c2 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80116be:	2300      	movs	r3, #0
 80116c0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d017      	beq.n	80116f8 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80116c8:	4b4e      	ldr	r3, [pc, #312]	; (8011804 <ip4_input+0x2b0>)
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d013      	beq.n	80116f8 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80116d0:	4b4c      	ldr	r3, [pc, #304]	; (8011804 <ip4_input+0x2b0>)
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	6839      	ldr	r1, [r7, #0]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f000 f96a 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d105      	bne.n	80116ee <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80116e2:	4b48      	ldr	r3, [pc, #288]	; (8011804 <ip4_input+0x2b0>)
 80116e4:	691b      	ldr	r3, [r3, #16]
 80116e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80116ea:	2be0      	cmp	r3, #224	; 0xe0
 80116ec:	d104      	bne.n	80116f8 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7f7 fc32 	bl	8008f58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80116f4:	2300      	movs	r3, #0
 80116f6:	e081      	b.n	80117fc <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d104      	bne.n	8011708 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7f7 fc2a 	bl	8008f58 <pbuf_free>
    return ERR_OK;
 8011704:	2300      	movs	r3, #0
 8011706:	e079      	b.n	80117fc <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	88db      	ldrh	r3, [r3, #6]
 801170c:	b29b      	uxth	r3, r3
 801170e:	461a      	mov	r2, r3
 8011710:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011714:	4013      	ands	r3, r2
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00b      	beq.n	8011732 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 fc8e 	bl	801203c <ip4_reass>
 8011720:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d101      	bne.n	801172c <ip4_input+0x1d8>
      return ERR_OK;
 8011728:	2300      	movs	r3, #0
 801172a:	e067      	b.n	80117fc <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011732:	4a34      	ldr	r2, [pc, #208]	; (8011804 <ip4_input+0x2b0>)
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011738:	4a32      	ldr	r2, [pc, #200]	; (8011804 <ip4_input+0x2b0>)
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801173e:	4a31      	ldr	r2, [pc, #196]	; (8011804 <ip4_input+0x2b0>)
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	b29b      	uxth	r3, r3
 801174a:	f003 030f 	and.w	r3, r3, #15
 801174e:	b29b      	uxth	r3, r3
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	b29a      	uxth	r2, r3
 8011754:	4b2b      	ldr	r3, [pc, #172]	; (8011804 <ip4_input+0x2b0>)
 8011756:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011758:	89fb      	ldrh	r3, [r7, #14]
 801175a:	425b      	negs	r3, r3
 801175c:	b29b      	uxth	r3, r3
 801175e:	b21b      	sxth	r3, r3
 8011760:	4619      	mov	r1, r3
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7f7 fbd4 	bl	8008f10 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	7a5b      	ldrb	r3, [r3, #9]
 801176c:	2b06      	cmp	r3, #6
 801176e:	d009      	beq.n	8011784 <ip4_input+0x230>
 8011770:	2b11      	cmp	r3, #17
 8011772:	d002      	beq.n	801177a <ip4_input+0x226>
 8011774:	2b01      	cmp	r3, #1
 8011776:	d00a      	beq.n	801178e <ip4_input+0x23a>
 8011778:	e00e      	b.n	8011798 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7fd fa1b 	bl	800ebb8 <udp_input>
      break;
 8011782:	e028      	b.n	80117d6 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011784:	6839      	ldr	r1, [r7, #0]
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7f9 fa86 	bl	800ac98 <tcp_input>
      break;
 801178c:	e023      	b.n	80117d6 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801178e:	6839      	ldr	r1, [r7, #0]
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f7ff fce7 	bl	8011164 <icmp_input>
      break;
 8011796:	e01e      	b.n	80117d6 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011798:	4b1a      	ldr	r3, [pc, #104]	; (8011804 <ip4_input+0x2b0>)
 801179a:	695b      	ldr	r3, [r3, #20]
 801179c:	69b9      	ldr	r1, [r7, #24]
 801179e:	4618      	mov	r0, r3
 80117a0:	f000 f906 	bl	80119b0 <ip4_addr_isbroadcast_u32>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d112      	bne.n	80117d0 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80117aa:	4b16      	ldr	r3, [pc, #88]	; (8011804 <ip4_input+0x2b0>)
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80117b2:	2be0      	cmp	r3, #224	; 0xe0
 80117b4:	d00c      	beq.n	80117d0 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80117b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80117ba:	4619      	mov	r1, r3
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f7f7 fbb9 	bl	8008f34 <pbuf_header_force>
        p->payload = iphdr;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	69fa      	ldr	r2, [r7, #28]
 80117c6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80117c8:	2102      	movs	r1, #2
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f7ff fdd0 	bl	8011370 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f7f7 fbc1 	bl	8008f58 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80117d6:	4b0b      	ldr	r3, [pc, #44]	; (8011804 <ip4_input+0x2b0>)
 80117d8:	2200      	movs	r2, #0
 80117da:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80117dc:	4b09      	ldr	r3, [pc, #36]	; (8011804 <ip4_input+0x2b0>)
 80117de:	2200      	movs	r2, #0
 80117e0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80117e2:	4b08      	ldr	r3, [pc, #32]	; (8011804 <ip4_input+0x2b0>)
 80117e4:	2200      	movs	r2, #0
 80117e6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80117e8:	4b06      	ldr	r3, [pc, #24]	; (8011804 <ip4_input+0x2b0>)
 80117ea:	2200      	movs	r2, #0
 80117ec:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80117ee:	4b05      	ldr	r3, [pc, #20]	; (8011804 <ip4_input+0x2b0>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80117f4:	4b03      	ldr	r3, [pc, #12]	; (8011804 <ip4_input+0x2b0>)
 80117f6:	2200      	movs	r2, #0
 80117f8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80117fa:	2300      	movs	r3, #0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3720      	adds	r7, #32
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	200003a0 	.word	0x200003a0
 8011808:	200038e0 	.word	0x200038e0

0801180c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b08a      	sub	sp, #40	; 0x28
 8011810:	af04      	add	r7, sp, #16
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	607a      	str	r2, [r7, #4]
 8011818:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d009      	beq.n	8011838 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d003      	beq.n	8011832 <ip4_output_if+0x26>
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d102      	bne.n	8011838 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011834:	3304      	adds	r3, #4
 8011836:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011838:	78fa      	ldrb	r2, [r7, #3]
 801183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183c:	9302      	str	r3, [sp, #8]
 801183e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011842:	9301      	str	r3, [sp, #4]
 8011844:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	4613      	mov	r3, r2
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	6979      	ldr	r1, [r7, #20]
 8011850:	68f8      	ldr	r0, [r7, #12]
 8011852:	f000 f805 	bl	8011860 <ip4_output_if_src>
 8011856:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011858:	4618      	mov	r0, r3
 801185a:	3718      	adds	r7, #24
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b088      	sub	sp, #32
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
 801186c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	89db      	ldrh	r3, [r3, #14]
 8011872:	2b01      	cmp	r3, #1
 8011874:	d006      	beq.n	8011884 <ip4_output_if_src+0x24>
 8011876:	4b48      	ldr	r3, [pc, #288]	; (8011998 <ip4_output_if_src+0x138>)
 8011878:	f240 3233 	movw	r2, #819	; 0x333
 801187c:	4947      	ldr	r1, [pc, #284]	; (801199c <ip4_output_if_src+0x13c>)
 801187e:	4848      	ldr	r0, [pc, #288]	; (80119a0 <ip4_output_if_src+0x140>)
 8011880:	f003 ff42 	bl	8015708 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d060      	beq.n	801194c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801188a:	2314      	movs	r3, #20
 801188c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801188e:	2114      	movs	r1, #20
 8011890:	68f8      	ldr	r0, [r7, #12]
 8011892:	f7f7 fb3d 	bl	8008f10 <pbuf_header>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801189c:	f06f 0301 	mvn.w	r3, #1
 80118a0:	e075      	b.n	801198e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	895b      	ldrh	r3, [r3, #10]
 80118ac:	2b13      	cmp	r3, #19
 80118ae:	d806      	bhi.n	80118be <ip4_output_if_src+0x5e>
 80118b0:	4b39      	ldr	r3, [pc, #228]	; (8011998 <ip4_output_if_src+0x138>)
 80118b2:	f240 3261 	movw	r2, #865	; 0x361
 80118b6:	493b      	ldr	r1, [pc, #236]	; (80119a4 <ip4_output_if_src+0x144>)
 80118b8:	4839      	ldr	r0, [pc, #228]	; (80119a0 <ip4_output_if_src+0x140>)
 80118ba:	f003 ff25 	bl	8015708 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	78fa      	ldrb	r2, [r7, #3]
 80118c2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80118ca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80118d4:	8b7b      	ldrh	r3, [r7, #26]
 80118d6:	089b      	lsrs	r3, r3, #2
 80118d8:	b29b      	uxth	r3, r3
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80118ec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	891b      	ldrh	r3, [r3, #8]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7f6 fa04 	bl	8007d00 <lwip_htons>
 80118f8:	4603      	mov	r3, r0
 80118fa:	461a      	mov	r2, r3
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011900:	69fb      	ldr	r3, [r7, #28]
 8011902:	2200      	movs	r2, #0
 8011904:	719a      	strb	r2, [r3, #6]
 8011906:	2200      	movs	r2, #0
 8011908:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801190a:	4b27      	ldr	r3, [pc, #156]	; (80119a8 <ip4_output_if_src+0x148>)
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	4618      	mov	r0, r3
 8011910:	f7f6 f9f6 	bl	8007d00 <lwip_htons>
 8011914:	4603      	mov	r3, r0
 8011916:	461a      	mov	r2, r3
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801191c:	4b22      	ldr	r3, [pc, #136]	; (80119a8 <ip4_output_if_src+0x148>)
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	3301      	adds	r3, #1
 8011922:	b29a      	uxth	r2, r3
 8011924:	4b20      	ldr	r3, [pc, #128]	; (80119a8 <ip4_output_if_src+0x148>)
 8011926:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d104      	bne.n	8011938 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801192e:	4b1f      	ldr	r3, [pc, #124]	; (80119ac <ip4_output_if_src+0x14c>)
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	60da      	str	r2, [r3, #12]
 8011936:	e003      	b.n	8011940 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	2200      	movs	r2, #0
 8011944:	729a      	strb	r2, [r3, #10]
 8011946:	2200      	movs	r2, #0
 8011948:	72da      	strb	r2, [r3, #11]
 801194a:	e008      	b.n	801195e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011958:	f107 0314 	add.w	r3, r7, #20
 801195c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00c      	beq.n	8011980 <ip4_output_if_src+0x120>
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	891a      	ldrh	r2, [r3, #8]
 801196a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801196c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801196e:	429a      	cmp	r2, r3
 8011970:	d906      	bls.n	8011980 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	f000 fd0a 	bl	8012390 <ip4_frag>
 801197c:	4603      	mov	r3, r0
 801197e:	e006      	b.n	801198e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011982:	695b      	ldr	r3, [r3, #20]
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	68f9      	ldr	r1, [r7, #12]
 8011988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801198a:	4798      	blx	r3
 801198c:	4603      	mov	r3, r0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3720      	adds	r7, #32
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	08018310 	.word	0x08018310
 801199c:	08018344 	.word	0x08018344
 80119a0:	08018350 	.word	0x08018350
 80119a4:	08018378 	.word	0x08018378
 80119a8:	2000037e 	.word	0x2000037e
 80119ac:	080188ac 	.word	0x080188ac

080119b0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119c4:	d002      	beq.n	80119cc <ip4_addr_isbroadcast_u32+0x1c>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d101      	bne.n	80119d0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80119cc:	2301      	movs	r3, #1
 80119ce:	e02a      	b.n	8011a26 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80119d6:	f003 0302 	and.w	r3, r3, #2
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d101      	bne.n	80119e2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80119de:	2300      	movs	r3, #0
 80119e0:	e021      	b.n	8011a26 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	3304      	adds	r3, #4
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d101      	bne.n	80119f2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	e019      	b.n	8011a26 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	3304      	adds	r3, #4
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	405a      	eors	r2, r3
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	3308      	adds	r3, #8
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4013      	ands	r3, r2
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10d      	bne.n	8011a24 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	3308      	adds	r3, #8
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	43da      	mvns	r2, r3
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	3308      	adds	r3, #8
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d101      	bne.n	8011a24 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011a20:	2301      	movs	r3, #1
 8011a22:	e000      	b.n	8011a26 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011a24:	2300      	movs	r3, #0
  }
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr
	...

08011a34 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011a3e:	4b12      	ldr	r3, [pc, #72]	; (8011a88 <ip_reass_tmr+0x54>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011a44:	e018      	b.n	8011a78 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	7fdb      	ldrb	r3, [r3, #31]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00b      	beq.n	8011a66 <ip_reass_tmr+0x32>
      r->timer--;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	7fdb      	ldrb	r3, [r3, #31]
 8011a52:	3b01      	subs	r3, #1
 8011a54:	b2da      	uxtb	r2, r3
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	60fb      	str	r3, [r7, #12]
 8011a64:	e008      	b.n	8011a78 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011a70:	68b9      	ldr	r1, [r7, #8]
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f000 f80a 	bl	8011a8c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1e3      	bne.n	8011a46 <ip_reass_tmr+0x12>
     }
   }
}
 8011a7e:	bf00      	nop
 8011a80:	3710      	adds	r7, #16
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	20000380 	.word	0x20000380

08011a8c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b088      	sub	sp, #32
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d105      	bne.n	8011aae <ip_reass_free_complete_datagram+0x22>
 8011aa2:	4b45      	ldr	r3, [pc, #276]	; (8011bb8 <ip_reass_free_complete_datagram+0x12c>)
 8011aa4:	22ab      	movs	r2, #171	; 0xab
 8011aa6:	4945      	ldr	r1, [pc, #276]	; (8011bbc <ip_reass_free_complete_datagram+0x130>)
 8011aa8:	4845      	ldr	r0, [pc, #276]	; (8011bc0 <ip_reass_free_complete_datagram+0x134>)
 8011aaa:	f003 fe2d 	bl	8015708 <iprintf>
  if (prev != NULL) {
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d00a      	beq.n	8011aca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d005      	beq.n	8011aca <ip_reass_free_complete_datagram+0x3e>
 8011abe:	4b3e      	ldr	r3, [pc, #248]	; (8011bb8 <ip_reass_free_complete_datagram+0x12c>)
 8011ac0:	22ad      	movs	r2, #173	; 0xad
 8011ac2:	4940      	ldr	r1, [pc, #256]	; (8011bc4 <ip_reass_free_complete_datagram+0x138>)
 8011ac4:	483e      	ldr	r0, [pc, #248]	; (8011bc0 <ip_reass_free_complete_datagram+0x134>)
 8011ac6:	f003 fe1f 	bl	8015708 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	889b      	ldrh	r3, [r3, #4]
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d12a      	bne.n	8011b32 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	6858      	ldr	r0, [r3, #4]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	3308      	adds	r3, #8
 8011af2:	2214      	movs	r2, #20
 8011af4:	4619      	mov	r1, r3
 8011af6:	f003 fd4c 	bl	8015592 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011afa:	2101      	movs	r1, #1
 8011afc:	69b8      	ldr	r0, [r7, #24]
 8011afe:	f7ff fc47 	bl	8011390 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011b02:	69b8      	ldr	r0, [r7, #24]
 8011b04:	f7f7 fabc 	bl	8009080 <pbuf_clen>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011b0c:	8bfa      	ldrh	r2, [r7, #30]
 8011b0e:	8a7b      	ldrh	r3, [r7, #18]
 8011b10:	4413      	add	r3, r2
 8011b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b16:	db05      	blt.n	8011b24 <ip_reass_free_complete_datagram+0x98>
 8011b18:	4b27      	ldr	r3, [pc, #156]	; (8011bb8 <ip_reass_free_complete_datagram+0x12c>)
 8011b1a:	22bc      	movs	r2, #188	; 0xbc
 8011b1c:	492a      	ldr	r1, [pc, #168]	; (8011bc8 <ip_reass_free_complete_datagram+0x13c>)
 8011b1e:	4828      	ldr	r0, [pc, #160]	; (8011bc0 <ip_reass_free_complete_datagram+0x134>)
 8011b20:	f003 fdf2 	bl	8015708 <iprintf>
    pbufs_freed += clen;
 8011b24:	8bfa      	ldrh	r2, [r7, #30]
 8011b26:	8a7b      	ldrh	r3, [r7, #18]
 8011b28:	4413      	add	r3, r2
 8011b2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011b2c:	69b8      	ldr	r0, [r7, #24]
 8011b2e:	f7f7 fa13 	bl	8008f58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011b38:	e01f      	b.n	8011b7a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	f7f7 fa98 	bl	8009080 <pbuf_clen>
 8011b50:	4603      	mov	r3, r0
 8011b52:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011b54:	8bfa      	ldrh	r2, [r7, #30]
 8011b56:	8a7b      	ldrh	r3, [r7, #18]
 8011b58:	4413      	add	r3, r2
 8011b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b5e:	db05      	blt.n	8011b6c <ip_reass_free_complete_datagram+0xe0>
 8011b60:	4b15      	ldr	r3, [pc, #84]	; (8011bb8 <ip_reass_free_complete_datagram+0x12c>)
 8011b62:	22cc      	movs	r2, #204	; 0xcc
 8011b64:	4918      	ldr	r1, [pc, #96]	; (8011bc8 <ip_reass_free_complete_datagram+0x13c>)
 8011b66:	4816      	ldr	r0, [pc, #88]	; (8011bc0 <ip_reass_free_complete_datagram+0x134>)
 8011b68:	f003 fdce 	bl	8015708 <iprintf>
    pbufs_freed += clen;
 8011b6c:	8bfa      	ldrh	r2, [r7, #30]
 8011b6e:	8a7b      	ldrh	r3, [r7, #18]
 8011b70:	4413      	add	r3, r2
 8011b72:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011b74:	68f8      	ldr	r0, [r7, #12]
 8011b76:	f7f7 f9ef 	bl	8008f58 <pbuf_free>
  while (p != NULL) {
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d1dc      	bne.n	8011b3a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 f8c2 	bl	8011d0c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011b88:	4b10      	ldr	r3, [pc, #64]	; (8011bcc <ip_reass_free_complete_datagram+0x140>)
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	8bfa      	ldrh	r2, [r7, #30]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d905      	bls.n	8011b9e <ip_reass_free_complete_datagram+0x112>
 8011b92:	4b09      	ldr	r3, [pc, #36]	; (8011bb8 <ip_reass_free_complete_datagram+0x12c>)
 8011b94:	22d2      	movs	r2, #210	; 0xd2
 8011b96:	490e      	ldr	r1, [pc, #56]	; (8011bd0 <ip_reass_free_complete_datagram+0x144>)
 8011b98:	4809      	ldr	r0, [pc, #36]	; (8011bc0 <ip_reass_free_complete_datagram+0x134>)
 8011b9a:	f003 fdb5 	bl	8015708 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8011b9e:	4b0b      	ldr	r3, [pc, #44]	; (8011bcc <ip_reass_free_complete_datagram+0x140>)
 8011ba0:	881a      	ldrh	r2, [r3, #0]
 8011ba2:	8bfb      	ldrh	r3, [r7, #30]
 8011ba4:	1ad3      	subs	r3, r2, r3
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	4b08      	ldr	r3, [pc, #32]	; (8011bcc <ip_reass_free_complete_datagram+0x140>)
 8011baa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011bac:	8bfb      	ldrh	r3, [r7, #30]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3720      	adds	r7, #32
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	080183a8 	.word	0x080183a8
 8011bbc:	080183e4 	.word	0x080183e4
 8011bc0:	080183f0 	.word	0x080183f0
 8011bc4:	08018418 	.word	0x08018418
 8011bc8:	0801842c 	.word	0x0801842c
 8011bcc:	20000384 	.word	0x20000384
 8011bd0:	0801844c 	.word	0x0801844c

08011bd4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b08a      	sub	sp, #40	; 0x28
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011bde:	2300      	movs	r3, #0
 8011be0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011be2:	2300      	movs	r3, #0
 8011be4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011bea:	2300      	movs	r3, #0
 8011bec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011bf2:	4b28      	ldr	r3, [pc, #160]	; (8011c94 <ip_reass_remove_oldest_datagram+0xc0>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011bf8:	e030      	b.n	8011c5c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfc:	695a      	ldr	r2, [r3, #20]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d10c      	bne.n	8011c20 <ip_reass_remove_oldest_datagram+0x4c>
 8011c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c08:	699a      	ldr	r2, [r3, #24]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d106      	bne.n	8011c20 <ip_reass_remove_oldest_datagram+0x4c>
 8011c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c14:	899a      	ldrh	r2, [r3, #12]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	889b      	ldrh	r3, [r3, #4]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d014      	beq.n	8011c4a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	3301      	adds	r3, #1
 8011c24:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d104      	bne.n	8011c36 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	61bb      	str	r3, [r7, #24]
 8011c34:	e009      	b.n	8011c4a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c38:	7fda      	ldrb	r2, [r3, #31]
 8011c3a:	6a3b      	ldr	r3, [r7, #32]
 8011c3c:	7fdb      	ldrb	r3, [r3, #31]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d803      	bhi.n	8011c4a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c44:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011c46:	69fb      	ldr	r3, [r7, #28]
 8011c48:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d001      	beq.n	8011c56 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c54:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d1cb      	bne.n	8011bfa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011c62:	6a3b      	ldr	r3, [r7, #32]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d008      	beq.n	8011c7a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011c68:	69b9      	ldr	r1, [r7, #24]
 8011c6a:	6a38      	ldr	r0, [r7, #32]
 8011c6c:	f7ff ff0e 	bl	8011a8c <ip_reass_free_complete_datagram>
 8011c70:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011c72:	697a      	ldr	r2, [r7, #20]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	4413      	add	r3, r2
 8011c78:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011c7a:	697a      	ldr	r2, [r7, #20]
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	da02      	bge.n	8011c88 <ip_reass_remove_oldest_datagram+0xb4>
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	dcac      	bgt.n	8011be2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011c88:	697b      	ldr	r3, [r7, #20]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3728      	adds	r7, #40	; 0x28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	20000380 	.word	0x20000380

08011c98 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011ca2:	2004      	movs	r0, #4
 8011ca4:	f7f6 fbda 	bl	800845c <memp_malloc>
 8011ca8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d110      	bne.n	8011cd2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011cb0:	6839      	ldr	r1, [r7, #0]
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7ff ff8e 	bl	8011bd4 <ip_reass_remove_oldest_datagram>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	dc03      	bgt.n	8011cc8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011cc0:	2004      	movs	r0, #4
 8011cc2:	f7f6 fbcb 	bl	800845c <memp_malloc>
 8011cc6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d101      	bne.n	8011cd2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e016      	b.n	8011d00 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011cd2:	2220      	movs	r2, #32
 8011cd4:	2100      	movs	r1, #0
 8011cd6:	68f8      	ldr	r0, [r7, #12]
 8011cd8:	f003 fc66 	bl	80155a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2203      	movs	r2, #3
 8011ce0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011ce2:	4b09      	ldr	r3, [pc, #36]	; (8011d08 <ip_reass_enqueue_new_datagram+0x70>)
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011cea:	4a07      	ldr	r2, [pc, #28]	; (8011d08 <ip_reass_enqueue_new_datagram+0x70>)
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	3308      	adds	r3, #8
 8011cf4:	2214      	movs	r2, #20
 8011cf6:	6879      	ldr	r1, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f003 fc4a 	bl	8015592 <memcpy>
  return ipr;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3710      	adds	r7, #16
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	20000380 	.word	0x20000380

08011d0c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011d16:	4b10      	ldr	r3, [pc, #64]	; (8011d58 <ip_reass_dequeue_datagram+0x4c>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d104      	bne.n	8011d2a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4a0c      	ldr	r2, [pc, #48]	; (8011d58 <ip_reass_dequeue_datagram+0x4c>)
 8011d26:	6013      	str	r3, [r2, #0]
 8011d28:	e00d      	b.n	8011d46 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d106      	bne.n	8011d3e <ip_reass_dequeue_datagram+0x32>
 8011d30:	4b0a      	ldr	r3, [pc, #40]	; (8011d5c <ip_reass_dequeue_datagram+0x50>)
 8011d32:	f240 1245 	movw	r2, #325	; 0x145
 8011d36:	490a      	ldr	r1, [pc, #40]	; (8011d60 <ip_reass_dequeue_datagram+0x54>)
 8011d38:	480a      	ldr	r0, [pc, #40]	; (8011d64 <ip_reass_dequeue_datagram+0x58>)
 8011d3a:	f003 fce5 	bl	8015708 <iprintf>
    prev->next = ipr->next;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011d46:	6879      	ldr	r1, [r7, #4]
 8011d48:	2004      	movs	r0, #4
 8011d4a:	f7f6 fbd3 	bl	80084f4 <memp_free>
}
 8011d4e:	bf00      	nop
 8011d50:	3708      	adds	r7, #8
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	20000380 	.word	0x20000380
 8011d5c:	080183a8 	.word	0x080183a8
 8011d60:	08018468 	.word	0x08018468
 8011d64:	080183f0 	.word	0x080183f0

08011d68 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b08c      	sub	sp, #48	; 0x30
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011d74:	2300      	movs	r3, #0
 8011d76:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	885b      	ldrh	r3, [r3, #2]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7f5 ffb9 	bl	8007d00 <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	461a      	mov	r2, r3
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	f003 030f 	and.w	r3, r3, #15
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	1ad3      	subs	r3, r2, r3
 8011da4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011da6:	69fb      	ldr	r3, [r7, #28]
 8011da8:	88db      	ldrh	r3, [r3, #6]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7f5 ffa7 	bl	8007d00 <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	00db      	lsls	r3, r3, #3
 8011dbc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	701a      	strb	r2, [r3, #0]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	705a      	strb	r2, [r3, #1]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	709a      	strb	r2, [r3, #2]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd8:	8b3a      	ldrh	r2, [r7, #24]
 8011dda:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8011ddc:	8b3a      	ldrh	r2, [r7, #24]
 8011dde:	8b7b      	ldrh	r3, [r7, #26]
 8011de0:	4413      	add	r3, r2
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	627b      	str	r3, [r7, #36]	; 0x24
 8011dee:	e061      	b.n	8011eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	889b      	ldrh	r3, [r3, #4]
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	889b      	ldrh	r3, [r3, #4]
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d232      	bcs.n	8011e6c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e0a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d01f      	beq.n	8011e52 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e14:	889b      	ldrh	r3, [r3, #4]
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1a:	88db      	ldrh	r3, [r3, #6]
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	f0c0 80e3 	bcc.w	8011fea <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8011e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e26:	88db      	ldrh	r3, [r3, #6]
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	889b      	ldrh	r3, [r3, #4]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	429a      	cmp	r2, r3
 8011e32:	f200 80da 	bhi.w	8011fea <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e3e:	88db      	ldrh	r3, [r3, #6]
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e44:	889b      	ldrh	r3, [r3, #4]
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d037      	beq.n	8011ebc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011e50:	e034      	b.n	8011ebc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8011e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e54:	88db      	ldrh	r3, [r3, #6]
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	889b      	ldrh	r3, [r3, #4]
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	f200 80c5 	bhi.w	8011fee <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	68ba      	ldr	r2, [r7, #8]
 8011e68:	605a      	str	r2, [r3, #4]
      break;
 8011e6a:	e027      	b.n	8011ebc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	889b      	ldrh	r3, [r3, #4]
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	889b      	ldrh	r3, [r3, #4]
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	f000 80ba 	beq.w	8011ff2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e80:	889b      	ldrh	r3, [r3, #4]
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	88db      	ldrh	r3, [r3, #6]
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	f0c0 80b3 	bcc.w	8011ff6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d009      	beq.n	8011eaa <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8011e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e98:	88db      	ldrh	r3, [r3, #6]
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	889b      	ldrh	r3, [r3, #4]
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d001      	beq.n	8011eaa <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d19a      	bne.n	8011df0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8011eba:	e000      	b.n	8011ebe <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8011ebc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d12d      	bne.n	8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8011ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d01c      	beq.n	8011f04 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ecc:	88db      	ldrh	r3, [r3, #6]
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed2:	889b      	ldrh	r3, [r3, #4]
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d906      	bls.n	8011ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8011eda:	4b51      	ldr	r3, [pc, #324]	; (8012020 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011edc:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011ee0:	4950      	ldr	r1, [pc, #320]	; (8012024 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011ee2:	4851      	ldr	r0, [pc, #324]	; (8012028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011ee4:	f003 fc10 	bl	8015708 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	88db      	ldrh	r3, [r3, #6]
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef6:	889b      	ldrh	r3, [r3, #4]
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d010      	beq.n	8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	623b      	str	r3, [r7, #32]
 8011f02:	e00d      	b.n	8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d006      	beq.n	8011f1a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8011f0c:	4b44      	ldr	r3, [pc, #272]	; (8012020 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011f0e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8011f12:	4946      	ldr	r1, [pc, #280]	; (801202c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f14:	4844      	ldr	r0, [pc, #272]	; (8012028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011f16:	f003 fbf7 	bl	8015708 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d105      	bne.n	8011f32 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	7f9b      	ldrb	r3, [r3, #30]
 8011f2a:	f003 0301 	and.w	r3, r3, #1
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d059      	beq.n	8011fe6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8011f32:	6a3b      	ldr	r3, [r7, #32]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d04f      	beq.n	8011fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d006      	beq.n	8011f4e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	889b      	ldrh	r3, [r3, #4]
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d002      	beq.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	623b      	str	r3, [r7, #32]
 8011f52:	e041      	b.n	8011fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f56:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011f5e:	e012      	b.n	8011f86 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f62:	685b      	ldr	r3, [r3, #4]
 8011f64:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f68:	88db      	ldrh	r3, [r3, #6]
 8011f6a:	b29a      	uxth	r2, r3
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	889b      	ldrh	r3, [r3, #4]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d002      	beq.n	8011f7c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8011f76:	2300      	movs	r3, #0
 8011f78:	623b      	str	r3, [r7, #32]
            break;
 8011f7a:	e007      	b.n	8011f8c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8011f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1e9      	bne.n	8011f60 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011f8c:	6a3b      	ldr	r3, [r7, #32]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d022      	beq.n	8011fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8011f9a:	4b21      	ldr	r3, [pc, #132]	; (8012020 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011f9c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8011fa0:	4923      	ldr	r1, [pc, #140]	; (8012030 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011fa2:	4821      	ldr	r0, [pc, #132]	; (8012028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011fa4:	f003 fbb0 	bl	8015708 <iprintf>
          LWIP_ASSERT("sanity check",
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d106      	bne.n	8011fc2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8011fb4:	4b1a      	ldr	r3, [pc, #104]	; (8012020 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011fb6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011fba:	491d      	ldr	r1, [pc, #116]	; (8012030 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011fbc:	481a      	ldr	r0, [pc, #104]	; (8012028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011fbe:	f003 fba3 	bl	8015708 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d006      	beq.n	8011fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8011fca:	4b15      	ldr	r3, [pc, #84]	; (8012020 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011fcc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011fd0:	4918      	ldr	r1, [pc, #96]	; (8012034 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011fd2:	4815      	ldr	r0, [pc, #84]	; (8012028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011fd4:	f003 fb98 	bl	8015708 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011fd8:	6a3b      	ldr	r3, [r7, #32]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	bf14      	ite	ne
 8011fde:	2301      	movne	r3, #1
 8011fe0:	2300      	moveq	r3, #0
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	e018      	b.n	8012018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	e016      	b.n	8012018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8011fea:	bf00      	nop
 8011fec:	e004      	b.n	8011ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8011fee:	bf00      	nop
 8011ff0:	e002      	b.n	8011ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011ff2:	bf00      	nop
 8011ff4:	e000      	b.n	8011ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011ff6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8011ff8:	68b8      	ldr	r0, [r7, #8]
 8011ffa:	f7f7 f841 	bl	8009080 <pbuf_clen>
 8011ffe:	4603      	mov	r3, r0
 8012000:	461a      	mov	r2, r3
 8012002:	4b0d      	ldr	r3, [pc, #52]	; (8012038 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012004:	881b      	ldrh	r3, [r3, #0]
 8012006:	1a9b      	subs	r3, r3, r2
 8012008:	b29a      	uxth	r2, r3
 801200a:	4b0b      	ldr	r3, [pc, #44]	; (8012038 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801200c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801200e:	68b8      	ldr	r0, [r7, #8]
 8012010:	f7f6 ffa2 	bl	8008f58 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8012018:	4618      	mov	r0, r3
 801201a:	3730      	adds	r7, #48	; 0x30
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	080183a8 	.word	0x080183a8
 8012024:	08018484 	.word	0x08018484
 8012028:	080183f0 	.word	0x080183f0
 801202c:	080184a4 	.word	0x080184a4
 8012030:	080184dc 	.word	0x080184dc
 8012034:	080184ec 	.word	0x080184ec
 8012038:	20000384 	.word	0x20000384

0801203c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b08e      	sub	sp, #56	; 0x38
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	f003 030f 	and.w	r3, r3, #15
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	2b14      	cmp	r3, #20
 8012056:	f040 8131 	bne.w	80122bc <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205c:	88db      	ldrh	r3, [r3, #6]
 801205e:	b29b      	uxth	r3, r3
 8012060:	4618      	mov	r0, r3
 8012062:	f7f5 fe4d 	bl	8007d00 <lwip_htons>
 8012066:	4603      	mov	r3, r0
 8012068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801206c:	b29b      	uxth	r3, r3
 801206e:	00db      	lsls	r3, r3, #3
 8012070:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8012072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012074:	885b      	ldrh	r3, [r3, #2]
 8012076:	b29b      	uxth	r3, r3
 8012078:	4618      	mov	r0, r3
 801207a:	f7f5 fe41 	bl	8007d00 <lwip_htons>
 801207e:	4603      	mov	r3, r0
 8012080:	461a      	mov	r2, r3
 8012082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	b29b      	uxth	r3, r3
 8012088:	f003 030f 	and.w	r3, r3, #15
 801208c:	b29b      	uxth	r3, r3
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	b29b      	uxth	r3, r3
 8012092:	1ad3      	subs	r3, r2, r3
 8012094:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7f6 fff2 	bl	8009080 <pbuf_clen>
 801209c:	4603      	mov	r3, r0
 801209e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80120a0:	4b8d      	ldr	r3, [pc, #564]	; (80122d8 <ip4_reass+0x29c>)
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	461a      	mov	r2, r3
 80120a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120a8:	4413      	add	r3, r2
 80120aa:	2b0a      	cmp	r3, #10
 80120ac:	dd10      	ble.n	80120d0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80120ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120b0:	4619      	mov	r1, r3
 80120b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120b4:	f7ff fd8e 	bl	8011bd4 <ip_reass_remove_oldest_datagram>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f000 8100 	beq.w	80122c0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80120c0:	4b85      	ldr	r3, [pc, #532]	; (80122d8 <ip4_reass+0x29c>)
 80120c2:	881b      	ldrh	r3, [r3, #0]
 80120c4:	461a      	mov	r2, r3
 80120c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120c8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80120ca:	2b0a      	cmp	r3, #10
 80120cc:	f300 80f8 	bgt.w	80122c0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80120d0:	4b82      	ldr	r3, [pc, #520]	; (80122dc <ip4_reass+0x2a0>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	633b      	str	r3, [r7, #48]	; 0x30
 80120d6:	e015      	b.n	8012104 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80120d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120da:	695a      	ldr	r2, [r3, #20]
 80120dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d10c      	bne.n	80120fe <ip4_reass+0xc2>
 80120e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e6:	699a      	ldr	r2, [r3, #24]
 80120e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ea:	691b      	ldr	r3, [r3, #16]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d106      	bne.n	80120fe <ip4_reass+0xc2>
 80120f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f2:	899a      	ldrh	r2, [r3, #12]
 80120f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f6:	889b      	ldrh	r3, [r3, #4]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d006      	beq.n	801210c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80120fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	633b      	str	r3, [r7, #48]	; 0x30
 8012104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012106:	2b00      	cmp	r3, #0
 8012108:	d1e6      	bne.n	80120d8 <ip4_reass+0x9c>
 801210a:	e000      	b.n	801210e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801210c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012110:	2b00      	cmp	r3, #0
 8012112:	d109      	bne.n	8012128 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012116:	4619      	mov	r1, r3
 8012118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801211a:	f7ff fdbd 	bl	8011c98 <ip_reass_enqueue_new_datagram>
 801211e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012122:	2b00      	cmp	r3, #0
 8012124:	d11c      	bne.n	8012160 <ip4_reass+0x124>
      goto nullreturn;
 8012126:	e0ce      	b.n	80122c6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801212a:	88db      	ldrh	r3, [r3, #6]
 801212c:	b29b      	uxth	r3, r3
 801212e:	4618      	mov	r0, r3
 8012130:	f7f5 fde6 	bl	8007d00 <lwip_htons>
 8012134:	4603      	mov	r3, r0
 8012136:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801213a:	2b00      	cmp	r3, #0
 801213c:	d110      	bne.n	8012160 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012140:	89db      	ldrh	r3, [r3, #14]
 8012142:	4618      	mov	r0, r3
 8012144:	f7f5 fddc 	bl	8007d00 <lwip_htons>
 8012148:	4603      	mov	r3, r0
 801214a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801214e:	2b00      	cmp	r3, #0
 8012150:	d006      	beq.n	8012160 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	3308      	adds	r3, #8
 8012156:	2214      	movs	r2, #20
 8012158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801215a:	4618      	mov	r0, r3
 801215c:	f003 fa19 	bl	8015592 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012162:	88db      	ldrh	r3, [r3, #6]
 8012164:	b29b      	uxth	r3, r3
 8012166:	f003 0320 	and.w	r3, r3, #32
 801216a:	2b00      	cmp	r3, #0
 801216c:	bf0c      	ite	eq
 801216e:	2301      	moveq	r3, #1
 8012170:	2300      	movne	r3, #0
 8012172:	b2db      	uxtb	r3, r3
 8012174:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00e      	beq.n	801219a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801217c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801217e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012180:	4413      	add	r3, r2
 8012182:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012184:	8b7a      	ldrh	r2, [r7, #26]
 8012186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012188:	429a      	cmp	r2, r3
 801218a:	f0c0 8099 	bcc.w	80122c0 <ip4_reass+0x284>
 801218e:	8b7b      	ldrh	r3, [r7, #26]
 8012190:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012194:	4293      	cmp	r3, r2
 8012196:	f200 8093 	bhi.w	80122c0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801219a:	69fa      	ldr	r2, [r7, #28]
 801219c:	6879      	ldr	r1, [r7, #4]
 801219e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121a0:	f7ff fde2 	bl	8011d68 <ip_reass_chain_frag_into_datagram_and_validate>
 80121a4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80121ac:	f000 808a 	beq.w	80122c4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80121b0:	4b49      	ldr	r3, [pc, #292]	; (80122d8 <ip4_reass+0x29c>)
 80121b2:	881a      	ldrh	r2, [r3, #0]
 80121b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121b6:	4413      	add	r3, r2
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	4b47      	ldr	r3, [pc, #284]	; (80122d8 <ip4_reass+0x29c>)
 80121bc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80121be:	69fb      	ldr	r3, [r7, #28]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d00d      	beq.n	80121e0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80121c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80121c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121c8:	4413      	add	r3, r2
 80121ca:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80121cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ce:	8a7a      	ldrh	r2, [r7, #18]
 80121d0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80121d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d4:	7f9b      	ldrb	r3, [r3, #30]
 80121d6:	f043 0301 	orr.w	r3, r3, #1
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121de:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d168      	bne.n	80122b8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80121e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e8:	8b9b      	ldrh	r3, [r3, #28]
 80121ea:	3314      	adds	r3, #20
 80121ec:	b29a      	uxth	r2, r3
 80121ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80121f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80121fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012206:	3308      	adds	r3, #8
 8012208:	2214      	movs	r2, #20
 801220a:	4619      	mov	r1, r3
 801220c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801220e:	f003 f9c0 	bl	8015592 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8012212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012214:	8b9b      	ldrh	r3, [r3, #28]
 8012216:	4618      	mov	r0, r3
 8012218:	f7f5 fd72 	bl	8007d00 <lwip_htons>
 801221c:	4603      	mov	r3, r0
 801221e:	461a      	mov	r2, r3
 8012220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012222:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012226:	2200      	movs	r2, #0
 8012228:	719a      	strb	r2, [r3, #6]
 801222a:	2200      	movs	r2, #0
 801222c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	2200      	movs	r2, #0
 8012232:	729a      	strb	r2, [r3, #10]
 8012234:	2200      	movs	r2, #0
 8012236:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801223e:	e00e      	b.n	801225e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8012240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012246:	f06f 0113 	mvn.w	r1, #19
 801224a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801224c:	f7f6 fe60 	bl	8008f10 <pbuf_header>
      pbuf_cat(p, r);
 8012250:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7f6 ff4e 	bl	80090f4 <pbuf_cat>
      r = iprh->next_pbuf;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012260:	2b00      	cmp	r3, #0
 8012262:	d1ed      	bne.n	8012240 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012264:	4b1d      	ldr	r3, [pc, #116]	; (80122dc <ip4_reass+0x2a0>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801226a:	429a      	cmp	r2, r3
 801226c:	d102      	bne.n	8012274 <ip4_reass+0x238>
      ipr_prev = NULL;
 801226e:	2300      	movs	r3, #0
 8012270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012272:	e010      	b.n	8012296 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012274:	4b19      	ldr	r3, [pc, #100]	; (80122dc <ip4_reass+0x2a0>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	62fb      	str	r3, [r7, #44]	; 0x2c
 801227a:	e007      	b.n	801228c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012282:	429a      	cmp	r2, r3
 8012284:	d006      	beq.n	8012294 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1f4      	bne.n	801227c <ip4_reass+0x240>
 8012292:	e000      	b.n	8012296 <ip4_reass+0x25a>
          break;
 8012294:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801229a:	f7ff fd37 	bl	8011d0c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f7f6 feee 	bl	8009080 <pbuf_clen>
 80122a4:	4603      	mov	r3, r0
 80122a6:	461a      	mov	r2, r3
 80122a8:	4b0b      	ldr	r3, [pc, #44]	; (80122d8 <ip4_reass+0x29c>)
 80122aa:	881b      	ldrh	r3, [r3, #0]
 80122ac:	1a9b      	subs	r3, r3, r2
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	4b09      	ldr	r3, [pc, #36]	; (80122d8 <ip4_reass+0x29c>)
 80122b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	e00a      	b.n	80122ce <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80122b8:	2300      	movs	r3, #0
 80122ba:	e008      	b.n	80122ce <ip4_reass+0x292>
    goto nullreturn;
 80122bc:	bf00      	nop
 80122be:	e002      	b.n	80122c6 <ip4_reass+0x28a>

nullreturn:
 80122c0:	bf00      	nop
 80122c2:	e000      	b.n	80122c6 <ip4_reass+0x28a>
    goto nullreturn;
 80122c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7f6 fe46 	bl	8008f58 <pbuf_free>
  return NULL;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3738      	adds	r7, #56	; 0x38
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	20000384 	.word	0x20000384
 80122dc:	20000380 	.word	0x20000380

080122e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80122e4:	2005      	movs	r0, #5
 80122e6:	f7f6 f8b9 	bl	800845c <memp_malloc>
 80122ea:	4603      	mov	r3, r0
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d106      	bne.n	801230c <ip_frag_free_pbuf_custom_ref+0x1c>
 80122fe:	4b07      	ldr	r3, [pc, #28]	; (801231c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012300:	f240 22ae 	movw	r2, #686	; 0x2ae
 8012304:	4906      	ldr	r1, [pc, #24]	; (8012320 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012306:	4807      	ldr	r0, [pc, #28]	; (8012324 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012308:	f003 f9fe 	bl	8015708 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801230c:	6879      	ldr	r1, [r7, #4]
 801230e:	2005      	movs	r0, #5
 8012310:	f7f6 f8f0 	bl	80084f4 <memp_free>
}
 8012314:	bf00      	nop
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	080183a8 	.word	0x080183a8
 8012320:	08018510 	.word	0x08018510
 8012324:	080183f0 	.word	0x080183f0

08012328 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d106      	bne.n	8012348 <ipfrag_free_pbuf_custom+0x20>
 801233a:	4b11      	ldr	r3, [pc, #68]	; (8012380 <ipfrag_free_pbuf_custom+0x58>)
 801233c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8012340:	4910      	ldr	r1, [pc, #64]	; (8012384 <ipfrag_free_pbuf_custom+0x5c>)
 8012342:	4811      	ldr	r0, [pc, #68]	; (8012388 <ipfrag_free_pbuf_custom+0x60>)
 8012344:	f003 f9e0 	bl	8015708 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	429a      	cmp	r2, r3
 801234e:	d006      	beq.n	801235e <ipfrag_free_pbuf_custom+0x36>
 8012350:	4b0b      	ldr	r3, [pc, #44]	; (8012380 <ipfrag_free_pbuf_custom+0x58>)
 8012352:	f240 22b9 	movw	r2, #697	; 0x2b9
 8012356:	490d      	ldr	r1, [pc, #52]	; (801238c <ipfrag_free_pbuf_custom+0x64>)
 8012358:	480b      	ldr	r0, [pc, #44]	; (8012388 <ipfrag_free_pbuf_custom+0x60>)
 801235a:	f003 f9d5 	bl	8015708 <iprintf>
  if (pcr->original != NULL) {
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	695b      	ldr	r3, [r3, #20]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d004      	beq.n	8012370 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	695b      	ldr	r3, [r3, #20]
 801236a:	4618      	mov	r0, r3
 801236c:	f7f6 fdf4 	bl	8008f58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f7ff ffbd 	bl	80122f0 <ip_frag_free_pbuf_custom_ref>
}
 8012376:	bf00      	nop
 8012378:	3710      	adds	r7, #16
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	080183a8 	.word	0x080183a8
 8012384:	0801851c 	.word	0x0801851c
 8012388:	080183f0 	.word	0x080183f0
 801238c:	08018528 	.word	0x08018528

08012390 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b092      	sub	sp, #72	; 0x48
 8012394:	af02      	add	r7, sp, #8
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801239c:	2300      	movs	r3, #0
 801239e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80123a4:	3b14      	subs	r3, #20
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	da00      	bge.n	80123ac <ip4_frag+0x1c>
 80123aa:	3307      	adds	r3, #7
 80123ac:	10db      	asrs	r3, r3, #3
 80123ae:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80123b0:	2314      	movs	r3, #20
 80123b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80123ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123bc:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80123be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	f003 030f 	and.w	r3, r3, #15
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	2b14      	cmp	r3, #20
 80123ca:	d009      	beq.n	80123e0 <ip4_frag+0x50>
 80123cc:	4b79      	ldr	r3, [pc, #484]	; (80125b4 <ip4_frag+0x224>)
 80123ce:	f240 22e1 	movw	r2, #737	; 0x2e1
 80123d2:	4979      	ldr	r1, [pc, #484]	; (80125b8 <ip4_frag+0x228>)
 80123d4:	4879      	ldr	r0, [pc, #484]	; (80125bc <ip4_frag+0x22c>)
 80123d6:	f003 f997 	bl	8015708 <iprintf>
 80123da:	f06f 0305 	mvn.w	r3, #5
 80123de:	e0e5      	b.n	80125ac <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80123e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e2:	88db      	ldrh	r3, [r3, #6]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7f5 fc8a 	bl	8007d00 <lwip_htons>
 80123ec:	4603      	mov	r3, r0
 80123ee:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80123f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80123f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123f6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80123f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80123fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d009      	beq.n	8012416 <ip4_frag+0x86>
 8012402:	4b6c      	ldr	r3, [pc, #432]	; (80125b4 <ip4_frag+0x224>)
 8012404:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012408:	496d      	ldr	r1, [pc, #436]	; (80125c0 <ip4_frag+0x230>)
 801240a:	486c      	ldr	r0, [pc, #432]	; (80125bc <ip4_frag+0x22c>)
 801240c:	f003 f97c 	bl	8015708 <iprintf>
 8012410:	f06f 0305 	mvn.w	r3, #5
 8012414:	e0ca      	b.n	80125ac <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	891b      	ldrh	r3, [r3, #8]
 801241a:	3b14      	subs	r3, #20
 801241c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801241e:	e0bc      	b.n	801259a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8012420:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012422:	00da      	lsls	r2, r3, #3
 8012424:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012426:	4293      	cmp	r3, r2
 8012428:	bfa8      	it	ge
 801242a:	4613      	movge	r3, r2
 801242c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801242e:	2200      	movs	r2, #0
 8012430:	2114      	movs	r1, #20
 8012432:	2002      	movs	r0, #2
 8012434:	f7f6 fa1e 	bl	8008874 <pbuf_alloc>
 8012438:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801243a:	6a3b      	ldr	r3, [r7, #32]
 801243c:	2b00      	cmp	r3, #0
 801243e:	f000 80b2 	beq.w	80125a6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	895b      	ldrh	r3, [r3, #10]
 8012446:	2b13      	cmp	r3, #19
 8012448:	d806      	bhi.n	8012458 <ip4_frag+0xc8>
 801244a:	4b5a      	ldr	r3, [pc, #360]	; (80125b4 <ip4_frag+0x224>)
 801244c:	f240 3209 	movw	r2, #777	; 0x309
 8012450:	495c      	ldr	r1, [pc, #368]	; (80125c4 <ip4_frag+0x234>)
 8012452:	485a      	ldr	r0, [pc, #360]	; (80125bc <ip4_frag+0x22c>)
 8012454:	f003 f958 	bl	8015708 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012458:	6a3b      	ldr	r3, [r7, #32]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	2214      	movs	r2, #20
 801245e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012460:	4618      	mov	r0, r3
 8012462:	f003 f896 	bl	8015592 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012466:	6a3b      	ldr	r3, [r7, #32]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801246c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801246e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8012470:	e04f      	b.n	8012512 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	895a      	ldrh	r2, [r3, #10]
 8012476:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012478:	1ad3      	subs	r3, r2, r3
 801247a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801247c:	8b7a      	ldrh	r2, [r7, #26]
 801247e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012480:	4293      	cmp	r3, r2
 8012482:	bf28      	it	cs
 8012484:	4613      	movcs	r3, r2
 8012486:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012488:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801248a:	2b00      	cmp	r3, #0
 801248c:	d105      	bne.n	801249a <ip4_frag+0x10a>
        poff = 0;
 801248e:	2300      	movs	r3, #0
 8012490:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	60fb      	str	r3, [r7, #12]
        continue;
 8012498:	e03b      	b.n	8012512 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801249a:	f7ff ff21 	bl	80122e0 <ip_frag_alloc_pbuf_custom_ref>
 801249e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d103      	bne.n	80124ae <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80124a6:	6a38      	ldr	r0, [r7, #32]
 80124a8:	f7f6 fd56 	bl	8008f58 <pbuf_free>
        goto memerr;
 80124ac:	e07c      	b.n	80125a8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80124ae:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80124b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80124b6:	4413      	add	r3, r2
 80124b8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80124ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80124bc:	9201      	str	r2, [sp, #4]
 80124be:	9300      	str	r3, [sp, #0]
 80124c0:	4603      	mov	r3, r0
 80124c2:	2202      	movs	r2, #2
 80124c4:	2004      	movs	r0, #4
 80124c6:	f7f6 fb69 	bl	8008b9c <pbuf_alloced_custom>
 80124ca:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d106      	bne.n	80124e0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80124d2:	6978      	ldr	r0, [r7, #20]
 80124d4:	f7ff ff0c 	bl	80122f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80124d8:	6a38      	ldr	r0, [r7, #32]
 80124da:	f7f6 fd3d 	bl	8008f58 <pbuf_free>
        goto memerr;
 80124de:	e063      	b.n	80125a8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80124e0:	68f8      	ldr	r0, [r7, #12]
 80124e2:	f7f6 fde5 	bl	80090b0 <pbuf_ref>
      pcr->original = p;
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	4a36      	ldr	r2, [pc, #216]	; (80125c8 <ip4_frag+0x238>)
 80124f0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80124f2:	6939      	ldr	r1, [r7, #16]
 80124f4:	6a38      	ldr	r0, [r7, #32]
 80124f6:	f7f6 fdfd 	bl	80090f4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80124fa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80124fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8012502:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012504:	2b00      	cmp	r3, #0
 8012506:	d004      	beq.n	8012512 <ip4_frag+0x182>
        poff = 0;
 8012508:	2300      	movs	r3, #0
 801250a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012512:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1ac      	bne.n	8012472 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8012518:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801251a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801251c:	4413      	add	r3, r2
 801251e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012520:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012526:	3b14      	subs	r3, #20
 8012528:	429a      	cmp	r2, r3
 801252a:	bfd4      	ite	le
 801252c:	2301      	movle	r3, #1
 801252e:	2300      	movgt	r3, #0
 8012530:	b2db      	uxtb	r3, r3
 8012532:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012534:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801253a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801253c:	69fb      	ldr	r3, [r7, #28]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d103      	bne.n	801254a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8012542:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012548:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801254a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801254c:	4618      	mov	r0, r3
 801254e:	f7f5 fbd7 	bl	8007d00 <lwip_htons>
 8012552:	4603      	mov	r3, r0
 8012554:	461a      	mov	r2, r3
 8012556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012558:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801255a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801255c:	3314      	adds	r3, #20
 801255e:	b29b      	uxth	r3, r3
 8012560:	4618      	mov	r0, r3
 8012562:	f7f5 fbcd 	bl	8007d00 <lwip_htons>
 8012566:	4603      	mov	r3, r0
 8012568:	461a      	mov	r2, r3
 801256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012570:	2200      	movs	r2, #0
 8012572:	729a      	strb	r2, [r3, #10]
 8012574:	2200      	movs	r2, #0
 8012576:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	695b      	ldr	r3, [r3, #20]
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	6a39      	ldr	r1, [r7, #32]
 8012580:	68b8      	ldr	r0, [r7, #8]
 8012582:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012584:	6a38      	ldr	r0, [r7, #32]
 8012586:	f7f6 fce7 	bl	8008f58 <pbuf_free>
    left -= fragsize;
 801258a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801258c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8012592:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012594:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012596:	4413      	add	r3, r2
 8012598:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801259a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801259c:	2b00      	cmp	r3, #0
 801259e:	f47f af3f 	bne.w	8012420 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80125a2:	2300      	movs	r3, #0
 80125a4:	e002      	b.n	80125ac <ip4_frag+0x21c>
      goto memerr;
 80125a6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80125a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3740      	adds	r7, #64	; 0x40
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	080183a8 	.word	0x080183a8
 80125b8:	08018534 	.word	0x08018534
 80125bc:	080183f0 	.word	0x080183f0
 80125c0:	0801855c 	.word	0x0801855c
 80125c4:	08018578 	.word	0x08018578
 80125c8:	08012329 	.word	0x08012329

080125cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b086      	sub	sp, #24
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80125d6:	230e      	movs	r3, #14
 80125d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	895b      	ldrh	r3, [r3, #10]
 80125de:	2b0e      	cmp	r3, #14
 80125e0:	d977      	bls.n	80126d2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	7b1a      	ldrb	r2, [r3, #12]
 80125ec:	7b5b      	ldrb	r3, [r3, #13]
 80125ee:	021b      	lsls	r3, r3, #8
 80125f0:	4313      	orrs	r3, r2
 80125f2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	f003 0301 	and.w	r3, r3, #1
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d023      	beq.n	8012648 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b01      	cmp	r3, #1
 8012606:	d10f      	bne.n	8012628 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	785b      	ldrb	r3, [r3, #1]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d11b      	bne.n	8012648 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012614:	2b5e      	cmp	r3, #94	; 0x5e
 8012616:	d117      	bne.n	8012648 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	7b5b      	ldrb	r3, [r3, #13]
 801261c:	f043 0310 	orr.w	r3, r3, #16
 8012620:	b2da      	uxtb	r2, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	735a      	strb	r2, [r3, #13]
 8012626:	e00f      	b.n	8012648 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	2206      	movs	r2, #6
 801262c:	4930      	ldr	r1, [pc, #192]	; (80126f0 <ethernet_input+0x124>)
 801262e:	4618      	mov	r0, r3
 8012630:	f002 ffa0 	bl	8015574 <memcmp>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d106      	bne.n	8012648 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	7b5b      	ldrb	r3, [r3, #13]
 801263e:	f043 0308 	orr.w	r3, r3, #8
 8012642:	b2da      	uxtb	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012648:	89fb      	ldrh	r3, [r7, #14]
 801264a:	2b08      	cmp	r3, #8
 801264c:	d003      	beq.n	8012656 <ethernet_input+0x8a>
 801264e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012652:	d01e      	beq.n	8012692 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012654:	e044      	b.n	80126e0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801265c:	f003 0308 	and.w	r3, r3, #8
 8012660:	2b00      	cmp	r3, #0
 8012662:	d038      	beq.n	80126d6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	895b      	ldrh	r3, [r3, #10]
 8012668:	461a      	mov	r2, r3
 801266a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801266e:	429a      	cmp	r2, r3
 8012670:	db33      	blt.n	80126da <ethernet_input+0x10e>
 8012672:	8afb      	ldrh	r3, [r7, #22]
 8012674:	425b      	negs	r3, r3
 8012676:	b29b      	uxth	r3, r3
 8012678:	b21b      	sxth	r3, r3
 801267a:	4619      	mov	r1, r3
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f7f6 fc47 	bl	8008f10 <pbuf_header>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d128      	bne.n	80126da <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012688:	6839      	ldr	r1, [r7, #0]
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7fe ff62 	bl	8011554 <ip4_input>
      break;
 8012690:	e01d      	b.n	80126ce <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012698:	f003 0308 	and.w	r3, r3, #8
 801269c:	2b00      	cmp	r3, #0
 801269e:	d01e      	beq.n	80126de <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	895b      	ldrh	r3, [r3, #10]
 80126a4:	461a      	mov	r2, r3
 80126a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	db15      	blt.n	80126da <ethernet_input+0x10e>
 80126ae:	8afb      	ldrh	r3, [r7, #22]
 80126b0:	425b      	negs	r3, r3
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	b21b      	sxth	r3, r3
 80126b6:	4619      	mov	r1, r3
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7f6 fc29 	bl	8008f10 <pbuf_header>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d10a      	bne.n	80126da <ethernet_input+0x10e>
        etharp_input(p, netif);
 80126c4:	6839      	ldr	r1, [r7, #0]
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f7fe f92c 	bl	8010924 <etharp_input>
      break;
 80126cc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80126ce:	2300      	movs	r3, #0
 80126d0:	e00a      	b.n	80126e8 <ethernet_input+0x11c>
    goto free_and_return;
 80126d2:	bf00      	nop
 80126d4:	e004      	b.n	80126e0 <ethernet_input+0x114>
        goto free_and_return;
 80126d6:	bf00      	nop
 80126d8:	e002      	b.n	80126e0 <ethernet_input+0x114>

free_and_return:
 80126da:	bf00      	nop
 80126dc:	e000      	b.n	80126e0 <ethernet_input+0x114>
        goto free_and_return;
 80126de:	bf00      	nop
  pbuf_free(p);
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7f6 fc39 	bl	8008f58 <pbuf_free>
  return ERR_OK;
 80126e6:	2300      	movs	r3, #0
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3718      	adds	r7, #24
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	080188b4 	.word	0x080188b4

080126f4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b086      	sub	sp, #24
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
 8012700:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012702:	8c3b      	ldrh	r3, [r7, #32]
 8012704:	4618      	mov	r0, r3
 8012706:	f7f5 fafb 	bl	8007d00 <lwip_htons>
 801270a:	4603      	mov	r3, r0
 801270c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801270e:	210e      	movs	r1, #14
 8012710:	68b8      	ldr	r0, [r7, #8]
 8012712:	f7f6 fbfd 	bl	8008f10 <pbuf_header>
 8012716:	4603      	mov	r3, r0
 8012718:	2b00      	cmp	r3, #0
 801271a:	d125      	bne.n	8012768 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	8afa      	ldrh	r2, [r7, #22]
 8012726:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	2206      	movs	r2, #6
 801272c:	6839      	ldr	r1, [r7, #0]
 801272e:	4618      	mov	r0, r3
 8012730:	f002 ff2f 	bl	8015592 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	3306      	adds	r3, #6
 8012738:	2206      	movs	r2, #6
 801273a:	6879      	ldr	r1, [r7, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	f002 ff28 	bl	8015592 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012748:	2b06      	cmp	r3, #6
 801274a:	d006      	beq.n	801275a <ethernet_output+0x66>
 801274c:	4b0a      	ldr	r3, [pc, #40]	; (8012778 <ethernet_output+0x84>)
 801274e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012752:	490a      	ldr	r1, [pc, #40]	; (801277c <ethernet_output+0x88>)
 8012754:	480a      	ldr	r0, [pc, #40]	; (8012780 <ethernet_output+0x8c>)
 8012756:	f002 ffd7 	bl	8015708 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	699b      	ldr	r3, [r3, #24]
 801275e:	68b9      	ldr	r1, [r7, #8]
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	4798      	blx	r3
 8012764:	4603      	mov	r3, r0
 8012766:	e002      	b.n	801276e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012768:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801276a:	f06f 0301 	mvn.w	r3, #1
}
 801276e:	4618      	mov	r0, r3
 8012770:	3718      	adds	r7, #24
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	08018598 	.word	0x08018598
 801277c:	080185d0 	.word	0x080185d0
 8012780:	08018604 	.word	0x08018604

08012784 <F_TCP_paquetTocmd>:




void F_TCP_paquetTocmd(struct pbuf *p, struct tcp_command *s_cmd_received)
{
 8012784:	b480      	push	{r7}
 8012786:	b08b      	sub	sp, #44	; 0x2c
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
	uint8_t *tempPtr;
	uint8_t i = 0;
 801278e:	2300      	movs	r3, #0
 8012790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tempPtr = (uint8_t *)p->payload;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint8_t tab_reveived[20] = {0};
 801279a:	f107 030c 	add.w	r3, r7, #12
 801279e:	2200      	movs	r2, #0
 80127a0:	601a      	str	r2, [r3, #0]
 80127a2:	605a      	str	r2, [r3, #4]
 80127a4:	609a      	str	r2, [r3, #8]
 80127a6:	60da      	str	r2, [r3, #12]
 80127a8:	611a      	str	r2, [r3, #16]

	for(i=0; i<(p->len);i++)
 80127aa:	2300      	movs	r3, #0
 80127ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80127b0:	e010      	b.n	80127d4 <F_TCP_paquetTocmd+0x50>
	{

		tab_reveived[i] = (uint8_t) *(tempPtr++);
 80127b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b4:	1c5a      	adds	r2, r3, #1
 80127b6:	627a      	str	r2, [r7, #36]	; 0x24
 80127b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80127bc:	7819      	ldrb	r1, [r3, #0]
 80127be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80127c2:	4413      	add	r3, r2
 80127c4:	460a      	mov	r2, r1
 80127c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(i=0; i<(p->len);i++)
 80127ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127ce:	3301      	adds	r3, #1
 80127d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80127d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127d8:	b29a      	uxth	r2, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	895b      	ldrh	r3, [r3, #10]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d3e7      	bcc.n	80127b2 <F_TCP_paquetTocmd+0x2e>

	}

	s_cmd_received->id = (uint32_t)((tab_reveived[0] << 24) + (tab_reveived[1] << 16) + (tab_reveived[2] << 8) + tab_reveived[3]);
 80127e2:	7b3b      	ldrb	r3, [r7, #12]
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	061a      	lsls	r2, r3, #24
 80127e8:	7b7b      	ldrb	r3, [r7, #13]
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	041b      	lsls	r3, r3, #16
 80127ee:	441a      	add	r2, r3
 80127f0:	7bbb      	ldrb	r3, [r7, #14]
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	021b      	lsls	r3, r3, #8
 80127f6:	4413      	add	r3, r2
 80127f8:	7bfa      	ldrb	r2, [r7, #15]
 80127fa:	b2d2      	uxtb	r2, r2
 80127fc:	4413      	add	r3, r2
 80127fe:	461a      	mov	r2, r3
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	601a      	str	r2, [r3, #0]
	s_cmd_received->nb_octet = tab_reveived[4];
 8012804:	7c3b      	ldrb	r3, [r7, #16]
 8012806:	b2da      	uxtb	r2, r3
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	711a      	strb	r2, [r3, #4]
	s_cmd_received->cmd = tab_reveived[5];
 801280c:	7c7b      	ldrb	r3, [r7, #17]
 801280e:	b2da      	uxtb	r2, r3
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	715a      	strb	r2, [r3, #5]
	s_cmd_received->nb_param = tab_reveived[6];
 8012814:	7cbb      	ldrb	r3, [r7, #18]
 8012816:	b2da      	uxtb	r2, r3
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	719a      	strb	r2, [r3, #6]
	s_cmd_received->params[0] = (uint16_t)((tab_reveived[7] << 8) + tab_reveived[8]);
 801281c:	7cfb      	ldrb	r3, [r7, #19]
 801281e:	b2db      	uxtb	r3, r3
 8012820:	b29b      	uxth	r3, r3
 8012822:	021b      	lsls	r3, r3, #8
 8012824:	b29a      	uxth	r2, r3
 8012826:	7d3b      	ldrb	r3, [r7, #20]
 8012828:	b2db      	uxtb	r3, r3
 801282a:	b29b      	uxth	r3, r3
 801282c:	4413      	add	r3, r2
 801282e:	b29a      	uxth	r2, r3
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	811a      	strh	r2, [r3, #8]
	s_cmd_received->params[1] = (uint16_t)((tab_reveived[9] << 8) + tab_reveived[10]);
 8012834:	7d7b      	ldrb	r3, [r7, #21]
 8012836:	b2db      	uxtb	r3, r3
 8012838:	b29b      	uxth	r3, r3
 801283a:	021b      	lsls	r3, r3, #8
 801283c:	b29a      	uxth	r2, r3
 801283e:	7dbb      	ldrb	r3, [r7, #22]
 8012840:	b2db      	uxtb	r3, r3
 8012842:	b29b      	uxth	r3, r3
 8012844:	4413      	add	r3, r2
 8012846:	b29a      	uxth	r2, r3
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	815a      	strh	r2, [r3, #10]
	s_cmd_received->params[2] = (uint16_t)((tab_reveived[11] << 8) +tab_reveived[12]);
 801284c:	7dfb      	ldrb	r3, [r7, #23]
 801284e:	b2db      	uxtb	r3, r3
 8012850:	b29b      	uxth	r3, r3
 8012852:	021b      	lsls	r3, r3, #8
 8012854:	b29a      	uxth	r2, r3
 8012856:	7e3b      	ldrb	r3, [r7, #24]
 8012858:	b2db      	uxtb	r3, r3
 801285a:	b29b      	uxth	r3, r3
 801285c:	4413      	add	r3, r2
 801285e:	b29a      	uxth	r2, r3
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	819a      	strh	r2, [r3, #12]
	s_cmd_received->params[3] = (uint16_t)((tab_reveived[13] << 8) + tab_reveived[14]);
 8012864:	7e7b      	ldrb	r3, [r7, #25]
 8012866:	b2db      	uxtb	r3, r3
 8012868:	b29b      	uxth	r3, r3
 801286a:	021b      	lsls	r3, r3, #8
 801286c:	b29a      	uxth	r2, r3
 801286e:	7ebb      	ldrb	r3, [r7, #26]
 8012870:	b2db      	uxtb	r3, r3
 8012872:	b29b      	uxth	r3, r3
 8012874:	4413      	add	r3, r2
 8012876:	b29a      	uxth	r2, r3
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	81da      	strh	r2, [r3, #14]

}
 801287c:	bf00      	nop
 801287e:	372c      	adds	r7, #44	; 0x2c
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr

08012888 <F_TCP_answerTotab>:

void F_TCP_answerTotab(uint8_t *array, struct tcp_answer s_cmd_answer)
{
 8012888:	b084      	sub	sp, #16
 801288a:	b480      	push	{r7}
 801288c:	b085      	sub	sp, #20
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
 8012892:	f107 001c 	add.w	r0, r7, #28
 8012896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t i = 0, j = 0;
 801289a:	2300      	movs	r3, #0
 801289c:	73fb      	strb	r3, [r7, #15]
 801289e:	2300      	movs	r3, #0
 80128a0:	73bb      	strb	r3, [r7, #14]

	array[0] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 24));
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	0e1b      	lsrs	r3, r3, #24
 80128a6:	b2da      	uxtb	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	701a      	strb	r2, [r3, #0]
	array[1] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 16));
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	0c1a      	lsrs	r2, r3, #16
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3301      	adds	r3, #1
 80128b4:	b2d2      	uxtb	r2, r2
 80128b6:	701a      	strb	r2, [r3, #0]
	array[2] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 8));
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	0a1a      	lsrs	r2, r3, #8
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	3302      	adds	r3, #2
 80128c0:	b2d2      	uxtb	r2, r2
 80128c2:	701a      	strb	r2, [r3, #0]
	array[3] = (uint8_t)(0x00FF & s_cmd_answer.id);
 80128c4:	69fa      	ldr	r2, [r7, #28]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	3303      	adds	r3, #3
 80128ca:	b2d2      	uxtb	r2, r2
 80128cc:	701a      	strb	r2, [r3, #0]
	array[4] = s_cmd_answer.nb_octet;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	3304      	adds	r3, #4
 80128d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80128d6:	701a      	strb	r2, [r3, #0]
	array[5] = s_cmd_answer.cmd;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	3305      	adds	r3, #5
 80128dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80128e0:	701a      	strb	r2, [r3, #0]
	array[6] = s_cmd_answer.code_retour;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	3306      	adds	r3, #6
 80128e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80128ea:	701a      	strb	r2, [r3, #0]

	for(i=0;i<SIZE_PARAM_CMD;i++)
 80128ec:	2300      	movs	r3, #0
 80128ee:	73fb      	strb	r3, [r7, #15]
 80128f0:	e022      	b.n	8012938 <F_TCP_answerTotab+0xb0>
	{
		array[7+j] = (uint8_t)(0x00FF & (s_cmd_answer.reponse[i] >> 8));
 80128f2:	7bfb      	ldrb	r3, [r7, #15]
 80128f4:	3304      	adds	r3, #4
 80128f6:	005b      	lsls	r3, r3, #1
 80128f8:	f107 0218 	add.w	r2, r7, #24
 80128fc:	4413      	add	r3, r2
 80128fe:	889b      	ldrh	r3, [r3, #4]
 8012900:	0a1b      	lsrs	r3, r3, #8
 8012902:	b29a      	uxth	r2, r3
 8012904:	7bbb      	ldrb	r3, [r7, #14]
 8012906:	3307      	adds	r3, #7
 8012908:	4619      	mov	r1, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	440b      	add	r3, r1
 801290e:	b2d2      	uxtb	r2, r2
 8012910:	701a      	strb	r2, [r3, #0]
		array[7+j+1] = (uint8_t)(0x00FF & s_cmd_answer.reponse[i]);
 8012912:	7bfb      	ldrb	r3, [r7, #15]
 8012914:	3304      	adds	r3, #4
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	f107 0218 	add.w	r2, r7, #24
 801291c:	4413      	add	r3, r2
 801291e:	8899      	ldrh	r1, [r3, #4]
 8012920:	7bbb      	ldrb	r3, [r7, #14]
 8012922:	3308      	adds	r3, #8
 8012924:	687a      	ldr	r2, [r7, #4]
 8012926:	4413      	add	r3, r2
 8012928:	b2ca      	uxtb	r2, r1
 801292a:	701a      	strb	r2, [r3, #0]

		j+=2;
 801292c:	7bbb      	ldrb	r3, [r7, #14]
 801292e:	3302      	adds	r3, #2
 8012930:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<SIZE_PARAM_CMD;i++)
 8012932:	7bfb      	ldrb	r3, [r7, #15]
 8012934:	3301      	adds	r3, #1
 8012936:	73fb      	strb	r3, [r7, #15]
 8012938:	7bfb      	ldrb	r3, [r7, #15]
 801293a:	2b03      	cmp	r3, #3
 801293c:	d9d9      	bls.n	80128f2 <F_TCP_answerTotab+0x6a>
	}


}
 801293e:	bf00      	nop
 8012940:	3714      	adds	r7, #20
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	b004      	add	sp, #16
 801294a:	4770      	bx	lr

0801294c <F_Process_Command>:

/**
 *
 */
void F_Process_Command(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 801294c:	b590      	push	{r4, r7, lr}
 801294e:	b089      	sub	sp, #36	; 0x24
 8012950:	af02      	add	r7, sp, #8
 8012952:	463c      	mov	r4, r7
 8012954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012958:	2300      	movs	r3, #0
 801295a:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->id = s_cmd_received.id; 	// same ID as the received command
 801295c:	683a      	ldr	r2, [r7, #0]
 801295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012960:	601a      	str	r2, [r3, #0]
	s_cmd_answer->nb_octet = NB_OCTETS_CMD;
 8012962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012964:	220f      	movs	r2, #15
 8012966:	711a      	strb	r2, [r3, #4]
	s_cmd_answer->cmd = s_cmd_received.cmd;	// recall the command executed
 8012968:	797a      	ldrb	r2, [r7, #5]
 801296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801296c:	715a      	strb	r2, [r3, #5]

	// Process the command depending on the command number
	switch(s_cmd_received.cmd)
 801296e:	797b      	ldrb	r3, [r7, #5]
 8012970:	3b01      	subs	r3, #1
 8012972:	2b09      	cmp	r3, #9
 8012974:	d82f      	bhi.n	80129d6 <F_Process_Command+0x8a>
 8012976:	a201      	add	r2, pc, #4	; (adr r2, 801297c <F_Process_Command+0x30>)
 8012978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801297c:	080129d7 	.word	0x080129d7
 8012980:	080129a5 	.word	0x080129a5
 8012984:	080129b7 	.word	0x080129b7
 8012988:	080129c9 	.word	0x080129c9
 801298c:	080129d7 	.word	0x080129d7
 8012990:	080129d7 	.word	0x080129d7
 8012994:	080129d7 	.word	0x080129d7
 8012998:	080129d7 	.word	0x080129d7
 801299c:	080129d7 	.word	0x080129d7
 80129a0:	080129d7 	.word	0x080129d7
		case CMD_INFO:
			break;

		// Set LED
		case CMD_SET_LED:
			status = F_Cmd_SetLED(s_cmd_received, s_cmd_answer);
 80129a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	463b      	mov	r3, r7
 80129aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129ac:	f000 f818 	bl	80129e0 <F_Cmd_SetLED>
 80129b0:	4603      	mov	r3, r0
 80129b2:	75fb      	strb	r3, [r7, #23]
			break;
 80129b4:	e010      	b.n	80129d8 <F_Process_Command+0x8c>

		// Get LED
		case CMD_GET_LED:
			status = F_Cmd_GetLED(s_cmd_received, s_cmd_answer);
 80129b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	463b      	mov	r3, r7
 80129bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129be:	f000 f84d 	bl	8012a5c <F_Cmd_GetLED>
 80129c2:	4603      	mov	r3, r0
 80129c4:	75fb      	strb	r3, [r7, #23]
			break;
 80129c6:	e007      	b.n	80129d8 <F_Process_Command+0x8c>
		// Get distances from sensors
		case CMD_GET_DISTANCES:
			F_Cmd_GetDistance(s_cmd_received, s_cmd_answer);
 80129c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ca:	9300      	str	r3, [sp, #0]
 80129cc:	463b      	mov	r3, r7
 80129ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129d0:	f000 f87e 	bl	8012ad0 <F_Cmd_GetDistance>
			break;
 80129d4:	e000      	b.n	80129d8 <F_Process_Command+0x8c>
		case CMD_GET_LIST_POINTS:
			break;

		// Error, unknown command
		default:
			break;
 80129d6:	bf00      	nop

	}


}
 80129d8:	bf00      	nop
 80129da:	371c      	adds	r7, #28
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd90      	pop	{r4, r7, pc}

080129e0 <F_Cmd_SetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_SetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 80129e0:	b590      	push	{r4, r7, lr}
 80129e2:	b087      	sub	sp, #28
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	463c      	mov	r4, r7
 80129e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80129ec:	2300      	movs	r3, #0
 80129ee:	75fb      	strb	r3, [r7, #23]
	// All LEDs

		F_GPIO_SetLedRed(0);
 80129f0:	2000      	movs	r0, #0
 80129f2:	f000 fd9f 	bl	8013534 <F_GPIO_SetLedRed>
		F_GPIO_SetLedBlue(0);
 80129f6:	2000      	movs	r0, #0
 80129f8:	f000 fdb8 	bl	801356c <F_GPIO_SetLedBlue>
		F_GPIO_SetLedGreen(0);
 80129fc:	2000      	movs	r0, #0
 80129fe:	f000 fdd1 	bl	80135a4 <F_GPIO_SetLedGreen>

	// Red
	if(s_cmd_received.params[0] & 0x01)
 8012a02:	893b      	ldrh	r3, [r7, #8]
 8012a04:	f003 0301 	and.w	r3, r3, #1
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d003      	beq.n	8012a14 <F_Cmd_SetLED+0x34>
	{
		F_GPIO_SetLedBlue(1);
 8012a0c:	2001      	movs	r0, #1
 8012a0e:	f000 fdad 	bl	801356c <F_GPIO_SetLedBlue>
 8012a12:	e00f      	b.n	8012a34 <F_Cmd_SetLED+0x54>
	}
	// blue
	else if(s_cmd_received.params[0] == 2)
 8012a14:	893b      	ldrh	r3, [r7, #8]
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	d103      	bne.n	8012a22 <F_Cmd_SetLED+0x42>
	{
		F_GPIO_SetLedGreen(1);
 8012a1a:	2001      	movs	r0, #1
 8012a1c:	f000 fdc2 	bl	80135a4 <F_GPIO_SetLedGreen>
 8012a20:	e008      	b.n	8012a34 <F_Cmd_SetLED+0x54>
	}
	// Green
	else if(s_cmd_received.params[0] == 4)
 8012a22:	893b      	ldrh	r3, [r7, #8]
 8012a24:	2b04      	cmp	r3, #4
 8012a26:	d103      	bne.n	8012a30 <F_Cmd_SetLED+0x50>
	{
		F_GPIO_SetLedRed(1);
 8012a28:	2001      	movs	r0, #1
 8012a2a:	f000 fd83 	bl	8013534 <F_GPIO_SetLedRed>
 8012a2e:	e001      	b.n	8012a34 <F_Cmd_SetLED+0x54>
	}
	else
	{
		status = STATUS_ERROR_PARAM;
 8012a30:	2302      	movs	r3, #2
 8012a32:	75fb      	strb	r3, [r7, #23]
	}

	s_cmd_answer->code_retour = status;
 8012a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a36:	7dfa      	ldrb	r2, [r7, #23]
 8012a38:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 8012a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a42:	2200      	movs	r2, #0
 8012a44:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a48:	2200      	movs	r2, #0
 8012a4a:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4e:	2200      	movs	r2, #0
 8012a50:	81da      	strh	r2, [r3, #14]

	return status;
 8012a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	371c      	adds	r7, #28
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd90      	pop	{r4, r7, pc}

08012a5c <F_Cmd_GetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012a5c:	b490      	push	{r4, r7}
 8012a5e:	b086      	sub	sp, #24
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	463c      	mov	r4, r7
 8012a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	75fb      	strb	r3, [r7, #23]


	s_cmd_answer->code_retour = status;
 8012a6c:	6a3b      	ldr	r3, [r7, #32]
 8012a6e:	7dfa      	ldrb	r2, [r7, #23]
 8012a70:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = (((GPIOB->ODR & LED_Red) >> 14) << 2) + ((GPIOB->ODR & LED_Green) << 1) + (((GPIOB->ODR & LED_Blue) >> 7));
 8012a72:	4b16      	ldr	r3, [pc, #88]	; (8012acc <F_Cmd_GetLED+0x70>)
 8012a74:	695b      	ldr	r3, [r3, #20]
 8012a76:	0b9b      	lsrs	r3, r3, #14
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	f003 0304 	and.w	r3, r3, #4
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	4b11      	ldr	r3, [pc, #68]	; (8012acc <F_Cmd_GetLED+0x70>)
 8012a86:	695b      	ldr	r3, [r3, #20]
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	f003 0302 	and.w	r3, r3, #2
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	4413      	add	r3, r2
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	4b0c      	ldr	r3, [pc, #48]	; (8012acc <F_Cmd_GetLED+0x70>)
 8012a9a:	695b      	ldr	r3, [r3, #20]
 8012a9c:	09db      	lsrs	r3, r3, #7
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	4413      	add	r3, r2
 8012aa8:	b29a      	uxth	r2, r3
 8012aaa:	6a3b      	ldr	r3, [r7, #32]
 8012aac:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012aae:	6a3b      	ldr	r3, [r7, #32]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012ab4:	6a3b      	ldr	r3, [r7, #32]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012aba:	6a3b      	ldr	r3, [r7, #32]
 8012abc:	2200      	movs	r2, #0
 8012abe:	81da      	strh	r2, [r3, #14]

	return status;
 8012ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3718      	adds	r7, #24
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bc90      	pop	{r4, r7}
 8012aca:	4770      	bx	lr
 8012acc:	40020400 	.word	0x40020400

08012ad0 <F_Cmd_GetDistance>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetDistance(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012ad0:	b490      	push	{r4, r7}
 8012ad2:	b086      	sub	sp, #24
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	463c      	mov	r4, r7
 8012ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012adc:	2300      	movs	r3, #0
 8012ade:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 8012ae0:	6a3b      	ldr	r3, [r7, #32]
 8012ae2:	7dfa      	ldrb	r2, [r7, #23]
 8012ae4:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = distance_avant_1;
 8012ae6:	4b0b      	ldr	r3, [pc, #44]	; (8012b14 <F_Cmd_GetDistance+0x44>)
 8012ae8:	881a      	ldrh	r2, [r3, #0]
 8012aea:	6a3b      	ldr	r3, [r7, #32]
 8012aec:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = distance_avant_2;
 8012aee:	4b0a      	ldr	r3, [pc, #40]	; (8012b18 <F_Cmd_GetDistance+0x48>)
 8012af0:	881a      	ldrh	r2, [r3, #0]
 8012af2:	6a3b      	ldr	r3, [r7, #32]
 8012af4:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = distance_avant_3;
 8012af6:	4b09      	ldr	r3, [pc, #36]	; (8012b1c <F_Cmd_GetDistance+0x4c>)
 8012af8:	881a      	ldrh	r2, [r3, #0]
 8012afa:	6a3b      	ldr	r3, [r7, #32]
 8012afc:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = distance_arriere_1;
 8012afe:	4b08      	ldr	r3, [pc, #32]	; (8012b20 <F_Cmd_GetDistance+0x50>)
 8012b00:	881a      	ldrh	r2, [r3, #0]
 8012b02:	6a3b      	ldr	r3, [r7, #32]
 8012b04:	81da      	strh	r2, [r3, #14]

	return status;
 8012b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3718      	adds	r7, #24
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bc90      	pop	{r4, r7}
 8012b10:	4770      	bx	lr
 8012b12:	bf00      	nop
 8012b14:	20000386 	.word	0x20000386
 8012b18:	20000388 	.word	0x20000388
 8012b1c:	2000038a 	.word	0x2000038a
 8012b20:	2000038c 	.word	0x2000038c

08012b24 <F_VL53L1X_InitSensors>:

/**
 * Init all the VL53L1X connected to I2C2
 */
void F_VL53L1X_InitSensors()
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8012b2a:	2302      	movs	r3, #2
 8012b2c:	70fb      	strb	r3, [r7, #3]
	uint32_t i = 0;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	607b      	str	r3, [r7, #4]

	// Set up I2C initial address
	dev_avant_1.addr = 0x52;
 8012b32:	4b22      	ldr	r3, [pc, #136]	; (8012bbc <F_VL53L1X_InitSensors+0x98>)
 8012b34:	2252      	movs	r2, #82	; 0x52
 8012b36:	601a      	str	r2, [r3, #0]
	dev_avant_2.addr = 0x52;
 8012b38:	4b21      	ldr	r3, [pc, #132]	; (8012bc0 <F_VL53L1X_InitSensors+0x9c>)
 8012b3a:	2252      	movs	r2, #82	; 0x52
 8012b3c:	601a      	str	r2, [r3, #0]
	dev_avant_3.addr = 0x52;
 8012b3e:	4b21      	ldr	r3, [pc, #132]	; (8012bc4 <F_VL53L1X_InitSensors+0xa0>)
 8012b40:	2252      	movs	r2, #82	; 0x52
 8012b42:	601a      	str	r2, [r3, #0]
	dev_arriere_1.addr = 0x52;
 8012b44:	4b20      	ldr	r3, [pc, #128]	; (8012bc8 <F_VL53L1X_InitSensors+0xa4>)
 8012b46:	2252      	movs	r2, #82	; 0x52
 8012b48:	601a      	str	r2, [r3, #0]


	// Configure VL53L1X_AVANT_1_ADDR	0x10	PF2

		// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD2;
 8012b4a:	4b20      	ldr	r3, [pc, #128]	; (8012bcc <F_VL53L1X_InitSensors+0xa8>)
 8012b4c:	695b      	ldr	r3, [r3, #20]
 8012b4e:	4a1f      	ldr	r2, [pc, #124]	; (8012bcc <F_VL53L1X_InitSensors+0xa8>)
 8012b50:	f043 0304 	orr.w	r3, r3, #4
 8012b54:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 8012b56:	2300      	movs	r3, #0
 8012b58:	607b      	str	r3, [r7, #4]
 8012b5a:	e003      	b.n	8012b64 <F_VL53L1X_InitSensors+0x40>
 8012b5c:	bf00      	nop
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	3301      	adds	r3, #1
 8012b62:	607b      	str	r3, [r7, #4]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d9f6      	bls.n	8012b5c <F_VL53L1X_InitSensors+0x38>

		// Wait for device booted
		while((state & 0x01) != 0x01){ VL53L1X_BootState(dev_avant_1, &state); HAL_Delay(2);}
 8012b6e:	e008      	b.n	8012b82 <F_VL53L1X_InitSensors+0x5e>
 8012b70:	1cfa      	adds	r2, r7, #3
 8012b72:	4b12      	ldr	r3, [pc, #72]	; (8012bbc <F_VL53L1X_InitSensors+0x98>)
 8012b74:	4611      	mov	r1, r2
 8012b76:	6818      	ldr	r0, [r3, #0]
 8012b78:	f7ed fe07 	bl	800078a <VL53L1X_BootState>
 8012b7c:	2002      	movs	r0, #2
 8012b7e:	f7ed ff81 	bl	8000a84 <HAL_Delay>
 8012b82:	78fb      	ldrb	r3, [r7, #3]
 8012b84:	f003 0301 	and.w	r3, r3, #1
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d0f1      	beq.n	8012b70 <F_VL53L1X_InitSensors+0x4c>

		VL53L1X_SetI2CAddress(dev_avant_1, VL53L1X_AVANT_1_ADDR);
 8012b8c:	4b0b      	ldr	r3, [pc, #44]	; (8012bbc <F_VL53L1X_InitSensors+0x98>)
 8012b8e:	2110      	movs	r1, #16
 8012b90:	6818      	ldr	r0, [r3, #0]
 8012b92:	f7ed fcfd 	bl	8000590 <VL53L1X_SetI2CAddress>
		dev_avant_1.addr = VL53L1X_AVANT_1_ADDR;
 8012b96:	4b09      	ldr	r3, [pc, #36]	; (8012bbc <F_VL53L1X_InitSensors+0x98>)
 8012b98:	2210      	movs	r2, #16
 8012b9a:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8012b9c:	2001      	movs	r0, #1
 8012b9e:	f7ed ff71 	bl	8000a84 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_1);
 8012ba2:	4b06      	ldr	r3, [pc, #24]	; (8012bbc <F_VL53L1X_InitSensors+0x98>)
 8012ba4:	6818      	ldr	r0, [r3, #0]
 8012ba6:	f7ed fd0b 	bl	80005c0 <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_1);
 8012baa:	4b04      	ldr	r3, [pc, #16]	; (8012bbc <F_VL53L1X_InitSensors+0x98>)
 8012bac:	6818      	ldr	r0, [r3, #0]
 8012bae:	f7ed fd95 	bl	80006dc <VL53L1X_StartRanging>

		HAL_Delay(1);

		VL53L1X_SensorInit(dev_arriere_1);
		VL53L1X_StartRanging(dev_arriere_1);*/
}
 8012bb2:	bf00      	nop
 8012bb4:	3708      	adds	r7, #8
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	20003910 	.word	0x20003910
 8012bc0:	20003918 	.word	0x20003918
 8012bc4:	20003914 	.word	0x20003914
 8012bc8:	2000390c 	.word	0x2000390c
 8012bcc:	40021400 	.word	0x40021400

08012bd0 <F_VL53L1X_CheckSensors>:
/**
 * Check the VL53L1X connected to the STM32
 * If data is ready ,update the value of distance_avant_1, distance_avant_2, distance_avant_3, distance_arriere_1
 */
void F_VL53L1X_CheckSensors(void)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
	uint8_t dataReady = 0;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rangeStatus = 0;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	71bb      	strb	r3, [r7, #6]

	// dev_avant_1;
	VL53L1X_CheckForDataReady(dev_avant_1, &dataReady);
 8012bde:	1dfa      	adds	r2, r7, #7
 8012be0:	4b0e      	ldr	r3, [pc, #56]	; (8012c1c <F_VL53L1X_CheckSensors+0x4c>)
 8012be2:	4611      	mov	r1, r2
 8012be4:	6818      	ldr	r0, [r3, #0]
 8012be6:	f7ed fda1 	bl	800072c <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 8012bea:	79fb      	ldrb	r3, [r7, #7]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d011      	beq.n	8012c14 <F_VL53L1X_CheckSensors+0x44>
	{
		VL53L1X_GetRangeStatus(dev_avant_1, &rangeStatus);
 8012bf0:	1dba      	adds	r2, r7, #6
 8012bf2:	4b0a      	ldr	r3, [pc, #40]	; (8012c1c <F_VL53L1X_CheckSensors+0x4c>)
 8012bf4:	4611      	mov	r1, r2
 8012bf6:	6818      	ldr	r0, [r3, #0]
 8012bf8:	f7ed fdfc 	bl	80007f4 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 8012bfc:	79bb      	ldrb	r3, [r7, #6]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d104      	bne.n	8012c0c <F_VL53L1X_CheckSensors+0x3c>
		{
			VL53L1X_GetDistance(dev_avant_1, &distance_avant_1);
 8012c02:	4b06      	ldr	r3, [pc, #24]	; (8012c1c <F_VL53L1X_CheckSensors+0x4c>)
 8012c04:	4906      	ldr	r1, [pc, #24]	; (8012c20 <F_VL53L1X_CheckSensors+0x50>)
 8012c06:	6818      	ldr	r0, [r3, #0]
 8012c08:	f7ed fdda 	bl	80007c0 <VL53L1X_GetDistance>
		}
		VL53L1X_ClearInterrupt(dev_avant_1);
 8012c0c:	4b03      	ldr	r3, [pc, #12]	; (8012c1c <F_VL53L1X_CheckSensors+0x4c>)
 8012c0e:	6818      	ldr	r0, [r3, #0]
 8012c10:	f7ed fd2a 	bl	8000668 <VL53L1X_ClearInterrupt>
			VL53L1X_GetDistance(dev_arriere_1, &distance_arriere_1);
		}
		VL53L1X_ClearInterrupt(dev_arriere_1);
	}*/

}
 8012c14:	bf00      	nop
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20003910 	.word	0x20003910
 8012c20:	20000386 	.word	0x20000386

08012c24 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b08e      	sub	sp, #56	; 0x38
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c30:	2200      	movs	r2, #0
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	605a      	str	r2, [r3, #4]
 8012c36:	609a      	str	r2, [r3, #8]
 8012c38:	60da      	str	r2, [r3, #12]
 8012c3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4a55      	ldr	r2, [pc, #340]	; (8012d98 <HAL_ETH_MspInit+0x174>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	f040 80a4 	bne.w	8012d90 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8012c48:	2300      	movs	r3, #0
 8012c4a:	623b      	str	r3, [r7, #32]
 8012c4c:	4b53      	ldr	r3, [pc, #332]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c50:	4a52      	ldr	r2, [pc, #328]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012c56:	6313      	str	r3, [r2, #48]	; 0x30
 8012c58:	4b50      	ldr	r3, [pc, #320]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c60:	623b      	str	r3, [r7, #32]
 8012c62:	6a3b      	ldr	r3, [r7, #32]
 8012c64:	2300      	movs	r3, #0
 8012c66:	61fb      	str	r3, [r7, #28]
 8012c68:	4b4c      	ldr	r3, [pc, #304]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c6c:	4a4b      	ldr	r2, [pc, #300]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012c72:	6313      	str	r3, [r2, #48]	; 0x30
 8012c74:	4b49      	ldr	r3, [pc, #292]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012c7c:	61fb      	str	r3, [r7, #28]
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	2300      	movs	r3, #0
 8012c82:	61bb      	str	r3, [r7, #24]
 8012c84:	4b45      	ldr	r3, [pc, #276]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c88:	4a44      	ldr	r2, [pc, #272]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8012c90:	4b42      	ldr	r3, [pc, #264]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c98:	61bb      	str	r3, [r7, #24]
 8012c9a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	617b      	str	r3, [r7, #20]
 8012ca0:	4b3e      	ldr	r3, [pc, #248]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca4:	4a3d      	ldr	r2, [pc, #244]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012ca6:	f043 0304 	orr.w	r3, r3, #4
 8012caa:	6313      	str	r3, [r2, #48]	; 0x30
 8012cac:	4b3b      	ldr	r3, [pc, #236]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb0:	f003 0304 	and.w	r3, r3, #4
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012cb8:	2300      	movs	r3, #0
 8012cba:	613b      	str	r3, [r7, #16]
 8012cbc:	4b37      	ldr	r3, [pc, #220]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc0:	4a36      	ldr	r2, [pc, #216]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cc2:	f043 0301 	orr.w	r3, r3, #1
 8012cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8012cc8:	4b34      	ldr	r3, [pc, #208]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ccc:	f003 0301 	and.w	r3, r3, #1
 8012cd0:	613b      	str	r3, [r7, #16]
 8012cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	60fb      	str	r3, [r7, #12]
 8012cd8:	4b30      	ldr	r3, [pc, #192]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cdc:	4a2f      	ldr	r2, [pc, #188]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cde:	f043 0302 	orr.w	r3, r3, #2
 8012ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8012ce4:	4b2d      	ldr	r3, [pc, #180]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce8:	f003 0302 	and.w	r3, r3, #2
 8012cec:	60fb      	str	r3, [r7, #12]
 8012cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	60bb      	str	r3, [r7, #8]
 8012cf4:	4b29      	ldr	r3, [pc, #164]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf8:	4a28      	ldr	r2, [pc, #160]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8012d00:	4b26      	ldr	r3, [pc, #152]	; (8012d9c <HAL_ETH_MspInit+0x178>)
 8012d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d08:	60bb      	str	r3, [r7, #8]
 8012d0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8012d0c:	2332      	movs	r3, #50	; 0x32
 8012d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d10:	2302      	movs	r3, #2
 8012d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d14:	2300      	movs	r3, #0
 8012d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d18:	2303      	movs	r3, #3
 8012d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012d1c:	230b      	movs	r3, #11
 8012d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d24:	4619      	mov	r1, r3
 8012d26:	481e      	ldr	r0, [pc, #120]	; (8012da0 <HAL_ETH_MspInit+0x17c>)
 8012d28:	f7ee ff74 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8012d2c:	2386      	movs	r3, #134	; 0x86
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d30:	2302      	movs	r3, #2
 8012d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d34:	2300      	movs	r3, #0
 8012d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d38:	2303      	movs	r3, #3
 8012d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012d3c:	230b      	movs	r3, #11
 8012d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d44:	4619      	mov	r1, r3
 8012d46:	4817      	ldr	r0, [pc, #92]	; (8012da4 <HAL_ETH_MspInit+0x180>)
 8012d48:	f7ee ff64 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8012d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d52:	2302      	movs	r3, #2
 8012d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d56:	2300      	movs	r3, #0
 8012d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d5a:	2303      	movs	r3, #3
 8012d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012d5e:	230b      	movs	r3, #11
 8012d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8012d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d66:	4619      	mov	r1, r3
 8012d68:	480f      	ldr	r0, [pc, #60]	; (8012da8 <HAL_ETH_MspInit+0x184>)
 8012d6a:	f7ee ff53 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8012d6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8012d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d74:	2302      	movs	r3, #2
 8012d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d7c:	2303      	movs	r3, #3
 8012d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012d80:	230b      	movs	r3, #11
 8012d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d88:	4619      	mov	r1, r3
 8012d8a:	4808      	ldr	r0, [pc, #32]	; (8012dac <HAL_ETH_MspInit+0x188>)
 8012d8c:	f7ee ff42 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8012d90:	bf00      	nop
 8012d92:	3738      	adds	r7, #56	; 0x38
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	40028000 	.word	0x40028000
 8012d9c:	40023800 	.word	0x40023800
 8012da0:	40020800 	.word	0x40020800
 8012da4:	40020000 	.word	0x40020000
 8012da8:	40020400 	.word	0x40020400
 8012dac:	40021800 	.word	0x40021800

08012db0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8012db8:	2300      	movs	r3, #0
 8012dba:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8012dbc:	4b49      	ldr	r3, [pc, #292]	; (8012ee4 <low_level_init+0x134>)
 8012dbe:	4a4a      	ldr	r2, [pc, #296]	; (8012ee8 <low_level_init+0x138>)
 8012dc0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8012dc2:	4b48      	ldr	r3, [pc, #288]	; (8012ee4 <low_level_init+0x134>)
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8012dc8:	4b46      	ldr	r3, [pc, #280]	; (8012ee4 <low_level_init+0x134>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8012dd2:	2380      	movs	r3, #128	; 0x80
 8012dd4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8012dd6:	23e1      	movs	r3, #225	; 0xe1
 8012dd8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8012dde:	2300      	movs	r3, #0
 8012de0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8012de2:	2300      	movs	r3, #0
 8012de4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8012de6:	4a3f      	ldr	r2, [pc, #252]	; (8012ee4 <low_level_init+0x134>)
 8012de8:	f107 0308 	add.w	r3, r7, #8
 8012dec:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8012dee:	4b3d      	ldr	r3, [pc, #244]	; (8012ee4 <low_level_init+0x134>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8012df4:	4b3b      	ldr	r3, [pc, #236]	; (8012ee4 <low_level_init+0x134>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8012dfa:	4b3a      	ldr	r3, [pc, #232]	; (8012ee4 <low_level_init+0x134>)
 8012dfc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8012e00:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8012e02:	4838      	ldr	r0, [pc, #224]	; (8012ee4 <low_level_init+0x134>)
 8012e04:	f7ed ff72 	bl	8000cec <HAL_ETH_Init>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8012e0c:	7dfb      	ldrb	r3, [r7, #23]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d108      	bne.n	8012e24 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e18:	f043 0304 	orr.w	r3, r3, #4
 8012e1c:	b2da      	uxtb	r2, r3
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8012e24:	2304      	movs	r3, #4
 8012e26:	4a31      	ldr	r2, [pc, #196]	; (8012eec <low_level_init+0x13c>)
 8012e28:	4931      	ldr	r1, [pc, #196]	; (8012ef0 <low_level_init+0x140>)
 8012e2a:	482e      	ldr	r0, [pc, #184]	; (8012ee4 <low_level_init+0x134>)
 8012e2c:	f7ee f8fc 	bl	8001028 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8012e30:	2304      	movs	r3, #4
 8012e32:	4a30      	ldr	r2, [pc, #192]	; (8012ef4 <low_level_init+0x144>)
 8012e34:	4930      	ldr	r1, [pc, #192]	; (8012ef8 <low_level_init+0x148>)
 8012e36:	482b      	ldr	r0, [pc, #172]	; (8012ee4 <low_level_init+0x134>)
 8012e38:	f7ee f95f 	bl	80010fa <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2206      	movs	r2, #6
 8012e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8012e44:	4b27      	ldr	r3, [pc, #156]	; (8012ee4 <low_level_init+0x134>)
 8012e46:	695b      	ldr	r3, [r3, #20]
 8012e48:	781a      	ldrb	r2, [r3, #0]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012e50:	4b24      	ldr	r3, [pc, #144]	; (8012ee4 <low_level_init+0x134>)
 8012e52:	695b      	ldr	r3, [r3, #20]
 8012e54:	785a      	ldrb	r2, [r3, #1]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8012e5c:	4b21      	ldr	r3, [pc, #132]	; (8012ee4 <low_level_init+0x134>)
 8012e5e:	695b      	ldr	r3, [r3, #20]
 8012e60:	789a      	ldrb	r2, [r3, #2]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8012e68:	4b1e      	ldr	r3, [pc, #120]	; (8012ee4 <low_level_init+0x134>)
 8012e6a:	695b      	ldr	r3, [r3, #20]
 8012e6c:	78da      	ldrb	r2, [r3, #3]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8012e74:	4b1b      	ldr	r3, [pc, #108]	; (8012ee4 <low_level_init+0x134>)
 8012e76:	695b      	ldr	r3, [r3, #20]
 8012e78:	791a      	ldrb	r2, [r3, #4]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012e80:	4b18      	ldr	r3, [pc, #96]	; (8012ee4 <low_level_init+0x134>)
 8012e82:	695b      	ldr	r3, [r3, #20]
 8012e84:	795a      	ldrb	r2, [r3, #5]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012e92:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e9a:	f043 030a 	orr.w	r3, r3, #10
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8012ea6:	480f      	ldr	r0, [pc, #60]	; (8012ee4 <low_level_init+0x134>)
 8012ea8:	f7ee fbd0 	bl	800164c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8012eac:	f107 0310 	add.w	r3, r7, #16
 8012eb0:	461a      	mov	r2, r3
 8012eb2:	211d      	movs	r1, #29
 8012eb4:	480b      	ldr	r0, [pc, #44]	; (8012ee4 <low_level_init+0x134>)
 8012eb6:	f7ee fafb 	bl	80014b0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	f043 030b 	orr.w	r3, r3, #11
 8012ec0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	211d      	movs	r1, #29
 8012ec8:	4806      	ldr	r0, [pc, #24]	; (8012ee4 <low_level_init+0x134>)
 8012eca:	f7ee fb59 	bl	8001580 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8012ece:	f107 0310 	add.w	r3, r7, #16
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	211d      	movs	r1, #29
 8012ed6:	4803      	ldr	r0, [pc, #12]	; (8012ee4 <low_level_init+0x134>)
 8012ed8:	f7ee faea 	bl	80014b0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8012edc:	bf00      	nop
 8012ede:	3718      	adds	r7, #24
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	200051ec 	.word	0x200051ec
 8012ee8:	40028000 	.word	0x40028000
 8012eec:	20005234 	.word	0x20005234
 8012ef0:	2000391c 	.word	0x2000391c
 8012ef4:	2000399c 	.word	0x2000399c
 8012ef8:	2000516c 	.word	0x2000516c

08012efc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b08a      	sub	sp, #40	; 0x28
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012f06:	4b4b      	ldr	r3, [pc, #300]	; (8013034 <low_level_output+0x138>)
 8012f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f0a:	689b      	ldr	r3, [r3, #8]
 8012f0c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8012f12:	2300      	movs	r3, #0
 8012f14:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8012f16:	2300      	movs	r3, #0
 8012f18:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8012f1e:	4b45      	ldr	r3, [pc, #276]	; (8013034 <low_level_output+0x138>)
 8012f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f22:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8012f24:	2300      	movs	r3, #0
 8012f26:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	623b      	str	r3, [r7, #32]
 8012f2c:	e05a      	b.n	8012fe4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	da03      	bge.n	8012f3e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8012f36:	23f8      	movs	r3, #248	; 0xf8
 8012f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8012f3c:	e05c      	b.n	8012ff8 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8012f3e:	6a3b      	ldr	r3, [r7, #32]
 8012f40:	895b      	ldrh	r3, [r3, #10]
 8012f42:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8012f44:	2300      	movs	r3, #0
 8012f46:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012f48:	e02f      	b.n	8012faa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8012f4a:	69fa      	ldr	r2, [r7, #28]
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	18d0      	adds	r0, r2, r3
 8012f50:	6a3b      	ldr	r3, [r7, #32]
 8012f52:	685a      	ldr	r2, [r3, #4]
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	18d1      	adds	r1, r2, r3
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8012f5e:	3304      	adds	r3, #4
 8012f60:	461a      	mov	r2, r3
 8012f62:	f002 fb16 	bl	8015592 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	da03      	bge.n	8012f7c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8012f74:	23f8      	movs	r3, #248	; 0xf8
 8012f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8012f7a:	e03d      	b.n	8012ff8 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8012f7c:	69bb      	ldr	r3, [r7, #24]
 8012f7e:	689b      	ldr	r3, [r3, #8]
 8012f80:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8012f82:	693a      	ldr	r2, [r7, #16]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	4413      	add	r3, r2
 8012f88:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8012f8c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8012f8e:	68ba      	ldr	r2, [r7, #8]
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	1ad3      	subs	r3, r2, r3
 8012f94:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8012f98:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8012f9a:	697a      	ldr	r2, [r7, #20]
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8012fa4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012faa:	68fa      	ldr	r2, [r7, #12]
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	4413      	add	r3, r2
 8012fb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d8c8      	bhi.n	8012f4a <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8012fb8:	69fa      	ldr	r2, [r7, #28]
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	18d0      	adds	r0, r2, r3
 8012fbe:	6a3b      	ldr	r3, [r7, #32]
 8012fc0:	685a      	ldr	r2, [r3, #4]
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	4619      	mov	r1, r3
 8012fca:	f002 fae2 	bl	8015592 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8012fce:	693a      	ldr	r2, [r7, #16]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8012fd6:	697a      	ldr	r2, [r7, #20]
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	4413      	add	r3, r2
 8012fdc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8012fde:	6a3b      	ldr	r3, [r7, #32]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	623b      	str	r3, [r7, #32]
 8012fe4:	6a3b      	ldr	r3, [r7, #32]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d1a1      	bne.n	8012f2e <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8012fea:	6979      	ldr	r1, [r7, #20]
 8012fec:	4811      	ldr	r0, [pc, #68]	; (8013034 <low_level_output+0x138>)
 8012fee:	f7ee f8f1 	bl	80011d4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8012ff8:	4b0e      	ldr	r3, [pc, #56]	; (8013034 <low_level_output+0x138>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013000:	3314      	adds	r3, #20
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	f003 0320 	and.w	r3, r3, #32
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00d      	beq.n	8013028 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801300c:	4b09      	ldr	r3, [pc, #36]	; (8013034 <low_level_output+0x138>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013014:	3314      	adds	r3, #20
 8013016:	2220      	movs	r2, #32
 8013018:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801301a:	4b06      	ldr	r3, [pc, #24]	; (8013034 <low_level_output+0x138>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013022:	3304      	adds	r3, #4
 8013024:	2200      	movs	r2, #0
 8013026:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8013028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801302c:	4618      	mov	r0, r3
 801302e:	3728      	adds	r7, #40	; 0x28
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	200051ec 	.word	0x200051ec

08013038 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b08c      	sub	sp, #48	; 0x30
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8013040:	2300      	movs	r3, #0
 8013042:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8013044:	2300      	movs	r3, #0
 8013046:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8013048:	2300      	movs	r3, #0
 801304a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 801304c:	2300      	movs	r3, #0
 801304e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8013050:	2300      	movs	r3, #0
 8013052:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8013054:	2300      	movs	r3, #0
 8013056:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8013058:	2300      	movs	r3, #0
 801305a:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 801305c:	484e      	ldr	r0, [pc, #312]	; (8013198 <low_level_input+0x160>)
 801305e:	f7ee f9a3 	bl	80013a8 <HAL_ETH_GetReceivedFrame>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <low_level_input+0x34>
    return NULL;
 8013068:	2300      	movs	r3, #0
 801306a:	e091      	b.n	8013190 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 801306c:	4b4a      	ldr	r3, [pc, #296]	; (8013198 <low_level_input+0x160>)
 801306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013070:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8013072:	4b49      	ldr	r3, [pc, #292]	; (8013198 <low_level_input+0x160>)
 8013074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013076:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8013078:	89fb      	ldrh	r3, [r7, #14]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d006      	beq.n	801308c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801307e:	89fb      	ldrh	r3, [r7, #14]
 8013080:	2203      	movs	r2, #3
 8013082:	4619      	mov	r1, r3
 8013084:	2004      	movs	r0, #4
 8013086:	f7f5 fbf5 	bl	8008874 <pbuf_alloc>
 801308a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 801308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308e:	2b00      	cmp	r3, #0
 8013090:	d04b      	beq.n	801312a <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013092:	4b41      	ldr	r3, [pc, #260]	; (8013198 <low_level_input+0x160>)
 8013094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013096:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8013098:	2300      	movs	r3, #0
 801309a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309e:	62bb      	str	r3, [r7, #40]	; 0x28
 80130a0:	e040      	b.n	8013124 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80130a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a4:	895b      	ldrh	r3, [r3, #10]
 80130a6:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80130a8:	2300      	movs	r3, #0
 80130aa:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80130ac:	e021      	b.n	80130f2 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80130ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b0:	685a      	ldr	r2, [r3, #4]
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	18d0      	adds	r0, r2, r3
 80130b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	18d1      	adds	r1, r2, r3
 80130bc:	69fb      	ldr	r3, [r7, #28]
 80130be:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80130c2:	3304      	adds	r3, #4
 80130c4:	461a      	mov	r2, r3
 80130c6:	f002 fa64 	bl	8015592 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80130ca:	6a3b      	ldr	r3, [r7, #32]
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80130d0:	6a3b      	ldr	r3, [r7, #32]
 80130d2:	689b      	ldr	r3, [r3, #8]
 80130d4:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80130d6:	69fa      	ldr	r2, [r7, #28]
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	4413      	add	r3, r2
 80130dc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80130e0:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80130e2:	69ba      	ldr	r2, [r7, #24]
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80130ec:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80130f2:	697a      	ldr	r2, [r7, #20]
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	4413      	add	r3, r2
 80130f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d8d6      	bhi.n	80130ae <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013102:	685a      	ldr	r2, [r3, #4]
 8013104:	69bb      	ldr	r3, [r7, #24]
 8013106:	18d0      	adds	r0, r2, r3
 8013108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	4413      	add	r3, r2
 801310e:	697a      	ldr	r2, [r7, #20]
 8013110:	4619      	mov	r1, r3
 8013112:	f002 fa3e 	bl	8015592 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8013116:	69fa      	ldr	r2, [r7, #28]
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	4413      	add	r3, r2
 801311c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	62bb      	str	r3, [r7, #40]	; 0x28
 8013124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013126:	2b00      	cmp	r3, #0
 8013128:	d1bb      	bne.n	80130a2 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801312a:	4b1b      	ldr	r3, [pc, #108]	; (8013198 <low_level_input+0x160>)
 801312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801312e:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013130:	2300      	movs	r3, #0
 8013132:	613b      	str	r3, [r7, #16]
 8013134:	e00b      	b.n	801314e <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013136:	6a3b      	ldr	r3, [r7, #32]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013142:	6a3b      	ldr	r3, [r7, #32]
 8013144:	68db      	ldr	r3, [r3, #12]
 8013146:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	3301      	adds	r3, #1
 801314c:	613b      	str	r3, [r7, #16]
 801314e:	4b12      	ldr	r3, [pc, #72]	; (8013198 <low_level_input+0x160>)
 8013150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013152:	693a      	ldr	r2, [r7, #16]
 8013154:	429a      	cmp	r2, r3
 8013156:	d3ee      	bcc.n	8013136 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8013158:	4b0f      	ldr	r3, [pc, #60]	; (8013198 <low_level_input+0x160>)
 801315a:	2200      	movs	r2, #0
 801315c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 801315e:	4b0e      	ldr	r3, [pc, #56]	; (8013198 <low_level_input+0x160>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013166:	3314      	adds	r3, #20
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801316e:	2b00      	cmp	r3, #0
 8013170:	d00d      	beq.n	801318e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8013172:	4b09      	ldr	r3, [pc, #36]	; (8013198 <low_level_input+0x160>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801317a:	3314      	adds	r3, #20
 801317c:	2280      	movs	r2, #128	; 0x80
 801317e:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8013180:	4b05      	ldr	r3, [pc, #20]	; (8013198 <low_level_input+0x160>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013188:	3308      	adds	r3, #8
 801318a:	2200      	movs	r2, #0
 801318c:	601a      	str	r2, [r3, #0]
  }
  return p;
 801318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013190:	4618      	mov	r0, r3
 8013192:	3730      	adds	r7, #48	; 0x30
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}
 8013198:	200051ec 	.word	0x200051ec

0801319c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7ff ff47 	bl	8013038 <low_level_input>
 80131aa:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d010      	beq.n	80131d4 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	691b      	ldr	r3, [r3, #16]
 80131b6:	6879      	ldr	r1, [r7, #4]
 80131b8:	68f8      	ldr	r0, [r7, #12]
 80131ba:	4798      	blx	r3
 80131bc:	4603      	mov	r3, r0
 80131be:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80131c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d006      	beq.n	80131d6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f7f5 fec5 	bl	8008f58 <pbuf_free>
    p = NULL;    
 80131ce:	2300      	movs	r3, #0
 80131d0:	60fb      	str	r3, [r7, #12]
 80131d2:	e000      	b.n	80131d6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80131d4:	bf00      	nop
  }
}
 80131d6:	3710      	adds	r7, #16
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}

080131dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d106      	bne.n	80131f8 <ethernetif_init+0x1c>
 80131ea:	4b0e      	ldr	r3, [pc, #56]	; (8013224 <ethernetif_init+0x48>)
 80131ec:	f44f 7204 	mov.w	r2, #528	; 0x210
 80131f0:	490d      	ldr	r1, [pc, #52]	; (8013228 <ethernetif_init+0x4c>)
 80131f2:	480e      	ldr	r0, [pc, #56]	; (801322c <ethernetif_init+0x50>)
 80131f4:	f002 fa88 	bl	8015708 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2273      	movs	r2, #115	; 0x73
 80131fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2274      	movs	r2, #116	; 0x74
 8013204:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	4a09      	ldr	r2, [pc, #36]	; (8013230 <ethernetif_init+0x54>)
 801320c:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	4a08      	ldr	r2, [pc, #32]	; (8013234 <ethernetif_init+0x58>)
 8013212:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7ff fdcb 	bl	8012db0 <low_level_init>

  return ERR_OK;
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	0801862c 	.word	0x0801862c
 8013228:	08018640 	.word	0x08018640
 801322c:	08018650 	.word	0x08018650
 8013230:	08010b75 	.word	0x08010b75
 8013234:	08012efd 	.word	0x08012efd

08013238 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801323c:	f7ed fc16 	bl	8000a6c <HAL_GetTick>
 8013240:	4603      	mov	r3, r0
}
 8013242:	4618      	mov	r0, r3
 8013244:	bd80      	pop	{r7, pc}
	...

08013248 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b08e      	sub	sp, #56	; 0x38
 801324c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801324e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013252:	2200      	movs	r2, #0
 8013254:	601a      	str	r2, [r3, #0]
 8013256:	605a      	str	r2, [r3, #4]
 8013258:	609a      	str	r2, [r3, #8]
 801325a:	60da      	str	r2, [r3, #12]
 801325c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801325e:	2300      	movs	r3, #0
 8013260:	623b      	str	r3, [r7, #32]
 8013262:	4bab      	ldr	r3, [pc, #684]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013266:	4aaa      	ldr	r2, [pc, #680]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013268:	f043 0310 	orr.w	r3, r3, #16
 801326c:	6313      	str	r3, [r2, #48]	; 0x30
 801326e:	4ba8      	ldr	r3, [pc, #672]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013272:	f003 0310 	and.w	r3, r3, #16
 8013276:	623b      	str	r3, [r7, #32]
 8013278:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801327a:	2300      	movs	r3, #0
 801327c:	61fb      	str	r3, [r7, #28]
 801327e:	4ba4      	ldr	r3, [pc, #656]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013282:	4aa3      	ldr	r2, [pc, #652]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013284:	f043 0304 	orr.w	r3, r3, #4
 8013288:	6313      	str	r3, [r2, #48]	; 0x30
 801328a:	4ba1      	ldr	r3, [pc, #644]	; (8013510 <MX_GPIO_Init+0x2c8>)
 801328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801328e:	f003 0304 	and.w	r3, r3, #4
 8013292:	61fb      	str	r3, [r7, #28]
 8013294:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013296:	2300      	movs	r3, #0
 8013298:	61bb      	str	r3, [r7, #24]
 801329a:	4b9d      	ldr	r3, [pc, #628]	; (8013510 <MX_GPIO_Init+0x2c8>)
 801329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801329e:	4a9c      	ldr	r2, [pc, #624]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132a0:	f043 0320 	orr.w	r3, r3, #32
 80132a4:	6313      	str	r3, [r2, #48]	; 0x30
 80132a6:	4b9a      	ldr	r3, [pc, #616]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132aa:	f003 0320 	and.w	r3, r3, #32
 80132ae:	61bb      	str	r3, [r7, #24]
 80132b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80132b2:	2300      	movs	r3, #0
 80132b4:	617b      	str	r3, [r7, #20]
 80132b6:	4b96      	ldr	r3, [pc, #600]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132ba:	4a95      	ldr	r2, [pc, #596]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132c0:	6313      	str	r3, [r2, #48]	; 0x30
 80132c2:	4b93      	ldr	r3, [pc, #588]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132ca:	617b      	str	r3, [r7, #20]
 80132cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80132ce:	2300      	movs	r3, #0
 80132d0:	613b      	str	r3, [r7, #16]
 80132d2:	4b8f      	ldr	r3, [pc, #572]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132d6:	4a8e      	ldr	r2, [pc, #568]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132d8:	f043 0301 	orr.w	r3, r3, #1
 80132dc:	6313      	str	r3, [r2, #48]	; 0x30
 80132de:	4b8c      	ldr	r3, [pc, #560]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132e2:	f003 0301 	and.w	r3, r3, #1
 80132e6:	613b      	str	r3, [r7, #16]
 80132e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80132ea:	2300      	movs	r3, #0
 80132ec:	60fb      	str	r3, [r7, #12]
 80132ee:	4b88      	ldr	r3, [pc, #544]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132f2:	4a87      	ldr	r2, [pc, #540]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132f4:	f043 0302 	orr.w	r3, r3, #2
 80132f8:	6313      	str	r3, [r2, #48]	; 0x30
 80132fa:	4b85      	ldr	r3, [pc, #532]	; (8013510 <MX_GPIO_Init+0x2c8>)
 80132fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132fe:	f003 0302 	and.w	r3, r3, #2
 8013302:	60fb      	str	r3, [r7, #12]
 8013304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8013306:	2300      	movs	r3, #0
 8013308:	60bb      	str	r3, [r7, #8]
 801330a:	4b81      	ldr	r3, [pc, #516]	; (8013510 <MX_GPIO_Init+0x2c8>)
 801330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801330e:	4a80      	ldr	r2, [pc, #512]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013314:	6313      	str	r3, [r2, #48]	; 0x30
 8013316:	4b7e      	ldr	r3, [pc, #504]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801331e:	60bb      	str	r3, [r7, #8]
 8013320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013322:	2300      	movs	r3, #0
 8013324:	607b      	str	r3, [r7, #4]
 8013326:	4b7a      	ldr	r3, [pc, #488]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332a:	4a79      	ldr	r2, [pc, #484]	; (8013510 <MX_GPIO_Init+0x2c8>)
 801332c:	f043 0308 	orr.w	r3, r3, #8
 8013330:	6313      	str	r3, [r2, #48]	; 0x30
 8013332:	4b77      	ldr	r3, [pc, #476]	; (8013510 <MX_GPIO_Init+0x2c8>)
 8013334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013336:	f003 0308 	and.w	r3, r3, #8
 801333a:	607b      	str	r3, [r7, #4]
 801333c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 801333e:	2200      	movs	r2, #0
 8013340:	f247 013c 	movw	r1, #28732	; 0x703c
 8013344:	4873      	ldr	r0, [pc, #460]	; (8013514 <MX_GPIO_Init+0x2cc>)
 8013346:	f7ee fe0f 	bl	8001f68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LD1_Pin, GPIO_PIN_RESET);
 801334a:	2200      	movs	r2, #0
 801334c:	f240 2101 	movw	r1, #513	; 0x201
 8013350:	4871      	ldr	r0, [pc, #452]	; (8013518 <MX_GPIO_Init+0x2d0>)
 8013352:	f7ee fe09 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8013356:	2200      	movs	r2, #0
 8013358:	2108      	movs	r1, #8
 801335a:	4870      	ldr	r0, [pc, #448]	; (801351c <MX_GPIO_Init+0x2d4>)
 801335c:	f7ee fe04 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8013360:	2200      	movs	r2, #0
 8013362:	f244 0181 	movw	r1, #16513	; 0x4081
 8013366:	486e      	ldr	r0, [pc, #440]	; (8013520 <MX_GPIO_Init+0x2d8>)
 8013368:	f7ee fdfe 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 801336c:	2200      	movs	r2, #0
 801336e:	2140      	movs	r1, #64	; 0x40
 8013370:	486c      	ldr	r0, [pc, #432]	; (8013524 <MX_GPIO_Init+0x2dc>)
 8013372:	f7ee fdf9 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8013376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801337a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801337c:	2303      	movs	r3, #3
 801337e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013380:	2300      	movs	r3, #0
 8013382:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013388:	4619      	mov	r1, r3
 801338a:	4867      	ldr	r0, [pc, #412]	; (8013528 <MX_GPIO_Init+0x2e0>)
 801338c:	f7ee fc42 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8013390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013396:	4b65      	ldr	r3, [pc, #404]	; (801352c <MX_GPIO_Init+0x2e4>)
 8013398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801339a:	2300      	movs	r3, #0
 801339c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 801339e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133a2:	4619      	mov	r1, r3
 80133a4:	485c      	ldr	r0, [pc, #368]	; (8013518 <MX_GPIO_Init+0x2d0>)
 80133a6:	f7ee fc35 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 80133aa:	f247 033c 	movw	r3, #28732	; 0x703c
 80133ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80133b0:	2301      	movs	r3, #1
 80133b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133b4:	2300      	movs	r3, #0
 80133b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80133b8:	2300      	movs	r3, #0
 80133ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80133bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133c0:	4619      	mov	r1, r3
 80133c2:	4854      	ldr	r0, [pc, #336]	; (8013514 <MX_GPIO_Init+0x2cc>)
 80133c4:	f7ee fc26 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80133c8:	f648 73c0 	movw	r3, #36800	; 0x8fc0
 80133cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80133ce:	2303      	movs	r3, #3
 80133d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133d2:	2300      	movs	r3, #0
 80133d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80133d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133da:	4619      	mov	r1, r3
 80133dc:	484d      	ldr	r0, [pc, #308]	; (8013514 <MX_GPIO_Init+0x2cc>)
 80133de:	f7ee fc19 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD1_Pin;
 80133e2:	f240 2301 	movw	r3, #513	; 0x201
 80133e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80133e8:	2301      	movs	r3, #1
 80133ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133ec:	2300      	movs	r3, #0
 80133ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80133f0:	2300      	movs	r3, #0
 80133f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80133f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133f8:	4619      	mov	r1, r3
 80133fa:	4847      	ldr	r0, [pc, #284]	; (8013518 <MX_GPIO_Init+0x2d0>)
 80133fc:	f7ee fc0a 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC6 PC7 
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7 
 8013400:	f641 53cc 	movw	r3, #7628	; 0x1dcc
 8013404:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013406:	2303      	movs	r3, #3
 8013408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801340a:	2300      	movs	r3, #0
 801340c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801340e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013412:	4619      	mov	r1, r3
 8013414:	4840      	ldr	r0, [pc, #256]	; (8013518 <MX_GPIO_Init+0x2d0>)
 8013416:	f7ee fbfd 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 801341a:	2331      	movs	r3, #49	; 0x31
 801341c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801341e:	2303      	movs	r3, #3
 8013420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013422:	2300      	movs	r3, #0
 8013424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801342a:	4619      	mov	r1, r3
 801342c:	483b      	ldr	r0, [pc, #236]	; (801351c <MX_GPIO_Init+0x2d4>)
 801342e:	f7ee fbf1 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8013432:	2308      	movs	r3, #8
 8013434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013436:	2301      	movs	r3, #1
 8013438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801343a:	2300      	movs	r3, #0
 801343c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801343e:	2300      	movs	r3, #0
 8013440:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013446:	4619      	mov	r1, r3
 8013448:	4834      	ldr	r0, [pc, #208]	; (801351c <MX_GPIO_Init+0x2d4>)
 801344a:	f7ee fbe3 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 801344e:	2340      	movs	r3, #64	; 0x40
 8013450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013452:	2300      	movs	r3, #0
 8013454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013456:	2300      	movs	r3, #0
 8013458:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801345a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801345e:	4619      	mov	r1, r3
 8013460:	482e      	ldr	r0, [pc, #184]	; (801351c <MX_GPIO_Init+0x2d4>)
 8013462:	f7ee fbd7 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8013466:	f244 0381 	movw	r3, #16513	; 0x4081
 801346a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801346c:	2301      	movs	r3, #1
 801346e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013470:	2300      	movs	r3, #0
 8013472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013474:	2300      	movs	r3, #0
 8013476:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801347c:	4619      	mov	r1, r3
 801347e:	4828      	ldr	r0, [pc, #160]	; (8013520 <MX_GPIO_Init+0x2d8>)
 8013480:	f7ee fbc8 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8013484:	f649 4346 	movw	r3, #40006	; 0x9c46
 8013488:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801348a:	2303      	movs	r3, #3
 801348c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801348e:	2300      	movs	r3, #0
 8013490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013496:	4619      	mov	r1, r3
 8013498:	4821      	ldr	r0, [pc, #132]	; (8013520 <MX_GPIO_Init+0x2d8>)
 801349a:	f7ee fbbb 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 801349e:	f24d 733f 	movw	r3, #55103	; 0xd73f
 80134a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80134a4:	2303      	movs	r3, #3
 80134a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134a8:	2300      	movs	r3, #0
 80134aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80134ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134b0:	4619      	mov	r1, r3
 80134b2:	481c      	ldr	r0, [pc, #112]	; (8013524 <MX_GPIO_Init+0x2dc>)
 80134b4:	f7ee fbae 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80134b8:	f643 43ff 	movw	r3, #15615	; 0x3cff
 80134bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80134be:	2303      	movs	r3, #3
 80134c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134c2:	2300      	movs	r3, #0
 80134c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134ca:	4619      	mov	r1, r3
 80134cc:	4818      	ldr	r0, [pc, #96]	; (8013530 <MX_GPIO_Init+0x2e8>)
 80134ce:	f7ee fba1 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80134d2:	2340      	movs	r3, #64	; 0x40
 80134d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80134d6:	2301      	movs	r3, #1
 80134d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134da:	2300      	movs	r3, #0
 80134dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80134de:	2300      	movs	r3, #0
 80134e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80134e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134e6:	4619      	mov	r1, r3
 80134e8:	480e      	ldr	r0, [pc, #56]	; (8013524 <MX_GPIO_Init+0x2dc>)
 80134ea:	f7ee fb93 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80134ee:	2380      	movs	r3, #128	; 0x80
 80134f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80134f2:	2300      	movs	r3, #0
 80134f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134f6:	2300      	movs	r3, #0
 80134f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80134fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134fe:	4619      	mov	r1, r3
 8013500:	4808      	ldr	r0, [pc, #32]	; (8013524 <MX_GPIO_Init+0x2dc>)
 8013502:	f7ee fb87 	bl	8001c14 <HAL_GPIO_Init>

}
 8013506:	bf00      	nop
 8013508:	3738      	adds	r7, #56	; 0x38
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	40023800 	.word	0x40023800
 8013514:	40021400 	.word	0x40021400
 8013518:	40020800 	.word	0x40020800
 801351c:	40020000 	.word	0x40020000
 8013520:	40020400 	.word	0x40020400
 8013524:	40021800 	.word	0x40021800
 8013528:	40021000 	.word	0x40021000
 801352c:	10110000 	.word	0x10110000
 8013530:	40020c00 	.word	0x40020c00

08013534 <F_GPIO_SetLedRed>:

/* USER CODE BEGIN 2 */
void F_GPIO_SetLedRed(int state){
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
	(state) ? (GPIOB->ODR |= LED_Red) : (GPIOB->ODR &= ~LED_Red) ;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d006      	beq.n	8013550 <F_GPIO_SetLedRed+0x1c>
 8013542:	4b09      	ldr	r3, [pc, #36]	; (8013568 <F_GPIO_SetLedRed+0x34>)
 8013544:	695b      	ldr	r3, [r3, #20]
 8013546:	4a08      	ldr	r2, [pc, #32]	; (8013568 <F_GPIO_SetLedRed+0x34>)
 8013548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801354c:	6153      	str	r3, [r2, #20]
}
 801354e:	e005      	b.n	801355c <F_GPIO_SetLedRed+0x28>
	(state) ? (GPIOB->ODR |= LED_Red) : (GPIOB->ODR &= ~LED_Red) ;
 8013550:	4b05      	ldr	r3, [pc, #20]	; (8013568 <F_GPIO_SetLedRed+0x34>)
 8013552:	695b      	ldr	r3, [r3, #20]
 8013554:	4a04      	ldr	r2, [pc, #16]	; (8013568 <F_GPIO_SetLedRed+0x34>)
 8013556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801355a:	6153      	str	r3, [r2, #20]
}
 801355c:	bf00      	nop
 801355e:	370c      	adds	r7, #12
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr
 8013568:	40020400 	.word	0x40020400

0801356c <F_GPIO_SetLedBlue>:

void F_GPIO_SetLedBlue(int state){
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
	// Led sur PB7
	(state) ? (GPIOB->ODR |= LED_Blue) : (GPIOB->ODR &= ~LED_Blue) ;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d006      	beq.n	8013588 <F_GPIO_SetLedBlue+0x1c>
 801357a:	4b09      	ldr	r3, [pc, #36]	; (80135a0 <F_GPIO_SetLedBlue+0x34>)
 801357c:	695b      	ldr	r3, [r3, #20]
 801357e:	4a08      	ldr	r2, [pc, #32]	; (80135a0 <F_GPIO_SetLedBlue+0x34>)
 8013580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013584:	6153      	str	r3, [r2, #20]
}
 8013586:	e005      	b.n	8013594 <F_GPIO_SetLedBlue+0x28>
	(state) ? (GPIOB->ODR |= LED_Blue) : (GPIOB->ODR &= ~LED_Blue) ;
 8013588:	4b05      	ldr	r3, [pc, #20]	; (80135a0 <F_GPIO_SetLedBlue+0x34>)
 801358a:	695b      	ldr	r3, [r3, #20]
 801358c:	4a04      	ldr	r2, [pc, #16]	; (80135a0 <F_GPIO_SetLedBlue+0x34>)
 801358e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013592:	6153      	str	r3, [r2, #20]
}
 8013594:	bf00      	nop
 8013596:	370c      	adds	r7, #12
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr
 80135a0:	40020400 	.word	0x40020400

080135a4 <F_GPIO_SetLedGreen>:

void F_GPIO_SetLedGreen(int state){
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
	// Led sur PB14
	(state) ? (GPIOB->ODR |= LED_Green) : (GPIOB->ODR &= ~LED_Green) ;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d006      	beq.n	80135c0 <F_GPIO_SetLedGreen+0x1c>
 80135b2:	4b09      	ldr	r3, [pc, #36]	; (80135d8 <F_GPIO_SetLedGreen+0x34>)
 80135b4:	695b      	ldr	r3, [r3, #20]
 80135b6:	4a08      	ldr	r2, [pc, #32]	; (80135d8 <F_GPIO_SetLedGreen+0x34>)
 80135b8:	f043 0301 	orr.w	r3, r3, #1
 80135bc:	6153      	str	r3, [r2, #20]
}
 80135be:	e005      	b.n	80135cc <F_GPIO_SetLedGreen+0x28>
	(state) ? (GPIOB->ODR |= LED_Green) : (GPIOB->ODR &= ~LED_Green) ;
 80135c0:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <F_GPIO_SetLedGreen+0x34>)
 80135c2:	695b      	ldr	r3, [r3, #20]
 80135c4:	4a04      	ldr	r2, [pc, #16]	; (80135d8 <F_GPIO_SetLedGreen+0x34>)
 80135c6:	f023 0301 	bic.w	r3, r3, #1
 80135ca:	6153      	str	r3, [r2, #20]
}
 80135cc:	bf00      	nop
 80135ce:	370c      	adds	r7, #12
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr
 80135d8:	40020400 	.word	0x40020400

080135dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80135e0:	4b1b      	ldr	r3, [pc, #108]	; (8013650 <MX_I2C1_Init+0x74>)
 80135e2:	4a1c      	ldr	r2, [pc, #112]	; (8013654 <MX_I2C1_Init+0x78>)
 80135e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80135e6:	4b1a      	ldr	r3, [pc, #104]	; (8013650 <MX_I2C1_Init+0x74>)
 80135e8:	4a1b      	ldr	r2, [pc, #108]	; (8013658 <MX_I2C1_Init+0x7c>)
 80135ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80135ec:	4b18      	ldr	r3, [pc, #96]	; (8013650 <MX_I2C1_Init+0x74>)
 80135ee:	2200      	movs	r2, #0
 80135f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80135f2:	4b17      	ldr	r3, [pc, #92]	; (8013650 <MX_I2C1_Init+0x74>)
 80135f4:	2200      	movs	r2, #0
 80135f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80135f8:	4b15      	ldr	r3, [pc, #84]	; (8013650 <MX_I2C1_Init+0x74>)
 80135fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80135fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013600:	4b13      	ldr	r3, [pc, #76]	; (8013650 <MX_I2C1_Init+0x74>)
 8013602:	2200      	movs	r2, #0
 8013604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8013606:	4b12      	ldr	r3, [pc, #72]	; (8013650 <MX_I2C1_Init+0x74>)
 8013608:	2200      	movs	r2, #0
 801360a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801360c:	4b10      	ldr	r3, [pc, #64]	; (8013650 <MX_I2C1_Init+0x74>)
 801360e:	2200      	movs	r2, #0
 8013610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013612:	4b0f      	ldr	r3, [pc, #60]	; (8013650 <MX_I2C1_Init+0x74>)
 8013614:	2200      	movs	r2, #0
 8013616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013618:	480d      	ldr	r0, [pc, #52]	; (8013650 <MX_I2C1_Init+0x74>)
 801361a:	f7ee fcbf 	bl	8001f9c <HAL_I2C_Init>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d001      	beq.n	8013628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8013624:	f000 fbf2 	bl	8013e0c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013628:	2100      	movs	r1, #0
 801362a:	4809      	ldr	r0, [pc, #36]	; (8013650 <MX_I2C1_Init+0x74>)
 801362c:	f7ee fdde 	bl	80021ec <HAL_I2CEx_ConfigAnalogFilter>
 8013630:	4603      	mov	r3, r0
 8013632:	2b00      	cmp	r3, #0
 8013634:	d001      	beq.n	801363a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8013636:	f000 fbe9 	bl	8013e0c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801363a:	2100      	movs	r1, #0
 801363c:	4804      	ldr	r0, [pc, #16]	; (8013650 <MX_I2C1_Init+0x74>)
 801363e:	f7ee fe11 	bl	8002264 <HAL_I2CEx_ConfigDigitalFilter>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d001      	beq.n	801364c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8013648:	f000 fbe0 	bl	8013e0c <Error_Handler>
  }

}
 801364c:	bf00      	nop
 801364e:	bd80      	pop	{r7, pc}
 8013650:	20006a04 	.word	0x20006a04
 8013654:	40005400 	.word	0x40005400
 8013658:	000186a0 	.word	0x000186a0

0801365c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8013660:	4b1b      	ldr	r3, [pc, #108]	; (80136d0 <MX_I2C2_Init+0x74>)
 8013662:	4a1c      	ldr	r2, [pc, #112]	; (80136d4 <MX_I2C2_Init+0x78>)
 8013664:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8013666:	4b1a      	ldr	r3, [pc, #104]	; (80136d0 <MX_I2C2_Init+0x74>)
 8013668:	4a1b      	ldr	r2, [pc, #108]	; (80136d8 <MX_I2C2_Init+0x7c>)
 801366a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801366c:	4b18      	ldr	r3, [pc, #96]	; (80136d0 <MX_I2C2_Init+0x74>)
 801366e:	2200      	movs	r2, #0
 8013670:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8013672:	4b17      	ldr	r3, [pc, #92]	; (80136d0 <MX_I2C2_Init+0x74>)
 8013674:	2200      	movs	r2, #0
 8013676:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013678:	4b15      	ldr	r3, [pc, #84]	; (80136d0 <MX_I2C2_Init+0x74>)
 801367a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801367e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013680:	4b13      	ldr	r3, [pc, #76]	; (80136d0 <MX_I2C2_Init+0x74>)
 8013682:	2200      	movs	r2, #0
 8013684:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8013686:	4b12      	ldr	r3, [pc, #72]	; (80136d0 <MX_I2C2_Init+0x74>)
 8013688:	2200      	movs	r2, #0
 801368a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801368c:	4b10      	ldr	r3, [pc, #64]	; (80136d0 <MX_I2C2_Init+0x74>)
 801368e:	2200      	movs	r2, #0
 8013690:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013692:	4b0f      	ldr	r3, [pc, #60]	; (80136d0 <MX_I2C2_Init+0x74>)
 8013694:	2200      	movs	r2, #0
 8013696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8013698:	480d      	ldr	r0, [pc, #52]	; (80136d0 <MX_I2C2_Init+0x74>)
 801369a:	f7ee fc7f 	bl	8001f9c <HAL_I2C_Init>
 801369e:	4603      	mov	r3, r0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d001      	beq.n	80136a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80136a4:	f000 fbb2 	bl	8013e0c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80136a8:	2100      	movs	r1, #0
 80136aa:	4809      	ldr	r0, [pc, #36]	; (80136d0 <MX_I2C2_Init+0x74>)
 80136ac:	f7ee fd9e 	bl	80021ec <HAL_I2CEx_ConfigAnalogFilter>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d001      	beq.n	80136ba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80136b6:	f000 fba9 	bl	8013e0c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80136ba:	2100      	movs	r1, #0
 80136bc:	4804      	ldr	r0, [pc, #16]	; (80136d0 <MX_I2C2_Init+0x74>)
 80136be:	f7ee fdd1 	bl	8002264 <HAL_I2CEx_ConfigDigitalFilter>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d001      	beq.n	80136cc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80136c8:	f000 fba0 	bl	8013e0c <Error_Handler>
  }

}
 80136cc:	bf00      	nop
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	20006a58 	.word	0x20006a58
 80136d4:	40005800 	.word	0x40005800
 80136d8:	000186a0 	.word	0x000186a0

080136dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b08c      	sub	sp, #48	; 0x30
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80136e4:	f107 031c 	add.w	r3, r7, #28
 80136e8:	2200      	movs	r2, #0
 80136ea:	601a      	str	r2, [r3, #0]
 80136ec:	605a      	str	r2, [r3, #4]
 80136ee:	609a      	str	r2, [r3, #8]
 80136f0:	60da      	str	r2, [r3, #12]
 80136f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	4a32      	ldr	r2, [pc, #200]	; (80137c4 <HAL_I2C_MspInit+0xe8>)
 80136fa:	4293      	cmp	r3, r2
 80136fc:	d12d      	bne.n	801375a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80136fe:	2300      	movs	r3, #0
 8013700:	61bb      	str	r3, [r7, #24]
 8013702:	4b31      	ldr	r3, [pc, #196]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 8013704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013706:	4a30      	ldr	r2, [pc, #192]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 8013708:	f043 0302 	orr.w	r3, r3, #2
 801370c:	6313      	str	r3, [r2, #48]	; 0x30
 801370e:	4b2e      	ldr	r3, [pc, #184]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 8013710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013712:	f003 0302 	and.w	r3, r3, #2
 8013716:	61bb      	str	r3, [r7, #24]
 8013718:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801371a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013720:	2312      	movs	r3, #18
 8013722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013724:	2301      	movs	r3, #1
 8013726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013728:	2303      	movs	r3, #3
 801372a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801372c:	2304      	movs	r3, #4
 801372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013730:	f107 031c 	add.w	r3, r7, #28
 8013734:	4619      	mov	r1, r3
 8013736:	4825      	ldr	r0, [pc, #148]	; (80137cc <HAL_I2C_MspInit+0xf0>)
 8013738:	f7ee fa6c 	bl	8001c14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801373c:	2300      	movs	r3, #0
 801373e:	617b      	str	r3, [r7, #20]
 8013740:	4b21      	ldr	r3, [pc, #132]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 8013742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013744:	4a20      	ldr	r2, [pc, #128]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 8013746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801374a:	6413      	str	r3, [r2, #64]	; 0x40
 801374c:	4b1e      	ldr	r3, [pc, #120]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 801374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013754:	617b      	str	r3, [r7, #20]
 8013756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013758:	e030      	b.n	80137bc <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	4a1c      	ldr	r2, [pc, #112]	; (80137d0 <HAL_I2C_MspInit+0xf4>)
 8013760:	4293      	cmp	r3, r2
 8013762:	d12b      	bne.n	80137bc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8013764:	2300      	movs	r3, #0
 8013766:	613b      	str	r3, [r7, #16]
 8013768:	4b17      	ldr	r3, [pc, #92]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 801376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801376c:	4a16      	ldr	r2, [pc, #88]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 801376e:	f043 0320 	orr.w	r3, r3, #32
 8013772:	6313      	str	r3, [r2, #48]	; 0x30
 8013774:	4b14      	ldr	r3, [pc, #80]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 8013776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013778:	f003 0320 	and.w	r3, r3, #32
 801377c:	613b      	str	r3, [r7, #16]
 801377e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013780:	2303      	movs	r3, #3
 8013782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013784:	2312      	movs	r3, #18
 8013786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013788:	2301      	movs	r3, #1
 801378a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801378c:	2303      	movs	r3, #3
 801378e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013790:	2304      	movs	r3, #4
 8013792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013794:	f107 031c 	add.w	r3, r7, #28
 8013798:	4619      	mov	r1, r3
 801379a:	480e      	ldr	r0, [pc, #56]	; (80137d4 <HAL_I2C_MspInit+0xf8>)
 801379c:	f7ee fa3a 	bl	8001c14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80137a0:	2300      	movs	r3, #0
 80137a2:	60fb      	str	r3, [r7, #12]
 80137a4:	4b08      	ldr	r3, [pc, #32]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 80137a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a8:	4a07      	ldr	r2, [pc, #28]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 80137aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80137ae:	6413      	str	r3, [r2, #64]	; 0x40
 80137b0:	4b05      	ldr	r3, [pc, #20]	; (80137c8 <HAL_I2C_MspInit+0xec>)
 80137b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80137b8:	60fb      	str	r3, [r7, #12]
 80137ba:	68fb      	ldr	r3, [r7, #12]
}
 80137bc:	bf00      	nop
 80137be:	3730      	adds	r7, #48	; 0x30
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	40005400 	.word	0x40005400
 80137c8:	40023800 	.word	0x40023800
 80137cc:	40020400 	.word	0x40020400
 80137d0:	40005800 	.word	0x40005800
 80137d4:	40021400 	.word	0x40021400

080137d8 <F_I2C2_WriteRegister>:
/* USER CODE BEGIN 1 */
/** I2C2 *****/
/**
 * Write a single value in a slave register
 */
uint8_t F_I2C2_WriteRegister(uint8_t slave_addr, uint16_t register_addr, uint8_t *value, uint8_t size){
 80137d8:	b480      	push	{r7}
 80137da:	b085      	sub	sp, #20
 80137dc:	af00      	add	r7, sp, #0
 80137de:	603a      	str	r2, [r7, #0]
 80137e0:	461a      	mov	r2, r3
 80137e2:	4603      	mov	r3, r0
 80137e4:	71fb      	strb	r3, [r7, #7]
 80137e6:	460b      	mov	r3, r1
 80137e8:	80bb      	strh	r3, [r7, #4]
 80137ea:	4613      	mov	r3, r2
 80137ec:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = I2C_STATUS_OK;
 80137ee:	2300      	movs	r3, #0
 80137f0:	72bb      	strb	r3, [r7, #10]
	uint32_t timeout = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80137f6:	2300      	movs	r3, #0
 80137f8:	72fb      	strb	r3, [r7, #11]

    // Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 80137fa:	4b38      	ldr	r3, [pc, #224]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	4a37      	ldr	r2, [pc, #220]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 8013800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013804:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8013806:	e002      	b.n	801380e <F_I2C2_WriteRegister+0x36>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	3301      	adds	r3, #1
 801380c:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 801380e:	4b33      	ldr	r3, [pc, #204]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 8013810:	695b      	ldr	r3, [r3, #20]
 8013812:	f003 0301 	and.w	r3, r3, #1
 8013816:	2b00      	cmp	r3, #0
 8013818:	d0f6      	beq.n	8013808 <F_I2C2_WriteRegister+0x30>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 801381a:	79fb      	ldrb	r3, [r7, #7]
 801381c:	4a2f      	ldr	r2, [pc, #188]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801381e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8013822:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8013824:	e002      	b.n	801382c <F_I2C2_WriteRegister+0x54>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	3301      	adds	r3, #1
 801382a:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 801382c:	4b2b      	ldr	r3, [pc, #172]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801382e:	695b      	ldr	r3, [r3, #20]
 8013830:	f003 0302 	and.w	r3, r3, #2
 8013834:	2b00      	cmp	r3, #0
 8013836:	d0f6      	beq.n	8013826 <F_I2C2_WriteRegister+0x4e>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 8013838:	4b28      	ldr	r3, [pc, #160]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801383a:	699b      	ldr	r3, [r3, #24]
 801383c:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 801383e:	88bb      	ldrh	r3, [r7, #4]
 8013840:	0a1b      	lsrs	r3, r3, #8
 8013842:	b29b      	uxth	r3, r3
 8013844:	b2da      	uxtb	r2, r3
 8013846:	4b25      	ldr	r3, [pc, #148]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 8013848:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 801384a:	bf00      	nop
 801384c:	4b23      	ldr	r3, [pc, #140]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801384e:	695b      	ldr	r3, [r3, #20]
 8013850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013854:	2b00      	cmp	r3, #0
 8013856:	d105      	bne.n	8013864 <F_I2C2_WriteRegister+0x8c>
 8013858:	4b20      	ldr	r3, [pc, #128]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801385a:	695b      	ldr	r3, [r3, #20]
 801385c:	f003 0304 	and.w	r3, r3, #4
 8013860:	2b00      	cmp	r3, #0
 8013862:	d0f3      	beq.n	801384c <F_I2C2_WriteRegister+0x74>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 8013864:	88bb      	ldrh	r3, [r7, #4]
 8013866:	b2da      	uxtb	r2, r3
 8013868:	4b1c      	ldr	r3, [pc, #112]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801386a:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 801386c:	bf00      	nop
 801386e:	4b1b      	ldr	r3, [pc, #108]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 8013870:	695b      	ldr	r3, [r3, #20]
 8013872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013876:	2b00      	cmp	r3, #0
 8013878:	d105      	bne.n	8013886 <F_I2C2_WriteRegister+0xae>
 801387a:	4b18      	ldr	r3, [pc, #96]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801387c:	695b      	ldr	r3, [r3, #20]
 801387e:	f003 0304 	and.w	r3, r3, #4
 8013882:	2b00      	cmp	r3, #0
 8013884:	d0f3      	beq.n	801386e <F_I2C2_WriteRegister+0x96>

	for(i=0;i<size;i++)
 8013886:	2300      	movs	r3, #0
 8013888:	72fb      	strb	r3, [r7, #11]
 801388a:	e015      	b.n	80138b8 <F_I2C2_WriteRegister+0xe0>
	{

		// Send new value to write to the register
		I2C2->DR = value[i];
 801388c:	7afb      	ldrb	r3, [r7, #11]
 801388e:	683a      	ldr	r2, [r7, #0]
 8013890:	4413      	add	r3, r2
 8013892:	781a      	ldrb	r2, [r3, #0]
 8013894:	4b11      	ldr	r3, [pc, #68]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 8013896:	611a      	str	r2, [r3, #16]
		while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8013898:	bf00      	nop
 801389a:	4b10      	ldr	r3, [pc, #64]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 801389c:	695b      	ldr	r3, [r3, #20]
 801389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d105      	bne.n	80138b2 <F_I2C2_WriteRegister+0xda>
 80138a6:	4b0d      	ldr	r3, [pc, #52]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 80138a8:	695b      	ldr	r3, [r3, #20]
 80138aa:	f003 0304 	and.w	r3, r3, #4
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d0f3      	beq.n	801389a <F_I2C2_WriteRegister+0xc2>
	for(i=0;i<size;i++)
 80138b2:	7afb      	ldrb	r3, [r7, #11]
 80138b4:	3301      	adds	r3, #1
 80138b6:	72fb      	strb	r3, [r7, #11]
 80138b8:	7afa      	ldrb	r2, [r7, #11]
 80138ba:	79bb      	ldrb	r3, [r7, #6]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d3e5      	bcc.n	801388c <F_I2C2_WriteRegister+0xb4>

	}

	I2C2->CR1 |= I2C_CR1_STOP; // send STOP bit
 80138c0:	4b06      	ldr	r3, [pc, #24]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	4a05      	ldr	r2, [pc, #20]	; (80138dc <F_I2C2_WriteRegister+0x104>)
 80138c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80138ca:	6013      	str	r3, [r2, #0]
	return i2c_status;
 80138cc:	7abb      	ldrb	r3, [r7, #10]
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3714      	adds	r7, #20
 80138d2:	46bd      	mov	sp, r7
 80138d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop
 80138dc:	40005800 	.word	0x40005800

080138e0 <F_I2C2_ReadRegisterVL53L1X>:
	return i2c_status;
}


// Read x value from the device
uint8_t F_I2C2_ReadRegisterVL53L1X(uint8_t slave_addr, uint16_t register_addr, uint8_t nb_value_to_read, uint8_t *value_read){
 80138e0:	b480      	push	{r7}
 80138e2:	b085      	sub	sp, #20
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	603b      	str	r3, [r7, #0]
 80138e8:	4603      	mov	r3, r0
 80138ea:	71fb      	strb	r3, [r7, #7]
 80138ec:	460b      	mov	r3, r1
 80138ee:	80bb      	strh	r3, [r7, #4]
 80138f0:	4613      	mov	r3, r2
 80138f2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = 0;	// Init return value to error
 80138f4:	2300      	movs	r3, #0
 80138f6:	72bb      	strb	r3, [r7, #10]
	uint8_t status = I2C_STATUS_OK;
 80138f8:	2300      	movs	r3, #0
 80138fa:	727b      	strb	r3, [r7, #9]
	int timeout=0;
 80138fc:	2300      	movs	r3, #0
 80138fe:	60fb      	str	r3, [r7, #12]

	uint8_t i = 0;
 8013900:	2300      	movs	r3, #0
 8013902:	72fb      	strb	r3, [r7, #11]

	// Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 8013904:	4b4e      	ldr	r3, [pc, #312]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	4a4d      	ldr	r2, [pc, #308]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801390e:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8013910:	e002      	b.n	8013918 <F_I2C2_ReadRegisterVL53L1X+0x38>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	3301      	adds	r3, #1
 8013916:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8013918:	4b49      	ldr	r3, [pc, #292]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801391a:	695b      	ldr	r3, [r3, #20]
 801391c:	f003 0301 	and.w	r3, r3, #1
 8013920:	2b00      	cmp	r3, #0
 8013922:	d0f6      	beq.n	8013912 <F_I2C2_ReadRegisterVL53L1X+0x32>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 8013924:	79fb      	ldrb	r3, [r7, #7]
 8013926:	4a46      	ldr	r2, [pc, #280]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013928:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801392c:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 801392e:	e002      	b.n	8013936 <F_I2C2_ReadRegisterVL53L1X+0x56>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	3301      	adds	r3, #1
 8013934:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8013936:	4b42      	ldr	r3, [pc, #264]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013938:	695b      	ldr	r3, [r3, #20]
 801393a:	f003 0302 	and.w	r3, r3, #2
 801393e:	2b00      	cmp	r3, #0
 8013940:	d0f6      	beq.n	8013930 <F_I2C2_ReadRegisterVL53L1X+0x50>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 8013942:	4b3f      	ldr	r3, [pc, #252]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013944:	699b      	ldr	r3, [r3, #24]
 8013946:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 8013948:	88bb      	ldrh	r3, [r7, #4]
 801394a:	0a1b      	lsrs	r3, r3, #8
 801394c:	b29b      	uxth	r3, r3
 801394e:	b2da      	uxtb	r2, r3
 8013950:	4b3b      	ldr	r3, [pc, #236]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013952:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8013954:	bf00      	nop
 8013956:	4b3a      	ldr	r3, [pc, #232]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013958:	695b      	ldr	r3, [r3, #20]
 801395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801395e:	2b00      	cmp	r3, #0
 8013960:	d105      	bne.n	801396e <F_I2C2_ReadRegisterVL53L1X+0x8e>
 8013962:	4b37      	ldr	r3, [pc, #220]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013964:	695b      	ldr	r3, [r3, #20]
 8013966:	f003 0304 	and.w	r3, r3, #4
 801396a:	2b00      	cmp	r3, #0
 801396c:	d0f3      	beq.n	8013956 <F_I2C2_ReadRegisterVL53L1X+0x76>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 801396e:	88bb      	ldrh	r3, [r7, #4]
 8013970:	b2da      	uxtb	r2, r3
 8013972:	4b33      	ldr	r3, [pc, #204]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013974:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8013976:	bf00      	nop
 8013978:	4b31      	ldr	r3, [pc, #196]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801397a:	695b      	ldr	r3, [r3, #20]
 801397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013980:	2b00      	cmp	r3, #0
 8013982:	d105      	bne.n	8013990 <F_I2C2_ReadRegisterVL53L1X+0xb0>
 8013984:	4b2e      	ldr	r3, [pc, #184]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013986:	695b      	ldr	r3, [r3, #20]
 8013988:	f003 0304 	and.w	r3, r3, #4
 801398c:	2b00      	cmp	r3, #0
 801398e:	d0f3      	beq.n	8013978 <F_I2C2_ReadRegisterVL53L1X+0x98>


	// Send repeated start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 8013990:	4b2b      	ldr	r3, [pc, #172]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	4a2a      	ldr	r2, [pc, #168]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801399a:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB));	// wait for START condition (SB=1)
 801399c:	bf00      	nop
 801399e:	4b28      	ldr	r3, [pc, #160]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139a0:	695b      	ldr	r3, [r3, #20]
 80139a2:	f003 0301 	and.w	r3, r3, #1
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d0f9      	beq.n	801399e <F_I2C2_ReadRegisterVL53L1X+0xbe>

	timeout=0;
 80139aa:	2300      	movs	r3, #0
 80139ac:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C2->DR = slave_addr | 1;	// address + read
 80139ae:	79fb      	ldrb	r3, [r7, #7]
 80139b0:	f043 0301 	orr.w	r3, r3, #1
 80139b4:	b2da      	uxtb	r2, r3
 80139b6:	4b22      	ldr	r3, [pc, #136]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139b8:	611a      	str	r2, [r3, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 80139ba:	e002      	b.n	80139c2 <F_I2C2_ReadRegisterVL53L1X+0xe2>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	3301      	adds	r3, #1
 80139c0:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 80139c2:	4b1f      	ldr	r3, [pc, #124]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139c4:	695b      	ldr	r3, [r3, #20]
 80139c6:	f003 0302 	and.w	r3, r3, #2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d0f6      	beq.n	80139bc <F_I2C2_ReadRegisterVL53L1X+0xdc>
	}
	i2c_status = I2C2->SR2; // read status to clear flag
 80139ce:	4b1c      	ldr	r3, [pc, #112]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139d0:	699b      	ldr	r3, [r3, #24]
 80139d2:	72bb      	strb	r3, [r7, #10]


	// prepare ACK
	I2C2->CR1 |= I2C_CR1_ACK;
 80139d4:	4b1a      	ldr	r3, [pc, #104]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	4a19      	ldr	r2, [pc, #100]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80139de:	6013      	str	r3, [r2, #0]

	for(i=0;i<nb_value_to_read;i++)
 80139e0:	2300      	movs	r3, #0
 80139e2:	72fb      	strb	r3, [r7, #11]
 80139e4:	e01b      	b.n	8013a1e <F_I2C2_ReadRegisterVL53L1X+0x13e>
	{

		// If this is the last byte to receive
		if((i+1) >= nb_value_to_read)
 80139e6:	7afb      	ldrb	r3, [r7, #11]
 80139e8:	1c5a      	adds	r2, r3, #1
 80139ea:	79bb      	ldrb	r3, [r7, #6]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	db05      	blt.n	80139fc <F_I2C2_ReadRegisterVL53L1X+0x11c>
		{
			// prepare NACK
			I2C2->CR1 &= ~I2C_CR1_ACK;
 80139f0:	4b13      	ldr	r3, [pc, #76]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4a12      	ldr	r2, [pc, #72]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80139f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80139fa:	6013      	str	r3, [r2, #0]
		}

		// Wait for Data available
			while (!(I2C2->SR1 & I2C_SR1_RXNE));
 80139fc:	bf00      	nop
 80139fe:	4b10      	ldr	r3, [pc, #64]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013a00:	695b      	ldr	r3, [r3, #20]
 8013a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d0f9      	beq.n	80139fe <F_I2C2_ReadRegisterVL53L1X+0x11e>
			value_read[i] = I2C2->DR; 			// Address in chip -> DR & write
 8013a0a:	4b0d      	ldr	r3, [pc, #52]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013a0c:	6919      	ldr	r1, [r3, #16]
 8013a0e:	7afb      	ldrb	r3, [r7, #11]
 8013a10:	683a      	ldr	r2, [r7, #0]
 8013a12:	4413      	add	r3, r2
 8013a14:	b2ca      	uxtb	r2, r1
 8013a16:	701a      	strb	r2, [r3, #0]
	for(i=0;i<nb_value_to_read;i++)
 8013a18:	7afb      	ldrb	r3, [r7, #11]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	72fb      	strb	r3, [r7, #11]
 8013a1e:	7afa      	ldrb	r2, [r7, #11]
 8013a20:	79bb      	ldrb	r3, [r7, #6]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d3df      	bcc.n	80139e6 <F_I2C2_ReadRegisterVL53L1X+0x106>
	}


	// send STOP bit
	I2C2->CR1 |= I2C_CR1_STOP;
 8013a26:	4b06      	ldr	r3, [pc, #24]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4a05      	ldr	r2, [pc, #20]	; (8013a40 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8013a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013a30:	6013      	str	r3, [r2, #0]
	return status;
 8013a32:	7a7b      	ldrb	r3, [r7, #9]
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3714      	adds	r7, #20
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3e:	4770      	bx	lr
 8013a40:	40005800 	.word	0x40005800

08013a44 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af04      	add	r7, sp, #16

	/* IP addresses initialization */
		  IP_ADDRESS[0] = 192;
 8013a4a:	4b8b      	ldr	r3, [pc, #556]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013a4c:	22c0      	movs	r2, #192	; 0xc0
 8013a4e:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = 168;
 8013a50:	4b89      	ldr	r3, [pc, #548]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013a52:	22a8      	movs	r2, #168	; 0xa8
 8013a54:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = 1;
 8013a56:	4b88      	ldr	r3, [pc, #544]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013a58:	2201      	movs	r2, #1
 8013a5a:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = 21;
 8013a5c:	4b86      	ldr	r3, [pc, #536]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013a5e:	2215      	movs	r2, #21
 8013a60:	70da      	strb	r2, [r3, #3]
		  NETMASK_ADDRESS[0] = 255;
 8013a62:	4b86      	ldr	r3, [pc, #536]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013a64:	22ff      	movs	r2, #255	; 0xff
 8013a66:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = 255;
 8013a68:	4b84      	ldr	r3, [pc, #528]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013a6a:	22ff      	movs	r2, #255	; 0xff
 8013a6c:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = 255;
 8013a6e:	4b83      	ldr	r3, [pc, #524]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013a70:	22ff      	movs	r2, #255	; 0xff
 8013a72:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = 0;
 8013a74:	4b81      	ldr	r3, [pc, #516]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013a76:	2200      	movs	r2, #0
 8013a78:	70da      	strb	r2, [r3, #3]
		  GATEWAY_ADDRESS[0] = 192;
 8013a7a:	4b81      	ldr	r3, [pc, #516]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013a7c:	22c0      	movs	r2, #192	; 0xc0
 8013a7e:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = 168;
 8013a80:	4b7f      	ldr	r3, [pc, #508]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013a82:	22a8      	movs	r2, #168	; 0xa8
 8013a84:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = 1;
 8013a86:	4b7e      	ldr	r3, [pc, #504]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013a88:	2201      	movs	r2, #1
 8013a8a:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = 1;
 8013a8c:	4b7c      	ldr	r3, [pc, #496]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013a8e:	2201      	movs	r2, #1
 8013a90:	70da      	strb	r2, [r3, #3]

		  /* Initilialize the LwIP stack without RTOS */
		  lwip_init();
 8013a92:	f7f4 f95c 	bl	8007d4e <lwip_init>

		  /* IP addresses initialization without DHCP (IPv4) */
		  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8013a96:	4b78      	ldr	r3, [pc, #480]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	061a      	lsls	r2, r3, #24
 8013a9c:	4b76      	ldr	r3, [pc, #472]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013a9e:	785b      	ldrb	r3, [r3, #1]
 8013aa0:	041b      	lsls	r3, r3, #16
 8013aa2:	431a      	orrs	r2, r3
 8013aa4:	4b74      	ldr	r3, [pc, #464]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013aa6:	789b      	ldrb	r3, [r3, #2]
 8013aa8:	021b      	lsls	r3, r3, #8
 8013aaa:	4313      	orrs	r3, r2
 8013aac:	4a72      	ldr	r2, [pc, #456]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013aae:	78d2      	ldrb	r2, [r2, #3]
 8013ab0:	4313      	orrs	r3, r2
 8013ab2:	061a      	lsls	r2, r3, #24
 8013ab4:	4b70      	ldr	r3, [pc, #448]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	0619      	lsls	r1, r3, #24
 8013aba:	4b6f      	ldr	r3, [pc, #444]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013abc:	785b      	ldrb	r3, [r3, #1]
 8013abe:	041b      	lsls	r3, r3, #16
 8013ac0:	4319      	orrs	r1, r3
 8013ac2:	4b6d      	ldr	r3, [pc, #436]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013ac4:	789b      	ldrb	r3, [r3, #2]
 8013ac6:	021b      	lsls	r3, r3, #8
 8013ac8:	430b      	orrs	r3, r1
 8013aca:	496b      	ldr	r1, [pc, #428]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013acc:	78c9      	ldrb	r1, [r1, #3]
 8013ace:	430b      	orrs	r3, r1
 8013ad0:	021b      	lsls	r3, r3, #8
 8013ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013ad6:	431a      	orrs	r2, r3
 8013ad8:	4b67      	ldr	r3, [pc, #412]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	0619      	lsls	r1, r3, #24
 8013ade:	4b66      	ldr	r3, [pc, #408]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013ae0:	785b      	ldrb	r3, [r3, #1]
 8013ae2:	041b      	lsls	r3, r3, #16
 8013ae4:	4319      	orrs	r1, r3
 8013ae6:	4b64      	ldr	r3, [pc, #400]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013ae8:	789b      	ldrb	r3, [r3, #2]
 8013aea:	021b      	lsls	r3, r3, #8
 8013aec:	430b      	orrs	r3, r1
 8013aee:	4962      	ldr	r1, [pc, #392]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013af0:	78c9      	ldrb	r1, [r1, #3]
 8013af2:	430b      	orrs	r3, r1
 8013af4:	0a1b      	lsrs	r3, r3, #8
 8013af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013afa:	431a      	orrs	r2, r3
 8013afc:	4b5e      	ldr	r3, [pc, #376]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	0619      	lsls	r1, r3, #24
 8013b02:	4b5d      	ldr	r3, [pc, #372]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013b04:	785b      	ldrb	r3, [r3, #1]
 8013b06:	041b      	lsls	r3, r3, #16
 8013b08:	4319      	orrs	r1, r3
 8013b0a:	4b5b      	ldr	r3, [pc, #364]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013b0c:	789b      	ldrb	r3, [r3, #2]
 8013b0e:	021b      	lsls	r3, r3, #8
 8013b10:	430b      	orrs	r3, r1
 8013b12:	4959      	ldr	r1, [pc, #356]	; (8013c78 <MX_LWIP_Init+0x234>)
 8013b14:	78c9      	ldrb	r1, [r1, #3]
 8013b16:	430b      	orrs	r3, r1
 8013b18:	0e1b      	lsrs	r3, r3, #24
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	4a59      	ldr	r2, [pc, #356]	; (8013c84 <MX_LWIP_Init+0x240>)
 8013b1e:	6013      	str	r3, [r2, #0]
		  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8013b20:	4b56      	ldr	r3, [pc, #344]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	061a      	lsls	r2, r3, #24
 8013b26:	4b55      	ldr	r3, [pc, #340]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b28:	785b      	ldrb	r3, [r3, #1]
 8013b2a:	041b      	lsls	r3, r3, #16
 8013b2c:	431a      	orrs	r2, r3
 8013b2e:	4b53      	ldr	r3, [pc, #332]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b30:	789b      	ldrb	r3, [r3, #2]
 8013b32:	021b      	lsls	r3, r3, #8
 8013b34:	4313      	orrs	r3, r2
 8013b36:	4a51      	ldr	r2, [pc, #324]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b38:	78d2      	ldrb	r2, [r2, #3]
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	061a      	lsls	r2, r3, #24
 8013b3e:	4b4f      	ldr	r3, [pc, #316]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	0619      	lsls	r1, r3, #24
 8013b44:	4b4d      	ldr	r3, [pc, #308]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b46:	785b      	ldrb	r3, [r3, #1]
 8013b48:	041b      	lsls	r3, r3, #16
 8013b4a:	4319      	orrs	r1, r3
 8013b4c:	4b4b      	ldr	r3, [pc, #300]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b4e:	789b      	ldrb	r3, [r3, #2]
 8013b50:	021b      	lsls	r3, r3, #8
 8013b52:	430b      	orrs	r3, r1
 8013b54:	4949      	ldr	r1, [pc, #292]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b56:	78c9      	ldrb	r1, [r1, #3]
 8013b58:	430b      	orrs	r3, r1
 8013b5a:	021b      	lsls	r3, r3, #8
 8013b5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013b60:	431a      	orrs	r2, r3
 8013b62:	4b46      	ldr	r3, [pc, #280]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	0619      	lsls	r1, r3, #24
 8013b68:	4b44      	ldr	r3, [pc, #272]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b6a:	785b      	ldrb	r3, [r3, #1]
 8013b6c:	041b      	lsls	r3, r3, #16
 8013b6e:	4319      	orrs	r1, r3
 8013b70:	4b42      	ldr	r3, [pc, #264]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b72:	789b      	ldrb	r3, [r3, #2]
 8013b74:	021b      	lsls	r3, r3, #8
 8013b76:	430b      	orrs	r3, r1
 8013b78:	4940      	ldr	r1, [pc, #256]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b7a:	78c9      	ldrb	r1, [r1, #3]
 8013b7c:	430b      	orrs	r3, r1
 8013b7e:	0a1b      	lsrs	r3, r3, #8
 8013b80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013b84:	431a      	orrs	r2, r3
 8013b86:	4b3d      	ldr	r3, [pc, #244]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	0619      	lsls	r1, r3, #24
 8013b8c:	4b3b      	ldr	r3, [pc, #236]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b8e:	785b      	ldrb	r3, [r3, #1]
 8013b90:	041b      	lsls	r3, r3, #16
 8013b92:	4319      	orrs	r1, r3
 8013b94:	4b39      	ldr	r3, [pc, #228]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b96:	789b      	ldrb	r3, [r3, #2]
 8013b98:	021b      	lsls	r3, r3, #8
 8013b9a:	430b      	orrs	r3, r1
 8013b9c:	4937      	ldr	r1, [pc, #220]	; (8013c7c <MX_LWIP_Init+0x238>)
 8013b9e:	78c9      	ldrb	r1, [r1, #3]
 8013ba0:	430b      	orrs	r3, r1
 8013ba2:	0e1b      	lsrs	r3, r3, #24
 8013ba4:	4313      	orrs	r3, r2
 8013ba6:	4a38      	ldr	r2, [pc, #224]	; (8013c88 <MX_LWIP_Init+0x244>)
 8013ba8:	6013      	str	r3, [r2, #0]
		  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8013baa:	4b35      	ldr	r3, [pc, #212]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bac:	781b      	ldrb	r3, [r3, #0]
 8013bae:	061a      	lsls	r2, r3, #24
 8013bb0:	4b33      	ldr	r3, [pc, #204]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bb2:	785b      	ldrb	r3, [r3, #1]
 8013bb4:	041b      	lsls	r3, r3, #16
 8013bb6:	431a      	orrs	r2, r3
 8013bb8:	4b31      	ldr	r3, [pc, #196]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bba:	789b      	ldrb	r3, [r3, #2]
 8013bbc:	021b      	lsls	r3, r3, #8
 8013bbe:	4313      	orrs	r3, r2
 8013bc0:	4a2f      	ldr	r2, [pc, #188]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bc2:	78d2      	ldrb	r2, [r2, #3]
 8013bc4:	4313      	orrs	r3, r2
 8013bc6:	061a      	lsls	r2, r3, #24
 8013bc8:	4b2d      	ldr	r3, [pc, #180]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	0619      	lsls	r1, r3, #24
 8013bce:	4b2c      	ldr	r3, [pc, #176]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bd0:	785b      	ldrb	r3, [r3, #1]
 8013bd2:	041b      	lsls	r3, r3, #16
 8013bd4:	4319      	orrs	r1, r3
 8013bd6:	4b2a      	ldr	r3, [pc, #168]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bd8:	789b      	ldrb	r3, [r3, #2]
 8013bda:	021b      	lsls	r3, r3, #8
 8013bdc:	430b      	orrs	r3, r1
 8013bde:	4928      	ldr	r1, [pc, #160]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013be0:	78c9      	ldrb	r1, [r1, #3]
 8013be2:	430b      	orrs	r3, r1
 8013be4:	021b      	lsls	r3, r3, #8
 8013be6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013bea:	431a      	orrs	r2, r3
 8013bec:	4b24      	ldr	r3, [pc, #144]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	0619      	lsls	r1, r3, #24
 8013bf2:	4b23      	ldr	r3, [pc, #140]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bf4:	785b      	ldrb	r3, [r3, #1]
 8013bf6:	041b      	lsls	r3, r3, #16
 8013bf8:	4319      	orrs	r1, r3
 8013bfa:	4b21      	ldr	r3, [pc, #132]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013bfc:	789b      	ldrb	r3, [r3, #2]
 8013bfe:	021b      	lsls	r3, r3, #8
 8013c00:	430b      	orrs	r3, r1
 8013c02:	491f      	ldr	r1, [pc, #124]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013c04:	78c9      	ldrb	r1, [r1, #3]
 8013c06:	430b      	orrs	r3, r1
 8013c08:	0a1b      	lsrs	r3, r3, #8
 8013c0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013c0e:	431a      	orrs	r2, r3
 8013c10:	4b1b      	ldr	r3, [pc, #108]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	0619      	lsls	r1, r3, #24
 8013c16:	4b1a      	ldr	r3, [pc, #104]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013c18:	785b      	ldrb	r3, [r3, #1]
 8013c1a:	041b      	lsls	r3, r3, #16
 8013c1c:	4319      	orrs	r1, r3
 8013c1e:	4b18      	ldr	r3, [pc, #96]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013c20:	789b      	ldrb	r3, [r3, #2]
 8013c22:	021b      	lsls	r3, r3, #8
 8013c24:	430b      	orrs	r3, r1
 8013c26:	4916      	ldr	r1, [pc, #88]	; (8013c80 <MX_LWIP_Init+0x23c>)
 8013c28:	78c9      	ldrb	r1, [r1, #3]
 8013c2a:	430b      	orrs	r3, r1
 8013c2c:	0e1b      	lsrs	r3, r3, #24
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	4a16      	ldr	r2, [pc, #88]	; (8013c8c <MX_LWIP_Init+0x248>)
 8013c32:	6013      	str	r3, [r2, #0]

		  /* add the network interface (IPv4/IPv6) without RTOS */
		  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8013c34:	4b16      	ldr	r3, [pc, #88]	; (8013c90 <MX_LWIP_Init+0x24c>)
 8013c36:	9302      	str	r3, [sp, #8]
 8013c38:	4b16      	ldr	r3, [pc, #88]	; (8013c94 <MX_LWIP_Init+0x250>)
 8013c3a:	9301      	str	r3, [sp, #4]
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	4b12      	ldr	r3, [pc, #72]	; (8013c8c <MX_LWIP_Init+0x248>)
 8013c42:	4a11      	ldr	r2, [pc, #68]	; (8013c88 <MX_LWIP_Init+0x244>)
 8013c44:	490f      	ldr	r1, [pc, #60]	; (8013c84 <MX_LWIP_Init+0x240>)
 8013c46:	4814      	ldr	r0, [pc, #80]	; (8013c98 <MX_LWIP_Init+0x254>)
 8013c48:	f7f4 fc86 	bl	8008558 <netif_add>

		  /* Registers the default network interface */
		  netif_set_default(&gnetif);
 8013c4c:	4812      	ldr	r0, [pc, #72]	; (8013c98 <MX_LWIP_Init+0x254>)
 8013c4e:	f7f4 fd6b 	bl	8008728 <netif_set_default>

		  if (netif_is_link_up(&gnetif))
 8013c52:	4b11      	ldr	r3, [pc, #68]	; (8013c98 <MX_LWIP_Init+0x254>)
 8013c54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013c58:	089b      	lsrs	r3, r3, #2
 8013c5a:	f003 0301 	and.w	r3, r3, #1
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d003      	beq.n	8013c6c <MX_LWIP_Init+0x228>
		  {
		    /* When the netif is fully configured this function must be called */
		    netif_set_up(&gnetif);
 8013c64:	480c      	ldr	r0, [pc, #48]	; (8013c98 <MX_LWIP_Init+0x254>)
 8013c66:	f7f4 fd6f 	bl	8008748 <netif_set_up>
		    netif_set_down(&gnetif);
		  }
/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013c6a:	e002      	b.n	8013c72 <MX_LWIP_Init+0x22e>
		    netif_set_down(&gnetif);
 8013c6c:	480a      	ldr	r0, [pc, #40]	; (8013c98 <MX_LWIP_Init+0x254>)
 8013c6e:	f7f4 fdaf 	bl	80087d0 <netif_set_down>
}
 8013c72:	bf00      	nop
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	20006aec 	.word	0x20006aec
 8013c7c:	20006ae8 	.word	0x20006ae8
 8013c80:	20006aac 	.word	0x20006aac
 8013c84:	20006ae4 	.word	0x20006ae4
 8013c88:	20006af0 	.word	0x20006af0
 8013c8c:	20006af4 	.word	0x20006af4
 8013c90:	080125cd 	.word	0x080125cd
 8013c94:	080131dd 	.word	0x080131dd
 8013c98:	20006ab0 	.word	0x20006ab0

08013c9c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8013ca0:	4803      	ldr	r0, [pc, #12]	; (8013cb0 <MX_LWIP_Process+0x14>)
 8013ca2:	f7ff fa7b 	bl	801319c <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8013ca6:	f7fa feb9 	bl	800ea1c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8013caa:	bf00      	nop
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	20006ab0 	.word	0x20006ab0

08013cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013cb8:	f7ec fe72 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013cbc:	f000 f83c 	bl	8013d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013cc0:	f7ff fac2 	bl	8013248 <MX_GPIO_Init>
  MX_I2C1_Init();
 8013cc4:	f7ff fc8a 	bl	80135dc <MX_I2C1_Init>
  MX_I2C2_Init();
 8013cc8:	f7ff fcc8 	bl	801365c <MX_I2C2_Init>
  MX_TIM2_Init();
 8013ccc:	f000 fc10 	bl	80144f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8013cd0:	f000 fc6a 	bl	80145a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8013cd4:	f000 fcc6 	bl	8014664 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8013cd8:	f000 fe6a 	bl	80149b0 <MX_USART3_UART_Init>
#if USE_TCP_SERVER == 1
  MX_LWIP_Init();
 8013cdc:	f7ff feb2 	bl	8013a44 <MX_LWIP_Init>
#endif
  MX_USB_DEVICE_Init();
 8013ce0:	f000 fed8 	bl	8014a94 <MX_USB_DEVICE_Init>
  MX_TIM13_Init();
 8013ce4:	f000 fd22 	bl	801472c <MX_TIM13_Init>

  /* USER CODE BEGIN 2 */
#if PRINTF_USB_UART == 1
  printf("Initializing the VL53L1X sensors....\r\n");
 8013ce8:	480f      	ldr	r0, [pc, #60]	; (8013d28 <main+0x74>)
 8013cea:	f001 fd81 	bl	80157f0 <puts>
#endif
  F_VL53L1X_InitSensors();
 8013cee:	f7fe ff19 	bl	8012b24 <F_VL53L1X_InitSensors>

  TIM13->DIER |= TIM_DIER_UIE;	// Enable interrupt
 8013cf2:	4b0e      	ldr	r3, [pc, #56]	; (8013d2c <main+0x78>)
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	4a0d      	ldr	r2, [pc, #52]	; (8013d2c <main+0x78>)
 8013cf8:	f043 0301 	orr.w	r3, r3, #1
 8013cfc:	60d3      	str	r3, [r2, #12]
  TIM13->CR1 |= TIM_CR1_CEN;
 8013cfe:	4b0b      	ldr	r3, [pc, #44]	; (8013d2c <main+0x78>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	4a0a      	ldr	r2, [pc, #40]	; (8013d2c <main+0x78>)
 8013d04:	f043 0301 	orr.w	r3, r3, #1
 8013d08:	6013      	str	r3, [r2, #0]

    // Initialize the TCP Echo Server
#if PRINTF_USB_UART == 1
  printf("Initializing the TCP server....\r\n");
 8013d0a:	4809      	ldr	r0, [pc, #36]	; (8013d30 <main+0x7c>)
 8013d0c:	f001 fd70 	bl	80157f0 <puts>
#endif
  F_GPIO_SetLedRed(1);
 8013d10:	2001      	movs	r0, #1
 8013d12:	f7ff fc0f 	bl	8013534 <F_GPIO_SetLedRed>
#if USE_TCP_SERVER == 1
      tcp_server_init();
 8013d16:	f000 f9c9 	bl	80140ac <tcp_server_init>
#endif

#if PRINTF_USB_UART == 1
  printf("Entering the infinite loop....\r\n");
 8013d1a:	4806      	ldr	r0, [pc, #24]	; (8013d34 <main+0x80>)
 8013d1c:	f001 fd68 	bl	80157f0 <puts>

    /* USER CODE BEGIN 3 */

	  // Handle the TCP connection
#if USE_TCP_SERVER == 1
	  MX_LWIP_Process();
 8013d20:	f7ff ffbc 	bl	8013c9c <MX_LWIP_Process>
 8013d24:	e7fc      	b.n	8013d20 <main+0x6c>
 8013d26:	bf00      	nop
 8013d28:	08018678 	.word	0x08018678
 8013d2c:	40001c00 	.word	0x40001c00
 8013d30:	080186a0 	.word	0x080186a0
 8013d34:	080186c4 	.word	0x080186c4

08013d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b094      	sub	sp, #80	; 0x50
 8013d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013d3e:	f107 0320 	add.w	r3, r7, #32
 8013d42:	2230      	movs	r2, #48	; 0x30
 8013d44:	2100      	movs	r1, #0
 8013d46:	4618      	mov	r0, r3
 8013d48:	f001 fc2e 	bl	80155a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013d4c:	f107 030c 	add.w	r3, r7, #12
 8013d50:	2200      	movs	r2, #0
 8013d52:	601a      	str	r2, [r3, #0]
 8013d54:	605a      	str	r2, [r3, #4]
 8013d56:	609a      	str	r2, [r3, #8]
 8013d58:	60da      	str	r2, [r3, #12]
 8013d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	60bb      	str	r3, [r7, #8]
 8013d60:	4b28      	ldr	r3, [pc, #160]	; (8013e04 <SystemClock_Config+0xcc>)
 8013d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d64:	4a27      	ldr	r2, [pc, #156]	; (8013e04 <SystemClock_Config+0xcc>)
 8013d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8013d6c:	4b25      	ldr	r3, [pc, #148]	; (8013e04 <SystemClock_Config+0xcc>)
 8013d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013d74:	60bb      	str	r3, [r7, #8]
 8013d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013d78:	2300      	movs	r3, #0
 8013d7a:	607b      	str	r3, [r7, #4]
 8013d7c:	4b22      	ldr	r3, [pc, #136]	; (8013e08 <SystemClock_Config+0xd0>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a21      	ldr	r2, [pc, #132]	; (8013e08 <SystemClock_Config+0xd0>)
 8013d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013d86:	6013      	str	r3, [r2, #0]
 8013d88:	4b1f      	ldr	r3, [pc, #124]	; (8013e08 <SystemClock_Config+0xd0>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013d90:	607b      	str	r3, [r7, #4]
 8013d92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8013d94:	2301      	movs	r3, #1
 8013d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8013d98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8013d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013d9e:	2302      	movs	r3, #2
 8013da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8013da8:	2304      	movs	r3, #4
 8013daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013dac:	23a8      	movs	r3, #168	; 0xa8
 8013dae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013db0:	2302      	movs	r3, #2
 8013db2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013db4:	2307      	movs	r3, #7
 8013db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013db8:	f107 0320 	add.w	r3, r7, #32
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7ef fc1b 	bl	80035f8 <HAL_RCC_OscConfig>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d001      	beq.n	8013dcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013dc8:	f000 f820 	bl	8013e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013dcc:	230f      	movs	r3, #15
 8013dce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013dd0:	2302      	movs	r3, #2
 8013dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013dd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013ddc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013de2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013de4:	f107 030c 	add.w	r3, r7, #12
 8013de8:	2105      	movs	r1, #5
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7ef fe46 	bl	8003a7c <HAL_RCC_ClockConfig>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d001      	beq.n	8013dfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8013df6:	f000 f809 	bl	8013e0c <Error_Handler>
  }
}
 8013dfa:	bf00      	nop
 8013dfc:	3750      	adds	r7, #80	; 0x50
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	40023800 	.word	0x40023800
 8013e08:	40007000 	.word	0x40007000

08013e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013e0c:	b480      	push	{r7}
 8013e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8013e10:	bf00      	nop
 8013e12:	46bd      	mov	sp, r7
 8013e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e18:	4770      	bx	lr
	...

08013e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013e22:	2300      	movs	r3, #0
 8013e24:	607b      	str	r3, [r7, #4]
 8013e26:	4b10      	ldr	r3, [pc, #64]	; (8013e68 <HAL_MspInit+0x4c>)
 8013e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e2a:	4a0f      	ldr	r2, [pc, #60]	; (8013e68 <HAL_MspInit+0x4c>)
 8013e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013e30:	6453      	str	r3, [r2, #68]	; 0x44
 8013e32:	4b0d      	ldr	r3, [pc, #52]	; (8013e68 <HAL_MspInit+0x4c>)
 8013e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013e3a:	607b      	str	r3, [r7, #4]
 8013e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013e3e:	2300      	movs	r3, #0
 8013e40:	603b      	str	r3, [r7, #0]
 8013e42:	4b09      	ldr	r3, [pc, #36]	; (8013e68 <HAL_MspInit+0x4c>)
 8013e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e46:	4a08      	ldr	r2, [pc, #32]	; (8013e68 <HAL_MspInit+0x4c>)
 8013e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8013e4e:	4b06      	ldr	r3, [pc, #24]	; (8013e68 <HAL_MspInit+0x4c>)
 8013e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013e56:	603b      	str	r3, [r7, #0]
 8013e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013e5a:	bf00      	nop
 8013e5c:	370c      	adds	r7, #12
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr
 8013e66:	bf00      	nop
 8013e68:	40023800 	.word	0x40023800

08013e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8013e70:	bf00      	nop
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr

08013e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013e7a:	b480      	push	{r7}
 8013e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013e7e:	e7fe      	b.n	8013e7e <HardFault_Handler+0x4>

08013e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013e80:	b480      	push	{r7}
 8013e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013e84:	e7fe      	b.n	8013e84 <MemManage_Handler+0x4>

08013e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013e86:	b480      	push	{r7}
 8013e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013e8a:	e7fe      	b.n	8013e8a <BusFault_Handler+0x4>

08013e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013e90:	e7fe      	b.n	8013e90 <UsageFault_Handler+0x4>

08013e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013e92:	b480      	push	{r7}
 8013e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8013e96:	bf00      	nop
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013ea4:	bf00      	nop
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eac:	4770      	bx	lr

08013eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013eae:	b480      	push	{r7}
 8013eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013eb2:	bf00      	nop
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013ec0:	f7ec fdc0 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8013ec4:	bf00      	nop
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(TIM13->SR & TIM_SR_UIF)
 8013ecc:	4b0c      	ldr	r3, [pc, #48]	; (8013f00 <TIM8_UP_TIM13_IRQHandler+0x38>)
 8013ece:	691b      	ldr	r3, [r3, #16]
 8013ed0:	f003 0301 	and.w	r3, r3, #1
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d00e      	beq.n	8013ef6 <TIM8_UP_TIM13_IRQHandler+0x2e>
	{
		  // Clear interrupt
		  F_VL53L1X_CheckSensors();
 8013ed8:	f7fe fe7a 	bl	8012bd0 <F_VL53L1X_CheckSensors>

		  if(i == 10)
 8013edc:	4b09      	ldr	r3, [pc, #36]	; (8013f04 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	2b0a      	cmp	r3, #10
 8013ee2:	d102      	bne.n	8013eea <TIM8_UP_TIM13_IRQHandler+0x22>
		  {

			  i = 0;
 8013ee4:	4b07      	ldr	r3, [pc, #28]	; (8013f04 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	701a      	strb	r2, [r3, #0]
		  }

		  i++;
 8013eea:	4b06      	ldr	r3, [pc, #24]	; (8013f04 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	3301      	adds	r3, #1
 8013ef0:	b2da      	uxtb	r2, r3
 8013ef2:	4b04      	ldr	r3, [pc, #16]	; (8013f04 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8013ef4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8013ef6:	4804      	ldr	r0, [pc, #16]	; (8013f08 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8013ef8:	f7f0 f82f 	bl	8003f5a <HAL_TIM_IRQHandler>


  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8013efc:	bf00      	nop
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	40001c00 	.word	0x40001c00
 8013f04:	2000038e 	.word	0x2000038e
 8013f08:	20006b94 	.word	0x20006b94

08013f0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8013f10:	4802      	ldr	r0, [pc, #8]	; (8013f1c <OTG_FS_IRQHandler+0x10>)
 8013f12:	f7ee fb36 	bl	8002582 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8013f16:	bf00      	nop
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop
 8013f1c:	20007ef0 	.word	0x20007ef0

08013f20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	617b      	str	r3, [r7, #20]
 8013f30:	e00a      	b.n	8013f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8013f32:	f000 fddf 	bl	8014af4 <__io_getchar>
 8013f36:	4601      	mov	r1, r0
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	1c5a      	adds	r2, r3, #1
 8013f3c:	60ba      	str	r2, [r7, #8]
 8013f3e:	b2ca      	uxtb	r2, r1
 8013f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	3301      	adds	r3, #1
 8013f46:	617b      	str	r3, [r7, #20]
 8013f48:	697a      	ldr	r2, [r7, #20]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	dbf0      	blt.n	8013f32 <_read+0x12>
	}


return len;
 8013f50:	687b      	ldr	r3, [r7, #4]
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3718      	adds	r7, #24
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}

08013f5a <_write>:

int _write(int file, char *ptr, int len)
{
 8013f5a:	b580      	push	{r7, lr}
 8013f5c:	b084      	sub	sp, #16
 8013f5e:	af00      	add	r7, sp, #0
 8013f60:	60f8      	str	r0, [r7, #12]
 8013f62:	60b9      	str	r1, [r7, #8]
 8013f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

#if PRINTF_USB_UART == 1
	CDC_Transmit_FS((uint8_t *)ptr, (uint16_t)len);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	4619      	mov	r1, r3
 8013f6c:	68b8      	ldr	r0, [r7, #8]
 8013f6e:	f000 fe61 	bl	8014c34 <CDC_Transmit_FS>
			__io_putchar(*ptr++);
		}
#endif


	return len;
 8013f72:	687b      	ldr	r3, [r7, #4]
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3710      	adds	r7, #16
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <_close>:

int _close(int file)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
	return -1;
 8013f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	370c      	adds	r7, #12
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f92:	4770      	bx	lr

08013f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013fa4:	605a      	str	r2, [r3, #4]
	return 0;
 8013fa6:	2300      	movs	r3, #0
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	370c      	adds	r7, #12
 8013fac:	46bd      	mov	sp, r7
 8013fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb2:	4770      	bx	lr

08013fb4 <_isatty>:

int _isatty(int file)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b083      	sub	sp, #12
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
	return 1;
 8013fbc:	2301      	movs	r3, #1
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	370c      	adds	r7, #12
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr

08013fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013fca:	b480      	push	{r7}
 8013fcc:	b085      	sub	sp, #20
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	60f8      	str	r0, [r7, #12]
 8013fd2:	60b9      	str	r1, [r7, #8]
 8013fd4:	607a      	str	r2, [r7, #4]
	return 0;
 8013fd6:	2300      	movs	r3, #0
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3714      	adds	r7, #20
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe2:	4770      	bx	lr

08013fe4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b085      	sub	sp, #20
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8013fec:	4b11      	ldr	r3, [pc, #68]	; (8014034 <_sbrk+0x50>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d102      	bne.n	8013ffa <_sbrk+0x16>
		heap_end = &end;
 8013ff4:	4b0f      	ldr	r3, [pc, #60]	; (8014034 <_sbrk+0x50>)
 8013ff6:	4a10      	ldr	r2, [pc, #64]	; (8014038 <_sbrk+0x54>)
 8013ff8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8013ffa:	4b0e      	ldr	r3, [pc, #56]	; (8014034 <_sbrk+0x50>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8014000:	4b0c      	ldr	r3, [pc, #48]	; (8014034 <_sbrk+0x50>)
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	4413      	add	r3, r2
 8014008:	466a      	mov	r2, sp
 801400a:	4293      	cmp	r3, r2
 801400c:	d905      	bls.n	801401a <_sbrk+0x36>
	{
		errno = ENOMEM;
 801400e:	4b0b      	ldr	r3, [pc, #44]	; (801403c <_sbrk+0x58>)
 8014010:	220c      	movs	r2, #12
 8014012:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8014014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014018:	e006      	b.n	8014028 <_sbrk+0x44>
	}

	heap_end += incr;
 801401a:	4b06      	ldr	r3, [pc, #24]	; (8014034 <_sbrk+0x50>)
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4413      	add	r3, r2
 8014022:	4a04      	ldr	r2, [pc, #16]	; (8014034 <_sbrk+0x50>)
 8014024:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014026:	68fb      	ldr	r3, [r7, #12]
}
 8014028:	4618      	mov	r0, r3
 801402a:	3714      	adds	r7, #20
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr
 8014034:	20000390 	.word	0x20000390
 8014038:	20008500 	.word	0x20008500
 801403c:	200084f8 	.word	0x200084f8

08014040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014040:	b480      	push	{r7}
 8014042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014044:	4b16      	ldr	r3, [pc, #88]	; (80140a0 <SystemInit+0x60>)
 8014046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801404a:	4a15      	ldr	r2, [pc, #84]	; (80140a0 <SystemInit+0x60>)
 801404c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8014054:	4b13      	ldr	r3, [pc, #76]	; (80140a4 <SystemInit+0x64>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	4a12      	ldr	r2, [pc, #72]	; (80140a4 <SystemInit+0x64>)
 801405a:	f043 0301 	orr.w	r3, r3, #1
 801405e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014060:	4b10      	ldr	r3, [pc, #64]	; (80140a4 <SystemInit+0x64>)
 8014062:	2200      	movs	r2, #0
 8014064:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014066:	4b0f      	ldr	r3, [pc, #60]	; (80140a4 <SystemInit+0x64>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a0e      	ldr	r2, [pc, #56]	; (80140a4 <SystemInit+0x64>)
 801406c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8014070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014074:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8014076:	4b0b      	ldr	r3, [pc, #44]	; (80140a4 <SystemInit+0x64>)
 8014078:	4a0b      	ldr	r2, [pc, #44]	; (80140a8 <SystemInit+0x68>)
 801407a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801407c:	4b09      	ldr	r3, [pc, #36]	; (80140a4 <SystemInit+0x64>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	4a08      	ldr	r2, [pc, #32]	; (80140a4 <SystemInit+0x64>)
 8014082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014086:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014088:	4b06      	ldr	r3, [pc, #24]	; (80140a4 <SystemInit+0x64>)
 801408a:	2200      	movs	r2, #0
 801408c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801408e:	4b04      	ldr	r3, [pc, #16]	; (80140a0 <SystemInit+0x60>)
 8014090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014094:	609a      	str	r2, [r3, #8]
#endif
}
 8014096:	bf00      	nop
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr
 80140a0:	e000ed00 	.word	0xe000ed00
 80140a4:	40023800 	.word	0x40023800
 80140a8:	24003010 	.word	0x24003010

080140ac <tcp_server_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 80140b2:	f7f6 fbdb 	bl	800a86c <tcp_new>
 80140b6:	4602      	mov	r2, r0
 80140b8:	4b16      	ldr	r3, [pc, #88]	; (8014114 <tcp_server_init+0x68>)
 80140ba:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 80140bc:	4b15      	ldr	r3, [pc, #84]	; (8014114 <tcp_server_init+0x68>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d022      	beq.n	801410a <tcp_server_init+0x5e>
  {
    err_t err;

    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80140c4:	4b13      	ldr	r3, [pc, #76]	; (8014114 <tcp_server_init+0x68>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2207      	movs	r2, #7
 80140ca:	4913      	ldr	r1, [pc, #76]	; (8014118 <tcp_server_init+0x6c>)
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7f5 fc51 	bl	8009974 <tcp_bind>
 80140d2:	4603      	mov	r3, r0
 80140d4:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 80140d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d10f      	bne.n	80140fe <tcp_server_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80140de:	4b0d      	ldr	r3, [pc, #52]	; (8014114 <tcp_server_init+0x68>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	21ff      	movs	r1, #255	; 0xff
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7f5 fce7 	bl	8009ab8 <tcp_listen_with_backlog>
 80140ea:	4602      	mov	r2, r0
 80140ec:	4b09      	ldr	r3, [pc, #36]	; (8014114 <tcp_server_init+0x68>)
 80140ee:	601a      	str	r2, [r3, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_server_accept);
 80140f0:	4b08      	ldr	r3, [pc, #32]	; (8014114 <tcp_server_init+0x68>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4909      	ldr	r1, [pc, #36]	; (801411c <tcp_server_init+0x70>)
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7f6 fc36 	bl	800a968 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80140fc:	e005      	b.n	801410a <tcp_server_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80140fe:	4b05      	ldr	r3, [pc, #20]	; (8014114 <tcp_server_init+0x68>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	4619      	mov	r1, r3
 8014104:	2001      	movs	r0, #1
 8014106:	f7f4 f9f5 	bl	80084f4 <memp_free>
}
 801410a:	bf00      	nop
 801410c:	3708      	adds	r7, #8
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	20006b10 	.word	0x20006b10
 8014118:	080188ac 	.word	0x080188ac
 801411c:	08014121 	.word	0x08014121

08014120 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b086      	sub	sp, #24
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	4613      	mov	r3, r2
 801412c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 801412e:	2101      	movs	r1, #1
 8014130:	68b8      	ldr	r0, [r7, #8]
 8014132:	f7f6 fa10 	bl	800a556 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8014136:	200c      	movs	r0, #12
 8014138:	f7f4 f832 	bl	80081a0 <mem_malloc>
 801413c:	6138      	str	r0, [r7, #16]

  if (es != NULL)
 801413e:	693b      	ldr	r3, [r7, #16]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d01c      	beq.n	801417e <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	2201      	movs	r2, #1
 8014148:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	68ba      	ldr	r2, [r7, #8]
 801414e:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	2200      	movs	r2, #0
 8014154:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8014156:	6939      	ldr	r1, [r7, #16]
 8014158:	68b8      	ldr	r0, [r7, #8]
 801415a:	f7f6 fb8f 	bl	800a87c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 801415e:	490e      	ldr	r1, [pc, #56]	; (8014198 <tcp_server_accept+0x78>)
 8014160:	68b8      	ldr	r0, [r7, #8]
 8014162:	f7f6 fb9d 	bl	800a8a0 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8014166:	490d      	ldr	r1, [pc, #52]	; (801419c <tcp_server_accept+0x7c>)
 8014168:	68b8      	ldr	r0, [r7, #8]
 801416a:	f7f6 fbdb 	bl	800a924 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 801416e:	2201      	movs	r2, #1
 8014170:	490b      	ldr	r1, [pc, #44]	; (80141a0 <tcp_server_accept+0x80>)
 8014172:	68b8      	ldr	r0, [r7, #8]
 8014174:	f7f6 fc10 	bl	800a998 <tcp_poll>

    ret_err = ERR_OK;
 8014178:	2300      	movs	r3, #0
 801417a:	75fb      	strb	r3, [r7, #23]
 801417c:	e005      	b.n	801418a <tcp_server_accept+0x6a>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 801417e:	6939      	ldr	r1, [r7, #16]
 8014180:	68b8      	ldr	r0, [r7, #8]
 8014182:	f000 f98d 	bl	80144a0 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8014186:	23ff      	movs	r3, #255	; 0xff
 8014188:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 801418a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801418e:	4618      	mov	r0, r3
 8014190:	3718      	adds	r7, #24
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	080141a5 	.word	0x080141a5
 801419c:	08014351 	.word	0x08014351
 80141a0:	08014375 	.word	0x08014375

080141a4 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b096      	sub	sp, #88	; 0x58
 80141a8:	af02      	add	r7, sp, #8
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	607a      	str	r2, [r7, #4]
 80141b0:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;
  uint8_t array[NB_OCTETS_CMD] = {0};
 80141b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80141b6:	2200      	movs	r2, #0
 80141b8:	601a      	str	r2, [r3, #0]
 80141ba:	605a      	str	r2, [r3, #4]
 80141bc:	609a      	str	r2, [r3, #8]
 80141be:	f8c3 200b 	str.w	r2, [r3, #11]
  struct tcp_answer s_cmd_answer;
  struct tcp_command s_cmd_received;


  LWIP_ASSERT("arg != NULL",arg != NULL);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d105      	bne.n	80141d4 <tcp_server_recv+0x30>
 80141c8:	4b5d      	ldr	r3, [pc, #372]	; (8014340 <tcp_server_recv+0x19c>)
 80141ca:	22b6      	movs	r2, #182	; 0xb6
 80141cc:	495d      	ldr	r1, [pc, #372]	; (8014344 <tcp_server_recv+0x1a0>)
 80141ce:	485e      	ldr	r0, [pc, #376]	; (8014348 <tcp_server_recv+0x1a4>)
 80141d0:	f001 fa9a 	bl	8015708 <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d117      	bne.n	801420e <tcp_server_recv+0x6a>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80141de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141e0:	2203      	movs	r2, #3
 80141e2:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 80141e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d104      	bne.n	80141f6 <tcp_server_recv+0x52>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 80141ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80141ee:	68b8      	ldr	r0, [r7, #8]
 80141f0:	f000 f956 	bl	80144a0 <tcp_server_connection_close>
 80141f4:	e007      	b.n	8014206 <tcp_server_recv+0x62>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 80141f6:	4955      	ldr	r1, [pc, #340]	; (801434c <tcp_server_recv+0x1a8>)
 80141f8:	68b8      	ldr	r0, [r7, #8]
 80141fa:	f7f6 fb73 	bl	800a8e4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 80141fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014200:	68b8      	ldr	r0, [r7, #8]
 8014202:	f000 f8ff 	bl	8014404 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8014206:	2300      	movs	r3, #0
 8014208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801420c:	e092      	b.n	8014334 <tcp_server_recv+0x190>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 801420e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d00c      	beq.n	8014230 <tcp_server_recv+0x8c>
  {
    /* free received pbuf*/
    if (p != NULL)
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d005      	beq.n	8014228 <tcp_server_recv+0x84>
    {
      es->p = NULL;
 801421c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801421e:	2200      	movs	r2, #0
 8014220:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f7f4 fe98 	bl	8008f58 <pbuf_free>
    }
    ret_err = err;
 8014228:	78fb      	ldrb	r3, [r7, #3]
 801422a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801422e:	e081      	b.n	8014334 <tcp_server_recv+0x190>
  }
  else if(es->state == ES_ACCEPTED)
 8014230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b01      	cmp	r3, #1
 8014236:	d132      	bne.n	801429e <tcp_server_recv+0xfa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8014238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801423a:	2202      	movs	r2, #2
 801423c:	701a      	strb	r2, [r3, #0]

    // Get the command from the data received over TCP
    F_TCP_paquetTocmd(p, &s_cmd_received);
 801423e:	f107 0314 	add.w	r3, r7, #20
 8014242:	4619      	mov	r1, r3
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7fe fa9d 	bl	8012784 <F_TCP_paquetTocmd>
    // Process the command received

    // Send back the answer of the command received


    F_Process_Command(s_cmd_received,&s_cmd_answer);
 801424a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	f107 0314 	add.w	r3, r7, #20
 8014254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014256:	f7fe fb79 	bl	801294c <F_Process_Command>


    F_TCP_answerTotab(array, s_cmd_answer);
 801425a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014268:	f7fe fb0e 	bl	8012888 <F_TCP_answerTotab>

    p->payload = array;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014272:	605a      	str	r2, [r3, #4]
    p->len = NB_OCTETS_CMD;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	220f      	movs	r2, #15
 8014278:	815a      	strh	r2, [r3, #10]
    p->tot_len = NB_OCTETS_CMD;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	220f      	movs	r2, #15
 801427e:	811a      	strh	r2, [r3, #8]

    /* store reference to incoming pbuf (chain) */
        es->p = p;
 8014280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014282:	687a      	ldr	r2, [r7, #4]
 8014284:	609a      	str	r2, [r3, #8]
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8014286:	4931      	ldr	r1, [pc, #196]	; (801434c <tcp_server_recv+0x1a8>)
 8014288:	68b8      	ldr	r0, [r7, #8]
 801428a:	f7f6 fb2b 	bl	800a8e4 <tcp_sent>

    /* send back the received data (echo) */
    tcp_server_send(tpcb, es);
 801428e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014290:	68b8      	ldr	r0, [r7, #8]
 8014292:	f000 f8b7 	bl	8014404 <tcp_server_send>

    ret_err = ERR_OK;
 8014296:	2300      	movs	r3, #0
 8014298:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801429c:	e04a      	b.n	8014334 <tcp_server_recv+0x190>

  }
  else if (es->state == ES_RECEIVED)
 801429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	2b02      	cmp	r3, #2
 80142a4:	d137      	bne.n	8014316 <tcp_server_recv+0x172>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 80142a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142a8:	689b      	ldr	r3, [r3, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d128      	bne.n	8014300 <tcp_server_recv+0x15c>
    {

    	// Get the command from the data received over TCP
		F_TCP_paquetTocmd(p, &s_cmd_received);
 80142ae:	f107 0314 	add.w	r3, r7, #20
 80142b2:	4619      	mov	r1, r3
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7fe fa65 	bl	8012784 <F_TCP_paquetTocmd>
		// Process the command received

		// Send back the answer of the command received


		F_Process_Command(s_cmd_received,&s_cmd_answer);
 80142ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	f107 0314 	add.w	r3, r7, #20
 80142c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80142c6:	f7fe fb41 	bl	801294c <F_Process_Command>


		F_TCP_answerTotab(array, s_cmd_answer);
 80142ca:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80142ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d0:	9300      	str	r3, [sp, #0]
 80142d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80142d8:	f7fe fad6 	bl	8012888 <F_TCP_answerTotab>

		p->payload = array;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80142e2:	605a      	str	r2, [r3, #4]
		p->len = NB_OCTETS_CMD;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	220f      	movs	r2, #15
 80142e8:	815a      	strh	r2, [r3, #10]
		p->tot_len = NB_OCTETS_CMD;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	220f      	movs	r2, #15
 80142ee:	811a      	strh	r2, [r3, #8]

		es->p = p;
 80142f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142f2:	687a      	ldr	r2, [r7, #4]
 80142f4:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 80142f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80142f8:	68b8      	ldr	r0, [r7, #8]
 80142fa:	f000 f883 	bl	8014404 <tcp_server_send>
 80142fe:	e006      	b.n	801430e <tcp_server_recv+0x16a>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8014300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014302:	689b      	ldr	r3, [r3, #8]
 8014304:	647b      	str	r3, [r7, #68]	; 0x44
      pbuf_chain(ptr,p);
 8014306:	6879      	ldr	r1, [r7, #4]
 8014308:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801430a:	f7f4 ff49 	bl	80091a0 <pbuf_chain>
    }
    ret_err = ERR_OK;
 801430e:	2300      	movs	r3, #0
 8014310:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8014314:	e00e      	b.n	8014334 <tcp_server_recv+0x190>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	891b      	ldrh	r3, [r3, #8]
 801431a:	4619      	mov	r1, r3
 801431c:	68b8      	ldr	r0, [r7, #8]
 801431e:	f7f5 fcc3 	bl	8009ca8 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 8014322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014324:	2200      	movs	r2, #0
 8014326:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7f4 fe15 	bl	8008f58 <pbuf_free>
    ret_err = ERR_OK;
 801432e:	2300      	movs	r3, #0
 8014330:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  return ret_err;
 8014334:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8014338:	4618      	mov	r0, r3
 801433a:	3750      	adds	r7, #80	; 0x50
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	080186e4 	.word	0x080186e4
 8014344:	080186f8 	.word	0x080186f8
 8014348:	08018704 	.word	0x08018704
 801434c:	080143c7 	.word	0x080143c7

08014350 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	460b      	mov	r3, r1
 801435a:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d002      	beq.n	801436c <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8014366:	68f8      	ldr	r0, [r7, #12]
 8014368:	f7f3 fddc 	bl	8007f24 <mem_free>
  }
}
 801436c:	bf00      	nop
 801436e:	3710      	adds	r7, #16
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
 801437c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d013      	beq.n	80143b0 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	689b      	ldr	r3, [r3, #8]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d004      	beq.n	801439a <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8014390:	68b9      	ldr	r1, [r7, #8]
 8014392:	6838      	ldr	r0, [r7, #0]
 8014394:	f000 f836 	bl	8014404 <tcp_server_send>
 8014398:	e007      	b.n	80143aa <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	2b03      	cmp	r3, #3
 80143a0:	d103      	bne.n	80143aa <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 80143a2:	68b9      	ldr	r1, [r7, #8]
 80143a4:	6838      	ldr	r0, [r7, #0]
 80143a6:	f000 f87b 	bl	80144a0 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 80143aa:	2300      	movs	r3, #0
 80143ac:	73fb      	strb	r3, [r7, #15]
 80143ae:	e004      	b.n	80143ba <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80143b0:	6838      	ldr	r0, [r7, #0]
 80143b2:	f7f5 fad3 	bl	800995c <tcp_abort>
    ret_err = ERR_ABRT;
 80143b6:	23f3      	movs	r3, #243	; 0xf3
 80143b8:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80143ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3710      	adds	r7, #16
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80143c6:	b580      	push	{r7, lr}
 80143c8:	b086      	sub	sp, #24
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	60f8      	str	r0, [r7, #12]
 80143ce:	60b9      	str	r1, [r7, #8]
 80143d0:	4613      	mov	r3, r2
 80143d2:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	689b      	ldr	r3, [r3, #8]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d004      	beq.n	80143ea <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 80143e0:	6979      	ldr	r1, [r7, #20]
 80143e2:	68b8      	ldr	r0, [r7, #8]
 80143e4:	f000 f80e 	bl	8014404 <tcp_server_send>
 80143e8:	e007      	b.n	80143fa <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	2b03      	cmp	r3, #3
 80143f0:	d103      	bne.n	80143fa <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 80143f2:	6979      	ldr	r1, [r7, #20]
 80143f4:	68b8      	ldr	r0, [r7, #8]
 80143f6:	f000 f853 	bl	80144a0 <tcp_server_connection_close>
  }
  return ERR_OK;
 80143fa:	2300      	movs	r3, #0
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b086      	sub	sp, #24
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 801440e:	2300      	movs	r3, #0
 8014410:	75fb      	strb	r3, [r7, #23]


  while ((wr_err == ERR_OK) &&
 8014412:	e031      	b.n	8014478 <tcp_server_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	689b      	ldr	r3, [r3, #8]
 8014418:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	6859      	ldr	r1, [r3, #4]
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	895a      	ldrh	r2, [r3, #10]
 8014422:	2301      	movs	r3, #1
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f7f9 f86b 	bl	800d500 <tcp_write>
 801442a:	4603      	mov	r3, r0
 801442c:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 801442e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d118      	bne.n	8014468 <tcp_server_send+0x64>
    {
      u16_t plen;

      plen = ptr->len;
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	895b      	ldrh	r3, [r3, #10]
 801443a:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	681a      	ldr	r2, [r3, #0]
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d004      	beq.n	8014456 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	689b      	ldr	r3, [r3, #8]
 8014450:	4618      	mov	r0, r3
 8014452:	f7f4 fe2d 	bl	80090b0 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8014456:	6938      	ldr	r0, [r7, #16]
 8014458:	f7f4 fd7e 	bl	8008f58 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 801445c:	89fb      	ldrh	r3, [r7, #14]
 801445e:	4619      	mov	r1, r3
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7f5 fc21 	bl	8009ca8 <tcp_recved>
 8014466:	e007      	b.n	8014478 <tcp_server_send+0x74>
   }
   else if(wr_err == ERR_MEM)
 8014468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801446c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014470:	d102      	bne.n	8014478 <tcp_server_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	693a      	ldr	r2, [r7, #16]
 8014476:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8014478:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10b      	bne.n	8014498 <tcp_server_send+0x94>
         (es->p != NULL) &&
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8014484:	2b00      	cmp	r3, #0
 8014486:	d007      	beq.n	8014498 <tcp_server_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	689b      	ldr	r3, [r3, #8]
 801448c:	895a      	ldrh	r2, [r3, #10]
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8014494:	429a      	cmp	r2, r3
 8014496:	d9bd      	bls.n	8014414 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8014498:	bf00      	nop
 801449a:	3718      	adds	r7, #24
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80144aa:	2100      	movs	r1, #0
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f7f6 f9e5 	bl	800a87c <tcp_arg>
  tcp_sent(tpcb, NULL);
 80144b2:	2100      	movs	r1, #0
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f7f6 fa15 	bl	800a8e4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80144ba:	2100      	movs	r1, #0
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f7f6 f9ef 	bl	800a8a0 <tcp_recv>
  tcp_err(tpcb, NULL);
 80144c2:	2100      	movs	r1, #0
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f7f6 fa2d 	bl	800a924 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80144ca:	2200      	movs	r2, #0
 80144cc:	2100      	movs	r1, #0
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f7f6 fa62 	bl	800a998 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d002      	beq.n	80144e0 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 80144da:	6838      	ldr	r0, [r7, #0]
 80144dc:	f7f3 fd22 	bl	8007f24 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7f5 f971 	bl	80097c8 <tcp_close>
}
 80144e6:	bf00      	nop
 80144e8:	3708      	adds	r7, #8
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
	...

080144f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b086      	sub	sp, #24
 80144f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80144f6:	f107 0310 	add.w	r3, r7, #16
 80144fa:	2200      	movs	r2, #0
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8014500:	463b      	mov	r3, r7
 8014502:	2200      	movs	r2, #0
 8014504:	601a      	str	r2, [r3, #0]
 8014506:	605a      	str	r2, [r3, #4]
 8014508:	609a      	str	r2, [r3, #8]
 801450a:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 801450c:	4b25      	ldr	r3, [pc, #148]	; (80145a4 <MX_TIM2_Init+0xb4>)
 801450e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8014514:	4b23      	ldr	r3, [pc, #140]	; (80145a4 <MX_TIM2_Init+0xb4>)
 8014516:	2200      	movs	r2, #0
 8014518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801451a:	4b22      	ldr	r3, [pc, #136]	; (80145a4 <MX_TIM2_Init+0xb4>)
 801451c:	2200      	movs	r2, #0
 801451e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8014520:	4b20      	ldr	r3, [pc, #128]	; (80145a4 <MX_TIM2_Init+0xb4>)
 8014522:	2200      	movs	r2, #0
 8014524:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014526:	4b1f      	ldr	r3, [pc, #124]	; (80145a4 <MX_TIM2_Init+0xb4>)
 8014528:	2200      	movs	r2, #0
 801452a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801452c:	4b1d      	ldr	r3, [pc, #116]	; (80145a4 <MX_TIM2_Init+0xb4>)
 801452e:	2200      	movs	r2, #0
 8014530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8014532:	481c      	ldr	r0, [pc, #112]	; (80145a4 <MX_TIM2_Init+0xb4>)
 8014534:	f7ef fce6 	bl	8003f04 <HAL_TIM_IC_Init>
 8014538:	4603      	mov	r3, r0
 801453a:	2b00      	cmp	r3, #0
 801453c:	d001      	beq.n	8014542 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 801453e:	f7ff fc65 	bl	8013e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014542:	2300      	movs	r3, #0
 8014544:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014546:	2300      	movs	r3, #0
 8014548:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801454a:	f107 0310 	add.w	r3, r7, #16
 801454e:	4619      	mov	r1, r3
 8014550:	4814      	ldr	r0, [pc, #80]	; (80145a4 <MX_TIM2_Init+0xb4>)
 8014552:	f7f0 fb19 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 8014556:	4603      	mov	r3, r0
 8014558:	2b00      	cmp	r3, #0
 801455a:	d001      	beq.n	8014560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 801455c:	f7ff fc56 	bl	8013e0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8014560:	2300      	movs	r3, #0
 8014562:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8014564:	2301      	movs	r3, #1
 8014566:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8014568:	2300      	movs	r3, #0
 801456a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 801456c:	2300      	movs	r3, #0
 801456e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8014570:	463b      	mov	r3, r7
 8014572:	2200      	movs	r2, #0
 8014574:	4619      	mov	r1, r3
 8014576:	480b      	ldr	r0, [pc, #44]	; (80145a4 <MX_TIM2_Init+0xb4>)
 8014578:	f7ef fdf7 	bl	800416a <HAL_TIM_IC_ConfigChannel>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d001      	beq.n	8014586 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8014582:	f7ff fc43 	bl	8013e0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8014586:	463b      	mov	r3, r7
 8014588:	2204      	movs	r2, #4
 801458a:	4619      	mov	r1, r3
 801458c:	4805      	ldr	r0, [pc, #20]	; (80145a4 <MX_TIM2_Init+0xb4>)
 801458e:	f7ef fdec 	bl	800416a <HAL_TIM_IC_ConfigChannel>
 8014592:	4603      	mov	r3, r0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8014598:	f7ff fc38 	bl	8013e0c <Error_Handler>
  }

}
 801459c:	bf00      	nop
 801459e:	3718      	adds	r7, #24
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	20006bd4 	.word	0x20006bd4

080145a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80145ae:	f107 0310 	add.w	r3, r7, #16
 80145b2:	2200      	movs	r2, #0
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80145b8:	463b      	mov	r3, r7
 80145ba:	2200      	movs	r2, #0
 80145bc:	601a      	str	r2, [r3, #0]
 80145be:	605a      	str	r2, [r3, #4]
 80145c0:	609a      	str	r2, [r3, #8]
 80145c2:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80145c4:	4b25      	ldr	r3, [pc, #148]	; (801465c <MX_TIM3_Init+0xb4>)
 80145c6:	4a26      	ldr	r2, [pc, #152]	; (8014660 <MX_TIM3_Init+0xb8>)
 80145c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80145ca:	4b24      	ldr	r3, [pc, #144]	; (801465c <MX_TIM3_Init+0xb4>)
 80145cc:	2200      	movs	r2, #0
 80145ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80145d0:	4b22      	ldr	r3, [pc, #136]	; (801465c <MX_TIM3_Init+0xb4>)
 80145d2:	2200      	movs	r2, #0
 80145d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80145d6:	4b21      	ldr	r3, [pc, #132]	; (801465c <MX_TIM3_Init+0xb4>)
 80145d8:	2200      	movs	r2, #0
 80145da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80145dc:	4b1f      	ldr	r3, [pc, #124]	; (801465c <MX_TIM3_Init+0xb4>)
 80145de:	2200      	movs	r2, #0
 80145e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80145e2:	4b1e      	ldr	r3, [pc, #120]	; (801465c <MX_TIM3_Init+0xb4>)
 80145e4:	2200      	movs	r2, #0
 80145e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80145e8:	481c      	ldr	r0, [pc, #112]	; (801465c <MX_TIM3_Init+0xb4>)
 80145ea:	f7ef fc8b 	bl	8003f04 <HAL_TIM_IC_Init>
 80145ee:	4603      	mov	r3, r0
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d001      	beq.n	80145f8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80145f4:	f7ff fc0a 	bl	8013e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80145f8:	2300      	movs	r3, #0
 80145fa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80145fc:	2300      	movs	r3, #0
 80145fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8014600:	f107 0310 	add.w	r3, r7, #16
 8014604:	4619      	mov	r1, r3
 8014606:	4815      	ldr	r0, [pc, #84]	; (801465c <MX_TIM3_Init+0xb4>)
 8014608:	f7f0 fabe 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 801460c:	4603      	mov	r3, r0
 801460e:	2b00      	cmp	r3, #0
 8014610:	d001      	beq.n	8014616 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8014612:	f7ff fbfb 	bl	8013e0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8014616:	2300      	movs	r3, #0
 8014618:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 801461a:	2301      	movs	r3, #1
 801461c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 801461e:	2300      	movs	r3, #0
 8014620:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8014622:	2300      	movs	r3, #0
 8014624:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8014626:	463b      	mov	r3, r7
 8014628:	2200      	movs	r2, #0
 801462a:	4619      	mov	r1, r3
 801462c:	480b      	ldr	r0, [pc, #44]	; (801465c <MX_TIM3_Init+0xb4>)
 801462e:	f7ef fd9c 	bl	800416a <HAL_TIM_IC_ConfigChannel>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d001      	beq.n	801463c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8014638:	f7ff fbe8 	bl	8013e0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 801463c:	463b      	mov	r3, r7
 801463e:	2204      	movs	r2, #4
 8014640:	4619      	mov	r1, r3
 8014642:	4806      	ldr	r0, [pc, #24]	; (801465c <MX_TIM3_Init+0xb4>)
 8014644:	f7ef fd91 	bl	800416a <HAL_TIM_IC_ConfigChannel>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d001      	beq.n	8014652 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 801464e:	f7ff fbdd 	bl	8013e0c <Error_Handler>
  }

}
 8014652:	bf00      	nop
 8014654:	3718      	adds	r7, #24
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	20006b54 	.word	0x20006b54
 8014660:	40000400 	.word	0x40000400

08014664 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b08a      	sub	sp, #40	; 0x28
 8014668:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801466a:	f107 0320 	add.w	r3, r7, #32
 801466e:	2200      	movs	r2, #0
 8014670:	601a      	str	r2, [r3, #0]
 8014672:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8014674:	1d3b      	adds	r3, r7, #4
 8014676:	2200      	movs	r2, #0
 8014678:	601a      	str	r2, [r3, #0]
 801467a:	605a      	str	r2, [r3, #4]
 801467c:	609a      	str	r2, [r3, #8]
 801467e:	60da      	str	r2, [r3, #12]
 8014680:	611a      	str	r2, [r3, #16]
 8014682:	615a      	str	r2, [r3, #20]
 8014684:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8014686:	4b27      	ldr	r3, [pc, #156]	; (8014724 <MX_TIM4_Init+0xc0>)
 8014688:	4a27      	ldr	r2, [pc, #156]	; (8014728 <MX_TIM4_Init+0xc4>)
 801468a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 801468c:	4b25      	ldr	r3, [pc, #148]	; (8014724 <MX_TIM4_Init+0xc0>)
 801468e:	2200      	movs	r2, #0
 8014690:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014692:	4b24      	ldr	r3, [pc, #144]	; (8014724 <MX_TIM4_Init+0xc0>)
 8014694:	2200      	movs	r2, #0
 8014696:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8014698:	4b22      	ldr	r3, [pc, #136]	; (8014724 <MX_TIM4_Init+0xc0>)
 801469a:	2200      	movs	r2, #0
 801469c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801469e:	4b21      	ldr	r3, [pc, #132]	; (8014724 <MX_TIM4_Init+0xc0>)
 80146a0:	2200      	movs	r2, #0
 80146a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80146a4:	4b1f      	ldr	r3, [pc, #124]	; (8014724 <MX_TIM4_Init+0xc0>)
 80146a6:	2200      	movs	r2, #0
 80146a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80146aa:	481e      	ldr	r0, [pc, #120]	; (8014724 <MX_TIM4_Init+0xc0>)
 80146ac:	f7ef fbff 	bl	8003eae <HAL_TIM_PWM_Init>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d001      	beq.n	80146ba <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80146b6:	f7ff fba9 	bl	8013e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80146ba:	2300      	movs	r3, #0
 80146bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80146be:	2300      	movs	r3, #0
 80146c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80146c2:	f107 0320 	add.w	r3, r7, #32
 80146c6:	4619      	mov	r1, r3
 80146c8:	4816      	ldr	r0, [pc, #88]	; (8014724 <MX_TIM4_Init+0xc0>)
 80146ca:	f7f0 fa5d 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d001      	beq.n	80146d8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80146d4:	f7ff fb9a 	bl	8013e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80146d8:	2360      	movs	r3, #96	; 0x60
 80146da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80146e0:	2300      	movs	r3, #0
 80146e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80146e4:	2300      	movs	r3, #0
 80146e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80146e8:	1d3b      	adds	r3, r7, #4
 80146ea:	2208      	movs	r2, #8
 80146ec:	4619      	mov	r1, r3
 80146ee:	480d      	ldr	r0, [pc, #52]	; (8014724 <MX_TIM4_Init+0xc0>)
 80146f0:	f7ef fdd8 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 80146f4:	4603      	mov	r3, r0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d001      	beq.n	80146fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80146fa:	f7ff fb87 	bl	8013e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80146fe:	1d3b      	adds	r3, r7, #4
 8014700:	220c      	movs	r2, #12
 8014702:	4619      	mov	r1, r3
 8014704:	4807      	ldr	r0, [pc, #28]	; (8014724 <MX_TIM4_Init+0xc0>)
 8014706:	f7ef fdcd 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d001      	beq.n	8014714 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8014710:	f7ff fb7c 	bl	8013e0c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8014714:	4803      	ldr	r0, [pc, #12]	; (8014724 <MX_TIM4_Init+0xc0>)
 8014716:	f000 f911 	bl	801493c <HAL_TIM_MspPostInit>

}
 801471a:	bf00      	nop
 801471c:	3728      	adds	r7, #40	; 0x28
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20006b14 	.word	0x20006b14
 8014728:	40000800 	.word	0x40000800

0801472c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8014730:	4b0e      	ldr	r3, [pc, #56]	; (801476c <MX_TIM13_Init+0x40>)
 8014732:	4a0f      	ldr	r2, [pc, #60]	; (8014770 <MX_TIM13_Init+0x44>)
 8014734:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400;
 8014736:	4b0d      	ldr	r3, [pc, #52]	; (801476c <MX_TIM13_Init+0x40>)
 8014738:	f242 02d0 	movw	r2, #8400	; 0x20d0
 801473c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 801473e:	4b0b      	ldr	r3, [pc, #44]	; (801476c <MX_TIM13_Init+0x40>)
 8014740:	2200      	movs	r2, #0
 8014742:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 8014744:	4b09      	ldr	r3, [pc, #36]	; (801476c <MX_TIM13_Init+0x40>)
 8014746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801474a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801474c:	4b07      	ldr	r3, [pc, #28]	; (801476c <MX_TIM13_Init+0x40>)
 801474e:	2200      	movs	r2, #0
 8014750:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8014752:	4b06      	ldr	r3, [pc, #24]	; (801476c <MX_TIM13_Init+0x40>)
 8014754:	2280      	movs	r2, #128	; 0x80
 8014756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8014758:	4804      	ldr	r0, [pc, #16]	; (801476c <MX_TIM13_Init+0x40>)
 801475a:	f7ef fb7d 	bl	8003e58 <HAL_TIM_Base_Init>
 801475e:	4603      	mov	r3, r0
 8014760:	2b00      	cmp	r3, #0
 8014762:	d001      	beq.n	8014768 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8014764:	f7ff fb52 	bl	8013e0c <Error_Handler>
  }

}
 8014768:	bf00      	nop
 801476a:	bd80      	pop	{r7, pc}
 801476c:	20006b94 	.word	0x20006b94
 8014770:	40001c00 	.word	0x40001c00

08014774 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b08c      	sub	sp, #48	; 0x30
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801477c:	f107 031c 	add.w	r3, r7, #28
 8014780:	2200      	movs	r2, #0
 8014782:	601a      	str	r2, [r3, #0]
 8014784:	605a      	str	r2, [r3, #4]
 8014786:	609a      	str	r2, [r3, #8]
 8014788:	60da      	str	r2, [r3, #12]
 801478a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014794:	d14b      	bne.n	801482e <HAL_TIM_IC_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014796:	2300      	movs	r3, #0
 8014798:	61bb      	str	r3, [r7, #24]
 801479a:	4b3f      	ldr	r3, [pc, #252]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 801479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801479e:	4a3e      	ldr	r2, [pc, #248]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147a0:	f043 0301 	orr.w	r3, r3, #1
 80147a4:	6413      	str	r3, [r2, #64]	; 0x40
 80147a6:	4b3c      	ldr	r3, [pc, #240]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147aa:	f003 0301 	and.w	r3, r3, #1
 80147ae:	61bb      	str	r3, [r7, #24]
 80147b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80147b2:	2300      	movs	r3, #0
 80147b4:	617b      	str	r3, [r7, #20]
 80147b6:	4b38      	ldr	r3, [pc, #224]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ba:	4a37      	ldr	r2, [pc, #220]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147bc:	f043 0301 	orr.w	r3, r3, #1
 80147c0:	6313      	str	r3, [r2, #48]	; 0x30
 80147c2:	4b35      	ldr	r3, [pc, #212]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147c6:	f003 0301 	and.w	r3, r3, #1
 80147ca:	617b      	str	r3, [r7, #20]
 80147cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80147ce:	2300      	movs	r3, #0
 80147d0:	613b      	str	r3, [r7, #16]
 80147d2:	4b31      	ldr	r3, [pc, #196]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147d6:	4a30      	ldr	r2, [pc, #192]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147d8:	f043 0302 	orr.w	r3, r3, #2
 80147dc:	6313      	str	r3, [r2, #48]	; 0x30
 80147de:	4b2e      	ldr	r3, [pc, #184]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 80147e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147e2:	f003 0302 	and.w	r3, r3, #2
 80147e6:	613b      	str	r3, [r7, #16]
 80147e8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80147ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80147ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147f0:	2302      	movs	r3, #2
 80147f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147f4:	2300      	movs	r3, #0
 80147f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147f8:	2300      	movs	r3, #0
 80147fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80147fc:	2301      	movs	r3, #1
 80147fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014800:	f107 031c 	add.w	r3, r7, #28
 8014804:	4619      	mov	r1, r3
 8014806:	4825      	ldr	r0, [pc, #148]	; (801489c <HAL_TIM_IC_MspInit+0x128>)
 8014808:	f7ed fa04 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801480c:	2308      	movs	r3, #8
 801480e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014810:	2302      	movs	r3, #2
 8014812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014814:	2300      	movs	r3, #0
 8014816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014818:	2300      	movs	r3, #0
 801481a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801481c:	2301      	movs	r3, #1
 801481e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014820:	f107 031c 	add.w	r3, r7, #28
 8014824:	4619      	mov	r1, r3
 8014826:	481e      	ldr	r0, [pc, #120]	; (80148a0 <HAL_TIM_IC_MspInit+0x12c>)
 8014828:	f7ed f9f4 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 801482c:	e030      	b.n	8014890 <HAL_TIM_IC_MspInit+0x11c>
  else if(tim_icHandle->Instance==TIM3)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	4a1c      	ldr	r2, [pc, #112]	; (80148a4 <HAL_TIM_IC_MspInit+0x130>)
 8014834:	4293      	cmp	r3, r2
 8014836:	d12b      	bne.n	8014890 <HAL_TIM_IC_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014838:	2300      	movs	r3, #0
 801483a:	60fb      	str	r3, [r7, #12]
 801483c:	4b16      	ldr	r3, [pc, #88]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 801483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014840:	4a15      	ldr	r2, [pc, #84]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 8014842:	f043 0302 	orr.w	r3, r3, #2
 8014846:	6413      	str	r3, [r2, #64]	; 0x40
 8014848:	4b13      	ldr	r3, [pc, #76]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 801484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801484c:	f003 0302 	and.w	r3, r3, #2
 8014850:	60fb      	str	r3, [r7, #12]
 8014852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014854:	2300      	movs	r3, #0
 8014856:	60bb      	str	r3, [r7, #8]
 8014858:	4b0f      	ldr	r3, [pc, #60]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 801485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801485c:	4a0e      	ldr	r2, [pc, #56]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 801485e:	f043 0302 	orr.w	r3, r3, #2
 8014862:	6313      	str	r3, [r2, #48]	; 0x30
 8014864:	4b0c      	ldr	r3, [pc, #48]	; (8014898 <HAL_TIM_IC_MspInit+0x124>)
 8014866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014868:	f003 0302 	and.w	r3, r3, #2
 801486c:	60bb      	str	r3, [r7, #8]
 801486e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8014870:	2330      	movs	r3, #48	; 0x30
 8014872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014874:	2302      	movs	r3, #2
 8014876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014878:	2300      	movs	r3, #0
 801487a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801487c:	2300      	movs	r3, #0
 801487e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014880:	2302      	movs	r3, #2
 8014882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014884:	f107 031c 	add.w	r3, r7, #28
 8014888:	4619      	mov	r1, r3
 801488a:	4805      	ldr	r0, [pc, #20]	; (80148a0 <HAL_TIM_IC_MspInit+0x12c>)
 801488c:	f7ed f9c2 	bl	8001c14 <HAL_GPIO_Init>
}
 8014890:	bf00      	nop
 8014892:	3730      	adds	r7, #48	; 0x30
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	40023800 	.word	0x40023800
 801489c:	40020000 	.word	0x40020000
 80148a0:	40020400 	.word	0x40020400
 80148a4:	40000400 	.word	0x40000400

080148a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80148a8:	b480      	push	{r7}
 80148aa:	b085      	sub	sp, #20
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	4a0b      	ldr	r2, [pc, #44]	; (80148e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d10d      	bne.n	80148d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80148ba:	2300      	movs	r3, #0
 80148bc:	60fb      	str	r3, [r7, #12]
 80148be:	4b0a      	ldr	r3, [pc, #40]	; (80148e8 <HAL_TIM_PWM_MspInit+0x40>)
 80148c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148c2:	4a09      	ldr	r2, [pc, #36]	; (80148e8 <HAL_TIM_PWM_MspInit+0x40>)
 80148c4:	f043 0304 	orr.w	r3, r3, #4
 80148c8:	6413      	str	r3, [r2, #64]	; 0x40
 80148ca:	4b07      	ldr	r3, [pc, #28]	; (80148e8 <HAL_TIM_PWM_MspInit+0x40>)
 80148cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148ce:	f003 0304 	and.w	r3, r3, #4
 80148d2:	60fb      	str	r3, [r7, #12]
 80148d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80148d6:	bf00      	nop
 80148d8:	3714      	adds	r7, #20
 80148da:	46bd      	mov	sp, r7
 80148dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e0:	4770      	bx	lr
 80148e2:	bf00      	nop
 80148e4:	40000800 	.word	0x40000800
 80148e8:	40023800 	.word	0x40023800

080148ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b084      	sub	sp, #16
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	4a0e      	ldr	r2, [pc, #56]	; (8014934 <HAL_TIM_Base_MspInit+0x48>)
 80148fa:	4293      	cmp	r3, r2
 80148fc:	d115      	bne.n	801492a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80148fe:	2300      	movs	r3, #0
 8014900:	60fb      	str	r3, [r7, #12]
 8014902:	4b0d      	ldr	r3, [pc, #52]	; (8014938 <HAL_TIM_Base_MspInit+0x4c>)
 8014904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014906:	4a0c      	ldr	r2, [pc, #48]	; (8014938 <HAL_TIM_Base_MspInit+0x4c>)
 8014908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801490c:	6413      	str	r3, [r2, #64]	; 0x40
 801490e:	4b0a      	ldr	r3, [pc, #40]	; (8014938 <HAL_TIM_Base_MspInit+0x4c>)
 8014910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014916:	60fb      	str	r3, [r7, #12]
 8014918:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801491a:	2200      	movs	r2, #0
 801491c:	2105      	movs	r1, #5
 801491e:	202c      	movs	r0, #44	; 0x2c
 8014920:	f7ec f9ad 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014924:	202c      	movs	r0, #44	; 0x2c
 8014926:	f7ec f9c6 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 801492a:	bf00      	nop
 801492c:	3710      	adds	r7, #16
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	40001c00 	.word	0x40001c00
 8014938:	40023800 	.word	0x40023800

0801493c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b088      	sub	sp, #32
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014944:	f107 030c 	add.w	r3, r7, #12
 8014948:	2200      	movs	r2, #0
 801494a:	601a      	str	r2, [r3, #0]
 801494c:	605a      	str	r2, [r3, #4]
 801494e:	609a      	str	r2, [r3, #8]
 8014950:	60da      	str	r2, [r3, #12]
 8014952:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	4a12      	ldr	r2, [pc, #72]	; (80149a4 <HAL_TIM_MspPostInit+0x68>)
 801495a:	4293      	cmp	r3, r2
 801495c:	d11e      	bne.n	801499c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801495e:	2300      	movs	r3, #0
 8014960:	60bb      	str	r3, [r7, #8]
 8014962:	4b11      	ldr	r3, [pc, #68]	; (80149a8 <HAL_TIM_MspPostInit+0x6c>)
 8014964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014966:	4a10      	ldr	r2, [pc, #64]	; (80149a8 <HAL_TIM_MspPostInit+0x6c>)
 8014968:	f043 0308 	orr.w	r3, r3, #8
 801496c:	6313      	str	r3, [r2, #48]	; 0x30
 801496e:	4b0e      	ldr	r3, [pc, #56]	; (80149a8 <HAL_TIM_MspPostInit+0x6c>)
 8014970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014972:	f003 0308 	and.w	r3, r3, #8
 8014976:	60bb      	str	r3, [r7, #8]
 8014978:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801497a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801497e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014980:	2302      	movs	r3, #2
 8014982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014984:	2300      	movs	r3, #0
 8014986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014988:	2300      	movs	r3, #0
 801498a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801498c:	2302      	movs	r3, #2
 801498e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014990:	f107 030c 	add.w	r3, r7, #12
 8014994:	4619      	mov	r1, r3
 8014996:	4805      	ldr	r0, [pc, #20]	; (80149ac <HAL_TIM_MspPostInit+0x70>)
 8014998:	f7ed f93c 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 801499c:	bf00      	nop
 801499e:	3720      	adds	r7, #32
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	40000800 	.word	0x40000800
 80149a8:	40023800 	.word	0x40023800
 80149ac:	40020c00 	.word	0x40020c00

080149b0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80149b4:	4b11      	ldr	r3, [pc, #68]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149b6:	4a12      	ldr	r2, [pc, #72]	; (8014a00 <MX_USART3_UART_Init+0x50>)
 80149b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80149ba:	4b10      	ldr	r3, [pc, #64]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80149c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80149c2:	4b0e      	ldr	r3, [pc, #56]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149c4:	2200      	movs	r2, #0
 80149c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80149c8:	4b0c      	ldr	r3, [pc, #48]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149ca:	2200      	movs	r2, #0
 80149cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80149ce:	4b0b      	ldr	r3, [pc, #44]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149d0:	2200      	movs	r2, #0
 80149d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80149d4:	4b09      	ldr	r3, [pc, #36]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149d6:	220c      	movs	r2, #12
 80149d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80149da:	4b08      	ldr	r3, [pc, #32]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149dc:	2200      	movs	r2, #0
 80149de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80149e0:	4b06      	ldr	r3, [pc, #24]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149e2:	2200      	movs	r2, #0
 80149e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80149e6:	4805      	ldr	r0, [pc, #20]	; (80149fc <MX_USART3_UART_Init+0x4c>)
 80149e8:	f7f0 f927 	bl	8004c3a <HAL_UART_Init>
 80149ec:	4603      	mov	r3, r0
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d001      	beq.n	80149f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80149f2:	f7ff fa0b 	bl	8013e0c <Error_Handler>
  }

}
 80149f6:	bf00      	nop
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	bf00      	nop
 80149fc:	20006c14 	.word	0x20006c14
 8014a00:	40004800 	.word	0x40004800

08014a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b08a      	sub	sp, #40	; 0x28
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014a0c:	f107 0314 	add.w	r3, r7, #20
 8014a10:	2200      	movs	r2, #0
 8014a12:	601a      	str	r2, [r3, #0]
 8014a14:	605a      	str	r2, [r3, #4]
 8014a16:	609a      	str	r2, [r3, #8]
 8014a18:	60da      	str	r2, [r3, #12]
 8014a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	4a19      	ldr	r2, [pc, #100]	; (8014a88 <HAL_UART_MspInit+0x84>)
 8014a22:	4293      	cmp	r3, r2
 8014a24:	d12c      	bne.n	8014a80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8014a26:	2300      	movs	r3, #0
 8014a28:	613b      	str	r3, [r7, #16]
 8014a2a:	4b18      	ldr	r3, [pc, #96]	; (8014a8c <HAL_UART_MspInit+0x88>)
 8014a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a2e:	4a17      	ldr	r2, [pc, #92]	; (8014a8c <HAL_UART_MspInit+0x88>)
 8014a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014a34:	6413      	str	r3, [r2, #64]	; 0x40
 8014a36:	4b15      	ldr	r3, [pc, #84]	; (8014a8c <HAL_UART_MspInit+0x88>)
 8014a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014a3e:	613b      	str	r3, [r7, #16]
 8014a40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a42:	2300      	movs	r3, #0
 8014a44:	60fb      	str	r3, [r7, #12]
 8014a46:	4b11      	ldr	r3, [pc, #68]	; (8014a8c <HAL_UART_MspInit+0x88>)
 8014a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a4a:	4a10      	ldr	r2, [pc, #64]	; (8014a8c <HAL_UART_MspInit+0x88>)
 8014a4c:	f043 0308 	orr.w	r3, r3, #8
 8014a50:	6313      	str	r3, [r2, #48]	; 0x30
 8014a52:	4b0e      	ldr	r3, [pc, #56]	; (8014a8c <HAL_UART_MspInit+0x88>)
 8014a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a56:	f003 0308 	and.w	r3, r3, #8
 8014a5a:	60fb      	str	r3, [r7, #12]
 8014a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8014a5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a64:	2302      	movs	r3, #2
 8014a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014a68:	2301      	movs	r3, #1
 8014a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a6c:	2303      	movs	r3, #3
 8014a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014a70:	2307      	movs	r3, #7
 8014a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a74:	f107 0314 	add.w	r3, r7, #20
 8014a78:	4619      	mov	r1, r3
 8014a7a:	4805      	ldr	r0, [pc, #20]	; (8014a90 <HAL_UART_MspInit+0x8c>)
 8014a7c:	f7ed f8ca 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8014a80:	bf00      	nop
 8014a82:	3728      	adds	r7, #40	; 0x28
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}
 8014a88:	40004800 	.word	0x40004800
 8014a8c:	40023800 	.word	0x40023800
 8014a90:	40020c00 	.word	0x40020c00

08014a94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014a98:	2200      	movs	r2, #0
 8014a9a:	4912      	ldr	r1, [pc, #72]	; (8014ae4 <MX_USB_DEVICE_Init+0x50>)
 8014a9c:	4812      	ldr	r0, [pc, #72]	; (8014ae8 <MX_USB_DEVICE_Init+0x54>)
 8014a9e:	f7f2 f8d5 	bl	8006c4c <USBD_Init>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d001      	beq.n	8014aac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014aa8:	f7ff f9b0 	bl	8013e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014aac:	490f      	ldr	r1, [pc, #60]	; (8014aec <MX_USB_DEVICE_Init+0x58>)
 8014aae:	480e      	ldr	r0, [pc, #56]	; (8014ae8 <MX_USB_DEVICE_Init+0x54>)
 8014ab0:	f7f2 f8f7 	bl	8006ca2 <USBD_RegisterClass>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d001      	beq.n	8014abe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014aba:	f7ff f9a7 	bl	8013e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014abe:	490c      	ldr	r1, [pc, #48]	; (8014af0 <MX_USB_DEVICE_Init+0x5c>)
 8014ac0:	4809      	ldr	r0, [pc, #36]	; (8014ae8 <MX_USB_DEVICE_Init+0x54>)
 8014ac2:	f7f2 f825 	bl	8006b10 <USBD_CDC_RegisterInterface>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d001      	beq.n	8014ad0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014acc:	f7ff f99e 	bl	8013e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014ad0:	4805      	ldr	r0, [pc, #20]	; (8014ae8 <MX_USB_DEVICE_Init+0x54>)
 8014ad2:	f7f2 f900 	bl	8006cd6 <USBD_Start>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d001      	beq.n	8014ae0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014adc:	f7ff f996 	bl	8013e0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014ae0:	bf00      	nop
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	2000013c 	.word	0x2000013c
 8014ae8:	20006c54 	.word	0x20006c54
 8014aec:	20000014 	.word	0x20000014
 8014af0:	2000012c 	.word	0x2000012c

08014af4 <__io_getchar>:
	CDC_Transmit_FS((uint8_t *)&ch, 1);

	return(ch);
}

int __io_getchar(void){
 8014af4:	b480      	push	{r7}
 8014af6:	af00      	add	r7, sp, #0

  // Loop until the reception buffer is not empty
  while(!(USART6->SR & USART_SR_RXNE));
 8014af8:	bf00      	nop
 8014afa:	4b06      	ldr	r3, [pc, #24]	; (8014b14 <__io_getchar+0x20>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f003 0320 	and.w	r3, r3, #32
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d0f9      	beq.n	8014afa <__io_getchar+0x6>

  return((int)USART6->DR);
 8014b06:	4b03      	ldr	r3, [pc, #12]	; (8014b14 <__io_getchar+0x20>)
 8014b08:	685b      	ldr	r3, [r3, #4]
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr
 8014b14:	40011400 	.word	0x40011400

08014b18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	4905      	ldr	r1, [pc, #20]	; (8014b34 <CDC_Init_FS+0x1c>)
 8014b20:	4805      	ldr	r0, [pc, #20]	; (8014b38 <CDC_Init_FS+0x20>)
 8014b22:	f7f2 f80c 	bl	8006b3e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014b26:	4905      	ldr	r1, [pc, #20]	; (8014b3c <CDC_Init_FS+0x24>)
 8014b28:	4803      	ldr	r0, [pc, #12]	; (8014b38 <CDC_Init_FS+0x20>)
 8014b2a:	f7f2 f822 	bl	8006b72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014b2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	200076f0 	.word	0x200076f0
 8014b38:	20006c54 	.word	0x20006c54
 8014b3c:	20006ef0 	.word	0x20006ef0

08014b40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014b40:	b480      	push	{r7}
 8014b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014b44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr

08014b50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014b50:	b480      	push	{r7}
 8014b52:	b083      	sub	sp, #12
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	4603      	mov	r3, r0
 8014b58:	6039      	str	r1, [r7, #0]
 8014b5a:	71fb      	strb	r3, [r7, #7]
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014b60:	79fb      	ldrb	r3, [r7, #7]
 8014b62:	2b23      	cmp	r3, #35	; 0x23
 8014b64:	d84a      	bhi.n	8014bfc <CDC_Control_FS+0xac>
 8014b66:	a201      	add	r2, pc, #4	; (adr r2, 8014b6c <CDC_Control_FS+0x1c>)
 8014b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b6c:	08014bfd 	.word	0x08014bfd
 8014b70:	08014bfd 	.word	0x08014bfd
 8014b74:	08014bfd 	.word	0x08014bfd
 8014b78:	08014bfd 	.word	0x08014bfd
 8014b7c:	08014bfd 	.word	0x08014bfd
 8014b80:	08014bfd 	.word	0x08014bfd
 8014b84:	08014bfd 	.word	0x08014bfd
 8014b88:	08014bfd 	.word	0x08014bfd
 8014b8c:	08014bfd 	.word	0x08014bfd
 8014b90:	08014bfd 	.word	0x08014bfd
 8014b94:	08014bfd 	.word	0x08014bfd
 8014b98:	08014bfd 	.word	0x08014bfd
 8014b9c:	08014bfd 	.word	0x08014bfd
 8014ba0:	08014bfd 	.word	0x08014bfd
 8014ba4:	08014bfd 	.word	0x08014bfd
 8014ba8:	08014bfd 	.word	0x08014bfd
 8014bac:	08014bfd 	.word	0x08014bfd
 8014bb0:	08014bfd 	.word	0x08014bfd
 8014bb4:	08014bfd 	.word	0x08014bfd
 8014bb8:	08014bfd 	.word	0x08014bfd
 8014bbc:	08014bfd 	.word	0x08014bfd
 8014bc0:	08014bfd 	.word	0x08014bfd
 8014bc4:	08014bfd 	.word	0x08014bfd
 8014bc8:	08014bfd 	.word	0x08014bfd
 8014bcc:	08014bfd 	.word	0x08014bfd
 8014bd0:	08014bfd 	.word	0x08014bfd
 8014bd4:	08014bfd 	.word	0x08014bfd
 8014bd8:	08014bfd 	.word	0x08014bfd
 8014bdc:	08014bfd 	.word	0x08014bfd
 8014be0:	08014bfd 	.word	0x08014bfd
 8014be4:	08014bfd 	.word	0x08014bfd
 8014be8:	08014bfd 	.word	0x08014bfd
 8014bec:	08014bfd 	.word	0x08014bfd
 8014bf0:	08014bfd 	.word	0x08014bfd
 8014bf4:	08014bfd 	.word	0x08014bfd
 8014bf8:	08014bfd 	.word	0x08014bfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014bfc:	bf00      	nop
  }

  return (USBD_OK);
 8014bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	370c      	adds	r7, #12
 8014c04:	46bd      	mov	sp, r7
 8014c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0a:	4770      	bx	lr

08014c0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014c16:	6879      	ldr	r1, [r7, #4]
 8014c18:	4805      	ldr	r0, [pc, #20]	; (8014c30 <CDC_Receive_FS+0x24>)
 8014c1a:	f7f1 ffaa 	bl	8006b72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014c1e:	4804      	ldr	r0, [pc, #16]	; (8014c30 <CDC_Receive_FS+0x24>)
 8014c20:	f7f1 ffea 	bl	8006bf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014c24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3708      	adds	r7, #8
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	bf00      	nop
 8014c30:	20006c54 	.word	0x20006c54

08014c34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014c40:	2300      	movs	r3, #0
 8014c42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014c44:	4b0d      	ldr	r3, [pc, #52]	; (8014c7c <CDC_Transmit_FS+0x48>)
 8014c46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8014c4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d001      	beq.n	8014c5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014c56:	2301      	movs	r3, #1
 8014c58:	e00b      	b.n	8014c72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014c5a:	887b      	ldrh	r3, [r7, #2]
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	6879      	ldr	r1, [r7, #4]
 8014c60:	4806      	ldr	r0, [pc, #24]	; (8014c7c <CDC_Transmit_FS+0x48>)
 8014c62:	f7f1 ff6c 	bl	8006b3e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014c66:	4805      	ldr	r0, [pc, #20]	; (8014c7c <CDC_Transmit_FS+0x48>)
 8014c68:	f7f1 ff97 	bl	8006b9a <USBD_CDC_TransmitPacket>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3710      	adds	r7, #16
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20006c54 	.word	0x20006c54

08014c80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b08a      	sub	sp, #40	; 0x28
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c88:	f107 0314 	add.w	r3, r7, #20
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	601a      	str	r2, [r3, #0]
 8014c90:	605a      	str	r2, [r3, #4]
 8014c92:	609a      	str	r2, [r3, #8]
 8014c94:	60da      	str	r2, [r3, #12]
 8014c96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014ca0:	d147      	bne.n	8014d32 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	613b      	str	r3, [r7, #16]
 8014ca6:	4b25      	ldr	r3, [pc, #148]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014caa:	4a24      	ldr	r2, [pc, #144]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014cac:	f043 0301 	orr.w	r3, r3, #1
 8014cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8014cb2:	4b22      	ldr	r3, [pc, #136]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cb6:	f003 0301 	and.w	r3, r3, #1
 8014cba:	613b      	str	r3, [r7, #16]
 8014cbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8014cbe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8014cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014cc4:	2302      	movs	r3, #2
 8014cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ccc:	2303      	movs	r3, #3
 8014cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014cd0:	230a      	movs	r3, #10
 8014cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014cd4:	f107 0314 	add.w	r3, r7, #20
 8014cd8:	4619      	mov	r1, r3
 8014cda:	4819      	ldr	r0, [pc, #100]	; (8014d40 <HAL_PCD_MspInit+0xc0>)
 8014cdc:	f7ec ff9a 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8014ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014cea:	2300      	movs	r3, #0
 8014cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8014cee:	f107 0314 	add.w	r3, r7, #20
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	4812      	ldr	r0, [pc, #72]	; (8014d40 <HAL_PCD_MspInit+0xc0>)
 8014cf6:	f7ec ff8d 	bl	8001c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014cfa:	4b10      	ldr	r3, [pc, #64]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cfe:	4a0f      	ldr	r2, [pc, #60]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d04:	6353      	str	r3, [r2, #52]	; 0x34
 8014d06:	2300      	movs	r3, #0
 8014d08:	60fb      	str	r3, [r7, #12]
 8014d0a:	4b0c      	ldr	r3, [pc, #48]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d0e:	4a0b      	ldr	r2, [pc, #44]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014d14:	6453      	str	r3, [r2, #68]	; 0x44
 8014d16:	4b09      	ldr	r3, [pc, #36]	; (8014d3c <HAL_PCD_MspInit+0xbc>)
 8014d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d1e:	60fb      	str	r3, [r7, #12]
 8014d20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014d22:	2200      	movs	r2, #0
 8014d24:	2100      	movs	r1, #0
 8014d26:	2043      	movs	r0, #67	; 0x43
 8014d28:	f7eb ffa9 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014d2c:	2043      	movs	r0, #67	; 0x43
 8014d2e:	f7eb ffc2 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014d32:	bf00      	nop
 8014d34:	3728      	adds	r7, #40	; 0x28
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	40023800 	.word	0x40023800
 8014d40:	40020000 	.word	0x40020000

08014d44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014d58:	4619      	mov	r1, r3
 8014d5a:	4610      	mov	r0, r2
 8014d5c:	f7f2 f804 	bl	8006d68 <USBD_LL_SetupStage>
}
 8014d60:	bf00      	nop
 8014d62:	3708      	adds	r7, #8
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	460b      	mov	r3, r1
 8014d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014d7a:	78fa      	ldrb	r2, [r7, #3]
 8014d7c:	6879      	ldr	r1, [r7, #4]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	00db      	lsls	r3, r3, #3
 8014d82:	1a9b      	subs	r3, r3, r2
 8014d84:	009b      	lsls	r3, r3, #2
 8014d86:	440b      	add	r3, r1
 8014d88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014d8c:	681a      	ldr	r2, [r3, #0]
 8014d8e:	78fb      	ldrb	r3, [r7, #3]
 8014d90:	4619      	mov	r1, r3
 8014d92:	f7f2 f834 	bl	8006dfe <USBD_LL_DataOutStage>
}
 8014d96:	bf00      	nop
 8014d98:	3708      	adds	r7, #8
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}

08014d9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b082      	sub	sp, #8
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	460b      	mov	r3, r1
 8014da8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014db0:	78fa      	ldrb	r2, [r7, #3]
 8014db2:	6879      	ldr	r1, [r7, #4]
 8014db4:	4613      	mov	r3, r2
 8014db6:	00db      	lsls	r3, r3, #3
 8014db8:	1a9b      	subs	r3, r3, r2
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	440b      	add	r3, r1
 8014dbe:	3348      	adds	r3, #72	; 0x48
 8014dc0:	681a      	ldr	r2, [r3, #0]
 8014dc2:	78fb      	ldrb	r3, [r7, #3]
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	f7f2 f88b 	bl	8006ee0 <USBD_LL_DataInStage>
}
 8014dca:	bf00      	nop
 8014dcc:	3708      	adds	r7, #8
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}

08014dd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dd2:	b580      	push	{r7, lr}
 8014dd4:	b082      	sub	sp, #8
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7f2 f999 	bl	8007118 <USBD_LL_SOF>
}
 8014de6:	bf00      	nop
 8014de8:	3708      	adds	r7, #8
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}

08014dee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8014dee:	b580      	push	{r7, lr}
 8014df0:	b084      	sub	sp, #16
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014df6:	2301      	movs	r3, #1
 8014df8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d102      	bne.n	8014e08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014e02:	2300      	movs	r3, #0
 8014e04:	73fb      	strb	r3, [r7, #15]
 8014e06:	e008      	b.n	8014e1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	68db      	ldr	r3, [r3, #12]
 8014e0c:	2b02      	cmp	r3, #2
 8014e0e:	d102      	bne.n	8014e16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014e10:	2301      	movs	r3, #1
 8014e12:	73fb      	strb	r3, [r7, #15]
 8014e14:	e001      	b.n	8014e1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014e16:	f7fe fff9 	bl	8013e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e20:	7bfa      	ldrb	r2, [r7, #15]
 8014e22:	4611      	mov	r1, r2
 8014e24:	4618      	mov	r0, r3
 8014e26:	f7f2 f941 	bl	80070ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7f2 f8fa 	bl	800702a <USBD_LL_Reset>
}
 8014e36:	bf00      	nop
 8014e38:	3710      	adds	r7, #16
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
	...

08014e40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b082      	sub	sp, #8
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7f2 f93c 	bl	80070cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	6812      	ldr	r2, [r2, #0]
 8014e62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014e66:	f043 0301 	orr.w	r3, r3, #1
 8014e6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6a1b      	ldr	r3, [r3, #32]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d005      	beq.n	8014e80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014e74:	4b04      	ldr	r3, [pc, #16]	; (8014e88 <HAL_PCD_SuspendCallback+0x48>)
 8014e76:	691b      	ldr	r3, [r3, #16]
 8014e78:	4a03      	ldr	r2, [pc, #12]	; (8014e88 <HAL_PCD_SuspendCallback+0x48>)
 8014e7a:	f043 0306 	orr.w	r3, r3, #6
 8014e7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014e80:	bf00      	nop
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	e000ed00 	.word	0xe000ed00

08014e8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7f2 f92b 	bl	80070f6 <USBD_LL_Resume>
}
 8014ea0:	bf00      	nop
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014eba:	78fa      	ldrb	r2, [r7, #3]
 8014ebc:	4611      	mov	r1, r2
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7f2 f951 	bl	8007166 <USBD_LL_IsoOUTIncomplete>
}
 8014ec4:	bf00      	nop
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014ede:	78fa      	ldrb	r2, [r7, #3]
 8014ee0:	4611      	mov	r1, r2
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7f2 f932 	bl	800714c <USBD_LL_IsoINIncomplete>
}
 8014ee8:	bf00      	nop
 8014eea:	3708      	adds	r7, #8
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}

08014ef0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014efe:	4618      	mov	r0, r3
 8014f00:	f7f2 f93e 	bl	8007180 <USBD_LL_DevConnected>
}
 8014f04:	bf00      	nop
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f2 f93b 	bl	8007196 <USBD_LL_DevDisconnected>
}
 8014f20:	bf00      	nop
 8014f22:	3708      	adds	r7, #8
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}

08014f28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	781b      	ldrb	r3, [r3, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d13c      	bne.n	8014fb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014f38:	4a20      	ldr	r2, [pc, #128]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	4a1e      	ldr	r2, [pc, #120]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014f48:	4b1c      	ldr	r3, [pc, #112]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014f4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014f50:	4b1a      	ldr	r3, [pc, #104]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f52:	2204      	movs	r2, #4
 8014f54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014f56:	4b19      	ldr	r3, [pc, #100]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f58:	2202      	movs	r2, #2
 8014f5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014f5c:	4b17      	ldr	r3, [pc, #92]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f5e:	2200      	movs	r2, #0
 8014f60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014f62:	4b16      	ldr	r3, [pc, #88]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f64:	2202      	movs	r2, #2
 8014f66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8014f68:	4b14      	ldr	r3, [pc, #80]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014f6e:	4b13      	ldr	r3, [pc, #76]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f70:	2200      	movs	r2, #0
 8014f72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014f74:	4b11      	ldr	r3, [pc, #68]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f76:	2200      	movs	r2, #0
 8014f78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8014f7a:	4b10      	ldr	r3, [pc, #64]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014f80:	4b0e      	ldr	r3, [pc, #56]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014f86:	480d      	ldr	r0, [pc, #52]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f88:	f7ed f9ab 	bl	80022e2 <HAL_PCD_Init>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d001      	beq.n	8014f96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014f92:	f7fe ff3b 	bl	8013e0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014f96:	2180      	movs	r1, #128	; 0x80
 8014f98:	4808      	ldr	r0, [pc, #32]	; (8014fbc <USBD_LL_Init+0x94>)
 8014f9a:	f7ee fb10 	bl	80035be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014f9e:	2240      	movs	r2, #64	; 0x40
 8014fa0:	2100      	movs	r1, #0
 8014fa2:	4806      	ldr	r0, [pc, #24]	; (8014fbc <USBD_LL_Init+0x94>)
 8014fa4:	f7ee fac4 	bl	8003530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014fa8:	2280      	movs	r2, #128	; 0x80
 8014faa:	2101      	movs	r1, #1
 8014fac:	4803      	ldr	r0, [pc, #12]	; (8014fbc <USBD_LL_Init+0x94>)
 8014fae:	f7ee fabf 	bl	8003530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014fb2:	2300      	movs	r3, #0
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3708      	adds	r7, #8
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	20007ef0 	.word	0x20007ef0

08014fc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fcc:	2300      	movs	r3, #0
 8014fce:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7ed faa0 	bl	800251c <HAL_PCD_Start>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014fe0:	7bfb      	ldrb	r3, [r7, #15]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f000 f92e 	bl	8015244 <USBD_Get_USB_Status>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3710      	adds	r7, #16
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}

08014ff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b084      	sub	sp, #16
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
 8014ffe:	4608      	mov	r0, r1
 8015000:	4611      	mov	r1, r2
 8015002:	461a      	mov	r2, r3
 8015004:	4603      	mov	r3, r0
 8015006:	70fb      	strb	r3, [r7, #3]
 8015008:	460b      	mov	r3, r1
 801500a:	70bb      	strb	r3, [r7, #2]
 801500c:	4613      	mov	r3, r2
 801500e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015010:	2300      	movs	r3, #0
 8015012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015014:	2300      	movs	r3, #0
 8015016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801501e:	78bb      	ldrb	r3, [r7, #2]
 8015020:	883a      	ldrh	r2, [r7, #0]
 8015022:	78f9      	ldrb	r1, [r7, #3]
 8015024:	f7ed fe75 	bl	8002d12 <HAL_PCD_EP_Open>
 8015028:	4603      	mov	r3, r0
 801502a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801502c:	7bfb      	ldrb	r3, [r7, #15]
 801502e:	4618      	mov	r0, r3
 8015030:	f000 f908 	bl	8015244 <USBD_Get_USB_Status>
 8015034:	4603      	mov	r3, r0
 8015036:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015038:	7bbb      	ldrb	r3, [r7, #14]
}
 801503a:	4618      	mov	r0, r3
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b084      	sub	sp, #16
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
 801504a:	460b      	mov	r3, r1
 801504c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801504e:	2300      	movs	r3, #0
 8015050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015052:	2300      	movs	r3, #0
 8015054:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801505c:	78fa      	ldrb	r2, [r7, #3]
 801505e:	4611      	mov	r1, r2
 8015060:	4618      	mov	r0, r3
 8015062:	f7ed febe 	bl	8002de2 <HAL_PCD_EP_Close>
 8015066:	4603      	mov	r3, r0
 8015068:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801506a:	7bfb      	ldrb	r3, [r7, #15]
 801506c:	4618      	mov	r0, r3
 801506e:	f000 f8e9 	bl	8015244 <USBD_Get_USB_Status>
 8015072:	4603      	mov	r3, r0
 8015074:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015076:	7bbb      	ldrb	r3, [r7, #14]
}
 8015078:	4618      	mov	r0, r3
 801507a:	3710      	adds	r7, #16
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	460b      	mov	r3, r1
 801508a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801508c:	2300      	movs	r3, #0
 801508e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015090:	2300      	movs	r3, #0
 8015092:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801509a:	78fa      	ldrb	r2, [r7, #3]
 801509c:	4611      	mov	r1, r2
 801509e:	4618      	mov	r0, r3
 80150a0:	f7ed ff96 	bl	8002fd0 <HAL_PCD_EP_SetStall>
 80150a4:	4603      	mov	r3, r0
 80150a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150a8:	7bfb      	ldrb	r3, [r7, #15]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f000 f8ca 	bl	8015244 <USBD_Get_USB_Status>
 80150b0:	4603      	mov	r3, r0
 80150b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80150b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3710      	adds	r7, #16
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150be:	b580      	push	{r7, lr}
 80150c0:	b084      	sub	sp, #16
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
 80150c6:	460b      	mov	r3, r1
 80150c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150ca:	2300      	movs	r3, #0
 80150cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150ce:	2300      	movs	r3, #0
 80150d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80150d8:	78fa      	ldrb	r2, [r7, #3]
 80150da:	4611      	mov	r1, r2
 80150dc:	4618      	mov	r0, r3
 80150de:	f7ed ffdb 	bl	8003098 <HAL_PCD_EP_ClrStall>
 80150e2:	4603      	mov	r3, r0
 80150e4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80150e6:	7bfb      	ldrb	r3, [r7, #15]
 80150e8:	4618      	mov	r0, r3
 80150ea:	f000 f8ab 	bl	8015244 <USBD_Get_USB_Status>
 80150ee:	4603      	mov	r3, r0
 80150f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80150f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3710      	adds	r7, #16
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150fc:	b480      	push	{r7}
 80150fe:	b085      	sub	sp, #20
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	460b      	mov	r3, r1
 8015106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801510e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015114:	2b00      	cmp	r3, #0
 8015116:	da0b      	bge.n	8015130 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015118:	78fb      	ldrb	r3, [r7, #3]
 801511a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801511e:	68f9      	ldr	r1, [r7, #12]
 8015120:	4613      	mov	r3, r2
 8015122:	00db      	lsls	r3, r3, #3
 8015124:	1a9b      	subs	r3, r3, r2
 8015126:	009b      	lsls	r3, r3, #2
 8015128:	440b      	add	r3, r1
 801512a:	333e      	adds	r3, #62	; 0x3e
 801512c:	781b      	ldrb	r3, [r3, #0]
 801512e:	e00b      	b.n	8015148 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015130:	78fb      	ldrb	r3, [r7, #3]
 8015132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015136:	68f9      	ldr	r1, [r7, #12]
 8015138:	4613      	mov	r3, r2
 801513a:	00db      	lsls	r3, r3, #3
 801513c:	1a9b      	subs	r3, r3, r2
 801513e:	009b      	lsls	r3, r3, #2
 8015140:	440b      	add	r3, r1
 8015142:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015146:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015148:	4618      	mov	r0, r3
 801514a:	3714      	adds	r7, #20
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr

08015154 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	460b      	mov	r3, r1
 801515e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015160:	2300      	movs	r3, #0
 8015162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015164:	2300      	movs	r3, #0
 8015166:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801516e:	78fa      	ldrb	r2, [r7, #3]
 8015170:	4611      	mov	r1, r2
 8015172:	4618      	mov	r0, r3
 8015174:	f7ed fda8 	bl	8002cc8 <HAL_PCD_SetAddress>
 8015178:	4603      	mov	r3, r0
 801517a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801517c:	7bfb      	ldrb	r3, [r7, #15]
 801517e:	4618      	mov	r0, r3
 8015180:	f000 f860 	bl	8015244 <USBD_Get_USB_Status>
 8015184:	4603      	mov	r3, r0
 8015186:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015188:	7bbb      	ldrb	r3, [r7, #14]
}
 801518a:	4618      	mov	r0, r3
 801518c:	3710      	adds	r7, #16
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015192:	b580      	push	{r7, lr}
 8015194:	b086      	sub	sp, #24
 8015196:	af00      	add	r7, sp, #0
 8015198:	60f8      	str	r0, [r7, #12]
 801519a:	607a      	str	r2, [r7, #4]
 801519c:	461a      	mov	r2, r3
 801519e:	460b      	mov	r3, r1
 80151a0:	72fb      	strb	r3, [r7, #11]
 80151a2:	4613      	mov	r3, r2
 80151a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151a6:	2300      	movs	r3, #0
 80151a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151aa:	2300      	movs	r3, #0
 80151ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80151b4:	893b      	ldrh	r3, [r7, #8]
 80151b6:	7af9      	ldrb	r1, [r7, #11]
 80151b8:	687a      	ldr	r2, [r7, #4]
 80151ba:	f7ed febf 	bl	8002f3c <HAL_PCD_EP_Transmit>
 80151be:	4603      	mov	r3, r0
 80151c0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80151c2:	7dfb      	ldrb	r3, [r7, #23]
 80151c4:	4618      	mov	r0, r3
 80151c6:	f000 f83d 	bl	8015244 <USBD_Get_USB_Status>
 80151ca:	4603      	mov	r3, r0
 80151cc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80151ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3718      	adds	r7, #24
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b086      	sub	sp, #24
 80151dc:	af00      	add	r7, sp, #0
 80151de:	60f8      	str	r0, [r7, #12]
 80151e0:	607a      	str	r2, [r7, #4]
 80151e2:	461a      	mov	r2, r3
 80151e4:	460b      	mov	r3, r1
 80151e6:	72fb      	strb	r3, [r7, #11]
 80151e8:	4613      	mov	r3, r2
 80151ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151ec:	2300      	movs	r3, #0
 80151ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80151fa:	893b      	ldrh	r3, [r7, #8]
 80151fc:	7af9      	ldrb	r1, [r7, #11]
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	f7ed fe39 	bl	8002e76 <HAL_PCD_EP_Receive>
 8015204:	4603      	mov	r3, r0
 8015206:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015208:	7dfb      	ldrb	r3, [r7, #23]
 801520a:	4618      	mov	r0, r3
 801520c:	f000 f81a 	bl	8015244 <USBD_Get_USB_Status>
 8015210:	4603      	mov	r3, r0
 8015212:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015214:	7dbb      	ldrb	r3, [r7, #22]
}
 8015216:	4618      	mov	r0, r3
 8015218:	3718      	adds	r7, #24
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}

0801521e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801521e:	b580      	push	{r7, lr}
 8015220:	b082      	sub	sp, #8
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
 8015226:	460b      	mov	r3, r1
 8015228:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015230:	78fa      	ldrb	r2, [r7, #3]
 8015232:	4611      	mov	r1, r2
 8015234:	4618      	mov	r0, r3
 8015236:	f7ed fe69 	bl	8002f0c <HAL_PCD_EP_GetRxCount>
 801523a:	4603      	mov	r3, r0
}
 801523c:	4618      	mov	r0, r3
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015244:	b480      	push	{r7}
 8015246:	b085      	sub	sp, #20
 8015248:	af00      	add	r7, sp, #0
 801524a:	4603      	mov	r3, r0
 801524c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801524e:	2300      	movs	r3, #0
 8015250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015252:	79fb      	ldrb	r3, [r7, #7]
 8015254:	2b03      	cmp	r3, #3
 8015256:	d817      	bhi.n	8015288 <USBD_Get_USB_Status+0x44>
 8015258:	a201      	add	r2, pc, #4	; (adr r2, 8015260 <USBD_Get_USB_Status+0x1c>)
 801525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801525e:	bf00      	nop
 8015260:	08015271 	.word	0x08015271
 8015264:	08015277 	.word	0x08015277
 8015268:	0801527d 	.word	0x0801527d
 801526c:	08015283 	.word	0x08015283
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015270:	2300      	movs	r3, #0
 8015272:	73fb      	strb	r3, [r7, #15]
    break;
 8015274:	e00b      	b.n	801528e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015276:	2302      	movs	r3, #2
 8015278:	73fb      	strb	r3, [r7, #15]
    break;
 801527a:	e008      	b.n	801528e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801527c:	2301      	movs	r3, #1
 801527e:	73fb      	strb	r3, [r7, #15]
    break;
 8015280:	e005      	b.n	801528e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015282:	2302      	movs	r3, #2
 8015284:	73fb      	strb	r3, [r7, #15]
    break;
 8015286:	e002      	b.n	801528e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015288:	2302      	movs	r3, #2
 801528a:	73fb      	strb	r3, [r7, #15]
    break;
 801528c:	bf00      	nop
  }
  return usb_status;
 801528e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015290:	4618      	mov	r0, r3
 8015292:	3714      	adds	r7, #20
 8015294:	46bd      	mov	sp, r7
 8015296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529a:	4770      	bx	lr

0801529c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801529c:	b480      	push	{r7}
 801529e:	b083      	sub	sp, #12
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	4603      	mov	r3, r0
 80152a4:	6039      	str	r1, [r7, #0]
 80152a6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	2212      	movs	r2, #18
 80152ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152ae:	4b03      	ldr	r3, [pc, #12]	; (80152bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	370c      	adds	r7, #12
 80152b4:	46bd      	mov	sp, r7
 80152b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ba:	4770      	bx	lr
 80152bc:	20000158 	.word	0x20000158

080152c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b083      	sub	sp, #12
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	4603      	mov	r3, r0
 80152c8:	6039      	str	r1, [r7, #0]
 80152ca:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	2204      	movs	r2, #4
 80152d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80152d2:	4b03      	ldr	r3, [pc, #12]	; (80152e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	370c      	adds	r7, #12
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr
 80152e0:	2000016c 	.word	0x2000016c

080152e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	4603      	mov	r3, r0
 80152ec:	6039      	str	r1, [r7, #0]
 80152ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152f0:	79fb      	ldrb	r3, [r7, #7]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d105      	bne.n	8015302 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80152f6:	683a      	ldr	r2, [r7, #0]
 80152f8:	4907      	ldr	r1, [pc, #28]	; (8015318 <USBD_FS_ProductStrDescriptor+0x34>)
 80152fa:	4808      	ldr	r0, [pc, #32]	; (801531c <USBD_FS_ProductStrDescriptor+0x38>)
 80152fc:	f7f2 fc22 	bl	8007b44 <USBD_GetString>
 8015300:	e004      	b.n	801530c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015302:	683a      	ldr	r2, [r7, #0]
 8015304:	4904      	ldr	r1, [pc, #16]	; (8015318 <USBD_FS_ProductStrDescriptor+0x34>)
 8015306:	4805      	ldr	r0, [pc, #20]	; (801531c <USBD_FS_ProductStrDescriptor+0x38>)
 8015308:	f7f2 fc1c 	bl	8007b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 801530c:	4b02      	ldr	r3, [pc, #8]	; (8015318 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801530e:	4618      	mov	r0, r3
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	200082f8 	.word	0x200082f8
 801531c:	0801872c 	.word	0x0801872c

08015320 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
 8015326:	4603      	mov	r3, r0
 8015328:	6039      	str	r1, [r7, #0]
 801532a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801532c:	683a      	ldr	r2, [r7, #0]
 801532e:	4904      	ldr	r1, [pc, #16]	; (8015340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015330:	4804      	ldr	r0, [pc, #16]	; (8015344 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015332:	f7f2 fc07 	bl	8007b44 <USBD_GetString>
  return USBD_StrDesc;
 8015336:	4b02      	ldr	r3, [pc, #8]	; (8015340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015338:	4618      	mov	r0, r3
 801533a:	3708      	adds	r7, #8
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}
 8015340:	200082f8 	.word	0x200082f8
 8015344:	08018744 	.word	0x08018744

08015348 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	4603      	mov	r3, r0
 8015350:	6039      	str	r1, [r7, #0]
 8015352:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	221a      	movs	r2, #26
 8015358:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801535a:	f000 f843 	bl	80153e4 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 801535e:	4b02      	ldr	r3, [pc, #8]	; (8015368 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015360:	4618      	mov	r0, r3
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}
 8015368:	20000170 	.word	0x20000170

0801536c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	4603      	mov	r3, r0
 8015374:	6039      	str	r1, [r7, #0]
 8015376:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015378:	79fb      	ldrb	r3, [r7, #7]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d105      	bne.n	801538a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801537e:	683a      	ldr	r2, [r7, #0]
 8015380:	4907      	ldr	r1, [pc, #28]	; (80153a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015382:	4808      	ldr	r0, [pc, #32]	; (80153a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015384:	f7f2 fbde 	bl	8007b44 <USBD_GetString>
 8015388:	e004      	b.n	8015394 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801538a:	683a      	ldr	r2, [r7, #0]
 801538c:	4904      	ldr	r1, [pc, #16]	; (80153a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801538e:	4805      	ldr	r0, [pc, #20]	; (80153a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015390:	f7f2 fbd8 	bl	8007b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015394:	4b02      	ldr	r3, [pc, #8]	; (80153a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015396:	4618      	mov	r0, r3
 8015398:	3708      	adds	r7, #8
 801539a:	46bd      	mov	sp, r7
 801539c:	bd80      	pop	{r7, pc}
 801539e:	bf00      	nop
 80153a0:	200082f8 	.word	0x200082f8
 80153a4:	08018754 	.word	0x08018754

080153a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	4603      	mov	r3, r0
 80153b0:	6039      	str	r1, [r7, #0]
 80153b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153b4:	79fb      	ldrb	r3, [r7, #7]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d105      	bne.n	80153c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153ba:	683a      	ldr	r2, [r7, #0]
 80153bc:	4907      	ldr	r1, [pc, #28]	; (80153dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153be:	4808      	ldr	r0, [pc, #32]	; (80153e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153c0:	f7f2 fbc0 	bl	8007b44 <USBD_GetString>
 80153c4:	e004      	b.n	80153d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153c6:	683a      	ldr	r2, [r7, #0]
 80153c8:	4904      	ldr	r1, [pc, #16]	; (80153dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153ca:	4805      	ldr	r0, [pc, #20]	; (80153e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153cc:	f7f2 fbba 	bl	8007b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153d0:	4b02      	ldr	r3, [pc, #8]	; (80153dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3708      	adds	r7, #8
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	200082f8 	.word	0x200082f8
 80153e0:	08018760 	.word	0x08018760

080153e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153ea:	4b0f      	ldr	r3, [pc, #60]	; (8015428 <Get_SerialNum+0x44>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80153f0:	4b0e      	ldr	r3, [pc, #56]	; (801542c <Get_SerialNum+0x48>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80153f6:	4b0e      	ldr	r3, [pc, #56]	; (8015430 <Get_SerialNum+0x4c>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80153fc:	68fa      	ldr	r2, [r7, #12]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	4413      	add	r3, r2
 8015402:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d009      	beq.n	801541e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801540a:	2208      	movs	r2, #8
 801540c:	4909      	ldr	r1, [pc, #36]	; (8015434 <Get_SerialNum+0x50>)
 801540e:	68f8      	ldr	r0, [r7, #12]
 8015410:	f000 f814 	bl	801543c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015414:	2204      	movs	r2, #4
 8015416:	4908      	ldr	r1, [pc, #32]	; (8015438 <Get_SerialNum+0x54>)
 8015418:	68b8      	ldr	r0, [r7, #8]
 801541a:	f000 f80f 	bl	801543c <IntToUnicode>
  }
}
 801541e:	bf00      	nop
 8015420:	3710      	adds	r7, #16
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
 8015426:	bf00      	nop
 8015428:	1fff7a10 	.word	0x1fff7a10
 801542c:	1fff7a14 	.word	0x1fff7a14
 8015430:	1fff7a18 	.word	0x1fff7a18
 8015434:	20000172 	.word	0x20000172
 8015438:	20000182 	.word	0x20000182

0801543c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801543c:	b480      	push	{r7}
 801543e:	b087      	sub	sp, #28
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	4613      	mov	r3, r2
 8015448:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801544a:	2300      	movs	r3, #0
 801544c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801544e:	2300      	movs	r3, #0
 8015450:	75fb      	strb	r3, [r7, #23]
 8015452:	e027      	b.n	80154a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	0f1b      	lsrs	r3, r3, #28
 8015458:	2b09      	cmp	r3, #9
 801545a:	d80b      	bhi.n	8015474 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	0f1b      	lsrs	r3, r3, #28
 8015460:	b2da      	uxtb	r2, r3
 8015462:	7dfb      	ldrb	r3, [r7, #23]
 8015464:	005b      	lsls	r3, r3, #1
 8015466:	4619      	mov	r1, r3
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	440b      	add	r3, r1
 801546c:	3230      	adds	r2, #48	; 0x30
 801546e:	b2d2      	uxtb	r2, r2
 8015470:	701a      	strb	r2, [r3, #0]
 8015472:	e00a      	b.n	801548a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	0f1b      	lsrs	r3, r3, #28
 8015478:	b2da      	uxtb	r2, r3
 801547a:	7dfb      	ldrb	r3, [r7, #23]
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	4619      	mov	r1, r3
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	440b      	add	r3, r1
 8015484:	3237      	adds	r2, #55	; 0x37
 8015486:	b2d2      	uxtb	r2, r2
 8015488:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	011b      	lsls	r3, r3, #4
 801548e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015490:	7dfb      	ldrb	r3, [r7, #23]
 8015492:	005b      	lsls	r3, r3, #1
 8015494:	3301      	adds	r3, #1
 8015496:	68ba      	ldr	r2, [r7, #8]
 8015498:	4413      	add	r3, r2
 801549a:	2200      	movs	r2, #0
 801549c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801549e:	7dfb      	ldrb	r3, [r7, #23]
 80154a0:	3301      	adds	r3, #1
 80154a2:	75fb      	strb	r3, [r7, #23]
 80154a4:	7dfa      	ldrb	r2, [r7, #23]
 80154a6:	79fb      	ldrb	r3, [r7, #7]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d3d3      	bcc.n	8015454 <IntToUnicode+0x18>
  }
}
 80154ac:	bf00      	nop
 80154ae:	371c      	adds	r7, #28
 80154b0:	46bd      	mov	sp, r7
 80154b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b6:	4770      	bx	lr

080154b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80154b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80154f0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80154bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80154be:	e003      	b.n	80154c8 <LoopCopyDataInit>

080154c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80154c0:	4b0c      	ldr	r3, [pc, #48]	; (80154f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80154c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80154c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80154c6:	3104      	adds	r1, #4

080154c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80154c8:	480b      	ldr	r0, [pc, #44]	; (80154f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80154ca:	4b0c      	ldr	r3, [pc, #48]	; (80154fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80154cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80154ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80154d0:	d3f6      	bcc.n	80154c0 <CopyDataInit>
  ldr  r2, =_sbss
 80154d2:	4a0b      	ldr	r2, [pc, #44]	; (8015500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80154d4:	e002      	b.n	80154dc <LoopFillZerobss>

080154d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80154d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80154d8:	f842 3b04 	str.w	r3, [r2], #4

080154dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80154dc:	4b09      	ldr	r3, [pc, #36]	; (8015504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80154de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80154e0:	d3f9      	bcc.n	80154d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80154e2:	f7fe fdad 	bl	8014040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80154e6:	f000 f811 	bl	801550c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80154ea:	f7fe fbe3 	bl	8013cb4 <main>
  bx  lr    
 80154ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80154f0:	2002ffff 	.word	0x2002ffff
  ldr  r3, =_sidata
 80154f4:	08018984 	.word	0x08018984
  ldr  r0, =_sdata
 80154f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80154fc:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8015500:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8015504:	200084fc 	.word	0x200084fc

08015508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015508:	e7fe      	b.n	8015508 <ADC_IRQHandler>
	...

0801550c <__libc_init_array>:
 801550c:	b570      	push	{r4, r5, r6, lr}
 801550e:	4e0d      	ldr	r6, [pc, #52]	; (8015544 <__libc_init_array+0x38>)
 8015510:	4c0d      	ldr	r4, [pc, #52]	; (8015548 <__libc_init_array+0x3c>)
 8015512:	1ba4      	subs	r4, r4, r6
 8015514:	10a4      	asrs	r4, r4, #2
 8015516:	2500      	movs	r5, #0
 8015518:	42a5      	cmp	r5, r4
 801551a:	d109      	bne.n	8015530 <__libc_init_array+0x24>
 801551c:	4e0b      	ldr	r6, [pc, #44]	; (801554c <__libc_init_array+0x40>)
 801551e:	4c0c      	ldr	r4, [pc, #48]	; (8015550 <__libc_init_array+0x44>)
 8015520:	f000 ffc6 	bl	80164b0 <_init>
 8015524:	1ba4      	subs	r4, r4, r6
 8015526:	10a4      	asrs	r4, r4, #2
 8015528:	2500      	movs	r5, #0
 801552a:	42a5      	cmp	r5, r4
 801552c:	d105      	bne.n	801553a <__libc_init_array+0x2e>
 801552e:	bd70      	pop	{r4, r5, r6, pc}
 8015530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015534:	4798      	blx	r3
 8015536:	3501      	adds	r5, #1
 8015538:	e7ee      	b.n	8015518 <__libc_init_array+0xc>
 801553a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801553e:	4798      	blx	r3
 8015540:	3501      	adds	r5, #1
 8015542:	e7f2      	b.n	801552a <__libc_init_array+0x1e>
 8015544:	0801897c 	.word	0x0801897c
 8015548:	0801897c 	.word	0x0801897c
 801554c:	0801897c 	.word	0x0801897c
 8015550:	08018980 	.word	0x08018980

08015554 <malloc>:
 8015554:	4b02      	ldr	r3, [pc, #8]	; (8015560 <malloc+0xc>)
 8015556:	4601      	mov	r1, r0
 8015558:	6818      	ldr	r0, [r3, #0]
 801555a:	f000 b87b 	b.w	8015654 <_malloc_r>
 801555e:	bf00      	nop
 8015560:	2000018c 	.word	0x2000018c

08015564 <free>:
 8015564:	4b02      	ldr	r3, [pc, #8]	; (8015570 <free+0xc>)
 8015566:	4601      	mov	r1, r0
 8015568:	6818      	ldr	r0, [r3, #0]
 801556a:	f000 b825 	b.w	80155b8 <_free_r>
 801556e:	bf00      	nop
 8015570:	2000018c 	.word	0x2000018c

08015574 <memcmp>:
 8015574:	b530      	push	{r4, r5, lr}
 8015576:	2400      	movs	r4, #0
 8015578:	42a2      	cmp	r2, r4
 801557a:	d101      	bne.n	8015580 <memcmp+0xc>
 801557c:	2000      	movs	r0, #0
 801557e:	e007      	b.n	8015590 <memcmp+0x1c>
 8015580:	5d03      	ldrb	r3, [r0, r4]
 8015582:	3401      	adds	r4, #1
 8015584:	190d      	adds	r5, r1, r4
 8015586:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801558a:	42ab      	cmp	r3, r5
 801558c:	d0f4      	beq.n	8015578 <memcmp+0x4>
 801558e:	1b58      	subs	r0, r3, r5
 8015590:	bd30      	pop	{r4, r5, pc}

08015592 <memcpy>:
 8015592:	b510      	push	{r4, lr}
 8015594:	1e43      	subs	r3, r0, #1
 8015596:	440a      	add	r2, r1
 8015598:	4291      	cmp	r1, r2
 801559a:	d100      	bne.n	801559e <memcpy+0xc>
 801559c:	bd10      	pop	{r4, pc}
 801559e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155a6:	e7f7      	b.n	8015598 <memcpy+0x6>

080155a8 <memset>:
 80155a8:	4402      	add	r2, r0
 80155aa:	4603      	mov	r3, r0
 80155ac:	4293      	cmp	r3, r2
 80155ae:	d100      	bne.n	80155b2 <memset+0xa>
 80155b0:	4770      	bx	lr
 80155b2:	f803 1b01 	strb.w	r1, [r3], #1
 80155b6:	e7f9      	b.n	80155ac <memset+0x4>

080155b8 <_free_r>:
 80155b8:	b538      	push	{r3, r4, r5, lr}
 80155ba:	4605      	mov	r5, r0
 80155bc:	2900      	cmp	r1, #0
 80155be:	d045      	beq.n	801564c <_free_r+0x94>
 80155c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155c4:	1f0c      	subs	r4, r1, #4
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	bfb8      	it	lt
 80155ca:	18e4      	addlt	r4, r4, r3
 80155cc:	f000 fbfa 	bl	8015dc4 <__malloc_lock>
 80155d0:	4a1f      	ldr	r2, [pc, #124]	; (8015650 <_free_r+0x98>)
 80155d2:	6813      	ldr	r3, [r2, #0]
 80155d4:	4610      	mov	r0, r2
 80155d6:	b933      	cbnz	r3, 80155e6 <_free_r+0x2e>
 80155d8:	6063      	str	r3, [r4, #4]
 80155da:	6014      	str	r4, [r2, #0]
 80155dc:	4628      	mov	r0, r5
 80155de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155e2:	f000 bbf0 	b.w	8015dc6 <__malloc_unlock>
 80155e6:	42a3      	cmp	r3, r4
 80155e8:	d90c      	bls.n	8015604 <_free_r+0x4c>
 80155ea:	6821      	ldr	r1, [r4, #0]
 80155ec:	1862      	adds	r2, r4, r1
 80155ee:	4293      	cmp	r3, r2
 80155f0:	bf04      	itt	eq
 80155f2:	681a      	ldreq	r2, [r3, #0]
 80155f4:	685b      	ldreq	r3, [r3, #4]
 80155f6:	6063      	str	r3, [r4, #4]
 80155f8:	bf04      	itt	eq
 80155fa:	1852      	addeq	r2, r2, r1
 80155fc:	6022      	streq	r2, [r4, #0]
 80155fe:	6004      	str	r4, [r0, #0]
 8015600:	e7ec      	b.n	80155dc <_free_r+0x24>
 8015602:	4613      	mov	r3, r2
 8015604:	685a      	ldr	r2, [r3, #4]
 8015606:	b10a      	cbz	r2, 801560c <_free_r+0x54>
 8015608:	42a2      	cmp	r2, r4
 801560a:	d9fa      	bls.n	8015602 <_free_r+0x4a>
 801560c:	6819      	ldr	r1, [r3, #0]
 801560e:	1858      	adds	r0, r3, r1
 8015610:	42a0      	cmp	r0, r4
 8015612:	d10b      	bne.n	801562c <_free_r+0x74>
 8015614:	6820      	ldr	r0, [r4, #0]
 8015616:	4401      	add	r1, r0
 8015618:	1858      	adds	r0, r3, r1
 801561a:	4282      	cmp	r2, r0
 801561c:	6019      	str	r1, [r3, #0]
 801561e:	d1dd      	bne.n	80155dc <_free_r+0x24>
 8015620:	6810      	ldr	r0, [r2, #0]
 8015622:	6852      	ldr	r2, [r2, #4]
 8015624:	605a      	str	r2, [r3, #4]
 8015626:	4401      	add	r1, r0
 8015628:	6019      	str	r1, [r3, #0]
 801562a:	e7d7      	b.n	80155dc <_free_r+0x24>
 801562c:	d902      	bls.n	8015634 <_free_r+0x7c>
 801562e:	230c      	movs	r3, #12
 8015630:	602b      	str	r3, [r5, #0]
 8015632:	e7d3      	b.n	80155dc <_free_r+0x24>
 8015634:	6820      	ldr	r0, [r4, #0]
 8015636:	1821      	adds	r1, r4, r0
 8015638:	428a      	cmp	r2, r1
 801563a:	bf04      	itt	eq
 801563c:	6811      	ldreq	r1, [r2, #0]
 801563e:	6852      	ldreq	r2, [r2, #4]
 8015640:	6062      	str	r2, [r4, #4]
 8015642:	bf04      	itt	eq
 8015644:	1809      	addeq	r1, r1, r0
 8015646:	6021      	streq	r1, [r4, #0]
 8015648:	605c      	str	r4, [r3, #4]
 801564a:	e7c7      	b.n	80155dc <_free_r+0x24>
 801564c:	bd38      	pop	{r3, r4, r5, pc}
 801564e:	bf00      	nop
 8015650:	20000394 	.word	0x20000394

08015654 <_malloc_r>:
 8015654:	b570      	push	{r4, r5, r6, lr}
 8015656:	1ccd      	adds	r5, r1, #3
 8015658:	f025 0503 	bic.w	r5, r5, #3
 801565c:	3508      	adds	r5, #8
 801565e:	2d0c      	cmp	r5, #12
 8015660:	bf38      	it	cc
 8015662:	250c      	movcc	r5, #12
 8015664:	2d00      	cmp	r5, #0
 8015666:	4606      	mov	r6, r0
 8015668:	db01      	blt.n	801566e <_malloc_r+0x1a>
 801566a:	42a9      	cmp	r1, r5
 801566c:	d903      	bls.n	8015676 <_malloc_r+0x22>
 801566e:	230c      	movs	r3, #12
 8015670:	6033      	str	r3, [r6, #0]
 8015672:	2000      	movs	r0, #0
 8015674:	bd70      	pop	{r4, r5, r6, pc}
 8015676:	f000 fba5 	bl	8015dc4 <__malloc_lock>
 801567a:	4a21      	ldr	r2, [pc, #132]	; (8015700 <_malloc_r+0xac>)
 801567c:	6814      	ldr	r4, [r2, #0]
 801567e:	4621      	mov	r1, r4
 8015680:	b991      	cbnz	r1, 80156a8 <_malloc_r+0x54>
 8015682:	4c20      	ldr	r4, [pc, #128]	; (8015704 <_malloc_r+0xb0>)
 8015684:	6823      	ldr	r3, [r4, #0]
 8015686:	b91b      	cbnz	r3, 8015690 <_malloc_r+0x3c>
 8015688:	4630      	mov	r0, r6
 801568a:	f000 f8ed 	bl	8015868 <_sbrk_r>
 801568e:	6020      	str	r0, [r4, #0]
 8015690:	4629      	mov	r1, r5
 8015692:	4630      	mov	r0, r6
 8015694:	f000 f8e8 	bl	8015868 <_sbrk_r>
 8015698:	1c43      	adds	r3, r0, #1
 801569a:	d124      	bne.n	80156e6 <_malloc_r+0x92>
 801569c:	230c      	movs	r3, #12
 801569e:	6033      	str	r3, [r6, #0]
 80156a0:	4630      	mov	r0, r6
 80156a2:	f000 fb90 	bl	8015dc6 <__malloc_unlock>
 80156a6:	e7e4      	b.n	8015672 <_malloc_r+0x1e>
 80156a8:	680b      	ldr	r3, [r1, #0]
 80156aa:	1b5b      	subs	r3, r3, r5
 80156ac:	d418      	bmi.n	80156e0 <_malloc_r+0x8c>
 80156ae:	2b0b      	cmp	r3, #11
 80156b0:	d90f      	bls.n	80156d2 <_malloc_r+0x7e>
 80156b2:	600b      	str	r3, [r1, #0]
 80156b4:	50cd      	str	r5, [r1, r3]
 80156b6:	18cc      	adds	r4, r1, r3
 80156b8:	4630      	mov	r0, r6
 80156ba:	f000 fb84 	bl	8015dc6 <__malloc_unlock>
 80156be:	f104 000b 	add.w	r0, r4, #11
 80156c2:	1d23      	adds	r3, r4, #4
 80156c4:	f020 0007 	bic.w	r0, r0, #7
 80156c8:	1ac3      	subs	r3, r0, r3
 80156ca:	d0d3      	beq.n	8015674 <_malloc_r+0x20>
 80156cc:	425a      	negs	r2, r3
 80156ce:	50e2      	str	r2, [r4, r3]
 80156d0:	e7d0      	b.n	8015674 <_malloc_r+0x20>
 80156d2:	428c      	cmp	r4, r1
 80156d4:	684b      	ldr	r3, [r1, #4]
 80156d6:	bf16      	itet	ne
 80156d8:	6063      	strne	r3, [r4, #4]
 80156da:	6013      	streq	r3, [r2, #0]
 80156dc:	460c      	movne	r4, r1
 80156de:	e7eb      	b.n	80156b8 <_malloc_r+0x64>
 80156e0:	460c      	mov	r4, r1
 80156e2:	6849      	ldr	r1, [r1, #4]
 80156e4:	e7cc      	b.n	8015680 <_malloc_r+0x2c>
 80156e6:	1cc4      	adds	r4, r0, #3
 80156e8:	f024 0403 	bic.w	r4, r4, #3
 80156ec:	42a0      	cmp	r0, r4
 80156ee:	d005      	beq.n	80156fc <_malloc_r+0xa8>
 80156f0:	1a21      	subs	r1, r4, r0
 80156f2:	4630      	mov	r0, r6
 80156f4:	f000 f8b8 	bl	8015868 <_sbrk_r>
 80156f8:	3001      	adds	r0, #1
 80156fa:	d0cf      	beq.n	801569c <_malloc_r+0x48>
 80156fc:	6025      	str	r5, [r4, #0]
 80156fe:	e7db      	b.n	80156b8 <_malloc_r+0x64>
 8015700:	20000394 	.word	0x20000394
 8015704:	20000398 	.word	0x20000398

08015708 <iprintf>:
 8015708:	b40f      	push	{r0, r1, r2, r3}
 801570a:	4b0a      	ldr	r3, [pc, #40]	; (8015734 <iprintf+0x2c>)
 801570c:	b513      	push	{r0, r1, r4, lr}
 801570e:	681c      	ldr	r4, [r3, #0]
 8015710:	b124      	cbz	r4, 801571c <iprintf+0x14>
 8015712:	69a3      	ldr	r3, [r4, #24]
 8015714:	b913      	cbnz	r3, 801571c <iprintf+0x14>
 8015716:	4620      	mov	r0, r4
 8015718:	f000 fa66 	bl	8015be8 <__sinit>
 801571c:	ab05      	add	r3, sp, #20
 801571e:	9a04      	ldr	r2, [sp, #16]
 8015720:	68a1      	ldr	r1, [r4, #8]
 8015722:	9301      	str	r3, [sp, #4]
 8015724:	4620      	mov	r0, r4
 8015726:	f000 fb79 	bl	8015e1c <_vfiprintf_r>
 801572a:	b002      	add	sp, #8
 801572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015730:	b004      	add	sp, #16
 8015732:	4770      	bx	lr
 8015734:	2000018c 	.word	0x2000018c

08015738 <_puts_r>:
 8015738:	b570      	push	{r4, r5, r6, lr}
 801573a:	460e      	mov	r6, r1
 801573c:	4605      	mov	r5, r0
 801573e:	b118      	cbz	r0, 8015748 <_puts_r+0x10>
 8015740:	6983      	ldr	r3, [r0, #24]
 8015742:	b90b      	cbnz	r3, 8015748 <_puts_r+0x10>
 8015744:	f000 fa50 	bl	8015be8 <__sinit>
 8015748:	69ab      	ldr	r3, [r5, #24]
 801574a:	68ac      	ldr	r4, [r5, #8]
 801574c:	b913      	cbnz	r3, 8015754 <_puts_r+0x1c>
 801574e:	4628      	mov	r0, r5
 8015750:	f000 fa4a 	bl	8015be8 <__sinit>
 8015754:	4b23      	ldr	r3, [pc, #140]	; (80157e4 <_puts_r+0xac>)
 8015756:	429c      	cmp	r4, r3
 8015758:	d117      	bne.n	801578a <_puts_r+0x52>
 801575a:	686c      	ldr	r4, [r5, #4]
 801575c:	89a3      	ldrh	r3, [r4, #12]
 801575e:	071b      	lsls	r3, r3, #28
 8015760:	d51d      	bpl.n	801579e <_puts_r+0x66>
 8015762:	6923      	ldr	r3, [r4, #16]
 8015764:	b1db      	cbz	r3, 801579e <_puts_r+0x66>
 8015766:	3e01      	subs	r6, #1
 8015768:	68a3      	ldr	r3, [r4, #8]
 801576a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801576e:	3b01      	subs	r3, #1
 8015770:	60a3      	str	r3, [r4, #8]
 8015772:	b9e9      	cbnz	r1, 80157b0 <_puts_r+0x78>
 8015774:	2b00      	cmp	r3, #0
 8015776:	da2e      	bge.n	80157d6 <_puts_r+0x9e>
 8015778:	4622      	mov	r2, r4
 801577a:	210a      	movs	r1, #10
 801577c:	4628      	mov	r0, r5
 801577e:	f000 f883 	bl	8015888 <__swbuf_r>
 8015782:	3001      	adds	r0, #1
 8015784:	d011      	beq.n	80157aa <_puts_r+0x72>
 8015786:	200a      	movs	r0, #10
 8015788:	e011      	b.n	80157ae <_puts_r+0x76>
 801578a:	4b17      	ldr	r3, [pc, #92]	; (80157e8 <_puts_r+0xb0>)
 801578c:	429c      	cmp	r4, r3
 801578e:	d101      	bne.n	8015794 <_puts_r+0x5c>
 8015790:	68ac      	ldr	r4, [r5, #8]
 8015792:	e7e3      	b.n	801575c <_puts_r+0x24>
 8015794:	4b15      	ldr	r3, [pc, #84]	; (80157ec <_puts_r+0xb4>)
 8015796:	429c      	cmp	r4, r3
 8015798:	bf08      	it	eq
 801579a:	68ec      	ldreq	r4, [r5, #12]
 801579c:	e7de      	b.n	801575c <_puts_r+0x24>
 801579e:	4621      	mov	r1, r4
 80157a0:	4628      	mov	r0, r5
 80157a2:	f000 f8c3 	bl	801592c <__swsetup_r>
 80157a6:	2800      	cmp	r0, #0
 80157a8:	d0dd      	beq.n	8015766 <_puts_r+0x2e>
 80157aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157ae:	bd70      	pop	{r4, r5, r6, pc}
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	da04      	bge.n	80157be <_puts_r+0x86>
 80157b4:	69a2      	ldr	r2, [r4, #24]
 80157b6:	429a      	cmp	r2, r3
 80157b8:	dc06      	bgt.n	80157c8 <_puts_r+0x90>
 80157ba:	290a      	cmp	r1, #10
 80157bc:	d004      	beq.n	80157c8 <_puts_r+0x90>
 80157be:	6823      	ldr	r3, [r4, #0]
 80157c0:	1c5a      	adds	r2, r3, #1
 80157c2:	6022      	str	r2, [r4, #0]
 80157c4:	7019      	strb	r1, [r3, #0]
 80157c6:	e7cf      	b.n	8015768 <_puts_r+0x30>
 80157c8:	4622      	mov	r2, r4
 80157ca:	4628      	mov	r0, r5
 80157cc:	f000 f85c 	bl	8015888 <__swbuf_r>
 80157d0:	3001      	adds	r0, #1
 80157d2:	d1c9      	bne.n	8015768 <_puts_r+0x30>
 80157d4:	e7e9      	b.n	80157aa <_puts_r+0x72>
 80157d6:	6823      	ldr	r3, [r4, #0]
 80157d8:	200a      	movs	r0, #10
 80157da:	1c5a      	adds	r2, r3, #1
 80157dc:	6022      	str	r2, [r4, #0]
 80157de:	7018      	strb	r0, [r3, #0]
 80157e0:	e7e5      	b.n	80157ae <_puts_r+0x76>
 80157e2:	bf00      	nop
 80157e4:	08018900 	.word	0x08018900
 80157e8:	08018920 	.word	0x08018920
 80157ec:	080188e0 	.word	0x080188e0

080157f0 <puts>:
 80157f0:	4b02      	ldr	r3, [pc, #8]	; (80157fc <puts+0xc>)
 80157f2:	4601      	mov	r1, r0
 80157f4:	6818      	ldr	r0, [r3, #0]
 80157f6:	f7ff bf9f 	b.w	8015738 <_puts_r>
 80157fa:	bf00      	nop
 80157fc:	2000018c 	.word	0x2000018c

08015800 <rand>:
 8015800:	b538      	push	{r3, r4, r5, lr}
 8015802:	4b13      	ldr	r3, [pc, #76]	; (8015850 <rand+0x50>)
 8015804:	681c      	ldr	r4, [r3, #0]
 8015806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015808:	b97b      	cbnz	r3, 801582a <rand+0x2a>
 801580a:	2018      	movs	r0, #24
 801580c:	f7ff fea2 	bl	8015554 <malloc>
 8015810:	4a10      	ldr	r2, [pc, #64]	; (8015854 <rand+0x54>)
 8015812:	4b11      	ldr	r3, [pc, #68]	; (8015858 <rand+0x58>)
 8015814:	63a0      	str	r0, [r4, #56]	; 0x38
 8015816:	e9c0 2300 	strd	r2, r3, [r0]
 801581a:	4b10      	ldr	r3, [pc, #64]	; (801585c <rand+0x5c>)
 801581c:	6083      	str	r3, [r0, #8]
 801581e:	230b      	movs	r3, #11
 8015820:	8183      	strh	r3, [r0, #12]
 8015822:	2201      	movs	r2, #1
 8015824:	2300      	movs	r3, #0
 8015826:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801582a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801582c:	480c      	ldr	r0, [pc, #48]	; (8015860 <rand+0x60>)
 801582e:	690a      	ldr	r2, [r1, #16]
 8015830:	694b      	ldr	r3, [r1, #20]
 8015832:	4c0c      	ldr	r4, [pc, #48]	; (8015864 <rand+0x64>)
 8015834:	4350      	muls	r0, r2
 8015836:	fb04 0003 	mla	r0, r4, r3, r0
 801583a:	fba2 2304 	umull	r2, r3, r2, r4
 801583e:	4403      	add	r3, r0
 8015840:	1c54      	adds	r4, r2, #1
 8015842:	f143 0500 	adc.w	r5, r3, #0
 8015846:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801584a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801584e:	bd38      	pop	{r3, r4, r5, pc}
 8015850:	2000018c 	.word	0x2000018c
 8015854:	abcd330e 	.word	0xabcd330e
 8015858:	e66d1234 	.word	0xe66d1234
 801585c:	0005deec 	.word	0x0005deec
 8015860:	5851f42d 	.word	0x5851f42d
 8015864:	4c957f2d 	.word	0x4c957f2d

08015868 <_sbrk_r>:
 8015868:	b538      	push	{r3, r4, r5, lr}
 801586a:	4c06      	ldr	r4, [pc, #24]	; (8015884 <_sbrk_r+0x1c>)
 801586c:	2300      	movs	r3, #0
 801586e:	4605      	mov	r5, r0
 8015870:	4608      	mov	r0, r1
 8015872:	6023      	str	r3, [r4, #0]
 8015874:	f7fe fbb6 	bl	8013fe4 <_sbrk>
 8015878:	1c43      	adds	r3, r0, #1
 801587a:	d102      	bne.n	8015882 <_sbrk_r+0x1a>
 801587c:	6823      	ldr	r3, [r4, #0]
 801587e:	b103      	cbz	r3, 8015882 <_sbrk_r+0x1a>
 8015880:	602b      	str	r3, [r5, #0]
 8015882:	bd38      	pop	{r3, r4, r5, pc}
 8015884:	200084f8 	.word	0x200084f8

08015888 <__swbuf_r>:
 8015888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801588a:	460e      	mov	r6, r1
 801588c:	4614      	mov	r4, r2
 801588e:	4605      	mov	r5, r0
 8015890:	b118      	cbz	r0, 801589a <__swbuf_r+0x12>
 8015892:	6983      	ldr	r3, [r0, #24]
 8015894:	b90b      	cbnz	r3, 801589a <__swbuf_r+0x12>
 8015896:	f000 f9a7 	bl	8015be8 <__sinit>
 801589a:	4b21      	ldr	r3, [pc, #132]	; (8015920 <__swbuf_r+0x98>)
 801589c:	429c      	cmp	r4, r3
 801589e:	d12a      	bne.n	80158f6 <__swbuf_r+0x6e>
 80158a0:	686c      	ldr	r4, [r5, #4]
 80158a2:	69a3      	ldr	r3, [r4, #24]
 80158a4:	60a3      	str	r3, [r4, #8]
 80158a6:	89a3      	ldrh	r3, [r4, #12]
 80158a8:	071a      	lsls	r2, r3, #28
 80158aa:	d52e      	bpl.n	801590a <__swbuf_r+0x82>
 80158ac:	6923      	ldr	r3, [r4, #16]
 80158ae:	b363      	cbz	r3, 801590a <__swbuf_r+0x82>
 80158b0:	6923      	ldr	r3, [r4, #16]
 80158b2:	6820      	ldr	r0, [r4, #0]
 80158b4:	1ac0      	subs	r0, r0, r3
 80158b6:	6963      	ldr	r3, [r4, #20]
 80158b8:	b2f6      	uxtb	r6, r6
 80158ba:	4283      	cmp	r3, r0
 80158bc:	4637      	mov	r7, r6
 80158be:	dc04      	bgt.n	80158ca <__swbuf_r+0x42>
 80158c0:	4621      	mov	r1, r4
 80158c2:	4628      	mov	r0, r5
 80158c4:	f000 f926 	bl	8015b14 <_fflush_r>
 80158c8:	bb28      	cbnz	r0, 8015916 <__swbuf_r+0x8e>
 80158ca:	68a3      	ldr	r3, [r4, #8]
 80158cc:	3b01      	subs	r3, #1
 80158ce:	60a3      	str	r3, [r4, #8]
 80158d0:	6823      	ldr	r3, [r4, #0]
 80158d2:	1c5a      	adds	r2, r3, #1
 80158d4:	6022      	str	r2, [r4, #0]
 80158d6:	701e      	strb	r6, [r3, #0]
 80158d8:	6963      	ldr	r3, [r4, #20]
 80158da:	3001      	adds	r0, #1
 80158dc:	4283      	cmp	r3, r0
 80158de:	d004      	beq.n	80158ea <__swbuf_r+0x62>
 80158e0:	89a3      	ldrh	r3, [r4, #12]
 80158e2:	07db      	lsls	r3, r3, #31
 80158e4:	d519      	bpl.n	801591a <__swbuf_r+0x92>
 80158e6:	2e0a      	cmp	r6, #10
 80158e8:	d117      	bne.n	801591a <__swbuf_r+0x92>
 80158ea:	4621      	mov	r1, r4
 80158ec:	4628      	mov	r0, r5
 80158ee:	f000 f911 	bl	8015b14 <_fflush_r>
 80158f2:	b190      	cbz	r0, 801591a <__swbuf_r+0x92>
 80158f4:	e00f      	b.n	8015916 <__swbuf_r+0x8e>
 80158f6:	4b0b      	ldr	r3, [pc, #44]	; (8015924 <__swbuf_r+0x9c>)
 80158f8:	429c      	cmp	r4, r3
 80158fa:	d101      	bne.n	8015900 <__swbuf_r+0x78>
 80158fc:	68ac      	ldr	r4, [r5, #8]
 80158fe:	e7d0      	b.n	80158a2 <__swbuf_r+0x1a>
 8015900:	4b09      	ldr	r3, [pc, #36]	; (8015928 <__swbuf_r+0xa0>)
 8015902:	429c      	cmp	r4, r3
 8015904:	bf08      	it	eq
 8015906:	68ec      	ldreq	r4, [r5, #12]
 8015908:	e7cb      	b.n	80158a2 <__swbuf_r+0x1a>
 801590a:	4621      	mov	r1, r4
 801590c:	4628      	mov	r0, r5
 801590e:	f000 f80d 	bl	801592c <__swsetup_r>
 8015912:	2800      	cmp	r0, #0
 8015914:	d0cc      	beq.n	80158b0 <__swbuf_r+0x28>
 8015916:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801591a:	4638      	mov	r0, r7
 801591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801591e:	bf00      	nop
 8015920:	08018900 	.word	0x08018900
 8015924:	08018920 	.word	0x08018920
 8015928:	080188e0 	.word	0x080188e0

0801592c <__swsetup_r>:
 801592c:	4b32      	ldr	r3, [pc, #200]	; (80159f8 <__swsetup_r+0xcc>)
 801592e:	b570      	push	{r4, r5, r6, lr}
 8015930:	681d      	ldr	r5, [r3, #0]
 8015932:	4606      	mov	r6, r0
 8015934:	460c      	mov	r4, r1
 8015936:	b125      	cbz	r5, 8015942 <__swsetup_r+0x16>
 8015938:	69ab      	ldr	r3, [r5, #24]
 801593a:	b913      	cbnz	r3, 8015942 <__swsetup_r+0x16>
 801593c:	4628      	mov	r0, r5
 801593e:	f000 f953 	bl	8015be8 <__sinit>
 8015942:	4b2e      	ldr	r3, [pc, #184]	; (80159fc <__swsetup_r+0xd0>)
 8015944:	429c      	cmp	r4, r3
 8015946:	d10f      	bne.n	8015968 <__swsetup_r+0x3c>
 8015948:	686c      	ldr	r4, [r5, #4]
 801594a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801594e:	b29a      	uxth	r2, r3
 8015950:	0715      	lsls	r5, r2, #28
 8015952:	d42c      	bmi.n	80159ae <__swsetup_r+0x82>
 8015954:	06d0      	lsls	r0, r2, #27
 8015956:	d411      	bmi.n	801597c <__swsetup_r+0x50>
 8015958:	2209      	movs	r2, #9
 801595a:	6032      	str	r2, [r6, #0]
 801595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015960:	81a3      	strh	r3, [r4, #12]
 8015962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015966:	e03e      	b.n	80159e6 <__swsetup_r+0xba>
 8015968:	4b25      	ldr	r3, [pc, #148]	; (8015a00 <__swsetup_r+0xd4>)
 801596a:	429c      	cmp	r4, r3
 801596c:	d101      	bne.n	8015972 <__swsetup_r+0x46>
 801596e:	68ac      	ldr	r4, [r5, #8]
 8015970:	e7eb      	b.n	801594a <__swsetup_r+0x1e>
 8015972:	4b24      	ldr	r3, [pc, #144]	; (8015a04 <__swsetup_r+0xd8>)
 8015974:	429c      	cmp	r4, r3
 8015976:	bf08      	it	eq
 8015978:	68ec      	ldreq	r4, [r5, #12]
 801597a:	e7e6      	b.n	801594a <__swsetup_r+0x1e>
 801597c:	0751      	lsls	r1, r2, #29
 801597e:	d512      	bpl.n	80159a6 <__swsetup_r+0x7a>
 8015980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015982:	b141      	cbz	r1, 8015996 <__swsetup_r+0x6a>
 8015984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015988:	4299      	cmp	r1, r3
 801598a:	d002      	beq.n	8015992 <__swsetup_r+0x66>
 801598c:	4630      	mov	r0, r6
 801598e:	f7ff fe13 	bl	80155b8 <_free_r>
 8015992:	2300      	movs	r3, #0
 8015994:	6363      	str	r3, [r4, #52]	; 0x34
 8015996:	89a3      	ldrh	r3, [r4, #12]
 8015998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801599c:	81a3      	strh	r3, [r4, #12]
 801599e:	2300      	movs	r3, #0
 80159a0:	6063      	str	r3, [r4, #4]
 80159a2:	6923      	ldr	r3, [r4, #16]
 80159a4:	6023      	str	r3, [r4, #0]
 80159a6:	89a3      	ldrh	r3, [r4, #12]
 80159a8:	f043 0308 	orr.w	r3, r3, #8
 80159ac:	81a3      	strh	r3, [r4, #12]
 80159ae:	6923      	ldr	r3, [r4, #16]
 80159b0:	b94b      	cbnz	r3, 80159c6 <__swsetup_r+0x9a>
 80159b2:	89a3      	ldrh	r3, [r4, #12]
 80159b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80159b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80159bc:	d003      	beq.n	80159c6 <__swsetup_r+0x9a>
 80159be:	4621      	mov	r1, r4
 80159c0:	4630      	mov	r0, r6
 80159c2:	f000 f9bf 	bl	8015d44 <__smakebuf_r>
 80159c6:	89a2      	ldrh	r2, [r4, #12]
 80159c8:	f012 0301 	ands.w	r3, r2, #1
 80159cc:	d00c      	beq.n	80159e8 <__swsetup_r+0xbc>
 80159ce:	2300      	movs	r3, #0
 80159d0:	60a3      	str	r3, [r4, #8]
 80159d2:	6963      	ldr	r3, [r4, #20]
 80159d4:	425b      	negs	r3, r3
 80159d6:	61a3      	str	r3, [r4, #24]
 80159d8:	6923      	ldr	r3, [r4, #16]
 80159da:	b953      	cbnz	r3, 80159f2 <__swsetup_r+0xc6>
 80159dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80159e4:	d1ba      	bne.n	801595c <__swsetup_r+0x30>
 80159e6:	bd70      	pop	{r4, r5, r6, pc}
 80159e8:	0792      	lsls	r2, r2, #30
 80159ea:	bf58      	it	pl
 80159ec:	6963      	ldrpl	r3, [r4, #20]
 80159ee:	60a3      	str	r3, [r4, #8]
 80159f0:	e7f2      	b.n	80159d8 <__swsetup_r+0xac>
 80159f2:	2000      	movs	r0, #0
 80159f4:	e7f7      	b.n	80159e6 <__swsetup_r+0xba>
 80159f6:	bf00      	nop
 80159f8:	2000018c 	.word	0x2000018c
 80159fc:	08018900 	.word	0x08018900
 8015a00:	08018920 	.word	0x08018920
 8015a04:	080188e0 	.word	0x080188e0

08015a08 <__sflush_r>:
 8015a08:	898a      	ldrh	r2, [r1, #12]
 8015a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0e:	4605      	mov	r5, r0
 8015a10:	0710      	lsls	r0, r2, #28
 8015a12:	460c      	mov	r4, r1
 8015a14:	d458      	bmi.n	8015ac8 <__sflush_r+0xc0>
 8015a16:	684b      	ldr	r3, [r1, #4]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dc05      	bgt.n	8015a28 <__sflush_r+0x20>
 8015a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	dc02      	bgt.n	8015a28 <__sflush_r+0x20>
 8015a22:	2000      	movs	r0, #0
 8015a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a2a:	2e00      	cmp	r6, #0
 8015a2c:	d0f9      	beq.n	8015a22 <__sflush_r+0x1a>
 8015a2e:	2300      	movs	r3, #0
 8015a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015a34:	682f      	ldr	r7, [r5, #0]
 8015a36:	6a21      	ldr	r1, [r4, #32]
 8015a38:	602b      	str	r3, [r5, #0]
 8015a3a:	d032      	beq.n	8015aa2 <__sflush_r+0x9a>
 8015a3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015a3e:	89a3      	ldrh	r3, [r4, #12]
 8015a40:	075a      	lsls	r2, r3, #29
 8015a42:	d505      	bpl.n	8015a50 <__sflush_r+0x48>
 8015a44:	6863      	ldr	r3, [r4, #4]
 8015a46:	1ac0      	subs	r0, r0, r3
 8015a48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a4a:	b10b      	cbz	r3, 8015a50 <__sflush_r+0x48>
 8015a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015a4e:	1ac0      	subs	r0, r0, r3
 8015a50:	2300      	movs	r3, #0
 8015a52:	4602      	mov	r2, r0
 8015a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a56:	6a21      	ldr	r1, [r4, #32]
 8015a58:	4628      	mov	r0, r5
 8015a5a:	47b0      	blx	r6
 8015a5c:	1c43      	adds	r3, r0, #1
 8015a5e:	89a3      	ldrh	r3, [r4, #12]
 8015a60:	d106      	bne.n	8015a70 <__sflush_r+0x68>
 8015a62:	6829      	ldr	r1, [r5, #0]
 8015a64:	291d      	cmp	r1, #29
 8015a66:	d848      	bhi.n	8015afa <__sflush_r+0xf2>
 8015a68:	4a29      	ldr	r2, [pc, #164]	; (8015b10 <__sflush_r+0x108>)
 8015a6a:	40ca      	lsrs	r2, r1
 8015a6c:	07d6      	lsls	r6, r2, #31
 8015a6e:	d544      	bpl.n	8015afa <__sflush_r+0xf2>
 8015a70:	2200      	movs	r2, #0
 8015a72:	6062      	str	r2, [r4, #4]
 8015a74:	04d9      	lsls	r1, r3, #19
 8015a76:	6922      	ldr	r2, [r4, #16]
 8015a78:	6022      	str	r2, [r4, #0]
 8015a7a:	d504      	bpl.n	8015a86 <__sflush_r+0x7e>
 8015a7c:	1c42      	adds	r2, r0, #1
 8015a7e:	d101      	bne.n	8015a84 <__sflush_r+0x7c>
 8015a80:	682b      	ldr	r3, [r5, #0]
 8015a82:	b903      	cbnz	r3, 8015a86 <__sflush_r+0x7e>
 8015a84:	6560      	str	r0, [r4, #84]	; 0x54
 8015a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a88:	602f      	str	r7, [r5, #0]
 8015a8a:	2900      	cmp	r1, #0
 8015a8c:	d0c9      	beq.n	8015a22 <__sflush_r+0x1a>
 8015a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a92:	4299      	cmp	r1, r3
 8015a94:	d002      	beq.n	8015a9c <__sflush_r+0x94>
 8015a96:	4628      	mov	r0, r5
 8015a98:	f7ff fd8e 	bl	80155b8 <_free_r>
 8015a9c:	2000      	movs	r0, #0
 8015a9e:	6360      	str	r0, [r4, #52]	; 0x34
 8015aa0:	e7c0      	b.n	8015a24 <__sflush_r+0x1c>
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	4628      	mov	r0, r5
 8015aa6:	47b0      	blx	r6
 8015aa8:	1c41      	adds	r1, r0, #1
 8015aaa:	d1c8      	bne.n	8015a3e <__sflush_r+0x36>
 8015aac:	682b      	ldr	r3, [r5, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d0c5      	beq.n	8015a3e <__sflush_r+0x36>
 8015ab2:	2b1d      	cmp	r3, #29
 8015ab4:	d001      	beq.n	8015aba <__sflush_r+0xb2>
 8015ab6:	2b16      	cmp	r3, #22
 8015ab8:	d101      	bne.n	8015abe <__sflush_r+0xb6>
 8015aba:	602f      	str	r7, [r5, #0]
 8015abc:	e7b1      	b.n	8015a22 <__sflush_r+0x1a>
 8015abe:	89a3      	ldrh	r3, [r4, #12]
 8015ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ac4:	81a3      	strh	r3, [r4, #12]
 8015ac6:	e7ad      	b.n	8015a24 <__sflush_r+0x1c>
 8015ac8:	690f      	ldr	r7, [r1, #16]
 8015aca:	2f00      	cmp	r7, #0
 8015acc:	d0a9      	beq.n	8015a22 <__sflush_r+0x1a>
 8015ace:	0793      	lsls	r3, r2, #30
 8015ad0:	680e      	ldr	r6, [r1, #0]
 8015ad2:	bf08      	it	eq
 8015ad4:	694b      	ldreq	r3, [r1, #20]
 8015ad6:	600f      	str	r7, [r1, #0]
 8015ad8:	bf18      	it	ne
 8015ada:	2300      	movne	r3, #0
 8015adc:	eba6 0807 	sub.w	r8, r6, r7
 8015ae0:	608b      	str	r3, [r1, #8]
 8015ae2:	f1b8 0f00 	cmp.w	r8, #0
 8015ae6:	dd9c      	ble.n	8015a22 <__sflush_r+0x1a>
 8015ae8:	4643      	mov	r3, r8
 8015aea:	463a      	mov	r2, r7
 8015aec:	6a21      	ldr	r1, [r4, #32]
 8015aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015af0:	4628      	mov	r0, r5
 8015af2:	47b0      	blx	r6
 8015af4:	2800      	cmp	r0, #0
 8015af6:	dc06      	bgt.n	8015b06 <__sflush_r+0xfe>
 8015af8:	89a3      	ldrh	r3, [r4, #12]
 8015afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015afe:	81a3      	strh	r3, [r4, #12]
 8015b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b04:	e78e      	b.n	8015a24 <__sflush_r+0x1c>
 8015b06:	4407      	add	r7, r0
 8015b08:	eba8 0800 	sub.w	r8, r8, r0
 8015b0c:	e7e9      	b.n	8015ae2 <__sflush_r+0xda>
 8015b0e:	bf00      	nop
 8015b10:	20400001 	.word	0x20400001

08015b14 <_fflush_r>:
 8015b14:	b538      	push	{r3, r4, r5, lr}
 8015b16:	690b      	ldr	r3, [r1, #16]
 8015b18:	4605      	mov	r5, r0
 8015b1a:	460c      	mov	r4, r1
 8015b1c:	b1db      	cbz	r3, 8015b56 <_fflush_r+0x42>
 8015b1e:	b118      	cbz	r0, 8015b28 <_fflush_r+0x14>
 8015b20:	6983      	ldr	r3, [r0, #24]
 8015b22:	b90b      	cbnz	r3, 8015b28 <_fflush_r+0x14>
 8015b24:	f000 f860 	bl	8015be8 <__sinit>
 8015b28:	4b0c      	ldr	r3, [pc, #48]	; (8015b5c <_fflush_r+0x48>)
 8015b2a:	429c      	cmp	r4, r3
 8015b2c:	d109      	bne.n	8015b42 <_fflush_r+0x2e>
 8015b2e:	686c      	ldr	r4, [r5, #4]
 8015b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b34:	b17b      	cbz	r3, 8015b56 <_fflush_r+0x42>
 8015b36:	4621      	mov	r1, r4
 8015b38:	4628      	mov	r0, r5
 8015b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b3e:	f7ff bf63 	b.w	8015a08 <__sflush_r>
 8015b42:	4b07      	ldr	r3, [pc, #28]	; (8015b60 <_fflush_r+0x4c>)
 8015b44:	429c      	cmp	r4, r3
 8015b46:	d101      	bne.n	8015b4c <_fflush_r+0x38>
 8015b48:	68ac      	ldr	r4, [r5, #8]
 8015b4a:	e7f1      	b.n	8015b30 <_fflush_r+0x1c>
 8015b4c:	4b05      	ldr	r3, [pc, #20]	; (8015b64 <_fflush_r+0x50>)
 8015b4e:	429c      	cmp	r4, r3
 8015b50:	bf08      	it	eq
 8015b52:	68ec      	ldreq	r4, [r5, #12]
 8015b54:	e7ec      	b.n	8015b30 <_fflush_r+0x1c>
 8015b56:	2000      	movs	r0, #0
 8015b58:	bd38      	pop	{r3, r4, r5, pc}
 8015b5a:	bf00      	nop
 8015b5c:	08018900 	.word	0x08018900
 8015b60:	08018920 	.word	0x08018920
 8015b64:	080188e0 	.word	0x080188e0

08015b68 <std>:
 8015b68:	2300      	movs	r3, #0
 8015b6a:	b510      	push	{r4, lr}
 8015b6c:	4604      	mov	r4, r0
 8015b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8015b72:	6083      	str	r3, [r0, #8]
 8015b74:	8181      	strh	r1, [r0, #12]
 8015b76:	6643      	str	r3, [r0, #100]	; 0x64
 8015b78:	81c2      	strh	r2, [r0, #14]
 8015b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015b7e:	6183      	str	r3, [r0, #24]
 8015b80:	4619      	mov	r1, r3
 8015b82:	2208      	movs	r2, #8
 8015b84:	305c      	adds	r0, #92	; 0x5c
 8015b86:	f7ff fd0f 	bl	80155a8 <memset>
 8015b8a:	4b05      	ldr	r3, [pc, #20]	; (8015ba0 <std+0x38>)
 8015b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8015b8e:	4b05      	ldr	r3, [pc, #20]	; (8015ba4 <std+0x3c>)
 8015b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8015b92:	4b05      	ldr	r3, [pc, #20]	; (8015ba8 <std+0x40>)
 8015b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b96:	4b05      	ldr	r3, [pc, #20]	; (8015bac <std+0x44>)
 8015b98:	6224      	str	r4, [r4, #32]
 8015b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8015b9c:	bd10      	pop	{r4, pc}
 8015b9e:	bf00      	nop
 8015ba0:	08016359 	.word	0x08016359
 8015ba4:	0801637b 	.word	0x0801637b
 8015ba8:	080163b3 	.word	0x080163b3
 8015bac:	080163d7 	.word	0x080163d7

08015bb0 <_cleanup_r>:
 8015bb0:	4901      	ldr	r1, [pc, #4]	; (8015bb8 <_cleanup_r+0x8>)
 8015bb2:	f000 b885 	b.w	8015cc0 <_fwalk_reent>
 8015bb6:	bf00      	nop
 8015bb8:	08015b15 	.word	0x08015b15

08015bbc <__sfmoreglue>:
 8015bbc:	b570      	push	{r4, r5, r6, lr}
 8015bbe:	1e4a      	subs	r2, r1, #1
 8015bc0:	2568      	movs	r5, #104	; 0x68
 8015bc2:	4355      	muls	r5, r2
 8015bc4:	460e      	mov	r6, r1
 8015bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015bca:	f7ff fd43 	bl	8015654 <_malloc_r>
 8015bce:	4604      	mov	r4, r0
 8015bd0:	b140      	cbz	r0, 8015be4 <__sfmoreglue+0x28>
 8015bd2:	2100      	movs	r1, #0
 8015bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8015bd8:	300c      	adds	r0, #12
 8015bda:	60a0      	str	r0, [r4, #8]
 8015bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015be0:	f7ff fce2 	bl	80155a8 <memset>
 8015be4:	4620      	mov	r0, r4
 8015be6:	bd70      	pop	{r4, r5, r6, pc}

08015be8 <__sinit>:
 8015be8:	6983      	ldr	r3, [r0, #24]
 8015bea:	b510      	push	{r4, lr}
 8015bec:	4604      	mov	r4, r0
 8015bee:	bb33      	cbnz	r3, 8015c3e <__sinit+0x56>
 8015bf0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015bf4:	6503      	str	r3, [r0, #80]	; 0x50
 8015bf6:	4b12      	ldr	r3, [pc, #72]	; (8015c40 <__sinit+0x58>)
 8015bf8:	4a12      	ldr	r2, [pc, #72]	; (8015c44 <__sinit+0x5c>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	6282      	str	r2, [r0, #40]	; 0x28
 8015bfe:	4298      	cmp	r0, r3
 8015c00:	bf04      	itt	eq
 8015c02:	2301      	moveq	r3, #1
 8015c04:	6183      	streq	r3, [r0, #24]
 8015c06:	f000 f81f 	bl	8015c48 <__sfp>
 8015c0a:	6060      	str	r0, [r4, #4]
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	f000 f81b 	bl	8015c48 <__sfp>
 8015c12:	60a0      	str	r0, [r4, #8]
 8015c14:	4620      	mov	r0, r4
 8015c16:	f000 f817 	bl	8015c48 <__sfp>
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	60e0      	str	r0, [r4, #12]
 8015c1e:	2104      	movs	r1, #4
 8015c20:	6860      	ldr	r0, [r4, #4]
 8015c22:	f7ff ffa1 	bl	8015b68 <std>
 8015c26:	2201      	movs	r2, #1
 8015c28:	2109      	movs	r1, #9
 8015c2a:	68a0      	ldr	r0, [r4, #8]
 8015c2c:	f7ff ff9c 	bl	8015b68 <std>
 8015c30:	2202      	movs	r2, #2
 8015c32:	2112      	movs	r1, #18
 8015c34:	68e0      	ldr	r0, [r4, #12]
 8015c36:	f7ff ff97 	bl	8015b68 <std>
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	61a3      	str	r3, [r4, #24]
 8015c3e:	bd10      	pop	{r4, pc}
 8015c40:	080188dc 	.word	0x080188dc
 8015c44:	08015bb1 	.word	0x08015bb1

08015c48 <__sfp>:
 8015c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c4a:	4b1b      	ldr	r3, [pc, #108]	; (8015cb8 <__sfp+0x70>)
 8015c4c:	681e      	ldr	r6, [r3, #0]
 8015c4e:	69b3      	ldr	r3, [r6, #24]
 8015c50:	4607      	mov	r7, r0
 8015c52:	b913      	cbnz	r3, 8015c5a <__sfp+0x12>
 8015c54:	4630      	mov	r0, r6
 8015c56:	f7ff ffc7 	bl	8015be8 <__sinit>
 8015c5a:	3648      	adds	r6, #72	; 0x48
 8015c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015c60:	3b01      	subs	r3, #1
 8015c62:	d503      	bpl.n	8015c6c <__sfp+0x24>
 8015c64:	6833      	ldr	r3, [r6, #0]
 8015c66:	b133      	cbz	r3, 8015c76 <__sfp+0x2e>
 8015c68:	6836      	ldr	r6, [r6, #0]
 8015c6a:	e7f7      	b.n	8015c5c <__sfp+0x14>
 8015c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015c70:	b16d      	cbz	r5, 8015c8e <__sfp+0x46>
 8015c72:	3468      	adds	r4, #104	; 0x68
 8015c74:	e7f4      	b.n	8015c60 <__sfp+0x18>
 8015c76:	2104      	movs	r1, #4
 8015c78:	4638      	mov	r0, r7
 8015c7a:	f7ff ff9f 	bl	8015bbc <__sfmoreglue>
 8015c7e:	6030      	str	r0, [r6, #0]
 8015c80:	2800      	cmp	r0, #0
 8015c82:	d1f1      	bne.n	8015c68 <__sfp+0x20>
 8015c84:	230c      	movs	r3, #12
 8015c86:	603b      	str	r3, [r7, #0]
 8015c88:	4604      	mov	r4, r0
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c8e:	4b0b      	ldr	r3, [pc, #44]	; (8015cbc <__sfp+0x74>)
 8015c90:	6665      	str	r5, [r4, #100]	; 0x64
 8015c92:	e9c4 5500 	strd	r5, r5, [r4]
 8015c96:	60a5      	str	r5, [r4, #8]
 8015c98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015c9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015ca0:	2208      	movs	r2, #8
 8015ca2:	4629      	mov	r1, r5
 8015ca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015ca8:	f7ff fc7e 	bl	80155a8 <memset>
 8015cac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015cb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015cb4:	e7e9      	b.n	8015c8a <__sfp+0x42>
 8015cb6:	bf00      	nop
 8015cb8:	080188dc 	.word	0x080188dc
 8015cbc:	ffff0001 	.word	0xffff0001

08015cc0 <_fwalk_reent>:
 8015cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cc4:	4680      	mov	r8, r0
 8015cc6:	4689      	mov	r9, r1
 8015cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015ccc:	2600      	movs	r6, #0
 8015cce:	b914      	cbnz	r4, 8015cd6 <_fwalk_reent+0x16>
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015cda:	3f01      	subs	r7, #1
 8015cdc:	d501      	bpl.n	8015ce2 <_fwalk_reent+0x22>
 8015cde:	6824      	ldr	r4, [r4, #0]
 8015ce0:	e7f5      	b.n	8015cce <_fwalk_reent+0xe>
 8015ce2:	89ab      	ldrh	r3, [r5, #12]
 8015ce4:	2b01      	cmp	r3, #1
 8015ce6:	d907      	bls.n	8015cf8 <_fwalk_reent+0x38>
 8015ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015cec:	3301      	adds	r3, #1
 8015cee:	d003      	beq.n	8015cf8 <_fwalk_reent+0x38>
 8015cf0:	4629      	mov	r1, r5
 8015cf2:	4640      	mov	r0, r8
 8015cf4:	47c8      	blx	r9
 8015cf6:	4306      	orrs	r6, r0
 8015cf8:	3568      	adds	r5, #104	; 0x68
 8015cfa:	e7ee      	b.n	8015cda <_fwalk_reent+0x1a>

08015cfc <__swhatbuf_r>:
 8015cfc:	b570      	push	{r4, r5, r6, lr}
 8015cfe:	460e      	mov	r6, r1
 8015d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d04:	2900      	cmp	r1, #0
 8015d06:	b096      	sub	sp, #88	; 0x58
 8015d08:	4614      	mov	r4, r2
 8015d0a:	461d      	mov	r5, r3
 8015d0c:	da07      	bge.n	8015d1e <__swhatbuf_r+0x22>
 8015d0e:	2300      	movs	r3, #0
 8015d10:	602b      	str	r3, [r5, #0]
 8015d12:	89b3      	ldrh	r3, [r6, #12]
 8015d14:	061a      	lsls	r2, r3, #24
 8015d16:	d410      	bmi.n	8015d3a <__swhatbuf_r+0x3e>
 8015d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d1c:	e00e      	b.n	8015d3c <__swhatbuf_r+0x40>
 8015d1e:	466a      	mov	r2, sp
 8015d20:	f000 fb80 	bl	8016424 <_fstat_r>
 8015d24:	2800      	cmp	r0, #0
 8015d26:	dbf2      	blt.n	8015d0e <__swhatbuf_r+0x12>
 8015d28:	9a01      	ldr	r2, [sp, #4]
 8015d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d32:	425a      	negs	r2, r3
 8015d34:	415a      	adcs	r2, r3
 8015d36:	602a      	str	r2, [r5, #0]
 8015d38:	e7ee      	b.n	8015d18 <__swhatbuf_r+0x1c>
 8015d3a:	2340      	movs	r3, #64	; 0x40
 8015d3c:	2000      	movs	r0, #0
 8015d3e:	6023      	str	r3, [r4, #0]
 8015d40:	b016      	add	sp, #88	; 0x58
 8015d42:	bd70      	pop	{r4, r5, r6, pc}

08015d44 <__smakebuf_r>:
 8015d44:	898b      	ldrh	r3, [r1, #12]
 8015d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d48:	079d      	lsls	r5, r3, #30
 8015d4a:	4606      	mov	r6, r0
 8015d4c:	460c      	mov	r4, r1
 8015d4e:	d507      	bpl.n	8015d60 <__smakebuf_r+0x1c>
 8015d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d54:	6023      	str	r3, [r4, #0]
 8015d56:	6123      	str	r3, [r4, #16]
 8015d58:	2301      	movs	r3, #1
 8015d5a:	6163      	str	r3, [r4, #20]
 8015d5c:	b002      	add	sp, #8
 8015d5e:	bd70      	pop	{r4, r5, r6, pc}
 8015d60:	ab01      	add	r3, sp, #4
 8015d62:	466a      	mov	r2, sp
 8015d64:	f7ff ffca 	bl	8015cfc <__swhatbuf_r>
 8015d68:	9900      	ldr	r1, [sp, #0]
 8015d6a:	4605      	mov	r5, r0
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	f7ff fc71 	bl	8015654 <_malloc_r>
 8015d72:	b948      	cbnz	r0, 8015d88 <__smakebuf_r+0x44>
 8015d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d78:	059a      	lsls	r2, r3, #22
 8015d7a:	d4ef      	bmi.n	8015d5c <__smakebuf_r+0x18>
 8015d7c:	f023 0303 	bic.w	r3, r3, #3
 8015d80:	f043 0302 	orr.w	r3, r3, #2
 8015d84:	81a3      	strh	r3, [r4, #12]
 8015d86:	e7e3      	b.n	8015d50 <__smakebuf_r+0xc>
 8015d88:	4b0d      	ldr	r3, [pc, #52]	; (8015dc0 <__smakebuf_r+0x7c>)
 8015d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d8c:	89a3      	ldrh	r3, [r4, #12]
 8015d8e:	6020      	str	r0, [r4, #0]
 8015d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d94:	81a3      	strh	r3, [r4, #12]
 8015d96:	9b00      	ldr	r3, [sp, #0]
 8015d98:	6163      	str	r3, [r4, #20]
 8015d9a:	9b01      	ldr	r3, [sp, #4]
 8015d9c:	6120      	str	r0, [r4, #16]
 8015d9e:	b15b      	cbz	r3, 8015db8 <__smakebuf_r+0x74>
 8015da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015da4:	4630      	mov	r0, r6
 8015da6:	f000 fb4f 	bl	8016448 <_isatty_r>
 8015daa:	b128      	cbz	r0, 8015db8 <__smakebuf_r+0x74>
 8015dac:	89a3      	ldrh	r3, [r4, #12]
 8015dae:	f023 0303 	bic.w	r3, r3, #3
 8015db2:	f043 0301 	orr.w	r3, r3, #1
 8015db6:	81a3      	strh	r3, [r4, #12]
 8015db8:	89a3      	ldrh	r3, [r4, #12]
 8015dba:	431d      	orrs	r5, r3
 8015dbc:	81a5      	strh	r5, [r4, #12]
 8015dbe:	e7cd      	b.n	8015d5c <__smakebuf_r+0x18>
 8015dc0:	08015bb1 	.word	0x08015bb1

08015dc4 <__malloc_lock>:
 8015dc4:	4770      	bx	lr

08015dc6 <__malloc_unlock>:
 8015dc6:	4770      	bx	lr

08015dc8 <__sfputc_r>:
 8015dc8:	6893      	ldr	r3, [r2, #8]
 8015dca:	3b01      	subs	r3, #1
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	b410      	push	{r4}
 8015dd0:	6093      	str	r3, [r2, #8]
 8015dd2:	da08      	bge.n	8015de6 <__sfputc_r+0x1e>
 8015dd4:	6994      	ldr	r4, [r2, #24]
 8015dd6:	42a3      	cmp	r3, r4
 8015dd8:	db01      	blt.n	8015dde <__sfputc_r+0x16>
 8015dda:	290a      	cmp	r1, #10
 8015ddc:	d103      	bne.n	8015de6 <__sfputc_r+0x1e>
 8015dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015de2:	f7ff bd51 	b.w	8015888 <__swbuf_r>
 8015de6:	6813      	ldr	r3, [r2, #0]
 8015de8:	1c58      	adds	r0, r3, #1
 8015dea:	6010      	str	r0, [r2, #0]
 8015dec:	7019      	strb	r1, [r3, #0]
 8015dee:	4608      	mov	r0, r1
 8015df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015df4:	4770      	bx	lr

08015df6 <__sfputs_r>:
 8015df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015df8:	4606      	mov	r6, r0
 8015dfa:	460f      	mov	r7, r1
 8015dfc:	4614      	mov	r4, r2
 8015dfe:	18d5      	adds	r5, r2, r3
 8015e00:	42ac      	cmp	r4, r5
 8015e02:	d101      	bne.n	8015e08 <__sfputs_r+0x12>
 8015e04:	2000      	movs	r0, #0
 8015e06:	e007      	b.n	8015e18 <__sfputs_r+0x22>
 8015e08:	463a      	mov	r2, r7
 8015e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e0e:	4630      	mov	r0, r6
 8015e10:	f7ff ffda 	bl	8015dc8 <__sfputc_r>
 8015e14:	1c43      	adds	r3, r0, #1
 8015e16:	d1f3      	bne.n	8015e00 <__sfputs_r+0xa>
 8015e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015e1c <_vfiprintf_r>:
 8015e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e20:	460c      	mov	r4, r1
 8015e22:	b09d      	sub	sp, #116	; 0x74
 8015e24:	4617      	mov	r7, r2
 8015e26:	461d      	mov	r5, r3
 8015e28:	4606      	mov	r6, r0
 8015e2a:	b118      	cbz	r0, 8015e34 <_vfiprintf_r+0x18>
 8015e2c:	6983      	ldr	r3, [r0, #24]
 8015e2e:	b90b      	cbnz	r3, 8015e34 <_vfiprintf_r+0x18>
 8015e30:	f7ff feda 	bl	8015be8 <__sinit>
 8015e34:	4b7c      	ldr	r3, [pc, #496]	; (8016028 <_vfiprintf_r+0x20c>)
 8015e36:	429c      	cmp	r4, r3
 8015e38:	d158      	bne.n	8015eec <_vfiprintf_r+0xd0>
 8015e3a:	6874      	ldr	r4, [r6, #4]
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	0718      	lsls	r0, r3, #28
 8015e40:	d55e      	bpl.n	8015f00 <_vfiprintf_r+0xe4>
 8015e42:	6923      	ldr	r3, [r4, #16]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d05b      	beq.n	8015f00 <_vfiprintf_r+0xe4>
 8015e48:	2300      	movs	r3, #0
 8015e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8015e4c:	2320      	movs	r3, #32
 8015e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e52:	2330      	movs	r3, #48	; 0x30
 8015e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e58:	9503      	str	r5, [sp, #12]
 8015e5a:	f04f 0b01 	mov.w	fp, #1
 8015e5e:	46b8      	mov	r8, r7
 8015e60:	4645      	mov	r5, r8
 8015e62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015e66:	b10b      	cbz	r3, 8015e6c <_vfiprintf_r+0x50>
 8015e68:	2b25      	cmp	r3, #37	; 0x25
 8015e6a:	d154      	bne.n	8015f16 <_vfiprintf_r+0xfa>
 8015e6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015e70:	d00b      	beq.n	8015e8a <_vfiprintf_r+0x6e>
 8015e72:	4653      	mov	r3, sl
 8015e74:	463a      	mov	r2, r7
 8015e76:	4621      	mov	r1, r4
 8015e78:	4630      	mov	r0, r6
 8015e7a:	f7ff ffbc 	bl	8015df6 <__sfputs_r>
 8015e7e:	3001      	adds	r0, #1
 8015e80:	f000 80c2 	beq.w	8016008 <_vfiprintf_r+0x1ec>
 8015e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e86:	4453      	add	r3, sl
 8015e88:	9309      	str	r3, [sp, #36]	; 0x24
 8015e8a:	f898 3000 	ldrb.w	r3, [r8]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	f000 80ba 	beq.w	8016008 <_vfiprintf_r+0x1ec>
 8015e94:	2300      	movs	r3, #0
 8015e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e9e:	9304      	str	r3, [sp, #16]
 8015ea0:	9307      	str	r3, [sp, #28]
 8015ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8015ea8:	46a8      	mov	r8, r5
 8015eaa:	2205      	movs	r2, #5
 8015eac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015eb0:	485e      	ldr	r0, [pc, #376]	; (801602c <_vfiprintf_r+0x210>)
 8015eb2:	f7ea f99d 	bl	80001f0 <memchr>
 8015eb6:	9b04      	ldr	r3, [sp, #16]
 8015eb8:	bb78      	cbnz	r0, 8015f1a <_vfiprintf_r+0xfe>
 8015eba:	06d9      	lsls	r1, r3, #27
 8015ebc:	bf44      	itt	mi
 8015ebe:	2220      	movmi	r2, #32
 8015ec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015ec4:	071a      	lsls	r2, r3, #28
 8015ec6:	bf44      	itt	mi
 8015ec8:	222b      	movmi	r2, #43	; 0x2b
 8015eca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015ece:	782a      	ldrb	r2, [r5, #0]
 8015ed0:	2a2a      	cmp	r2, #42	; 0x2a
 8015ed2:	d02a      	beq.n	8015f2a <_vfiprintf_r+0x10e>
 8015ed4:	9a07      	ldr	r2, [sp, #28]
 8015ed6:	46a8      	mov	r8, r5
 8015ed8:	2000      	movs	r0, #0
 8015eda:	250a      	movs	r5, #10
 8015edc:	4641      	mov	r1, r8
 8015ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ee2:	3b30      	subs	r3, #48	; 0x30
 8015ee4:	2b09      	cmp	r3, #9
 8015ee6:	d969      	bls.n	8015fbc <_vfiprintf_r+0x1a0>
 8015ee8:	b360      	cbz	r0, 8015f44 <_vfiprintf_r+0x128>
 8015eea:	e024      	b.n	8015f36 <_vfiprintf_r+0x11a>
 8015eec:	4b50      	ldr	r3, [pc, #320]	; (8016030 <_vfiprintf_r+0x214>)
 8015eee:	429c      	cmp	r4, r3
 8015ef0:	d101      	bne.n	8015ef6 <_vfiprintf_r+0xda>
 8015ef2:	68b4      	ldr	r4, [r6, #8]
 8015ef4:	e7a2      	b.n	8015e3c <_vfiprintf_r+0x20>
 8015ef6:	4b4f      	ldr	r3, [pc, #316]	; (8016034 <_vfiprintf_r+0x218>)
 8015ef8:	429c      	cmp	r4, r3
 8015efa:	bf08      	it	eq
 8015efc:	68f4      	ldreq	r4, [r6, #12]
 8015efe:	e79d      	b.n	8015e3c <_vfiprintf_r+0x20>
 8015f00:	4621      	mov	r1, r4
 8015f02:	4630      	mov	r0, r6
 8015f04:	f7ff fd12 	bl	801592c <__swsetup_r>
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	d09d      	beq.n	8015e48 <_vfiprintf_r+0x2c>
 8015f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f10:	b01d      	add	sp, #116	; 0x74
 8015f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f16:	46a8      	mov	r8, r5
 8015f18:	e7a2      	b.n	8015e60 <_vfiprintf_r+0x44>
 8015f1a:	4a44      	ldr	r2, [pc, #272]	; (801602c <_vfiprintf_r+0x210>)
 8015f1c:	1a80      	subs	r0, r0, r2
 8015f1e:	fa0b f000 	lsl.w	r0, fp, r0
 8015f22:	4318      	orrs	r0, r3
 8015f24:	9004      	str	r0, [sp, #16]
 8015f26:	4645      	mov	r5, r8
 8015f28:	e7be      	b.n	8015ea8 <_vfiprintf_r+0x8c>
 8015f2a:	9a03      	ldr	r2, [sp, #12]
 8015f2c:	1d11      	adds	r1, r2, #4
 8015f2e:	6812      	ldr	r2, [r2, #0]
 8015f30:	9103      	str	r1, [sp, #12]
 8015f32:	2a00      	cmp	r2, #0
 8015f34:	db01      	blt.n	8015f3a <_vfiprintf_r+0x11e>
 8015f36:	9207      	str	r2, [sp, #28]
 8015f38:	e004      	b.n	8015f44 <_vfiprintf_r+0x128>
 8015f3a:	4252      	negs	r2, r2
 8015f3c:	f043 0302 	orr.w	r3, r3, #2
 8015f40:	9207      	str	r2, [sp, #28]
 8015f42:	9304      	str	r3, [sp, #16]
 8015f44:	f898 3000 	ldrb.w	r3, [r8]
 8015f48:	2b2e      	cmp	r3, #46	; 0x2e
 8015f4a:	d10e      	bne.n	8015f6a <_vfiprintf_r+0x14e>
 8015f4c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015f50:	2b2a      	cmp	r3, #42	; 0x2a
 8015f52:	d138      	bne.n	8015fc6 <_vfiprintf_r+0x1aa>
 8015f54:	9b03      	ldr	r3, [sp, #12]
 8015f56:	1d1a      	adds	r2, r3, #4
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	9203      	str	r2, [sp, #12]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	bfb8      	it	lt
 8015f60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015f64:	f108 0802 	add.w	r8, r8, #2
 8015f68:	9305      	str	r3, [sp, #20]
 8015f6a:	4d33      	ldr	r5, [pc, #204]	; (8016038 <_vfiprintf_r+0x21c>)
 8015f6c:	f898 1000 	ldrb.w	r1, [r8]
 8015f70:	2203      	movs	r2, #3
 8015f72:	4628      	mov	r0, r5
 8015f74:	f7ea f93c 	bl	80001f0 <memchr>
 8015f78:	b140      	cbz	r0, 8015f8c <_vfiprintf_r+0x170>
 8015f7a:	2340      	movs	r3, #64	; 0x40
 8015f7c:	1b40      	subs	r0, r0, r5
 8015f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8015f82:	9b04      	ldr	r3, [sp, #16]
 8015f84:	4303      	orrs	r3, r0
 8015f86:	f108 0801 	add.w	r8, r8, #1
 8015f8a:	9304      	str	r3, [sp, #16]
 8015f8c:	f898 1000 	ldrb.w	r1, [r8]
 8015f90:	482a      	ldr	r0, [pc, #168]	; (801603c <_vfiprintf_r+0x220>)
 8015f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f96:	2206      	movs	r2, #6
 8015f98:	f108 0701 	add.w	r7, r8, #1
 8015f9c:	f7ea f928 	bl	80001f0 <memchr>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d037      	beq.n	8016014 <_vfiprintf_r+0x1f8>
 8015fa4:	4b26      	ldr	r3, [pc, #152]	; (8016040 <_vfiprintf_r+0x224>)
 8015fa6:	bb1b      	cbnz	r3, 8015ff0 <_vfiprintf_r+0x1d4>
 8015fa8:	9b03      	ldr	r3, [sp, #12]
 8015faa:	3307      	adds	r3, #7
 8015fac:	f023 0307 	bic.w	r3, r3, #7
 8015fb0:	3308      	adds	r3, #8
 8015fb2:	9303      	str	r3, [sp, #12]
 8015fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fb6:	444b      	add	r3, r9
 8015fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8015fba:	e750      	b.n	8015e5e <_vfiprintf_r+0x42>
 8015fbc:	fb05 3202 	mla	r2, r5, r2, r3
 8015fc0:	2001      	movs	r0, #1
 8015fc2:	4688      	mov	r8, r1
 8015fc4:	e78a      	b.n	8015edc <_vfiprintf_r+0xc0>
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	f108 0801 	add.w	r8, r8, #1
 8015fcc:	9305      	str	r3, [sp, #20]
 8015fce:	4619      	mov	r1, r3
 8015fd0:	250a      	movs	r5, #10
 8015fd2:	4640      	mov	r0, r8
 8015fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fd8:	3a30      	subs	r2, #48	; 0x30
 8015fda:	2a09      	cmp	r2, #9
 8015fdc:	d903      	bls.n	8015fe6 <_vfiprintf_r+0x1ca>
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d0c3      	beq.n	8015f6a <_vfiprintf_r+0x14e>
 8015fe2:	9105      	str	r1, [sp, #20]
 8015fe4:	e7c1      	b.n	8015f6a <_vfiprintf_r+0x14e>
 8015fe6:	fb05 2101 	mla	r1, r5, r1, r2
 8015fea:	2301      	movs	r3, #1
 8015fec:	4680      	mov	r8, r0
 8015fee:	e7f0      	b.n	8015fd2 <_vfiprintf_r+0x1b6>
 8015ff0:	ab03      	add	r3, sp, #12
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	4622      	mov	r2, r4
 8015ff6:	4b13      	ldr	r3, [pc, #76]	; (8016044 <_vfiprintf_r+0x228>)
 8015ff8:	a904      	add	r1, sp, #16
 8015ffa:	4630      	mov	r0, r6
 8015ffc:	f3af 8000 	nop.w
 8016000:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8016004:	4681      	mov	r9, r0
 8016006:	d1d5      	bne.n	8015fb4 <_vfiprintf_r+0x198>
 8016008:	89a3      	ldrh	r3, [r4, #12]
 801600a:	065b      	lsls	r3, r3, #25
 801600c:	f53f af7e 	bmi.w	8015f0c <_vfiprintf_r+0xf0>
 8016010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016012:	e77d      	b.n	8015f10 <_vfiprintf_r+0xf4>
 8016014:	ab03      	add	r3, sp, #12
 8016016:	9300      	str	r3, [sp, #0]
 8016018:	4622      	mov	r2, r4
 801601a:	4b0a      	ldr	r3, [pc, #40]	; (8016044 <_vfiprintf_r+0x228>)
 801601c:	a904      	add	r1, sp, #16
 801601e:	4630      	mov	r0, r6
 8016020:	f000 f888 	bl	8016134 <_printf_i>
 8016024:	e7ec      	b.n	8016000 <_vfiprintf_r+0x1e4>
 8016026:	bf00      	nop
 8016028:	08018900 	.word	0x08018900
 801602c:	08018940 	.word	0x08018940
 8016030:	08018920 	.word	0x08018920
 8016034:	080188e0 	.word	0x080188e0
 8016038:	08018946 	.word	0x08018946
 801603c:	0801894a 	.word	0x0801894a
 8016040:	00000000 	.word	0x00000000
 8016044:	08015df7 	.word	0x08015df7

08016048 <_printf_common>:
 8016048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801604c:	4691      	mov	r9, r2
 801604e:	461f      	mov	r7, r3
 8016050:	688a      	ldr	r2, [r1, #8]
 8016052:	690b      	ldr	r3, [r1, #16]
 8016054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016058:	4293      	cmp	r3, r2
 801605a:	bfb8      	it	lt
 801605c:	4613      	movlt	r3, r2
 801605e:	f8c9 3000 	str.w	r3, [r9]
 8016062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016066:	4606      	mov	r6, r0
 8016068:	460c      	mov	r4, r1
 801606a:	b112      	cbz	r2, 8016072 <_printf_common+0x2a>
 801606c:	3301      	adds	r3, #1
 801606e:	f8c9 3000 	str.w	r3, [r9]
 8016072:	6823      	ldr	r3, [r4, #0]
 8016074:	0699      	lsls	r1, r3, #26
 8016076:	bf42      	ittt	mi
 8016078:	f8d9 3000 	ldrmi.w	r3, [r9]
 801607c:	3302      	addmi	r3, #2
 801607e:	f8c9 3000 	strmi.w	r3, [r9]
 8016082:	6825      	ldr	r5, [r4, #0]
 8016084:	f015 0506 	ands.w	r5, r5, #6
 8016088:	d107      	bne.n	801609a <_printf_common+0x52>
 801608a:	f104 0a19 	add.w	sl, r4, #25
 801608e:	68e3      	ldr	r3, [r4, #12]
 8016090:	f8d9 2000 	ldr.w	r2, [r9]
 8016094:	1a9b      	subs	r3, r3, r2
 8016096:	42ab      	cmp	r3, r5
 8016098:	dc28      	bgt.n	80160ec <_printf_common+0xa4>
 801609a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801609e:	6822      	ldr	r2, [r4, #0]
 80160a0:	3300      	adds	r3, #0
 80160a2:	bf18      	it	ne
 80160a4:	2301      	movne	r3, #1
 80160a6:	0692      	lsls	r2, r2, #26
 80160a8:	d42d      	bmi.n	8016106 <_printf_common+0xbe>
 80160aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80160ae:	4639      	mov	r1, r7
 80160b0:	4630      	mov	r0, r6
 80160b2:	47c0      	blx	r8
 80160b4:	3001      	adds	r0, #1
 80160b6:	d020      	beq.n	80160fa <_printf_common+0xb2>
 80160b8:	6823      	ldr	r3, [r4, #0]
 80160ba:	68e5      	ldr	r5, [r4, #12]
 80160bc:	f8d9 2000 	ldr.w	r2, [r9]
 80160c0:	f003 0306 	and.w	r3, r3, #6
 80160c4:	2b04      	cmp	r3, #4
 80160c6:	bf08      	it	eq
 80160c8:	1aad      	subeq	r5, r5, r2
 80160ca:	68a3      	ldr	r3, [r4, #8]
 80160cc:	6922      	ldr	r2, [r4, #16]
 80160ce:	bf0c      	ite	eq
 80160d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80160d4:	2500      	movne	r5, #0
 80160d6:	4293      	cmp	r3, r2
 80160d8:	bfc4      	itt	gt
 80160da:	1a9b      	subgt	r3, r3, r2
 80160dc:	18ed      	addgt	r5, r5, r3
 80160de:	f04f 0900 	mov.w	r9, #0
 80160e2:	341a      	adds	r4, #26
 80160e4:	454d      	cmp	r5, r9
 80160e6:	d11a      	bne.n	801611e <_printf_common+0xd6>
 80160e8:	2000      	movs	r0, #0
 80160ea:	e008      	b.n	80160fe <_printf_common+0xb6>
 80160ec:	2301      	movs	r3, #1
 80160ee:	4652      	mov	r2, sl
 80160f0:	4639      	mov	r1, r7
 80160f2:	4630      	mov	r0, r6
 80160f4:	47c0      	blx	r8
 80160f6:	3001      	adds	r0, #1
 80160f8:	d103      	bne.n	8016102 <_printf_common+0xba>
 80160fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80160fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016102:	3501      	adds	r5, #1
 8016104:	e7c3      	b.n	801608e <_printf_common+0x46>
 8016106:	18e1      	adds	r1, r4, r3
 8016108:	1c5a      	adds	r2, r3, #1
 801610a:	2030      	movs	r0, #48	; 0x30
 801610c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016110:	4422      	add	r2, r4
 8016112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801611a:	3302      	adds	r3, #2
 801611c:	e7c5      	b.n	80160aa <_printf_common+0x62>
 801611e:	2301      	movs	r3, #1
 8016120:	4622      	mov	r2, r4
 8016122:	4639      	mov	r1, r7
 8016124:	4630      	mov	r0, r6
 8016126:	47c0      	blx	r8
 8016128:	3001      	adds	r0, #1
 801612a:	d0e6      	beq.n	80160fa <_printf_common+0xb2>
 801612c:	f109 0901 	add.w	r9, r9, #1
 8016130:	e7d8      	b.n	80160e4 <_printf_common+0x9c>
	...

08016134 <_printf_i>:
 8016134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016138:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801613c:	460c      	mov	r4, r1
 801613e:	7e09      	ldrb	r1, [r1, #24]
 8016140:	b085      	sub	sp, #20
 8016142:	296e      	cmp	r1, #110	; 0x6e
 8016144:	4617      	mov	r7, r2
 8016146:	4606      	mov	r6, r0
 8016148:	4698      	mov	r8, r3
 801614a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801614c:	f000 80b3 	beq.w	80162b6 <_printf_i+0x182>
 8016150:	d822      	bhi.n	8016198 <_printf_i+0x64>
 8016152:	2963      	cmp	r1, #99	; 0x63
 8016154:	d036      	beq.n	80161c4 <_printf_i+0x90>
 8016156:	d80a      	bhi.n	801616e <_printf_i+0x3a>
 8016158:	2900      	cmp	r1, #0
 801615a:	f000 80b9 	beq.w	80162d0 <_printf_i+0x19c>
 801615e:	2958      	cmp	r1, #88	; 0x58
 8016160:	f000 8083 	beq.w	801626a <_printf_i+0x136>
 8016164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016168:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801616c:	e032      	b.n	80161d4 <_printf_i+0xa0>
 801616e:	2964      	cmp	r1, #100	; 0x64
 8016170:	d001      	beq.n	8016176 <_printf_i+0x42>
 8016172:	2969      	cmp	r1, #105	; 0x69
 8016174:	d1f6      	bne.n	8016164 <_printf_i+0x30>
 8016176:	6820      	ldr	r0, [r4, #0]
 8016178:	6813      	ldr	r3, [r2, #0]
 801617a:	0605      	lsls	r5, r0, #24
 801617c:	f103 0104 	add.w	r1, r3, #4
 8016180:	d52a      	bpl.n	80161d8 <_printf_i+0xa4>
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	6011      	str	r1, [r2, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	da03      	bge.n	8016192 <_printf_i+0x5e>
 801618a:	222d      	movs	r2, #45	; 0x2d
 801618c:	425b      	negs	r3, r3
 801618e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016192:	486f      	ldr	r0, [pc, #444]	; (8016350 <_printf_i+0x21c>)
 8016194:	220a      	movs	r2, #10
 8016196:	e039      	b.n	801620c <_printf_i+0xd8>
 8016198:	2973      	cmp	r1, #115	; 0x73
 801619a:	f000 809d 	beq.w	80162d8 <_printf_i+0x1a4>
 801619e:	d808      	bhi.n	80161b2 <_printf_i+0x7e>
 80161a0:	296f      	cmp	r1, #111	; 0x6f
 80161a2:	d020      	beq.n	80161e6 <_printf_i+0xb2>
 80161a4:	2970      	cmp	r1, #112	; 0x70
 80161a6:	d1dd      	bne.n	8016164 <_printf_i+0x30>
 80161a8:	6823      	ldr	r3, [r4, #0]
 80161aa:	f043 0320 	orr.w	r3, r3, #32
 80161ae:	6023      	str	r3, [r4, #0]
 80161b0:	e003      	b.n	80161ba <_printf_i+0x86>
 80161b2:	2975      	cmp	r1, #117	; 0x75
 80161b4:	d017      	beq.n	80161e6 <_printf_i+0xb2>
 80161b6:	2978      	cmp	r1, #120	; 0x78
 80161b8:	d1d4      	bne.n	8016164 <_printf_i+0x30>
 80161ba:	2378      	movs	r3, #120	; 0x78
 80161bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80161c0:	4864      	ldr	r0, [pc, #400]	; (8016354 <_printf_i+0x220>)
 80161c2:	e055      	b.n	8016270 <_printf_i+0x13c>
 80161c4:	6813      	ldr	r3, [r2, #0]
 80161c6:	1d19      	adds	r1, r3, #4
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	6011      	str	r1, [r2, #0]
 80161cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80161d4:	2301      	movs	r3, #1
 80161d6:	e08c      	b.n	80162f2 <_printf_i+0x1be>
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	6011      	str	r1, [r2, #0]
 80161dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80161e0:	bf18      	it	ne
 80161e2:	b21b      	sxthne	r3, r3
 80161e4:	e7cf      	b.n	8016186 <_printf_i+0x52>
 80161e6:	6813      	ldr	r3, [r2, #0]
 80161e8:	6825      	ldr	r5, [r4, #0]
 80161ea:	1d18      	adds	r0, r3, #4
 80161ec:	6010      	str	r0, [r2, #0]
 80161ee:	0628      	lsls	r0, r5, #24
 80161f0:	d501      	bpl.n	80161f6 <_printf_i+0xc2>
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	e002      	b.n	80161fc <_printf_i+0xc8>
 80161f6:	0668      	lsls	r0, r5, #25
 80161f8:	d5fb      	bpl.n	80161f2 <_printf_i+0xbe>
 80161fa:	881b      	ldrh	r3, [r3, #0]
 80161fc:	4854      	ldr	r0, [pc, #336]	; (8016350 <_printf_i+0x21c>)
 80161fe:	296f      	cmp	r1, #111	; 0x6f
 8016200:	bf14      	ite	ne
 8016202:	220a      	movne	r2, #10
 8016204:	2208      	moveq	r2, #8
 8016206:	2100      	movs	r1, #0
 8016208:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801620c:	6865      	ldr	r5, [r4, #4]
 801620e:	60a5      	str	r5, [r4, #8]
 8016210:	2d00      	cmp	r5, #0
 8016212:	f2c0 8095 	blt.w	8016340 <_printf_i+0x20c>
 8016216:	6821      	ldr	r1, [r4, #0]
 8016218:	f021 0104 	bic.w	r1, r1, #4
 801621c:	6021      	str	r1, [r4, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d13d      	bne.n	801629e <_printf_i+0x16a>
 8016222:	2d00      	cmp	r5, #0
 8016224:	f040 808e 	bne.w	8016344 <_printf_i+0x210>
 8016228:	4665      	mov	r5, ip
 801622a:	2a08      	cmp	r2, #8
 801622c:	d10b      	bne.n	8016246 <_printf_i+0x112>
 801622e:	6823      	ldr	r3, [r4, #0]
 8016230:	07db      	lsls	r3, r3, #31
 8016232:	d508      	bpl.n	8016246 <_printf_i+0x112>
 8016234:	6923      	ldr	r3, [r4, #16]
 8016236:	6862      	ldr	r2, [r4, #4]
 8016238:	429a      	cmp	r2, r3
 801623a:	bfde      	ittt	le
 801623c:	2330      	movle	r3, #48	; 0x30
 801623e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016242:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016246:	ebac 0305 	sub.w	r3, ip, r5
 801624a:	6123      	str	r3, [r4, #16]
 801624c:	f8cd 8000 	str.w	r8, [sp]
 8016250:	463b      	mov	r3, r7
 8016252:	aa03      	add	r2, sp, #12
 8016254:	4621      	mov	r1, r4
 8016256:	4630      	mov	r0, r6
 8016258:	f7ff fef6 	bl	8016048 <_printf_common>
 801625c:	3001      	adds	r0, #1
 801625e:	d14d      	bne.n	80162fc <_printf_i+0x1c8>
 8016260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016264:	b005      	add	sp, #20
 8016266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801626a:	4839      	ldr	r0, [pc, #228]	; (8016350 <_printf_i+0x21c>)
 801626c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016270:	6813      	ldr	r3, [r2, #0]
 8016272:	6821      	ldr	r1, [r4, #0]
 8016274:	1d1d      	adds	r5, r3, #4
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	6015      	str	r5, [r2, #0]
 801627a:	060a      	lsls	r2, r1, #24
 801627c:	d50b      	bpl.n	8016296 <_printf_i+0x162>
 801627e:	07ca      	lsls	r2, r1, #31
 8016280:	bf44      	itt	mi
 8016282:	f041 0120 	orrmi.w	r1, r1, #32
 8016286:	6021      	strmi	r1, [r4, #0]
 8016288:	b91b      	cbnz	r3, 8016292 <_printf_i+0x15e>
 801628a:	6822      	ldr	r2, [r4, #0]
 801628c:	f022 0220 	bic.w	r2, r2, #32
 8016290:	6022      	str	r2, [r4, #0]
 8016292:	2210      	movs	r2, #16
 8016294:	e7b7      	b.n	8016206 <_printf_i+0xd2>
 8016296:	064d      	lsls	r5, r1, #25
 8016298:	bf48      	it	mi
 801629a:	b29b      	uxthmi	r3, r3
 801629c:	e7ef      	b.n	801627e <_printf_i+0x14a>
 801629e:	4665      	mov	r5, ip
 80162a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80162a4:	fb02 3311 	mls	r3, r2, r1, r3
 80162a8:	5cc3      	ldrb	r3, [r0, r3]
 80162aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80162ae:	460b      	mov	r3, r1
 80162b0:	2900      	cmp	r1, #0
 80162b2:	d1f5      	bne.n	80162a0 <_printf_i+0x16c>
 80162b4:	e7b9      	b.n	801622a <_printf_i+0xf6>
 80162b6:	6813      	ldr	r3, [r2, #0]
 80162b8:	6825      	ldr	r5, [r4, #0]
 80162ba:	6961      	ldr	r1, [r4, #20]
 80162bc:	1d18      	adds	r0, r3, #4
 80162be:	6010      	str	r0, [r2, #0]
 80162c0:	0628      	lsls	r0, r5, #24
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	d501      	bpl.n	80162ca <_printf_i+0x196>
 80162c6:	6019      	str	r1, [r3, #0]
 80162c8:	e002      	b.n	80162d0 <_printf_i+0x19c>
 80162ca:	066a      	lsls	r2, r5, #25
 80162cc:	d5fb      	bpl.n	80162c6 <_printf_i+0x192>
 80162ce:	8019      	strh	r1, [r3, #0]
 80162d0:	2300      	movs	r3, #0
 80162d2:	6123      	str	r3, [r4, #16]
 80162d4:	4665      	mov	r5, ip
 80162d6:	e7b9      	b.n	801624c <_printf_i+0x118>
 80162d8:	6813      	ldr	r3, [r2, #0]
 80162da:	1d19      	adds	r1, r3, #4
 80162dc:	6011      	str	r1, [r2, #0]
 80162de:	681d      	ldr	r5, [r3, #0]
 80162e0:	6862      	ldr	r2, [r4, #4]
 80162e2:	2100      	movs	r1, #0
 80162e4:	4628      	mov	r0, r5
 80162e6:	f7e9 ff83 	bl	80001f0 <memchr>
 80162ea:	b108      	cbz	r0, 80162f0 <_printf_i+0x1bc>
 80162ec:	1b40      	subs	r0, r0, r5
 80162ee:	6060      	str	r0, [r4, #4]
 80162f0:	6863      	ldr	r3, [r4, #4]
 80162f2:	6123      	str	r3, [r4, #16]
 80162f4:	2300      	movs	r3, #0
 80162f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162fa:	e7a7      	b.n	801624c <_printf_i+0x118>
 80162fc:	6923      	ldr	r3, [r4, #16]
 80162fe:	462a      	mov	r2, r5
 8016300:	4639      	mov	r1, r7
 8016302:	4630      	mov	r0, r6
 8016304:	47c0      	blx	r8
 8016306:	3001      	adds	r0, #1
 8016308:	d0aa      	beq.n	8016260 <_printf_i+0x12c>
 801630a:	6823      	ldr	r3, [r4, #0]
 801630c:	079b      	lsls	r3, r3, #30
 801630e:	d413      	bmi.n	8016338 <_printf_i+0x204>
 8016310:	68e0      	ldr	r0, [r4, #12]
 8016312:	9b03      	ldr	r3, [sp, #12]
 8016314:	4298      	cmp	r0, r3
 8016316:	bfb8      	it	lt
 8016318:	4618      	movlt	r0, r3
 801631a:	e7a3      	b.n	8016264 <_printf_i+0x130>
 801631c:	2301      	movs	r3, #1
 801631e:	464a      	mov	r2, r9
 8016320:	4639      	mov	r1, r7
 8016322:	4630      	mov	r0, r6
 8016324:	47c0      	blx	r8
 8016326:	3001      	adds	r0, #1
 8016328:	d09a      	beq.n	8016260 <_printf_i+0x12c>
 801632a:	3501      	adds	r5, #1
 801632c:	68e3      	ldr	r3, [r4, #12]
 801632e:	9a03      	ldr	r2, [sp, #12]
 8016330:	1a9b      	subs	r3, r3, r2
 8016332:	42ab      	cmp	r3, r5
 8016334:	dcf2      	bgt.n	801631c <_printf_i+0x1e8>
 8016336:	e7eb      	b.n	8016310 <_printf_i+0x1dc>
 8016338:	2500      	movs	r5, #0
 801633a:	f104 0919 	add.w	r9, r4, #25
 801633e:	e7f5      	b.n	801632c <_printf_i+0x1f8>
 8016340:	2b00      	cmp	r3, #0
 8016342:	d1ac      	bne.n	801629e <_printf_i+0x16a>
 8016344:	7803      	ldrb	r3, [r0, #0]
 8016346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801634a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801634e:	e76c      	b.n	801622a <_printf_i+0xf6>
 8016350:	08018951 	.word	0x08018951
 8016354:	08018962 	.word	0x08018962

08016358 <__sread>:
 8016358:	b510      	push	{r4, lr}
 801635a:	460c      	mov	r4, r1
 801635c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016360:	f000 f894 	bl	801648c <_read_r>
 8016364:	2800      	cmp	r0, #0
 8016366:	bfab      	itete	ge
 8016368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801636a:	89a3      	ldrhlt	r3, [r4, #12]
 801636c:	181b      	addge	r3, r3, r0
 801636e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016372:	bfac      	ite	ge
 8016374:	6563      	strge	r3, [r4, #84]	; 0x54
 8016376:	81a3      	strhlt	r3, [r4, #12]
 8016378:	bd10      	pop	{r4, pc}

0801637a <__swrite>:
 801637a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801637e:	461f      	mov	r7, r3
 8016380:	898b      	ldrh	r3, [r1, #12]
 8016382:	05db      	lsls	r3, r3, #23
 8016384:	4605      	mov	r5, r0
 8016386:	460c      	mov	r4, r1
 8016388:	4616      	mov	r6, r2
 801638a:	d505      	bpl.n	8016398 <__swrite+0x1e>
 801638c:	2302      	movs	r3, #2
 801638e:	2200      	movs	r2, #0
 8016390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016394:	f000 f868 	bl	8016468 <_lseek_r>
 8016398:	89a3      	ldrh	r3, [r4, #12]
 801639a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801639e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163a2:	81a3      	strh	r3, [r4, #12]
 80163a4:	4632      	mov	r2, r6
 80163a6:	463b      	mov	r3, r7
 80163a8:	4628      	mov	r0, r5
 80163aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163ae:	f000 b817 	b.w	80163e0 <_write_r>

080163b2 <__sseek>:
 80163b2:	b510      	push	{r4, lr}
 80163b4:	460c      	mov	r4, r1
 80163b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163ba:	f000 f855 	bl	8016468 <_lseek_r>
 80163be:	1c43      	adds	r3, r0, #1
 80163c0:	89a3      	ldrh	r3, [r4, #12]
 80163c2:	bf15      	itete	ne
 80163c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80163c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80163ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80163ce:	81a3      	strheq	r3, [r4, #12]
 80163d0:	bf18      	it	ne
 80163d2:	81a3      	strhne	r3, [r4, #12]
 80163d4:	bd10      	pop	{r4, pc}

080163d6 <__sclose>:
 80163d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163da:	f000 b813 	b.w	8016404 <_close_r>
	...

080163e0 <_write_r>:
 80163e0:	b538      	push	{r3, r4, r5, lr}
 80163e2:	4c07      	ldr	r4, [pc, #28]	; (8016400 <_write_r+0x20>)
 80163e4:	4605      	mov	r5, r0
 80163e6:	4608      	mov	r0, r1
 80163e8:	4611      	mov	r1, r2
 80163ea:	2200      	movs	r2, #0
 80163ec:	6022      	str	r2, [r4, #0]
 80163ee:	461a      	mov	r2, r3
 80163f0:	f7fd fdb3 	bl	8013f5a <_write>
 80163f4:	1c43      	adds	r3, r0, #1
 80163f6:	d102      	bne.n	80163fe <_write_r+0x1e>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	b103      	cbz	r3, 80163fe <_write_r+0x1e>
 80163fc:	602b      	str	r3, [r5, #0]
 80163fe:	bd38      	pop	{r3, r4, r5, pc}
 8016400:	200084f8 	.word	0x200084f8

08016404 <_close_r>:
 8016404:	b538      	push	{r3, r4, r5, lr}
 8016406:	4c06      	ldr	r4, [pc, #24]	; (8016420 <_close_r+0x1c>)
 8016408:	2300      	movs	r3, #0
 801640a:	4605      	mov	r5, r0
 801640c:	4608      	mov	r0, r1
 801640e:	6023      	str	r3, [r4, #0]
 8016410:	f7fd fdb4 	bl	8013f7c <_close>
 8016414:	1c43      	adds	r3, r0, #1
 8016416:	d102      	bne.n	801641e <_close_r+0x1a>
 8016418:	6823      	ldr	r3, [r4, #0]
 801641a:	b103      	cbz	r3, 801641e <_close_r+0x1a>
 801641c:	602b      	str	r3, [r5, #0]
 801641e:	bd38      	pop	{r3, r4, r5, pc}
 8016420:	200084f8 	.word	0x200084f8

08016424 <_fstat_r>:
 8016424:	b538      	push	{r3, r4, r5, lr}
 8016426:	4c07      	ldr	r4, [pc, #28]	; (8016444 <_fstat_r+0x20>)
 8016428:	2300      	movs	r3, #0
 801642a:	4605      	mov	r5, r0
 801642c:	4608      	mov	r0, r1
 801642e:	4611      	mov	r1, r2
 8016430:	6023      	str	r3, [r4, #0]
 8016432:	f7fd fdaf 	bl	8013f94 <_fstat>
 8016436:	1c43      	adds	r3, r0, #1
 8016438:	d102      	bne.n	8016440 <_fstat_r+0x1c>
 801643a:	6823      	ldr	r3, [r4, #0]
 801643c:	b103      	cbz	r3, 8016440 <_fstat_r+0x1c>
 801643e:	602b      	str	r3, [r5, #0]
 8016440:	bd38      	pop	{r3, r4, r5, pc}
 8016442:	bf00      	nop
 8016444:	200084f8 	.word	0x200084f8

08016448 <_isatty_r>:
 8016448:	b538      	push	{r3, r4, r5, lr}
 801644a:	4c06      	ldr	r4, [pc, #24]	; (8016464 <_isatty_r+0x1c>)
 801644c:	2300      	movs	r3, #0
 801644e:	4605      	mov	r5, r0
 8016450:	4608      	mov	r0, r1
 8016452:	6023      	str	r3, [r4, #0]
 8016454:	f7fd fdae 	bl	8013fb4 <_isatty>
 8016458:	1c43      	adds	r3, r0, #1
 801645a:	d102      	bne.n	8016462 <_isatty_r+0x1a>
 801645c:	6823      	ldr	r3, [r4, #0]
 801645e:	b103      	cbz	r3, 8016462 <_isatty_r+0x1a>
 8016460:	602b      	str	r3, [r5, #0]
 8016462:	bd38      	pop	{r3, r4, r5, pc}
 8016464:	200084f8 	.word	0x200084f8

08016468 <_lseek_r>:
 8016468:	b538      	push	{r3, r4, r5, lr}
 801646a:	4c07      	ldr	r4, [pc, #28]	; (8016488 <_lseek_r+0x20>)
 801646c:	4605      	mov	r5, r0
 801646e:	4608      	mov	r0, r1
 8016470:	4611      	mov	r1, r2
 8016472:	2200      	movs	r2, #0
 8016474:	6022      	str	r2, [r4, #0]
 8016476:	461a      	mov	r2, r3
 8016478:	f7fd fda7 	bl	8013fca <_lseek>
 801647c:	1c43      	adds	r3, r0, #1
 801647e:	d102      	bne.n	8016486 <_lseek_r+0x1e>
 8016480:	6823      	ldr	r3, [r4, #0]
 8016482:	b103      	cbz	r3, 8016486 <_lseek_r+0x1e>
 8016484:	602b      	str	r3, [r5, #0]
 8016486:	bd38      	pop	{r3, r4, r5, pc}
 8016488:	200084f8 	.word	0x200084f8

0801648c <_read_r>:
 801648c:	b538      	push	{r3, r4, r5, lr}
 801648e:	4c07      	ldr	r4, [pc, #28]	; (80164ac <_read_r+0x20>)
 8016490:	4605      	mov	r5, r0
 8016492:	4608      	mov	r0, r1
 8016494:	4611      	mov	r1, r2
 8016496:	2200      	movs	r2, #0
 8016498:	6022      	str	r2, [r4, #0]
 801649a:	461a      	mov	r2, r3
 801649c:	f7fd fd40 	bl	8013f20 <_read>
 80164a0:	1c43      	adds	r3, r0, #1
 80164a2:	d102      	bne.n	80164aa <_read_r+0x1e>
 80164a4:	6823      	ldr	r3, [r4, #0]
 80164a6:	b103      	cbz	r3, 80164aa <_read_r+0x1e>
 80164a8:	602b      	str	r3, [r5, #0]
 80164aa:	bd38      	pop	{r3, r4, r5, pc}
 80164ac:	200084f8 	.word	0x200084f8

080164b0 <_init>:
 80164b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b2:	bf00      	nop
 80164b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80164b6:	bc08      	pop	{r3}
 80164b8:	469e      	mov	lr, r3
 80164ba:	4770      	bx	lr

080164bc <_fini>:
 80164bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164be:	bf00      	nop
 80164c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80164c2:	bc08      	pop	{r3}
 80164c4:	469e      	mov	lr, r3
 80164c6:	4770      	bx	lr
